
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017068  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00020670  080171f8  080171f8  000271f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037868  08037868  00050400  2**0
                  CONTENTS
  4 .ARM          00000000  08037868  08037868  00050400  2**0
                  CONTENTS
  5 .preinit_array 00000000  08037868  08037868  00050400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08037868  08037868  00047868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803786c  0803786c  0004786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  08037870  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00050400  2**0
                  CONTENTS
 10 .bss          00002954  20000400  20000400  00050400  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002d54  20002d54  00050400  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050400  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00050430  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023eb2  00000000  00000000  00050473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000058dd  00000000  00000000  00074325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000020b8  00000000  00000000  00079c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000018ea  00000000  00000000  0007bcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025e38  00000000  00000000  0007d5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002c7f0  00000000  00000000  000a33e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc120  00000000  00000000  000cfbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009e54  00000000  00000000  0019bcf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  001a5b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000400 	.word	0x20000400
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080171e0 	.word	0x080171e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000404 	.word	0x20000404
 80001cc:	080171e0 	.word	0x080171e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000c96:	0adb      	lsrs	r3, r3, #11
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <FlashCheckCRC>:

bool FlashCheckCRC()
{
 8000ca4:	b5b0      	push	{r4, r5, r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <FlashCheckCRC+0x70>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f023 0307 	bic.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <FlashCheckCRC+0x70>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d002      	beq.n	8000cd2 <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3308      	adds	r3, #8
 8000cd0:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <FlashCheckCRC+0x70>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	490f      	ldr	r1, [pc, #60]	; (8000d18 <FlashCheckCRC+0x74>)
 8000cda:	4810      	ldr	r0, [pc, #64]	; (8000d1c <FlashCheckCRC+0x78>)
 8000cdc:	f005 fdf6 	bl	80068cc <HAL_CRC_Calculate>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	461c      	mov	r4, r3
 8000ce6:	4615      	mov	r5, r2
 8000ce8:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000cf2:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8000cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	bf08      	it	eq
 8000d02:	4290      	cmpeq	r0, r2
 8000d04:	d101      	bne.n	8000d0a <FlashCheckCRC+0x66>
	{
		return true;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <FlashCheckCRC+0x68>
	}
	return false;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bdb0      	pop	{r4, r5, r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	0801e800 	.word	0x0801e800
 8000d1c:	20001644 	.word	0x20001644

08000d20 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
	int i = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <FlashReadToBuf+0x88>)
 8000d2c:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 8000d2e:	f7ff ffb9 	bl	8000ca4 <FlashCheckCRC>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d031      	beq.n	8000d9c <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8000d38:	e025      	b.n	8000d86 <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1d39      	adds	r1, r7, #4
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	e013      	b.n	8000d74 <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	4413      	add	r3, r2
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <FlashReadToBuf+0x8c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d208      	bcs.n	8000d6e <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4413      	add	r3, r2
 8000d62:	1d39      	adds	r1, r7, #4
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	440a      	add	r2, r1
 8000d68:	7811      	ldrb	r1, [r2, #0]
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <FlashReadToBuf+0x90>)
 8000d6c:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	dde8      	ble.n	8000d4c <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	3308      	adds	r3, #8
 8000d7e:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3308      	adds	r3, #8
 8000d84:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <FlashReadToBuf+0x8c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d203      	bcs.n	8000d98 <FlashReadToBuf+0x78>
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <FlashReadToBuf+0x94>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d3d0      	bcc.n	8000d3a <FlashReadToBuf+0x1a>
		}
		return true;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <FlashReadToBuf+0x7e>
	}
	return false;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	0801e800 	.word	0x0801e800
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000420 	.word	0x20000420
 8000db4:	0801ffff 	.word	0x0801ffff

08000db8 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 8000db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dbc:	b08d      	sub	sp, #52	; 0x34
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 8000dc2:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <FlashWrite+0x178>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 8000dd8:	4b56      	ldr	r3, [pc, #344]	; (8000f34 <FlashWrite+0x17c>)
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 8000df0:	f7ff ff96 	bl	8000d20 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 8000df4:	4a50      	ldr	r2, [pc, #320]	; (8000f38 <FlashWrite+0x180>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	461c      	mov	r4, r3
 8000dfa:	4616      	mov	r6, r2
 8000dfc:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000e00:	4635      	mov	r5, r6
 8000e02:	4623      	mov	r3, r4
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	6859      	ldr	r1, [r3, #4]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e0e:	3410      	adds	r4, #16
 8000e10:	3610      	adds	r6, #16
 8000e12:	4564      	cmp	r4, ip
 8000e14:	d1f4      	bne.n	8000e00 <FlashWrite+0x48>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <FlashWrite+0x184>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4946      	ldr	r1, [pc, #280]	; (8000f38 <FlashWrite+0x180>)
 8000e1e:	4848      	ldr	r0, [pc, #288]	; (8000f40 <FlashWrite+0x188>)
 8000e20:	f005 fd54 	bl	80068cc <HAL_CRC_Calculate>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2200      	movs	r2, #0
 8000e28:	4698      	mov	r8, r3
 8000e2a:	4691      	mov	r9, r2
 8000e2c:	e9c7 8906 	strd	r8, r9, [r7, #24]

	HAL_FLASH_Unlock();
 8000e30:	f006 f91e 	bl	8007070 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8000e34:	4843      	ldr	r0, [pc, #268]	; (8000f44 <FlashWrite+0x18c>)
 8000e36:	f7ff ff27 	bl	8000c88 <GetPage>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	483d      	ldr	r0, [pc, #244]	; (8000f34 <FlashWrite+0x17c>)
 8000e3e:	f7ff ff23 	bl	8000c88 <GetPage>
 8000e42:	4603      	mov	r3, r0
 8000e44:	1ae3      	subs	r3, r4, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	//EraseInitStruct.Banks = FLASH_BANK_1;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000e4a:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <FlashWrite+0x190>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = GetPage(FLASH_USER_START_ADDR);
 8000e50:	4838      	ldr	r0, [pc, #224]	; (8000f34 <FlashWrite+0x17c>)
 8000e52:	f7ff ff19 	bl	8000c88 <GetPage>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a3b      	ldr	r2, [pc, #236]	; (8000f48 <FlashWrite+0x190>)
 8000e5a:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbPages = NbOfPages;
 8000e5c:	4a3a      	ldr	r2, [pc, #232]	; (8000f48 <FlashWrite+0x190>)
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	6093      	str	r3, [r2, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4837      	ldr	r0, [pc, #220]	; (8000f48 <FlashWrite+0x190>)
 8000e6a:	f006 f9c5 	bl	80071f8 <HAL_FLASHEx_Erase>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d152      	bne.n	8000f1a <FlashWrite+0x162>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 8000e74:	e04b      	b.n	8000f0e <FlashWrite+0x156>
		{
			for (int j = 0; j < 8; j++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	e01b      	b.n	8000eb4 <FlashWrite+0xfc>
			{
				if (j + i < bufLength)
 8000e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e80:	4413      	add	r3, r2
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <FlashWrite+0x184>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d20a      	bcs.n	8000ea2 <FlashWrite+0xea>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8000e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	441a      	add	r2, r3
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	f107 0108 	add.w	r1, r7, #8
 8000e98:	440b      	add	r3, r1
 8000e9a:	4927      	ldr	r1, [pc, #156]	; (8000f38 <FlashWrite+0x180>)
 8000e9c:	5c8a      	ldrb	r2, [r1, r2]
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e005      	b.n	8000eae <FlashWrite+0xf6>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	f107 0208 	add.w	r2, r7, #8
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	2b07      	cmp	r3, #7
 8000eb8:	dde0      	ble.n	8000e7c <FlashWrite+0xc4>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 8000eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <FlashWrite+0x184>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d20f      	bcs.n	8000ee4 <FlashWrite+0x12c>
 8000ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f006 f860 	bl	8006f90 <HAL_FLASH_Program>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d106      	bne.n	8000ee4 <FlashWrite+0x12c>
			{
				Address = Address + 8;
 8000ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed8:	3308      	adds	r3, #8
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 8000edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ede:	3308      	adds	r3, #8
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ee2:	e014      	b.n	8000f0e <FlashWrite+0x156>
			}
			else if (i >= bufLength)
 8000ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <FlashWrite+0x184>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d314      	bcc.n	8000f18 <FlashWrite+0x160>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 8000eee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f006 f84b 	bl	8006f90 <HAL_FLASH_Program>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d106      	bne.n	8000f0e <FlashWrite+0x156>
				{
					HAL_FLASH_Lock();
 8000f00:	f006 f8dc 	bl	80070bc <HAL_FLASH_Lock>
					flashWriting = 0;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <FlashWrite+0x178>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
					return true;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00b      	b.n	8000f26 <FlashWrite+0x16e>
		while (Address < FLASH_USER_END_ADDR)
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <FlashWrite+0x18c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d3af      	bcc.n	8000e76 <FlashWrite+0xbe>
 8000f16:	e000      	b.n	8000f1a <FlashWrite+0x162>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 8000f18:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000f1a:	f006 f8cf 	bl	80070bc <HAL_FLASH_Lock>

	flashWriting = 0;
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <FlashWrite+0x178>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	return false;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3734      	adds	r7, #52	; 0x34
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f30:	2000041c 	.word	0x2000041c
 8000f34:	0801e800 	.word	0x0801e800
 8000f38:	20000420 	.word	0x20000420
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20001644 	.word	0x20001644
 8000f44:	0801ffff 	.word	0x0801ffff
 8000f48:	20000450 	.word	0x20000450

08000f4c <clamp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

double clamp(double d, double min, double max) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	ed87 0b04 	vstr	d0, [r7, #16]
 8000f56:	ed87 1b02 	vstr	d1, [r7, #8]
 8000f5a:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8000f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f66:	f7ff fdb9 	bl	8000adc <__aeabi_dcmplt>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <clamp+0x2a>
 8000f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f74:	e001      	b.n	8000f7a <clamp+0x2e>
 8000f76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8000f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f86:	f7ff fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <clamp+0x4a>
 8000f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f94:	e001      	b.n	8000f9a <clamp+0x4e>
 8000f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f9a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f9e:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa2:	eef0 0a67 	vmov.f32	s1, s15
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	02db      	lsls	r3, r3, #11
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	b29b      	uxth	r3, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <get_mean_ADC_reading>:
	return ADC_filter_mean/adc_buffer_len;
}


/* Returns the average ADC_buffer vector */
float get_mean_ADC_reading(uint16_t *adc_buffer , uint8_t adc_buffer_len){
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
	ADC_filter_mean = 0;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <get_mean_ADC_reading+0x70>)
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
	for(uint8_t n=index;n<adc_buffer_len;n=n+1){
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <get_mean_ADC_reading+0x74>)
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e013      	b.n	800101a <get_mean_ADC_reading+0x42>
		ADC_filter_mean += adc_buffer[n];
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <get_mean_ADC_reading+0x70>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <get_mean_ADC_reading+0x70>)
 8001010:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t n=index;n<adc_buffer_len;n=n+1){
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	3301      	adds	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	429a      	cmp	r2, r3
 8001020:	d3e7      	bcc.n	8000ff2 <get_mean_ADC_reading+0x1a>
	}
	return ADC_filter_mean/adc_buffer_len;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <get_mean_ADC_reading+0x70>)
 8001024:	ed93 7a00 	vldr	s14, [r3]
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001032:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001036:	eef0 7a66 	vmov.f32	s15, s13
}
 800103a:	eeb0 0a67 	vmov.f32	s0, s15
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	200004c4 	.word	0x200004c4
 800104c:	08013e5b 	.word	0x08013e5b

08001050 <get_bus_voltage>:

void get_bus_voltage(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading(ADC_BUF_VIN, ADC_BUF_VIN_LEN), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION; /* Moving average filter */
 8001054:	2132      	movs	r1, #50	; 0x32
 8001056:	4812      	ldr	r0, [pc, #72]	; (80010a0 <get_bus_voltage+0x50>)
 8001058:	f7ff ffbe 	bl	8000fd8 <get_mean_ADC_reading>
 800105c:	eef0 7a40 	vmov.f32	s15, s0
 8001060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001064:	490f      	ldr	r1, [pc, #60]	; (80010a4 <get_bus_voltage+0x54>)
 8001066:	ee17 0a90 	vmov	r0, s15
 800106a:	f001 ff8d 	bl	8002f88 <Moving_Average_Compute>
 800106e:	ec51 0b10 	vmov	r0, r1, d0
 8001072:	a309      	add	r3, pc, #36	; (adr r3, 8001098 <get_bus_voltage+0x48>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fabe 	bl	80005f8 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fdb0 	bl	8000be8 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <get_bus_voltage+0x58>)
 800108c:	6113      	str	r3, [r2, #16]
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	f3af 8000 	nop.w
 8001098:	2e062cfe 	.word	0x2e062cfe
 800109c:	3f7e5d97 	.word	0x3f7e5d97
 80010a0:	200004c8 	.word	0x200004c8
 80010a4:	200008b0 	.word	0x200008b0
 80010a8:	20000028 	.word	0x20000028
 80010ac:	00000000 	.word	0x00000000

080010b0 <get_actual_temperature>:

void get_actual_temperature(){
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	float TC_temperature_temp = Moving_Average_Compute(1111111, &actual_temperature_filter_struct); /* Moving average filter */
 80010b6:	4980      	ldr	r1, [pc, #512]	; (80012b8 <get_actual_temperature+0x208>)
 80010b8:	4880      	ldr	r0, [pc, #512]	; (80012bc <get_actual_temperature+0x20c>)
 80010ba:	f001 ff65 	bl	8002f88 <Moving_Average_Compute>
 80010be:	ec53 2b10 	vmov	r2, r3, d0
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fd8f 	bl	8000be8 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	607b      	str	r3, [r7, #4]
	if(handle == T210){
 80010ce:	4b7c      	ldr	r3, [pc, #496]	; (80012c0 <get_actual_temperature+0x210>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d14e      	bne.n	8001174 <get_actual_temperature+0xc4>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fa36 	bl	8000548 <__aeabi_f2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8001260 <get_actual_temperature+0x1b0>
 80010e4:	ec43 2b10 	vmov	d0, r2, r3
 80010e8:	f014 ffec 	bl	80160c4 <pow>
 80010ec:	ec51 0b10 	vmov	r0, r1, d0
 80010f0:	a35d      	add	r3, pc, #372	; (adr r3, 8001268 <get_actual_temperature+0x1b8>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4614      	mov	r4, r2
 8001100:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fa20 	bl	8000548 <__aeabi_f2d>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8001270 <get_actual_temperature+0x1c0>
 8001110:	ec43 2b10 	vmov	d0, r2, r3
 8001114:	f014 ffd6 	bl	80160c4 <pow>
 8001118:	ec51 0b10 	vmov	r0, r1, d0
 800111c:	a356      	add	r3, pc, #344	; (adr r3, 8001278 <get_actual_temperature+0x1c8>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff fa69 	bl	80005f8 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7ff f8ad 	bl	800028c <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4614      	mov	r4, r2
 8001138:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	a34f      	add	r3, pc, #316	; (adr r3, 8001280 <get_actual_temperature+0x1d0>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa57 	bl	80005f8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff f89b 	bl	800028c <__adddf3>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	a34a      	add	r3, pc, #296	; (adr r3, 8001288 <get_actual_temperature+0x1d8>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff f892 	bl	800028c <__adddf3>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 800116c:	4955      	ldr	r1, [pc, #340]	; (80012c4 <get_actual_temperature+0x214>)
 800116e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001172:	e051      	b.n	8001218 <get_actual_temperature+0x168>
	}
	else if(handle == T245){
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <get_actual_temperature+0x210>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d14d      	bne.n	8001218 <get_actual_temperature+0x168>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff f9e3 	bl	8000548 <__aeabi_f2d>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8001260 <get_actual_temperature+0x1b0>
 800118a:	ec43 2b10 	vmov	d0, r2, r3
 800118e:	f014 ff99 	bl	80160c4 <pow>
 8001192:	ec51 0b10 	vmov	r0, r1, d0
 8001196:	a33e      	add	r3, pc, #248	; (adr r3, 8001290 <get_actual_temperature+0x1e0>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4614      	mov	r4, r2
 80011a6:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff f9cd 	bl	8000548 <__aeabi_f2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001270 <get_actual_temperature+0x1c0>
 80011b6:	ec43 2b10 	vmov	d0, r2, r3
 80011ba:	f014 ff83 	bl	80160c4 <pow>
 80011be:	ec51 0b10 	vmov	r0, r1, d0
 80011c2:	a335      	add	r3, pc, #212	; (adr r3, 8001298 <get_actual_temperature+0x1e8>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fa16 	bl	80005f8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 80011d0:	4620      	mov	r0, r4
 80011d2:	4629      	mov	r1, r5
 80011d4:	f7ff f85a 	bl	800028c <__adddf3>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4614      	mov	r4, r2
 80011de:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff f9b1 	bl	8000548 <__aeabi_f2d>
 80011e6:	a32e      	add	r3, pc, #184	; (adr r3, 80012a0 <get_actual_temperature+0x1f0>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f848 	bl	800028c <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	a328      	add	r3, pc, #160	; (adr r3, 80012a8 <get_actual_temperature+0x1f8>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff f83f 	bl	800028c <__adddf3>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 8001212:	492c      	ldr	r1, [pc, #176]	; (80012c4 <get_actual_temperature+0x214>)
 8001214:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.actual_temperature = sensor_values.actual_temperature + flash_values.temperature_offset; // Add temperature offset value
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <get_actual_temperature+0x214>)
 800121a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <get_actual_temperature+0x218>)
 8001220:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001224:	f7ff f832 	bl	800028c <__adddf3>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4925      	ldr	r1, [pc, #148]	; (80012c4 <get_actual_temperature+0x214>)
 800122e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if(sensor_values.actual_temperature > 999){
 8001232:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <get_actual_temperature+0x214>)
 8001234:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001238:	a31d      	add	r3, pc, #116	; (adr r3, 80012b0 <get_actual_temperature+0x200>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff fc6b 	bl	8000b18 <__aeabi_dcmpgt>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d100      	bne.n	800124a <get_actual_temperature+0x19a>
		sensor_values.actual_temperature = 999;
	}
}
 8001248:	e005      	b.n	8001256 <get_actual_temperature+0x1a6>
		sensor_values.actual_temperature = 999;
 800124a:	491e      	ldr	r1, [pc, #120]	; (80012c4 <get_actual_temperature+0x214>)
 800124c:	a318      	add	r3, pc, #96	; (adr r3, 80012b0 <get_actual_temperature+0x200>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bdb0      	pop	{r4, r5, r7, pc}
 800125e:	bf00      	nop
 8001260:	00000000 	.word	0x00000000
 8001264:	40080000 	.word	0x40080000
 8001268:	e6c91459 	.word	0xe6c91459
 800126c:	be3d333c 	.word	0xbe3d333c
 8001270:	00000000 	.word	0x00000000
 8001274:	40000000 	.word	0x40000000
 8001278:	77c4dab0 	.word	0x77c4dab0
 800127c:	bed98561 	.word	0xbed98561
 8001280:	0aa653bc 	.word	0x0aa653bc
 8001284:	3fd1585a 	.word	0x3fd1585a
 8001288:	d797deed 	.word	0xd797deed
 800128c:	40396624 	.word	0x40396624
 8001290:	b4effad8 	.word	0xb4effad8
 8001294:	3e21f933 	.word	0x3e21f933
 8001298:	c7e1dac1 	.word	0xc7e1dac1
 800129c:	bee97525 	.word	0xbee97525
 80012a0:	8d8ee863 	.word	0x8d8ee863
 80012a4:	3fbe16b0 	.word	0x3fbe16b0
 80012a8:	7373b751 	.word	0x7373b751
 80012ac:	40390d47 	.word	0x40390d47
 80012b0:	00000000 	.word	0x00000000
 80012b4:	408f3800 	.word	0x408f3800
 80012b8:	20000584 	.word	0x20000584
 80012bc:	0010f447 	.word	0x0010f447
 80012c0:	2000045c 	.word	0x2000045c
 80012c4:	20000028 	.word	0x20000028
 80012c8:	20000538 	.word	0x20000538

080012cc <debugPrint>:

void debugPrint(char _out[]){
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS((uint8_t *) _out, strlen(_out));
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <update_display>:

void update_display(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af02      	add	r7, sp, #8
	memset(&buffer, '\0', sizeof(buffer));
 80012e6:	2228      	movs	r2, #40	; 0x28
 80012e8:	2100      	movs	r1, #0
 80012ea:	483b      	ldr	r0, [pc, #236]	; (80013d8 <update_display+0xf8>)
 80012ec:	f012 fdb7 	bl	8013e5e <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 80012f0:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <update_display+0xfc>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	493a      	ldr	r1, [pc, #232]	; (80013e0 <update_display+0x100>)
 80012f8:	4837      	ldr	r0, [pc, #220]	; (80013d8 <update_display+0xf8>)
 80012fa:	f012 fd4b 	bl	8013d94 <siprintf>
	if(sensor_values.set_temperature<100){
 80012fe:	4b37      	ldr	r3, [pc, #220]	; (80013dc <update_display+0xfc>)
 8001300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <update_display+0x104>)
 800130a:	f7ff fbe7 	bl	8000adc <__aeabi_dcmplt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <update_display+0x40>
		buffer[2] = 32;
 8001314:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <update_display+0xf8>)
 8001316:	2220      	movs	r2, #32
 8001318:	709a      	strb	r2, [r3, #2]
		buffer[3] = 32;
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <update_display+0xf8>)
 800131c:	2220      	movs	r2, #32
 800131e:	70da      	strb	r2, [r3, #3]
	}
  	LCD_PutStr(10, 85, buffer, FONT_arial_49X57, RGB_to_BRG(C_WHITE), C_BLACK);
 8001320:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001324:	f7ff fe42 	bl	8000fac <RGB_to_BRG>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	2300      	movs	r3, #0
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <update_display+0x108>)
 8001334:	4a28      	ldr	r2, [pc, #160]	; (80013d8 <update_display+0xf8>)
 8001336:	2155      	movs	r1, #85	; 0x55
 8001338:	200a      	movs	r0, #10
 800133a:	f003 f9f9 	bl	8004730 <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 800133e:	2228      	movs	r2, #40	; 0x28
 8001340:	2100      	movs	r1, #0
 8001342:	4825      	ldr	r0, [pc, #148]	; (80013d8 <update_display+0xf8>)
 8001344:	f012 fd8b 	bl	8013e5e <memset>
	sprintf(buffer, "%.1f V", sensor_values.bus_voltage);
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <update_display+0xfc>)
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8fb 	bl	8000548 <__aeabi_f2d>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4925      	ldr	r1, [pc, #148]	; (80013ec <update_display+0x10c>)
 8001358:	481f      	ldr	r0, [pc, #124]	; (80013d8 <update_display+0xf8>)
 800135a:	f012 fd1b 	bl	8013d94 <siprintf>
	LCD_PutStr(100, 280, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), C_BLACK);
 800135e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001362:	f7ff fe23 	bl	8000fac <RGB_to_BRG>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	2300      	movs	r3, #0
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	9200      	str	r2, [sp, #0]
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <update_display+0x110>)
 8001372:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <update_display+0xf8>)
 8001374:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001378:	2064      	movs	r0, #100	; 0x64
 800137a:	f003 f9d9 	bl	8004730 <LCD_PutStr>


	if(handle == T210){
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <update_display+0x114>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d110      	bne.n	80013a8 <update_display+0xc8>
		LCD_PutStr(100, 280, "T210", FONT_arial_16X18, RGB_to_BRG(C_WHITE), C_BLACK);
 8001386:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800138a:	f7ff fe0f 	bl	8000fac <RGB_to_BRG>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	2300      	movs	r3, #0
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	9200      	str	r2, [sp, #0]
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <update_display+0x110>)
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <update_display+0x118>)
 800139c:	f44f 718c 	mov.w	r1, #280	; 0x118
 80013a0:	2064      	movs	r0, #100	; 0x64
 80013a2:	f003 f9c5 	bl	8004730 <LCD_PutStr>
	}
	Show image on page
	OLED_1in5_Display(black_image);
	Paint_Clear(BLACK);
	*/
}
 80013a6:	e013      	b.n	80013d0 <update_display+0xf0>
	else if(handle == T245){
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <update_display+0x114>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d10f      	bne.n	80013d0 <update_display+0xf0>
		LCD_PutStr(100, 260, "T245", FONT_arial_16X18, RGB_to_BRG(C_WHITE), C_BLACK);
 80013b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013b4:	f7ff fdfa 	bl	8000fac <RGB_to_BRG>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	2300      	movs	r3, #0
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	9200      	str	r2, [sp, #0]
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <update_display+0x110>)
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <update_display+0x11c>)
 80013c6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80013ca:	2064      	movs	r0, #100	; 0x64
 80013cc:	f003 f9b0 	bl	8004730 <LCD_PutStr>
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000498 	.word	0x20000498
 80013dc:	20000028 	.word	0x20000028
 80013e0:	080171f8 	.word	0x080171f8
 80013e4:	40590000 	.word	0x40590000
 80013e8:	08024ba4 	.word	0x08024ba4
 80013ec:	080171fc 	.word	0x080171fc
 80013f0:	08017374 	.word	0x08017374
 80013f4:	2000045c 	.word	0x2000045c
 80013f8:	08017204 	.word	0x08017204
 80013fc:	0801720c 	.word	0x0801720c

08001400 <get_set_temperature>:

/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8001400:	b598      	push	{r3, r4, r7, lr}
 8001402:	af00      	add	r7, sp, #0
	TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8001404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f87a 	bl	8000504 <__aeabi_ui2d>
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <get_set_temperature+0x64>)
 8001412:	ed93 7b00 	vldr	d7, [r3]
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <get_set_temperature+0x68>)
 8001418:	ed93 6b00 	vldr	d6, [r3]
 800141c:	eeb0 2a46 	vmov.f32	s4, s12
 8001420:	eef0 2a66 	vmov.f32	s5, s13
 8001424:	eeb0 1a47 	vmov.f32	s2, s14
 8001428:	eef0 1a67 	vmov.f32	s3, s15
 800142c:	ec41 0b10 	vmov	d0, r0, r1
 8001430:	f7ff fd8c 	bl	8000f4c <clamp>
 8001434:	ec53 2b10 	vmov	r2, r3, d0
 8001438:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fbb2 	bl	8000ba8 <__aeabi_d2uiz>
 8001444:	4603      	mov	r3, r0
 8001446:	6263      	str	r3, [r4, #36]	; 0x24
	sensor_values.set_temperature = TIM2->CNT;
 8001448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f858 	bl	8000504 <__aeabi_ui2d>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4904      	ldr	r1, [pc, #16]	; (800146c <get_set_temperature+0x6c>)
 800145a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800145e:	bf00      	nop
 8001460:	bd98      	pop	{r3, r4, r7, pc}
 8001462:	bf00      	nop
 8001464:	20000020 	.word	0x20000020
 8001468:	20000530 	.word	0x20000530
 800146c:	20000028 	.word	0x20000028

08001470 <beep>:

/* Beep the buzzer */
void beep(){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	//if(flash_values.buzzer_enable){
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <beep+0x18>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2232      	movs	r2, #50	; 0x32
 800147a:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_Base_Start_IT(&htim6);
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <beep+0x1c>)
 800147e:	f00a f84b 	bl	800b518 <HAL_TIM_Base_Start_IT>
		  //HAL_TIM_OnePulse_Start_IT(&htim6, TIM_CHANNEL_1);
		//HAL_Delay(beep_time_ms);
		//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
	//}
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20001764 	.word	0x20001764
 800148c:	20001848 	.word	0x20001848

08001490 <check_beep>:

/* Create a beep is beep is requested */
void check_beep(){
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	if(beep_requested){
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <check_beep+0x1c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <check_beep+0x16>
		beep();
 800149c:	f7ff ffe8 	bl	8001470 <beep>
		beep_requested = 0;
 80014a0:	4b02      	ldr	r3, [pc, #8]	; (80014ac <check_beep+0x1c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
	}
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000045d 	.word	0x2000045d

080014b0 <check_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void check_emergency_shutdown(){
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	/* Function to set state to EMERGENCY_SLEEP if iron is in RUN state for longer than EMERGENCY_shutdown_time */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <check_emergency_shutdown+0xd0>)
 80014b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <check_emergency_shutdown+0x20>
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <check_emergency_shutdown+0xd4>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d104      	bne.n	80014d0 <check_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 80014c6:	f003 fa35 	bl	8004934 <HAL_GetTick>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a2e      	ldr	r2, [pc, #184]	; (8001588 <check_emergency_shutdown+0xd8>)
 80014ce:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <check_emergency_shutdown+0xd0>)
 80014d2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	f7ff faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d025      	beq.n	8001534 <check_emergency_shutdown+0x84>
 80014e8:	f003 fa24 	bl	8004934 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <check_emergency_shutdown+0xd8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f805 	bl	8000504 <__aeabi_ui2d>
 80014fa:	4604      	mov	r4, r0
 80014fc:	460d      	mov	r5, r1
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <check_emergency_shutdown+0xdc>)
 8001500:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001504:	a31a      	add	r3, pc, #104	; (adr r3, 8001570 <check_emergency_shutdown+0xc0>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f875 	bl	80005f8 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4620      	mov	r0, r4
 8001514:	4629      	mov	r1, r5
 8001516:	f7ff faf5 	bl	8000b04 <__aeabi_dcmpge>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <check_emergency_shutdown+0x84>
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <check_emergency_shutdown+0xd4>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d105      	bne.n	8001534 <check_emergency_shutdown+0x84>
		active_state = EMERGENCY_SLEEP;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <check_emergency_shutdown+0xd4>)
 800152a:	2203      	movs	r2, #3
 800152c:	701a      	strb	r2, [r3, #0]
		beep_requested = 1;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <check_emergency_shutdown+0xe0>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
	}
	sensor_values.previous_state = active_state;
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <check_emergency_shutdown+0xd4>)
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <check_emergency_shutdown+0xd0>)
 800153a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* Function to set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.actual_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <check_emergency_shutdown+0xd0>)
 8001540:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001544:	a30c      	add	r3, pc, #48	; (adr r3, 8001578 <check_emergency_shutdown+0xc8>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7ff fae5 	bl	8000b18 <__aeabi_dcmpgt>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d100      	bne.n	8001556 <check_emergency_shutdown+0xa6>
		active_state = EMERGENCY_SLEEP;
		beep_requested = 1;
	}
}
 8001554:	e009      	b.n	800156a <check_emergency_shutdown+0xba>
	if((sensor_values.actual_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <check_emergency_shutdown+0xd4>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <check_emergency_shutdown+0xba>
		active_state = EMERGENCY_SLEEP;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <check_emergency_shutdown+0xd4>)
 8001560:	2203      	movs	r2, #3
 8001562:	701a      	strb	r2, [r3, #0]
		beep_requested = 1;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <check_emergency_shutdown+0xe0>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
}
 800156a:	bf00      	nop
 800156c:	bdb0      	pop	{r4, r5, r7, pc}
 800156e:	bf00      	nop
 8001570:	00000000 	.word	0x00000000
 8001574:	40ed4c00 	.word	0x40ed4c00
 8001578:	00000000 	.word	0x00000000
 800157c:	407db000 	.word	0x407db000
 8001580:	20000028 	.word	0x20000028
 8001584:	20000018 	.word	0x20000018
 8001588:	20000470 	.word	0x20000470
 800158c:	20000538 	.word	0x20000538
 8001590:	2000045d 	.word	0x2000045d
 8001594:	00000000 	.word	0x00000000

08001598 <get_enc_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void get_enc_button_status(){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	uint8_t button_status;
	if(HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 800159e:	2110      	movs	r1, #16
 80015a0:	482b      	ldr	r0, [pc, #172]	; (8001650 <get_enc_button_status+0xb8>)
 80015a2:	f006 f847 	bl	8007634 <HAL_GPIO_ReadPin>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d102      	bne.n	80015b2 <get_enc_button_status+0x1a>
		button_status = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	e001      	b.n	80015b6 <get_enc_button_status+0x1e>
	}
	else{
		button_status = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.enc_button_status = Moving_Average_Compute(button_status, &enc_button_sense_filterStruct); /* Moving average filter */
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4926      	ldr	r1, [pc, #152]	; (8001654 <get_enc_button_status+0xbc>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 fce4 	bl	8002f88 <Moving_Average_Compute>
 80015c0:	eeb0 7a40 	vmov.f32	s14, s0
 80015c4:	eef0 7a60 	vmov.f32	s15, s1
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <get_enc_button_status+0xc0>)
 80015ca:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/* If encoder button is pressed */
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <get_enc_button_status+0xc0>)
 80015d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80015d4:	a31c      	add	r3, pc, #112	; (adr r3, 8001648 <get_enc_button_status+0xb0>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff fa9d 	bl	8000b18 <__aeabi_dcmpgt>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d100      	bne.n	80015e6 <get_enc_button_status+0x4e>
		else if (active_state == EMERGENCY_SLEEP){
			active_state = RUN;
		}
		previous_millis_heating_halted_update = HAL_GetTick();
	}
}
 80015e4:	e02c      	b.n	8001640 <get_enc_button_status+0xa8>
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 80015e6:	f003 f9a5 	bl	8004934 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <get_enc_button_status+0xc4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	1ad2      	subs	r2, r2, r3
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <get_enc_button_status+0xc8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d322      	bcc.n	8001640 <get_enc_button_status+0xa8>
		beep_requested = 1;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <get_enc_button_status+0xcc>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
		if ((active_state == RUN) || (active_state == STANDBY)){
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <get_enc_button_status+0xd0>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <get_enc_button_status+0x78>
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <get_enc_button_status+0xd0>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d103      	bne.n	8001618 <get_enc_button_status+0x80>
			active_state = HALTED;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <get_enc_button_status+0xd0>)
 8001612:	2204      	movs	r2, #4
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	e00e      	b.n	8001636 <get_enc_button_status+0x9e>
		else if (active_state == HALTED){
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <get_enc_button_status+0xd0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b04      	cmp	r3, #4
 800161e:	d103      	bne.n	8001628 <get_enc_button_status+0x90>
			active_state = RUN;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <get_enc_button_status+0xd0>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	e006      	b.n	8001636 <get_enc_button_status+0x9e>
		else if (active_state == EMERGENCY_SLEEP){
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <get_enc_button_status+0xd0>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d102      	bne.n	8001636 <get_enc_button_status+0x9e>
			active_state = RUN;
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <get_enc_button_status+0xd0>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
		previous_millis_heating_halted_update = HAL_GetTick();
 8001636:	f003 f97d 	bl	8004934 <HAL_GetTick>
 800163a:	4603      	mov	r3, r0
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <get_enc_button_status+0xc4>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	9999999a 	.word	0x9999999a
 800164c:	3fe99999 	.word	0x3fe99999
 8001650:	48000400 	.word	0x48000400
 8001654:	20001234 	.word	0x20001234
 8001658:	20000028 	.word	0x20000028
 800165c:	2000046c 	.word	0x2000046c
 8001660:	20000010 	.word	0x20000010
 8001664:	2000045d 	.word	0x2000045d
 8001668:	20000018 	.word	0x20000018
 800166c:	00000000 	.word	0x00000000

08001670 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 8001676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800167a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167e:	f005 ffd9 	bl	8007634 <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <get_stand_status+0x1e>
		stand_status = 1;
 8001688:	2301      	movs	r3, #1
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	e001      	b.n	8001692 <get_stand_status+0x22>
	}
	else{
		stand_status = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4938      	ldr	r1, [pc, #224]	; (8001778 <get_stand_status+0x108>)
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fc76 	bl	8002f88 <Moving_Average_Compute>
 800169c:	eeb0 7a40 	vmov.f32	s14, s0
 80016a0:	eef0 7a60 	vmov.f32	s15, s1
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <get_stand_status+0x10c>)
 80016a6:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand > 0.5){
 80016aa:	4b34      	ldr	r3, [pc, #208]	; (800177c <get_stand_status+0x10c>)
 80016ac:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <get_stand_status+0x110>)
 80016b6:	f7ff fa2f 	bl	8000b18 <__aeabi_dcmpgt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d039      	beq.n	8001734 <get_stand_status+0xc4>
		if(active_state == RUN){
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <get_stand_status+0x114>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d107      	bne.n	80016d8 <get_stand_status+0x68>
			active_state = STANDBY;
 80016c8:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <get_stand_status+0x114>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
			previous_standby_millis = HAL_GetTick();
 80016ce:	f003 f931 	bl	8004934 <HAL_GetTick>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a2c      	ldr	r2, [pc, #176]	; (8001788 <get_stand_status+0x118>)
 80016d6:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 80016d8:	f003 f92c 	bl	8004934 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <get_stand_status+0x118>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff0d 	bl	8000504 <__aeabi_ui2d>
 80016ea:	4604      	mov	r4, r0
 80016ec:	460d      	mov	r5, r1
 80016ee:	4b27      	ldr	r3, [pc, #156]	; (800178c <get_stand_status+0x11c>)
 80016f0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016f4:	a31e      	add	r3, pc, #120	; (adr r3, 8001770 <get_stand_status+0x100>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe ff7d 	bl	80005f8 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7ff f9fd 	bl	8000b04 <__aeabi_dcmpge>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <get_stand_status+0xae>
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <get_stand_status+0x114>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d102      	bne.n	800171e <get_stand_status+0xae>
			active_state = SLEEP;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <get_stand_status+0x114>)
 800171a:	2202      	movs	r2, #2
 800171c:	701a      	strb	r2, [r3, #0]
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <get_stand_status+0x114>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d003      	beq.n	800172e <get_stand_status+0xbe>
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <get_stand_status+0x114>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b04      	cmp	r3, #4
 800172c:	d102      	bne.n	8001734 <get_stand_status+0xc4>
			active_state = SLEEP;
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <get_stand_status+0x114>)
 8001730:	2202      	movs	r2, #2
 8001732:	701a      	strb	r2, [r3, #0]
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.5){
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <get_stand_status+0x10c>)
 8001736:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <get_stand_status+0x110>)
 8001740:	f7ff f9cc 	bl	8000adc <__aeabi_dcmplt>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d100      	bne.n	800174c <get_stand_status+0xdc>
		if((active_state == SLEEP) || (active_state == STANDBY)){
			active_state = RUN;
		}
	}
}
 800174a:	e00a      	b.n	8001762 <get_stand_status+0xf2>
		if((active_state == SLEEP) || (active_state == STANDBY)){
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <get_stand_status+0x114>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d003      	beq.n	800175c <get_stand_status+0xec>
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <get_stand_status+0x114>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d102      	bne.n	8001762 <get_stand_status+0xf2>
			active_state = RUN;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <get_stand_status+0x114>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bdb0      	pop	{r4, r5, r7, pc}
 800176a:	bf00      	nop
 800176c:	f3af 8000 	nop.w
 8001770:	00000000 	.word	0x00000000
 8001774:	40ed4c00 	.word	0x40ed4c00
 8001778:	20000bdc 	.word	0x20000bdc
 800177c:	20000028 	.word	0x20000028
 8001780:	3fe00000 	.word	0x3fe00000
 8001784:	20000018 	.word	0x20000018
 8001788:	20000474 	.word	0x20000474
 800178c:	20000538 	.word	0x20000538

08001790 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOB, HANDLE_INP_1_Pin) == 0){
 8001796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179a:	483f      	ldr	r0, [pc, #252]	; (8001898 <get_handle_type+0x108>)
 800179c:	f005 ff4a 	bl	8007634 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <get_handle_type+0x1c>
		handle_status = 1;
 80017a6:	2301      	movs	r3, #1
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	e001      	b.n	80017b0 <get_handle_type+0x20>
	}
	else{
		handle_status = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle_sense = Moving_Average_Compute(handle_status, &handle_sense_filterStruct); /* Moving average filter */
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	493a      	ldr	r1, [pc, #232]	; (800189c <get_handle_type+0x10c>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 fbe7 	bl	8002f88 <Moving_Average_Compute>
 80017ba:	eeb0 7a40 	vmov.f32	s14, s0
 80017be:	eef0 7a60 	vmov.f32	s15, s1
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <get_handle_type+0x110>)
 80017c4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	/* If the handle_sense is high -> T210 handle is detected */
	if(sensor_values.handle_sense > 0.5){
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <get_handle_type+0x110>)
 80017ca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <get_handle_type+0x114>)
 80017d4:	f7ff f9a0 	bl	8000b18 <__aeabi_dcmpgt>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01e      	beq.n	800181c <get_handle_type+0x8c>
		handle = T210;
 80017de:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <get_handle_type+0x118>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
		max_power_watt = 60; //60W
 80017e4:	4b31      	ldr	r3, [pc, #196]	; (80018ac <get_handle_type+0x11c>)
 80017e6:	4a32      	ldr	r2, [pc, #200]	; (80018b0 <get_handle_type+0x120>)
 80017e8:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 450; //450 deg C
 80017ea:	4932      	ldr	r1, [pc, #200]	; (80018b4 <get_handle_type+0x124>)
 80017ec:	a328      	add	r3, pc, #160	; (adr r3, 8001890 <get_handle_type+0x100>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 10;
 80017f6:	4930      	ldr	r1, [pc, #192]	; (80018b8 <get_handle_type+0x128>)
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <get_handle_type+0x12c>)
 80017fe:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 8001802:	492f      	ldr	r1, [pc, #188]	; (80018c0 <get_handle_type+0x130>)
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <get_handle_type+0x134>)
 800180a:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 800180e:	492e      	ldr	r1, [pc, #184]	; (80018c8 <get_handle_type+0x138>)
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <get_handle_type+0x13c>)
 8001816:	e9c1 2300 	strd	r2, r3, [r1]
 800181a:	e01d      	b.n	8001858 <get_handle_type+0xc8>
	}
	/* If the handle_sense is low -> T245 Handle */
	else{
		handle = T245;
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <get_handle_type+0x118>)
 800181e:	2202      	movs	r2, #2
 8001820:	701a      	strb	r2, [r3, #0]
		max_power_watt = 120; //120W
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <get_handle_type+0x11c>)
 8001824:	4a2a      	ldr	r2, [pc, #168]	; (80018d0 <get_handle_type+0x140>)
 8001826:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 450; //430 deg C
 8001828:	4922      	ldr	r1, [pc, #136]	; (80018b4 <get_handle_type+0x124>)
 800182a:	a319      	add	r3, pc, #100	; (adr r3, 8001890 <get_handle_type+0x100>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 15;
 8001834:	4920      	ldr	r1, [pc, #128]	; (80018b8 <get_handle_type+0x128>)
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <get_handle_type+0x144>)
 800183c:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 8001840:	491f      	ldr	r1, [pc, #124]	; (80018c0 <get_handle_type+0x130>)
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <get_handle_type+0x134>)
 8001848:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 800184c:	491e      	ldr	r1, [pc, #120]	; (80018c8 <get_handle_type+0x138>)
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <get_handle_type+0x114>)
 8001854:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <get_handle_type+0x128>)
 800185a:	ed93 7b00 	vldr	d7, [r3]
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <get_handle_type+0x130>)
 8001860:	ed93 6b00 	vldr	d6, [r3]
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <get_handle_type+0x138>)
 8001866:	ed93 5b00 	vldr	d5, [r3]
 800186a:	eeb0 2a45 	vmov.f32	s4, s10
 800186e:	eef0 2a65 	vmov.f32	s5, s11
 8001872:	eeb0 1a46 	vmov.f32	s2, s12
 8001876:	eef0 1a66 	vmov.f32	s3, s13
 800187a:	eeb0 0a47 	vmov.f32	s0, s14
 800187e:	eef0 0a67 	vmov.f32	s1, s15
 8001882:	4815      	ldr	r0, [pc, #84]	; (80018d8 <get_handle_type+0x148>)
 8001884:	f001 fe57 	bl	8003536 <PID_SetTunings>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	00000000 	.word	0x00000000
 8001894:	407c2000 	.word	0x407c2000
 8001898:	48000400 	.word	0x48000400
 800189c:	20000f08 	.word	0x20000f08
 80018a0:	20000028 	.word	0x20000028
 80018a4:	3fe00000 	.word	0x3fe00000
 80018a8:	2000045c 	.word	0x2000045c
 80018ac:	200004c0 	.word	0x200004c0
 80018b0:	42700000 	.word	0x42700000
 80018b4:	20000530 	.word	0x20000530
 80018b8:	20000480 	.word	0x20000480
 80018bc:	40240000 	.word	0x40240000
 80018c0:	20000488 	.word	0x20000488
 80018c4:	403e0000 	.word	0x403e0000
 80018c8:	20000490 	.word	0x20000490
 80018cc:	3fd00000 	.word	0x3fd00000
 80018d0:	42f00000 	.word	0x42f00000
 80018d4:	402e0000 	.word	0x402e0000
 80018d8:	200018e0 	.word	0x200018e0

080018dc <HAL_TIM_IC_CaptureCallback>:
//void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
//    //HAL_GPIO_TogglePin(GPIOF, DEBUG_SIGNAL_A_Pin);
//}

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7f1b      	ldrb	r3, [r3, #28]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d003      	beq.n	80018f4 <HAL_TIM_IC_CaptureCallback+0x18>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7f1b      	ldrb	r3, [r3, #28]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d102      	bne.n	80018fa <HAL_TIM_IC_CaptureCallback+0x1e>
		beep(5);
 80018f4:	2005      	movs	r0, #5
 80018f6:	f7ff fdbb 	bl	8001470 <beep>
	}
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, dutycycle);
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <set_heater_duty+0x20>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	88fa      	ldrh	r2, [r7, #6]
 8001914:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200017fc 	.word	0x200017fc

08001928 <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if ((htim == &htim4) && (current_measurement_requested == 1) )
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d112      	bne.n	800195e <HAL_TIM_PWM_PulseFinishedCallback+0x36>
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d10e      	bne.n	800195e <HAL_TIM_PWM_PulseFinishedCallback+0x36>
  {
	  HAL_TIM_Base_Start_IT(&htim16);
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8001942:	f009 fde9 	bl	800b518 <HAL_TIM_Base_Start_IT>
	  set_heater_duty(duty_cycle); //Set duty cycle back to calculated
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f92a 	bl	8000ba8 <__aeabi_d2uiz>
 8001954:	4603      	mov	r3, r0
 8001956:	b29b      	uxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ffd3 	bl	8001904 <set_heater_duty>
  }
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200017fc 	.word	0x200017fc
 800196c:	20000580 	.word	0x20000580
 8001970:	20001894 	.word	0x20001894
 8001974:	20000578 	.word	0x20000578

08001978 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 ){
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d10b      	bne.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x28>
	  HAL_TIM_Base_Stop_IT(&htim16);
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800198a:	f009 fe2f 	bl	800b5ec <HAL_TIM_Base_Stop_IT>
	  //HAL_ADC_Start_IT(&hadc2);
	  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800198e:	480d      	ldr	r0, [pc, #52]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001990:	f003 ffbc 	bl	800590c <HAL_ADCEx_InjectedStart_IT>
	  HAL_GPIO_WritePin(GPIOA, USR_1_Pin, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	2101      	movs	r1, #1
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f005 fe62 	bl	8007664 <HAL_GPIO_WritePin>
  }
  if (htim == &htim6){
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d106      	bne.n	80019b6 <HAL_TIM_PeriodElapsedCallback+0x3e>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_TIM_Base_Stop_IT(&htim6);
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019b2:	f009 fe1b 	bl	800b5ec <HAL_TIM_Base_Stop_IT>

  }
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20001894 	.word	0x20001894
 80019c4:	20001560 	.word	0x20001560
 80019c8:	20001848 	.word	0x20001848
 80019cc:	20001764 	.word	0x20001764

080019d0 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	if(current_measurement_requested == 1){
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d110      	bne.n	8001a02 <HAL_ADCEx_InjectedConvCpltCallback+0x32>
		HAL_GPIO_WritePin(GPIOA, USR_1_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2101      	movs	r1, #1
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e8:	f005 fe3c 	bl	8007664 <HAL_GPIO_WritePin>
		ADC_buffer_current = HAL_ADCEx_InjectedGetValue(&hadc1,1);
 80019ec:	2101      	movs	r1, #1
 80019ee:	4808      	ldr	r0, [pc, #32]	; (8001a10 <HAL_ADCEx_InjectedConvCpltCallback+0x40>)
 80019f0:	f004 f898 	bl	8005b24 <HAL_ADCEx_InjectedGetValue>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 80019fa:	801a      	strh	r2, [r3, #0]
		current_measurement_requested = 0;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
	}
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000580 	.word	0x20000580
 8001a10:	20001560 	.word	0x20001560
 8001a14:	2000001a 	.word	0x2000001a

08001a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a1c:	ed2d 8b06 	vpush	{d8-d10}
 8001a20:	b09c      	sub	sp, #112	; 0x70
 8001a22:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a24:	f002 ff2c 	bl	8004880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a28:	f000 fe22 	bl	8002670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a2c:	f001 f9f0 	bl	8002e10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a30:	f001 f9bc 	bl	8002dac <MX_DMA_Init>
  MX_ADC1_Init();
 8001a34:	f000 fe84 	bl	8002740 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001a38:	f000 fef2 	bl	8002820 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001a3c:	f000 ff82 	bl	8002944 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a40:	f000 ffc0 	bl	80029c4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001a44:	f000 fffc 	bl	8002a40 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a48:	f001 f8a6 	bl	8002b98 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001a4c:	f001 f8f8 	bl	8002c40 <MX_TIM4_Init>
  MX_CRC_Init();
 8001a50:	f000 ff56 	bl	8002900 <MX_CRC_Init>
  MX_TIM16_Init();
 8001a54:	f001 f984 	bl	8002d60 <MX_TIM16_Init>
  MX_TIM6_Init();
 8001a58:	f001 f94c 	bl	8002cf4 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8001a5c:	f010 ffce 	bl	80129fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //ST7789_Init();
  LCD_init();
 8001a60:	f002 fea4 	bl	80047ac <LCD_init>


	 HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001a64:	213c      	movs	r1, #60	; 0x3c
 8001a66:	48b4      	ldr	r0, [pc, #720]	; (8001d38 <main+0x320>)
 8001a68:	f00a f838 	bl	800badc <HAL_TIM_Encoder_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	48b3      	ldr	r0, [pc, #716]	; (8001d3c <main+0x324>)
 8001a70:	f009 fe42 	bl	800b6f8 <HAL_TIM_PWM_Start_IT>
	 HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001a74:	2100      	movs	r1, #0
 8001a76:	48b2      	ldr	r0, [pc, #712]	; (8001d40 <main+0x328>)
 8001a78:	f00b f816 	bl	800caa8 <HAL_TIMEx_PWMN_Start>
	

		HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	48b1      	ldr	r0, [pc, #708]	; (8001d44 <main+0x32c>)
 8001a80:	f003 fed2 	bl	8005828 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc3, (uint16_t*)ADC_BUF_VIN, ADC_BUF_VIN_LEN);	//Start ADC DMA
 8001a84:	2232      	movs	r2, #50	; 0x32
 8001a86:	49b0      	ldr	r1, [pc, #704]	; (8001d48 <main+0x330>)
 8001a88:	48ae      	ldr	r0, [pc, #696]	; (8001d44 <main+0x32c>)
 8001a8a:	f003 facb 	bl	8005024 <HAL_ADC_Start_DMA>

        HAL_ADC_Start_IT(&hadc1);        //Start ADC DMA
 8001a8e:	48af      	ldr	r0, [pc, #700]	; (8001d4c <main+0x334>)
 8001a90:	f003 f988 	bl	8004da4 <HAL_ADC_Start_IT>

		Moving_Average_Init(&actual_temperature_filter_struct,5);
 8001a94:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001a98:	48ad      	ldr	r0, [pc, #692]	; (8001d50 <main+0x338>)
 8001a9a:	f001 fa44 	bl	8002f26 <Moving_Average_Init>
		Moving_Average_Init(&input_voltage_filterStruct,50);
 8001a9e:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8001d54 <main+0x33c>
 8001aa2:	48ad      	ldr	r0, [pc, #692]	; (8001d58 <main+0x340>)
 8001aa4:	f001 fa3f 	bl	8002f26 <Moving_Average_Init>
		Moving_Average_Init(&stand_sense_filterStruct,50);
 8001aa8:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8001d54 <main+0x33c>
 8001aac:	48ab      	ldr	r0, [pc, #684]	; (8001d5c <main+0x344>)
 8001aae:	f001 fa3a 	bl	8002f26 <Moving_Average_Init>
		Moving_Average_Init(&handle_sense_filterStruct,50);
 8001ab2:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8001d54 <main+0x33c>
 8001ab6:	48aa      	ldr	r0, [pc, #680]	; (8001d60 <main+0x348>)
 8001ab8:	f001 fa35 	bl	8002f26 <Moving_Average_Init>
		Moving_Average_Init(&enc_button_sense_filterStruct,10);
 8001abc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001ac0:	48a8      	ldr	r0, [pc, #672]	; (8001d64 <main+0x34c>)
 8001ac2:	f001 fa30 	bl	8002f26 <Moving_Average_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	/* Init and fill filter structures with initial values */
  		set_heater_duty(0);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff ff1c 	bl	8001904 <set_heater_duty>
  		for (int i = 0; i<200;i++){
 8001acc:	2300      	movs	r3, #0
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad0:	e00c      	b.n	8001aec <main+0xd4>
  			get_bus_voltage();
 8001ad2:	f7ff fabd 	bl	8001050 <get_bus_voltage>
  			get_actual_temperature();
 8001ad6:	f7ff faeb 	bl	80010b0 <get_actual_temperature>
  			get_handle_type();
 8001ada:	f7ff fe59 	bl	8001790 <get_handle_type>
  			get_stand_status();
 8001ade:	f7ff fdc7 	bl	8001670 <get_stand_status>
  			get_enc_button_status();
 8001ae2:	f7ff fd59 	bl	8001598 <get_enc_button_status>
  		for (int i = 0; i<200;i++){
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae8:	3301      	adds	r3, #1
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
 8001aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aee:	2bc7      	cmp	r3, #199	; 0xc7
 8001af0:	ddef      	ble.n	8001ad2 <main+0xba>
  		}

  		uint16_t menu_length = 8;
 8001af2:	2308      	movs	r3, #8
 8001af4:	82fb      	strh	r3, [r7, #22]
  	    	FlashWrite(&default_flash_values);
  		}
  	    FlashRead(&flash_values);
*/
  		/* Set startup state */
  		active_state = SLEEP;
 8001af6:	4b9c      	ldr	r3, [pc, #624]	; (8001d68 <main+0x350>)
 8001af8:	2202      	movs	r2, #2
 8001afa:	701a      	strb	r2, [r3, #0]

  		/* Initiate OLED display */
  		TIM2->CNT = 1000;
 8001afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
  		uint16_t menu_cursor_position = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	86fb      	strh	r3, [r7, #54]	; 0x36
  		uint16_t old_menu_cursor_position = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	86bb      	strh	r3, [r7, #52]	; 0x34
  		uint16_t menue_start = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	85fb      	strh	r3, [r7, #46]	; 0x2e
  		uint16_t menue_level = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	85bb      	strh	r3, [r7, #44]	; 0x2c
  		uint16_t menu_active = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	857b      	strh	r3, [r7, #42]	; 0x2a
  		float old_value = 0;
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24

  		/* If button is pressed during startup - Show SETTINGS and allow to release button. */
  		if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8001b20:	2110      	movs	r1, #16
 8001b22:	4892      	ldr	r0, [pc, #584]	; (8001d6c <main+0x354>)
 8001b24:	f005 fd86 	bl	8007634 <HAL_GPIO_ReadPin>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	f040 8178 	bne.w	8001e20 <main+0x408>
  			//Paint_DrawString_EN(0, 0, "SETTINGS" , &Font16, 0x00, 0xff);
  			//Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
  			//OLED_1in5_Display(black_image);
  			//Paint_Clear(BLACK);
  			HAL_Delay(1000);
 8001b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b34:	f002 ff0a 	bl	800494c <HAL_Delay>
  			while(menu_active == 1){
 8001b38:	e16e      	b.n	8001e18 <main+0x400>
  				if(menue_level == 0){
 8001b3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d111      	bne.n	8001b64 <main+0x14c>
  					if(TIM2->CNT < 1000)
 8001b40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b4a:	d204      	bcs.n	8001b56 <main+0x13e>
  					{
  						TIM2->CNT = 1000;
 8001b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  					}
  					menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	86fb      	strh	r3, [r7, #54]	; 0x36
  				}
  				if (menue_level == 1){
 8001b64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	f040 808e 	bne.w	8001c88 <main+0x270>
  					((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b6e:	f7fe fceb 	bl	8000548 <__aeabi_f2d>
 8001b72:	4604      	mov	r4, r0
 8001b74:	460d      	mov	r5, r1
 8001b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fcc1 	bl	8000504 <__aeabi_ui2d>
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	4b7a      	ldr	r3, [pc, #488]	; (8001d70 <main+0x358>)
 8001b88:	f7fe fb7e 	bl	8000288 <__aeabi_dsub>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7ff f828 	bl	8000be8 <__aeabi_d2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcd4 	bl	8000548 <__aeabi_f2d>
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ba8:	f7fe fe50 	bl	800084c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	f7fe fb6a 	bl	800028c <__adddf3>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4690      	mov	r8, r2
 8001bbe:	4699      	mov	r9, r3
 8001bc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bca:	ee17 0a90 	vmov	r0, s15
 8001bce:	f7fe fcbb 	bl	8000548 <__aeabi_f2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8001bd8:	00c9      	lsls	r1, r1, #3
 8001bda:	4866      	ldr	r0, [pc, #408]	; (8001d74 <main+0x35c>)
 8001bdc:	180c      	adds	r4, r1, r0
 8001bde:	4640      	mov	r0, r8
 8001be0:	4649      	mov	r1, r9
 8001be2:	f7fe fb51 	bl	8000288 <__aeabi_dsub>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	e9c4 2300 	strd	r2, r3, [r4]
  					if (menu_cursor_position == 5){
 8001bee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d12c      	bne.n	8001c4e <main+0x236>
  						((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001bf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4a5e      	ldr	r2, [pc, #376]	; (8001d74 <main+0x35c>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe ffa8 	bl	8000b58 <__aeabi_d2iz>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bfb8      	it	lt
 8001c0e:	425b      	neglt	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc87 	bl	8000524 <__aeabi_i2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8001d30 <main+0x318>
 8001c1e:	ec43 2b10 	vmov	d0, r2, r3
 8001c22:	f014 fa21 	bl	8016068 <fmod>
 8001c26:	eeb0 7a40 	vmov.f32	s14, s0
 8001c2a:	eef0 7a60 	vmov.f32	s15, s1
 8001c2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <main+0x35c>)
 8001c34:	189c      	adds	r4, r3, r2
 8001c36:	eeb0 0a47 	vmov.f32	s0, s14
 8001c3a:	eef0 0a67 	vmov.f32	s1, s15
 8001c3e:	f014 fabd 	bl	80161bc <round>
 8001c42:	eeb0 7a40 	vmov.f32	s14, s0
 8001c46:	eef0 7a60 	vmov.f32	s15, s1
 8001c4a:	ed84 7b00 	vstr	d7, [r4]
  					}
  					if(menu_cursor_position != 1){
 8001c4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d019      	beq.n	8001c88 <main+0x270>
  						((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001c54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4a46      	ldr	r2, [pc, #280]	; (8001d74 <main+0x35c>)
 8001c5a:	4413      	add	r3, r2
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f7fe ff78 	bl	8000b58 <__aeabi_d2iz>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001c6e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001c72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	493f      	ldr	r1, [pc, #252]	; (8001d74 <main+0x35c>)
 8001c78:	185c      	adds	r4, r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f7fe fc52 	bl	8000524 <__aeabi_i2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	e9c4 2300 	strd	r2, r3, [r4]
  					}
  				}

  				if(menu_cursor_position > menu_length){
 8001c88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001c8a:	8afb      	ldrh	r3, [r7, #22]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d908      	bls.n	8001ca2 <main+0x28a>
  								menu_cursor_position = menu_length;
 8001c90:	8afb      	ldrh	r3, [r7, #22]
 8001c92:	86fb      	strh	r3, [r7, #54]	; 0x36
  								TIM2->CNT = 1000 + menu_length*2;
 8001c94:	8afb      	ldrh	r3, [r7, #22]
 8001c96:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c9a:	005a      	lsls	r2, r3, #1
 8001c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
  				}

  				if(menu_cursor_position >= menu_length-(menu_length-5)){
 8001ca2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d902      	bls.n	8001cae <main+0x296>
  					menue_start = menu_cursor_position-5;
 8001ca8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001caa:	3b05      	subs	r3, #5
 8001cac:	85fb      	strh	r3, [r7, #46]	; 0x2e
  				}


  				if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-2)){
 8001cae:	2110      	movs	r1, #16
 8001cb0:	482e      	ldr	r0, [pc, #184]	; (8001d6c <main+0x354>)
 8001cb2:	f005 fcbf 	bl	8007634 <HAL_GPIO_ReadPin>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d129      	bne.n	8001d10 <main+0x2f8>
 8001cbc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001cbe:	8afb      	ldrh	r3, [r7, #22]
 8001cc0:	3b02      	subs	r3, #2
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	da24      	bge.n	8001d10 <main+0x2f8>
  					if(menue_level == 0){
 8001cc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10d      	bne.n	8001ce8 <main+0x2d0>
  						old_value = ((double*)&flash_values)[menu_cursor_position];
 8001ccc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4a28      	ldr	r2, [pc, #160]	; (8001d74 <main+0x35c>)
 8001cd2:	4413      	add	r3, r2
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f7fe ff84 	bl	8000be8 <__aeabi_d2f>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  						old_menu_cursor_position = menu_cursor_position;
 8001ce4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ce6:	86bb      	strh	r3, [r7, #52]	; 0x34
  					}
  					if(menue_level == 1){
 8001ce8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d106      	bne.n	8001cfc <main+0x2e4>
  						TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001cee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001cf0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001cf4:	005a      	lsls	r2, r3, #1
 8001cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24
  					}

  					menue_level = abs(menue_level-1);
 8001cfc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bfb8      	it	lt
 8001d04:	425b      	neglt	r3, r3
 8001d06:	85bb      	strh	r3, [r7, #44]	; 0x2c
  					HAL_Delay(200);
 8001d08:	20c8      	movs	r0, #200	; 0xc8
 8001d0a:	f002 fe1f 	bl	800494c <HAL_Delay>
 8001d0e:	e05d      	b.n	8001dcc <main+0x3b4>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length)){
 8001d10:	2110      	movs	r1, #16
 8001d12:	4816      	ldr	r0, [pc, #88]	; (8001d6c <main+0x354>)
 8001d14:	f005 fc8e 	bl	8007634 <HAL_GPIO_ReadPin>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d12c      	bne.n	8001d78 <main+0x360>
 8001d1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d20:	8afb      	ldrh	r3, [r7, #22]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d128      	bne.n	8001d78 <main+0x360>
  					menu_active = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001d2a:	e04f      	b.n	8001dcc <main+0x3b4>
 8001d2c:	f3af 8000 	nop.w
 8001d30:	00000000 	.word	0x00000000
 8001d34:	40000000 	.word	0x40000000
 8001d38:	200017b0 	.word	0x200017b0
 8001d3c:	200017fc 	.word	0x200017fc
 8001d40:	20001764 	.word	0x20001764
 8001d44:	200015b0 	.word	0x200015b0
 8001d48:	200004c8 	.word	0x200004c8
 8001d4c:	20001560 	.word	0x20001560
 8001d50:	20000584 	.word	0x20000584
 8001d54:	42480000 	.word	0x42480000
 8001d58:	200008b0 	.word	0x200008b0
 8001d5c:	20000bdc 	.word	0x20000bdc
 8001d60:	20000f08 	.word	0x20000f08
 8001d64:	20001234 	.word	0x20001234
 8001d68:	20000018 	.word	0x20000018
 8001d6c:	48000400 	.word	0x48000400
 8001d70:	408f4000 	.word	0x408f4000
 8001d74:	20000538 	.word	0x20000538
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001d78:	2110      	movs	r1, #16
 8001d7a:	4816      	ldr	r0, [pc, #88]	; (8001dd4 <main+0x3bc>)
 8001d7c:	f005 fc5a 	bl	8007634 <HAL_GPIO_ReadPin>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d10a      	bne.n	8001d9c <main+0x384>
 8001d86:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001d88:	8afb      	ldrh	r3, [r7, #22]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d105      	bne.n	8001d9c <main+0x384>
  					menu_active = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	857b      	strh	r3, [r7, #42]	; 0x2a
  					FlashWrite(&flash_values);
 8001d94:	4810      	ldr	r0, [pc, #64]	; (8001dd8 <main+0x3c0>)
 8001d96:	f7ff f80f 	bl	8000db8 <FlashWrite>
 8001d9a:	e017      	b.n	8001dcc <main+0x3b4>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001d9c:	2110      	movs	r1, #16
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <main+0x3bc>)
 8001da0:	f005 fc48 	bl	8007634 <HAL_GPIO_ReadPin>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d110      	bne.n	8001dcc <main+0x3b4>
 8001daa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001dac:	8afb      	ldrh	r3, [r7, #22]
 8001dae:	3b02      	subs	r3, #2
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10b      	bne.n	8001dcc <main+0x3b4>
  					flash_values = default_flash_values;
 8001db4:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <main+0x3c0>)
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <main+0x3c4>)
 8001db8:	4614      	mov	r4, r2
 8001dba:	461d      	mov	r5, r3
 8001dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  				//Paint_DrawString_EN(0, 110, "Version: ", &Font12, 0x00, 0xff);
  				//Paint_DrawString_EN(60, 110, version, &Font12, 0x00, 0xff);

  				//menuHandle();

  				for(int i = menue_start;i<menue_start+6;i++){
 8001dcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dce:	623b      	str	r3, [r7, #32]
 8001dd0:	e01d      	b.n	8001e0e <main+0x3f6>
 8001dd2:	bf00      	nop
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	20000538 	.word	0x20000538
 8001ddc:	20000068 	.word	0x20000068
  					else{
  						//Paint_DrawString_EN(0, 20+(i-menue_start)*12, menu_names[i], &Font12, 0x00, 0xff);
  					}

  					char str[20];
  				  	memset(&str, '\0', sizeof(str));
 8001de0:	463b      	mov	r3, r7
 8001de2:	2214      	movs	r2, #20
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f012 f839 	bl	8013e5e <memset>
  					sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4ad5      	ldr	r2, [pc, #852]	; (8002148 <main+0x730>)
 8001df2:	4413      	add	r3, r2
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	4638      	mov	r0, r7
 8001dfa:	49d4      	ldr	r1, [pc, #848]	; (800214c <main+0x734>)
 8001dfc:	f011 ffca 	bl	8013d94 <siprintf>
  					if(i <= menu_length-3){
 8001e00:	8afb      	ldrh	r3, [r7, #22]
 8001e02:	3b02      	subs	r3, #2
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	429a      	cmp	r2, r3
  				for(int i = menue_start;i<menue_start+6;i++){
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	623b      	str	r3, [r7, #32]
 8001e0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e10:	3305      	adds	r3, #5
 8001e12:	6a3a      	ldr	r2, [r7, #32]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dde3      	ble.n	8001de0 <main+0x3c8>
  			while(menu_active == 1){
 8001e18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	f43f ae8d 	beq.w	8001b3a <main+0x122>
  				//Paint_Clear(BLACK);
  			}
  		}

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8001e20:	4bc9      	ldr	r3, [pc, #804]	; (8002148 <main+0x730>)
 8001e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e26:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe febb 	bl	8000ba8 <__aeabi_d2uiz>
 8001e32:	4603      	mov	r3, r0
 8001e34:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.actual_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8001e36:	4bc6      	ldr	r3, [pc, #792]	; (8002150 <main+0x738>)
 8001e38:	ed93 7b00 	vldr	d7, [r3]
 8001e3c:	4bc5      	ldr	r3, [pc, #788]	; (8002154 <main+0x73c>)
 8001e3e:	ed93 6b00 	vldr	d6, [r3]
 8001e42:	4bc5      	ldr	r3, [pc, #788]	; (8002158 <main+0x740>)
 8001e44:	ed93 5b00 	vldr	d5, [r3]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	eeb0 2a45 	vmov.f32	s4, s10
 8001e54:	eef0 2a65 	vmov.f32	s5, s11
 8001e58:	eeb0 1a46 	vmov.f32	s2, s12
 8001e5c:	eef0 1a66 	vmov.f32	s3, s13
 8001e60:	eeb0 0a47 	vmov.f32	s0, s14
 8001e64:	eef0 0a67 	vmov.f32	s1, s15
 8001e68:	4bbc      	ldr	r3, [pc, #752]	; (800215c <main+0x744>)
 8001e6a:	4abd      	ldr	r2, [pc, #756]	; (8002160 <main+0x748>)
 8001e6c:	49bd      	ldr	r1, [pc, #756]	; (8002164 <main+0x74c>)
 8001e6e:	48be      	ldr	r0, [pc, #760]	; (8002168 <main+0x750>)
 8001e70:	f001 f922 	bl	80030b8 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001e74:	2101      	movs	r1, #1
 8001e76:	48bc      	ldr	r0, [pc, #752]	; (8002168 <main+0x750>)
 8001e78:	f001 fab1 	bl	80033de <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); //Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 8001e7c:	4bbb      	ldr	r3, [pc, #748]	; (800216c <main+0x754>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	4619      	mov	r1, r3
 8001e84:	48b8      	ldr	r0, [pc, #736]	; (8002168 <main+0x750>)
 8001e86:	f001 fc59 	bl	800373c <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 	// Set max and min output limit
 8001e8a:	ed9f 1ba7 	vldr	d1, [pc, #668]	; 8002128 <main+0x710>
 8001e8e:	ed9f 0ba8 	vldr	d0, [pc, #672]	; 8002130 <main+0x718>
 8001e92:	48b5      	ldr	r0, [pc, #724]	; (8002168 <main+0x750>)
 8001e94:	f001 fac1 	bl	800341a <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, PID_MIN_LIMIT, PID_MAX_LIMIT); 		// Set max and min I limit
 8001e98:	ed9f 1ba7 	vldr	d1, [pc, #668]	; 8002138 <main+0x720>
 8001e9c:	ed9f 0ba8 	vldr	d0, [pc, #672]	; 8002140 <main+0x728>
 8001ea0:	48b1      	ldr	r0, [pc, #708]	; (8002168 <main+0x750>)
 8001ea2:	f001 fb28 	bl	80034f6 <PID_SetILimits>


		UG_FillScreen(C_BLACK);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f00d fc2e 	bl	800f708 <UG_FillScreen>

		LCD_PutStr(55, 5, "AxxSolder", FONT_arial_29X35, RGB_to_BRG(C_YELLOW), C_BLACK);
 8001eac:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001eb0:	f7ff f87c 	bl	8000fac <RGB_to_BRG>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	9200      	str	r2, [sp, #0]
 8001ebe:	4bac      	ldr	r3, [pc, #688]	; (8002170 <main+0x758>)
 8001ec0:	4aac      	ldr	r2, [pc, #688]	; (8002174 <main+0x75c>)
 8001ec2:	2105      	movs	r1, #5
 8001ec4:	2037      	movs	r0, #55	; 0x37
 8001ec6:	f002 fc33 	bl	8004730 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8001eca:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001ece:	f7ff f86d 	bl	8000fac <RGB_to_BRG>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	2328      	movs	r3, #40	; 0x28
 8001ed8:	22f0      	movs	r2, #240	; 0xf0
 8001eda:	2128      	movs	r1, #40	; 0x28
 8001edc:	2000      	movs	r0, #0
 8001ede:	f002 fbe9 	bl	80046b4 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8001ee2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001ee6:	f7ff f861 	bl	8000fac <RGB_to_BRG>
 8001eea:	4603      	mov	r3, r0
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2329      	movs	r3, #41	; 0x29
 8001ef0:	22f0      	movs	r2, #240	; 0xf0
 8001ef2:	2129      	movs	r1, #41	; 0x29
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f002 fbdd 	bl	80046b4 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8001efa:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001efe:	f7ff f855 	bl	8000fac <RGB_to_BRG>
 8001f02:	4603      	mov	r3, r0
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	232a      	movs	r3, #42	; 0x2a
 8001f08:	22f0      	movs	r2, #240	; 0xf0
 8001f0a:	212a      	movs	r1, #42	; 0x2a
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f002 fbd1 	bl	80046b4 <LCD_DrawLine>


		LCD_PutStr(10, 55, "Set temp", FONT_arial_25X28, RGB_to_BRG(C_WHITE), C_BLACK);
 8001f12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f16:	f7ff f849 	bl	8000fac <RGB_to_BRG>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2300      	movs	r3, #0
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	9200      	str	r2, [sp, #0]
 8001f24:	4b94      	ldr	r3, [pc, #592]	; (8002178 <main+0x760>)
 8001f26:	4a95      	ldr	r2, [pc, #596]	; (800217c <main+0x764>)
 8001f28:	2137      	movs	r1, #55	; 0x37
 8001f2a:	200a      	movs	r0, #10
 8001f2c:	f002 fc00 	bl	8004730 <LCD_PutStr>
		UG_DrawCircle(105, 95, 4, RGB_to_BRG(C_WHITE));
 8001f30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f34:	f7ff f83a 	bl	8000fac <RGB_to_BRG>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	215f      	movs	r1, #95	; 0x5f
 8001f3e:	2069      	movs	r0, #105	; 0x69
 8001f40:	f00d fcc0 	bl	800f8c4 <UG_DrawCircle>
		UG_DrawCircle(105, 95, 3, RGB_to_BRG(C_WHITE));
 8001f44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f48:	f7ff f830 	bl	8000fac <RGB_to_BRG>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2203      	movs	r2, #3
 8001f50:	215f      	movs	r1, #95	; 0x5f
 8001f52:	2069      	movs	r0, #105	; 0x69
 8001f54:	f00d fcb6 	bl	800f8c4 <UG_DrawCircle>
		LCD_PutStr(115, 85, "C", FONT_arial_49X57, RGB_to_BRG(C_WHITE), C_BLACK);
 8001f58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f5c:	f7ff f826 	bl	8000fac <RGB_to_BRG>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	2300      	movs	r3, #0
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	9200      	str	r2, [sp, #0]
 8001f6a:	4b85      	ldr	r3, [pc, #532]	; (8002180 <main+0x768>)
 8001f6c:	4a85      	ldr	r2, [pc, #532]	; (8002184 <main+0x76c>)
 8001f6e:	2155      	movs	r1, #85	; 0x55
 8001f70:	2073      	movs	r0, #115	; 0x73
 8001f72:	f002 fbdd 	bl	8004730 <LCD_PutStr>


		LCD_PutStr(10, 155, "Actual temp", FONT_arial_25X28, RGB_to_BRG(C_WHITE), C_BLACK);
 8001f76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f7a:	f7ff f817 	bl	8000fac <RGB_to_BRG>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	2300      	movs	r3, #0
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	9200      	str	r2, [sp, #0]
 8001f88:	4b7b      	ldr	r3, [pc, #492]	; (8002178 <main+0x760>)
 8001f8a:	4a7f      	ldr	r2, [pc, #508]	; (8002188 <main+0x770>)
 8001f8c:	219b      	movs	r1, #155	; 0x9b
 8001f8e:	200a      	movs	r0, #10
 8001f90:	f002 fbce 	bl	8004730 <LCD_PutStr>
		UG_DrawCircle(105, 200, 4, RGB_to_BRG(C_WHITE));
 8001f94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f98:	f7ff f808 	bl	8000fac <RGB_to_BRG>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	21c8      	movs	r1, #200	; 0xc8
 8001fa2:	2069      	movs	r0, #105	; 0x69
 8001fa4:	f00d fc8e 	bl	800f8c4 <UG_DrawCircle>
		UG_DrawCircle(105, 200, 3, RGB_to_BRG(C_WHITE));
 8001fa8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fac:	f7fe fffe 	bl	8000fac <RGB_to_BRG>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	21c8      	movs	r1, #200	; 0xc8
 8001fb6:	2069      	movs	r0, #105	; 0x69
 8001fb8:	f00d fc84 	bl	800f8c4 <UG_DrawCircle>
		LCD_PutStr(115, 185, "C", FONT_arial_49X57, RGB_to_BRG(C_WHITE), C_BLACK);
 8001fbc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fc0:	f7fe fff4 	bl	8000fac <RGB_to_BRG>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	9200      	str	r2, [sp, #0]
 8001fce:	4b6c      	ldr	r3, [pc, #432]	; (8002180 <main+0x768>)
 8001fd0:	4a6c      	ldr	r2, [pc, #432]	; (8002184 <main+0x76c>)
 8001fd2:	21b9      	movs	r1, #185	; 0xb9
 8001fd4:	2073      	movs	r0, #115	; 0x73
 8001fd6:	f002 fbab 	bl	8004730 <LCD_PutStr>

		UG_DrawFrame(2, 151, 165, 245, RGB_to_BRG(C_WHITE));
 8001fda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fde:	f7fe ffe5 	bl	8000fac <RGB_to_BRG>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	23f5      	movs	r3, #245	; 0xf5
 8001fe8:	22a5      	movs	r2, #165	; 0xa5
 8001fea:	2197      	movs	r1, #151	; 0x97
 8001fec:	2002      	movs	r0, #2
 8001fee:	f00d fc21 	bl	800f834 <UG_DrawFrame>
		UG_DrawFrame(1, 150, 166, 246, RGB_to_BRG(C_WHITE));
 8001ff2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ff6:	f7fe ffd9 	bl	8000fac <RGB_to_BRG>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	23f6      	movs	r3, #246	; 0xf6
 8002000:	22a6      	movs	r2, #166	; 0xa6
 8002002:	2196      	movs	r1, #150	; 0x96
 8002004:	2001      	movs	r0, #1
 8002006:	f00d fc15 	bl	800f834 <UG_DrawFrame>


		LCD_PutStr(0, 260, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), C_BLACK);
 800200a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800200e:	f7fe ffcd 	bl	8000fac <RGB_to_BRG>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	2300      	movs	r3, #0
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	9200      	str	r2, [sp, #0]
 800201c:	4b5b      	ldr	r3, [pc, #364]	; (800218c <main+0x774>)
 800201e:	4a5c      	ldr	r2, [pc, #368]	; (8002190 <main+0x778>)
 8002020:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002024:	2000      	movs	r0, #0
 8002026:	f002 fb83 	bl	8004730 <LCD_PutStr>
		LCD_PutStr(0, 280, "Input voltage:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), C_BLACK);
 800202a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800202e:	f7fe ffbd 	bl	8000fac <RGB_to_BRG>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	2300      	movs	r3, #0
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	9200      	str	r2, [sp, #0]
 800203c:	4b53      	ldr	r3, [pc, #332]	; (800218c <main+0x774>)
 800203e:	4a55      	ldr	r2, [pc, #340]	; (8002194 <main+0x77c>)
 8002040:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002044:	2000      	movs	r0, #0
 8002046:	f002 fb73 	bl	8004730 <LCD_PutStr>
		LCD_PutStr(0, 300, "PCB temp:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), C_BLACK);
 800204a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800204e:	f7fe ffad 	bl	8000fac <RGB_to_BRG>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	2300      	movs	r3, #0
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	9200      	str	r2, [sp, #0]
 800205c:	4b4b      	ldr	r3, [pc, #300]	; (800218c <main+0x774>)
 800205e:	4a4e      	ldr	r2, [pc, #312]	; (8002198 <main+0x780>)
 8002060:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002064:	2000      	movs	r0, #0
 8002066:	f002 fb63 	bl	8004730 <LCD_PutStr>
		LCD_PutStr(125, 300, "POWER ->", FONT_arial_16X18, RGB_to_BRG(C_WHITE), C_BLACK);
 800206a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800206e:	f7fe ff9d 	bl	8000fac <RGB_to_BRG>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	2300      	movs	r3, #0
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	9200      	str	r2, [sp, #0]
 800207c:	4b43      	ldr	r3, [pc, #268]	; (800218c <main+0x774>)
 800207e:	4a47      	ldr	r2, [pc, #284]	; (800219c <main+0x784>)
 8002080:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002084:	207d      	movs	r0, #125	; 0x7d
 8002086:	f002 fb53 	bl	8004730 <LCD_PutStr>


		UG_DrawFrame(208, 53, 232, 319, RGB_to_BRG(C_WHITE));
 800208a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800208e:	f7fe ff8d 	bl	8000fac <RGB_to_BRG>
 8002092:	4603      	mov	r3, r0
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	f240 133f 	movw	r3, #319	; 0x13f
 800209a:	22e8      	movs	r2, #232	; 0xe8
 800209c:	2135      	movs	r1, #53	; 0x35
 800209e:	20d0      	movs	r0, #208	; 0xd0
 80020a0:	f00d fbc8 	bl	800f834 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 318, RGB_to_BRG(C_WHITE));
 80020a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020a8:	f7fe ff80 	bl	8000fac <RGB_to_BRG>
 80020ac:	4603      	mov	r3, r0
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80020b4:	22e7      	movs	r2, #231	; 0xe7
 80020b6:	2136      	movs	r1, #54	; 0x36
 80020b8:	20d1      	movs	r0, #209	; 0xd1
 80020ba:	f00d fbbb 	bl	800f834 <UG_DrawFrame>


		UG_FillFrame(180, 60, 200, 80, RGB_to_BRG(C_RED));
 80020be:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80020c2:	f7fe ff73 	bl	8000fac <RGB_to_BRG>
 80020c6:	4603      	mov	r3, r0
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2350      	movs	r3, #80	; 0x50
 80020cc:	22c8      	movs	r2, #200	; 0xc8
 80020ce:	213c      	movs	r1, #60	; 0x3c
 80020d0:	20b4      	movs	r0, #180	; 0xb4
 80020d2:	f00d fb3d 	bl	800f750 <UG_FillFrame>
		UG_FillFrame(180, 80, 200, 100, RGB_to_BRG(C_GREEN));
 80020d6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80020da:	f7fe ff67 	bl	8000fac <RGB_to_BRG>
 80020de:	4603      	mov	r3, r0
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2364      	movs	r3, #100	; 0x64
 80020e4:	22c8      	movs	r2, #200	; 0xc8
 80020e6:	2150      	movs	r1, #80	; 0x50
 80020e8:	20b4      	movs	r0, #180	; 0xb4
 80020ea:	f00d fb31 	bl	800f750 <UG_FillFrame>
		UG_FillFrame(180, 100, 200, 120, RGB_to_BRG(C_BLUE));
 80020ee:	201f      	movs	r0, #31
 80020f0:	f7fe ff5c 	bl	8000fac <RGB_to_BRG>
 80020f4:	4603      	mov	r3, r0
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2378      	movs	r3, #120	; 0x78
 80020fa:	22c8      	movs	r2, #200	; 0xc8
 80020fc:	2164      	movs	r1, #100	; 0x64
 80020fe:	20b4      	movs	r0, #180	; 0xb4
 8002100:	f00d fb26 	bl	800f750 <UG_FillFrame>
		UG_FillFrame(180, 120, 200, 140, RGB_to_BRG(C_ORANGE));
 8002104:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002108:	f7fe ff50 	bl	8000fac <RGB_to_BRG>
 800210c:	4603      	mov	r3, r0
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	238c      	movs	r3, #140	; 0x8c
 8002112:	22c8      	movs	r2, #200	; 0xc8
 8002114:	2178      	movs	r1, #120	; 0x78
 8002116:	20b4      	movs	r0, #180	; 0xb4
 8002118:	f00d fb1a 	bl	800f750 <UG_FillFrame>
		UG_FillFrame(180, 140, 200, 160, RGB_to_BRG(C_WHITE));
 800211c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002120:	f7fe ff44 	bl	8000fac <RGB_to_BRG>
 8002124:	e03c      	b.n	80021a0 <main+0x788>
 8002126:	bf00      	nop
 8002128:	00000000 	.word	0x00000000
 800212c:	40790000 	.word	0x40790000
	...
 800213c:	4072c000 	.word	0x4072c000
 8002140:	00000000 	.word	0x00000000
 8002144:	c072c000 	.word	0xc072c000
 8002148:	20000538 	.word	0x20000538
 800214c:	08017214 	.word	0x08017214
 8002150:	20000480 	.word	0x20000480
 8002154:	20000488 	.word	0x20000488
 8002158:	20000490 	.word	0x20000490
 800215c:	20000570 	.word	0x20000570
 8002160:	20000568 	.word	0x20000568
 8002164:	20000030 	.word	0x20000030
 8002168:	200018e0 	.word	0x200018e0
 800216c:	2000000c 	.word	0x2000000c
 8002170:	0801e2ec 	.word	0x0801e2ec
 8002174:	0801721c 	.word	0x0801721c
 8002178:	08018efc 	.word	0x08018efc
 800217c:	08017228 	.word	0x08017228
 8002180:	08024ba4 	.word	0x08024ba4
 8002184:	08017234 	.word	0x08017234
 8002188:	08017238 	.word	0x08017238
 800218c:	08017374 	.word	0x08017374
 8002190:	08017244 	.word	0x08017244
 8002194:	08017254 	.word	0x08017254
 8002198:	08017264 	.word	0x08017264
 800219c:	08017270 	.word	0x08017270
 80021a0:	4603      	mov	r3, r0
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	23a0      	movs	r3, #160	; 0xa0
 80021a6:	22c8      	movs	r2, #200	; 0xc8
 80021a8:	218c      	movs	r1, #140	; 0x8c
 80021aa:	20b4      	movs	r0, #180	; 0xb4
 80021ac:	f00d fad0 	bl	800f750 <UG_FillFrame>
		UG_FillFrame(180, 160, 200, 180, RGB_to_BRG(C_BLACK));
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7fe fefb 	bl	8000fac <RGB_to_BRG>
 80021b6:	4603      	mov	r3, r0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	23b4      	movs	r3, #180	; 0xb4
 80021bc:	22c8      	movs	r2, #200	; 0xc8
 80021be:	21a0      	movs	r1, #160	; 0xa0
 80021c0:	20b4      	movs	r0, #180	; 0xb4
 80021c2:	f00d fac5 	bl	800f750 <UG_FillFrame>
		UG_FillFrame(180, 180, 200, 200, RGB_to_BRG(C_YELLOW));
 80021c6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80021ca:	f7fe feef 	bl	8000fac <RGB_to_BRG>
 80021ce:	4603      	mov	r3, r0
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	23c8      	movs	r3, #200	; 0xc8
 80021d4:	22c8      	movs	r2, #200	; 0xc8
 80021d6:	21b4      	movs	r1, #180	; 0xb4
 80021d8:	20b4      	movs	r0, #180	; 0xb4
 80021da:	f00d fab9 	bl	800f750 <UG_FillFrame>
		UG_FillFrame(180, 200, 200, 220, RGB_to_BRG(C_DARK_GREEN));
 80021de:	f44f 7048 	mov.w	r0, #800	; 0x320
 80021e2:	f7fe fee3 	bl	8000fac <RGB_to_BRG>
 80021e6:	4603      	mov	r3, r0
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	23dc      	movs	r3, #220	; 0xdc
 80021ec:	22c8      	movs	r2, #200	; 0xc8
 80021ee:	21c8      	movs	r1, #200	; 0xc8
 80021f0:	20b4      	movs	r0, #180	; 0xb4
 80021f2:	f00d faad 	bl	800f750 <UG_FillFrame>
		UG_FillFrame(180, 220, 200, 240, RGB_to_BRG(C_LIGHT_SKY_BLUE));
 80021f6:	f248 607e 	movw	r0, #34430	; 0x867e
 80021fa:	f7fe fed7 	bl	8000fac <RGB_to_BRG>
 80021fe:	4603      	mov	r3, r0
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	23f0      	movs	r3, #240	; 0xf0
 8002204:	22c8      	movs	r2, #200	; 0xc8
 8002206:	21dc      	movs	r1, #220	; 0xdc
 8002208:	20b4      	movs	r0, #180	; 0xb4
 800220a:	f00d faa1 	bl	800f750 <UG_FillFrame>



		double i = 0.0;
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	e9c7 2306 	strd	r2, r3, [r7, #24]

  		/* Start-up beep */
  		beep();
 800221a:	f7ff f929 	bl	8001470 <beep>
  		HAL_Delay(200);
 800221e:	20c8      	movs	r0, #200	; 0xc8
 8002220:	f002 fb94 	bl	800494c <HAL_Delay>
  		beep();
 8002224:	f7ff f924 	bl	8001470 <beep>
  		HAL_Delay(200);
 8002228:	20c8      	movs	r0, #200	; 0xc8
 800222a:	f002 fb8f 	bl	800494c <HAL_Delay>
  		beep();
 800222e:	f7ff f91f 	bl	8001470 <beep>

  		while (1){
  			i = i+2;
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800223a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800223e:	f7fe f825 	bl	800028c <__adddf3>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	e9c7 2306 	strd	r2, r3, [r7, #24]

			if(i>400){
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <main+0x8ec>)
 8002250:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002254:	f7fe fc60 	bl	8000b18 <__aeabi_dcmpgt>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <main+0x852>
				i=0.0;
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	e9c7 2306 	strd	r2, r3, [r7, #24]
			}




  			check_beep();
 800226a:	f7ff f911 	bl	8001490 <check_beep>
  			check_emergency_shutdown();
 800226e:	f7ff f91f 	bl	80014b0 <check_emergency_shutdown>

  			if(HAL_GetTick() - previous_sensor_PID_update >= interval_sensor_update){
 8002272:	f002 fb5f 	bl	8004934 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	4b23      	ldr	r3, [pc, #140]	; (8002308 <main+0x8f0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1ad2      	subs	r2, r2, r3
 800227e:	4b23      	ldr	r3, [pc, #140]	; (800230c <main+0x8f4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d30e      	bcc.n	80022a4 <main+0x88c>
  				get_stand_status();
 8002286:	f7ff f9f3 	bl	8001670 <get_stand_status>
  				get_bus_voltage();
 800228a:	f7fe fee1 	bl	8001050 <get_bus_voltage>
  				get_handle_type();
 800228e:	f7ff fa7f 	bl	8001790 <get_handle_type>
  				get_enc_button_status();
 8002292:	f7ff f981 	bl	8001598 <get_enc_button_status>
  				get_set_temperature();
 8002296:	f7ff f8b3 	bl	8001400 <get_set_temperature>
  				previous_sensor_PID_update = HAL_GetTick();
 800229a:	f002 fb4b 	bl	8004934 <HAL_GetTick>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <main+0x8f0>)
 80022a2:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <main+0x8f8>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d841      	bhi.n	8002330 <main+0x918>
 80022ac:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <main+0x89c>)
 80022ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	080022d9 	.word	0x080022d9
 80022b8:	080022e7 	.word	0x080022e7
 80022bc:	080022f5 	.word	0x080022f5
 80022c0:	080022c9 	.word	0x080022c9
 80022c4:	08002321 	.word	0x08002321
  				case EMERGENCY_SLEEP: {
  					PID_setpoint = 0;
 80022c8:	4912      	ldr	r1, [pc, #72]	; (8002314 <main+0x8fc>)
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80022d6:	e02b      	b.n	8002330 <main+0x918>
  				}
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <main+0x900>)
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	490d      	ldr	r1, [pc, #52]	; (8002314 <main+0x8fc>)
 80022e0:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80022e4:	e024      	b.n	8002330 <main+0x918>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <main+0x904>)
 80022e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022ec:	4909      	ldr	r1, [pc, #36]	; (8002314 <main+0x8fc>)
 80022ee:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80022f2:	e01d      	b.n	8002330 <main+0x918>
  				}
  				case SLEEP: {
  					PID_setpoint = 0;
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <main+0x8fc>)
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002302:	e015      	b.n	8002330 <main+0x918>
 8002304:	40790000 	.word	0x40790000
 8002308:	20000478 	.word	0x20000478
 800230c:	20000014 	.word	0x20000014
 8002310:	20000018 	.word	0x20000018
 8002314:	20000570 	.word	0x20000570
 8002318:	20000028 	.word	0x20000028
 800231c:	20000538 	.word	0x20000538
  				}
  				case HALTED: {
  					PID_setpoint = 0;
 8002320:	49bf      	ldr	r1, [pc, #764]	; (8002620 <main+0xc08>)
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 800232e:	bf00      	nop
  				}
  			}

  			if(HAL_GetTick() - previous_PID_update >= interval_PID_update){
 8002330:	f002 fb00 	bl	8004934 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	4bbb      	ldr	r3, [pc, #748]	; (8002624 <main+0xc0c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	1ad2      	subs	r2, r2, r3
 800233c:	4bba      	ldr	r3, [pc, #744]	; (8002628 <main+0xc10>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d34e      	bcc.n	80023e2 <main+0x9ca>
  				set_heater_duty(0);
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff fadd 	bl	8001904 <set_heater_duty>
  				HAL_Delay(5); // Wait to let the thermocouple voltage stabilize before taking measurement
 800234a:	2005      	movs	r0, #5
 800234c:	f002 fafe 	bl	800494c <HAL_Delay>
  				get_actual_temperature();
 8002350:	f7fe feae 	bl	80010b0 <get_actual_temperature>

  				/* Compute PID and set duty cycle */
  				PID_Compute(&TPID);
 8002354:	48b5      	ldr	r0, [pc, #724]	; (800262c <main+0xc14>)
 8002356:	f000 fefb 	bl	8003150 <PID_Compute>
  				duty_cycle = PID_output*(max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 800235a:	4bb5      	ldr	r3, [pc, #724]	; (8002630 <main+0xc18>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f8f2 	bl	8000548 <__aeabi_f2d>
 8002364:	a3a4      	add	r3, pc, #656	; (adr r3, 80025f8 <main+0xbe0>)
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	f7fe f945 	bl	80005f8 <__aeabi_dmul>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4614      	mov	r4, r2
 8002374:	461d      	mov	r5, r3
 8002376:	4baf      	ldr	r3, [pc, #700]	; (8002634 <main+0xc1c>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f8e4 	bl	8000548 <__aeabi_f2d>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4620      	mov	r0, r4
 8002386:	4629      	mov	r1, r5
 8002388:	f7fe fa60 	bl	800084c <__aeabi_ddiv>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	4ba8      	ldr	r3, [pc, #672]	; (8002638 <main+0xc20>)
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	f7fe f92d 	bl	80005f8 <__aeabi_dmul>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	49a6      	ldr	r1, [pc, #664]	; (800263c <main+0xc24>)
 80023a4:	e9c1 2300 	strd	r2, r3, [r1]
  				set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 80023a8:	4ba4      	ldr	r3, [pc, #656]	; (800263c <main+0xc24>)
 80023aa:	ed93 7b00 	vldr	d7, [r3]
 80023ae:	ed9f 2b94 	vldr	d2, [pc, #592]	; 8002600 <main+0xbe8>
 80023b2:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8002608 <main+0xbf0>
 80023b6:	eeb0 0a47 	vmov.f32	s0, s14
 80023ba:	eef0 0a67 	vmov.f32	s1, s15
 80023be:	f7fe fdc5 	bl	8000f4c <clamp>
 80023c2:	ec53 2b10 	vmov	r2, r3, d0
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	f7fe fbed 	bl	8000ba8 <__aeabi_d2uiz>
 80023ce:	4603      	mov	r3, r0
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fa96 	bl	8001904 <set_heater_duty>

  				previous_PID_update = HAL_GetTick();
 80023d8:	f002 faac 	bl	8004934 <HAL_GetTick>
 80023dc:	4603      	mov	r3, r0
 80023de:	4a91      	ldr	r2, [pc, #580]	; (8002624 <main+0xc0c>)
 80023e0:	6013      	str	r3, [r2, #0]
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information over serial */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 80023e2:	f002 faa7 	bl	8004934 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b95      	ldr	r3, [pc, #596]	; (8002640 <main+0xc28>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	1ad2      	subs	r2, r2, r3
 80023ee:	4b95      	ldr	r3, [pc, #596]	; (8002644 <main+0xc2c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d362      	bcc.n	80024bc <main+0xaa4>
  				memset(&buffer, '\0', sizeof(buffer));
 80023f6:	2228      	movs	r2, #40	; 0x28
 80023f8:	2100      	movs	r1, #0
 80023fa:	4893      	ldr	r0, [pc, #588]	; (8002648 <main+0xc30>)
 80023fc:	f011 fd2f 	bl	8013e5e <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002400:	4b8c      	ldr	r3, [pc, #560]	; (8002634 <main+0xc1c>)
 8002402:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8002406:	4b8b      	ldr	r3, [pc, #556]	; (8002634 <main+0xc1c>)
 8002408:	e9d3 4500 	ldrd	r4, r5, [r3]
 800240c:	4b8a      	ldr	r3, [pc, #552]	; (8002638 <main+0xc20>)
 800240e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	4b8d      	ldr	r3, [pc, #564]	; (800264c <main+0xc34>)
 8002418:	f7fe fa18 	bl	800084c <__aeabi_ddiv>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	ec43 2b19 	vmov	d9, r2, r3
  						sensor_values.actual_temperature, sensor_values.set_temperature,
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002424:	4881      	ldr	r0, [pc, #516]	; (800262c <main+0xc14>)
 8002426:	f001 f9cd 	bl	80037c4 <PID_GetPpart>
 800242a:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	4b86      	ldr	r3, [pc, #536]	; (800264c <main+0xc34>)
 8002434:	f7fe fa0a 	bl	800084c <__aeabi_ddiv>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002440:	487a      	ldr	r0, [pc, #488]	; (800262c <main+0xc14>)
 8002442:	f001 f9d1 	bl	80037e8 <PID_GetIpart>
 8002446:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	4b7f      	ldr	r3, [pc, #508]	; (800264c <main+0xc34>)
 8002450:	f7fe f9fc 	bl	800084c <__aeabi_ddiv>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 800245c:	4873      	ldr	r0, [pc, #460]	; (800262c <main+0xc14>)
 800245e:	f001 f9d5 	bl	800380c <PID_GetDpart>
 8002462:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	4b78      	ldr	r3, [pc, #480]	; (800264c <main+0xc34>)
 800246c:	f7fe f9ee 	bl	800084c <__aeabi_ddiv>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4690      	mov	r8, r2
 8002476:	4699      	mov	r9, r3
 8002478:	4b6e      	ldr	r3, [pc, #440]	; (8002634 <main+0xc1c>)
 800247a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800247e:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <main+0xc1c>)
 8002480:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002484:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002488:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800248c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002490:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002494:	ed8d ab04 	vstr	d10, [sp, #16]
 8002498:	ed8d 9b02 	vstr	d9, [sp, #8]
 800249c:	e9cd 4500 	strd	r4, r5, [sp]
 80024a0:	4652      	mov	r2, sl
 80024a2:	465b      	mov	r3, fp
 80024a4:	496a      	ldr	r1, [pc, #424]	; (8002650 <main+0xc38>)
 80024a6:	4868      	ldr	r0, [pc, #416]	; (8002648 <main+0xc30>)
 80024a8:	f011 fc74 	bl	8013d94 <siprintf>
  						sensor_values.in_stand, sensor_values.enc_button_status);
  				debugPrint(buffer);
 80024ac:	4866      	ldr	r0, [pc, #408]	; (8002648 <main+0xc30>)
 80024ae:	f7fe ff0d 	bl	80012cc <debugPrint>
  				previous_millis_debug = HAL_GetTick();
 80024b2:	f002 fa3f 	bl	8004934 <HAL_GetTick>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4a61      	ldr	r2, [pc, #388]	; (8002640 <main+0xc28>)
 80024ba:	6013      	str	r3, [r2, #0]
  					previous_check_for_valid_heater_update = HAL_GetTick();
  				}
  			}

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 80024bc:	f002 fa3a 	bl	8004934 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b64      	ldr	r3, [pc, #400]	; (8002654 <main+0xc3c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	1ad2      	subs	r2, r2, r3
 80024c8:	4b63      	ldr	r3, [pc, #396]	; (8002658 <main+0xc40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	f4ff aeb0 	bcc.w	8002232 <main+0x81a>
  				update_display();
 80024d2:	f7fe ff05 	bl	80012e0 <update_display>
  				previous_millis_display = HAL_GetTick();
 80024d6:	f002 fa2d 	bl	8004934 <HAL_GetTick>
 80024da:	4603      	mov	r3, r0
 80024dc:	4a5d      	ldr	r2, [pc, #372]	; (8002654 <main+0xc3c>)
 80024de:	6013      	str	r3, [r2, #0]


  				memset(&buffer, '\0', sizeof(buffer));
 80024e0:	2228      	movs	r2, #40	; 0x28
 80024e2:	2100      	movs	r1, #0
 80024e4:	4858      	ldr	r0, [pc, #352]	; (8002648 <main+0xc30>)
 80024e6:	f011 fcba 	bl	8013e5e <memset>
  				sprintf(buffer, "%.f", i);
 80024ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ee:	495b      	ldr	r1, [pc, #364]	; (800265c <main+0xc44>)
 80024f0:	4855      	ldr	r0, [pc, #340]	; (8002648 <main+0xc30>)
 80024f2:	f011 fc4f 	bl	8013d94 <siprintf>
  				if(i<100){
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	4b59      	ldr	r3, [pc, #356]	; (8002660 <main+0xc48>)
 80024fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002500:	f7fe faec 	bl	8000adc <__aeabi_dcmplt>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <main+0xafe>
  					buffer[2] = 32;
 800250a:	4b4f      	ldr	r3, [pc, #316]	; (8002648 <main+0xc30>)
 800250c:	2220      	movs	r2, #32
 800250e:	709a      	strb	r2, [r3, #2]
  					buffer[3] = 32;
 8002510:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <main+0xc30>)
 8002512:	2220      	movs	r2, #32
 8002514:	70da      	strb	r2, [r3, #3]
  				}
  			  	LCD_PutStr(10, 185, buffer, FONT_arial_49X57, RGB_to_BRG(C_WHITE), C_BLACK);
 8002516:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800251a:	f7fe fd47 	bl	8000fac <RGB_to_BRG>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	2300      	movs	r3, #0
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	9200      	str	r2, [sp, #0]
 8002528:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <main+0xc4c>)
 800252a:	4a47      	ldr	r2, [pc, #284]	; (8002648 <main+0xc30>)
 800252c:	21b9      	movs	r1, #185	; 0xb9
 800252e:	200a      	movs	r0, #10
 8002530:	f002 f8fe 	bl	8004730 <LCD_PutStr>

  	  			UG_FillFrame(210, 317-(i/PID_MAX_OUTPUT)*262, 230, 317, RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <main+0xc50>)
 800253a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800253e:	f7fe f985 	bl	800084c <__aeabi_ddiv>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	a331      	add	r3, pc, #196	; (adr r3, 8002610 <main+0xbf8>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fe f852 	bl	80005f8 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	a12f      	add	r1, pc, #188	; (adr r1, 8002618 <main+0xc00>)
 800255a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800255e:	f7fd fe93 	bl	8000288 <__aeabi_dsub>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	f7fe faf5 	bl	8000b58 <__aeabi_d2iz>
 800256e:	4603      	mov	r3, r0
 8002570:	b21c      	sxth	r4, r3
 8002572:	f248 607e 	movw	r0, #34430	; 0x867e
 8002576:	f7fe fd19 	bl	8000fac <RGB_to_BRG>
 800257a:	4603      	mov	r3, r0
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	f240 133d 	movw	r3, #317	; 0x13d
 8002582:	22e6      	movs	r2, #230	; 0xe6
 8002584:	4621      	mov	r1, r4
 8002586:	20d2      	movs	r0, #210	; 0xd2
 8002588:	f00d f8e2 	bl	800f750 <UG_FillFrame>
  	  			UG_FillFrame(210, 55, 230, 317-(i/PID_MAX_OUTPUT)*262-1, RGB_to_BRG(C_BLACK));
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	4b35      	ldr	r3, [pc, #212]	; (8002668 <main+0xc50>)
 8002592:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002596:	f7fe f959 	bl	800084c <__aeabi_ddiv>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	a31b      	add	r3, pc, #108	; (adr r3, 8002610 <main+0xbf8>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	f7fe f826 	bl	80005f8 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	a119      	add	r1, pc, #100	; (adr r1, 8002618 <main+0xc00>)
 80025b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025b6:	f7fd fe67 	bl	8000288 <__aeabi_dsub>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	4b29      	ldr	r3, [pc, #164]	; (800266c <main+0xc54>)
 80025c8:	f7fd fe5e 	bl	8000288 <__aeabi_dsub>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fe fac0 	bl	8000b58 <__aeabi_d2iz>
 80025d8:	4603      	mov	r3, r0
 80025da:	b21c      	sxth	r4, r3
 80025dc:	2000      	movs	r0, #0
 80025de:	f7fe fce5 	bl	8000fac <RGB_to_BRG>
 80025e2:	4603      	mov	r3, r0
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	4623      	mov	r3, r4
 80025e8:	22e6      	movs	r2, #230	; 0xe6
 80025ea:	2137      	movs	r1, #55	; 0x37
 80025ec:	20d2      	movs	r0, #210	; 0xd2
 80025ee:	f00d f8af 	bl	800f750 <UG_FillFrame>
  			i = i+2;
 80025f2:	e61e      	b.n	8002232 <main+0x81a>
 80025f4:	f3af 8000 	nop.w
 80025f8:	eb851eb8 	.word	0xeb851eb8
 80025fc:	3fbeb851 	.word	0x3fbeb851
 8002600:	00000000 	.word	0x00000000
 8002604:	40790000 	.word	0x40790000
	...
 8002614:	40706000 	.word	0x40706000
 8002618:	00000000 	.word	0x00000000
 800261c:	4073d000 	.word	0x4073d000
 8002620:	20000570 	.word	0x20000570
 8002624:	20000468 	.word	0x20000468
 8002628:	2000000c 	.word	0x2000000c
 800262c:	200018e0 	.word	0x200018e0
 8002630:	200004c0 	.word	0x200004c0
 8002634:	20000028 	.word	0x20000028
 8002638:	20000568 	.word	0x20000568
 800263c:	20000578 	.word	0x20000578
 8002640:	20000464 	.word	0x20000464
 8002644:	20000008 	.word	0x20000008
 8002648:	20000498 	.word	0x20000498
 800264c:	40240000 	.word	0x40240000
 8002650:	0801727c 	.word	0x0801727c
 8002654:	20000460 	.word	0x20000460
 8002658:	20000004 	.word	0x20000004
 800265c:	080171f8 	.word	0x080171f8
 8002660:	40590000 	.word	0x40590000
 8002664:	08024ba4 	.word	0x08024ba4
 8002668:	40790000 	.word	0x40790000
 800266c:	3ff00000 	.word	0x3ff00000

08002670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b09e      	sub	sp, #120	; 0x78
 8002674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002676:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800267a:	2228      	movs	r2, #40	; 0x28
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f011 fbed 	bl	8013e5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002684:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002694:	463b      	mov	r3, r7
 8002696:	223c      	movs	r2, #60	; 0x3c
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f011 fbdf 	bl	8013e5e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80026a0:	2303      	movs	r3, #3
 80026a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 80026aa:	2303      	movs	r3, #3
 80026ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026ae:	2301      	movs	r3, #1
 80026b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026b2:	2310      	movs	r3, #16
 80026b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026b6:	2302      	movs	r3, #2
 80026b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80026c4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026ca:	4618      	mov	r0, r3
 80026cc:	f006 fde2 	bl	8009294 <HAL_RCC_OscConfig>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80026d6:	f000 fc21 	bl	8002f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026da:	230f      	movs	r3, #15
 80026dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026de:	2302      	movs	r3, #2
 80026e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e2:	2300      	movs	r3, #0
 80026e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026f4:	2102      	movs	r1, #2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f007 fe0a 	bl	800a310 <HAL_RCC_ClockConfig>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002702:	f000 fc0b 	bl	8002f1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <SystemClock_Config+0xcc>)
 8002708:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800270a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800271a:	2300      	movs	r3, #0
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800271e:	2300      	movs	r3, #0
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002722:	463b      	mov	r3, r7
 8002724:	4618      	mov	r0, r3
 8002726:	f007 ffdb 	bl	800a6e0 <HAL_RCCEx_PeriphCLKConfig>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002730:	f000 fbf4 	bl	8002f1c <Error_Handler>
  }
}
 8002734:	bf00      	nop
 8002736:	3778      	adds	r7, #120	; 0x78
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	000211a0 	.word	0x000211a0

08002740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002746:	f107 031c 	add.w	r3, r7, #28
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
 8002760:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002762:	4b2e      	ldr	r3, [pc, #184]	; (800281c <MX_ADC1_Init+0xdc>)
 8002764:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800276a:	4b2c      	ldr	r3, [pc, #176]	; (800281c <MX_ADC1_Init+0xdc>)
 800276c:	2200      	movs	r2, #0
 800276e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002770:	4b2a      	ldr	r3, [pc, #168]	; (800281c <MX_ADC1_Init+0xdc>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <MX_ADC1_Init+0xdc>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <MX_ADC1_Init+0xdc>)
 800277e:	2200      	movs	r2, #0
 8002780:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <MX_ADC1_Init+0xdc>)
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <MX_ADC1_Init+0xdc>)
 800278c:	2200      	movs	r2, #0
 800278e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <MX_ADC1_Init+0xdc>)
 8002792:	2201      	movs	r2, #1
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <MX_ADC1_Init+0xdc>)
 8002798:	2200      	movs	r2, #0
 800279a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800279c:	4b1f      	ldr	r3, [pc, #124]	; (800281c <MX_ADC1_Init+0xdc>)
 800279e:	2201      	movs	r2, #1
 80027a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <MX_ADC1_Init+0xdc>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <MX_ADC1_Init+0xdc>)
 80027ac:	2204      	movs	r2, #4
 80027ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <MX_ADC1_Init+0xdc>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80027b6:	4b19      	ldr	r3, [pc, #100]	; (800281c <MX_ADC1_Init+0xdc>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027bc:	4817      	ldr	r0, [pc, #92]	; (800281c <MX_ADC1_Init+0xdc>)
 80027be:	f002 f911 	bl	80049e4 <HAL_ADC_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80027c8:	f000 fba8 	bl	8002f1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	4619      	mov	r1, r3
 80027d6:	4811      	ldr	r0, [pc, #68]	; (800281c <MX_ADC1_Init+0xdc>)
 80027d8:	f003 fce0 	bl	800619c <HAL_ADCEx_MultiModeConfigChannel>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80027e2:	f000 fb9b 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80027e6:	2302      	movs	r3, #2
 80027e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4806      	ldr	r0, [pc, #24]	; (800281c <MX_ADC1_Init+0xdc>)
 8002804:	f003 f9e0 	bl	8005bc8 <HAL_ADC_ConfigChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800280e:	f000 fb85 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	3728      	adds	r7, #40	; 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20001560 	.word	0x20001560

08002820 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
 8002840:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002842:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <MX_ADC3_Init+0xd8>)
 8002844:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <MX_ADC3_Init+0xdc>)
 8002846:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002848:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <MX_ADC3_Init+0xd8>)
 800284a:	2200      	movs	r2, #0
 800284c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800284e:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <MX_ADC3_Init+0xd8>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <MX_ADC3_Init+0xd8>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800285a:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <MX_ADC3_Init+0xd8>)
 800285c:	2201      	movs	r2, #1
 800285e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <MX_ADC3_Init+0xd8>)
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002868:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <MX_ADC3_Init+0xd8>)
 800286a:	2200      	movs	r2, #0
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <MX_ADC3_Init+0xd8>)
 8002870:	2201      	movs	r2, #1
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <MX_ADC3_Init+0xd8>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800287a:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <MX_ADC3_Init+0xd8>)
 800287c:	2201      	movs	r2, #1
 800287e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <MX_ADC3_Init+0xd8>)
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <MX_ADC3_Init+0xd8>)
 800288a:	2204      	movs	r2, #4
 800288c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <MX_ADC3_Init+0xd8>)
 8002890:	2200      	movs	r2, #0
 8002892:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <MX_ADC3_Init+0xd8>)
 8002896:	2200      	movs	r2, #0
 8002898:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800289a:	4817      	ldr	r0, [pc, #92]	; (80028f8 <MX_ADC3_Init+0xd8>)
 800289c:	f002 f8a2 	bl	80049e4 <HAL_ADC_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80028a6:	f000 fb39 	bl	8002f1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	4810      	ldr	r0, [pc, #64]	; (80028f8 <MX_ADC3_Init+0xd8>)
 80028b6:	f003 fc71 	bl	800619c <HAL_ADCEx_MultiModeConfigChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80028c0:	f000 fb2c 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028c4:	2305      	movs	r3, #5
 80028c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80028d0:	2303      	movs	r3, #3
 80028d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_ADC3_Init+0xd8>)
 80028e2:	f003 f971 	bl	8005bc8 <HAL_ADC_ConfigChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80028ec:	f000 fb16 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80028f0:	bf00      	nop
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200015b0 	.word	0x200015b0
 80028fc:	50000400 	.word	0x50000400

08002900 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <MX_CRC_Init+0x3c>)
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <MX_CRC_Init+0x40>)
 8002908:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_CRC_Init+0x3c>)
 800290c:	2200      	movs	r2, #0
 800290e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <MX_CRC_Init+0x3c>)
 8002912:	2200      	movs	r2, #0
 8002914:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_CRC_Init+0x3c>)
 8002918:	2200      	movs	r2, #0
 800291a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <MX_CRC_Init+0x3c>)
 800291e:	2200      	movs	r2, #0
 8002920:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_CRC_Init+0x3c>)
 8002924:	2201      	movs	r2, #1
 8002926:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002928:	4804      	ldr	r0, [pc, #16]	; (800293c <MX_CRC_Init+0x3c>)
 800292a:	f003 ff6b 	bl	8006804 <HAL_CRC_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002934:	f000 faf2 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20001644 	.word	0x20001644
 8002940:	40023000 	.word	0x40023000

08002944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <MX_I2C1_Init+0x74>)
 800294a:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <MX_I2C1_Init+0x78>)
 800294c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <MX_I2C1_Init+0x74>)
 8002950:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <MX_I2C1_Init+0x7c>)
 8002952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <MX_I2C1_Init+0x74>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <MX_I2C1_Init+0x74>)
 800295c:	2201      	movs	r2, #1
 800295e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <MX_I2C1_Init+0x74>)
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002966:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_I2C1_Init+0x74>)
 8002968:	2200      	movs	r2, #0
 800296a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <MX_I2C1_Init+0x74>)
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_I2C1_Init+0x74>)
 8002974:	2200      	movs	r2, #0
 8002976:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_I2C1_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800297e:	480e      	ldr	r0, [pc, #56]	; (80029b8 <MX_I2C1_Init+0x74>)
 8002980:	f004 fe88 	bl	8007694 <HAL_I2C_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800298a:	f000 fac7 	bl	8002f1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800298e:	2100      	movs	r1, #0
 8002990:	4809      	ldr	r0, [pc, #36]	; (80029b8 <MX_I2C1_Init+0x74>)
 8002992:	f004 ff0e 	bl	80077b2 <HAL_I2CEx_ConfigAnalogFilter>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800299c:	f000 fabe 	bl	8002f1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029a0:	2100      	movs	r1, #0
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_I2C1_Init+0x74>)
 80029a4:	f004 ff50 	bl	8007848 <HAL_I2CEx_ConfigDigitalFilter>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029ae:	f000 fab5 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20001668 	.word	0x20001668
 80029bc:	40005400 	.word	0x40005400
 80029c0:	2000090e 	.word	0x2000090e

080029c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029ca:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <MX_SPI1_Init+0x78>)
 80029cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <MX_SPI1_Init+0x74>)
 80029fc:	2208      	movs	r2, #8
 80029fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a14:	2207      	movs	r2, #7
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a20:	2208      	movs	r2, #8
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a24:	4804      	ldr	r0, [pc, #16]	; (8002a38 <MX_SPI1_Init+0x74>)
 8002a26:	f008 f80b 	bl	800aa40 <HAL_SPI_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8002a30:	f000 fa74 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	200016bc 	.word	0x200016bc
 8002a3c:	40013000 	.word	0x40013000

08002a40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b09a      	sub	sp, #104	; 0x68
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
 8002a70:	615a      	str	r2, [r3, #20]
 8002a72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	222c      	movs	r2, #44	; 0x2c
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f011 f9ef 	bl	8013e5e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a80:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002a82:	4a44      	ldr	r2, [pc, #272]	; (8002b94 <MX_TIM1_Init+0x154>)
 8002a84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 8002a86:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002a88:	f240 1267 	movw	r2, #359	; 0x167
 8002a8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a8e:	4b40      	ldr	r3, [pc, #256]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002a94:	4b3e      	ldr	r3, [pc, #248]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002a96:	2264      	movs	r2, #100	; 0x64
 8002a98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002aa0:	4b3b      	ldr	r3, [pc, #236]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002aa6:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002aa8:	2280      	movs	r2, #128	; 0x80
 8002aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002aac:	4838      	ldr	r0, [pc, #224]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002aae:	f008 fcdb 	bl	800b468 <HAL_TIM_Base_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002ab8:	f000 fa30 	bl	8002f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ac0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ac2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4831      	ldr	r0, [pc, #196]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002aca:	f009 fae9 	bl	800c0a0 <HAL_TIM_ConfigClockSource>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002ad4:	f000 fa22 	bl	8002f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ad8:	482d      	ldr	r0, [pc, #180]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002ada:	f008 fdb6 	bl	800b64a <HAL_TIM_PWM_Init>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002ae4:	f000 fa1a 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002af4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002af8:	4619      	mov	r1, r3
 8002afa:	4825      	ldr	r0, [pc, #148]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002afc:	f00a f888 	bl	800cc10 <HAL_TIMEx_MasterConfigSynchronization>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002b06:	f000 fa09 	bl	8002f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b0a:	2360      	movs	r3, #96	; 0x60
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b12:	2300      	movs	r3, #0
 8002b14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b16:	2300      	movs	r3, #0
 8002b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4818      	ldr	r0, [pc, #96]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002b30:	f009 f9a2 	bl	800be78 <HAL_TIM_PWM_ConfigChannel>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002b3a:	f000 f9ef 	bl	8002f1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4807      	ldr	r0, [pc, #28]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002b74:	f00a f8cc 	bl	800cd10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002b7e:	f000 f9cd 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b82:	4803      	ldr	r0, [pc, #12]	; (8002b90 <MX_TIM1_Init+0x150>)
 8002b84:	f001 f8c4 	bl	8003d10 <HAL_TIM_MspPostInit>

}
 8002b88:	bf00      	nop
 8002b8a:	3768      	adds	r7, #104	; 0x68
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20001764 	.word	0x20001764
 8002b94:	40012c00 	.word	0x40012c00

08002b98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08c      	sub	sp, #48	; 0x30
 8002b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	2224      	movs	r2, #36	; 0x24
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f011 f959 	bl	8013e5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bac:	463b      	mov	r3, r7
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bb6:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <MX_TIM2_Init+0xa4>)
 8002bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <MX_TIM2_Init+0xa4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <MX_TIM2_Init+0xa4>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002bca:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <MX_TIM2_Init+0xa4>)
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <MX_TIM2_Init+0xa4>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <MX_TIM2_Init+0xa4>)
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002be6:	2301      	movs	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002bee:	230a      	movs	r3, #10
 8002bf0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002bfe:	230a      	movs	r3, #10
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002c02:	f107 030c 	add.w	r3, r7, #12
 8002c06:	4619      	mov	r1, r3
 8002c08:	480c      	ldr	r0, [pc, #48]	; (8002c3c <MX_TIM2_Init+0xa4>)
 8002c0a:	f008 fec1 	bl	800b990 <HAL_TIM_Encoder_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002c14:	f000 f982 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c20:	463b      	mov	r3, r7
 8002c22:	4619      	mov	r1, r3
 8002c24:	4805      	ldr	r0, [pc, #20]	; (8002c3c <MX_TIM2_Init+0xa4>)
 8002c26:	f009 fff3 	bl	800cc10 <HAL_TIMEx_MasterConfigSynchronization>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002c30:	f000 f974 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c34:	bf00      	nop
 8002c36:	3730      	adds	r7, #48	; 0x30
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	200017b0 	.word	0x200017b0

08002c40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c46:	f107 031c 	add.w	r3, r7, #28
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c52:	463b      	mov	r3, r7
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
 8002c60:	615a      	str	r2, [r3, #20]
 8002c62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c66:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <MX_TIM4_Init+0xb0>)
 8002c68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9-1;
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c70:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002c7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c8a:	4818      	ldr	r0, [pc, #96]	; (8002cec <MX_TIM4_Init+0xac>)
 8002c8c:	f008 fcdd 	bl	800b64a <HAL_TIM_PWM_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002c96:	f000 f941 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4810      	ldr	r0, [pc, #64]	; (8002cec <MX_TIM4_Init+0xac>)
 8002caa:	f009 ffb1 	bl	800cc10 <HAL_TIMEx_MasterConfigSynchronization>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002cb4:	f000 f932 	bl	8002f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cb8:	2360      	movs	r3, #96	; 0x60
 8002cba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cc8:	463b      	mov	r3, r7
 8002cca:	2204      	movs	r2, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4807      	ldr	r0, [pc, #28]	; (8002cec <MX_TIM4_Init+0xac>)
 8002cd0:	f009 f8d2 	bl	800be78 <HAL_TIM_PWM_ConfigChannel>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002cda:	f000 f91f 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002cde:	4803      	ldr	r0, [pc, #12]	; (8002cec <MX_TIM4_Init+0xac>)
 8002ce0:	f001 f816 	bl	8003d10 <HAL_TIM_MspPostInit>

}
 8002ce4:	bf00      	nop
 8002ce6:	3728      	adds	r7, #40	; 0x28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	200017fc 	.word	0x200017fc
 8002cf0:	40000800 	.word	0x40000800

08002cf4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d04:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <MX_TIM6_Init+0x64>)
 8002d06:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <MX_TIM6_Init+0x68>)
 8002d08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000-1;
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <MX_TIM6_Init+0x64>)
 8002d0c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002d10:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_TIM6_Init+0x64>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <MX_TIM6_Init+0x64>)
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_TIM6_Init+0x64>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d24:	480c      	ldr	r0, [pc, #48]	; (8002d58 <MX_TIM6_Init+0x64>)
 8002d26:	f008 fb9f 	bl	800b468 <HAL_TIM_Base_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002d30:	f000 f8f4 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d34:	2300      	movs	r3, #0
 8002d36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4805      	ldr	r0, [pc, #20]	; (8002d58 <MX_TIM6_Init+0x64>)
 8002d42:	f009 ff65 	bl	800cc10 <HAL_TIMEx_MasterConfigSynchronization>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002d4c:	f000 f8e6 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20001848 	.word	0x20001848
 8002d5c:	40001000 	.word	0x40001000

08002d60 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <MX_TIM16_Init+0x44>)
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <MX_TIM16_Init+0x48>)
 8002d68:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <MX_TIM16_Init+0x44>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <MX_TIM16_Init+0x44>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <MX_TIM16_Init+0x44>)
 8002d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d7c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <MX_TIM16_Init+0x44>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <MX_TIM16_Init+0x44>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <MX_TIM16_Init+0x44>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d90:	4804      	ldr	r0, [pc, #16]	; (8002da4 <MX_TIM16_Init+0x44>)
 8002d92:	f008 fb69 	bl	800b468 <HAL_TIM_Base_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002d9c:	f000 f8be 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20001894 	.word	0x20001894
 8002da8:	40014400 	.word	0x40014400

08002dac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002db2:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <MX_DMA_Init+0x60>)
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <MX_DMA_Init+0x60>)
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	6153      	str	r3, [r2, #20]
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <MX_DMA_Init+0x60>)
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <MX_DMA_Init+0x60>)
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <MX_DMA_Init+0x60>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6153      	str	r3, [r2, #20]
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <MX_DMA_Init+0x60>)
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	200d      	movs	r0, #13
 8002de8:	f003 fcd5 	bl	8006796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002dec:	200d      	movs	r0, #13
 8002dee:	f003 fcee 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	203c      	movs	r0, #60	; 0x3c
 8002df8:	f003 fccd 	bl	8006796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8002dfc:	203c      	movs	r0, #60	; 0x3c
 8002dfe:	f003 fce6 	bl	80067ce <HAL_NVIC_EnableIRQ>

}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000

08002e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08a      	sub	sp, #40	; 0x28
 8002e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	4a3a      	ldr	r2, [pc, #232]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e30:	6153      	str	r3, [r2, #20]
 8002e32:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e3e:	4b35      	ldr	r3, [pc, #212]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e48:	6153      	str	r3, [r2, #20]
 8002e4a:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4a2e      	ldr	r2, [pc, #184]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	6153      	str	r3, [r2, #20]
 8002e62:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6e:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	4a28      	ldr	r2, [pc, #160]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e78:	6153      	str	r3, [r2, #20]
 8002e7a:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <MX_GPIO_Init+0x104>)
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USR_1_Pin|SPI1_DC_Pin|SPI1_RST_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2159      	movs	r1, #89	; 0x59
 8002e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e8e:	f004 fbe9 	bl	8007664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2101      	movs	r1, #1
 8002e96:	4820      	ldr	r0, [pc, #128]	; (8002f18 <MX_GPIO_Init+0x108>)
 8002e98:	f004 fbe4 	bl	8007664 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_1_Pin SPI1_DC_Pin SPI1_RST_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin|SPI1_DC_Pin|SPI1_RST_Pin|SPI1_CS_Pin;
 8002e9c:	2359      	movs	r3, #89	; 0x59
 8002e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eb6:	f004 fa43 	bl	8007340 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002eca:	f107 0314 	add.w	r3, r7, #20
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4811      	ldr	r0, [pc, #68]	; (8002f18 <MX_GPIO_Init+0x108>)
 8002ed2:	f004 fa35 	bl	8007340 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBIT_0_Pin VBIT_1_Pin VBIT_2_Pin VBIT_3_Pin
                           STAND_INP_Pin HANDLE_INP_2_Pin HANDLE_INP_1_Pin SW_1_Pin
                           SW_2_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = VBIT_0_Pin|VBIT_1_Pin|VBIT_2_Pin|VBIT_3_Pin
 8002ed6:	f64d 4376 	movw	r3, #56438	; 0xdc76
 8002eda:	617b      	str	r3, [r7, #20]
                          |STAND_INP_Pin|HANDLE_INP_2_Pin|HANDLE_INP_1_Pin|SW_1_Pin
                          |SW_2_Pin|SW_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	4619      	mov	r1, r3
 8002eea:	480b      	ldr	r0, [pc, #44]	; (8002f18 <MX_GPIO_Init+0x108>)
 8002eec:	f004 fa28 	bl	8007340 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_2_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin;
 8002ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_2_GPIO_Port, &GPIO_InitStruct);
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	4619      	mov	r1, r3
 8002f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f08:	f004 fa1a 	bl	8007340 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f0c:	bf00      	nop
 8002f0e:	3728      	adds	r7, #40	; 0x28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	48000400 	.word	0x48000400

08002f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f20:	b672      	cpsid	i
}
 8002f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <Error_Handler+0x8>

08002f26 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e008      	b.n	8002f60 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	2200      	movs	r2, #0
 8002f58:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	d4e9      	bmi.n	8002f4e <Moving_Average_Init+0x28>
	}
}
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	441a      	add	r2, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002fae:	6839      	ldr	r1, [r7, #0]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	1ad2      	subs	r2, r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	edd3 7a00 	vldr	s15, [r3]
 8002fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fe6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff2:	d507      	bpl.n	8003004 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8003002:	e003      	b.n	800300c <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	edd3 7a00 	vldr	s15, [r3]
 8003020:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003024:	ee16 0a90 	vmov	r0, s13
 8003028:	f7fd fa8e 	bl	8000548 <__aeabi_f2d>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	ec43 2b17 	vmov	d7, r2, r3
}
 8003034:	eeb0 0a47 	vmov.f32	s0, s14
 8003038:	eef0 0a67 	vmov.f32	s1, s15
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003072:	f7fd fd51 	bl	8000b18 <__aeabi_dcmpgt>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d006      	beq.n	800308a <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8003088:	e011      	b.n	80030ae <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003096:	f7fd fd21 	bl	8000adc <__aeabi_dcmplt>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d100      	bne.n	80030a2 <PID_Init+0x60>
}
 80030a0:	e005      	b.n	80030ae <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6278      	str	r0, [r7, #36]	; 0x24
 80030c0:	6239      	str	r1, [r7, #32]
 80030c2:	61fa      	str	r2, [r7, #28]
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	ed87 0b04 	vstr	d0, [r7, #16]
 80030ca:	ed87 1b02 	vstr	d1, [r7, #8]
 80030ce:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	6a3a      	ldr	r2, [r7, #32]
 80030dc:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	2200      	movs	r2, #0
 80030e8:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80030ea:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003140 <PID+0x88>
 80030ee:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8003148 <PID+0x90>
 80030f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030f4:	f000 f991 	bl	800341a <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	2264      	movs	r2, #100	; 0x64
 80030fc:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 80030fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003102:	4619      	mov	r1, r3
 8003104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003106:	f000 fad9 	bl	80036bc <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800310a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800310e:	4619      	mov	r1, r3
 8003110:	ed97 2b00 	vldr	d2, [r7]
 8003114:	ed97 1b02 	vldr	d1, [r7, #8]
 8003118:	ed97 0b04 	vldr	d0, [r7, #16]
 800311c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800311e:	f000 fa25 	bl	800356c <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003122:	f001 fc07 	bl	8004934 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	1ad2      	subs	r2, r2, r3
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	605a      	str	r2, [r3, #4]

}
 8003132:	bf00      	nop
 8003134:	3728      	adds	r7, #40	; 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	f3af 8000 	nop.w
 8003140:	00000000 	.word	0x00000000
 8003144:	406fe000 	.word	0x406fe000
	...

08003150 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8003150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003154:	b08c      	sub	sp, #48	; 0x30
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <PID_Compute+0x16>
	{
		return _FALSE;
 8003162:	2300      	movs	r3, #0
 8003164:	e136      	b.n	80033d4 <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003166:	f001 fbe5 	bl	8004934 <HAL_GetTick>
 800316a:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	6a3a      	ldr	r2, [r7, #32]
 800317c:	429a      	cmp	r2, r3
 800317e:	d204      	bcs.n	800318a <PID_Compute+0x3a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8124 	beq.w	80033d2 <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800319e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a2:	f7fd f871 	bl	8000288 <__aeabi_dsub>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80031b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031b8:	f7fd f866 	bl	8000288 <__aeabi_dsub>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80031d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031d4:	f7fd fa10 	bl	80005f8 <__aeabi_dmul>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4650      	mov	r0, sl
 80031de:	4659      	mov	r1, fp
 80031e0:	f7fd f854 	bl	800028c <__adddf3>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80031fa:	f7fd fc8d 	bl	8000b18 <__aeabi_dcmpgt>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003210:	e010      	b.n	8003234 <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800321e:	f7fd fc5d 	bl	8000adc <__aeabi_dcmplt>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d114      	bne.n	8003272 <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003258:	f7fd f9ce 	bl	80005f8 <__aeabi_dmul>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4650      	mov	r0, sl
 8003262:	4659      	mov	r1, fp
 8003264:	f7fd f810 	bl	8000288 <__aeabi_dsub>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800327e:	f7fd fc4b 	bl	8000b18 <__aeabi_dcmpgt>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003294:	e010      	b.n	80032b8 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80032a2:	f7fd fc1b 	bl	8000adc <__aeabi_dcmplt>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80032be:	4690      	mov	r8, r2
 80032c0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80032c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032c8:	4640      	mov	r0, r8
 80032ca:	4649      	mov	r1, r9
 80032cc:	f7fd f994 	bl	80005f8 <__aeabi_dmul>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d017      	beq.n	8003312 <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80032e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032ec:	f7fd f984 	bl	80005f8 <__aeabi_dmul>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80032fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003302:	f7fd f979 	bl	80005f8 <__aeabi_dmul>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003310:	e005      	b.n	800331e <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800332a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800332e:	f7fd f963 	bl	80005f8 <__aeabi_dmul>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4640      	mov	r0, r8
 8003338:	4649      	mov	r1, r9
 800333a:	f7fc ffa5 	bl	8000288 <__aeabi_dsub>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003346:	f7fc ffa1 	bl	800028c <__adddf3>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003358:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800335c:	f7fd fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800336c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003370:	e00e      	b.n	8003390 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003378:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800337c:	f7fd fbae 	bl	8000adc <__aeabi_dcmplt>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800338c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003396:	4614      	mov	r4, r2
 8003398:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800339c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a0:	4620      	mov	r0, r4
 80033a2:	4629      	mov	r1, r5
 80033a4:	f7fd f928 	bl	80005f8 <__aeabi_dmul>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80033b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033ba:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033cc:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 80033d2:	2300      	movs	r3, #0
	}

}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3730      	adds	r7, #48	; 0x30
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080033de <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <PID_SetMode+0x2e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	785b      	ldrb	r3, [r3, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fe1b 	bl	8003042 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	705a      	strb	r2, [r3, #1]

}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	6178      	str	r0, [r7, #20]
 8003422:	ed87 0b02 	vstr	d0, [r7, #8]
 8003426:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800342a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800342e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003432:	f7fd fb67 	bl	8000b04 <__aeabi_dcmpge>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d158      	bne.n	80034ee <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800343c:	6979      	ldr	r1, [r7, #20]
 800343e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003442:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 8003446:	6979      	ldr	r1, [r7, #20]
 8003448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800344c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d04b      	beq.n	80034f0 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003466:	f7fd fb57 	bl	8000b18 <__aeabi_dcmpgt>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800347a:	e9c1 2300 	strd	r2, r3, [r1]
 800347e:	e012      	b.n	80034a6 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800348e:	f7fd fb25 	bl	8000adc <__aeabi_dcmplt>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80034a2:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80034b2:	f7fd fb31 	bl	8000b18 <__aeabi_dcmpgt>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d006      	beq.n	80034ca <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80034c2:	6979      	ldr	r1, [r7, #20]
 80034c4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80034c8:	e012      	b.n	80034f0 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80034d6:	f7fd fb01 	bl	8000adc <__aeabi_dcmplt>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80034e6:	6979      	ldr	r1, [r7, #20]
 80034e8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80034ec:	e000      	b.n	80034f0 <PID_SetOutputLimits+0xd6>
		return;
 80034ee:	bf00      	nop
		}
		else { }

	}

}
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6178      	str	r0, [r7, #20]
 80034fe:	ed87 0b02 	vstr	d0, [r7, #8]
 8003502:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800350a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800350e:	f7fd faf9 	bl	8000b04 <__aeabi_dcmpge>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8003518:	6979      	ldr	r1, [r7, #20]
 800351a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800351e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8003522:	6979      	ldr	r1, [r7, #20]
 8003524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003528:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800352c:	e000      	b.n	8003530 <PID_SetILimits+0x3a>
		return;
 800352e:	bf00      	nop
}
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b088      	sub	sp, #32
 800353a:	af00      	add	r7, sp, #0
 800353c:	61f8      	str	r0, [r7, #28]
 800353e:	ed87 0b04 	vstr	d0, [r7, #16]
 8003542:	ed87 1b02 	vstr	d1, [r7, #8]
 8003546:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	789b      	ldrb	r3, [r3, #2]
 800354e:	4619      	mov	r1, r3
 8003550:	ed97 2b00 	vldr	d2, [r7]
 8003554:	ed97 1b02 	vldr	d1, [r7, #8]
 8003558:	ed97 0b04 	vldr	d0, [r7, #16]
 800355c:	69f8      	ldr	r0, [r7, #28]
 800355e:	f000 f805 	bl	800356c <PID_SetTunings2>
}
 8003562:	bf00      	nop
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	61f8      	str	r0, [r7, #28]
 8003574:	ed87 0b04 	vstr	d0, [r7, #16]
 8003578:	ed87 1b02 	vstr	d1, [r7, #8]
 800357c:	ed87 2b00 	vstr	d2, [r7]
 8003580:	460b      	mov	r3, r1
 8003582:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003590:	f7fd faa4 	bl	8000adc <__aeabi_dcmplt>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 8089 	bne.w	80036ae <PID_SetTunings2+0x142>
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035a8:	f7fd fa98 	bl	8000adc <__aeabi_dcmplt>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d17d      	bne.n	80036ae <PID_SetTunings2+0x142>
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035be:	f7fd fa8d 	bl	8000adc <__aeabi_dcmplt>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d172      	bne.n	80036ae <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	7efa      	ldrb	r2, [r7, #27]
 80035cc:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80035ce:	7efb      	ldrb	r3, [r7, #27]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80035e0:	69f9      	ldr	r1, [r7, #28]
 80035e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80035ea:	69f9      	ldr	r1, [r7, #28]
 80035ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80035f4:	69f9      	ldr	r1, [r7, #28]
 80035f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035fa:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fc ff7e 	bl	8000504 <__aeabi_ui2d>
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <PID_SetTunings2+0x14c>)
 800360e:	f7fd f91d 	bl	800084c <__aeabi_ddiv>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800361a:	69f9      	ldr	r1, [r7, #28]
 800361c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003620:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003624:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003628:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800362c:	f7fc ffe4 	bl	80005f8 <__aeabi_dmul>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	69f9      	ldr	r1, [r7, #28]
 8003636:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800363a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800363e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003642:	f7fd f903 	bl	800084c <__aeabi_ddiv>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	69f9      	ldr	r1, [r7, #28]
 800364c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	78db      	ldrb	r3, [r3, #3]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d12b      	bne.n	80036b0 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	f7fc fe0f 	bl	8000288 <__aeabi_dsub>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	69f9      	ldr	r1, [r7, #28]
 8003670:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800367a:	f04f 0000 	mov.w	r0, #0
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	f7fc fe01 	bl	8000288 <__aeabi_dsub>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	69f9      	ldr	r1, [r7, #28]
 800368c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003696:	f04f 0000 	mov.w	r0, #0
 800369a:	f04f 0100 	mov.w	r1, #0
 800369e:	f7fc fdf3 	bl	8000288 <__aeabi_dsub>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	69f9      	ldr	r1, [r7, #28]
 80036a8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80036ac:	e000      	b.n	80036b0 <PID_SetTunings2+0x144>
		return;
 80036ae:	bf00      	nop

	}

}
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	408f4000 	.word	0x408f4000

080036bc <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	785b      	ldrb	r3, [r3, #1]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d02e      	beq.n	800372e <PID_SetControllerDirection+0x72>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	78db      	ldrb	r3, [r3, #3]
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d029      	beq.n	800372e <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80036e0:	f04f 0000 	mov.w	r0, #0
 80036e4:	f04f 0100 	mov.w	r1, #0
 80036e8:	f7fc fdce 	bl	8000288 <__aeabi_dsub>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80036fc:	f04f 0000 	mov.w	r0, #0
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	f7fc fdc0 	bl	8000288 <__aeabi_dsub>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003718:	f04f 0000 	mov.w	r0, #0
 800371c:	f04f 0100 	mov.w	r1, #0
 8003720:	f7fc fdb2 	bl	8000288 <__aeabi_dsub>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	70da      	strb	r2, [r3, #3]

}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 800373c:	b5b0      	push	{r4, r5, r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	dd01      	ble.n	8003752 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	dd2e      	ble.n	80037bc <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 800375e:	68b8      	ldr	r0, [r7, #8]
 8003760:	f7fc fee0 	bl	8000524 <__aeabi_i2d>
 8003764:	4604      	mov	r4, r0
 8003766:	460d      	mov	r5, r1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc fec9 	bl	8000504 <__aeabi_ui2d>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4620      	mov	r0, r4
 8003778:	4629      	mov	r1, r5
 800377a:	f7fd f867 	bl	800084c <__aeabi_ddiv>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800378c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003790:	f7fc ff32 	bl	80005f8 <__aeabi_dmul>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	68f9      	ldr	r1, [r7, #12]
 800379a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80037a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037a8:	f7fd f850 	bl	800084c <__aeabi_ddiv>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	68f9      	ldr	r1, [r7, #12]
 80037b2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	609a      	str	r2, [r3, #8]

	}

}
 80037bc:	bf00      	nop
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bdb0      	pop	{r4, r5, r7, pc}

080037c4 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80037d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80037d6:	eeb0 0a47 	vmov.f32	s0, s14
 80037da:	eef0 0a67 	vmov.f32	s1, s15
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80037f6:	ec43 2b17 	vmov	d7, r2, r3
}
 80037fa:	eeb0 0a47 	vmov.f32	s0, s14
 80037fe:	eef0 0a67 	vmov.f32	s1, s15
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800381a:	ec43 2b17 	vmov	d7, r2, r3
}
 800381e:	eeb0 0a47 	vmov.f32	s0, s14
 8003822:	eef0 0a67 	vmov.f32	s1, s15
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <HAL_MspInit+0x44>)
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	4a0e      	ldr	r2, [pc, #56]	; (8003874 <HAL_MspInit+0x44>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6193      	str	r3, [r2, #24]
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <HAL_MspInit+0x44>)
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_MspInit+0x44>)
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	4a08      	ldr	r2, [pc, #32]	; (8003874 <HAL_MspInit+0x44>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	61d3      	str	r3, [r2, #28]
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_MspInit+0x44>)
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000

08003878 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08c      	sub	sp, #48	; 0x30
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	f107 031c 	add.w	r3, r7, #28
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003898:	d12d      	bne.n	80038f6 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800389a:	4b42      	ldr	r3, [pc, #264]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	4a41      	ldr	r2, [pc, #260]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6153      	str	r3, [r2, #20]
 80038a6:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b2:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	4a3b      	ldr	r2, [pc, #236]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 80038b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038bc:	6153      	str	r3, [r2, #20]
 80038be:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_Pin|TC_Pin;
 80038ca:	2306      	movs	r3, #6
 80038cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ce:	2303      	movs	r3, #3
 80038d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d6:	f107 031c 	add.w	r3, r7, #28
 80038da:	4619      	mov	r1, r3
 80038dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038e0:	f003 fd2e 	bl	8007340 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2100      	movs	r1, #0
 80038e8:	2012      	movs	r0, #18
 80038ea:	f002 ff54 	bl	8006796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80038ee:	2012      	movs	r0, #18
 80038f0:	f002 ff6d 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80038f4:	e051      	b.n	800399a <HAL_ADC_MspInit+0x122>
  else if(hadc->Instance==ADC3)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2b      	ldr	r2, [pc, #172]	; (80039a8 <HAL_ADC_MspInit+0x130>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d14c      	bne.n	800399a <HAL_ADC_MspInit+0x122>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003900:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 8003906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800390a:	6153      	str	r3, [r2, #20]
 800390c:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003918:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	4a21      	ldr	r2, [pc, #132]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 800391e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003922:	6153      	str	r3, [r2, #20]
 8003924:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <HAL_ADC_MspInit+0x12c>)
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_INP_Pin;
 8003930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003936:	2303      	movs	r3, #3
 8003938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(V_INP_GPIO_Port, &GPIO_InitStruct);
 800393e:	f107 031c 	add.w	r3, r7, #28
 8003942:	4619      	mov	r1, r3
 8003944:	4819      	ldr	r0, [pc, #100]	; (80039ac <HAL_ADC_MspInit+0x134>)
 8003946:	f003 fcfb 	bl	8007340 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 800394a:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <HAL_ADC_MspInit+0x138>)
 800394c:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <HAL_ADC_MspInit+0x13c>)
 800394e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <HAL_ADC_MspInit+0x138>)
 8003952:	2200      	movs	r2, #0
 8003954:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003956:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <HAL_ADC_MspInit+0x138>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <HAL_ADC_MspInit+0x138>)
 800395e:	2280      	movs	r2, #128	; 0x80
 8003960:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HAL_ADC_MspInit+0x138>)
 8003964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003968:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800396a:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <HAL_ADC_MspInit+0x138>)
 800396c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003970:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003972:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <HAL_ADC_MspInit+0x138>)
 8003974:	2220      	movs	r2, #32
 8003976:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_ADC_MspInit+0x138>)
 800397a:	2200      	movs	r2, #0
 800397c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800397e:	480c      	ldr	r0, [pc, #48]	; (80039b0 <HAL_ADC_MspInit+0x138>)
 8003980:	f003 f946 	bl	8006c10 <HAL_DMA_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_ADC_MspInit+0x116>
      Error_Handler();
 800398a:	f7ff fac7 	bl	8002f1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a07      	ldr	r2, [pc, #28]	; (80039b0 <HAL_ADC_MspInit+0x138>)
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
 8003994:	4a06      	ldr	r2, [pc, #24]	; (80039b0 <HAL_ADC_MspInit+0x138>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6253      	str	r3, [r2, #36]	; 0x24
}
 800399a:	bf00      	nop
 800399c:	3730      	adds	r7, #48	; 0x30
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	50000400 	.word	0x50000400
 80039ac:	48000400 	.word	0x48000400
 80039b0:	20001600 	.word	0x20001600
 80039b4:	40020458 	.word	0x40020458

080039b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_CRC_MspInit+0x38>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d10b      	bne.n	80039e2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_CRC_MspInit+0x3c>)
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <HAL_CRC_MspInit+0x3c>)
 80039d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d4:	6153      	str	r3, [r2, #20]
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <HAL_CRC_MspInit+0x3c>)
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40023000 	.word	0x40023000
 80039f4:	40021000 	.word	0x40021000

080039f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
 8003a0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <HAL_I2C_MspInit+0x7c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d128      	bne.n	8003a6c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1a:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <HAL_I2C_MspInit+0x80>)
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <HAL_I2C_MspInit+0x80>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a24:	6153      	str	r3, [r2, #20]
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <HAL_I2C_MspInit+0x80>)
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a38:	2312      	movs	r3, #18
 8003a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a40:	2303      	movs	r3, #3
 8003a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a44:	2304      	movs	r3, #4
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	480b      	ldr	r0, [pc, #44]	; (8003a7c <HAL_I2C_MspInit+0x84>)
 8003a50:	f003 fc76 	bl	8007340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a54:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_I2C_MspInit+0x80>)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <HAL_I2C_MspInit+0x80>)
 8003a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a5e:	61d3      	str	r3, [r2, #28]
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_I2C_MspInit+0x80>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a6c:	bf00      	nop
 8003a6e:	3728      	adds	r7, #40	; 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40005400 	.word	0x40005400
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	48000400 	.word	0x48000400

08003a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a2a      	ldr	r2, [pc, #168]	; (8003b48 <HAL_SPI_MspInit+0xc8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d14e      	bne.n	8003b40 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aa2:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <HAL_SPI_MspInit+0xcc>)
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <HAL_SPI_MspInit+0xcc>)
 8003aa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003aac:	6193      	str	r3, [r2, #24]
 8003aae:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <HAL_SPI_MspInit+0xcc>)
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_SPI_MspInit+0xcc>)
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	4a23      	ldr	r2, [pc, #140]	; (8003b4c <HAL_SPI_MspInit+0xcc>)
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac4:	6153      	str	r3, [r2, #20]
 8003ac6:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <HAL_SPI_MspInit+0xcc>)
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003ad2:	23a0      	movs	r3, #160	; 0xa0
 8003ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ae2:	2305      	movs	r3, #5
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	4619      	mov	r1, r3
 8003aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af0:	f003 fc26 	bl	8007340 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003af4:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <HAL_SPI_MspInit+0xd0>)
 8003af6:	4a17      	ldr	r2, [pc, #92]	; (8003b54 <HAL_SPI_MspInit+0xd4>)
 8003af8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_SPI_MspInit+0xd0>)
 8003afc:	2210      	movs	r2, #16
 8003afe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b00:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_SPI_MspInit+0xd0>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_SPI_MspInit+0xd0>)
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b0c:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_SPI_MspInit+0xd0>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_SPI_MspInit+0xd0>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <HAL_SPI_MspInit+0xd0>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <HAL_SPI_MspInit+0xd0>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003b24:	480a      	ldr	r0, [pc, #40]	; (8003b50 <HAL_SPI_MspInit+0xd0>)
 8003b26:	f003 f873 	bl	8006c10 <HAL_DMA_Init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8003b30:	f7ff f9f4 	bl	8002f1c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a06      	ldr	r2, [pc, #24]	; (8003b50 <HAL_SPI_MspInit+0xd0>)
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54
 8003b3a:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <HAL_SPI_MspInit+0xd0>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b40:	bf00      	nop
 8003b42:	3728      	adds	r7, #40	; 0x28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40013000 	.word	0x40013000
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	20001720 	.word	0x20001720
 8003b54:	40020030 	.word	0x40020030

08003b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <HAL_TIM_Base_MspInit+0x8c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10c      	bne.n	8003b84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <HAL_TIM_Base_MspInit+0x90>)
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <HAL_TIM_Base_MspInit+0x90>)
 8003b70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b74:	6193      	str	r3, [r2, #24]
 8003b76:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <HAL_TIM_Base_MspInit+0x90>)
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003b82:	e02a      	b.n	8003bda <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a18      	ldr	r2, [pc, #96]	; (8003bec <HAL_TIM_Base_MspInit+0x94>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d114      	bne.n	8003bb8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_TIM_Base_MspInit+0x90>)
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <HAL_TIM_Base_MspInit+0x90>)
 8003b94:	f043 0310 	orr.w	r3, r3, #16
 8003b98:	61d3      	str	r3, [r2, #28]
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <HAL_TIM_Base_MspInit+0x90>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2100      	movs	r1, #0
 8003baa:	2036      	movs	r0, #54	; 0x36
 8003bac:	f002 fdf3 	bl	8006796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bb0:	2036      	movs	r0, #54	; 0x36
 8003bb2:	f002 fe0c 	bl	80067ce <HAL_NVIC_EnableIRQ>
}
 8003bb6:	e010      	b.n	8003bda <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <HAL_TIM_Base_MspInit+0x98>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d10b      	bne.n	8003bda <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_TIM_Base_MspInit+0x90>)
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <HAL_TIM_Base_MspInit+0x90>)
 8003bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bcc:	6193      	str	r3, [r2, #24]
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_TIM_Base_MspInit+0x90>)
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
}
 8003bda:	bf00      	nop
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40001000 	.word	0x40001000
 8003bf0:	40014400 	.word	0x40014400

08003bf4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d14d      	bne.n	8003cb2 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c16:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <HAL_TIM_Encoder_MspInit+0xc8>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4a28      	ldr	r2, [pc, #160]	; (8003cbc <HAL_TIM_Encoder_MspInit+0xc8>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	61d3      	str	r3, [r2, #28]
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <HAL_TIM_Encoder_MspInit+0xc8>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c2e:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <HAL_TIM_Encoder_MspInit+0xc8>)
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	4a22      	ldr	r2, [pc, #136]	; (8003cbc <HAL_TIM_Encoder_MspInit+0xc8>)
 8003c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c38:	6153      	str	r3, [r2, #20]
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <HAL_TIM_Encoder_MspInit+0xc8>)
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c46:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <HAL_TIM_Encoder_MspInit+0xc8>)
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <HAL_TIM_Encoder_MspInit+0xc8>)
 8003c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c50:	6153      	str	r3, [r2, #20]
 8003c52:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_TIM_Encoder_MspInit+0xc8>)
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin;
 8003c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	2302      	movs	r3, #2
 8003c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c70:	2301      	movs	r3, #1
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c7e:	f003 fb5f 	bl	8007340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_A_Pin;
 8003c82:	2308      	movs	r3, #8
 8003c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c86:	2302      	movs	r3, #2
 8003c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c92:	2301      	movs	r3, #1
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8003c96:	f107 0314 	add.w	r3, r7, #20
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4808      	ldr	r0, [pc, #32]	; (8003cc0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003c9e:	f003 fb4f 	bl	8007340 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	201c      	movs	r0, #28
 8003ca8:	f002 fd75 	bl	8006796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003cac:	201c      	movs	r0, #28
 8003cae:	f002 fd8e 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003cb2:	bf00      	nop
 8003cb4:	3728      	adds	r7, #40	; 0x28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	48000400 	.word	0x48000400

08003cc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0d      	ldr	r2, [pc, #52]	; (8003d08 <HAL_TIM_PWM_MspInit+0x44>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d113      	bne.n	8003cfe <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <HAL_TIM_PWM_MspInit+0x48>)
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <HAL_TIM_PWM_MspInit+0x48>)
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	61d3      	str	r3, [r2, #28]
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_TIM_PWM_MspInit+0x48>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	201e      	movs	r0, #30
 8003cf4:	f002 fd4f 	bl	8006796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003cf8:	201e      	movs	r0, #30
 8003cfa:	f002 fd68 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	40021000 	.word	0x40021000

08003d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	; 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a22      	ldr	r2, [pc, #136]	; (8003db8 <HAL_TIM_MspPostInit+0xa8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d11d      	bne.n	8003d6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d32:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <HAL_TIM_MspPostInit+0xac>)
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	4a21      	ldr	r2, [pc, #132]	; (8003dbc <HAL_TIM_MspPostInit+0xac>)
 8003d38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d3c:	6153      	str	r3, [r2, #20]
 8003d3e:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <HAL_TIM_MspPostInit+0xac>)
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8003d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d50:	2302      	movs	r3, #2
 8003d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	4619      	mov	r1, r3
 8003d66:	4816      	ldr	r0, [pc, #88]	; (8003dc0 <HAL_TIM_MspPostInit+0xb0>)
 8003d68:	f003 faea 	bl	8007340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003d6c:	e020      	b.n	8003db0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <HAL_TIM_MspPostInit+0xb4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d11b      	bne.n	8003db0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d78:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <HAL_TIM_MspPostInit+0xac>)
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	4a0f      	ldr	r2, [pc, #60]	; (8003dbc <HAL_TIM_MspPostInit+0xac>)
 8003d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d82:	6153      	str	r3, [r2, #20]
 8003d84:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <HAL_TIM_MspPostInit+0xac>)
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEATER_Pin;
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d94:	2302      	movs	r3, #2
 8003d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003da0:	2302      	movs	r3, #2
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8003da4:	f107 0314 	add.w	r3, r7, #20
 8003da8:	4619      	mov	r1, r3
 8003daa:	4807      	ldr	r0, [pc, #28]	; (8003dc8 <HAL_TIM_MspPostInit+0xb8>)
 8003dac:	f003 fac8 	bl	8007340 <HAL_GPIO_Init>
}
 8003db0:	bf00      	nop
 8003db2:	3728      	adds	r7, #40	; 0x28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40012c00 	.word	0x40012c00
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	48000800 	.word	0x48000800
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	48000400 	.word	0x48000400

08003dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003dd0:	e7fe      	b.n	8003dd0 <NMI_Handler+0x4>

08003dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dd6:	e7fe      	b.n	8003dd6 <HardFault_Handler+0x4>

08003dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ddc:	e7fe      	b.n	8003ddc <MemManage_Handler+0x4>

08003dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dde:	b480      	push	{r7}
 8003de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003de2:	e7fe      	b.n	8003de2 <BusFault_Handler+0x4>

08003de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003de8:	e7fe      	b.n	8003de8 <UsageFault_Handler+0x4>

08003dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e18:	f000 fd78 	bl	800490c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003e24:	4802      	ldr	r0, [pc, #8]	; (8003e30 <DMA1_Channel3_IRQHandler+0x10>)
 8003e26:	f002 ff99 	bl	8006d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20001720 	.word	0x20001720

08003e34 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e38:	4802      	ldr	r0, [pc, #8]	; (8003e44 <ADC1_2_IRQHandler+0x10>)
 8003e3a:	f001 fa0f 	bl	800525c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20001560 	.word	0x20001560

08003e48 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003e4c:	4802      	ldr	r0, [pc, #8]	; (8003e58 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8003e4e:	f003 fe3f 	bl	8007ad0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200026fc 	.word	0x200026fc

08003e5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e60:	4802      	ldr	r0, [pc, #8]	; (8003e6c <TIM2_IRQHandler+0x10>)
 8003e62:	f007 fee9 	bl	800bc38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200017b0 	.word	0x200017b0

08003e70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e74:	4802      	ldr	r0, [pc, #8]	; (8003e80 <TIM4_IRQHandler+0x10>)
 8003e76:	f007 fedf 	bl	800bc38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	200017fc 	.word	0x200017fc

08003e84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e88:	4802      	ldr	r0, [pc, #8]	; (8003e94 <TIM6_DAC_IRQHandler+0x10>)
 8003e8a:	f007 fed5 	bl	800bc38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20001848 	.word	0x20001848

08003e98 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003e9c:	4802      	ldr	r0, [pc, #8]	; (8003ea8 <DMA2_Channel5_IRQHandler+0x10>)
 8003e9e:	f002 ff5d 	bl	8006d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20001600 	.word	0x20001600

08003eac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return 1;
 8003eb0:	2301      	movs	r3, #1
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <_kill>:

int _kill(int pid, int sig)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ec6:	f010 f829 	bl	8013f1c <__errno>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2216      	movs	r2, #22
 8003ece:	601a      	str	r2, [r3, #0]
  return -1;
 8003ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <_exit>:

void _exit (int status)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ffe7 	bl	8003ebc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003eee:	e7fe      	b.n	8003eee <_exit+0x12>

08003ef0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e00a      	b.n	8003f18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f02:	f3af 8000 	nop.w
 8003f06:	4601      	mov	r1, r0
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	60ba      	str	r2, [r7, #8]
 8003f0e:	b2ca      	uxtb	r2, r1
 8003f10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	3301      	adds	r3, #1
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	dbf0      	blt.n	8003f02 <_read+0x12>
  }

  return len;
 8003f20:	687b      	ldr	r3, [r7, #4]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e009      	b.n	8003f50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	60ba      	str	r2, [r7, #8]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	dbf1      	blt.n	8003f3c <_write+0x12>
  }
  return len;
 8003f58:	687b      	ldr	r3, [r7, #4]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <_close>:

int _close(int file)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f8a:	605a      	str	r2, [r3, #4]
  return 0;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <_isatty>:

int _isatty(int file)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fa2:	2301      	movs	r3, #1
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <_sbrk+0x5c>)
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <_sbrk+0x60>)
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <_sbrk+0x64>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <_sbrk+0x64>)
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <_sbrk+0x68>)
 8003fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <_sbrk+0x64>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d207      	bcs.n	800400c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ffc:	f00f ff8e 	bl	8013f1c <__errno>
 8004000:	4603      	mov	r3, r0
 8004002:	220c      	movs	r2, #12
 8004004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	e009      	b.n	8004020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <_sbrk+0x64>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <_sbrk+0x64>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	4a05      	ldr	r2, [pc, #20]	; (8004030 <_sbrk+0x64>)
 800401c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	2000a000 	.word	0x2000a000
 800402c:	00000400 	.word	0x00000400
 8004030:	20001978 	.word	0x20001978
 8004034:	20002d58 	.word	0x20002d58

08004038 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <SystemInit+0x20>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	4a05      	ldr	r2, [pc, #20]	; (8004058 <SystemInit+0x20>)
 8004044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800405c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004094 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004060:	f7ff ffea 	bl	8004038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004064:	480c      	ldr	r0, [pc, #48]	; (8004098 <LoopForever+0x6>)
  ldr r1, =_edata
 8004066:	490d      	ldr	r1, [pc, #52]	; (800409c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004068:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <LoopForever+0xe>)
  movs r3, #0
 800406a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800406c:	e002      	b.n	8004074 <LoopCopyDataInit>

0800406e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800406e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004072:	3304      	adds	r3, #4

08004074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004078:	d3f9      	bcc.n	800406e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800407c:	4c0a      	ldr	r4, [pc, #40]	; (80040a8 <LoopForever+0x16>)
  movs r3, #0
 800407e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004080:	e001      	b.n	8004086 <LoopFillZerobss>

08004082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004084:	3204      	adds	r2, #4

08004086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004088:	d3fb      	bcc.n	8004082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800408a:	f00f ff4d 	bl	8013f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800408e:	f7fd fcc3 	bl	8001a18 <main>

08004092 <LoopForever>:

LoopForever:
    b LoopForever
 8004092:	e7fe      	b.n	8004092 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004094:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800409c:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 80040a0:	08037870 	.word	0x08037870
  ldr r2, =_sbss
 80040a4:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 80040a8:	20002d54 	.word	0x20002d54

080040ac <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040ac:	e7fe      	b.n	80040ac <ADC3_IRQHandler>
	...

080040b0 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <setSPI_Size+0x54>)
 80040bc:	f993 3000 	ldrsb.w	r3, [r3]
 80040c0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d017      	beq.n	80040f8 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80040c8:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <setSPI_Size+0x58>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <setSPI_Size+0x58>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d6:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 80040d8:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <setSPI_Size+0x54>)
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80040de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d104      	bne.n	80040f0 <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <setSPI_Size+0x58>)
 80040e8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80040ec:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 80040ee:	e003      	b.n	80040f8 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <setSPI_Size+0x58>)
 80040f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80040f6:	60da      	str	r2, [r3, #12]
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	2000009c 	.word	0x2000009c
 8004108:	200016bc 	.word	0x200016bc

0800410c <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	460a      	mov	r2, r1
 8004116:	71fb      	strb	r3, [r7, #7]
 8004118:	4613      	mov	r3, r2
 800411a:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 800411c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ffc5 	bl	80040b0 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8004126:	4b3c      	ldr	r3, [pc, #240]	; (8004218 <setDMAMemMode+0x10c>)
 8004128:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800412c:	461a      	mov	r2, r3
 800412e:	79bb      	ldrb	r3, [r7, #6]
 8004130:	429a      	cmp	r2, r3
 8004132:	d106      	bne.n	8004142 <setDMAMemMode+0x36>
 8004134:	4b38      	ldr	r3, [pc, #224]	; (8004218 <setDMAMemMode+0x10c>)
 8004136:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800413a:	461a      	mov	r2, r3
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	429a      	cmp	r2, r3
 8004140:	d066      	beq.n	8004210 <setDMAMemMode+0x104>
    config.dma_sz =size;
 8004142:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004146:	4b34      	ldr	r3, [pc, #208]	; (8004218 <setDMAMemMode+0x10c>)
 8004148:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800414a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800414e:	4b32      	ldr	r3, [pc, #200]	; (8004218 <setDMAMemMode+0x10c>)
 8004150:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8004152:	4b32      	ldr	r3, [pc, #200]	; (800421c <setDMAMemMode+0x110>)
 8004154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b30      	ldr	r3, [pc, #192]	; (800421c <setDMAMemMode+0x110>)
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 8004166:	bf00      	nop
 8004168:	4b2c      	ldr	r3, [pc, #176]	; (800421c <setDMAMemMode+0x110>)
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f7      	bne.n	8004168 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d10e      	bne.n	800419c <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800417e:	4b27      	ldr	r3, [pc, #156]	; (800421c <setDMAMemMode+0x110>)
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	2280      	movs	r2, #128	; 0x80
 8004184:	60da      	str	r2, [r3, #12]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 8004186:	4b25      	ldr	r3, [pc, #148]	; (800421c <setDMAMemMode+0x110>)
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b23      	ldr	r3, [pc, #140]	; (800421c <setDMAMemMode+0x110>)
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e00d      	b.n	80041b8 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 800419c:	4b1f      	ldr	r3, [pc, #124]	; (800421c <setDMAMemMode+0x110>)
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	2200      	movs	r2, #0
 80041a2:	60da      	str	r2, [r3, #12]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 80041a4:	4b1d      	ldr	r3, [pc, #116]	; (800421c <setDMAMemMode+0x110>)
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <setDMAMemMode+0x110>)
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b6:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 80041b8:	79bb      	ldrb	r3, [r7, #6]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d116      	bne.n	80041ec <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041be:	4b17      	ldr	r3, [pc, #92]	; (800421c <setDMAMemMode+0x110>)
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041c6:	611a      	str	r2, [r3, #16]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <setDMAMemMode+0x110>)
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041d0:	615a      	str	r2, [r3, #20]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <setDMAMemMode+0x110>)
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80041de:	4b0f      	ldr	r3, [pc, #60]	; (800421c <setDMAMemMode+0x110>)
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 80041e8:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 80041ea:	e011      	b.n	8004210 <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <setDMAMemMode+0x110>)
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	2200      	movs	r2, #0
 80041f2:	611a      	str	r2, [r3, #16]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <setDMAMemMode+0x110>)
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	2200      	movs	r2, #0
 80041fa:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <setDMAMemMode+0x110>)
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <setDMAMemMode+0x110>)
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800420e:	601a      	str	r2, [r3, #0]
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	2000009c 	.word	0x2000009c
 800421c:	200016bc 	.word	0x200016bc

08004220 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 800422c:	2000      	movs	r0, #0
 800422e:	f7ff ff3f 	bl	80040b0 <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin, GPIO_PIN_RESET);
 8004232:	2200      	movs	r2, #0
 8004234:	2108      	movs	r1, #8
 8004236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800423a:	f003 fa13 	bl	8007664 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_RESET);
 800423e:	2200      	movs	r2, #0
 8004240:	2140      	movs	r1, #64	; 0x40
 8004242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004246:	f003 fa0d 	bl	8007664 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 800424a:	f04f 33ff 	mov.w	r3, #4294967295
 800424e:	2201      	movs	r2, #1
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	480f      	ldr	r0, [pc, #60]	; (8004290 <LCD_WriteCommand+0x70>)
 8004254:	f006 fc9f 	bl	800ab96 <HAL_SPI_Transmit>
  if(argc){
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00e      	beq.n	800427c <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin, GPIO_PIN_SET);
 800425e:	2201      	movs	r2, #1
 8004260:	2108      	movs	r1, #8
 8004262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004266:	f003 f9fd 	bl	8007664 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	1c59      	adds	r1, r3, #1
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	b29a      	uxth	r2, r3
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
 8004276:	4806      	ldr	r0, [pc, #24]	; (8004290 <LCD_WriteCommand+0x70>)
 8004278:	f006 fc8d 	bl	800ab96 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_SET);
 800427c:	2201      	movs	r2, #1
 800427e:	2140      	movs	r1, #64	; 0x40
 8004280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004284:	f003 f9ee 	bl	8007664 <HAL_GPIO_WritePin>
#endif
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	200016bc 	.word	0x200016bc

08004294 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin, GPIO_PIN_SET);
 800429e:	2201      	movs	r2, #1
 80042a0:	2108      	movs	r1, #8
 80042a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042a6:	f003 f9dd 	bl	8007664 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_RESET);
 80042aa:	2200      	movs	r2, #0
 80042ac:	2140      	movs	r1, #64	; 0x40
 80042ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042b2:	f003 f9d7 	bl	8007664 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80042b6:	e049      	b.n	800434c <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042be:	4293      	cmp	r3, r2
 80042c0:	bf28      	it	cs
 80042c2:	4613      	movcs	r3, r2
 80042c4:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d924      	bls.n	8004316 <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 80042cc:	89fb      	ldrh	r3, [r7, #14]
 80042ce:	461a      	mov	r2, r3
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4825      	ldr	r0, [pc, #148]	; (8004368 <LCD_WriteData+0xd4>)
 80042d4:	f006 fdd4 	bl	800ae80 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 80042d8:	bf00      	nop
 80042da:	4b23      	ldr	r3, [pc, #140]	; (8004368 <LCD_WriteData+0xd4>)
 80042dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042de:	4618      	mov	r0, r3
 80042e0:	f002 fddf 	bl	8006ea2 <HAL_DMA_GetState>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d1f7      	bne.n	80042da <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <LCD_WriteData+0xd8>)
 80042ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d127      	bne.n	8004344 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <LCD_WriteData+0xd8>)
 80042f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d104      	bne.n	8004308 <LCD_WriteData+0x74>
          buff += chunk_size;
 80042fe:	89fb      	ldrh	r3, [r7, #14]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4413      	add	r3, r2
 8004304:	607b      	str	r3, [r7, #4]
 8004306:	e01d      	b.n	8004344 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 8004308:	89fb      	ldrh	r3, [r7, #14]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	461a      	mov	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4413      	add	r3, r2
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	e016      	b.n	8004344 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8004316:	89fa      	ldrh	r2, [r7, #14]
 8004318:	f04f 33ff 	mov.w	r3, #4294967295
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4812      	ldr	r0, [pc, #72]	; (8004368 <LCD_WriteData+0xd4>)
 8004320:	f006 fc39 	bl	800ab96 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8004324:	4b11      	ldr	r3, [pc, #68]	; (800436c <LCD_WriteData+0xd8>)
 8004326:	f993 3000 	ldrsb.w	r3, [r3]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d104      	bne.n	8004338 <LCD_WriteData+0xa4>
        buff += chunk_size;
 800432e:	89fb      	ldrh	r3, [r7, #14]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	4413      	add	r3, r2
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	e005      	b.n	8004344 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 8004338:	89fb      	ldrh	r3, [r7, #14]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	461a      	mov	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8004344:	89fb      	ldrh	r3, [r7, #14]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1b2      	bne.n	80042b8 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_SET);
 8004352:	2201      	movs	r2, #1
 8004354:	2140      	movs	r1, #64	; 0x40
 8004356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800435a:	f003 f983 	bl	8007664 <HAL_GPIO_WritePin>
#endif
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200016bc 	.word	0x200016bc
 800436c:	2000009c 	.word	0x2000009c

08004370 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b08b      	sub	sp, #44	; 0x2c
 8004374:	af00      	add	r7, sp, #0
 8004376:	4604      	mov	r4, r0
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	461a      	mov	r2, r3
 800437e:	4623      	mov	r3, r4
 8004380:	80fb      	strh	r3, [r7, #6]
 8004382:	4603      	mov	r3, r0
 8004384:	80bb      	strh	r3, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	807b      	strh	r3, [r7, #2]
 800438a:	4613      	mov	r3, r2
 800438c:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004392:	887b      	ldrh	r3, [r7, #2]
 8004394:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8004396:	88bb      	ldrh	r3, [r7, #4]
 8004398:	847b      	strh	r3, [r7, #34]	; 0x22
 800439a:	883b      	ldrh	r3, [r7, #0]
 800439c:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 800439e:	232a      	movs	r3, #42	; 0x2a
 80043a0:	763b      	strb	r3, [r7, #24]
 80043a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80043a6:	121b      	asrs	r3, r3, #8
 80043a8:	b21b      	sxth	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	767b      	strb	r3, [r7, #25]
 80043ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	76bb      	strb	r3, [r7, #26]
 80043b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80043b8:	121b      	asrs	r3, r3, #8
 80043ba:	b21b      	sxth	r3, r3
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	76fb      	strb	r3, [r7, #27]
 80043c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80043c6:	f107 0318 	add.w	r3, r7, #24
 80043ca:	2104      	movs	r1, #4
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff27 	bl	8004220 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 80043d2:	232b      	movs	r3, #43	; 0x2b
 80043d4:	743b      	strb	r3, [r7, #16]
 80043d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80043da:	121b      	asrs	r3, r3, #8
 80043dc:	b21b      	sxth	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	747b      	strb	r3, [r7, #17]
 80043e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	74bb      	strb	r3, [r7, #18]
 80043e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80043ec:	121b      	asrs	r3, r3, #8
 80043ee:	b21b      	sxth	r3, r3
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	74fb      	strb	r3, [r7, #19]
 80043f4:	8c3b      	ldrh	r3, [r7, #32]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80043fa:	f107 0310 	add.w	r3, r7, #16
 80043fe:	2104      	movs	r1, #4
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ff0d 	bl	8004220 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8004406:	232c      	movs	r3, #44	; 0x2c
 8004408:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800440a:	f107 030c 	add.w	r3, r7, #12
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff05 	bl	8004220 <LCD_WriteCommand>
  }
}
 8004416:	bf00      	nop
 8004418:	372c      	adds	r7, #44	; 0x2c
 800441a:	46bd      	mov	sp, r7
 800441c:	bd90      	pop	{r4, r7, pc}
	...

08004420 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	80fb      	strh	r3, [r7, #6]
 800442a:	460b      	mov	r3, r1
 800442c:	80bb      	strh	r3, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8004432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004436:	2b00      	cmp	r3, #0
 8004438:	db39      	blt.n	80044ae <LCD_DrawPixel+0x8e>
 800443a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800443e:	2bef      	cmp	r3, #239	; 0xef
 8004440:	dc35      	bgt.n	80044ae <LCD_DrawPixel+0x8e>
 8004442:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	db31      	blt.n	80044ae <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 800444a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800444e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004452:	da2c      	bge.n	80044ae <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8004454:	887b      	ldrh	r3, [r7, #2]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	b29b      	uxth	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	733b      	strb	r3, [r7, #12]
 800445e:	887b      	ldrh	r3, [r7, #2]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8004464:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004468:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800446c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004470:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004474:	f7ff ff7c 	bl	8004370 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin, GPIO_PIN_SET);
 8004478:	2201      	movs	r2, #1
 800447a:	2108      	movs	r1, #8
 800447c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004480:	f003 f8f0 	bl	8007664 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_RESET);
 8004484:	2200      	movs	r2, #0
 8004486:	2140      	movs	r1, #64	; 0x40
 8004488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800448c:	f003 f8ea 	bl	8007664 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8004490:	f107 010c 	add.w	r1, r7, #12
 8004494:	f04f 33ff 	mov.w	r3, #4294967295
 8004498:	2202      	movs	r2, #2
 800449a:	4807      	ldr	r0, [pc, #28]	; (80044b8 <LCD_DrawPixel+0x98>)
 800449c:	f006 fb7b 	bl	800ab96 <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_SET);
 80044a0:	2201      	movs	r2, #1
 80044a2:	2140      	movs	r1, #64	; 0x40
 80044a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044a8:	f003 f8dc 	bl	8007664 <HAL_GPIO_WritePin>
 80044ac:	e000      	b.n	80044b0 <LCD_DrawPixel+0x90>
    return;
 80044ae:	bf00      	nop
#endif
}
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	200016bc 	.word	0x200016bc

080044bc <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 80044bc:	b580      	push	{r7, lr}
 80044be:	b094      	sub	sp, #80	; 0x50
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d905      	bls.n	80044da <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 80044ce:	1cbb      	adds	r3, r7, #2
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fede 	bl	8004294 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 80044d8:	e026      	b.n	8004528 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80044da:	2300      	movs	r3, #0
 80044dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044de:	e009      	b.n	80044f4 <LCD_FillPixels+0x38>
      fill[t]=color;
 80044e0:	887a      	ldrh	r2, [r7, #2]
 80044e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	3350      	adds	r3, #80	; 0x50
 80044e8:	443b      	add	r3, r7
 80044ea:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80044ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f0:	3301      	adds	r3, #1
 80044f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	bf28      	it	cs
 80044fa:	2320      	movcs	r3, #32
 80044fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044fe:	429a      	cmp	r2, r3
 8004500:	d3ee      	bcc.n	80044e0 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 8004502:	e00e      	b.n	8004522 <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b20      	cmp	r3, #32
 8004508:	bf28      	it	cs
 800450a:	2320      	movcs	r3, #32
 800450c:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 800450e:	f107 0308 	add.w	r3, r7, #8
 8004512:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff febd 	bl	8004294 <LCD_WriteData>
      pixels-=sz;
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1ed      	bne.n	8004504 <LCD_FillPixels+0x48>
}
 8004528:	bf00      	nop
 800452a:	3750      	adds	r7, #80	; 0x50
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8004530:	b590      	push	{r4, r7, lr}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	4611      	mov	r1, r2
 800453c:	461a      	mov	r2, r3
 800453e:	4623      	mov	r3, r4
 8004540:	80fb      	strh	r3, [r7, #6]
 8004542:	4603      	mov	r3, r0
 8004544:	80bb      	strh	r3, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	807b      	strh	r3, [r7, #2]
 800454a:	4613      	mov	r3, r2
 800454c:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 800454e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d105      	bne.n	8004564 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8004558:	2100      	movs	r1, #0
 800455a:	2001      	movs	r0, #1
 800455c:	f7ff fdd6 	bl	800410c <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	e014      	b.n	800458e <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8004564:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004568:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800456c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004570:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004574:	f7ff fefc 	bl	8004370 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8004578:	2101      	movs	r1, #1
 800457a:	2000      	movs	r0, #0
 800457c:	f7ff fdc6 	bl	800410c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin, GPIO_PIN_SET);
 8004580:	2201      	movs	r2, #1
 8004582:	2108      	movs	r1, #8
 8004584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004588:	f003 f86c 	bl	8007664 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <LCD_FillArea+0x68>)
}
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	bd90      	pop	{r4, r7, pc}
 8004596:	bf00      	nop
 8004598:	080044bd 	.word	0x080044bd

0800459c <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	461a      	mov	r2, r3
 80045aa:	4623      	mov	r3, r4
 80045ac:	80fb      	strh	r3, [r7, #6]
 80045ae:	4603      	mov	r3, r0
 80045b0:	80bb      	strh	r3, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	807b      	strh	r3, [r7, #2]
 80045b6:	4613      	mov	r3, r2
 80045b8:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 80045ba:	887a      	ldrh	r2, [r7, #2]
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	3301      	adds	r3, #1
 80045c2:	4619      	mov	r1, r3
 80045c4:	883a      	ldrh	r2, [r7, #0]
 80045c6:	88bb      	ldrh	r3, [r7, #4]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	3301      	adds	r3, #1
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80045d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80045d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80045da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80045de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80045e2:	f7ff fec5 	bl	8004370 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80045e6:	2101      	movs	r1, #1
 80045e8:	2000      	movs	r0, #0
 80045ea:	f7ff fd8f 	bl	800410c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 80045ee:	8c3b      	ldrh	r3, [r7, #32]
 80045f0:	4619      	mov	r1, r3
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff ff62 	bl	80044bc <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 80045f8:	2100      	movs	r1, #0
 80045fa:	2001      	movs	r0, #1
 80045fc:	f7ff fd86 	bl	800410c <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bd90      	pop	{r4, r7, pc}

0800460a <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 800460a:	b590      	push	{r4, r7, lr}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	4603      	mov	r3, r0
 8004612:	603a      	str	r2, [r7, #0]
 8004614:	80fb      	strh	r3, [r7, #6]
 8004616:	460b      	mov	r3, r1
 8004618:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	889b      	ldrh	r3, [r3, #4]
 800461e:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	88db      	ldrh	r3, [r3, #6]
 8004624:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2bef      	cmp	r3, #239	; 0xef
 800462a:	d839      	bhi.n	80046a0 <LCD_DrawImage+0x96>
 800462c:	88bb      	ldrh	r3, [r7, #4]
 800462e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004632:	d235      	bcs.n	80046a0 <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8004634:	88fa      	ldrh	r2, [r7, #6]
 8004636:	89fb      	ldrh	r3, [r7, #14]
 8004638:	4413      	add	r3, r2
 800463a:	2bf0      	cmp	r3, #240	; 0xf0
 800463c:	dc32      	bgt.n	80046a4 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 800463e:	88ba      	ldrh	r2, [r7, #4]
 8004640:	89bb      	ldrh	r3, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004648:	dc2e      	bgt.n	80046a8 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	7a1b      	ldrb	r3, [r3, #8]
 800464e:	2b10      	cmp	r3, #16
 8004650:	d12c      	bne.n	80046ac <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8004652:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004656:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	89fb      	ldrh	r3, [r7, #14]
 800465e:	4413      	add	r3, r2
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	b21c      	sxth	r4, r3
 8004668:	88ba      	ldrh	r2, [r7, #4]
 800466a:	89bb      	ldrh	r3, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29b      	uxth	r3, r3
 8004674:	b21b      	sxth	r3, r3
 8004676:	4622      	mov	r2, r4
 8004678:	f7ff fe7a 	bl	8004370 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 800467c:	2101      	movs	r1, #1
 800467e:	2001      	movs	r0, #1
 8004680:	f7ff fd44 	bl	800410c <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	89fb      	ldrh	r3, [r7, #14]
 800468a:	89ba      	ldrh	r2, [r7, #12]
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	4619      	mov	r1, r3
 8004692:	f7ff fdff 	bl	8004294 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8004696:	2100      	movs	r1, #0
 8004698:	2001      	movs	r0, #1
 800469a:	f7ff fd37 	bl	800410c <setDMAMemMode>
 800469e:	e006      	b.n	80046ae <LCD_DrawImage+0xa4>
    return;
 80046a0:	bf00      	nop
 80046a2:	e004      	b.n	80046ae <LCD_DrawImage+0xa4>
    return;
 80046a4:	bf00      	nop
 80046a6:	e002      	b.n	80046ae <LCD_DrawImage+0xa4>
    return;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <LCD_DrawImage+0xa4>
    return;
 80046ac:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd90      	pop	{r4, r7, pc}

080046b4 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80046b4:	b590      	push	{r4, r7, lr}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	4604      	mov	r4, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	4611      	mov	r1, r2
 80046c0:	461a      	mov	r2, r3
 80046c2:	4623      	mov	r3, r4
 80046c4:	80fb      	strh	r3, [r7, #6]
 80046c6:	4603      	mov	r3, r0
 80046c8:	80bb      	strh	r3, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	807b      	strh	r3, [r7, #2]
 80046ce:	4613      	mov	r3, r2
 80046d0:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	887b      	ldrh	r3, [r7, #2]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d10a      	bne.n	80046f0 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 80046da:	88ba      	ldrh	r2, [r7, #4]
 80046dc:	883b      	ldrh	r3, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d918      	bls.n	8004714 <LCD_DrawLine+0x60>
 80046e2:	88bb      	ldrh	r3, [r7, #4]
 80046e4:	81bb      	strh	r3, [r7, #12]
 80046e6:	883b      	ldrh	r3, [r7, #0]
 80046e8:	80bb      	strh	r3, [r7, #4]
 80046ea:	89bb      	ldrh	r3, [r7, #12]
 80046ec:	803b      	strh	r3, [r7, #0]
 80046ee:	e011      	b.n	8004714 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 80046f0:	88ba      	ldrh	r2, [r7, #4]
 80046f2:	883b      	ldrh	r3, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d10a      	bne.n	800470e <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	887b      	ldrh	r3, [r7, #2]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d909      	bls.n	8004714 <LCD_DrawLine+0x60>
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	81fb      	strh	r3, [r7, #14]
 8004704:	887b      	ldrh	r3, [r7, #2]
 8004706:	80fb      	strh	r3, [r7, #6]
 8004708:	89fb      	ldrh	r3, [r7, #14]
 800470a:	807b      	strh	r3, [r7, #2]
 800470c:	e002      	b.n	8004714 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
 8004712:	e009      	b.n	8004728 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8004714:	883c      	ldrh	r4, [r7, #0]
 8004716:	887a      	ldrh	r2, [r7, #2]
 8004718:	88b9      	ldrh	r1, [r7, #4]
 800471a:	88f8      	ldrh	r0, [r7, #6]
 800471c:	8c3b      	ldrh	r3, [r7, #32]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	4623      	mov	r3, r4
 8004722:	f7ff ff3b 	bl	800459c <LCD_Fill>
  return UG_RESULT_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	bd90      	pop	{r4, r7, pc}

08004730 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60ba      	str	r2, [r7, #8]
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	4603      	mov	r3, r0
 800473c:	81fb      	strh	r3, [r7, #14]
 800473e:	460b      	mov	r3, r1
 8004740:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f00a ffd0 	bl	800f6e8 <UG_FontSelect>
  UG_SetForecolor(color);
 8004748:	8b3b      	ldrh	r3, [r7, #24]
 800474a:	4618      	mov	r0, r3
 800474c:	f00b fb18 	bl	800fd80 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8004750:	8bbb      	ldrh	r3, [r7, #28]
 8004752:	4618      	mov	r0, r3
 8004754:	f00b fb26 	bl	800fda4 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8004758:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800475c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f00b fa74 	bl	800fc50 <UG_PutString>
}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <LCD_setPower+0x14>
 8004780:	2329      	movs	r3, #41	; 0x29
 8004782:	e000      	b.n	8004786 <LCD_setPower+0x16>
 8004784:	2328      	movs	r3, #40	; 0x28
 8004786:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004788:	f107 030c 	add.w	r3, r7, #12
 800478c:	2100      	movs	r1, #0
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fd46 	bl	8004220 <LCD_WriteCommand>
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <LCD_Update>:

static void LCD_Update(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80047a0:	2100      	movs	r1, #0
 80047a2:	2001      	movs	r0, #1
 80047a4:	f7ff fcb2 	bl	800410c <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}

080047ac <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_SET);
 80047b2:	2201      	movs	r2, #1
 80047b4:	2140      	movs	r1, #64	; 0x40
 80047b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047ba:	f002 ff53 	bl	8007664 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin, GPIO_PIN_RESET);
 80047be:	2200      	movs	r2, #0
 80047c0:	2110      	movs	r1, #16
 80047c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047c6:	f002 ff4d 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80047ca:	2001      	movs	r0, #1
 80047cc:	f000 f8be 	bl	800494c <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin, GPIO_PIN_SET);
 80047d0:	2201      	movs	r2, #1
 80047d2:	2110      	movs	r1, #16
 80047d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047d8:	f002 ff44 	bl	8007664 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80047dc:	20c8      	movs	r0, #200	; 0xc8
 80047de:	f000 f8b5 	bl	800494c <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 80047e2:	4920      	ldr	r1, [pc, #128]	; (8004864 <LCD_init+0xb8>)
 80047e4:	4820      	ldr	r0, [pc, #128]	; (8004868 <LCD_init+0xbc>)
 80047e6:	f00a fee5 	bl	800f5b4 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 80047ea:	4920      	ldr	r1, [pc, #128]	; (800486c <LCD_init+0xc0>)
 80047ec:	2000      	movs	r0, #0
 80047ee:	f00c fb6f 	bl	8010ed0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 80047f2:	491f      	ldr	r1, [pc, #124]	; (8004870 <LCD_init+0xc4>)
 80047f4:	2001      	movs	r0, #1
 80047f6:	f00c fb6b 	bl	8010ed0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 80047fa:	491e      	ldr	r1, [pc, #120]	; (8004874 <LCD_init+0xc8>)
 80047fc:	2002      	movs	r0, #2
 80047fe:	f00c fb67 	bl	8010ed0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8004802:	491d      	ldr	r1, [pc, #116]	; (8004878 <LCD_init+0xcc>)
 8004804:	2003      	movs	r0, #3
 8004806:	f00c fb63 	bl	8010ed0 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 800480a:	2000      	movs	r0, #0
 800480c:	f00b fadc 	bl	800fdc8 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8004810:	2000      	movs	r0, #0
 8004812:	f00b faed 	bl	800fdf0 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8004816:	2300      	movs	r3, #0
 8004818:	80fb      	strh	r3, [r7, #6]
 800481a:	e013      	b.n	8004844 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	3301      	adds	r3, #1
 8004820:	4a16      	ldr	r2, [pc, #88]	; (800487c <LCD_init+0xd0>)
 8004822:	441a      	add	r2, r3
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	4915      	ldr	r1, [pc, #84]	; (800487c <LCD_init+0xd0>)
 8004828:	5ccb      	ldrb	r3, [r1, r3]
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f7ff fcf7 	bl	8004220 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	4a11      	ldr	r2, [pc, #68]	; (800487c <LCD_init+0xd0>)
 8004836:	5cd3      	ldrb	r3, [r2, r3]
 8004838:	b29a      	uxth	r2, r3
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	4413      	add	r3, r2
 800483e:	b29b      	uxth	r3, r3
 8004840:	3302      	adds	r3, #2
 8004842:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	2b4b      	cmp	r3, #75	; 0x4b
 8004848:	d9e8      	bls.n	800481c <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 800484a:	2000      	movs	r0, #0
 800484c:	f00a ff5c 	bl	800f708 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8004850:	2001      	movs	r0, #1
 8004852:	f7ff ff8d 	bl	8004770 <LCD_setPower>
  UG_Update();
 8004856:	f00c fb5d 	bl	8010f14 <UG_Update>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	200000a0 	.word	0x200000a0
 8004868:	2000197c 	.word	0x2000197c
 800486c:	080046b5 	.word	0x080046b5
 8004870:	0800459d 	.word	0x0800459d
 8004874:	08004531 	.word	0x08004531
 8004878:	0800460b 	.word	0x0800460b
 800487c:	08017308 	.word	0x08017308

08004880 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004884:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <HAL_Init+0x28>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <HAL_Init+0x28>)
 800488a:	f043 0310 	orr.w	r3, r3, #16
 800488e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004890:	2003      	movs	r0, #3
 8004892:	f001 ff75 	bl	8006780 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004896:	200f      	movs	r0, #15
 8004898:	f000 f808 	bl	80048ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800489c:	f7fe ffc8 	bl	8003830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40022000 	.word	0x40022000

080048ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048b4:	4b12      	ldr	r3, [pc, #72]	; (8004900 <HAL_InitTick+0x54>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4b12      	ldr	r3, [pc, #72]	; (8004904 <HAL_InitTick+0x58>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	4619      	mov	r1, r3
 80048be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 ff8d 	bl	80067ea <HAL_SYSTICK_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e00e      	b.n	80048f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b0f      	cmp	r3, #15
 80048de:	d80a      	bhi.n	80048f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048e0:	2200      	movs	r2, #0
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295
 80048e8:	f001 ff55 	bl	8006796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048ec:	4a06      	ldr	r2, [pc, #24]	; (8004908 <HAL_InitTick+0x5c>)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e000      	b.n	80048f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20000098 	.word	0x20000098
 8004904:	200000b0 	.word	0x200000b0
 8004908:	200000ac 	.word	0x200000ac

0800490c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_IncTick+0x20>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_IncTick+0x24>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4413      	add	r3, r2
 800491c:	4a04      	ldr	r2, [pc, #16]	; (8004930 <HAL_IncTick+0x24>)
 800491e:	6013      	str	r3, [r2, #0]
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	200000b0 	.word	0x200000b0
 8004930:	200019f0 	.word	0x200019f0

08004934 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return uwTick;  
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_GetTick+0x14>)
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	200019f0 	.word	0x200019f0

0800494c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004954:	f7ff ffee 	bl	8004934 <HAL_GetTick>
 8004958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d005      	beq.n	8004972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_Delay+0x44>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004972:	bf00      	nop
 8004974:	f7ff ffde 	bl	8004934 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	429a      	cmp	r2, r3
 8004982:	d8f7      	bhi.n	8004974 <HAL_Delay+0x28>
  {
  }
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	200000b0 	.word	0x200000b0

08004994 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b09a      	sub	sp, #104	; 0x68
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e1c9      	b.n	8004d98 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d176      	bne.n	8004b04 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d152      	bne.n	8004ac4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7fe ff1d 	bl	8003878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d13b      	bne.n	8004ac4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f001 fd61 	bl	8006514 <ADC_Disable>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d12f      	bne.n	8004ac4 <HAL_ADC_Init+0xe0>
 8004a64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d12b      	bne.n	8004ac4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a74:	f023 0302 	bic.w	r3, r3, #2
 8004a78:	f043 0202 	orr.w	r2, r3, #2
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a8e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a9e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004aa0:	4b86      	ldr	r3, [pc, #536]	; (8004cbc <HAL_ADC_Init+0x2d8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a86      	ldr	r2, [pc, #536]	; (8004cc0 <HAL_ADC_Init+0x2dc>)
 8004aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aaa:	0c9a      	lsrs	r2, r3, #18
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ab6:	e002      	b.n	8004abe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f9      	bne.n	8004ab8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae0:	d110      	bne.n	8004b04 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f023 0312 	bic.w	r3, r3, #18
 8004aea:	f043 0210 	orr.w	r2, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f043 0201 	orr.w	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 8136 	bne.w	8004d7e <HAL_ADC_Init+0x39a>
 8004b12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f040 8131 	bne.w	8004d7e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f040 8129 	bne.w	8004d7e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004b34:	f043 0202 	orr.w	r2, r3, #2
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b44:	d004      	beq.n	8004b50 <HAL_ADC_Init+0x16c>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a5e      	ldr	r2, [pc, #376]	; (8004cc4 <HAL_ADC_Init+0x2e0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_ADC_Init+0x170>
 8004b50:	4b5d      	ldr	r3, [pc, #372]	; (8004cc8 <HAL_ADC_Init+0x2e4>)
 8004b52:	e000      	b.n	8004b56 <HAL_ADC_Init+0x172>
 8004b54:	4b5d      	ldr	r3, [pc, #372]	; (8004ccc <HAL_ADC_Init+0x2e8>)
 8004b56:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b60:	d102      	bne.n	8004b68 <HAL_ADC_Init+0x184>
 8004b62:	4b58      	ldr	r3, [pc, #352]	; (8004cc4 <HAL_ADC_Init+0x2e0>)
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	e01a      	b.n	8004b9e <HAL_ADC_Init+0x1ba>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a55      	ldr	r2, [pc, #340]	; (8004cc4 <HAL_ADC_Init+0x2e0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d103      	bne.n	8004b7a <HAL_ADC_Init+0x196>
 8004b72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e011      	b.n	8004b9e <HAL_ADC_Init+0x1ba>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a54      	ldr	r2, [pc, #336]	; (8004cd0 <HAL_ADC_Init+0x2ec>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d102      	bne.n	8004b8a <HAL_ADC_Init+0x1a6>
 8004b84:	4b53      	ldr	r3, [pc, #332]	; (8004cd4 <HAL_ADC_Init+0x2f0>)
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	e009      	b.n	8004b9e <HAL_ADC_Init+0x1ba>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a51      	ldr	r2, [pc, #324]	; (8004cd4 <HAL_ADC_Init+0x2f0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d102      	bne.n	8004b9a <HAL_ADC_Init+0x1b6>
 8004b94:	4b4e      	ldr	r3, [pc, #312]	; (8004cd0 <HAL_ADC_Init+0x2ec>)
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e001      	b.n	8004b9e <HAL_ADC_Init+0x1ba>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d108      	bne.n	8004bbe <HAL_ADC_Init+0x1da>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_ADC_Init+0x1da>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_ADC_Init+0x1dc>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d11c      	bne.n	8004bfe <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004bc4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d010      	beq.n	8004bec <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d107      	bne.n	8004be6 <HAL_ADC_Init+0x202>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_ADC_Init+0x202>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <HAL_ADC_Init+0x204>
 8004be6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d108      	bne.n	8004bfe <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bfc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	7e5b      	ldrb	r3, [r3, #25]
 8004c02:	035b      	lsls	r3, r3, #13
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c08:	2a01      	cmp	r2, #1
 8004c0a:	d002      	beq.n	8004c12 <HAL_ADC_Init+0x22e>
 8004c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c10:	e000      	b.n	8004c14 <HAL_ADC_Init+0x230>
 8004c12:	2200      	movs	r2, #0
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c24:	4313      	orrs	r3, r2
 8004c26:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d11b      	bne.n	8004c6a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	7e5b      	ldrb	r3, [r3, #25]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	045a      	lsls	r2, r3, #17
 8004c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c4c:	e00d      	b.n	8004c6a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	f043 0201 	orr.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d03a      	beq.n	8004ce8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <HAL_ADC_Init+0x2ec>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_ADC_Init+0x2a2>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <HAL_ADC_Init+0x2f0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d128      	bne.n	8004cd8 <HAL_ADC_Init+0x2f4>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004c8e:	d012      	beq.n	8004cb6 <HAL_ADC_Init+0x2d2>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c98:	d00a      	beq.n	8004cb0 <HAL_ADC_Init+0x2cc>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004ca2:	d002      	beq.n	8004caa <HAL_ADC_Init+0x2c6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	e018      	b.n	8004cdc <HAL_ADC_Init+0x2f8>
 8004caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cae:	e015      	b.n	8004cdc <HAL_ADC_Init+0x2f8>
 8004cb0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004cb4:	e012      	b.n	8004cdc <HAL_ADC_Init+0x2f8>
 8004cb6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004cba:	e00f      	b.n	8004cdc <HAL_ADC_Init+0x2f8>
 8004cbc:	20000098 	.word	0x20000098
 8004cc0:	431bde83 	.word	0x431bde83
 8004cc4:	50000100 	.word	0x50000100
 8004cc8:	50000300 	.word	0x50000300
 8004ccc:	50000700 	.word	0x50000700
 8004cd0:	50000400 	.word	0x50000400
 8004cd4:	50000500 	.word	0x50000500
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d114      	bne.n	8004d20 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d04:	f023 0302 	bic.w	r3, r3, #2
 8004d08:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	7e1b      	ldrb	r3, [r3, #24]
 8004d0e:	039a      	lsls	r2, r3, #14
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <HAL_ADC_Init+0x3bc>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004d30:	430b      	orrs	r3, r1
 8004d32:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d10c      	bne.n	8004d56 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f023 010f 	bic.w	r1, r3, #15
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	1e5a      	subs	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
 8004d54:	e007      	b.n	8004d66 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 020f 	bic.w	r2, r2, #15
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	f023 0303 	bic.w	r3, r3, #3
 8004d74:	f043 0201 	orr.w	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8004d7c:	e00a      	b.n	8004d94 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f023 0312 	bic.w	r3, r3, #18
 8004d86:	f043 0210 	orr.w	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004d94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3768      	adds	r7, #104	; 0x68
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	fff0c007 	.word	0xfff0c007

08004da4 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 8123 	bne.w	8005006 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_ADC_Start_IT+0x2a>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e11e      	b.n	800500c <HAL_ADC_Start_IT+0x268>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f001 fb38 	bl	800644c <ADC_Enable>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f040 810a 	bne.w	8004ffc <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e04:	d004      	beq.n	8004e10 <HAL_ADC_Start_IT+0x6c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a82      	ldr	r2, [pc, #520]	; (8005014 <HAL_ADC_Start_IT+0x270>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d106      	bne.n	8004e1e <HAL_ADC_Start_IT+0x7a>
 8004e10:	4b81      	ldr	r3, [pc, #516]	; (8005018 <HAL_ADC_Start_IT+0x274>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d010      	beq.n	8004e3e <HAL_ADC_Start_IT+0x9a>
 8004e1c:	e005      	b.n	8004e2a <HAL_ADC_Start_IT+0x86>
 8004e1e:	4b7f      	ldr	r3, [pc, #508]	; (800501c <HAL_ADC_Start_IT+0x278>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_ADC_Start_IT+0x9a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e32:	d004      	beq.n	8004e3e <HAL_ADC_Start_IT+0x9a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a79      	ldr	r2, [pc, #484]	; (8005020 <HAL_ADC_Start_IT+0x27c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d115      	bne.n	8004e6a <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d036      	beq.n	8004ec6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004e68:	e02d      	b.n	8004ec6 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e7e:	d004      	beq.n	8004e8a <HAL_ADC_Start_IT+0xe6>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a63      	ldr	r2, [pc, #396]	; (8005014 <HAL_ADC_Start_IT+0x270>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d10a      	bne.n	8004ea0 <HAL_ADC_Start_IT+0xfc>
 8004e8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf14      	ite	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2300      	moveq	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e008      	b.n	8004eb2 <HAL_ADC_Start_IT+0x10e>
 8004ea0:	4b5f      	ldr	r3, [pc, #380]	; (8005020 <HAL_ADC_Start_IT+0x27c>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf14      	ite	ne
 8004eac:	2301      	movne	r3, #1
 8004eae:	2300      	moveq	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ebe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed2:	d106      	bne.n	8004ee2 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed8:	f023 0206 	bic.w	r2, r3, #6
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	645a      	str	r2, [r3, #68]	; 0x44
 8004ee0:	e002      	b.n	8004ee8 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	221c      	movs	r2, #28
 8004ef6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d110      	bne.n	8004f22 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0204 	bic.w	r2, r2, #4
 8004f0e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0208 	orr.w	r2, r2, #8
 8004f1e:	605a      	str	r2, [r3, #4]
          break;
 8004f20:	e008      	b.n	8004f34 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 020c 	orr.w	r2, r2, #12
 8004f30:	605a      	str	r2, [r3, #4]
          break;
 8004f32:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d107      	bne.n	8004f4c <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0210 	bic.w	r2, r2, #16
 8004f4a:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f54:	d004      	beq.n	8004f60 <HAL_ADC_Start_IT+0x1bc>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a2e      	ldr	r2, [pc, #184]	; (8005014 <HAL_ADC_Start_IT+0x270>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d106      	bne.n	8004f6e <HAL_ADC_Start_IT+0x1ca>
 8004f60:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <HAL_ADC_Start_IT+0x274>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d03e      	beq.n	8004fea <HAL_ADC_Start_IT+0x246>
 8004f6c:	e005      	b.n	8004f7a <HAL_ADC_Start_IT+0x1d6>
 8004f6e:	4b2b      	ldr	r3, [pc, #172]	; (800501c <HAL_ADC_Start_IT+0x278>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d037      	beq.n	8004fea <HAL_ADC_Start_IT+0x246>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f82:	d004      	beq.n	8004f8e <HAL_ADC_Start_IT+0x1ea>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a22      	ldr	r2, [pc, #136]	; (8005014 <HAL_ADC_Start_IT+0x270>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d106      	bne.n	8004f9c <HAL_ADC_Start_IT+0x1f8>
 8004f8e:	4b22      	ldr	r3, [pc, #136]	; (8005018 <HAL_ADC_Start_IT+0x274>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	2b05      	cmp	r3, #5
 8004f98:	d027      	beq.n	8004fea <HAL_ADC_Start_IT+0x246>
 8004f9a:	e005      	b.n	8004fa8 <HAL_ADC_Start_IT+0x204>
 8004f9c:	4b1f      	ldr	r3, [pc, #124]	; (800501c <HAL_ADC_Start_IT+0x278>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	2b05      	cmp	r3, #5
 8004fa6:	d020      	beq.n	8004fea <HAL_ADC_Start_IT+0x246>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fb0:	d004      	beq.n	8004fbc <HAL_ADC_Start_IT+0x218>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a17      	ldr	r2, [pc, #92]	; (8005014 <HAL_ADC_Start_IT+0x270>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d106      	bne.n	8004fca <HAL_ADC_Start_IT+0x226>
 8004fbc:	4b16      	ldr	r3, [pc, #88]	; (8005018 <HAL_ADC_Start_IT+0x274>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	2b09      	cmp	r3, #9
 8004fc6:	d010      	beq.n	8004fea <HAL_ADC_Start_IT+0x246>
 8004fc8:	e005      	b.n	8004fd6 <HAL_ADC_Start_IT+0x232>
 8004fca:	4b14      	ldr	r3, [pc, #80]	; (800501c <HAL_ADC_Start_IT+0x278>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2b09      	cmp	r3, #9
 8004fd4:	d009      	beq.n	8004fea <HAL_ADC_Start_IT+0x246>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fde:	d004      	beq.n	8004fea <HAL_ADC_Start_IT+0x246>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a0e      	ldr	r2, [pc, #56]	; (8005020 <HAL_ADC_Start_IT+0x27c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d10f      	bne.n	800500a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0204 	orr.w	r2, r2, #4
 8004ff8:	609a      	str	r2, [r3, #8]
 8004ffa:	e006      	b.n	800500a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005004:	e001      	b.n	800500a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005006:	2302      	movs	r3, #2
 8005008:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	50000100 	.word	0x50000100
 8005018:	50000300 	.word	0x50000300
 800501c:	50000700 	.word	0x50000700
 8005020:	50000400 	.word	0x50000400

08005024 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 80f7 	bne.w	8005232 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_ADC_Start_DMA+0x2e>
 800504e:	2302      	movs	r3, #2
 8005050:	e0f2      	b.n	8005238 <HAL_ADC_Start_DMA+0x214>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005062:	d004      	beq.n	800506e <HAL_ADC_Start_DMA+0x4a>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a75      	ldr	r2, [pc, #468]	; (8005240 <HAL_ADC_Start_DMA+0x21c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d109      	bne.n	8005082 <HAL_ADC_Start_DMA+0x5e>
 800506e:	4b75      	ldr	r3, [pc, #468]	; (8005244 <HAL_ADC_Start_DMA+0x220>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	2b00      	cmp	r3, #0
 8005078:	bf0c      	ite	eq
 800507a:	2301      	moveq	r3, #1
 800507c:	2300      	movne	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	e008      	b.n	8005094 <HAL_ADC_Start_DMA+0x70>
 8005082:	4b71      	ldr	r3, [pc, #452]	; (8005248 <HAL_ADC_Start_DMA+0x224>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80c5 	beq.w	8005224 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f001 f9d6 	bl	800644c <ADC_Enable>
 80050a0:	4603      	mov	r3, r0
 80050a2:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f040 80b7 	bne.w	800521a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050c8:	d004      	beq.n	80050d4 <HAL_ADC_Start_DMA+0xb0>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a5c      	ldr	r2, [pc, #368]	; (8005240 <HAL_ADC_Start_DMA+0x21c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d106      	bne.n	80050e2 <HAL_ADC_Start_DMA+0xbe>
 80050d4:	4b5b      	ldr	r3, [pc, #364]	; (8005244 <HAL_ADC_Start_DMA+0x220>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d010      	beq.n	8005102 <HAL_ADC_Start_DMA+0xde>
 80050e0:	e005      	b.n	80050ee <HAL_ADC_Start_DMA+0xca>
 80050e2:	4b59      	ldr	r3, [pc, #356]	; (8005248 <HAL_ADC_Start_DMA+0x224>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <HAL_ADC_Start_DMA+0xde>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050f6:	d004      	beq.n	8005102 <HAL_ADC_Start_DMA+0xde>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a53      	ldr	r2, [pc, #332]	; (800524c <HAL_ADC_Start_DMA+0x228>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d115      	bne.n	800512e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d036      	beq.n	800518a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005124:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800512c:	e02d      	b.n	800518a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005142:	d004      	beq.n	800514e <HAL_ADC_Start_DMA+0x12a>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a3d      	ldr	r2, [pc, #244]	; (8005240 <HAL_ADC_Start_DMA+0x21c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d10a      	bne.n	8005164 <HAL_ADC_Start_DMA+0x140>
 800514e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	e008      	b.n	8005176 <HAL_ADC_Start_DMA+0x152>
 8005164:	4b39      	ldr	r3, [pc, #228]	; (800524c <HAL_ADC_Start_DMA+0x228>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005196:	d106      	bne.n	80051a6 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519c:	f023 0206 	bic.w	r2, r3, #6
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	645a      	str	r2, [r3, #68]	; 0x44
 80051a4:	e002      	b.n	80051ac <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	4a25      	ldr	r2, [pc, #148]	; (8005250 <HAL_ADC_Start_DMA+0x22c>)
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	4a24      	ldr	r2, [pc, #144]	; (8005254 <HAL_ADC_Start_DMA+0x230>)
 80051c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	4a23      	ldr	r2, [pc, #140]	; (8005258 <HAL_ADC_Start_DMA+0x234>)
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	221c      	movs	r2, #28
 80051d2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0210 	orr.w	r2, r2, #16
 80051e2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3340      	adds	r3, #64	; 0x40
 80051fe:	4619      	mov	r1, r3
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f001 fd4b 	bl	8006c9e <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0204 	orr.w	r2, r2, #4
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	e00d      	b.n	8005236 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005222:	e008      	b.n	8005236 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005230:	e001      	b.n	8005236 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005232:	2302      	movs	r3, #2
 8005234:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005236:	7dfb      	ldrb	r3, [r7, #23]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	50000100 	.word	0x50000100
 8005244:	50000300 	.word	0x50000300
 8005248:	50000700 	.word	0x50000700
 800524c:	50000400 	.word	0x50000400
 8005250:	08006381 	.word	0x08006381
 8005254:	080063fb 	.word	0x080063fb
 8005258:	08006417 	.word	0x08006417

0800525c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8005268:	2300      	movs	r3, #0
 800526a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <HAL_ADC_IRQHandler+0x38>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10b      	bne.n	80052ac <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 80bc 	beq.w	8005418 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80b6 	beq.w	8005418 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d105      	bne.n	80052c4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052cc:	d004      	beq.n	80052d8 <HAL_ADC_IRQHandler+0x7c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a90      	ldr	r2, [pc, #576]	; (8005514 <HAL_ADC_IRQHandler+0x2b8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d106      	bne.n	80052e6 <HAL_ADC_IRQHandler+0x8a>
 80052d8:	4b8f      	ldr	r3, [pc, #572]	; (8005518 <HAL_ADC_IRQHandler+0x2bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d03e      	beq.n	8005362 <HAL_ADC_IRQHandler+0x106>
 80052e4:	e005      	b.n	80052f2 <HAL_ADC_IRQHandler+0x96>
 80052e6:	4b8d      	ldr	r3, [pc, #564]	; (800551c <HAL_ADC_IRQHandler+0x2c0>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d037      	beq.n	8005362 <HAL_ADC_IRQHandler+0x106>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052fa:	d004      	beq.n	8005306 <HAL_ADC_IRQHandler+0xaa>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a84      	ldr	r2, [pc, #528]	; (8005514 <HAL_ADC_IRQHandler+0x2b8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d106      	bne.n	8005314 <HAL_ADC_IRQHandler+0xb8>
 8005306:	4b84      	ldr	r3, [pc, #528]	; (8005518 <HAL_ADC_IRQHandler+0x2bc>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	2b05      	cmp	r3, #5
 8005310:	d027      	beq.n	8005362 <HAL_ADC_IRQHandler+0x106>
 8005312:	e005      	b.n	8005320 <HAL_ADC_IRQHandler+0xc4>
 8005314:	4b81      	ldr	r3, [pc, #516]	; (800551c <HAL_ADC_IRQHandler+0x2c0>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	2b05      	cmp	r3, #5
 800531e:	d020      	beq.n	8005362 <HAL_ADC_IRQHandler+0x106>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005328:	d004      	beq.n	8005334 <HAL_ADC_IRQHandler+0xd8>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a79      	ldr	r2, [pc, #484]	; (8005514 <HAL_ADC_IRQHandler+0x2b8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d106      	bne.n	8005342 <HAL_ADC_IRQHandler+0xe6>
 8005334:	4b78      	ldr	r3, [pc, #480]	; (8005518 <HAL_ADC_IRQHandler+0x2bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	2b09      	cmp	r3, #9
 800533e:	d010      	beq.n	8005362 <HAL_ADC_IRQHandler+0x106>
 8005340:	e005      	b.n	800534e <HAL_ADC_IRQHandler+0xf2>
 8005342:	4b76      	ldr	r3, [pc, #472]	; (800551c <HAL_ADC_IRQHandler+0x2c0>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	2b09      	cmp	r3, #9
 800534c:	d009      	beq.n	8005362 <HAL_ADC_IRQHandler+0x106>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005356:	d004      	beq.n	8005362 <HAL_ADC_IRQHandler+0x106>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a70      	ldr	r2, [pc, #448]	; (8005520 <HAL_ADC_IRQHandler+0x2c4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d104      	bne.n	800536c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	e00f      	b.n	800538c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005374:	d004      	beq.n	8005380 <HAL_ADC_IRQHandler+0x124>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a66      	ldr	r2, [pc, #408]	; (8005514 <HAL_ADC_IRQHandler+0x2b8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d102      	bne.n	8005386 <HAL_ADC_IRQHandler+0x12a>
 8005380:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005384:	e000      	b.n	8005388 <HAL_ADC_IRQHandler+0x12c>
 8005386:	4b66      	ldr	r3, [pc, #408]	; (8005520 <HAL_ADC_IRQHandler+0x2c4>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005396:	2b00      	cmp	r3, #0
 8005398:	d137      	bne.n	800540a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d132      	bne.n	800540a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d02d      	beq.n	800540a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11a      	bne.n	80053f2 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 020c 	bic.w	r2, r2, #12
 80053ca:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d112      	bne.n	800540a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	f043 0201 	orr.w	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40
 80053f0:	e00b      	b.n	800540a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f043 0210 	orr.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005402:	f043 0201 	orr.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff fac2 	bl	8004994 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	220c      	movs	r2, #12
 8005416:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <HAL_ADC_IRQHandler+0x1d0>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10b      	bne.n	8005444 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8138 	beq.w	80056a8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 8132 	beq.w	80056a8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005458:	d004      	beq.n	8005464 <HAL_ADC_IRQHandler+0x208>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2d      	ldr	r2, [pc, #180]	; (8005514 <HAL_ADC_IRQHandler+0x2b8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d106      	bne.n	8005472 <HAL_ADC_IRQHandler+0x216>
 8005464:	4b2c      	ldr	r3, [pc, #176]	; (8005518 <HAL_ADC_IRQHandler+0x2bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 031f 	and.w	r3, r3, #31
 800546c:	2b00      	cmp	r3, #0
 800546e:	d03e      	beq.n	80054ee <HAL_ADC_IRQHandler+0x292>
 8005470:	e005      	b.n	800547e <HAL_ADC_IRQHandler+0x222>
 8005472:	4b2a      	ldr	r3, [pc, #168]	; (800551c <HAL_ADC_IRQHandler+0x2c0>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	2b00      	cmp	r3, #0
 800547c:	d037      	beq.n	80054ee <HAL_ADC_IRQHandler+0x292>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005486:	d004      	beq.n	8005492 <HAL_ADC_IRQHandler+0x236>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a21      	ldr	r2, [pc, #132]	; (8005514 <HAL_ADC_IRQHandler+0x2b8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d106      	bne.n	80054a0 <HAL_ADC_IRQHandler+0x244>
 8005492:	4b21      	ldr	r3, [pc, #132]	; (8005518 <HAL_ADC_IRQHandler+0x2bc>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2b05      	cmp	r3, #5
 800549c:	d027      	beq.n	80054ee <HAL_ADC_IRQHandler+0x292>
 800549e:	e005      	b.n	80054ac <HAL_ADC_IRQHandler+0x250>
 80054a0:	4b1e      	ldr	r3, [pc, #120]	; (800551c <HAL_ADC_IRQHandler+0x2c0>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	d020      	beq.n	80054ee <HAL_ADC_IRQHandler+0x292>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054b4:	d004      	beq.n	80054c0 <HAL_ADC_IRQHandler+0x264>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <HAL_ADC_IRQHandler+0x2b8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d106      	bne.n	80054ce <HAL_ADC_IRQHandler+0x272>
 80054c0:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_ADC_IRQHandler+0x2bc>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2b09      	cmp	r3, #9
 80054ca:	d010      	beq.n	80054ee <HAL_ADC_IRQHandler+0x292>
 80054cc:	e005      	b.n	80054da <HAL_ADC_IRQHandler+0x27e>
 80054ce:	4b13      	ldr	r3, [pc, #76]	; (800551c <HAL_ADC_IRQHandler+0x2c0>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2b09      	cmp	r3, #9
 80054d8:	d009      	beq.n	80054ee <HAL_ADC_IRQHandler+0x292>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054e2:	d004      	beq.n	80054ee <HAL_ADC_IRQHandler+0x292>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a0d      	ldr	r2, [pc, #52]	; (8005520 <HAL_ADC_IRQHandler+0x2c4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d104      	bne.n	80054f8 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	e018      	b.n	800552a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005500:	d004      	beq.n	800550c <HAL_ADC_IRQHandler+0x2b0>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a03      	ldr	r2, [pc, #12]	; (8005514 <HAL_ADC_IRQHandler+0x2b8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d10b      	bne.n	8005524 <HAL_ADC_IRQHandler+0x2c8>
 800550c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005510:	e009      	b.n	8005526 <HAL_ADC_IRQHandler+0x2ca>
 8005512:	bf00      	nop
 8005514:	50000100 	.word	0x50000100
 8005518:	50000300 	.word	0x50000300
 800551c:	50000700 	.word	0x50000700
 8005520:	50000400 	.word	0x50000400
 8005524:	4b92      	ldr	r3, [pc, #584]	; (8005770 <HAL_ADC_IRQHandler+0x514>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005530:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 80b0 	bne.w	800569a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00d      	beq.n	8005560 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800554e:	2b00      	cmp	r3, #0
 8005550:	f040 80a3 	bne.w	800569a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800555a:	2b00      	cmp	r3, #0
 800555c:	f040 809d 	bne.w	800569a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8097 	beq.w	800569a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005574:	d004      	beq.n	8005580 <HAL_ADC_IRQHandler+0x324>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a7e      	ldr	r2, [pc, #504]	; (8005774 <HAL_ADC_IRQHandler+0x518>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d106      	bne.n	800558e <HAL_ADC_IRQHandler+0x332>
 8005580:	4b7d      	ldr	r3, [pc, #500]	; (8005778 <HAL_ADC_IRQHandler+0x51c>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2b00      	cmp	r3, #0
 800558a:	d03e      	beq.n	800560a <HAL_ADC_IRQHandler+0x3ae>
 800558c:	e005      	b.n	800559a <HAL_ADC_IRQHandler+0x33e>
 800558e:	4b7b      	ldr	r3, [pc, #492]	; (800577c <HAL_ADC_IRQHandler+0x520>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	2b00      	cmp	r3, #0
 8005598:	d037      	beq.n	800560a <HAL_ADC_IRQHandler+0x3ae>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055a2:	d004      	beq.n	80055ae <HAL_ADC_IRQHandler+0x352>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a72      	ldr	r2, [pc, #456]	; (8005774 <HAL_ADC_IRQHandler+0x518>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d106      	bne.n	80055bc <HAL_ADC_IRQHandler+0x360>
 80055ae:	4b72      	ldr	r3, [pc, #456]	; (8005778 <HAL_ADC_IRQHandler+0x51c>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	2b06      	cmp	r3, #6
 80055b8:	d027      	beq.n	800560a <HAL_ADC_IRQHandler+0x3ae>
 80055ba:	e005      	b.n	80055c8 <HAL_ADC_IRQHandler+0x36c>
 80055bc:	4b6f      	ldr	r3, [pc, #444]	; (800577c <HAL_ADC_IRQHandler+0x520>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	2b06      	cmp	r3, #6
 80055c6:	d020      	beq.n	800560a <HAL_ADC_IRQHandler+0x3ae>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055d0:	d004      	beq.n	80055dc <HAL_ADC_IRQHandler+0x380>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a67      	ldr	r2, [pc, #412]	; (8005774 <HAL_ADC_IRQHandler+0x518>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d106      	bne.n	80055ea <HAL_ADC_IRQHandler+0x38e>
 80055dc:	4b66      	ldr	r3, [pc, #408]	; (8005778 <HAL_ADC_IRQHandler+0x51c>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	2b07      	cmp	r3, #7
 80055e6:	d010      	beq.n	800560a <HAL_ADC_IRQHandler+0x3ae>
 80055e8:	e005      	b.n	80055f6 <HAL_ADC_IRQHandler+0x39a>
 80055ea:	4b64      	ldr	r3, [pc, #400]	; (800577c <HAL_ADC_IRQHandler+0x520>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	2b07      	cmp	r3, #7
 80055f4:	d009      	beq.n	800560a <HAL_ADC_IRQHandler+0x3ae>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055fe:	d004      	beq.n	800560a <HAL_ADC_IRQHandler+0x3ae>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a5a      	ldr	r2, [pc, #360]	; (8005770 <HAL_ADC_IRQHandler+0x514>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d104      	bne.n	8005614 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e00f      	b.n	8005634 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800561c:	d004      	beq.n	8005628 <HAL_ADC_IRQHandler+0x3cc>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a54      	ldr	r2, [pc, #336]	; (8005774 <HAL_ADC_IRQHandler+0x518>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d102      	bne.n	800562e <HAL_ADC_IRQHandler+0x3d2>
 8005628:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800562c:	e000      	b.n	8005630 <HAL_ADC_IRQHandler+0x3d4>
 800562e:	4b50      	ldr	r3, [pc, #320]	; (8005770 <HAL_ADC_IRQHandler+0x514>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d12d      	bne.n	800569a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d11a      	bne.n	8005682 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800565a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d112      	bne.n	800569a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	f043 0201 	orr.w	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
 8005680:	e00b      	b.n	800569a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f043 0210 	orr.w	r2, r3, #16
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	f043 0201 	orr.w	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fc f998 	bl	80019d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2260      	movs	r2, #96	; 0x60
 80056a6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d011      	beq.n	80056d6 <HAL_ADC_IRQHandler+0x47a>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00c      	beq.n	80056d6 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff f977 	bl	80049bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2280      	movs	r2, #128	; 0x80
 80056d4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d012      	beq.n	8005706 <HAL_ADC_IRQHandler+0x4aa>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fa51 	bl	8005b9e <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005704:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800570c:	2b00      	cmp	r3, #0
 800570e:	d012      	beq.n	8005736 <HAL_ADC_IRQHandler+0x4da>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00d      	beq.n	8005736 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fa43 	bl	8005bb2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005734:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	d04f      	beq.n	80057e0 <HAL_ADC_IRQHandler+0x584>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b00      	cmp	r3, #0
 8005748:	d04a      	beq.n	80057e0 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574e:	2b01      	cmp	r3, #1
 8005750:	d102      	bne.n	8005758 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8005752:	2301      	movs	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e02d      	b.n	80057b4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005760:	d004      	beq.n	800576c <HAL_ADC_IRQHandler+0x510>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a03      	ldr	r2, [pc, #12]	; (8005774 <HAL_ADC_IRQHandler+0x518>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d109      	bne.n	8005780 <HAL_ADC_IRQHandler+0x524>
 800576c:	4b02      	ldr	r3, [pc, #8]	; (8005778 <HAL_ADC_IRQHandler+0x51c>)
 800576e:	e008      	b.n	8005782 <HAL_ADC_IRQHandler+0x526>
 8005770:	50000400 	.word	0x50000400
 8005774:	50000100 	.word	0x50000100
 8005778:	50000300 	.word	0x50000300
 800577c:	50000700 	.word	0x50000700
 8005780:	4b28      	ldr	r3, [pc, #160]	; (8005824 <HAL_ADC_IRQHandler+0x5c8>)
 8005782:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d10a      	bne.n	80057b4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800579e:	2301      	movs	r3, #1
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	e007      	b.n	80057b4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80057b0:	2301      	movs	r3, #1
 80057b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d10e      	bne.n	80057d8 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	f043 0202 	orr.w	r2, r3, #2
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7ff f8fc 	bl	80049d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2210      	movs	r2, #16
 80057de:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d018      	beq.n	800581c <HAL_ADC_IRQHandler+0x5c0>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d013      	beq.n	800581c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005804:	f043 0208 	orr.w	r2, r3, #8
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005814:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f9b7 	bl	8005b8a <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800581c:	bf00      	nop
 800581e:	3720      	adds	r7, #32
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	50000700 	.word	0x50000700

08005828 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_ADCEx_Calibration_Start+0x1c>
 8005840:	2302      	movs	r3, #2
 8005842:	e05f      	b.n	8005904 <HAL_ADCEx_Calibration_Start+0xdc>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fe61 	bl	8006514 <ADC_Disable>
 8005852:	4603      	mov	r3, r0
 8005854:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d14e      	bne.n	80058fa <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005870:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d107      	bne.n	8005888 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005886:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005896:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8005898:	f7ff f84c 	bl	8004934 <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800589e:	e01c      	b.n	80058da <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80058a0:	f7ff f848 	bl	8004934 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b0a      	cmp	r3, #10
 80058ac:	d915      	bls.n	80058da <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058bc:	d10d      	bne.n	80058da <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f023 0312 	bic.w	r3, r3, #18
 80058c6:	f043 0210 	orr.w	r2, r3, #16
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e014      	b.n	8005904 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e8:	d0da      	beq.n	80058a0 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	f043 0201 	orr.w	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	f040 80ee 	bne.w	8005b04 <HAL_ADCEx_InjectedStart_IT+0x1f8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_ADCEx_InjectedStart_IT+0x2a>
 8005932:	2302      	movs	r3, #2
 8005934:	e0e9      	b.n	8005b0a <HAL_ADCEx_InjectedStart_IT+0x1fe>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fd84 	bl	800644c <ADC_Enable>
 8005944:	4603      	mov	r3, r0
 8005946:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
      /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 80d5 	bne.w	8005afa <HAL_ADCEx_InjectedStart_IT+0x1ee>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                        HAL_ADC_STATE_INJ_BUSY);
      
      /* Case of independent mode or multimode(for devices with several ADCs):*/
      /* Set multimode state.                                                 */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800596c:	d004      	beq.n	8005978 <HAL_ADCEx_InjectedStart_IT+0x6c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a68      	ldr	r2, [pc, #416]	; (8005b14 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d106      	bne.n	8005986 <HAL_ADCEx_InjectedStart_IT+0x7a>
 8005978:	4b67      	ldr	r3, [pc, #412]	; (8005b18 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	2b00      	cmp	r3, #0
 8005982:	d010      	beq.n	80059a6 <HAL_ADCEx_InjectedStart_IT+0x9a>
 8005984:	e005      	b.n	8005992 <HAL_ADCEx_InjectedStart_IT+0x86>
 8005986:	4b65      	ldr	r3, [pc, #404]	; (8005b1c <HAL_ADCEx_InjectedStart_IT+0x210>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <HAL_ADCEx_InjectedStart_IT+0x9a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800599a:	d004      	beq.n	80059a6 <HAL_ADCEx_InjectedStart_IT+0x9a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a5f      	ldr	r2, [pc, #380]	; (8005b20 <HAL_ADCEx_InjectedStart_IT+0x214>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d106      	bne.n	80059b4 <HAL_ADCEx_InjectedStart_IT+0xa8>
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
 80059b2:	e005      	b.n	80059c0 <HAL_ADCEx_InjectedStart_IT+0xb4>
      }
      else
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Check if a regular conversion is ongoing */
      /* Note: On this device, there is no ADC error code fields related to   */
      /*       conversions on group injected only. In case of conversion on   */
      /*       going on group regular, no error code is reset.                */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <HAL_ADCEx_InjectedStart_IT+0xc6>
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2260      	movs	r2, #96	; 0x60
 80059e0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC Injected context queue overflow interrupt if this feature */
      /* is enabled.                                                          */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <HAL_ADCEx_InjectedStart_IT+0xf4>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059fe:	605a      	str	r2, [r3, #4]
      }
      
      /* Enable ADC end of conversion interrupt */
      switch(hadc->Init.EOCSelection)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d110      	bne.n	8005a2a <HAL_ADCEx_InjectedStart_IT+0x11e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0220 	bic.w	r2, r2, #32
 8005a16:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a26:	605a      	str	r2, [r3, #4]
          break;
 8005a28:	e008      	b.n	8005a3c <HAL_ADCEx_InjectedStart_IT+0x130>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005a38:	605a      	str	r2, [r3, #4]
          break;
 8005a3a:	bf00      	nop
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d15e      	bne.n	8005b08 <HAL_ADCEx_InjectedStart_IT+0x1fc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a52:	d004      	beq.n	8005a5e <HAL_ADCEx_InjectedStart_IT+0x152>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a2e      	ldr	r2, [pc, #184]	; (8005b14 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d106      	bne.n	8005a6c <HAL_ADCEx_InjectedStart_IT+0x160>
 8005a5e:	4b2e      	ldr	r3, [pc, #184]	; (8005b18 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 031f 	and.w	r3, r3, #31
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d03e      	beq.n	8005ae8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005a6a:	e005      	b.n	8005a78 <HAL_ADCEx_InjectedStart_IT+0x16c>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <HAL_ADCEx_InjectedStart_IT+0x210>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d037      	beq.n	8005ae8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a80:	d004      	beq.n	8005a8c <HAL_ADCEx_InjectedStart_IT+0x180>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a23      	ldr	r2, [pc, #140]	; (8005b14 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d106      	bne.n	8005a9a <HAL_ADCEx_InjectedStart_IT+0x18e>
 8005a8c:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 031f 	and.w	r3, r3, #31
 8005a94:	2b06      	cmp	r3, #6
 8005a96:	d027      	beq.n	8005ae8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005a98:	e005      	b.n	8005aa6 <HAL_ADCEx_InjectedStart_IT+0x19a>
 8005a9a:	4b20      	ldr	r3, [pc, #128]	; (8005b1c <HAL_ADCEx_InjectedStart_IT+0x210>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2b06      	cmp	r3, #6
 8005aa4:	d020      	beq.n	8005ae8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aae:	d004      	beq.n	8005aba <HAL_ADCEx_InjectedStart_IT+0x1ae>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a17      	ldr	r2, [pc, #92]	; (8005b14 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d106      	bne.n	8005ac8 <HAL_ADCEx_InjectedStart_IT+0x1bc>
 8005aba:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2b07      	cmp	r3, #7
 8005ac4:	d010      	beq.n	8005ae8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005ac6:	e005      	b.n	8005ad4 <HAL_ADCEx_InjectedStart_IT+0x1c8>
 8005ac8:	4b14      	ldr	r3, [pc, #80]	; (8005b1c <HAL_ADCEx_InjectedStart_IT+0x210>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	2b07      	cmp	r3, #7
 8005ad2:	d009      	beq.n	8005ae8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005adc:	d004      	beq.n	8005ae8 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a0f      	ldr	r2, [pc, #60]	; (8005b20 <HAL_ADCEx_InjectedStart_IT+0x214>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d10f      	bne.n	8005b08 <HAL_ADCEx_InjectedStart_IT+0x1fc>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0208 	orr.w	r2, r2, #8
 8005af6:	609a      	str	r2, [r3, #8]
 8005af8:	e006      	b.n	8005b08 <HAL_ADCEx_InjectedStart_IT+0x1fc>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b02:	e001      	b.n	8005b08 <HAL_ADCEx_InjectedStart_IT+0x1fc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b04:	2302      	movs	r3, #2
 8005b06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	50000100 	.word	0x50000100
 8005b18:	50000300 	.word	0x50000300
 8005b1c:	50000700 	.word	0x50000700
 8005b20:	50000400 	.word	0x50000400

08005b24 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
  
  /* Note: ADC flag JEOC is not cleared here by software because              */
  /*       automatically cleared by hardware when reading register JDRx.      */
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d009      	beq.n	8005b4c <HAL_ADCEx_InjectedGetValue+0x28>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d818      	bhi.n	8005b70 <HAL_ADCEx_InjectedGetValue+0x4c>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d00f      	beq.n	8005b64 <HAL_ADCEx_InjectedGetValue+0x40>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d006      	beq.n	8005b58 <HAL_ADCEx_InjectedGetValue+0x34>
 8005b4a:	e011      	b.n	8005b70 <HAL_ADCEx_InjectedGetValue+0x4c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b54:	60fb      	str	r3, [r7, #12]
      break;
 8005b56:	e011      	b.n	8005b7c <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b60:	60fb      	str	r3, [r7, #12]
      break;
 8005b62:	e00b      	b.n	8005b7c <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6c:	60fb      	str	r3, [r7, #12]
      break;
 8005b6e:	e005      	b.n	8005b7c <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b78:	60fb      	str	r3, [r7, #12]
      break;
 8005b7a:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b09b      	sub	sp, #108	; 0x6c
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_ADC_ConfigChannel+0x22>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e2c8      	b.n	800617c <HAL_ADC_ConfigChannel+0x5b4>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f040 82ac 	bne.w	800615a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d81c      	bhi.n	8005c44 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	4413      	add	r3, r2
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	231f      	movs	r3, #31
 8005c20:	4093      	lsls	r3, r2
 8005c22:	43db      	mvns	r3, r3
 8005c24:	4019      	ands	r1, r3
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	4413      	add	r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	fa00 f203 	lsl.w	r2, r0, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	631a      	str	r2, [r3, #48]	; 0x30
 8005c42:	e063      	b.n	8005d0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b09      	cmp	r3, #9
 8005c4a:	d81e      	bhi.n	8005c8a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	3b1e      	subs	r3, #30
 8005c60:	221f      	movs	r2, #31
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	4019      	ands	r1, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	4413      	add	r3, r2
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	3b1e      	subs	r3, #30
 8005c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	635a      	str	r2, [r3, #52]	; 0x34
 8005c88:	e040      	b.n	8005d0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b0e      	cmp	r3, #14
 8005c90:	d81e      	bhi.n	8005cd0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	3b3c      	subs	r3, #60	; 0x3c
 8005ca6:	221f      	movs	r2, #31
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	43db      	mvns	r3, r3
 8005cae:	4019      	ands	r1, r3
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4413      	add	r3, r2
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	3b3c      	subs	r3, #60	; 0x3c
 8005cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8005cce:	e01d      	b.n	8005d0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	3b5a      	subs	r3, #90	; 0x5a
 8005ce4:	221f      	movs	r2, #31
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	4019      	ands	r1, r3
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	4413      	add	r3, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	3b5a      	subs	r3, #90	; 0x5a
 8005d00:	fa00 f203 	lsl.w	r2, r0, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f040 80e5 	bne.w	8005ee6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b09      	cmp	r3, #9
 8005d22:	d91c      	bls.n	8005d5e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6999      	ldr	r1, [r3, #24]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	4413      	add	r3, r2
 8005d34:	3b1e      	subs	r3, #30
 8005d36:	2207      	movs	r2, #7
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	4019      	ands	r1, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6898      	ldr	r0, [r3, #8]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3b1e      	subs	r3, #30
 8005d50:	fa00 f203 	lsl.w	r2, r0, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	619a      	str	r2, [r3, #24]
 8005d5c:	e019      	b.n	8005d92 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6959      	ldr	r1, [r3, #20]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	4413      	add	r3, r2
 8005d6e:	2207      	movs	r2, #7
 8005d70:	fa02 f303 	lsl.w	r3, r2, r3
 8005d74:	43db      	mvns	r3, r3
 8005d76:	4019      	ands	r1, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	6898      	ldr	r0, [r3, #8]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4413      	add	r3, r2
 8005d86:	fa00 f203 	lsl.w	r2, r0, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	08db      	lsrs	r3, r3, #3
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d84f      	bhi.n	8005e54 <HAL_ADC_ConfigChannel+0x28c>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <HAL_ADC_ConfigChannel+0x1f4>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005dcd 	.word	0x08005dcd
 8005dc0:	08005def 	.word	0x08005def
 8005dc4:	08005e11 	.word	0x08005e11
 8005dc8:	08005e33 	.word	0x08005e33
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005dd2:	4b99      	ldr	r3, [pc, #612]	; (8006038 <HAL_ADC_ConfigChannel+0x470>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	0691      	lsls	r1, r2, #26
 8005ddc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dde:	430a      	orrs	r2, r1
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005dea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005dec:	e07b      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005df4:	4b90      	ldr	r3, [pc, #576]	; (8006038 <HAL_ADC_ConfigChannel+0x470>)
 8005df6:	4013      	ands	r3, r2
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	0691      	lsls	r1, r2, #26
 8005dfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e00:	430a      	orrs	r2, r1
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005e0c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005e0e:	e06a      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005e16:	4b88      	ldr	r3, [pc, #544]	; (8006038 <HAL_ADC_ConfigChannel+0x470>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	0691      	lsls	r1, r2, #26
 8005e20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e22:	430a      	orrs	r2, r1
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005e2e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005e30:	e059      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005e38:	4b7f      	ldr	r3, [pc, #508]	; (8006038 <HAL_ADC_ConfigChannel+0x470>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	0691      	lsls	r1, r2, #26
 8005e42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e44:	430a      	orrs	r2, r1
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005e50:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005e52:	e048      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	069b      	lsls	r3, r3, #26
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d107      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e76:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	069b      	lsls	r3, r3, #26
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d107      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e9a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	069b      	lsls	r3, r3, #26
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d107      	bne.n	8005ec0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ebe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	069b      	lsls	r3, r3, #26
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d107      	bne.n	8005ee4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ee2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005ee4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d108      	bne.n	8005f06 <HAL_ADC_ConfigChannel+0x33e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d101      	bne.n	8005f06 <HAL_ADC_ConfigChannel+0x33e>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <HAL_ADC_ConfigChannel+0x340>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f040 8131 	bne.w	8006170 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d00f      	beq.n	8005f36 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2201      	movs	r2, #1
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	43da      	mvns	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	400a      	ands	r2, r1
 8005f30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005f34:	e049      	b.n	8005fca <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2201      	movs	r2, #1
 8005f44:	409a      	lsls	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b09      	cmp	r3, #9
 8005f56:	d91c      	bls.n	8005f92 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6999      	ldr	r1, [r3, #24]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4613      	mov	r3, r2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	4413      	add	r3, r2
 8005f68:	3b1b      	subs	r3, #27
 8005f6a:	2207      	movs	r2, #7
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	4019      	ands	r1, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	6898      	ldr	r0, [r3, #8]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	4413      	add	r3, r2
 8005f82:	3b1b      	subs	r3, #27
 8005f84:	fa00 f203 	lsl.w	r2, r0, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	619a      	str	r2, [r3, #24]
 8005f90:	e01b      	b.n	8005fca <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6959      	ldr	r1, [r3, #20]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	2207      	movs	r2, #7
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	43db      	mvns	r3, r3
 8005fac:	4019      	ands	r1, r3
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6898      	ldr	r0, [r3, #8]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	4613      	mov	r3, r2
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	4413      	add	r3, r2
 8005fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fd2:	d004      	beq.n	8005fde <HAL_ADC_ConfigChannel+0x416>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a18      	ldr	r2, [pc, #96]	; (800603c <HAL_ADC_ConfigChannel+0x474>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d101      	bne.n	8005fe2 <HAL_ADC_ConfigChannel+0x41a>
 8005fde:	4b18      	ldr	r3, [pc, #96]	; (8006040 <HAL_ADC_ConfigChannel+0x478>)
 8005fe0:	e000      	b.n	8005fe4 <HAL_ADC_ConfigChannel+0x41c>
 8005fe2:	4b18      	ldr	r3, [pc, #96]	; (8006044 <HAL_ADC_ConfigChannel+0x47c>)
 8005fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d105      	bne.n	8005ffa <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d015      	beq.n	8006026 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005ffe:	2b11      	cmp	r3, #17
 8006000:	d105      	bne.n	800600e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00b      	beq.n	8006026 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006012:	2b12      	cmp	r3, #18
 8006014:	f040 80ac 	bne.w	8006170 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8006020:	2b00      	cmp	r3, #0
 8006022:	f040 80a5 	bne.w	8006170 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800602e:	d10b      	bne.n	8006048 <HAL_ADC_ConfigChannel+0x480>
 8006030:	4b02      	ldr	r3, [pc, #8]	; (800603c <HAL_ADC_ConfigChannel+0x474>)
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e023      	b.n	800607e <HAL_ADC_ConfigChannel+0x4b6>
 8006036:	bf00      	nop
 8006038:	83fff000 	.word	0x83fff000
 800603c:	50000100 	.word	0x50000100
 8006040:	50000300 	.word	0x50000300
 8006044:	50000700 	.word	0x50000700
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a4e      	ldr	r2, [pc, #312]	; (8006188 <HAL_ADC_ConfigChannel+0x5c0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d103      	bne.n	800605a <HAL_ADC_ConfigChannel+0x492>
 8006052:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e011      	b.n	800607e <HAL_ADC_ConfigChannel+0x4b6>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a4b      	ldr	r2, [pc, #300]	; (800618c <HAL_ADC_ConfigChannel+0x5c4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d102      	bne.n	800606a <HAL_ADC_ConfigChannel+0x4a2>
 8006064:	4b4a      	ldr	r3, [pc, #296]	; (8006190 <HAL_ADC_ConfigChannel+0x5c8>)
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e009      	b.n	800607e <HAL_ADC_ConfigChannel+0x4b6>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a48      	ldr	r2, [pc, #288]	; (8006190 <HAL_ADC_ConfigChannel+0x5c8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d102      	bne.n	800607a <HAL_ADC_ConfigChannel+0x4b2>
 8006074:	4b45      	ldr	r3, [pc, #276]	; (800618c <HAL_ADC_ConfigChannel+0x5c4>)
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	e001      	b.n	800607e <HAL_ADC_ConfigChannel+0x4b6>
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	2b01      	cmp	r3, #1
 800608a:	d108      	bne.n	800609e <HAL_ADC_ConfigChannel+0x4d6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_ADC_ConfigChannel+0x4d6>
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <HAL_ADC_ConfigChannel+0x4d8>
 800609e:	2300      	movs	r3, #0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d150      	bne.n	8006146 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80060a4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d010      	beq.n	80060cc <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d107      	bne.n	80060c6 <HAL_ADC_ConfigChannel+0x4fe>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_ADC_ConfigChannel+0x4fe>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <HAL_ADC_ConfigChannel+0x500>
 80060c6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d13c      	bne.n	8006146 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d11d      	bne.n	8006110 <HAL_ADC_ConfigChannel+0x548>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060dc:	d118      	bne.n	8006110 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80060de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80060e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80060ea:	4b2a      	ldr	r3, [pc, #168]	; (8006194 <HAL_ADC_ConfigChannel+0x5cc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <HAL_ADC_ConfigChannel+0x5d0>)
 80060f0:	fba2 2303 	umull	r2, r3, r2, r3
 80060f4:	0c9a      	lsrs	r2, r3, #18
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006100:	e002      	b.n	8006108 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	3b01      	subs	r3, #1
 8006106:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f9      	bne.n	8006102 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800610e:	e02e      	b.n	800616e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b11      	cmp	r3, #17
 8006116:	d10b      	bne.n	8006130 <HAL_ADC_ConfigChannel+0x568>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006120:	d106      	bne.n	8006130 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800612a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800612c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800612e:	e01e      	b.n	800616e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b12      	cmp	r3, #18
 8006136:	d11a      	bne.n	800616e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006142:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006144:	e013      	b.n	800616e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f043 0220 	orr.w	r2, r3, #32
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006158:	e00a      	b.n	8006170 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	f043 0220 	orr.w	r2, r3, #32
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800616c:	e000      	b.n	8006170 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800616e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006178:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800617c:	4618      	mov	r0, r3
 800617e:	376c      	adds	r7, #108	; 0x6c
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	50000100 	.word	0x50000100
 800618c:	50000400 	.word	0x50000400
 8006190:	50000500 	.word	0x50000500
 8006194:	20000098 	.word	0x20000098
 8006198:	431bde83 	.word	0x431bde83

0800619c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800619c:	b480      	push	{r7}
 800619e:	b099      	sub	sp, #100	; 0x64
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061b4:	d102      	bne.n	80061bc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80061b6:	4b6d      	ldr	r3, [pc, #436]	; (800636c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	e01a      	b.n	80061f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a6a      	ldr	r2, [pc, #424]	; (800636c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d103      	bne.n	80061ce <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80061c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80061ca:	60bb      	str	r3, [r7, #8]
 80061cc:	e011      	b.n	80061f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a67      	ldr	r2, [pc, #412]	; (8006370 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d102      	bne.n	80061de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80061d8:	4b66      	ldr	r3, [pc, #408]	; (8006374 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80061da:	60bb      	str	r3, [r7, #8]
 80061dc:	e009      	b.n	80061f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a64      	ldr	r2, [pc, #400]	; (8006374 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d102      	bne.n	80061ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80061e8:	4b61      	ldr	r3, [pc, #388]	; (8006370 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80061ea:	60bb      	str	r3, [r7, #8]
 80061ec:	e001      	b.n	80061f2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80061ee:	2300      	movs	r3, #0
 80061f0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e0b0      	b.n	800635e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006206:	2302      	movs	r3, #2
 8006208:	e0a9      	b.n	800635e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	f040 808d 	bne.w	800633c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 8086 	bne.w	800633c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006238:	d004      	beq.n	8006244 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a4b      	ldr	r2, [pc, #300]	; (800636c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d101      	bne.n	8006248 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006244:	4b4c      	ldr	r3, [pc, #304]	; (8006378 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8006246:	e000      	b.n	800624a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006248:	4b4c      	ldr	r3, [pc, #304]	; (800637c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800624a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d040      	beq.n	80062d6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	6859      	ldr	r1, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006266:	035b      	lsls	r3, r3, #13
 8006268:	430b      	orrs	r3, r1
 800626a:	431a      	orrs	r2, r3
 800626c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800626e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b01      	cmp	r3, #1
 800627c:	d108      	bne.n	8006290 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800628c:	2301      	movs	r3, #1
 800628e:	e000      	b.n	8006292 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006290:	2300      	movs	r3, #0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d15c      	bne.n	8006350 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d107      	bne.n	80062b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80062b2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d14b      	bne.n	8006350 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80062b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80062c0:	f023 030f 	bic.w	r3, r3, #15
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	6811      	ldr	r1, [r2, #0]
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	6892      	ldr	r2, [r2, #8]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	431a      	orrs	r2, r3
 80062d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062d2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80062d4:	e03c      	b.n	8006350 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80062d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062e0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0303 	and.w	r3, r3, #3
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d108      	bne.n	8006302 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006302:	2300      	movs	r3, #0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d123      	bne.n	8006350 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f003 0303 	and.w	r3, r3, #3
 8006310:	2b01      	cmp	r3, #1
 8006312:	d107      	bne.n	8006324 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8006324:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006326:	2b00      	cmp	r3, #0
 8006328:	d112      	bne.n	8006350 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800632a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006332:	f023 030f 	bic.w	r3, r3, #15
 8006336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006338:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800633a:	e009      	b.n	8006350 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	f043 0220 	orr.w	r2, r3, #32
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800634e:	e000      	b.n	8006352 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006350:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800635a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800635e:	4618      	mov	r0, r3
 8006360:	3764      	adds	r7, #100	; 0x64
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	50000100 	.word	0x50000100
 8006370:	50000400 	.word	0x50000400
 8006374:	50000500 	.word	0x50000500
 8006378:	50000300 	.word	0x50000300
 800637c:	50000700 	.word	0x50000700

08006380 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006396:	2b00      	cmp	r3, #0
 8006398:	d126      	bne.n	80063e8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d115      	bne.n	80063e0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d111      	bne.n	80063e0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d105      	bne.n	80063e0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	f043 0201 	orr.w	r2, r3, #1
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7fe fad7 	bl	8004994 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80063e6:	e004      	b.n	80063f2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7fe facd 	bl	80049a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006434:	f043 0204 	orr.w	r2, r3, #4
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f7fe fac7 	bl	80049d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	2b01      	cmp	r3, #1
 8006464:	d108      	bne.n	8006478 <ADC_Enable+0x2c>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <ADC_Enable+0x2c>
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <ADC_Enable+0x2e>
 8006478:	2300      	movs	r3, #0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d143      	bne.n	8006506 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	4b22      	ldr	r3, [pc, #136]	; (8006510 <ADC_Enable+0xc4>)
 8006486:	4013      	ands	r3, r2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00d      	beq.n	80064a8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	f043 0210 	orr.w	r2, r3, #16
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649c:	f043 0201 	orr.w	r2, r3, #1
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e02f      	b.n	8006508 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80064b8:	f7fe fa3c 	bl	8004934 <HAL_GetTick>
 80064bc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80064be:	e01b      	b.n	80064f8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80064c0:	f7fe fa38 	bl	8004934 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d914      	bls.n	80064f8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d00d      	beq.n	80064f8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	f043 0210 	orr.w	r2, r3, #16
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ec:	f043 0201 	orr.w	r2, r3, #1
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e007      	b.n	8006508 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b01      	cmp	r3, #1
 8006504:	d1dc      	bne.n	80064c0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	8000003f 	.word	0x8000003f

08006514 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	2b01      	cmp	r3, #1
 800652c:	d108      	bne.n	8006540 <ADC_Disable+0x2c>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <ADC_Disable+0x2c>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <ADC_Disable+0x2e>
 8006540:	2300      	movs	r3, #0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d047      	beq.n	80065d6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 030d 	and.w	r3, r3, #13
 8006550:	2b01      	cmp	r3, #1
 8006552:	d10f      	bne.n	8006574 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0202 	orr.w	r2, r2, #2
 8006562:	609a      	str	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2203      	movs	r2, #3
 800656a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800656c:	f7fe f9e2 	bl	8004934 <HAL_GetTick>
 8006570:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006572:	e029      	b.n	80065c8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	f043 0210 	orr.w	r2, r3, #16
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006584:	f043 0201 	orr.w	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e023      	b.n	80065d8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006590:	f7fe f9d0 	bl	8004934 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d914      	bls.n	80065c8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d10d      	bne.n	80065c8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	f043 0210 	orr.w	r2, r3, #16
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065bc:	f043 0201 	orr.w	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e007      	b.n	80065d8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d0dc      	beq.n	8006590 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <__NVIC_SetPriorityGrouping+0x44>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065fc:	4013      	ands	r3, r2
 80065fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800660c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006612:	4a04      	ldr	r2, [pc, #16]	; (8006624 <__NVIC_SetPriorityGrouping+0x44>)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	60d3      	str	r3, [r2, #12]
}
 8006618:	bf00      	nop
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	e000ed00 	.word	0xe000ed00

08006628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800662c:	4b04      	ldr	r3, [pc, #16]	; (8006640 <__NVIC_GetPriorityGrouping+0x18>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	0a1b      	lsrs	r3, r3, #8
 8006632:	f003 0307 	and.w	r3, r3, #7
}
 8006636:	4618      	mov	r0, r3
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	e000ed00 	.word	0xe000ed00

08006644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800664e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006652:	2b00      	cmp	r3, #0
 8006654:	db0b      	blt.n	800666e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	f003 021f 	and.w	r2, r3, #31
 800665c:	4907      	ldr	r1, [pc, #28]	; (800667c <__NVIC_EnableIRQ+0x38>)
 800665e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	2001      	movs	r0, #1
 8006666:	fa00 f202 	lsl.w	r2, r0, r2
 800666a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	e000e100 	.word	0xe000e100

08006680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	6039      	str	r1, [r7, #0]
 800668a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800668c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006690:	2b00      	cmp	r3, #0
 8006692:	db0a      	blt.n	80066aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	b2da      	uxtb	r2, r3
 8006698:	490c      	ldr	r1, [pc, #48]	; (80066cc <__NVIC_SetPriority+0x4c>)
 800669a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669e:	0112      	lsls	r2, r2, #4
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	440b      	add	r3, r1
 80066a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066a8:	e00a      	b.n	80066c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	4908      	ldr	r1, [pc, #32]	; (80066d0 <__NVIC_SetPriority+0x50>)
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	3b04      	subs	r3, #4
 80066b8:	0112      	lsls	r2, r2, #4
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	440b      	add	r3, r1
 80066be:	761a      	strb	r2, [r3, #24]
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	e000e100 	.word	0xe000e100
 80066d0:	e000ed00 	.word	0xe000ed00

080066d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b089      	sub	sp, #36	; 0x24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f1c3 0307 	rsb	r3, r3, #7
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	bf28      	it	cs
 80066f2:	2304      	movcs	r3, #4
 80066f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	3304      	adds	r3, #4
 80066fa:	2b06      	cmp	r3, #6
 80066fc:	d902      	bls.n	8006704 <NVIC_EncodePriority+0x30>
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	3b03      	subs	r3, #3
 8006702:	e000      	b.n	8006706 <NVIC_EncodePriority+0x32>
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006708:	f04f 32ff 	mov.w	r2, #4294967295
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	fa02 f303 	lsl.w	r3, r2, r3
 8006712:	43da      	mvns	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	401a      	ands	r2, r3
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800671c:	f04f 31ff 	mov.w	r1, #4294967295
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	fa01 f303 	lsl.w	r3, r1, r3
 8006726:	43d9      	mvns	r1, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800672c:	4313      	orrs	r3, r2
         );
}
 800672e:	4618      	mov	r0, r3
 8006730:	3724      	adds	r7, #36	; 0x24
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
	...

0800673c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3b01      	subs	r3, #1
 8006748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800674c:	d301      	bcc.n	8006752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800674e:	2301      	movs	r3, #1
 8006750:	e00f      	b.n	8006772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006752:	4a0a      	ldr	r2, [pc, #40]	; (800677c <SysTick_Config+0x40>)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3b01      	subs	r3, #1
 8006758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800675a:	210f      	movs	r1, #15
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	f7ff ff8e 	bl	8006680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <SysTick_Config+0x40>)
 8006766:	2200      	movs	r2, #0
 8006768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800676a:	4b04      	ldr	r3, [pc, #16]	; (800677c <SysTick_Config+0x40>)
 800676c:	2207      	movs	r2, #7
 800676e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	e000e010 	.word	0xe000e010

08006780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff ff29 	bl	80065e0 <__NVIC_SetPriorityGrouping>
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	4603      	mov	r3, r0
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067a8:	f7ff ff3e 	bl	8006628 <__NVIC_GetPriorityGrouping>
 80067ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	6978      	ldr	r0, [r7, #20]
 80067b4:	f7ff ff8e 	bl	80066d4 <NVIC_EncodePriority>
 80067b8:	4602      	mov	r2, r0
 80067ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff ff5d 	bl	8006680 <__NVIC_SetPriority>
}
 80067c6:	bf00      	nop
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	4603      	mov	r3, r0
 80067d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff ff31 	bl	8006644 <__NVIC_EnableIRQ>
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff ffa2 	bl	800673c <SysTick_Config>
 80067f8:	4603      	mov	r3, r0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e054      	b.n	80068c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	7f5b      	ldrb	r3, [r3, #29]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fd f8c6 	bl	80039b8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	791b      	ldrb	r3, [r3, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10c      	bne.n	8006854 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a22      	ldr	r2, [pc, #136]	; (80068c8 <HAL_CRC_Init+0xc4>)
 8006840:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0218 	bic.w	r2, r2, #24
 8006850:	609a      	str	r2, [r3, #8]
 8006852:	e00c      	b.n	800686e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6899      	ldr	r1, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	461a      	mov	r2, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f948 	bl	8006af4 <HAL_CRCEx_Polynomial_Set>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e028      	b.n	80068c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	795b      	ldrb	r3, [r3, #5]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d105      	bne.n	8006882 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f04f 32ff 	mov.w	r2, #4294967295
 800687e:	611a      	str	r2, [r3, #16]
 8006880:	e004      	b.n	800688c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6912      	ldr	r2, [r2, #16]
 800688a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699a      	ldr	r2, [r3, #24]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	04c11db7 	.word	0x04c11db7

080068cc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80068d8:	2300      	movs	r3, #0
 80068da:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2202      	movs	r2, #2
 80068e0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0201 	orr.w	r2, r2, #1
 80068f0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d006      	beq.n	8006908 <HAL_CRC_Calculate+0x3c>
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d829      	bhi.n	8006952 <HAL_CRC_Calculate+0x86>
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d019      	beq.n	8006936 <HAL_CRC_Calculate+0x6a>
 8006902:	2b02      	cmp	r3, #2
 8006904:	d01e      	beq.n	8006944 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006906:	e024      	b.n	8006952 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006908:	2300      	movs	r3, #0
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	e00a      	b.n	8006924 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	441a      	add	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6812      	ldr	r2, [r2, #0]
 800691c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	3301      	adds	r3, #1
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	429a      	cmp	r2, r3
 800692a:	d3f0      	bcc.n	800690e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	613b      	str	r3, [r7, #16]
      break;
 8006934:	e00e      	b.n	8006954 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f812 	bl	8006964 <CRC_Handle_8>
 8006940:	6138      	str	r0, [r7, #16]
      break;
 8006942:	e007      	b.n	8006954 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 f899 	bl	8006a80 <CRC_Handle_16>
 800694e:	6138      	str	r0, [r7, #16]
      break;
 8006950:	e000      	b.n	8006954 <HAL_CRC_Calculate+0x88>
      break;
 8006952:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2201      	movs	r2, #1
 8006958:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800695a:	693b      	ldr	r3, [r7, #16]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8006964:	b480      	push	{r7}
 8006966:	b089      	sub	sp, #36	; 0x24
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006970:	2300      	movs	r3, #0
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	e023      	b.n	80069be <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4413      	add	r3, r2
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	3301      	adds	r3, #1
 8006988:	68b9      	ldr	r1, [r7, #8]
 800698a:	440b      	add	r3, r1
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006990:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	3302      	adds	r3, #2
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	440b      	add	r3, r1
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80069a0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	3303      	adds	r3, #3
 80069a8:	68b9      	ldr	r1, [r7, #8]
 80069aa:	440b      	add	r3, r1
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80069b4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80069b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	3301      	adds	r3, #1
 80069bc:	61fb      	str	r3, [r7, #28]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	089b      	lsrs	r3, r3, #2
 80069c2:	69fa      	ldr	r2, [r7, #28]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d3d6      	bcc.n	8006976 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d04d      	beq.n	8006a6e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d107      	bne.n	80069ec <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	4413      	add	r3, r2
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d116      	bne.n	8006a24 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	4413      	add	r3, r2
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	b21a      	sxth	r2, r3
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	3301      	adds	r3, #1
 8006a0a:	68b9      	ldr	r1, [r7, #8]
 8006a0c:	440b      	add	r3, r1
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	b21b      	sxth	r3, r3
 8006a12:	4313      	orrs	r3, r2
 8006a14:	b21b      	sxth	r3, r3
 8006a16:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	8b7a      	ldrh	r2, [r7, #26]
 8006a22:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d11f      	bne.n	8006a6e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	4413      	add	r3, r2
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	b21a      	sxth	r2, r3
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	3301      	adds	r3, #1
 8006a42:	68b9      	ldr	r1, [r7, #8]
 8006a44:	440b      	add	r3, r1
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	b21b      	sxth	r3, r3
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	b21b      	sxth	r3, r3
 8006a4e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	8b7a      	ldrh	r2, [r7, #26]
 8006a5a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	3302      	adds	r3, #2
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	4413      	add	r3, r2
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3724      	adds	r7, #36	; 0x24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e013      	b.n	8006aba <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	041a      	lsls	r2, r3, #16
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	440b      	add	r3, r1
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d3e6      	bcc.n	8006a92 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d009      	beq.n	8006ae2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	4413      	add	r3, r2
 8006adc:	881a      	ldrh	r2, [r3, #0]
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	371c      	adds	r7, #28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006b04:	231f      	movs	r3, #31
 8006b06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d102      	bne.n	8006b18 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	75fb      	strb	r3, [r7, #23]
 8006b16:	e063      	b.n	8006be0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006b18:	bf00      	nop
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1e5a      	subs	r2, r3, #1
 8006b1e:	613a      	str	r2, [r7, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d009      	beq.n	8006b38 <HAL_CRCEx_Polynomial_Set+0x44>
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0f0      	beq.n	8006b1a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b18      	cmp	r3, #24
 8006b3c:	d846      	bhi.n	8006bcc <HAL_CRCEx_Polynomial_Set+0xd8>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006bd3 	.word	0x08006bd3
 8006b48:	08006bcd 	.word	0x08006bcd
 8006b4c:	08006bcd 	.word	0x08006bcd
 8006b50:	08006bcd 	.word	0x08006bcd
 8006b54:	08006bcd 	.word	0x08006bcd
 8006b58:	08006bcd 	.word	0x08006bcd
 8006b5c:	08006bcd 	.word	0x08006bcd
 8006b60:	08006bcd 	.word	0x08006bcd
 8006b64:	08006bc1 	.word	0x08006bc1
 8006b68:	08006bcd 	.word	0x08006bcd
 8006b6c:	08006bcd 	.word	0x08006bcd
 8006b70:	08006bcd 	.word	0x08006bcd
 8006b74:	08006bcd 	.word	0x08006bcd
 8006b78:	08006bcd 	.word	0x08006bcd
 8006b7c:	08006bcd 	.word	0x08006bcd
 8006b80:	08006bcd 	.word	0x08006bcd
 8006b84:	08006bb5 	.word	0x08006bb5
 8006b88:	08006bcd 	.word	0x08006bcd
 8006b8c:	08006bcd 	.word	0x08006bcd
 8006b90:	08006bcd 	.word	0x08006bcd
 8006b94:	08006bcd 	.word	0x08006bcd
 8006b98:	08006bcd 	.word	0x08006bcd
 8006b9c:	08006bcd 	.word	0x08006bcd
 8006ba0:	08006bcd 	.word	0x08006bcd
 8006ba4:	08006ba9 	.word	0x08006ba9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	2b06      	cmp	r3, #6
 8006bac:	d913      	bls.n	8006bd6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006bb2:	e010      	b.n	8006bd6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	2b07      	cmp	r3, #7
 8006bb8:	d90f      	bls.n	8006bda <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006bbe:	e00c      	b.n	8006bda <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2b0f      	cmp	r3, #15
 8006bc4:	d90b      	bls.n	8006bde <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006bca:	e008      	b.n	8006bde <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	75fb      	strb	r3, [r7, #23]
        break;
 8006bd0:	e006      	b.n	8006be0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006bd2:	bf00      	nop
 8006bd4:	e004      	b.n	8006be0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006bd6:	bf00      	nop
 8006bd8:	e002      	b.n	8006be0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006bda:	bf00      	nop
 8006bdc:	e000      	b.n	8006be0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006bde:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10d      	bne.n	8006c02 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f023 0118 	bic.w	r1, r3, #24
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e037      	b.n	8006c96 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006c3c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006c40:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f94d 	bl	8006f18 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}  
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b086      	sub	sp, #24
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
 8006caa:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_DMA_Start_IT+0x20>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e04a      	b.n	8006d54 <HAL_DMA_Start_IT+0xb6>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d13a      	bne.n	8006d46 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f8e1 	bl	8006ebc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 020e 	orr.w	r2, r2, #14
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	e00f      	b.n	8006d34 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 020a 	orr.w	r2, r2, #10
 8006d22:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0204 	bic.w	r2, r2, #4
 8006d32:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0201 	orr.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e005      	b.n	8006d52 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006d4e:	2302      	movs	r3, #2
 8006d50:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006d54:	4618      	mov	r0, r3
 8006d56:	3718      	adds	r7, #24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	2204      	movs	r2, #4
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d024      	beq.n	8006dce <HAL_DMA_IRQHandler+0x72>
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01f      	beq.n	8006dce <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0320 	and.w	r3, r3, #32
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d107      	bne.n	8006dac <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0204 	bic.w	r2, r2, #4
 8006daa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	2104      	movs	r1, #4
 8006db6:	fa01 f202 	lsl.w	r2, r1, r2
 8006dba:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d06a      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006dcc:	e065      	b.n	8006e9a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	409a      	lsls	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d02c      	beq.n	8006e38 <HAL_DMA_IRQHandler+0xdc>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d027      	beq.n	8006e38 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 020a 	bic.w	r2, r2, #10
 8006e04:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e16:	2102      	movs	r1, #2
 8006e18:	fa01 f202 	lsl.w	r2, r1, r2
 8006e1c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d035      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006e36:	e030      	b.n	8006e9a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	409a      	lsls	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4013      	ands	r3, r2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d028      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x13e>
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d023      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 020e 	bic.w	r2, r2, #14
 8006e60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8006e70:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
    }
  }
}  
 8006e98:	e7ff      	b.n	8006e9a <HAL_DMA_IRQHandler+0x13e>
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8006ed8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b10      	cmp	r3, #16
 8006ee8:	d108      	bne.n	8006efc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006efa:	e007      	b.n	8006f0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	60da      	str	r2, [r3, #12]
}
 8006f0c:	bf00      	nop
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <DMA_CalcBaseAndBitshift+0x60>)
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d80f      	bhi.n	8006f4c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	461a      	mov	r2, r3
 8006f32:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <DMA_CalcBaseAndBitshift+0x64>)
 8006f34:	4413      	add	r3, r2
 8006f36:	4a12      	ldr	r2, [pc, #72]	; (8006f80 <DMA_CalcBaseAndBitshift+0x68>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	091b      	lsrs	r3, r3, #4
 8006f3e:	009a      	lsls	r2, r3, #2
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a0f      	ldr	r2, [pc, #60]	; (8006f84 <DMA_CalcBaseAndBitshift+0x6c>)
 8006f48:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006f4a:	e00e      	b.n	8006f6a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <DMA_CalcBaseAndBitshift+0x70>)
 8006f54:	4413      	add	r3, r2
 8006f56:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <DMA_CalcBaseAndBitshift+0x68>)
 8006f58:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	009a      	lsls	r2, r3, #2
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a09      	ldr	r2, [pc, #36]	; (8006f8c <DMA_CalcBaseAndBitshift+0x74>)
 8006f68:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40020407 	.word	0x40020407
 8006f7c:	bffdfff8 	.word	0xbffdfff8
 8006f80:	cccccccd 	.word	0xcccccccd
 8006f84:	40020000 	.word	0x40020000
 8006f88:	bffdfbf8 	.word	0xbffdfbf8
 8006f8c:	40020400 	.word	0x40020400

08006f90 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006faa:	4b2f      	ldr	r3, [pc, #188]	; (8007068 <HAL_FLASH_Program+0xd8>)
 8006fac:	7e1b      	ldrb	r3, [r3, #24]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_FLASH_Program+0x26>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e054      	b.n	8007060 <HAL_FLASH_Program+0xd0>
 8006fb6:	4b2c      	ldr	r3, [pc, #176]	; (8007068 <HAL_FLASH_Program+0xd8>)
 8006fb8:	2201      	movs	r2, #1
 8006fba:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006fbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006fc0:	f000 f8a8 	bl	8007114 <FLASH_WaitForLastOperation>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d144      	bne.n	8007058 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d102      	bne.n	8006fda <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	757b      	strb	r3, [r7, #21]
 8006fd8:	e007      	b.n	8006fea <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d102      	bne.n	8006fe6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	757b      	strb	r3, [r7, #21]
 8006fe4:	e001      	b.n	8006fea <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8006fea:	2300      	movs	r3, #0
 8006fec:	75bb      	strb	r3, [r7, #22]
 8006fee:	e02d      	b.n	800704c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006ff0:	7dbb      	ldrb	r3, [r7, #22]
 8006ff2:	005a      	lsls	r2, r3, #1
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	eb02 0c03 	add.w	ip, r2, r3
 8006ffa:	7dbb      	ldrb	r3, [r7, #22]
 8006ffc:	0119      	lsls	r1, r3, #4
 8006ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007002:	f1c1 0620 	rsb	r6, r1, #32
 8007006:	f1a1 0020 	sub.w	r0, r1, #32
 800700a:	fa22 f401 	lsr.w	r4, r2, r1
 800700e:	fa03 f606 	lsl.w	r6, r3, r6
 8007012:	4334      	orrs	r4, r6
 8007014:	fa23 f000 	lsr.w	r0, r3, r0
 8007018:	4304      	orrs	r4, r0
 800701a:	fa23 f501 	lsr.w	r5, r3, r1
 800701e:	b2a3      	uxth	r3, r4
 8007020:	4619      	mov	r1, r3
 8007022:	4660      	mov	r0, ip
 8007024:	f000 f85a 	bl	80070dc <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007028:	f24c 3050 	movw	r0, #50000	; 0xc350
 800702c:	f000 f872 	bl	8007114 <FLASH_WaitForLastOperation>
 8007030:	4603      	mov	r3, r0
 8007032:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007034:	4b0d      	ldr	r3, [pc, #52]	; (800706c <HAL_FLASH_Program+0xdc>)
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	4a0c      	ldr	r2, [pc, #48]	; (800706c <HAL_FLASH_Program+0xdc>)
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d107      	bne.n	8007056 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8007046:	7dbb      	ldrb	r3, [r7, #22]
 8007048:	3301      	adds	r3, #1
 800704a:	75bb      	strb	r3, [r7, #22]
 800704c:	7dba      	ldrb	r2, [r7, #22]
 800704e:	7d7b      	ldrb	r3, [r7, #21]
 8007050:	429a      	cmp	r2, r3
 8007052:	d3cd      	bcc.n	8006ff0 <HAL_FLASH_Program+0x60>
 8007054:	e000      	b.n	8007058 <HAL_FLASH_Program+0xc8>
      {
        break;
 8007056:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007058:	4b03      	ldr	r3, [pc, #12]	; (8007068 <HAL_FLASH_Program+0xd8>)
 800705a:	2200      	movs	r2, #0
 800705c:	761a      	strb	r2, [r3, #24]

  return status;
 800705e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007060:	4618      	mov	r0, r3
 8007062:	371c      	adds	r7, #28
 8007064:	46bd      	mov	sp, r7
 8007066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007068:	200019f8 	.word	0x200019f8
 800706c:	40022000 	.word	0x40022000

08007070 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800707a:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <HAL_FLASH_Unlock+0x40>)
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00d      	beq.n	80070a2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007086:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <HAL_FLASH_Unlock+0x40>)
 8007088:	4a0a      	ldr	r2, [pc, #40]	; (80070b4 <HAL_FLASH_Unlock+0x44>)
 800708a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800708c:	4b08      	ldr	r3, [pc, #32]	; (80070b0 <HAL_FLASH_Unlock+0x40>)
 800708e:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <HAL_FLASH_Unlock+0x48>)
 8007090:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007092:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <HAL_FLASH_Unlock+0x40>)
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80070a2:	79fb      	ldrb	r3, [r7, #7]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40022000 	.word	0x40022000
 80070b4:	45670123 	.word	0x45670123
 80070b8:	cdef89ab 	.word	0xcdef89ab

080070bc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <HAL_FLASH_Lock+0x1c>)
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	4a04      	ldr	r2, [pc, #16]	; (80070d8 <HAL_FLASH_Lock+0x1c>)
 80070c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ca:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	40022000 	.word	0x40022000

080070dc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80070e8:	4b08      	ldr	r3, [pc, #32]	; (800710c <FLASH_Program_HalfWord+0x30>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80070ee:	4b08      	ldr	r3, [pc, #32]	; (8007110 <FLASH_Program_HalfWord+0x34>)
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	4a07      	ldr	r2, [pc, #28]	; (8007110 <FLASH_Program_HalfWord+0x34>)
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	887a      	ldrh	r2, [r7, #2]
 80070fe:	801a      	strh	r2, [r3, #0]
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	200019f8 	.word	0x200019f8
 8007110:	40022000 	.word	0x40022000

08007114 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800711c:	f7fd fc0a 	bl	8004934 <HAL_GetTick>
 8007120:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007122:	e010      	b.n	8007146 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712a:	d00c      	beq.n	8007146 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <FLASH_WaitForLastOperation+0x2e>
 8007132:	f7fd fbff 	bl	8004934 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	429a      	cmp	r2, r3
 8007140:	d201      	bcs.n	8007146 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e01f      	b.n	8007186 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007146:	4b12      	ldr	r3, [pc, #72]	; (8007190 <FLASH_WaitForLastOperation+0x7c>)
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b01      	cmp	r3, #1
 8007150:	d0e8      	beq.n	8007124 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007152:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <FLASH_WaitForLastOperation+0x7c>)
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b20      	cmp	r3, #32
 800715c:	d102      	bne.n	8007164 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800715e:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <FLASH_WaitForLastOperation+0x7c>)
 8007160:	2220      	movs	r2, #32
 8007162:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007164:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <FLASH_WaitForLastOperation+0x7c>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b10      	cmp	r3, #16
 800716e:	d005      	beq.n	800717c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <FLASH_WaitForLastOperation+0x7c>)
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007178:	2b04      	cmp	r3, #4
 800717a:	d103      	bne.n	8007184 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800717c:	f000 f80a 	bl	8007194 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e000      	b.n	8007186 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40022000 	.word	0x40022000

08007194 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800719e:	4b14      	ldr	r3, [pc, #80]	; (80071f0 <FLASH_SetErrorCode+0x5c>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0310 	and.w	r3, r3, #16
 80071a6:	2b10      	cmp	r3, #16
 80071a8:	d109      	bne.n	80071be <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80071aa:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <FLASH_SetErrorCode+0x60>)
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f043 0302 	orr.w	r3, r3, #2
 80071b2:	4a10      	ldr	r2, [pc, #64]	; (80071f4 <FLASH_SetErrorCode+0x60>)
 80071b4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f043 0310 	orr.w	r3, r3, #16
 80071bc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80071be:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <FLASH_SetErrorCode+0x5c>)
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d109      	bne.n	80071de <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80071ca:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <FLASH_SetErrorCode+0x60>)
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f043 0301 	orr.w	r3, r3, #1
 80071d2:	4a08      	ldr	r2, [pc, #32]	; (80071f4 <FLASH_SetErrorCode+0x60>)
 80071d4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f043 0304 	orr.w	r3, r3, #4
 80071dc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80071de:	4a04      	ldr	r2, [pc, #16]	; (80071f0 <FLASH_SetErrorCode+0x5c>)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60d3      	str	r3, [r2, #12]
}  
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	40022000 	.word	0x40022000
 80071f4:	200019f8 	.word	0x200019f8

080071f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800720a:	4b2e      	ldr	r3, [pc, #184]	; (80072c4 <HAL_FLASHEx_Erase+0xcc>)
 800720c:	7e1b      	ldrb	r3, [r3, #24]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_FLASHEx_Erase+0x1e>
 8007212:	2302      	movs	r3, #2
 8007214:	e052      	b.n	80072bc <HAL_FLASHEx_Erase+0xc4>
 8007216:	4b2b      	ldr	r3, [pc, #172]	; (80072c4 <HAL_FLASHEx_Erase+0xcc>)
 8007218:	2201      	movs	r2, #1
 800721a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d115      	bne.n	8007250 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007224:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007228:	f7ff ff74 	bl	8007114 <FLASH_WaitForLastOperation>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d140      	bne.n	80072b4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8007232:	f000 f84b 	bl	80072cc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007236:	f24c 3050 	movw	r0, #50000	; 0xc350
 800723a:	f7ff ff6b 	bl	8007114 <FLASH_WaitForLastOperation>
 800723e:	4603      	mov	r3, r0
 8007240:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8007242:	4b21      	ldr	r3, [pc, #132]	; (80072c8 <HAL_FLASHEx_Erase+0xd0>)
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	4a20      	ldr	r2, [pc, #128]	; (80072c8 <HAL_FLASHEx_Erase+0xd0>)
 8007248:	f023 0304 	bic.w	r3, r3, #4
 800724c:	6113      	str	r3, [r2, #16]
 800724e:	e031      	b.n	80072b4 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007250:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007254:	f7ff ff5e 	bl	8007114 <FLASH_WaitForLastOperation>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d12a      	bne.n	80072b4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	f04f 32ff 	mov.w	r2, #4294967295
 8007264:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	60bb      	str	r3, [r7, #8]
 800726c:	e019      	b.n	80072a2 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800726e:	68b8      	ldr	r0, [r7, #8]
 8007270:	f000 f846 	bl	8007300 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007274:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007278:	f7ff ff4c 	bl	8007114 <FLASH_WaitForLastOperation>
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007280:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <HAL_FLASHEx_Erase+0xd0>)
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	4a10      	ldr	r2, [pc, #64]	; (80072c8 <HAL_FLASHEx_Erase+0xd0>)
 8007286:	f023 0302 	bic.w	r3, r3, #2
 800728a:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	601a      	str	r2, [r3, #0]
            break;
 8007298:	e00c      	b.n	80072b4 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	02da      	lsls	r2, r3, #11
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	4413      	add	r3, r2
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d3dc      	bcc.n	800726e <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80072b4:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <HAL_FLASHEx_Erase+0xcc>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	761a      	strb	r2, [r3, #24]

  return status;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	200019f8 	.word	0x200019f8
 80072c8:	40022000 	.word	0x40022000

080072cc <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80072d0:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <FLASH_MassErase+0x2c>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <FLASH_MassErase+0x30>)
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	4a08      	ldr	r2, [pc, #32]	; (80072fc <FLASH_MassErase+0x30>)
 80072dc:	f043 0304 	orr.w	r3, r3, #4
 80072e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <FLASH_MassErase+0x30>)
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	4a05      	ldr	r2, [pc, #20]	; (80072fc <FLASH_MassErase+0x30>)
 80072e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ec:	6113      	str	r3, [r2, #16]
}
 80072ee:	bf00      	nop
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	200019f8 	.word	0x200019f8
 80072fc:	40022000 	.word	0x40022000

08007300 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007308:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <FLASH_PageErase+0x38>)
 800730a:	2200      	movs	r2, #0
 800730c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800730e:	4b0b      	ldr	r3, [pc, #44]	; (800733c <FLASH_PageErase+0x3c>)
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	4a0a      	ldr	r2, [pc, #40]	; (800733c <FLASH_PageErase+0x3c>)
 8007314:	f043 0302 	orr.w	r3, r3, #2
 8007318:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800731a:	4a08      	ldr	r2, [pc, #32]	; (800733c <FLASH_PageErase+0x3c>)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007320:	4b06      	ldr	r3, [pc, #24]	; (800733c <FLASH_PageErase+0x3c>)
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	4a05      	ldr	r2, [pc, #20]	; (800733c <FLASH_PageErase+0x3c>)
 8007326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800732a:	6113      	str	r3, [r2, #16]
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	200019f8 	.word	0x200019f8
 800733c:	40022000 	.word	0x40022000

08007340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800734e:	e154      	b.n	80075fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	2101      	movs	r1, #1
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	fa01 f303 	lsl.w	r3, r1, r3
 800735c:	4013      	ands	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8146 	beq.w	80075f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f003 0303 	and.w	r3, r3, #3
 8007370:	2b01      	cmp	r3, #1
 8007372:	d005      	beq.n	8007380 <HAL_GPIO_Init+0x40>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d130      	bne.n	80073e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	2203      	movs	r2, #3
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	43db      	mvns	r3, r3
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4013      	ands	r3, r2
 8007396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80073b6:	2201      	movs	r2, #1
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	fa02 f303 	lsl.w	r3, r2, r3
 80073be:	43db      	mvns	r3, r3
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4013      	ands	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	091b      	lsrs	r3, r3, #4
 80073cc:	f003 0201 	and.w	r2, r3, #1
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d017      	beq.n	800741e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	2203      	movs	r2, #3
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43db      	mvns	r3, r3
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4013      	ands	r3, r2
 8007404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d123      	bne.n	8007472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	08da      	lsrs	r2, r3, #3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3208      	adds	r2, #8
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	220f      	movs	r2, #15
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	43db      	mvns	r3, r3
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4013      	ands	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	691a      	ldr	r2, [r3, #16]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	08da      	lsrs	r2, r3, #3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3208      	adds	r2, #8
 800746c:	6939      	ldr	r1, [r7, #16]
 800746e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	2203      	movs	r2, #3
 800747e:	fa02 f303 	lsl.w	r3, r2, r3
 8007482:	43db      	mvns	r3, r3
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4013      	ands	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f003 0203 	and.w	r2, r3, #3
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 80a0 	beq.w	80075f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074b4:	4b58      	ldr	r3, [pc, #352]	; (8007618 <HAL_GPIO_Init+0x2d8>)
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	4a57      	ldr	r2, [pc, #348]	; (8007618 <HAL_GPIO_Init+0x2d8>)
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	6193      	str	r3, [r2, #24]
 80074c0:	4b55      	ldr	r3, [pc, #340]	; (8007618 <HAL_GPIO_Init+0x2d8>)
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80074cc:	4a53      	ldr	r2, [pc, #332]	; (800761c <HAL_GPIO_Init+0x2dc>)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	089b      	lsrs	r3, r3, #2
 80074d2:	3302      	adds	r3, #2
 80074d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	220f      	movs	r2, #15
 80074e4:	fa02 f303 	lsl.w	r3, r2, r3
 80074e8:	43db      	mvns	r3, r3
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	4013      	ands	r3, r2
 80074ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80074f6:	d019      	beq.n	800752c <HAL_GPIO_Init+0x1ec>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a49      	ldr	r2, [pc, #292]	; (8007620 <HAL_GPIO_Init+0x2e0>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d013      	beq.n	8007528 <HAL_GPIO_Init+0x1e8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a48      	ldr	r2, [pc, #288]	; (8007624 <HAL_GPIO_Init+0x2e4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00d      	beq.n	8007524 <HAL_GPIO_Init+0x1e4>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a47      	ldr	r2, [pc, #284]	; (8007628 <HAL_GPIO_Init+0x2e8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d007      	beq.n	8007520 <HAL_GPIO_Init+0x1e0>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a46      	ldr	r2, [pc, #280]	; (800762c <HAL_GPIO_Init+0x2ec>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d101      	bne.n	800751c <HAL_GPIO_Init+0x1dc>
 8007518:	2304      	movs	r3, #4
 800751a:	e008      	b.n	800752e <HAL_GPIO_Init+0x1ee>
 800751c:	2305      	movs	r3, #5
 800751e:	e006      	b.n	800752e <HAL_GPIO_Init+0x1ee>
 8007520:	2303      	movs	r3, #3
 8007522:	e004      	b.n	800752e <HAL_GPIO_Init+0x1ee>
 8007524:	2302      	movs	r3, #2
 8007526:	e002      	b.n	800752e <HAL_GPIO_Init+0x1ee>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <HAL_GPIO_Init+0x1ee>
 800752c:	2300      	movs	r3, #0
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	f002 0203 	and.w	r2, r2, #3
 8007534:	0092      	lsls	r2, r2, #2
 8007536:	4093      	lsls	r3, r2
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800753e:	4937      	ldr	r1, [pc, #220]	; (800761c <HAL_GPIO_Init+0x2dc>)
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	089b      	lsrs	r3, r3, #2
 8007544:	3302      	adds	r3, #2
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800754c:	4b38      	ldr	r3, [pc, #224]	; (8007630 <HAL_GPIO_Init+0x2f0>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	43db      	mvns	r3, r3
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4013      	ands	r3, r2
 800755a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	4313      	orrs	r3, r2
 800756e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007570:	4a2f      	ldr	r2, [pc, #188]	; (8007630 <HAL_GPIO_Init+0x2f0>)
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007576:	4b2e      	ldr	r3, [pc, #184]	; (8007630 <HAL_GPIO_Init+0x2f0>)
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	43db      	mvns	r3, r3
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4013      	ands	r3, r2
 8007584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800759a:	4a25      	ldr	r2, [pc, #148]	; (8007630 <HAL_GPIO_Init+0x2f0>)
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80075a0:	4b23      	ldr	r3, [pc, #140]	; (8007630 <HAL_GPIO_Init+0x2f0>)
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	43db      	mvns	r3, r3
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	4013      	ands	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80075c4:	4a1a      	ldr	r2, [pc, #104]	; (8007630 <HAL_GPIO_Init+0x2f0>)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80075ca:	4b19      	ldr	r3, [pc, #100]	; (8007630 <HAL_GPIO_Init+0x2f0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	43db      	mvns	r3, r3
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4013      	ands	r3, r2
 80075d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80075ee:	4a10      	ldr	r2, [pc, #64]	; (8007630 <HAL_GPIO_Init+0x2f0>)
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	3301      	adds	r3, #1
 80075f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	fa22 f303 	lsr.w	r3, r2, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	f47f aea3 	bne.w	8007350 <HAL_GPIO_Init+0x10>
  }
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	40021000 	.word	0x40021000
 800761c:	40010000 	.word	0x40010000
 8007620:	48000400 	.word	0x48000400
 8007624:	48000800 	.word	0x48000800
 8007628:	48000c00 	.word	0x48000c00
 800762c:	48001000 	.word	0x48001000
 8007630:	40010400 	.word	0x40010400

08007634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	887b      	ldrh	r3, [r7, #2]
 8007646:	4013      	ands	r3, r2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800764c:	2301      	movs	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
 8007650:	e001      	b.n	8007656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	807b      	strh	r3, [r7, #2]
 8007670:	4613      	mov	r3, r2
 8007672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007674:	787b      	ldrb	r3, [r7, #1]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800767a:	887a      	ldrh	r2, [r7, #2]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007680:	e002      	b.n	8007688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007682:	887a      	ldrh	r2, [r7, #2]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e081      	b.n	80077aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fc f99c 	bl	80039f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2224      	movs	r2, #36	; 0x24
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0201 	bic.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80076e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d107      	bne.n	800770e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800770a:	609a      	str	r2, [r3, #8]
 800770c:	e006      	b.n	800771c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800771a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d104      	bne.n	800772e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800772c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800773c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007740:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007750:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691a      	ldr	r2, [r3, #16]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	69d9      	ldr	r1, [r3, #28]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a1a      	ldr	r2, [r3, #32]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0201 	orr.w	r2, r2, #1
 800778a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	d138      	bne.n	800783a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e032      	b.n	800783c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2224      	movs	r2, #36	; 0x24
 80077e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0201 	bic.w	r2, r2, #1
 80077f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007804:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6819      	ldr	r1, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f042 0201 	orr.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	e000      	b.n	800783c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800783a:	2302      	movs	r3, #2
  }
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b20      	cmp	r3, #32
 800785c:	d139      	bne.n	80078d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007868:	2302      	movs	r3, #2
 800786a:	e033      	b.n	80078d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2224      	movs	r2, #36	; 0x24
 8007878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0201 	bic.w	r2, r2, #1
 800788a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800789a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0201 	orr.w	r2, r2, #1
 80078bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	e000      	b.n	80078d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078d2:	2302      	movs	r3, #2
  }
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80078e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e2:	b08b      	sub	sp, #44	; 0x2c
 80078e4:	af06      	add	r7, sp, #24
 80078e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e0c4      	b.n	8007a7c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f00b fa46 	bl	8012d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2203      	movs	r2, #3
 8007910:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f005 fad1 	bl	800cec0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
 8007922:	e040      	b.n	80079a6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	440b      	add	r3, r1
 8007934:	3301      	adds	r3, #1
 8007936:	2201      	movs	r2, #1
 8007938:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	440b      	add	r3, r1
 800794a:	7bfa      	ldrb	r2, [r7, #15]
 800794c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	4613      	mov	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	440b      	add	r3, r1
 800795e:	3303      	adds	r3, #3
 8007960:	2200      	movs	r2, #0
 8007962:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007964:	7bfa      	ldrb	r2, [r7, #15]
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	00db      	lsls	r3, r3, #3
 8007970:	440b      	add	r3, r1
 8007972:	3338      	adds	r3, #56	; 0x38
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007978:	7bfa      	ldrb	r2, [r7, #15]
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	440b      	add	r3, r1
 8007986:	333c      	adds	r3, #60	; 0x3c
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800798c:	7bfa      	ldrb	r2, [r7, #15]
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	440b      	add	r3, r1
 800799a:	3340      	adds	r3, #64	; 0x40
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	3301      	adds	r3, #1
 80079a4:	73fb      	strb	r3, [r7, #15]
 80079a6:	7bfa      	ldrb	r2, [r7, #15]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d3b9      	bcc.n	8007924 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
 80079b4:	e044      	b.n	8007a40 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80079b6:	7bfa      	ldrb	r2, [r7, #15]
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	440b      	add	r3, r1
 80079c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80079cc:	7bfa      	ldrb	r2, [r7, #15]
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	440b      	add	r3, r1
 80079da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80079de:	7bfa      	ldrb	r2, [r7, #15]
 80079e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80079e2:	7bfa      	ldrb	r2, [r7, #15]
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	440b      	add	r3, r1
 80079f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80079f4:	2200      	movs	r2, #0
 80079f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80079f8:	7bfa      	ldrb	r2, [r7, #15]
 80079fa:	6879      	ldr	r1, [r7, #4]
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	440b      	add	r3, r1
 8007a06:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007a0e:	7bfa      	ldrb	r2, [r7, #15]
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	440b      	add	r3, r1
 8007a1c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007a24:	7bfa      	ldrb	r2, [r7, #15]
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	440b      	add	r3, r1
 8007a32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	73fb      	strb	r3, [r7, #15]
 8007a40:	7bfa      	ldrb	r2, [r7, #15]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d3b5      	bcc.n	80079b6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	687e      	ldr	r6, [r7, #4]
 8007a52:	466d      	mov	r5, sp
 8007a54:	f106 0410 	add.w	r4, r6, #16
 8007a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	1d33      	adds	r3, r6, #4
 8007a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a64:	6838      	ldr	r0, [r7, #0]
 8007a66:	f005 fa46 	bl	800cef6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d101      	bne.n	8007a9a <HAL_PCD_Start+0x16>
 8007a96:	2302      	movs	r3, #2
 8007a98:	e016      	b.n	8007ac8 <HAL_PCD_Start+0x44>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f005 f9f3 	bl	800ce92 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8007aac:	2101      	movs	r1, #1
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f00b fc10 	bl	80132d4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f007 fcb2 	bl	800f422 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f007 fcab 	bl	800f438 <USB_ReadInterrupts>
 8007ae2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fab2 	bl	8008058 <PCD_EP_ISR_Handler>

    return;
 8007af4:	e0bd      	b.n	8007c72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d013      	beq.n	8007b28 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b12:	b292      	uxth	r2, r2
 8007b14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f00b f9de 	bl	8012eda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007b1e:	2100      	movs	r1, #0
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f8a9 	bl	8007c78 <HAL_PCD_SetAddress>

    return;
 8007b26:	e0a4      	b.n	8007c72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00c      	beq.n	8007b4c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b44:	b292      	uxth	r2, r2
 8007b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007b4a:	e092      	b.n	8007c72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00c      	beq.n	8007b70 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b68:	b292      	uxth	r2, r2
 8007b6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007b6e:	e080      	b.n	8007c72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d027      	beq.n	8007bca <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0204 	bic.w	r2, r2, #4
 8007b8c:	b292      	uxth	r2, r2
 8007b8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0208 	bic.w	r2, r2, #8
 8007ba4:	b292      	uxth	r2, r2
 8007ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f00b f9ce 	bl	8012f4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bc2:	b292      	uxth	r2, r2
 8007bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007bc8:	e053      	b.n	8007c72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d027      	beq.n	8007c24 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0208 	orr.w	r2, r2, #8
 8007be6:	b292      	uxth	r2, r2
 8007be8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bfe:	b292      	uxth	r2, r2
 8007c00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f042 0204 	orr.w	r2, r2, #4
 8007c16:	b292      	uxth	r2, r2
 8007c18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f00b f97b 	bl	8012f18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007c22:	e026      	b.n	8007c72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00f      	beq.n	8007c4e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c40:	b292      	uxth	r2, r2
 8007c42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f00b f939 	bl	8012ebe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007c4c:	e011      	b.n	8007c72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00c      	beq.n	8007c72 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007c70:	bf00      	nop
  }
}
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_PCD_SetAddress+0x1a>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e013      	b.n	8007cba <HAL_PCD_SetAddress+0x42>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	78fa      	ldrb	r2, [r7, #3]
 8007c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f007 fba5 	bl	800f3fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	4608      	mov	r0, r1
 8007ccc:	4611      	mov	r1, r2
 8007cce:	461a      	mov	r2, r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	70fb      	strb	r3, [r7, #3]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	803b      	strh	r3, [r7, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	da0e      	bge.n	8007d06 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	705a      	strb	r2, [r3, #1]
 8007d04:	e00e      	b.n	8007d24 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	f003 0207 	and.w	r2, r3, #7
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d30:	883a      	ldrh	r2, [r7, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	78ba      	ldrb	r2, [r7, #2]
 8007d3a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d3c:	78bb      	ldrb	r3, [r7, #2]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d102      	bne.n	8007d48 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <HAL_PCD_EP_Open+0x94>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e00e      	b.n	8007d74 <HAL_PCD_EP_Open+0xb2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f005 f8e7 	bl	800cf38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8007d72:	7afb      	ldrb	r3, [r7, #11]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	da0e      	bge.n	8007dae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	4413      	add	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	705a      	strb	r2, [r3, #1]
 8007dac:	e00e      	b.n	8007dcc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	f003 0207 	and.w	r2, r3, #7
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <HAL_PCD_EP_Close+0x6a>
 8007de2:	2302      	movs	r3, #2
 8007de4:	e00e      	b.n	8007e04 <HAL_PCD_EP_Close+0x88>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68f9      	ldr	r1, [r7, #12]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f005 fc63 	bl	800d6c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	f003 0207 	and.w	r2, r3, #7
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	4413      	add	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2200      	movs	r2, #0
 8007e44:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	f003 0307 	and.w	r3, r3, #7
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6979      	ldr	r1, [r7, #20]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f005 fe1b 	bl	800da9a <USB_EPStartXfer>

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007e7a:	78fb      	ldrb	r3, [r7, #3]
 8007e7c:	f003 0207 	and.w	r2, r3, #7
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	440b      	add	r3, r1
 8007e8c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007e90:	681b      	ldr	r3, [r3, #0]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b086      	sub	sp, #24
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	00db      	lsls	r3, r3, #3
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6979      	ldr	r1, [r7, #20]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f005 fdcc 	bl	800da9a <USB_EPStartXfer>

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	f003 0207 	and.w	r2, r3, #7
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d901      	bls.n	8007f2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e03e      	b.n	8007fa8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	da0e      	bge.n	8007f50 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	4413      	add	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	705a      	strb	r2, [r3, #1]
 8007f4e:	e00c      	b.n	8007f6a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007f50:	78fa      	ldrb	r2, [r7, #3]
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	00db      	lsls	r3, r3, #3
 8007f5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	4413      	add	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	f003 0307 	and.w	r3, r3, #7
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d101      	bne.n	8007f8a <HAL_PCD_EP_SetStall+0x7e>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e00e      	b.n	8007fa8 <HAL_PCD_EP_SetStall+0x9c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68f9      	ldr	r1, [r7, #12]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f007 f92f 	bl	800f1fc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	f003 020f 	and.w	r2, r3, #15
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d901      	bls.n	8007fce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e040      	b.n	8008050 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da0e      	bge.n	8007ff4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	00db      	lsls	r3, r3, #3
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	4413      	add	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	705a      	strb	r2, [r3, #1]
 8007ff2:	e00e      	b.n	8008012 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	f003 0207 	and.w	r2, r3, #7
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	4413      	add	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	b2da      	uxtb	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800802a:	2b01      	cmp	r3, #1
 800802c:	d101      	bne.n	8008032 <HAL_PCD_EP_ClrStall+0x82>
 800802e:	2302      	movs	r3, #2
 8008030:	e00e      	b.n	8008050 <HAL_PCD_EP_ClrStall+0xa0>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	4618      	mov	r0, r3
 8008042:	f007 f92c 	bl	800f29e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b096      	sub	sp, #88	; 0x58
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008060:	e3bf      	b.n	80087e2 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800806a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800806e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008072:	b2db      	uxtb	r3, r3
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800807c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008080:	2b00      	cmp	r3, #0
 8008082:	f040 8179 	bne.w	8008378 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008086:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b00      	cmp	r3, #0
 8008090:	d152      	bne.n	8008138 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800809e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a2:	81fb      	strh	r3, [r7, #14]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	89fb      	ldrh	r3, [r7, #14]
 80080aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3328      	adds	r3, #40	; 0x28
 80080ba:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	461a      	mov	r2, r3
 80080c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	00db      	lsls	r3, r3, #3
 80080ce:	4413      	add	r3, r2
 80080d0:	3302      	adds	r3, #2
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80080e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80080e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ea:	695a      	ldr	r2, [r3, #20]
 80080ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	441a      	add	r2, r3
 80080f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80080f6:	2100      	movs	r1, #0
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f00a fec6 	bl	8012e8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 836b 	beq.w	80087e2 <PCD_EP_ISR_Handler+0x78a>
 800810c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b00      	cmp	r3, #0
 8008112:	f040 8366 	bne.w	80087e2 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008122:	b2da      	uxtb	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	b292      	uxth	r2, r2
 800812a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008136:	e354      	b.n	80087e2 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800813e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800814a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800814e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008152:	2b00      	cmp	r3, #0
 8008154:	d034      	beq.n	80081c0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800815e:	b29b      	uxth	r3, r3
 8008160:	461a      	mov	r2, r3
 8008162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	4413      	add	r3, r2
 800816a:	3306      	adds	r3, #6
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6812      	ldr	r2, [r2, #0]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800817e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008180:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800818c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800818e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008192:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008194:	b29b      	uxth	r3, r3
 8008196:	f007 f9a5 	bl	800f4e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80081a6:	4013      	ands	r3, r2
 80081a8:	823b      	strh	r3, [r7, #16]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	8a3a      	ldrh	r2, [r7, #16]
 80081b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081b4:	b292      	uxth	r2, r2
 80081b6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f00a fe39 	bl	8012e30 <HAL_PCD_SetupStageCallback>
 80081be:	e310      	b.n	80087e2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80081c0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f280 830c 	bge.w	80087e2 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80081d6:	4013      	ands	r3, r2
 80081d8:	83fb      	strh	r3, [r7, #30]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	8bfa      	ldrh	r2, [r7, #30]
 80081e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081e4:	b292      	uxth	r2, r2
 80081e6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	461a      	mov	r2, r3
 80081f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	00db      	lsls	r3, r3, #3
 80081fa:	4413      	add	r3, r2
 80081fc:	3306      	adds	r3, #6
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6812      	ldr	r2, [r2, #0]
 8008204:	4413      	add	r3, r2
 8008206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008212:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d019      	beq.n	8008250 <PCD_EP_ISR_Handler+0x1f8>
 800821c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d015      	beq.n	8008250 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6818      	ldr	r0, [r3, #0]
 8008228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800822a:	6959      	ldr	r1, [r3, #20]
 800822c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800822e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008232:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008234:	b29b      	uxth	r3, r3
 8008236:	f007 f955 	bl	800f4e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800823a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800823c:	695a      	ldr	r2, [r3, #20]
 800823e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	441a      	add	r2, r3
 8008244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008246:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008248:	2100      	movs	r1, #0
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f00a fe02 	bl	8012e54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800825a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800825e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008262:	2b00      	cmp	r3, #0
 8008264:	f040 82bd 	bne.w	80087e2 <PCD_EP_ISR_Handler+0x78a>
 8008268:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800826c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008270:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008274:	f000 82b5 	beq.w	80087e2 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	61bb      	str	r3, [r7, #24]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008286:	b29b      	uxth	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	4413      	add	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	801a      	strh	r2, [r3, #0]
 80082a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b3e      	cmp	r3, #62	; 0x3e
 80082ae:	d91d      	bls.n	80082ec <PCD_EP_ISR_Handler+0x294>
 80082b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	095b      	lsrs	r3, r3, #5
 80082b6:	647b      	str	r3, [r7, #68]	; 0x44
 80082b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	f003 031f 	and.w	r3, r3, #31
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d102      	bne.n	80082ca <PCD_EP_ISR_Handler+0x272>
 80082c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082c6:	3b01      	subs	r3, #1
 80082c8:	647b      	str	r3, [r7, #68]	; 0x44
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	029b      	lsls	r3, r3, #10
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	4313      	orrs	r3, r2
 80082da:	b29b      	uxth	r3, r3
 80082dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	801a      	strh	r2, [r3, #0]
 80082ea:	e026      	b.n	800833a <PCD_EP_ISR_Handler+0x2e2>
 80082ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <PCD_EP_ISR_Handler+0x2b2>
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008302:	b29a      	uxth	r2, r3
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	801a      	strh	r2, [r3, #0]
 8008308:	e017      	b.n	800833a <PCD_EP_ISR_Handler+0x2e2>
 800830a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	085b      	lsrs	r3, r3, #1
 8008310:	647b      	str	r3, [r7, #68]	; 0x44
 8008312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <PCD_EP_ISR_Handler+0x2cc>
 800831e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008320:	3301      	adds	r3, #1
 8008322:	647b      	str	r3, [r7, #68]	; 0x44
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29a      	uxth	r2, r3
 800832a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800832c:	b29b      	uxth	r3, r3
 800832e:	029b      	lsls	r3, r3, #10
 8008330:	b29b      	uxth	r3, r3
 8008332:	4313      	orrs	r3, r2
 8008334:	b29a      	uxth	r2, r3
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	b29b      	uxth	r3, r3
 8008342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834a:	827b      	strh	r3, [r7, #18]
 800834c:	8a7b      	ldrh	r3, [r7, #18]
 800834e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008352:	827b      	strh	r3, [r7, #18]
 8008354:	8a7b      	ldrh	r3, [r7, #18]
 8008356:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800835a:	827b      	strh	r3, [r7, #18]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	8a7b      	ldrh	r3, [r7, #18]
 8008362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800836a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008372:	b29b      	uxth	r3, r3
 8008374:	8013      	strh	r3, [r2, #0]
 8008376:	e234      	b.n	80087e2 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800838c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8008390:	2b00      	cmp	r3, #0
 8008392:	f280 80fc 	bge.w	800858e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80083ac:	4013      	ands	r3, r2
 80083ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80083c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083c8:	b292      	uxth	r2, r2
 80083ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80083cc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	4413      	add	r3, r2
 80083e0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80083e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083e4:	7b1b      	ldrb	r3, [r3, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d125      	bne.n	8008436 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	461a      	mov	r2, r3
 80083f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	4413      	add	r3, r2
 80083fe:	3306      	adds	r3, #6
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6812      	ldr	r2, [r2, #0]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008412:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8008416:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 8092 	beq.w	8008544 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008426:	6959      	ldr	r1, [r3, #20]
 8008428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800842a:	88da      	ldrh	r2, [r3, #6]
 800842c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008430:	f007 f858 	bl	800f4e4 <USB_ReadPMA>
 8008434:	e086      	b.n	8008544 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008438:	78db      	ldrb	r3, [r3, #3]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d10a      	bne.n	8008454 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800843e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008442:	461a      	mov	r2, r3
 8008444:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f9d9 	bl	80087fe <HAL_PCD_EP_DB_Receive>
 800844c:	4603      	mov	r3, r0
 800844e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8008452:	e077      	b.n	8008544 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29b      	uxth	r3, r3
 8008466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	441a      	add	r2, r3
 8008480:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800848c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008490:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008494:	b29b      	uxth	r3, r3
 8008496:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
 800849e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d024      	beq.n	80084fc <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	461a      	mov	r2, r3
 80084be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	4413      	add	r3, r2
 80084c6:	3302      	adds	r3, #2
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	6812      	ldr	r2, [r2, #0]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80084de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d02e      	beq.n	8008544 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6818      	ldr	r0, [r3, #0]
 80084ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084ec:	6959      	ldr	r1, [r3, #20]
 80084ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084f0:	891a      	ldrh	r2, [r3, #8]
 80084f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80084f6:	f006 fff5 	bl	800f4e4 <USB_ReadPMA>
 80084fa:	e023      	b.n	8008544 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008504:	b29b      	uxth	r3, r3
 8008506:	461a      	mov	r2, r3
 8008508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	4413      	add	r3, r2
 8008510:	3306      	adds	r3, #6
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008524:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008528:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008536:	6959      	ldr	r1, [r3, #20]
 8008538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800853a:	895a      	ldrh	r2, [r3, #10]
 800853c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008540:	f006 ffd0 	bl	800f4e4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008546:	69da      	ldr	r2, [r3, #28]
 8008548:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800854c:	441a      	add	r2, r3
 800854e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008550:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008554:	695a      	ldr	r2, [r3, #20]
 8008556:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800855a:	441a      	add	r2, r3
 800855c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800855e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <PCD_EP_ISR_Handler+0x51c>
 8008568:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800856c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	429a      	cmp	r2, r3
 8008572:	d206      	bcs.n	8008582 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f00a fc6a 	bl	8012e54 <HAL_PCD_DataOutStageCallback>
 8008580:	e005      	b.n	800858e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008588:	4618      	mov	r0, r3
 800858a:	f005 fa86 	bl	800da9a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800858e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 8123 	beq.w	80087e2 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800859c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80085a0:	1c5a      	adds	r2, r3, #1
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	461a      	mov	r2, r3
 80085b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80085c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	441a      	add	r2, r3
 80085dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80085e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80085ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085ee:	78db      	ldrb	r3, [r3, #3]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	f040 80a2 	bne.w	800873a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80085f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085f8:	2200      	movs	r2, #0
 80085fa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80085fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085fe:	7b1b      	ldrb	r3, [r3, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 8093 	beq.w	800872c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008606:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800860a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860e:	2b00      	cmp	r3, #0
 8008610:	d046      	beq.n	80086a0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d126      	bne.n	8008668 <PCD_EP_ISR_Handler+0x610>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008628:	b29b      	uxth	r3, r3
 800862a:	461a      	mov	r2, r3
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	4413      	add	r3, r2
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
 8008632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	011a      	lsls	r2, r3, #4
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	4413      	add	r3, r2
 800863c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008640:	623b      	str	r3, [r7, #32]
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	b29b      	uxth	r3, r3
 8008648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800864c:	b29a      	uxth	r2, r3
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	801a      	strh	r2, [r3, #0]
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	b29b      	uxth	r3, r3
 8008658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800865c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008660:	b29a      	uxth	r2, r3
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	801a      	strh	r2, [r3, #0]
 8008666:	e061      	b.n	800872c <PCD_EP_ISR_Handler+0x6d4>
 8008668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800866a:	785b      	ldrb	r3, [r3, #1]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d15d      	bne.n	800872c <PCD_EP_ISR_Handler+0x6d4>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800867e:	b29b      	uxth	r3, r3
 8008680:	461a      	mov	r2, r3
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	4413      	add	r3, r2
 8008686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	011a      	lsls	r2, r3, #4
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	4413      	add	r3, r2
 8008692:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008696:	62bb      	str	r3, [r7, #40]	; 0x28
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	2200      	movs	r2, #0
 800869c:	801a      	strh	r2, [r3, #0]
 800869e:	e045      	b.n	800872c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086a8:	785b      	ldrb	r3, [r3, #1]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d126      	bne.n	80086fc <PCD_EP_ISR_Handler+0x6a4>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	637b      	str	r3, [r7, #52]	; 0x34
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086bc:	b29b      	uxth	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c2:	4413      	add	r3, r2
 80086c4:	637b      	str	r3, [r7, #52]	; 0x34
 80086c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	011a      	lsls	r2, r3, #4
 80086cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ce:	4413      	add	r3, r2
 80086d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086d4:	633b      	str	r3, [r7, #48]	; 0x30
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	801a      	strh	r2, [r3, #0]
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	801a      	strh	r2, [r3, #0]
 80086fa:	e017      	b.n	800872c <PCD_EP_ISR_Handler+0x6d4>
 80086fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086fe:	785b      	ldrb	r3, [r3, #1]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d113      	bne.n	800872c <PCD_EP_ISR_Handler+0x6d4>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800870c:	b29b      	uxth	r3, r3
 800870e:	461a      	mov	r2, r3
 8008710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008712:	4413      	add	r3, r2
 8008714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	011a      	lsls	r2, r3, #4
 800871c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871e:	4413      	add	r3, r2
 8008720:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008724:	63bb      	str	r3, [r7, #56]	; 0x38
 8008726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008728:	2200      	movs	r2, #0
 800872a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800872c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f00a fba9 	bl	8012e8a <HAL_PCD_DataInStageCallback>
 8008738:	e053      	b.n	80087e2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800873a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800873e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008742:	2b00      	cmp	r3, #0
 8008744:	d146      	bne.n	80087d4 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800874e:	b29b      	uxth	r3, r3
 8008750:	461a      	mov	r2, r3
 8008752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	4413      	add	r3, r2
 800875a:	3302      	adds	r3, #2
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6812      	ldr	r2, [r2, #0]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800876e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8008772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008774:	699a      	ldr	r2, [r3, #24]
 8008776:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800877a:	429a      	cmp	r2, r3
 800877c:	d907      	bls.n	800878e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800877e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008780:	699a      	ldr	r2, [r3, #24]
 8008782:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008786:	1ad2      	subs	r2, r2, r3
 8008788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800878a:	619a      	str	r2, [r3, #24]
 800878c:	e002      	b.n	8008794 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800878e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008790:	2200      	movs	r2, #0
 8008792:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800879c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f00a fb71 	bl	8012e8a <HAL_PCD_DataInStageCallback>
 80087a8:	e01b      	b.n	80087e2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80087aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ac:	695a      	ldr	r2, [r3, #20]
 80087ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80087b2:	441a      	add	r2, r3
 80087b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087b6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80087b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ba:	69da      	ldr	r2, [r3, #28]
 80087bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80087c0:	441a      	add	r2, r3
 80087c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087cc:	4618      	mov	r0, r3
 80087ce:	f005 f964 	bl	800da9a <USB_EPStartXfer>
 80087d2:	e006      	b.n	80087e2 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80087d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80087d8:	461a      	mov	r2, r3
 80087da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f91b 	bl	8008a18 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	b21b      	sxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f6ff ac37 	blt.w	8008062 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3758      	adds	r7, #88	; 0x58
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b088      	sub	sp, #32
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	4613      	mov	r3, r2
 800880a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800880c:	88fb      	ldrh	r3, [r7, #6]
 800880e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d07e      	beq.n	8008914 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800881e:	b29b      	uxth	r3, r3
 8008820:	461a      	mov	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	4413      	add	r3, r2
 800882a:	3302      	adds	r3, #2
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	6812      	ldr	r2, [r2, #0]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800883e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	699a      	ldr	r2, [r3, #24]
 8008844:	8b7b      	ldrh	r3, [r7, #26]
 8008846:	429a      	cmp	r2, r3
 8008848:	d306      	bcc.n	8008858 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	8b7b      	ldrh	r3, [r7, #26]
 8008850:	1ad2      	subs	r2, r2, r3
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	619a      	str	r2, [r3, #24]
 8008856:	e002      	b.n	800885e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2200      	movs	r2, #0
 800885c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d123      	bne.n	80088ae <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	b29b      	uxth	r3, r3
 8008878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800887c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008880:	833b      	strh	r3, [r7, #24]
 8008882:	8b3b      	ldrh	r3, [r7, #24]
 8008884:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008888:	833b      	strh	r3, [r7, #24]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	441a      	add	r2, r3
 8008898:	8b3b      	ldrh	r3, [r7, #24]
 800889a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800889e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80088ae:	88fb      	ldrh	r3, [r7, #6]
 80088b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01f      	beq.n	80088f8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d2:	82fb      	strh	r3, [r7, #22]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	461a      	mov	r2, r3
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	441a      	add	r2, r3
 80088e2:	8afb      	ldrh	r3, [r7, #22]
 80088e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80088f8:	8b7b      	ldrh	r3, [r7, #26]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 8087 	beq.w	8008a0e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6959      	ldr	r1, [r3, #20]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	891a      	ldrh	r2, [r3, #8]
 800890c:	8b7b      	ldrh	r3, [r7, #26]
 800890e:	f006 fde9 	bl	800f4e4 <USB_ReadPMA>
 8008912:	e07c      	b.n	8008a0e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800891c:	b29b      	uxth	r3, r3
 800891e:	461a      	mov	r2, r3
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	4413      	add	r3, r2
 8008928:	3306      	adds	r3, #6
 800892a:	005b      	lsls	r3, r3, #1
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	6812      	ldr	r2, [r2, #0]
 8008930:	4413      	add	r3, r2
 8008932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800893c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	699a      	ldr	r2, [r3, #24]
 8008942:	8b7b      	ldrh	r3, [r7, #26]
 8008944:	429a      	cmp	r2, r3
 8008946:	d306      	bcc.n	8008956 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	699a      	ldr	r2, [r3, #24]
 800894c:	8b7b      	ldrh	r3, [r7, #26]
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	619a      	str	r2, [r3, #24]
 8008954:	e002      	b.n	800895c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2200      	movs	r2, #0
 800895a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d123      	bne.n	80089ac <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800897a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800897e:	83fb      	strh	r3, [r7, #30]
 8008980:	8bfb      	ldrh	r3, [r7, #30]
 8008982:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008986:	83fb      	strh	r3, [r7, #30]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	441a      	add	r2, r3
 8008996:	8bfb      	ldrh	r3, [r7, #30]
 8008998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800899c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80089ac:	88fb      	ldrh	r3, [r7, #6]
 80089ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d11f      	bne.n	80089f6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d0:	83bb      	strh	r3, [r7, #28]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	441a      	add	r2, r3
 80089e0:	8bbb      	ldrh	r3, [r7, #28]
 80089e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80089f6:	8b7b      	ldrh	r3, [r7, #26]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d008      	beq.n	8008a0e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	6959      	ldr	r1, [r3, #20]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	895a      	ldrh	r2, [r3, #10]
 8008a08:	8b7b      	ldrh	r3, [r7, #26]
 8008a0a:	f006 fd6b 	bl	800f4e4 <USB_ReadPMA>
    }
  }

  return count;
 8008a0e:	8b7b      	ldrh	r3, [r7, #26]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3720      	adds	r7, #32
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b0a4      	sub	sp, #144	; 0x90
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 81dd 	beq.w	8008dec <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	4413      	add	r3, r2
 8008a46:	3302      	adds	r3, #2
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	6812      	ldr	r2, [r2, #0]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a5a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d907      	bls.n	8008a7a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	699a      	ldr	r2, [r3, #24]
 8008a6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008a72:	1ad2      	subs	r2, r2, r3
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	619a      	str	r2, [r3, #24]
 8008a78:	e002      	b.n	8008a80 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f040 80b9 	bne.w	8008bfc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	785b      	ldrb	r3, [r3, #1]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d126      	bne.n	8008ae0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	4413      	add	r3, r2
 8008aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	011a      	lsls	r2, r3, #4
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	801a      	strh	r2, [r3, #0]
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008adc:	801a      	strh	r2, [r3, #0]
 8008ade:	e01a      	b.n	8008b16 <HAL_PCD_EP_DB_Transmit+0xfe>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	785b      	ldrb	r3, [r3, #1]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d116      	bne.n	8008b16 <HAL_PCD_EP_DB_Transmit+0xfe>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	637b      	str	r3, [r7, #52]	; 0x34
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	461a      	mov	r2, r3
 8008afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afc:	4413      	add	r3, r2
 8008afe:	637b      	str	r3, [r7, #52]	; 0x34
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	011a      	lsls	r2, r3, #4
 8008b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b08:	4413      	add	r3, r2
 8008b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	2200      	movs	r2, #0
 8008b14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	785b      	ldrb	r3, [r3, #1]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d126      	bne.n	8008b72 <HAL_PCD_EP_DB_Transmit+0x15a>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	61fb      	str	r3, [r7, #28]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	461a      	mov	r2, r3
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	4413      	add	r3, r2
 8008b3a:	61fb      	str	r3, [r7, #28]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	011a      	lsls	r2, r3, #4
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4413      	add	r3, r2
 8008b46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b4a:	61bb      	str	r3, [r7, #24]
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	801a      	strh	r2, [r3, #0]
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	801a      	strh	r2, [r3, #0]
 8008b70:	e017      	b.n	8008ba2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	785b      	ldrb	r3, [r3, #1]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d113      	bne.n	8008ba2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	4413      	add	r3, r2
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	011a      	lsls	r2, r3, #4
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	4413      	add	r3, r2
 8008b96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b9a:	623b      	str	r3, [r7, #32]
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f00a f96e 	bl	8012e8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 82fc 	beq.w	80091b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd4:	82fb      	strh	r3, [r7, #22]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	441a      	add	r2, r3
 8008be4:	8afb      	ldrh	r3, [r7, #22]
 8008be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	8013      	strh	r3, [r2, #0]
 8008bfa:	e2da      	b.n	80091b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008bfc:	88fb      	ldrh	r3, [r7, #6]
 8008bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d021      	beq.n	8008c4a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	441a      	add	r2, r3
 8008c32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	f040 82ae 	bne.w	80091b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	695a      	ldr	r2, [r3, #20]
 8008c5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008c5e:	441a      	add	r2, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	69da      	ldr	r2, [r3, #28]
 8008c68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008c6c:	441a      	add	r2, r3
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6a1a      	ldr	r2, [r3, #32]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d30b      	bcc.n	8008c96 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	6a1a      	ldr	r2, [r3, #32]
 8008c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c8e:	1ad2      	subs	r2, r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	621a      	str	r2, [r3, #32]
 8008c94:	e017      	b.n	8008cc6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d108      	bne.n	8008cb0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8008c9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008cae:	e00a      	b.n	8008cc6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	785b      	ldrb	r3, [r3, #1]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d165      	bne.n	8008d9a <HAL_PCD_EP_DB_Transmit+0x382>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	461a      	mov	r2, r3
 8008ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce2:	4413      	add	r3, r2
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	011a      	lsls	r2, r3, #4
 8008cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cee:	4413      	add	r3, r2
 8008cf0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d0a:	2b3e      	cmp	r3, #62	; 0x3e
 8008d0c:	d91d      	bls.n	8008d4a <HAL_PCD_EP_DB_Transmit+0x332>
 8008d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d12:	095b      	lsrs	r3, r3, #5
 8008d14:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d1a:	f003 031f 	and.w	r3, r3, #31
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d102      	bne.n	8008d28 <HAL_PCD_EP_DB_Transmit+0x310>
 8008d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d24:	3b01      	subs	r3, #1
 8008d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	029b      	lsls	r3, r3, #10
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	4313      	orrs	r3, r2
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d46:	801a      	strh	r2, [r3, #0]
 8008d48:	e044      	b.n	8008dd4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8008d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <HAL_PCD_EP_DB_Transmit+0x350>
 8008d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	801a      	strh	r2, [r3, #0]
 8008d66:	e035      	b.n	8008dd4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8008d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d6c:	085b      	lsrs	r3, r3, #1
 8008d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <HAL_PCD_EP_DB_Transmit+0x36a>
 8008d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d7e:	3301      	adds	r3, #1
 8008d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	029b      	lsls	r3, r3, #10
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	4313      	orrs	r3, r2
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d96:	801a      	strh	r2, [r3, #0]
 8008d98:	e01c      	b.n	8008dd4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d118      	bne.n	8008dd4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	647b      	str	r3, [r7, #68]	; 0x44
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db6:	4413      	add	r3, r2
 8008db8:	647b      	str	r3, [r7, #68]	; 0x44
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	011a      	lsls	r2, r3, #4
 8008dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8008dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6818      	ldr	r0, [r3, #0]
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	6959      	ldr	r1, [r3, #20]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	891a      	ldrh	r2, [r3, #8]
 8008de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	f006 fb37 	bl	800f458 <USB_WritePMA>
 8008dea:	e1e2      	b.n	80091b2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	461a      	mov	r2, r3
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	4413      	add	r3, r2
 8008e00:	3306      	adds	r3, #6
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	6812      	ldr	r2, [r2, #0]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e0e:	881b      	ldrh	r3, [r3, #0]
 8008e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e14:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	699a      	ldr	r2, [r3, #24]
 8008e1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d307      	bcc.n	8008e34 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	699a      	ldr	r2, [r3, #24]
 8008e28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008e2c:	1ad2      	subs	r2, r2, r3
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	619a      	str	r2, [r3, #24]
 8008e32:	e002      	b.n	8008e3a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2200      	movs	r2, #0
 8008e38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f040 80c0 	bne.w	8008fc4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	785b      	ldrb	r3, [r3, #1]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d126      	bne.n	8008e9a <HAL_PCD_EP_DB_Transmit+0x482>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e60:	4413      	add	r3, r2
 8008e62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	011a      	lsls	r2, r3, #4
 8008e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e72:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e82:	801a      	strh	r2, [r3, #0]
 8008e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e96:	801a      	strh	r2, [r3, #0]
 8008e98:	e01a      	b.n	8008ed0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	785b      	ldrb	r3, [r3, #1]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d116      	bne.n	8008ed0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	667b      	str	r3, [r7, #100]	; 0x64
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eb6:	4413      	add	r3, r2
 8008eb8:	667b      	str	r3, [r7, #100]	; 0x64
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	011a      	lsls	r2, r3, #4
 8008ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8008eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ecc:	2200      	movs	r2, #0
 8008ece:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	677b      	str	r3, [r7, #116]	; 0x74
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	785b      	ldrb	r3, [r3, #1]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d12b      	bne.n	8008f36 <HAL_PCD_EP_DB_Transmit+0x51e>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef2:	4413      	add	r3, r2
 8008ef4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	011a      	lsls	r2, r3, #4
 8008efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008efe:	4413      	add	r3, r2
 8008f00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f1a:	801a      	strh	r2, [r3, #0]
 8008f1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f32:	801a      	strh	r2, [r3, #0]
 8008f34:	e017      	b.n	8008f66 <HAL_PCD_EP_DB_Transmit+0x54e>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	785b      	ldrb	r3, [r3, #1]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d113      	bne.n	8008f66 <HAL_PCD_EP_DB_Transmit+0x54e>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f4c:	4413      	add	r3, r2
 8008f4e:	677b      	str	r3, [r7, #116]	; 0x74
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	011a      	lsls	r2, r3, #4
 8008f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f58:	4413      	add	r3, r2
 8008f5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f5e:	673b      	str	r3, [r7, #112]	; 0x70
 8008f60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f62:	2200      	movs	r2, #0
 8008f64:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f009 ff8c 	bl	8012e8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008f72:	88fb      	ldrh	r3, [r7, #6]
 8008f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f040 811a 	bne.w	80091b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f98:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	441a      	add	r2, r3
 8008faa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8008fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	8013      	strh	r3, [r2, #0]
 8008fc2:	e0f6      	b.n	80091b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d121      	bne.n	8009012 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	441a      	add	r2, r3
 8008ffa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800900a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800900e:	b29b      	uxth	r3, r3
 8009010:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009018:	2b01      	cmp	r3, #1
 800901a:	f040 80ca 	bne.w	80091b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	695a      	ldr	r2, [r3, #20]
 8009022:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009026:	441a      	add	r2, r3
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	69da      	ldr	r2, [r3, #28]
 8009030:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009034:	441a      	add	r2, r3
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	6a1a      	ldr	r2, [r3, #32]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	429a      	cmp	r2, r3
 8009044:	d30b      	bcc.n	800905e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	6a1a      	ldr	r2, [r3, #32]
 8009052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009056:	1ad2      	subs	r2, r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	621a      	str	r2, [r3, #32]
 800905c:	e017      	b.n	800908e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d108      	bne.n	8009078 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8009066:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800906a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009076:	e00a      	b.n	800908e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2200      	movs	r2, #0
 8009084:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	657b      	str	r3, [r7, #84]	; 0x54
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	785b      	ldrb	r3, [r3, #1]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d165      	bne.n	8009168 <HAL_PCD_EP_DB_Transmit+0x750>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	461a      	mov	r2, r3
 80090ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090b0:	4413      	add	r3, r2
 80090b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	011a      	lsls	r2, r3, #4
 80090ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090bc:	4413      	add	r3, r2
 80090be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80090c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090d2:	801a      	strh	r2, [r3, #0]
 80090d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090d8:	2b3e      	cmp	r3, #62	; 0x3e
 80090da:	d91d      	bls.n	8009118 <HAL_PCD_EP_DB_Transmit+0x700>
 80090dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090e0:	095b      	lsrs	r3, r3, #5
 80090e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80090e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090e8:	f003 031f 	and.w	r3, r3, #31
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d102      	bne.n	80090f6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80090f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090f2:	3b01      	subs	r3, #1
 80090f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80090f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090fe:	b29b      	uxth	r3, r3
 8009100:	029b      	lsls	r3, r3, #10
 8009102:	b29b      	uxth	r3, r3
 8009104:	4313      	orrs	r3, r2
 8009106:	b29b      	uxth	r3, r3
 8009108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800910c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009110:	b29a      	uxth	r2, r3
 8009112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009114:	801a      	strh	r2, [r3, #0]
 8009116:	e041      	b.n	800919c <HAL_PCD_EP_DB_Transmit+0x784>
 8009118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10a      	bne.n	8009136 <HAL_PCD_EP_DB_Transmit+0x71e>
 8009120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800912a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800912e:	b29a      	uxth	r2, r3
 8009130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009132:	801a      	strh	r2, [r3, #0]
 8009134:	e032      	b.n	800919c <HAL_PCD_EP_DB_Transmit+0x784>
 8009136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800913a:	085b      	lsrs	r3, r3, #1
 800913c:	66bb      	str	r3, [r7, #104]	; 0x68
 800913e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <HAL_PCD_EP_DB_Transmit+0x738>
 800914a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800914c:	3301      	adds	r3, #1
 800914e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29a      	uxth	r2, r3
 8009156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009158:	b29b      	uxth	r3, r3
 800915a:	029b      	lsls	r3, r3, #10
 800915c:	b29b      	uxth	r3, r3
 800915e:	4313      	orrs	r3, r2
 8009160:	b29a      	uxth	r2, r3
 8009162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009164:	801a      	strh	r2, [r3, #0]
 8009166:	e019      	b.n	800919c <HAL_PCD_EP_DB_Transmit+0x784>
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	785b      	ldrb	r3, [r3, #1]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d115      	bne.n	800919c <HAL_PCD_EP_DB_Transmit+0x784>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009178:	b29b      	uxth	r3, r3
 800917a:	461a      	mov	r2, r3
 800917c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800917e:	4413      	add	r3, r2
 8009180:	657b      	str	r3, [r7, #84]	; 0x54
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	011a      	lsls	r2, r3, #4
 8009188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800918a:	4413      	add	r3, r2
 800918c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009190:	653b      	str	r3, [r7, #80]	; 0x50
 8009192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009196:	b29a      	uxth	r2, r3
 8009198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800919a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6818      	ldr	r0, [r3, #0]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	6959      	ldr	r1, [r3, #20]
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	895a      	ldrh	r2, [r3, #10]
 80091a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	f006 f953 	bl	800f458 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	461a      	mov	r2, r3
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091cc:	82bb      	strh	r3, [r7, #20]
 80091ce:	8abb      	ldrh	r3, [r7, #20]
 80091d0:	f083 0310 	eor.w	r3, r3, #16
 80091d4:	82bb      	strh	r3, [r7, #20]
 80091d6:	8abb      	ldrh	r3, [r7, #20]
 80091d8:	f083 0320 	eor.w	r3, r3, #32
 80091dc:	82bb      	strh	r3, [r7, #20]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	441a      	add	r2, r3
 80091ec:	8abb      	ldrh	r3, [r7, #20]
 80091ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091fe:	b29b      	uxth	r3, r3
 8009200:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3790      	adds	r7, #144	; 0x90
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	607b      	str	r3, [r7, #4]
 8009216:	460b      	mov	r3, r1
 8009218:	817b      	strh	r3, [r7, #10]
 800921a:	4613      	mov	r3, r2
 800921c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800921e:	897b      	ldrh	r3, [r7, #10]
 8009220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009224:	b29b      	uxth	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00b      	beq.n	8009242 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800922a:	897b      	ldrh	r3, [r7, #10]
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	1c5a      	adds	r2, r3, #1
 8009232:	4613      	mov	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	00db      	lsls	r3, r3, #3
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e009      	b.n	8009256 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009242:	897a      	ldrh	r2, [r7, #10]
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009256:	893b      	ldrh	r3, [r7, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d107      	bne.n	800926c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	2200      	movs	r2, #0
 8009260:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	b29a      	uxth	r2, r3
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	80da      	strh	r2, [r3, #6]
 800926a:	e00b      	b.n	8009284 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2201      	movs	r2, #1
 8009270:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	b29a      	uxth	r2, r3
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	0c1b      	lsrs	r3, r3, #16
 800927e:	b29a      	uxth	r2, r3
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
	...

08009294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800929a:	af00      	add	r7, sp, #0
 800929c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80092a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d102      	bne.n	80092ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	f001 b823 	b.w	800a300 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 817d 	beq.w	80095ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80092d0:	4bbc      	ldr	r3, [pc, #752]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f003 030c 	and.w	r3, r3, #12
 80092d8:	2b04      	cmp	r3, #4
 80092da:	d00c      	beq.n	80092f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80092dc:	4bb9      	ldr	r3, [pc, #740]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f003 030c 	and.w	r3, r3, #12
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d15c      	bne.n	80093a2 <HAL_RCC_OscConfig+0x10e>
 80092e8:	4bb6      	ldr	r3, [pc, #728]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092f4:	d155      	bne.n	80093a2 <HAL_RCC_OscConfig+0x10e>
 80092f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80092fa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8009302:	fa93 f3a3 	rbit	r3, r3
 8009306:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800930a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800930e:	fab3 f383 	clz	r3, r3
 8009312:	b2db      	uxtb	r3, r3
 8009314:	095b      	lsrs	r3, r3, #5
 8009316:	b2db      	uxtb	r3, r3
 8009318:	f043 0301 	orr.w	r3, r3, #1
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b01      	cmp	r3, #1
 8009320:	d102      	bne.n	8009328 <HAL_RCC_OscConfig+0x94>
 8009322:	4ba8      	ldr	r3, [pc, #672]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	e015      	b.n	8009354 <HAL_RCC_OscConfig+0xc0>
 8009328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800932c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009330:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8009334:	fa93 f3a3 	rbit	r3, r3
 8009338:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800933c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009340:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8009344:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8009348:	fa93 f3a3 	rbit	r3, r3
 800934c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8009350:	4b9c      	ldr	r3, [pc, #624]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 8009352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009354:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009358:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800935c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8009360:	fa92 f2a2 	rbit	r2, r2
 8009364:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8009368:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800936c:	fab2 f282 	clz	r2, r2
 8009370:	b2d2      	uxtb	r2, r2
 8009372:	f042 0220 	orr.w	r2, r2, #32
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	f002 021f 	and.w	r2, r2, #31
 800937c:	2101      	movs	r1, #1
 800937e:	fa01 f202 	lsl.w	r2, r1, r2
 8009382:	4013      	ands	r3, r2
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 811f 	beq.w	80095c8 <HAL_RCC_OscConfig+0x334>
 800938a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800938e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	f040 8116 	bne.w	80095c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	f000 bfaf 	b.w	800a300 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093b2:	d106      	bne.n	80093c2 <HAL_RCC_OscConfig+0x12e>
 80093b4:	4b83      	ldr	r3, [pc, #524]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a82      	ldr	r2, [pc, #520]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 80093ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	e036      	b.n	8009430 <HAL_RCC_OscConfig+0x19c>
 80093c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10c      	bne.n	80093ec <HAL_RCC_OscConfig+0x158>
 80093d2:	4b7c      	ldr	r3, [pc, #496]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a7b      	ldr	r2, [pc, #492]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 80093d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	4b79      	ldr	r3, [pc, #484]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a78      	ldr	r2, [pc, #480]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 80093e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	e021      	b.n	8009430 <HAL_RCC_OscConfig+0x19c>
 80093ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093fc:	d10c      	bne.n	8009418 <HAL_RCC_OscConfig+0x184>
 80093fe:	4b71      	ldr	r3, [pc, #452]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a70      	ldr	r2, [pc, #448]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 8009404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009408:	6013      	str	r3, [r2, #0]
 800940a:	4b6e      	ldr	r3, [pc, #440]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a6d      	ldr	r2, [pc, #436]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 8009410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	e00b      	b.n	8009430 <HAL_RCC_OscConfig+0x19c>
 8009418:	4b6a      	ldr	r3, [pc, #424]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a69      	ldr	r2, [pc, #420]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 800941e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009422:	6013      	str	r3, [r2, #0]
 8009424:	4b67      	ldr	r3, [pc, #412]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a66      	ldr	r2, [pc, #408]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 800942a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800942e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009430:	4b64      	ldr	r3, [pc, #400]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	f023 020f 	bic.w	r2, r3, #15
 8009438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800943c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	495f      	ldr	r1, [pc, #380]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 8009446:	4313      	orrs	r3, r2
 8009448:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800944a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800944e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d059      	beq.n	800950e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800945a:	f7fb fa6b 	bl	8004934 <HAL_GetTick>
 800945e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009462:	e00a      	b.n	800947a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009464:	f7fb fa66 	bl	8004934 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	2b64      	cmp	r3, #100	; 0x64
 8009472:	d902      	bls.n	800947a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	f000 bf43 	b.w	800a300 <HAL_RCC_OscConfig+0x106c>
 800947a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800947e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009482:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8009486:	fa93 f3a3 	rbit	r3, r3
 800948a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800948e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009492:	fab3 f383 	clz	r3, r3
 8009496:	b2db      	uxtb	r3, r3
 8009498:	095b      	lsrs	r3, r3, #5
 800949a:	b2db      	uxtb	r3, r3
 800949c:	f043 0301 	orr.w	r3, r3, #1
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d102      	bne.n	80094ac <HAL_RCC_OscConfig+0x218>
 80094a6:	4b47      	ldr	r3, [pc, #284]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	e015      	b.n	80094d8 <HAL_RCC_OscConfig+0x244>
 80094ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094b0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80094b8:	fa93 f3a3 	rbit	r3, r3
 80094bc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80094c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094c4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80094c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80094cc:	fa93 f3a3 	rbit	r3, r3
 80094d0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80094d4:	4b3b      	ldr	r3, [pc, #236]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80094dc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80094e0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80094e4:	fa92 f2a2 	rbit	r2, r2
 80094e8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80094ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80094f0:	fab2 f282 	clz	r2, r2
 80094f4:	b2d2      	uxtb	r2, r2
 80094f6:	f042 0220 	orr.w	r2, r2, #32
 80094fa:	b2d2      	uxtb	r2, r2
 80094fc:	f002 021f 	and.w	r2, r2, #31
 8009500:	2101      	movs	r1, #1
 8009502:	fa01 f202 	lsl.w	r2, r1, r2
 8009506:	4013      	ands	r3, r2
 8009508:	2b00      	cmp	r3, #0
 800950a:	d0ab      	beq.n	8009464 <HAL_RCC_OscConfig+0x1d0>
 800950c:	e05d      	b.n	80095ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800950e:	f7fb fa11 	bl	8004934 <HAL_GetTick>
 8009512:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009516:	e00a      	b.n	800952e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009518:	f7fb fa0c 	bl	8004934 <HAL_GetTick>
 800951c:	4602      	mov	r2, r0
 800951e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b64      	cmp	r3, #100	; 0x64
 8009526:	d902      	bls.n	800952e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	f000 bee9 	b.w	800a300 <HAL_RCC_OscConfig+0x106c>
 800952e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009532:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009536:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800953a:	fa93 f3a3 	rbit	r3, r3
 800953e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8009542:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009546:	fab3 f383 	clz	r3, r3
 800954a:	b2db      	uxtb	r3, r3
 800954c:	095b      	lsrs	r3, r3, #5
 800954e:	b2db      	uxtb	r3, r3
 8009550:	f043 0301 	orr.w	r3, r3, #1
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b01      	cmp	r3, #1
 8009558:	d102      	bne.n	8009560 <HAL_RCC_OscConfig+0x2cc>
 800955a:	4b1a      	ldr	r3, [pc, #104]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	e015      	b.n	800958c <HAL_RCC_OscConfig+0x2f8>
 8009560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009564:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009568:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800956c:	fa93 f3a3 	rbit	r3, r3
 8009570:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8009574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009578:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800957c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009580:	fa93 f3a3 	rbit	r3, r3
 8009584:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8009588:	4b0e      	ldr	r3, [pc, #56]	; (80095c4 <HAL_RCC_OscConfig+0x330>)
 800958a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009590:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8009594:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8009598:	fa92 f2a2 	rbit	r2, r2
 800959c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80095a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80095a4:	fab2 f282 	clz	r2, r2
 80095a8:	b2d2      	uxtb	r2, r2
 80095aa:	f042 0220 	orr.w	r2, r2, #32
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	f002 021f 	and.w	r2, r2, #31
 80095b4:	2101      	movs	r1, #1
 80095b6:	fa01 f202 	lsl.w	r2, r1, r2
 80095ba:	4013      	ands	r3, r2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1ab      	bne.n	8009518 <HAL_RCC_OscConfig+0x284>
 80095c0:	e003      	b.n	80095ca <HAL_RCC_OscConfig+0x336>
 80095c2:	bf00      	nop
 80095c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 817d 	beq.w	80098da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80095e0:	4ba6      	ldr	r3, [pc, #664]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f003 030c 	and.w	r3, r3, #12
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00b      	beq.n	8009604 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80095ec:	4ba3      	ldr	r3, [pc, #652]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	f003 030c 	and.w	r3, r3, #12
 80095f4:	2b08      	cmp	r3, #8
 80095f6:	d172      	bne.n	80096de <HAL_RCC_OscConfig+0x44a>
 80095f8:	4ba0      	ldr	r3, [pc, #640]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d16c      	bne.n	80096de <HAL_RCC_OscConfig+0x44a>
 8009604:	2302      	movs	r3, #2
 8009606:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800960a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800960e:	fa93 f3a3 	rbit	r3, r3
 8009612:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8009616:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800961a:	fab3 f383 	clz	r3, r3
 800961e:	b2db      	uxtb	r3, r3
 8009620:	095b      	lsrs	r3, r3, #5
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f043 0301 	orr.w	r3, r3, #1
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b01      	cmp	r3, #1
 800962c:	d102      	bne.n	8009634 <HAL_RCC_OscConfig+0x3a0>
 800962e:	4b93      	ldr	r3, [pc, #588]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	e013      	b.n	800965c <HAL_RCC_OscConfig+0x3c8>
 8009634:	2302      	movs	r3, #2
 8009636:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800963a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800963e:	fa93 f3a3 	rbit	r3, r3
 8009642:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8009646:	2302      	movs	r3, #2
 8009648:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800964c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009650:	fa93 f3a3 	rbit	r3, r3
 8009654:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8009658:	4b88      	ldr	r3, [pc, #544]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	2202      	movs	r2, #2
 800965e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8009662:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8009666:	fa92 f2a2 	rbit	r2, r2
 800966a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800966e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8009672:	fab2 f282 	clz	r2, r2
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	f042 0220 	orr.w	r2, r2, #32
 800967c:	b2d2      	uxtb	r2, r2
 800967e:	f002 021f 	and.w	r2, r2, #31
 8009682:	2101      	movs	r1, #1
 8009684:	fa01 f202 	lsl.w	r2, r1, r2
 8009688:	4013      	ands	r3, r2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00a      	beq.n	80096a4 <HAL_RCC_OscConfig+0x410>
 800968e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d002      	beq.n	80096a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	f000 be2e 	b.w	800a300 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096a4:	4b75      	ldr	r3, [pc, #468]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80096ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	21f8      	movs	r1, #248	; 0xf8
 80096ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80096c2:	fa91 f1a1 	rbit	r1, r1
 80096c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80096ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80096ce:	fab1 f181 	clz	r1, r1
 80096d2:	b2c9      	uxtb	r1, r1
 80096d4:	408b      	lsls	r3, r1
 80096d6:	4969      	ldr	r1, [pc, #420]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096dc:	e0fd      	b.n	80098da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80096de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 8088 	beq.w	8009800 <HAL_RCC_OscConfig+0x56c>
 80096f0:	2301      	movs	r3, #1
 80096f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80096fa:	fa93 f3a3 	rbit	r3, r3
 80096fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8009702:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009706:	fab3 f383 	clz	r3, r3
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009710:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	461a      	mov	r2, r3
 8009718:	2301      	movs	r3, #1
 800971a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800971c:	f7fb f90a 	bl	8004934 <HAL_GetTick>
 8009720:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009724:	e00a      	b.n	800973c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009726:	f7fb f905 	bl	8004934 <HAL_GetTick>
 800972a:	4602      	mov	r2, r0
 800972c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	2b02      	cmp	r3, #2
 8009734:	d902      	bls.n	800973c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	f000 bde2 	b.w	800a300 <HAL_RCC_OscConfig+0x106c>
 800973c:	2302      	movs	r3, #2
 800973e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009742:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8009746:	fa93 f3a3 	rbit	r3, r3
 800974a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800974e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009752:	fab3 f383 	clz	r3, r3
 8009756:	b2db      	uxtb	r3, r3
 8009758:	095b      	lsrs	r3, r3, #5
 800975a:	b2db      	uxtb	r3, r3
 800975c:	f043 0301 	orr.w	r3, r3, #1
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b01      	cmp	r3, #1
 8009764:	d102      	bne.n	800976c <HAL_RCC_OscConfig+0x4d8>
 8009766:	4b45      	ldr	r3, [pc, #276]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	e013      	b.n	8009794 <HAL_RCC_OscConfig+0x500>
 800976c:	2302      	movs	r3, #2
 800976e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009772:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009776:	fa93 f3a3 	rbit	r3, r3
 800977a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800977e:	2302      	movs	r3, #2
 8009780:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009784:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009788:	fa93 f3a3 	rbit	r3, r3
 800978c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8009790:	4b3a      	ldr	r3, [pc, #232]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 8009792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009794:	2202      	movs	r2, #2
 8009796:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800979a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800979e:	fa92 f2a2 	rbit	r2, r2
 80097a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80097a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80097aa:	fab2 f282 	clz	r2, r2
 80097ae:	b2d2      	uxtb	r2, r2
 80097b0:	f042 0220 	orr.w	r2, r2, #32
 80097b4:	b2d2      	uxtb	r2, r2
 80097b6:	f002 021f 	and.w	r2, r2, #31
 80097ba:	2101      	movs	r1, #1
 80097bc:	fa01 f202 	lsl.w	r2, r1, r2
 80097c0:	4013      	ands	r3, r2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0af      	beq.n	8009726 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097c6:	4b2d      	ldr	r3, [pc, #180]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	21f8      	movs	r1, #248	; 0xf8
 80097dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80097e4:	fa91 f1a1 	rbit	r1, r1
 80097e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80097ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80097f0:	fab1 f181 	clz	r1, r1
 80097f4:	b2c9      	uxtb	r1, r1
 80097f6:	408b      	lsls	r3, r1
 80097f8:	4920      	ldr	r1, [pc, #128]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	600b      	str	r3, [r1, #0]
 80097fe:	e06c      	b.n	80098da <HAL_RCC_OscConfig+0x646>
 8009800:	2301      	movs	r3, #1
 8009802:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009806:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800980a:	fa93 f3a3 	rbit	r3, r3
 800980e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8009812:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009816:	fab3 f383 	clz	r3, r3
 800981a:	b2db      	uxtb	r3, r3
 800981c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009820:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	461a      	mov	r2, r3
 8009828:	2300      	movs	r3, #0
 800982a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800982c:	f7fb f882 	bl	8004934 <HAL_GetTick>
 8009830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009834:	e00a      	b.n	800984c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009836:	f7fb f87d 	bl	8004934 <HAL_GetTick>
 800983a:	4602      	mov	r2, r0
 800983c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b02      	cmp	r3, #2
 8009844:	d902      	bls.n	800984c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	f000 bd5a 	b.w	800a300 <HAL_RCC_OscConfig+0x106c>
 800984c:	2302      	movs	r3, #2
 800984e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009852:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009856:	fa93 f3a3 	rbit	r3, r3
 800985a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800985e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009862:	fab3 f383 	clz	r3, r3
 8009866:	b2db      	uxtb	r3, r3
 8009868:	095b      	lsrs	r3, r3, #5
 800986a:	b2db      	uxtb	r3, r3
 800986c:	f043 0301 	orr.w	r3, r3, #1
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b01      	cmp	r3, #1
 8009874:	d104      	bne.n	8009880 <HAL_RCC_OscConfig+0x5ec>
 8009876:	4b01      	ldr	r3, [pc, #4]	; (800987c <HAL_RCC_OscConfig+0x5e8>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	e015      	b.n	80098a8 <HAL_RCC_OscConfig+0x614>
 800987c:	40021000 	.word	0x40021000
 8009880:	2302      	movs	r3, #2
 8009882:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800988a:	fa93 f3a3 	rbit	r3, r3
 800988e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009892:	2302      	movs	r3, #2
 8009894:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009898:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800989c:	fa93 f3a3 	rbit	r3, r3
 80098a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80098a4:	4bc8      	ldr	r3, [pc, #800]	; (8009bc8 <HAL_RCC_OscConfig+0x934>)
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	2202      	movs	r2, #2
 80098aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80098ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80098b2:	fa92 f2a2 	rbit	r2, r2
 80098b6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80098ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80098be:	fab2 f282 	clz	r2, r2
 80098c2:	b2d2      	uxtb	r2, r2
 80098c4:	f042 0220 	orr.w	r2, r2, #32
 80098c8:	b2d2      	uxtb	r2, r2
 80098ca:	f002 021f 	and.w	r2, r2, #31
 80098ce:	2101      	movs	r1, #1
 80098d0:	fa01 f202 	lsl.w	r2, r1, r2
 80098d4:	4013      	ands	r3, r2
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1ad      	bne.n	8009836 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 0308 	and.w	r3, r3, #8
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 8110 	beq.w	8009b10 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80098f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d079      	beq.n	80099f4 <HAL_RCC_OscConfig+0x760>
 8009900:	2301      	movs	r3, #1
 8009902:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009906:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800990a:	fa93 f3a3 	rbit	r3, r3
 800990e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8009912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009916:	fab3 f383 	clz	r3, r3
 800991a:	b2db      	uxtb	r3, r3
 800991c:	461a      	mov	r2, r3
 800991e:	4bab      	ldr	r3, [pc, #684]	; (8009bcc <HAL_RCC_OscConfig+0x938>)
 8009920:	4413      	add	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	461a      	mov	r2, r3
 8009926:	2301      	movs	r3, #1
 8009928:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800992a:	f7fb f803 	bl	8004934 <HAL_GetTick>
 800992e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009932:	e00a      	b.n	800994a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009934:	f7fa fffe 	bl	8004934 <HAL_GetTick>
 8009938:	4602      	mov	r2, r0
 800993a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	2b02      	cmp	r3, #2
 8009942:	d902      	bls.n	800994a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	f000 bcdb 	b.w	800a300 <HAL_RCC_OscConfig+0x106c>
 800994a:	2302      	movs	r3, #2
 800994c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009950:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009954:	fa93 f3a3 	rbit	r3, r3
 8009958:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800995c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009960:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009964:	2202      	movs	r2, #2
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800996c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	fa93 f2a3 	rbit	r2, r3
 8009976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800997a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009988:	2202      	movs	r2, #2
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	fa93 f2a3 	rbit	r2, r3
 800999a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800999e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80099a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099a4:	4b88      	ldr	r3, [pc, #544]	; (8009bc8 <HAL_RCC_OscConfig+0x934>)
 80099a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80099b0:	2102      	movs	r1, #2
 80099b2:	6019      	str	r1, [r3, #0]
 80099b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	fa93 f1a3 	rbit	r1, r3
 80099c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80099ca:	6019      	str	r1, [r3, #0]
  return result;
 80099cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	fab3 f383 	clz	r3, r3
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	f003 031f 	and.w	r3, r3, #31
 80099e6:	2101      	movs	r1, #1
 80099e8:	fa01 f303 	lsl.w	r3, r1, r3
 80099ec:	4013      	ands	r3, r2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0a0      	beq.n	8009934 <HAL_RCC_OscConfig+0x6a0>
 80099f2:	e08d      	b.n	8009b10 <HAL_RCC_OscConfig+0x87c>
 80099f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80099fc:	2201      	movs	r2, #1
 80099fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	fa93 f2a3 	rbit	r2, r3
 8009a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a12:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009a16:	601a      	str	r2, [r3, #0]
  return result;
 8009a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009a20:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a22:	fab3 f383 	clz	r3, r3
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	461a      	mov	r2, r3
 8009a2a:	4b68      	ldr	r3, [pc, #416]	; (8009bcc <HAL_RCC_OscConfig+0x938>)
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	461a      	mov	r2, r3
 8009a32:	2300      	movs	r3, #0
 8009a34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a36:	f7fa ff7d 	bl	8004934 <HAL_GetTick>
 8009a3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a3e:	e00a      	b.n	8009a56 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a40:	f7fa ff78 	bl	8004934 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d902      	bls.n	8009a56 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	f000 bc55 	b.w	800a300 <HAL_RCC_OscConfig+0x106c>
 8009a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009a5e:	2202      	movs	r2, #2
 8009a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	fa93 f2a3 	rbit	r2, r3
 8009a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a74:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a7e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009a82:	2202      	movs	r2, #2
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	fa93 f2a3 	rbit	r2, r3
 8009a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	fa93 f2a3 	rbit	r2, r3
 8009ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009abc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009ac0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ac2:	4b41      	ldr	r3, [pc, #260]	; (8009bc8 <HAL_RCC_OscConfig+0x934>)
 8009ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009ace:	2102      	movs	r1, #2
 8009ad0:	6019      	str	r1, [r3, #0]
 8009ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ad6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	fa93 f1a3 	rbit	r1, r3
 8009ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ae4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009ae8:	6019      	str	r1, [r3, #0]
  return result;
 8009aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	fab3 f383 	clz	r3, r3
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	f003 031f 	and.w	r3, r3, #31
 8009b04:	2101      	movs	r1, #1
 8009b06:	fa01 f303 	lsl.w	r3, r1, r3
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d197      	bne.n	8009a40 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 81a1 	beq.w	8009e68 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b26:	2300      	movs	r3, #0
 8009b28:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b2c:	4b26      	ldr	r3, [pc, #152]	; (8009bc8 <HAL_RCC_OscConfig+0x934>)
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d116      	bne.n	8009b66 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b38:	4b23      	ldr	r3, [pc, #140]	; (8009bc8 <HAL_RCC_OscConfig+0x934>)
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	4a22      	ldr	r2, [pc, #136]	; (8009bc8 <HAL_RCC_OscConfig+0x934>)
 8009b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b42:	61d3      	str	r3, [r2, #28]
 8009b44:	4b20      	ldr	r3, [pc, #128]	; (8009bc8 <HAL_RCC_OscConfig+0x934>)
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b50:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b5a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009b5e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b66:	4b1a      	ldr	r3, [pc, #104]	; (8009bd0 <HAL_RCC_OscConfig+0x93c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d11a      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009b72:	4b17      	ldr	r3, [pc, #92]	; (8009bd0 <HAL_RCC_OscConfig+0x93c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a16      	ldr	r2, [pc, #88]	; (8009bd0 <HAL_RCC_OscConfig+0x93c>)
 8009b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b7e:	f7fa fed9 	bl	8004934 <HAL_GetTick>
 8009b82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b86:	e009      	b.n	8009b9c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b88:	f7fa fed4 	bl	8004934 <HAL_GetTick>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	2b64      	cmp	r3, #100	; 0x64
 8009b96:	d901      	bls.n	8009b9c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e3b1      	b.n	800a300 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b9c:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <HAL_RCC_OscConfig+0x93c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d0ef      	beq.n	8009b88 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d10d      	bne.n	8009bd4 <HAL_RCC_OscConfig+0x940>
 8009bb8:	4b03      	ldr	r3, [pc, #12]	; (8009bc8 <HAL_RCC_OscConfig+0x934>)
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	4a02      	ldr	r2, [pc, #8]	; (8009bc8 <HAL_RCC_OscConfig+0x934>)
 8009bbe:	f043 0301 	orr.w	r3, r3, #1
 8009bc2:	6213      	str	r3, [r2, #32]
 8009bc4:	e03c      	b.n	8009c40 <HAL_RCC_OscConfig+0x9ac>
 8009bc6:	bf00      	nop
 8009bc8:	40021000 	.word	0x40021000
 8009bcc:	10908120 	.word	0x10908120
 8009bd0:	40007000 	.word	0x40007000
 8009bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10c      	bne.n	8009bfe <HAL_RCC_OscConfig+0x96a>
 8009be4:	4bc1      	ldr	r3, [pc, #772]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009be6:	6a1b      	ldr	r3, [r3, #32]
 8009be8:	4ac0      	ldr	r2, [pc, #768]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009bea:	f023 0301 	bic.w	r3, r3, #1
 8009bee:	6213      	str	r3, [r2, #32]
 8009bf0:	4bbe      	ldr	r3, [pc, #760]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	4abd      	ldr	r2, [pc, #756]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009bf6:	f023 0304 	bic.w	r3, r3, #4
 8009bfa:	6213      	str	r3, [r2, #32]
 8009bfc:	e020      	b.n	8009c40 <HAL_RCC_OscConfig+0x9ac>
 8009bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	2b05      	cmp	r3, #5
 8009c0c:	d10c      	bne.n	8009c28 <HAL_RCC_OscConfig+0x994>
 8009c0e:	4bb7      	ldr	r3, [pc, #732]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	4ab6      	ldr	r2, [pc, #728]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009c14:	f043 0304 	orr.w	r3, r3, #4
 8009c18:	6213      	str	r3, [r2, #32]
 8009c1a:	4bb4      	ldr	r3, [pc, #720]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	4ab3      	ldr	r2, [pc, #716]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009c20:	f043 0301 	orr.w	r3, r3, #1
 8009c24:	6213      	str	r3, [r2, #32]
 8009c26:	e00b      	b.n	8009c40 <HAL_RCC_OscConfig+0x9ac>
 8009c28:	4bb0      	ldr	r3, [pc, #704]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009c2a:	6a1b      	ldr	r3, [r3, #32]
 8009c2c:	4aaf      	ldr	r2, [pc, #700]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009c2e:	f023 0301 	bic.w	r3, r3, #1
 8009c32:	6213      	str	r3, [r2, #32]
 8009c34:	4bad      	ldr	r3, [pc, #692]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009c36:	6a1b      	ldr	r3, [r3, #32]
 8009c38:	4aac      	ldr	r2, [pc, #688]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009c3a:	f023 0304 	bic.w	r3, r3, #4
 8009c3e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 8081 	beq.w	8009d54 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c52:	f7fa fe6f 	bl	8004934 <HAL_GetTick>
 8009c56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c5a:	e00b      	b.n	8009c74 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c5c:	f7fa fe6a 	bl	8004934 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d901      	bls.n	8009c74 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e345      	b.n	800a300 <HAL_RCC_OscConfig+0x106c>
 8009c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	fa93 f2a3 	rbit	r2, r3
 8009c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009c96:	601a      	str	r2, [r3, #0]
 8009c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ca8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	fa93 f2a3 	rbit	r2, r3
 8009cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cb6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009cba:	601a      	str	r2, [r3, #0]
  return result;
 8009cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cc0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009cc4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cc6:	fab3 f383 	clz	r3, r3
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	095b      	lsrs	r3, r3, #5
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	f043 0302 	orr.w	r3, r3, #2
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d102      	bne.n	8009ce0 <HAL_RCC_OscConfig+0xa4c>
 8009cda:	4b84      	ldr	r3, [pc, #528]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	e013      	b.n	8009d08 <HAL_RCC_OscConfig+0xa74>
 8009ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ce4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009ce8:	2202      	movs	r2, #2
 8009cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cf0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	fa93 f2a3 	rbit	r2, r3
 8009cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cfe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	4b79      	ldr	r3, [pc, #484]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d0c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009d10:	2102      	movs	r1, #2
 8009d12:	6011      	str	r1, [r2, #0]
 8009d14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d18:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009d1c:	6812      	ldr	r2, [r2, #0]
 8009d1e:	fa92 f1a2 	rbit	r1, r2
 8009d22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d26:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009d2a:	6011      	str	r1, [r2, #0]
  return result;
 8009d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d30:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009d34:	6812      	ldr	r2, [r2, #0]
 8009d36:	fab2 f282 	clz	r2, r2
 8009d3a:	b2d2      	uxtb	r2, r2
 8009d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d40:	b2d2      	uxtb	r2, r2
 8009d42:	f002 021f 	and.w	r2, r2, #31
 8009d46:	2101      	movs	r1, #1
 8009d48:	fa01 f202 	lsl.w	r2, r1, r2
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d084      	beq.n	8009c5c <HAL_RCC_OscConfig+0x9c8>
 8009d52:	e07f      	b.n	8009e54 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d54:	f7fa fdee 	bl	8004934 <HAL_GetTick>
 8009d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d5c:	e00b      	b.n	8009d76 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d5e:	f7fa fde9 	bl	8004934 <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d901      	bls.n	8009d76 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e2c4      	b.n	800a300 <HAL_RCC_OscConfig+0x106c>
 8009d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009d7e:	2202      	movs	r2, #2
 8009d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d86:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	fa93 f2a3 	rbit	r2, r3
 8009d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d94:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d9e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009da2:	2202      	movs	r2, #2
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009daa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	fa93 f2a3 	rbit	r2, r3
 8009db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009db8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009dbc:	601a      	str	r2, [r3, #0]
  return result;
 8009dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dc2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009dc6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009dc8:	fab3 f383 	clz	r3, r3
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	095b      	lsrs	r3, r3, #5
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	f043 0302 	orr.w	r3, r3, #2
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d102      	bne.n	8009de2 <HAL_RCC_OscConfig+0xb4e>
 8009ddc:	4b43      	ldr	r3, [pc, #268]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009dde:	6a1b      	ldr	r3, [r3, #32]
 8009de0:	e013      	b.n	8009e0a <HAL_RCC_OscConfig+0xb76>
 8009de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009de6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009dea:	2202      	movs	r2, #2
 8009dec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009df2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	fa93 f2a3 	rbit	r2, r3
 8009dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	4b39      	ldr	r3, [pc, #228]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009e12:	2102      	movs	r1, #2
 8009e14:	6011      	str	r1, [r2, #0]
 8009e16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e1a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009e1e:	6812      	ldr	r2, [r2, #0]
 8009e20:	fa92 f1a2 	rbit	r1, r2
 8009e24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e28:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009e2c:	6011      	str	r1, [r2, #0]
  return result;
 8009e2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e32:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009e36:	6812      	ldr	r2, [r2, #0]
 8009e38:	fab2 f282 	clz	r2, r2
 8009e3c:	b2d2      	uxtb	r2, r2
 8009e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e42:	b2d2      	uxtb	r2, r2
 8009e44:	f002 021f 	and.w	r2, r2, #31
 8009e48:	2101      	movs	r1, #1
 8009e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8009e4e:	4013      	ands	r3, r2
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d184      	bne.n	8009d5e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009e54:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d105      	bne.n	8009e68 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e5c:	4b23      	ldr	r3, [pc, #140]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	4a22      	ldr	r2, [pc, #136]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e66:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	69db      	ldr	r3, [r3, #28]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 8242 	beq.w	800a2fe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e7a:	4b1c      	ldr	r3, [pc, #112]	; (8009eec <HAL_RCC_OscConfig+0xc58>)
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f003 030c 	and.w	r3, r3, #12
 8009e82:	2b08      	cmp	r3, #8
 8009e84:	f000 8213 	beq.w	800a2ae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	f040 8162 	bne.w	800a15e <HAL_RCC_OscConfig+0xeca>
 8009e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e9e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009ea2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	fa93 f2a3 	rbit	r2, r3
 8009eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009ebe:	601a      	str	r2, [r3, #0]
  return result;
 8009ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ec4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009ec8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009eca:	fab3 f383 	clz	r3, r3
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009ed4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	461a      	mov	r2, r3
 8009edc:	2300      	movs	r3, #0
 8009ede:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ee0:	f7fa fd28 	bl	8004934 <HAL_GetTick>
 8009ee4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009ee8:	e00c      	b.n	8009f04 <HAL_RCC_OscConfig+0xc70>
 8009eea:	bf00      	nop
 8009eec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ef0:	f7fa fd20 	bl	8004934 <HAL_GetTick>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d901      	bls.n	8009f04 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8009f00:	2303      	movs	r3, #3
 8009f02:	e1fd      	b.n	800a300 <HAL_RCC_OscConfig+0x106c>
 8009f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009f0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	fa93 f2a3 	rbit	r2, r3
 8009f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009f28:	601a      	str	r2, [r3, #0]
  return result;
 8009f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009f32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009f34:	fab3 f383 	clz	r3, r3
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	095b      	lsrs	r3, r3, #5
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	f043 0301 	orr.w	r3, r3, #1
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d102      	bne.n	8009f4e <HAL_RCC_OscConfig+0xcba>
 8009f48:	4bb0      	ldr	r3, [pc, #704]	; (800a20c <HAL_RCC_OscConfig+0xf78>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	e027      	b.n	8009f9e <HAL_RCC_OscConfig+0xd0a>
 8009f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009f56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	fa93 f2a3 	rbit	r2, r3
 8009f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f78:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f80:	601a      	str	r2, [r3, #0]
 8009f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	fa93 f2a3 	rbit	r2, r3
 8009f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	4b9c      	ldr	r3, [pc, #624]	; (800a20c <HAL_RCC_OscConfig+0xf78>)
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fa2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009fa6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009faa:	6011      	str	r1, [r2, #0]
 8009fac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fb0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009fb4:	6812      	ldr	r2, [r2, #0]
 8009fb6:	fa92 f1a2 	rbit	r1, r2
 8009fba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fbe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009fc2:	6011      	str	r1, [r2, #0]
  return result;
 8009fc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fc8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009fcc:	6812      	ldr	r2, [r2, #0]
 8009fce:	fab2 f282 	clz	r2, r2
 8009fd2:	b2d2      	uxtb	r2, r2
 8009fd4:	f042 0220 	orr.w	r2, r2, #32
 8009fd8:	b2d2      	uxtb	r2, r2
 8009fda:	f002 021f 	and.w	r2, r2, #31
 8009fde:	2101      	movs	r1, #1
 8009fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d182      	bne.n	8009ef0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fea:	4b88      	ldr	r3, [pc, #544]	; (800a20c <HAL_RCC_OscConfig+0xf78>)
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	430b      	orrs	r3, r1
 800a00c:	497f      	ldr	r1, [pc, #508]	; (800a20c <HAL_RCC_OscConfig+0xf78>)
 800a00e:	4313      	orrs	r3, r2
 800a010:	604b      	str	r3, [r1, #4]
 800a012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a016:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800a01a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a01e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a024:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	fa93 f2a3 	rbit	r2, r3
 800a02e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a032:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a036:	601a      	str	r2, [r3, #0]
  return result;
 800a038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a03c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a040:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a042:	fab3 f383 	clz	r3, r3
 800a046:	b2db      	uxtb	r3, r3
 800a048:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a04c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	461a      	mov	r2, r3
 800a054:	2301      	movs	r3, #1
 800a056:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a058:	f7fa fc6c 	bl	8004934 <HAL_GetTick>
 800a05c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a060:	e009      	b.n	800a076 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a062:	f7fa fc67 	bl	8004934 <HAL_GetTick>
 800a066:	4602      	mov	r2, r0
 800a068:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d901      	bls.n	800a076 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e144      	b.n	800a300 <HAL_RCC_OscConfig+0x106c>
 800a076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a07a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a07e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a082:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a088:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	fa93 f2a3 	rbit	r2, r3
 800a092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a096:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800a09a:	601a      	str	r2, [r3, #0]
  return result;
 800a09c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0a0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800a0a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a0a6:	fab3 f383 	clz	r3, r3
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	095b      	lsrs	r3, r3, #5
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	f043 0301 	orr.w	r3, r3, #1
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d102      	bne.n	800a0c0 <HAL_RCC_OscConfig+0xe2c>
 800a0ba:	4b54      	ldr	r3, [pc, #336]	; (800a20c <HAL_RCC_OscConfig+0xf78>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	e027      	b.n	800a110 <HAL_RCC_OscConfig+0xe7c>
 800a0c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0c4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800a0c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a0cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	fa93 f2a3 	rbit	r2, r3
 800a0dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0ea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800a0ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0f8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	fa93 f2a3 	rbit	r2, r3
 800a102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a106:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	4b3f      	ldr	r3, [pc, #252]	; (800a20c <HAL_RCC_OscConfig+0xf78>)
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a114:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800a118:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800a11c:	6011      	str	r1, [r2, #0]
 800a11e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a122:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800a126:	6812      	ldr	r2, [r2, #0]
 800a128:	fa92 f1a2 	rbit	r1, r2
 800a12c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a130:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800a134:	6011      	str	r1, [r2, #0]
  return result;
 800a136:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a13a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800a13e:	6812      	ldr	r2, [r2, #0]
 800a140:	fab2 f282 	clz	r2, r2
 800a144:	b2d2      	uxtb	r2, r2
 800a146:	f042 0220 	orr.w	r2, r2, #32
 800a14a:	b2d2      	uxtb	r2, r2
 800a14c:	f002 021f 	and.w	r2, r2, #31
 800a150:	2101      	movs	r1, #1
 800a152:	fa01 f202 	lsl.w	r2, r1, r2
 800a156:	4013      	ands	r3, r2
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d082      	beq.n	800a062 <HAL_RCC_OscConfig+0xdce>
 800a15c:	e0cf      	b.n	800a2fe <HAL_RCC_OscConfig+0x106a>
 800a15e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a162:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a166:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a16a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a16c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a170:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	fa93 f2a3 	rbit	r2, r3
 800a17a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a17e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a182:	601a      	str	r2, [r3, #0]
  return result;
 800a184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a188:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a18c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a18e:	fab3 f383 	clz	r3, r3
 800a192:	b2db      	uxtb	r3, r3
 800a194:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a198:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	461a      	mov	r2, r3
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1a4:	f7fa fbc6 	bl	8004934 <HAL_GetTick>
 800a1a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a1ac:	e009      	b.n	800a1c2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1ae:	f7fa fbc1 	bl	8004934 <HAL_GetTick>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d901      	bls.n	800a1c2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e09e      	b.n	800a300 <HAL_RCC_OscConfig+0x106c>
 800a1c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1c6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800a1ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a1ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1d4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	fa93 f2a3 	rbit	r2, r3
 800a1de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a1e6:	601a      	str	r2, [r3, #0]
  return result;
 800a1e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1ec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a1f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a1f2:	fab3 f383 	clz	r3, r3
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	095b      	lsrs	r3, r3, #5
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	f043 0301 	orr.w	r3, r3, #1
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b01      	cmp	r3, #1
 800a204:	d104      	bne.n	800a210 <HAL_RCC_OscConfig+0xf7c>
 800a206:	4b01      	ldr	r3, [pc, #4]	; (800a20c <HAL_RCC_OscConfig+0xf78>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	e029      	b.n	800a260 <HAL_RCC_OscConfig+0xfcc>
 800a20c:	40021000 	.word	0x40021000
 800a210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a214:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a218:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a21c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a21e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a222:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	fa93 f2a3 	rbit	r2, r3
 800a22c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a230:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a23a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a23e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a248:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	fa93 f2a3 	rbit	r2, r3
 800a252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a256:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800a25a:	601a      	str	r2, [r3, #0]
 800a25c:	4b2b      	ldr	r3, [pc, #172]	; (800a30c <HAL_RCC_OscConfig+0x1078>)
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a264:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800a268:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800a26c:	6011      	str	r1, [r2, #0]
 800a26e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a272:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	fa92 f1a2 	rbit	r1, r2
 800a27c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a280:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800a284:	6011      	str	r1, [r2, #0]
  return result;
 800a286:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a28a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800a28e:	6812      	ldr	r2, [r2, #0]
 800a290:	fab2 f282 	clz	r2, r2
 800a294:	b2d2      	uxtb	r2, r2
 800a296:	f042 0220 	orr.w	r2, r2, #32
 800a29a:	b2d2      	uxtb	r2, r2
 800a29c:	f002 021f 	and.w	r2, r2, #31
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	fa01 f202 	lsl.w	r2, r1, r2
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d180      	bne.n	800a1ae <HAL_RCC_OscConfig+0xf1a>
 800a2ac:	e027      	b.n	800a2fe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a2ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a2b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	69db      	ldr	r3, [r3, #28]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d101      	bne.n	800a2c2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e01e      	b.n	800a300 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a2c2:	4b12      	ldr	r3, [pc, #72]	; (800a30c <HAL_RCC_OscConfig+0x1078>)
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a2ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a2ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a2d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a2d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d10b      	bne.n	800a2fa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800a2e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a2e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a2ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a2ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d001      	beq.n	800a2fe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e000      	b.n	800a300 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	40021000 	.word	0x40021000

0800a310 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b09e      	sub	sp, #120	; 0x78
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d101      	bne.n	800a328 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e162      	b.n	800a5ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a328:	4b90      	ldr	r3, [pc, #576]	; (800a56c <HAL_RCC_ClockConfig+0x25c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0307 	and.w	r3, r3, #7
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	429a      	cmp	r2, r3
 800a334:	d910      	bls.n	800a358 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a336:	4b8d      	ldr	r3, [pc, #564]	; (800a56c <HAL_RCC_ClockConfig+0x25c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f023 0207 	bic.w	r2, r3, #7
 800a33e:	498b      	ldr	r1, [pc, #556]	; (800a56c <HAL_RCC_ClockConfig+0x25c>)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	4313      	orrs	r3, r2
 800a344:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a346:	4b89      	ldr	r3, [pc, #548]	; (800a56c <HAL_RCC_ClockConfig+0x25c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	429a      	cmp	r2, r3
 800a352:	d001      	beq.n	800a358 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e14a      	b.n	800a5ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d008      	beq.n	800a376 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a364:	4b82      	ldr	r3, [pc, #520]	; (800a570 <HAL_RCC_ClockConfig+0x260>)
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	497f      	ldr	r1, [pc, #508]	; (800a570 <HAL_RCC_ClockConfig+0x260>)
 800a372:	4313      	orrs	r3, r2
 800a374:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 80dc 	beq.w	800a53c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d13c      	bne.n	800a406 <HAL_RCC_ClockConfig+0xf6>
 800a38c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a390:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a394:	fa93 f3a3 	rbit	r3, r3
 800a398:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800a39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a39c:	fab3 f383 	clz	r3, r3
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	095b      	lsrs	r3, r3, #5
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	f043 0301 	orr.w	r3, r3, #1
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d102      	bne.n	800a3b6 <HAL_RCC_ClockConfig+0xa6>
 800a3b0:	4b6f      	ldr	r3, [pc, #444]	; (800a570 <HAL_RCC_ClockConfig+0x260>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	e00f      	b.n	800a3d6 <HAL_RCC_ClockConfig+0xc6>
 800a3b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a3ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3be:	fa93 f3a3 	rbit	r3, r3
 800a3c2:	667b      	str	r3, [r7, #100]	; 0x64
 800a3c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a3c8:	663b      	str	r3, [r7, #96]	; 0x60
 800a3ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3cc:	fa93 f3a3 	rbit	r3, r3
 800a3d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3d2:	4b67      	ldr	r3, [pc, #412]	; (800a570 <HAL_RCC_ClockConfig+0x260>)
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a3da:	65ba      	str	r2, [r7, #88]	; 0x58
 800a3dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3de:	fa92 f2a2 	rbit	r2, r2
 800a3e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800a3e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3e6:	fab2 f282 	clz	r2, r2
 800a3ea:	b2d2      	uxtb	r2, r2
 800a3ec:	f042 0220 	orr.w	r2, r2, #32
 800a3f0:	b2d2      	uxtb	r2, r2
 800a3f2:	f002 021f 	and.w	r2, r2, #31
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	fa01 f202 	lsl.w	r2, r1, r2
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d17b      	bne.n	800a4fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e0f3      	b.n	800a5ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d13c      	bne.n	800a488 <HAL_RCC_ClockConfig+0x178>
 800a40e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a412:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a416:	fa93 f3a3 	rbit	r3, r3
 800a41a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a41c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a41e:	fab3 f383 	clz	r3, r3
 800a422:	b2db      	uxtb	r3, r3
 800a424:	095b      	lsrs	r3, r3, #5
 800a426:	b2db      	uxtb	r3, r3
 800a428:	f043 0301 	orr.w	r3, r3, #1
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d102      	bne.n	800a438 <HAL_RCC_ClockConfig+0x128>
 800a432:	4b4f      	ldr	r3, [pc, #316]	; (800a570 <HAL_RCC_ClockConfig+0x260>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	e00f      	b.n	800a458 <HAL_RCC_ClockConfig+0x148>
 800a438:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a43c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a43e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a440:	fa93 f3a3 	rbit	r3, r3
 800a444:	647b      	str	r3, [r7, #68]	; 0x44
 800a446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a44a:	643b      	str	r3, [r7, #64]	; 0x40
 800a44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a44e:	fa93 f3a3 	rbit	r3, r3
 800a452:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a454:	4b46      	ldr	r3, [pc, #280]	; (800a570 <HAL_RCC_ClockConfig+0x260>)
 800a456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a458:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a45c:	63ba      	str	r2, [r7, #56]	; 0x38
 800a45e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a460:	fa92 f2a2 	rbit	r2, r2
 800a464:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800a466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a468:	fab2 f282 	clz	r2, r2
 800a46c:	b2d2      	uxtb	r2, r2
 800a46e:	f042 0220 	orr.w	r2, r2, #32
 800a472:	b2d2      	uxtb	r2, r2
 800a474:	f002 021f 	and.w	r2, r2, #31
 800a478:	2101      	movs	r1, #1
 800a47a:	fa01 f202 	lsl.w	r2, r1, r2
 800a47e:	4013      	ands	r3, r2
 800a480:	2b00      	cmp	r3, #0
 800a482:	d13a      	bne.n	800a4fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e0b2      	b.n	800a5ee <HAL_RCC_ClockConfig+0x2de>
 800a488:	2302      	movs	r3, #2
 800a48a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48e:	fa93 f3a3 	rbit	r3, r3
 800a492:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a496:	fab3 f383 	clz	r3, r3
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	095b      	lsrs	r3, r3, #5
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f043 0301 	orr.w	r3, r3, #1
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d102      	bne.n	800a4b0 <HAL_RCC_ClockConfig+0x1a0>
 800a4aa:	4b31      	ldr	r3, [pc, #196]	; (800a570 <HAL_RCC_ClockConfig+0x260>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	e00d      	b.n	800a4cc <HAL_RCC_ClockConfig+0x1bc>
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	fa93 f3a3 	rbit	r3, r3
 800a4ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a4bc:	2302      	movs	r3, #2
 800a4be:	623b      	str	r3, [r7, #32]
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	fa93 f3a3 	rbit	r3, r3
 800a4c6:	61fb      	str	r3, [r7, #28]
 800a4c8:	4b29      	ldr	r3, [pc, #164]	; (800a570 <HAL_RCC_ClockConfig+0x260>)
 800a4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	61ba      	str	r2, [r7, #24]
 800a4d0:	69ba      	ldr	r2, [r7, #24]
 800a4d2:	fa92 f2a2 	rbit	r2, r2
 800a4d6:	617a      	str	r2, [r7, #20]
  return result;
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	fab2 f282 	clz	r2, r2
 800a4de:	b2d2      	uxtb	r2, r2
 800a4e0:	f042 0220 	orr.w	r2, r2, #32
 800a4e4:	b2d2      	uxtb	r2, r2
 800a4e6:	f002 021f 	and.w	r2, r2, #31
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	fa01 f202 	lsl.w	r2, r1, r2
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e079      	b.n	800a5ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a4fa:	4b1d      	ldr	r3, [pc, #116]	; (800a570 <HAL_RCC_ClockConfig+0x260>)
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f023 0203 	bic.w	r2, r3, #3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	491a      	ldr	r1, [pc, #104]	; (800a570 <HAL_RCC_ClockConfig+0x260>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a50c:	f7fa fa12 	bl	8004934 <HAL_GetTick>
 800a510:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a512:	e00a      	b.n	800a52a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a514:	f7fa fa0e 	bl	8004934 <HAL_GetTick>
 800a518:	4602      	mov	r2, r0
 800a51a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a522:	4293      	cmp	r3, r2
 800a524:	d901      	bls.n	800a52a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a526:	2303      	movs	r3, #3
 800a528:	e061      	b.n	800a5ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a52a:	4b11      	ldr	r3, [pc, #68]	; (800a570 <HAL_RCC_ClockConfig+0x260>)
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f003 020c 	and.w	r2, r3, #12
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	429a      	cmp	r2, r3
 800a53a:	d1eb      	bne.n	800a514 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a53c:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <HAL_RCC_ClockConfig+0x25c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 0307 	and.w	r3, r3, #7
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	429a      	cmp	r2, r3
 800a548:	d214      	bcs.n	800a574 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a54a:	4b08      	ldr	r3, [pc, #32]	; (800a56c <HAL_RCC_ClockConfig+0x25c>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f023 0207 	bic.w	r2, r3, #7
 800a552:	4906      	ldr	r1, [pc, #24]	; (800a56c <HAL_RCC_ClockConfig+0x25c>)
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	4313      	orrs	r3, r2
 800a558:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a55a:	4b04      	ldr	r3, [pc, #16]	; (800a56c <HAL_RCC_ClockConfig+0x25c>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0307 	and.w	r3, r3, #7
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	429a      	cmp	r2, r3
 800a566:	d005      	beq.n	800a574 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e040      	b.n	800a5ee <HAL_RCC_ClockConfig+0x2de>
 800a56c:	40022000 	.word	0x40022000
 800a570:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0304 	and.w	r3, r3, #4
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d008      	beq.n	800a592 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a580:	4b1d      	ldr	r3, [pc, #116]	; (800a5f8 <HAL_RCC_ClockConfig+0x2e8>)
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	491a      	ldr	r1, [pc, #104]	; (800a5f8 <HAL_RCC_ClockConfig+0x2e8>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0308 	and.w	r3, r3, #8
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d009      	beq.n	800a5b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a59e:	4b16      	ldr	r3, [pc, #88]	; (800a5f8 <HAL_RCC_ClockConfig+0x2e8>)
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	4912      	ldr	r1, [pc, #72]	; (800a5f8 <HAL_RCC_ClockConfig+0x2e8>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a5b2:	f000 f829 	bl	800a608 <HAL_RCC_GetSysClockFreq>
 800a5b6:	4601      	mov	r1, r0
 800a5b8:	4b0f      	ldr	r3, [pc, #60]	; (800a5f8 <HAL_RCC_ClockConfig+0x2e8>)
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5c0:	22f0      	movs	r2, #240	; 0xf0
 800a5c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	fa92 f2a2 	rbit	r2, r2
 800a5ca:	60fa      	str	r2, [r7, #12]
  return result;
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	fab2 f282 	clz	r2, r2
 800a5d2:	b2d2      	uxtb	r2, r2
 800a5d4:	40d3      	lsrs	r3, r2
 800a5d6:	4a09      	ldr	r2, [pc, #36]	; (800a5fc <HAL_RCC_ClockConfig+0x2ec>)
 800a5d8:	5cd3      	ldrb	r3, [r2, r3]
 800a5da:	fa21 f303 	lsr.w	r3, r1, r3
 800a5de:	4a08      	ldr	r2, [pc, #32]	; (800a600 <HAL_RCC_ClockConfig+0x2f0>)
 800a5e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a5e2:	4b08      	ldr	r3, [pc, #32]	; (800a604 <HAL_RCC_ClockConfig+0x2f4>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fa f960 	bl	80048ac <HAL_InitTick>
  
  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3778      	adds	r7, #120	; 0x78
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	40021000 	.word	0x40021000
 800a5fc:	080172f8 	.word	0x080172f8
 800a600:	20000098 	.word	0x20000098
 800a604:	200000ac 	.word	0x200000ac

0800a608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a608:	b480      	push	{r7}
 800a60a:	b08b      	sub	sp, #44	; 0x2c
 800a60c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a60e:	2300      	movs	r3, #0
 800a610:	61fb      	str	r3, [r7, #28]
 800a612:	2300      	movs	r3, #0
 800a614:	61bb      	str	r3, [r7, #24]
 800a616:	2300      	movs	r3, #0
 800a618:	627b      	str	r3, [r7, #36]	; 0x24
 800a61a:	2300      	movs	r3, #0
 800a61c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a61e:	2300      	movs	r3, #0
 800a620:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a622:	4b29      	ldr	r3, [pc, #164]	; (800a6c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f003 030c 	and.w	r3, r3, #12
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d002      	beq.n	800a638 <HAL_RCC_GetSysClockFreq+0x30>
 800a632:	2b08      	cmp	r3, #8
 800a634:	d003      	beq.n	800a63e <HAL_RCC_GetSysClockFreq+0x36>
 800a636:	e03c      	b.n	800a6b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a638:	4b24      	ldr	r3, [pc, #144]	; (800a6cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800a63a:	623b      	str	r3, [r7, #32]
      break;
 800a63c:	e03c      	b.n	800a6b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a644:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a648:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	fa92 f2a2 	rbit	r2, r2
 800a650:	607a      	str	r2, [r7, #4]
  return result;
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	fab2 f282 	clz	r2, r2
 800a658:	b2d2      	uxtb	r2, r2
 800a65a:	40d3      	lsrs	r3, r2
 800a65c:	4a1c      	ldr	r2, [pc, #112]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a65e:	5cd3      	ldrb	r3, [r2, r3]
 800a660:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a662:	4b19      	ldr	r3, [pc, #100]	; (800a6c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a666:	f003 030f 	and.w	r3, r3, #15
 800a66a:	220f      	movs	r2, #15
 800a66c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	fa92 f2a2 	rbit	r2, r2
 800a674:	60fa      	str	r2, [r7, #12]
  return result;
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	fab2 f282 	clz	r2, r2
 800a67c:	b2d2      	uxtb	r2, r2
 800a67e:	40d3      	lsrs	r3, r2
 800a680:	4a14      	ldr	r2, [pc, #80]	; (800a6d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a682:	5cd3      	ldrb	r3, [r2, r3]
 800a684:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d008      	beq.n	800a6a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a690:	4a0e      	ldr	r2, [pc, #56]	; (800a6cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	fbb2 f2f3 	udiv	r2, r2, r3
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	fb02 f303 	mul.w	r3, r2, r3
 800a69e:	627b      	str	r3, [r7, #36]	; 0x24
 800a6a0:	e004      	b.n	800a6ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	4a0c      	ldr	r2, [pc, #48]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a6a6:	fb02 f303 	mul.w	r3, r2, r3
 800a6aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	623b      	str	r3, [r7, #32]
      break;
 800a6b0:	e002      	b.n	800a6b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a6b2:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <HAL_RCC_GetSysClockFreq+0xd4>)
 800a6b4:	623b      	str	r3, [r7, #32]
      break;
 800a6b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	372c      	adds	r7, #44	; 0x2c
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	40021000 	.word	0x40021000
 800a6cc:	01e84800 	.word	0x01e84800
 800a6d0:	08017354 	.word	0x08017354
 800a6d4:	08017364 	.word	0x08017364
 800a6d8:	003d0900 	.word	0x003d0900
 800a6dc:	007a1200 	.word	0x007a1200

0800a6e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b092      	sub	sp, #72	; 0x48
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 80d4 	beq.w	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a704:	4b4e      	ldr	r3, [pc, #312]	; (800a840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10e      	bne.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a710:	4b4b      	ldr	r3, [pc, #300]	; (800a840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a712:	69db      	ldr	r3, [r3, #28]
 800a714:	4a4a      	ldr	r2, [pc, #296]	; (800a840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a71a:	61d3      	str	r3, [r2, #28]
 800a71c:	4b48      	ldr	r3, [pc, #288]	; (800a840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a724:	60bb      	str	r3, [r7, #8]
 800a726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a728:	2301      	movs	r3, #1
 800a72a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a72e:	4b45      	ldr	r3, [pc, #276]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a736:	2b00      	cmp	r3, #0
 800a738:	d118      	bne.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a73a:	4b42      	ldr	r3, [pc, #264]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a41      	ldr	r2, [pc, #260]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a744:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a746:	f7fa f8f5 	bl	8004934 <HAL_GetTick>
 800a74a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a74c:	e008      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a74e:	f7fa f8f1 	bl	8004934 <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	2b64      	cmp	r3, #100	; 0x64
 800a75a:	d901      	bls.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e169      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a760:	4b38      	ldr	r3, [pc, #224]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0f0      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a76c:	4b34      	ldr	r3, [pc, #208]	; (800a840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a76e:	6a1b      	ldr	r3, [r3, #32]
 800a770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 8084 	beq.w	800a886 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a788:	429a      	cmp	r2, r3
 800a78a:	d07c      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a78c:	4b2c      	ldr	r3, [pc, #176]	; (800a840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a794:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a79a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	fa93 f3a3 	rbit	r3, r3
 800a7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a7a6:	fab3 f383 	clz	r3, r3
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	4b26      	ldr	r3, [pc, #152]	; (800a848 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a7b0:	4413      	add	r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a7be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c2:	fa93 f3a3 	rbit	r3, r3
 800a7c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a7ca:	fab3 f383 	clz	r3, r3
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4b1d      	ldr	r3, [pc, #116]	; (800a848 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a7d4:	4413      	add	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	461a      	mov	r2, r3
 800a7da:	2300      	movs	r3, #0
 800a7dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a7de:	4a18      	ldr	r2, [pc, #96]	; (800a840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d04b      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7ee:	f7fa f8a1 	bl	8004934 <HAL_GetTick>
 800a7f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7f4:	e00a      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7f6:	f7fa f89d 	bl	8004934 <HAL_GetTick>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	f241 3288 	movw	r2, #5000	; 0x1388
 800a804:	4293      	cmp	r3, r2
 800a806:	d901      	bls.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a808:	2303      	movs	r3, #3
 800a80a:	e113      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a80c:	2302      	movs	r3, #2
 800a80e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	fa93 f3a3 	rbit	r3, r3
 800a816:	627b      	str	r3, [r7, #36]	; 0x24
 800a818:	2302      	movs	r3, #2
 800a81a:	623b      	str	r3, [r7, #32]
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	fa93 f3a3 	rbit	r3, r3
 800a822:	61fb      	str	r3, [r7, #28]
  return result;
 800a824:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a826:	fab3 f383 	clz	r3, r3
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	095b      	lsrs	r3, r3, #5
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	f043 0302 	orr.w	r3, r3, #2
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b02      	cmp	r3, #2
 800a838:	d108      	bne.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a83a:	4b01      	ldr	r3, [pc, #4]	; (800a840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	e00d      	b.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a840:	40021000 	.word	0x40021000
 800a844:	40007000 	.word	0x40007000
 800a848:	10908100 	.word	0x10908100
 800a84c:	2302      	movs	r3, #2
 800a84e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	fa93 f3a3 	rbit	r3, r3
 800a856:	617b      	str	r3, [r7, #20]
 800a858:	4b78      	ldr	r3, [pc, #480]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	2202      	movs	r2, #2
 800a85e:	613a      	str	r2, [r7, #16]
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	fa92 f2a2 	rbit	r2, r2
 800a866:	60fa      	str	r2, [r7, #12]
  return result;
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	fab2 f282 	clz	r2, r2
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a874:	b2d2      	uxtb	r2, r2
 800a876:	f002 021f 	and.w	r2, r2, #31
 800a87a:	2101      	movs	r1, #1
 800a87c:	fa01 f202 	lsl.w	r2, r1, r2
 800a880:	4013      	ands	r3, r2
 800a882:	2b00      	cmp	r3, #0
 800a884:	d0b7      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a886:	4b6d      	ldr	r3, [pc, #436]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	496a      	ldr	r1, [pc, #424]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a894:	4313      	orrs	r3, r2
 800a896:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a898:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d105      	bne.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8a0:	4b66      	ldr	r3, [pc, #408]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8a2:	69db      	ldr	r3, [r3, #28]
 800a8a4:	4a65      	ldr	r2, [pc, #404]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d008      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a8b8:	4b60      	ldr	r3, [pc, #384]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8bc:	f023 0203 	bic.w	r2, r3, #3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	495d      	ldr	r1, [pc, #372]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 0302 	and.w	r3, r3, #2
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d008      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a8d6:	4b59      	ldr	r3, [pc, #356]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	4956      	ldr	r1, [pc, #344]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d008      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a8f4:	4b51      	ldr	r3, [pc, #324]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	494e      	ldr	r1, [pc, #312]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a902:	4313      	orrs	r3, r2
 800a904:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 0320 	and.w	r3, r3, #32
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d008      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a912:	4b4a      	ldr	r3, [pc, #296]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a916:	f023 0210 	bic.w	r2, r3, #16
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	69db      	ldr	r3, [r3, #28]
 800a91e:	4947      	ldr	r1, [pc, #284]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a920:	4313      	orrs	r3, r2
 800a922:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d008      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a930:	4b42      	ldr	r3, [pc, #264]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93c:	493f      	ldr	r1, [pc, #252]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d008      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a94e:	4b3b      	ldr	r3, [pc, #236]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a952:	f023 0220 	bic.w	r2, r3, #32
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	4938      	ldr	r1, [pc, #224]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a95c:	4313      	orrs	r3, r2
 800a95e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0308 	and.w	r3, r3, #8
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d008      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a96c:	4b33      	ldr	r3, [pc, #204]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a970:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	695b      	ldr	r3, [r3, #20]
 800a978:	4930      	ldr	r1, [pc, #192]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a97a:	4313      	orrs	r3, r2
 800a97c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0310 	and.w	r3, r3, #16
 800a986:	2b00      	cmp	r3, #0
 800a988:	d008      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a98a:	4b2c      	ldr	r3, [pc, #176]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	4929      	ldr	r1, [pc, #164]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a998:	4313      	orrs	r3, r2
 800a99a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d008      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a9a8:	4b24      	ldr	r3, [pc, #144]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b4:	4921      	ldr	r1, [pc, #132]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d008      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a9c6:	4b1d      	ldr	r3, [pc, #116]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d2:	491a      	ldr	r1, [pc, #104]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d008      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a9e4:	4b15      	ldr	r3, [pc, #84]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f0:	4912      	ldr	r1, [pc, #72]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d008      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800aa02:	4b0e      	ldr	r3, [pc, #56]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aa04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0e:	490b      	ldr	r1, [pc, #44]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aa10:	4313      	orrs	r3, r2
 800aa12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d008      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800aa20:	4b06      	ldr	r3, [pc, #24]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aa22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2c:	4903      	ldr	r1, [pc, #12]	; (800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3748      	adds	r7, #72	; 0x48
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	40021000 	.word	0x40021000

0800aa40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e09d      	b.n	800ab8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d108      	bne.n	800aa6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa62:	d009      	beq.n	800aa78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	61da      	str	r2, [r3, #28]
 800aa6a:	e005      	b.n	800aa78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d106      	bne.n	800aa98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7f8 fff4 	bl	8003a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2202      	movs	r2, #2
 800aa9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aab8:	d902      	bls.n	800aac0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aaba:	2300      	movs	r3, #0
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	e002      	b.n	800aac6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aac4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aace:	d007      	beq.n	800aae0 <HAL_SPI_Init+0xa0>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aad8:	d002      	beq.n	800aae0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	431a      	orrs	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	431a      	orrs	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab18:	431a      	orrs	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab22:	ea42 0103 	orr.w	r1, r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	0c1b      	lsrs	r3, r3, #16
 800ab3c:	f003 0204 	and.w	r2, r3, #4
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab44:	f003 0310 	and.w	r3, r3, #16
 800ab48:	431a      	orrs	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab4e:	f003 0308 	and.w	r3, r3, #8
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ab5c:	ea42 0103 	orr.w	r1, r2, r3
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	69da      	ldr	r2, [r3, #28]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b088      	sub	sp, #32
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	60b9      	str	r1, [r7, #8]
 800aba0:	603b      	str	r3, [r7, #0]
 800aba2:	4613      	mov	r3, r2
 800aba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d101      	bne.n	800abb8 <HAL_SPI_Transmit+0x22>
 800abb4:	2302      	movs	r3, #2
 800abb6:	e15f      	b.n	800ae78 <HAL_SPI_Transmit+0x2e2>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abc0:	f7f9 feb8 	bl	8004934 <HAL_GetTick>
 800abc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800abc6:	88fb      	ldrh	r3, [r7, #6]
 800abc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d002      	beq.n	800abdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800abd6:	2302      	movs	r3, #2
 800abd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800abda:	e148      	b.n	800ae6e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d002      	beq.n	800abe8 <HAL_SPI_Transmit+0x52>
 800abe2:	88fb      	ldrh	r3, [r7, #6]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d102      	bne.n	800abee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	77fb      	strb	r3, [r7, #31]
    goto error;
 800abec:	e13f      	b.n	800ae6e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2203      	movs	r2, #3
 800abf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	88fa      	ldrh	r2, [r7, #6]
 800ac06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	88fa      	ldrh	r2, [r7, #6]
 800ac0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac38:	d10f      	bne.n	800ac5a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac64:	2b40      	cmp	r3, #64	; 0x40
 800ac66:	d007      	beq.n	800ac78 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ac80:	d94f      	bls.n	800ad22 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d002      	beq.n	800ac90 <HAL_SPI_Transmit+0xfa>
 800ac8a:	8afb      	ldrh	r3, [r7, #22]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d142      	bne.n	800ad16 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac94:	881a      	ldrh	r2, [r3, #0]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca0:	1c9a      	adds	r2, r3, #2
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acaa:	b29b      	uxth	r3, r3
 800acac:	3b01      	subs	r3, #1
 800acae:	b29a      	uxth	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800acb4:	e02f      	b.n	800ad16 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	f003 0302 	and.w	r3, r3, #2
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d112      	bne.n	800acea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc8:	881a      	ldrh	r2, [r3, #0]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd4:	1c9a      	adds	r2, r3, #2
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acde:	b29b      	uxth	r3, r3
 800ace0:	3b01      	subs	r3, #1
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ace8:	e015      	b.n	800ad16 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acea:	f7f9 fe23 	bl	8004934 <HAL_GetTick>
 800acee:	4602      	mov	r2, r0
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d803      	bhi.n	800ad02 <HAL_SPI_Transmit+0x16c>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad00:	d102      	bne.n	800ad08 <HAL_SPI_Transmit+0x172>
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d106      	bne.n	800ad16 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800ad14:	e0ab      	b.n	800ae6e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1ca      	bne.n	800acb6 <HAL_SPI_Transmit+0x120>
 800ad20:	e080      	b.n	800ae24 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <HAL_SPI_Transmit+0x19a>
 800ad2a:	8afb      	ldrh	r3, [r7, #22]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d174      	bne.n	800ae1a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d912      	bls.n	800ad60 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3e:	881a      	ldrh	r2, [r3, #0]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4a:	1c9a      	adds	r2, r3, #2
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	3b02      	subs	r3, #2
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ad5e:	e05c      	b.n	800ae1a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	330c      	adds	r3, #12
 800ad6a:	7812      	ldrb	r2, [r2, #0]
 800ad6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ad86:	e048      	b.n	800ae1a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	f003 0302 	and.w	r3, r3, #2
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d12b      	bne.n	800adee <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d912      	bls.n	800adc6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada4:	881a      	ldrh	r2, [r3, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb0:	1c9a      	adds	r2, r3, #2
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adba:	b29b      	uxth	r3, r3
 800adbc:	3b02      	subs	r3, #2
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800adc4:	e029      	b.n	800ae1a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	330c      	adds	r3, #12
 800add0:	7812      	ldrb	r2, [r2, #0]
 800add2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add8:	1c5a      	adds	r2, r3, #1
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	3b01      	subs	r3, #1
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800adec:	e015      	b.n	800ae1a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adee:	f7f9 fda1 	bl	8004934 <HAL_GetTick>
 800adf2:	4602      	mov	r2, r0
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d803      	bhi.n	800ae06 <HAL_SPI_Transmit+0x270>
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae04:	d102      	bne.n	800ae0c <HAL_SPI_Transmit+0x276>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d106      	bne.n	800ae1a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800ae18:	e029      	b.n	800ae6e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1b1      	bne.n	800ad88 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae24:	69ba      	ldr	r2, [r7, #24]
 800ae26:	6839      	ldr	r1, [r7, #0]
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f000 fad7 	bl	800b3dc <SPI_EndRxTxTransaction>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2220      	movs	r2, #32
 800ae38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10a      	bne.n	800ae58 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae42:	2300      	movs	r3, #0
 800ae44:	613b      	str	r3, [r7, #16]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	613b      	str	r3, [r7, #16]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	613b      	str	r3, [r7, #16]
 800ae56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	77fb      	strb	r3, [r7, #31]
 800ae64:	e003      	b.n	800ae6e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ae76:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3720      	adds	r7, #32
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d101      	bne.n	800aea0 <HAL_SPI_Transmit_DMA+0x20>
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	e0d4      	b.n	800b04a <HAL_SPI_Transmit_DMA+0x1ca>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d002      	beq.n	800aeba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aeb8:	e0c2      	b.n	800b040 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <HAL_SPI_Transmit_DMA+0x46>
 800aec0:	88fb      	ldrh	r3, [r7, #6]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d102      	bne.n	800aecc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aeca:	e0b9      	b.n	800b040 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2203      	movs	r2, #3
 800aed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	88fa      	ldrh	r2, [r7, #6]
 800aee4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	88fa      	ldrh	r2, [r7, #6]
 800aeea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af16:	d10f      	bne.n	800af38 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af3c:	4a45      	ldr	r2, [pc, #276]	; (800b054 <HAL_SPI_Transmit_DMA+0x1d4>)
 800af3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af44:	4a44      	ldr	r2, [pc, #272]	; (800b058 <HAL_SPI_Transmit_DMA+0x1d8>)
 800af46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af4c:	4a43      	ldr	r2, [pc, #268]	; (800b05c <HAL_SPI_Transmit_DMA+0x1dc>)
 800af4e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af54:	2200      	movs	r2, #0
 800af56:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af66:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800af70:	d82d      	bhi.n	800afce <HAL_SPI_Transmit_DMA+0x14e>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af76:	695b      	ldr	r3, [r3, #20]
 800af78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af7c:	d127      	bne.n	800afce <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af82:	b29b      	uxth	r3, r3
 800af84:	f003 0301 	and.w	r3, r3, #1
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10f      	bne.n	800afac <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af9a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	085b      	lsrs	r3, r3, #1
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800afaa:	e010      	b.n	800afce <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	685a      	ldr	r2, [r3, #4]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afba:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	085b      	lsrs	r3, r3, #1
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	3301      	adds	r3, #1
 800afc8:	b29a      	uxth	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd6:	4619      	mov	r1, r3
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	330c      	adds	r3, #12
 800afde:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afe4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800afe6:	f7fb fe5a 	bl	8006c9e <HAL_DMA_Start_IT>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d008      	beq.n	800b002 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aff4:	f043 0210 	orr.w	r2, r3, #16
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	75fb      	strb	r3, [r7, #23]

    goto error;
 800b000:	e01e      	b.n	800b040 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b00c:	2b40      	cmp	r3, #64	; 0x40
 800b00e:	d007      	beq.n	800b020 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b01e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f042 0220 	orr.w	r2, r2, #32
 800b02e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f042 0202 	orr.w	r2, r2, #2
 800b03e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b048:	7dfb      	ldrb	r3, [r7, #23]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3718      	adds	r7, #24
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	0800b143 	.word	0x0800b143
 800b058:	0800b09d 	.word	0x0800b09d
 800b05c:	0800b15f 	.word	0x0800b15f

0800b060 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b07c:	bf00      	nop
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0aa:	f7f9 fc43 	bl	8004934 <HAL_GetTick>
 800b0ae:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 0320 	and.w	r3, r3, #32
 800b0ba:	2b20      	cmp	r3, #32
 800b0bc:	d03b      	beq.n	800b136 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f022 0220 	bic.w	r2, r2, #32
 800b0cc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685a      	ldr	r2, [r3, #4]
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f022 0202 	bic.w	r2, r2, #2
 800b0dc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	2164      	movs	r1, #100	; 0x64
 800b0e2:	6978      	ldr	r0, [r7, #20]
 800b0e4:	f000 f97a 	bl	800b3dc <SPI_EndRxTxTransaction>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d005      	beq.n	800b0fa <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0f2:	f043 0220 	orr.w	r2, r3, #32
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10a      	bne.n	800b118 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b102:	2300      	movs	r3, #0
 800b104:	60fb      	str	r3, [r7, #12]
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	60fb      	str	r3, [r7, #12]
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2200      	movs	r2, #0
 800b11c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d003      	beq.n	800b136 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b12e:	6978      	ldr	r0, [r7, #20]
 800b130:	f7ff ffaa 	bl	800b088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b134:	e002      	b.n	800b13c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b136:	6978      	ldr	r0, [r7, #20]
 800b138:	f7ff ff92 	bl	800b060 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b13c:	3718      	adds	r7, #24
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7ff ff8f 	bl	800b074 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b156:	bf00      	nop
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b084      	sub	sp, #16
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	685a      	ldr	r2, [r3, #4]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f022 0203 	bic.w	r2, r2, #3
 800b17a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b180:	f043 0210 	orr.w	r2, r3, #16
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f7ff ff79 	bl	800b088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b196:	bf00      	nop
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
	...

0800b1a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b088      	sub	sp, #32
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b1b0:	f7f9 fbc0 	bl	8004934 <HAL_GetTick>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b8:	1a9b      	subs	r3, r3, r2
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	4413      	add	r3, r2
 800b1be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b1c0:	f7f9 fbb8 	bl	8004934 <HAL_GetTick>
 800b1c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b1c6:	4b39      	ldr	r3, [pc, #228]	; (800b2ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	015b      	lsls	r3, r3, #5
 800b1cc:	0d1b      	lsrs	r3, r3, #20
 800b1ce:	69fa      	ldr	r2, [r7, #28]
 800b1d0:	fb02 f303 	mul.w	r3, r2, r3
 800b1d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b1d6:	e054      	b.n	800b282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1de:	d050      	beq.n	800b282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b1e0:	f7f9 fba8 	bl	8004934 <HAL_GetTick>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	69fa      	ldr	r2, [r7, #28]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d902      	bls.n	800b1f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d13d      	bne.n	800b272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b20e:	d111      	bne.n	800b234 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b218:	d004      	beq.n	800b224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b222:	d107      	bne.n	800b234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b23c:	d10f      	bne.n	800b25e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b25c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2201      	movs	r2, #1
 800b262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b26e:	2303      	movs	r3, #3
 800b270:	e017      	b.n	800b2a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	3b01      	subs	r3, #1
 800b280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689a      	ldr	r2, [r3, #8]
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	4013      	ands	r3, r2
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	429a      	cmp	r2, r3
 800b290:	bf0c      	ite	eq
 800b292:	2301      	moveq	r3, #1
 800b294:	2300      	movne	r3, #0
 800b296:	b2db      	uxtb	r3, r3
 800b298:	461a      	mov	r2, r3
 800b29a:	79fb      	ldrb	r3, [r7, #7]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d19b      	bne.n	800b1d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3720      	adds	r7, #32
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20000098 	.word	0x20000098

0800b2b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08a      	sub	sp, #40	; 0x28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
 800b2bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b2c2:	f7f9 fb37 	bl	8004934 <HAL_GetTick>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	1a9b      	subs	r3, r3, r2
 800b2cc:	683a      	ldr	r2, [r7, #0]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b2d2:	f7f9 fb2f 	bl	8004934 <HAL_GetTick>
 800b2d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	330c      	adds	r3, #12
 800b2de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b2e0:	4b3d      	ldr	r3, [pc, #244]	; (800b3d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	00da      	lsls	r2, r3, #3
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	0d1b      	lsrs	r3, r3, #20
 800b2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2f2:	fb02 f303 	mul.w	r3, r2, r3
 800b2f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b2f8:	e060      	b.n	800b3bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b300:	d107      	bne.n	800b312 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d104      	bne.n	800b312 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b310:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b318:	d050      	beq.n	800b3bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b31a:	f7f9 fb0b 	bl	8004934 <HAL_GetTick>
 800b31e:	4602      	mov	r2, r0
 800b320:	6a3b      	ldr	r3, [r7, #32]
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b326:	429a      	cmp	r2, r3
 800b328:	d902      	bls.n	800b330 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d13d      	bne.n	800b3ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b33e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b348:	d111      	bne.n	800b36e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b352:	d004      	beq.n	800b35e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b35c:	d107      	bne.n	800b36e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b36c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b376:	d10f      	bne.n	800b398 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b386:	601a      	str	r2, [r3, #0]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	e010      	b.n	800b3ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	689a      	ldr	r2, [r3, #8]
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d196      	bne.n	800b2fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3728      	adds	r7, #40	; 0x28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20000098 	.word	0x20000098

0800b3dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af02      	add	r7, sp, #8
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f7ff ff5b 	bl	800b2b0 <SPI_WaitFifoStateUntilTimeout>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d007      	beq.n	800b410 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b404:	f043 0220 	orr.w	r2, r3, #32
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e027      	b.n	800b460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2200      	movs	r2, #0
 800b418:	2180      	movs	r1, #128	; 0x80
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f7ff fec0 	bl	800b1a0 <SPI_WaitFlagStateUntilTimeout>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d007      	beq.n	800b436 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b42a:	f043 0220 	orr.w	r2, r3, #32
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e014      	b.n	800b460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f7ff ff34 	bl	800b2b0 <SPI_WaitFifoStateUntilTimeout>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d007      	beq.n	800b45e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b452:	f043 0220 	orr.w	r2, r3, #32
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e000      	b.n	800b460 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	e049      	b.n	800b50e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b00      	cmp	r3, #0
 800b484:	d106      	bne.n	800b494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7f8 fb62 	bl	8003b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2202      	movs	r2, #2
 800b498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	f000 fed8 	bl	800c25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
	...

0800b518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b526:	b2db      	uxtb	r3, r3
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d001      	beq.n	800b530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e04a      	b.n	800b5c6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2202      	movs	r2, #2
 800b534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68da      	ldr	r2, [r3, #12]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f042 0201 	orr.w	r2, r2, #1
 800b546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a21      	ldr	r2, [pc, #132]	; (800b5d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d018      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x6c>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b55a:	d013      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x6c>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a1d      	ldr	r2, [pc, #116]	; (800b5d8 <HAL_TIM_Base_Start_IT+0xc0>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d00e      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x6c>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a1c      	ldr	r2, [pc, #112]	; (800b5dc <HAL_TIM_Base_Start_IT+0xc4>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d009      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x6c>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a1a      	ldr	r2, [pc, #104]	; (800b5e0 <HAL_TIM_Base_Start_IT+0xc8>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d004      	beq.n	800b584 <HAL_TIM_Base_Start_IT+0x6c>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a19      	ldr	r2, [pc, #100]	; (800b5e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d115      	bne.n	800b5b0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689a      	ldr	r2, [r3, #8]
 800b58a:	4b17      	ldr	r3, [pc, #92]	; (800b5e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b58c:	4013      	ands	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b06      	cmp	r3, #6
 800b594:	d015      	beq.n	800b5c2 <HAL_TIM_Base_Start_IT+0xaa>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b59c:	d011      	beq.n	800b5c2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f042 0201 	orr.w	r2, r2, #1
 800b5ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5ae:	e008      	b.n	800b5c2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f042 0201 	orr.w	r2, r2, #1
 800b5be:	601a      	str	r2, [r3, #0]
 800b5c0:	e000      	b.n	800b5c4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	40012c00 	.word	0x40012c00
 800b5d8:	40000400 	.word	0x40000400
 800b5dc:	40000800 	.word	0x40000800
 800b5e0:	40013400 	.word	0x40013400
 800b5e4:	40014000 	.word	0x40014000
 800b5e8:	00010007 	.word	0x00010007

0800b5ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68da      	ldr	r2, [r3, #12]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f022 0201 	bic.w	r2, r2, #1
 800b602:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6a1a      	ldr	r2, [r3, #32]
 800b60a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b60e:	4013      	ands	r3, r2
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10f      	bne.n	800b634 <HAL_TIM_Base_Stop_IT+0x48>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6a1a      	ldr	r2, [r3, #32]
 800b61a:	f240 4344 	movw	r3, #1092	; 0x444
 800b61e:	4013      	ands	r3, r2
 800b620:	2b00      	cmp	r3, #0
 800b622:	d107      	bne.n	800b634 <HAL_TIM_Base_Stop_IT+0x48>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f022 0201 	bic.w	r2, r2, #1
 800b632:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b082      	sub	sp, #8
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d101      	bne.n	800b65c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e049      	b.n	800b6f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b00      	cmp	r3, #0
 800b666:	d106      	bne.n	800b676 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7f8 fb27 	bl	8003cc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2202      	movs	r2, #2
 800b67a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	3304      	adds	r3, #4
 800b686:	4619      	mov	r1, r3
 800b688:	4610      	mov	r0, r2
 800b68a:	f000 fde7 	bl	800c25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2201      	movs	r2, #1
 800b69a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b702:	2300      	movs	r3, #0
 800b704:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d109      	bne.n	800b720 <HAL_TIM_PWM_Start_IT+0x28>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b712:	b2db      	uxtb	r3, r3
 800b714:	2b01      	cmp	r3, #1
 800b716:	bf14      	ite	ne
 800b718:	2301      	movne	r3, #1
 800b71a:	2300      	moveq	r3, #0
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	e03c      	b.n	800b79a <HAL_TIM_PWM_Start_IT+0xa2>
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2b04      	cmp	r3, #4
 800b724:	d109      	bne.n	800b73a <HAL_TIM_PWM_Start_IT+0x42>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b01      	cmp	r3, #1
 800b730:	bf14      	ite	ne
 800b732:	2301      	movne	r3, #1
 800b734:	2300      	moveq	r3, #0
 800b736:	b2db      	uxtb	r3, r3
 800b738:	e02f      	b.n	800b79a <HAL_TIM_PWM_Start_IT+0xa2>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	2b08      	cmp	r3, #8
 800b73e:	d109      	bne.n	800b754 <HAL_TIM_PWM_Start_IT+0x5c>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b746:	b2db      	uxtb	r3, r3
 800b748:	2b01      	cmp	r3, #1
 800b74a:	bf14      	ite	ne
 800b74c:	2301      	movne	r3, #1
 800b74e:	2300      	moveq	r3, #0
 800b750:	b2db      	uxtb	r3, r3
 800b752:	e022      	b.n	800b79a <HAL_TIM_PWM_Start_IT+0xa2>
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	2b0c      	cmp	r3, #12
 800b758:	d109      	bne.n	800b76e <HAL_TIM_PWM_Start_IT+0x76>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b01      	cmp	r3, #1
 800b764:	bf14      	ite	ne
 800b766:	2301      	movne	r3, #1
 800b768:	2300      	moveq	r3, #0
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	e015      	b.n	800b79a <HAL_TIM_PWM_Start_IT+0xa2>
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b10      	cmp	r3, #16
 800b772:	d109      	bne.n	800b788 <HAL_TIM_PWM_Start_IT+0x90>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	bf14      	ite	ne
 800b780:	2301      	movne	r3, #1
 800b782:	2300      	moveq	r3, #0
 800b784:	b2db      	uxtb	r3, r3
 800b786:	e008      	b.n	800b79a <HAL_TIM_PWM_Start_IT+0xa2>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b01      	cmp	r3, #1
 800b792:	bf14      	ite	ne
 800b794:	2301      	movne	r3, #1
 800b796:	2300      	moveq	r3, #0
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e0e2      	b.n	800b968 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d104      	bne.n	800b7b2 <HAL_TIM_PWM_Start_IT+0xba>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7b0:	e023      	b.n	800b7fa <HAL_TIM_PWM_Start_IT+0x102>
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	2b04      	cmp	r3, #4
 800b7b6:	d104      	bne.n	800b7c2 <HAL_TIM_PWM_Start_IT+0xca>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7c0:	e01b      	b.n	800b7fa <HAL_TIM_PWM_Start_IT+0x102>
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	2b08      	cmp	r3, #8
 800b7c6:	d104      	bne.n	800b7d2 <HAL_TIM_PWM_Start_IT+0xda>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7d0:	e013      	b.n	800b7fa <HAL_TIM_PWM_Start_IT+0x102>
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b0c      	cmp	r3, #12
 800b7d6:	d104      	bne.n	800b7e2 <HAL_TIM_PWM_Start_IT+0xea>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2202      	movs	r2, #2
 800b7dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7e0:	e00b      	b.n	800b7fa <HAL_TIM_PWM_Start_IT+0x102>
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b10      	cmp	r3, #16
 800b7e6:	d104      	bne.n	800b7f2 <HAL_TIM_PWM_Start_IT+0xfa>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7f0:	e003      	b.n	800b7fa <HAL_TIM_PWM_Start_IT+0x102>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2202      	movs	r2, #2
 800b7f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	2b0c      	cmp	r3, #12
 800b7fe:	d841      	bhi.n	800b884 <HAL_TIM_PWM_Start_IT+0x18c>
 800b800:	a201      	add	r2, pc, #4	; (adr r2, 800b808 <HAL_TIM_PWM_Start_IT+0x110>)
 800b802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b806:	bf00      	nop
 800b808:	0800b83d 	.word	0x0800b83d
 800b80c:	0800b885 	.word	0x0800b885
 800b810:	0800b885 	.word	0x0800b885
 800b814:	0800b885 	.word	0x0800b885
 800b818:	0800b84f 	.word	0x0800b84f
 800b81c:	0800b885 	.word	0x0800b885
 800b820:	0800b885 	.word	0x0800b885
 800b824:	0800b885 	.word	0x0800b885
 800b828:	0800b861 	.word	0x0800b861
 800b82c:	0800b885 	.word	0x0800b885
 800b830:	0800b885 	.word	0x0800b885
 800b834:	0800b885 	.word	0x0800b885
 800b838:	0800b873 	.word	0x0800b873
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	68da      	ldr	r2, [r3, #12]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f042 0202 	orr.w	r2, r2, #2
 800b84a:	60da      	str	r2, [r3, #12]
      break;
 800b84c:	e01d      	b.n	800b88a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68da      	ldr	r2, [r3, #12]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f042 0204 	orr.w	r2, r2, #4
 800b85c:	60da      	str	r2, [r3, #12]
      break;
 800b85e:	e014      	b.n	800b88a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68da      	ldr	r2, [r3, #12]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f042 0208 	orr.w	r2, r2, #8
 800b86e:	60da      	str	r2, [r3, #12]
      break;
 800b870:	e00b      	b.n	800b88a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68da      	ldr	r2, [r3, #12]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f042 0210 	orr.w	r2, r2, #16
 800b880:	60da      	str	r2, [r3, #12]
      break;
 800b882:	e002      	b.n	800b88a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	73fb      	strb	r3, [r7, #15]
      break;
 800b888:	bf00      	nop
  }

  if (status == HAL_OK)
 800b88a:	7bfb      	ldrb	r3, [r7, #15]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d16a      	bne.n	800b966 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2201      	movs	r2, #1
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	4618      	mov	r0, r3
 800b89a:	f001 f8df 	bl	800ca5c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a33      	ldr	r2, [pc, #204]	; (800b970 <HAL_TIM_PWM_Start_IT+0x278>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d013      	beq.n	800b8d0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a31      	ldr	r2, [pc, #196]	; (800b974 <HAL_TIM_PWM_Start_IT+0x27c>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d00e      	beq.n	800b8d0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a30      	ldr	r2, [pc, #192]	; (800b978 <HAL_TIM_PWM_Start_IT+0x280>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d009      	beq.n	800b8d0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a2e      	ldr	r2, [pc, #184]	; (800b97c <HAL_TIM_PWM_Start_IT+0x284>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d004      	beq.n	800b8d0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a2d      	ldr	r2, [pc, #180]	; (800b980 <HAL_TIM_PWM_Start_IT+0x288>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d101      	bne.n	800b8d4 <HAL_TIM_PWM_Start_IT+0x1dc>
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e000      	b.n	800b8d6 <HAL_TIM_PWM_Start_IT+0x1de>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d007      	beq.n	800b8ea <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a20      	ldr	r2, [pc, #128]	; (800b970 <HAL_TIM_PWM_Start_IT+0x278>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d018      	beq.n	800b926 <HAL_TIM_PWM_Start_IT+0x22e>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8fc:	d013      	beq.n	800b926 <HAL_TIM_PWM_Start_IT+0x22e>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a20      	ldr	r2, [pc, #128]	; (800b984 <HAL_TIM_PWM_Start_IT+0x28c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d00e      	beq.n	800b926 <HAL_TIM_PWM_Start_IT+0x22e>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a1e      	ldr	r2, [pc, #120]	; (800b988 <HAL_TIM_PWM_Start_IT+0x290>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d009      	beq.n	800b926 <HAL_TIM_PWM_Start_IT+0x22e>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a17      	ldr	r2, [pc, #92]	; (800b974 <HAL_TIM_PWM_Start_IT+0x27c>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d004      	beq.n	800b926 <HAL_TIM_PWM_Start_IT+0x22e>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a15      	ldr	r2, [pc, #84]	; (800b978 <HAL_TIM_PWM_Start_IT+0x280>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d115      	bne.n	800b952 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	4b17      	ldr	r3, [pc, #92]	; (800b98c <HAL_TIM_PWM_Start_IT+0x294>)
 800b92e:	4013      	ands	r3, r2
 800b930:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	2b06      	cmp	r3, #6
 800b936:	d015      	beq.n	800b964 <HAL_TIM_PWM_Start_IT+0x26c>
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b93e:	d011      	beq.n	800b964 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f042 0201 	orr.w	r2, r2, #1
 800b94e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b950:	e008      	b.n	800b964 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f042 0201 	orr.w	r2, r2, #1
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	e000      	b.n	800b966 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b964:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b966:	7bfb      	ldrb	r3, [r7, #15]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	40012c00 	.word	0x40012c00
 800b974:	40013400 	.word	0x40013400
 800b978:	40014000 	.word	0x40014000
 800b97c:	40014400 	.word	0x40014400
 800b980:	40014800 	.word	0x40014800
 800b984:	40000400 	.word	0x40000400
 800b988:	40000800 	.word	0x40000800
 800b98c:	00010007 	.word	0x00010007

0800b990 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e097      	b.n	800bad4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d106      	bne.n	800b9be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f7f8 f91b 	bl	8003bf4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	6812      	ldr	r2, [r2, #0]
 800b9d0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800b9d4:	f023 0307 	bic.w	r3, r3, #7
 800b9d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	f000 fc39 	bl	800c25c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6a1b      	ldr	r3, [r3, #32]
 800ba00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba12:	f023 0303 	bic.w	r3, r3, #3
 800ba16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	689a      	ldr	r2, [r3, #8]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	021b      	lsls	r3, r3, #8
 800ba22:	4313      	orrs	r3, r2
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ba30:	f023 030c 	bic.w	r3, r3, #12
 800ba34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	68da      	ldr	r2, [r3, #12]
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	69db      	ldr	r3, [r3, #28]
 800ba4a:	021b      	lsls	r3, r3, #8
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	011a      	lsls	r2, r3, #4
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	031b      	lsls	r3, r3, #12
 800ba60:	4313      	orrs	r3, r2
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ba6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ba76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	695b      	ldr	r3, [r3, #20]
 800ba80:	011b      	lsls	r3, r3, #4
 800ba82:	4313      	orrs	r3, r2
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2201      	movs	r2, #1
 800baa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2201      	movs	r2, #1
 800bace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3718      	adds	r7, #24
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800baec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800baf4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bafc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d110      	bne.n	800bb2e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d102      	bne.n	800bb18 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bb12:	7b7b      	ldrb	r3, [r7, #13]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d001      	beq.n	800bb1c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e089      	b.n	800bc30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2202      	movs	r2, #2
 800bb20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2202      	movs	r2, #2
 800bb28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb2c:	e031      	b.n	800bb92 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	d110      	bne.n	800bb56 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bb34:	7bbb      	ldrb	r3, [r7, #14]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d102      	bne.n	800bb40 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bb3a:	7b3b      	ldrb	r3, [r7, #12]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d001      	beq.n	800bb44 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	e075      	b.n	800bc30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2202      	movs	r2, #2
 800bb48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2202      	movs	r2, #2
 800bb50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb54:	e01d      	b.n	800bb92 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d108      	bne.n	800bb6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d105      	bne.n	800bb6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bb62:	7b7b      	ldrb	r3, [r7, #13]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d102      	bne.n	800bb6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bb68:	7b3b      	ldrb	r3, [r7, #12]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d001      	beq.n	800bb72 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e05e      	b.n	800bc30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2202      	movs	r2, #2
 800bb76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2202      	movs	r2, #2
 800bb7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2202      	movs	r2, #2
 800bb86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2202      	movs	r2, #2
 800bb8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d003      	beq.n	800bba0 <HAL_TIM_Encoder_Start_IT+0xc4>
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2b04      	cmp	r3, #4
 800bb9c:	d010      	beq.n	800bbc0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800bb9e:	e01f      	b.n	800bbe0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2201      	movs	r2, #1
 800bba6:	2100      	movs	r1, #0
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 ff57 	bl	800ca5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68da      	ldr	r2, [r3, #12]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f042 0202 	orr.w	r2, r2, #2
 800bbbc:	60da      	str	r2, [r3, #12]
      break;
 800bbbe:	e02e      	b.n	800bc1e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	2104      	movs	r1, #4
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 ff47 	bl	800ca5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68da      	ldr	r2, [r3, #12]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f042 0204 	orr.w	r2, r2, #4
 800bbdc:	60da      	str	r2, [r3, #12]
      break;
 800bbde:	e01e      	b.n	800bc1e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 ff37 	bl	800ca5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	2104      	movs	r1, #4
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f000 ff30 	bl	800ca5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68da      	ldr	r2, [r3, #12]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f042 0202 	orr.w	r2, r2, #2
 800bc0a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68da      	ldr	r2, [r3, #12]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f042 0204 	orr.w	r2, r2, #4
 800bc1a:	60da      	str	r2, [r3, #12]
      break;
 800bc1c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f042 0201 	orr.w	r2, r2, #1
 800bc2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f003 0302 	and.w	r3, r3, #2
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d122      	bne.n	800bc94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	f003 0302 	and.w	r3, r3, #2
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d11b      	bne.n	800bc94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f06f 0202 	mvn.w	r2, #2
 800bc64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	f003 0303 	and.w	r3, r3, #3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d003      	beq.n	800bc82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7f5 fe2e 	bl	80018dc <HAL_TIM_IC_CaptureCallback>
 800bc80:	e005      	b.n	800bc8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 fad5 	bl	800c232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7f5 fe4d 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	f003 0304 	and.w	r3, r3, #4
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	d122      	bne.n	800bce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	f003 0304 	and.w	r3, r3, #4
 800bcac:	2b04      	cmp	r3, #4
 800bcae:	d11b      	bne.n	800bce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f06f 0204 	mvn.w	r2, #4
 800bcb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2202      	movs	r2, #2
 800bcbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d003      	beq.n	800bcd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7f5 fe04 	bl	80018dc <HAL_TIM_IC_CaptureCallback>
 800bcd4:	e005      	b.n	800bce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 faab 	bl	800c232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7f5 fe23 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	f003 0308 	and.w	r3, r3, #8
 800bcf2:	2b08      	cmp	r3, #8
 800bcf4:	d122      	bne.n	800bd3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	f003 0308 	and.w	r3, r3, #8
 800bd00:	2b08      	cmp	r3, #8
 800bd02:	d11b      	bne.n	800bd3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f06f 0208 	mvn.w	r2, #8
 800bd0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2204      	movs	r2, #4
 800bd12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	f003 0303 	and.w	r3, r3, #3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d003      	beq.n	800bd2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7f5 fdda 	bl	80018dc <HAL_TIM_IC_CaptureCallback>
 800bd28:	e005      	b.n	800bd36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fa81 	bl	800c232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7f5 fdf9 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	f003 0310 	and.w	r3, r3, #16
 800bd46:	2b10      	cmp	r3, #16
 800bd48:	d122      	bne.n	800bd90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	f003 0310 	and.w	r3, r3, #16
 800bd54:	2b10      	cmp	r3, #16
 800bd56:	d11b      	bne.n	800bd90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f06f 0210 	mvn.w	r2, #16
 800bd60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2208      	movs	r2, #8
 800bd66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	69db      	ldr	r3, [r3, #28]
 800bd6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d003      	beq.n	800bd7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7f5 fdb0 	bl	80018dc <HAL_TIM_IC_CaptureCallback>
 800bd7c:	e005      	b.n	800bd8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fa57 	bl	800c232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7f5 fdcf 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d10e      	bne.n	800bdbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	f003 0301 	and.w	r3, r3, #1
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d107      	bne.n	800bdbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f06f 0201 	mvn.w	r2, #1
 800bdb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7f5 fdde 	bl	8001978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdc6:	2b80      	cmp	r3, #128	; 0x80
 800bdc8:	d10e      	bne.n	800bde8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdd4:	2b80      	cmp	r3, #128	; 0x80
 800bdd6:	d107      	bne.n	800bde8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bde0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 f81c 	bl	800ce20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdf6:	d10e      	bne.n	800be16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be02:	2b80      	cmp	r3, #128	; 0x80
 800be04:	d107      	bne.n	800be16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800be0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f001 f80f 	bl	800ce34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be20:	2b40      	cmp	r3, #64	; 0x40
 800be22:	d10e      	bne.n	800be42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be2e:	2b40      	cmp	r3, #64	; 0x40
 800be30:	d107      	bne.n	800be42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800be3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fa02 	bl	800c246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	f003 0320 	and.w	r3, r3, #32
 800be4c:	2b20      	cmp	r3, #32
 800be4e:	d10e      	bne.n	800be6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	f003 0320 	and.w	r3, r3, #32
 800be5a:	2b20      	cmp	r3, #32
 800be5c:	d107      	bne.n	800be6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f06f 0220 	mvn.w	r2, #32
 800be66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 ffcf 	bl	800ce0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be6e:	bf00      	nop
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
	...

0800be78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d101      	bne.n	800be96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800be92:	2302      	movs	r3, #2
 800be94:	e0ff      	b.n	800c096 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b14      	cmp	r3, #20
 800bea2:	f200 80f0 	bhi.w	800c086 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bea6:	a201      	add	r2, pc, #4	; (adr r2, 800beac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beac:	0800bf01 	.word	0x0800bf01
 800beb0:	0800c087 	.word	0x0800c087
 800beb4:	0800c087 	.word	0x0800c087
 800beb8:	0800c087 	.word	0x0800c087
 800bebc:	0800bf41 	.word	0x0800bf41
 800bec0:	0800c087 	.word	0x0800c087
 800bec4:	0800c087 	.word	0x0800c087
 800bec8:	0800c087 	.word	0x0800c087
 800becc:	0800bf83 	.word	0x0800bf83
 800bed0:	0800c087 	.word	0x0800c087
 800bed4:	0800c087 	.word	0x0800c087
 800bed8:	0800c087 	.word	0x0800c087
 800bedc:	0800bfc3 	.word	0x0800bfc3
 800bee0:	0800c087 	.word	0x0800c087
 800bee4:	0800c087 	.word	0x0800c087
 800bee8:	0800c087 	.word	0x0800c087
 800beec:	0800c005 	.word	0x0800c005
 800bef0:	0800c087 	.word	0x0800c087
 800bef4:	0800c087 	.word	0x0800c087
 800bef8:	0800c087 	.word	0x0800c087
 800befc:	0800c045 	.word	0x0800c045
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68b9      	ldr	r1, [r7, #8]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f000 fa38 	bl	800c37c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	699a      	ldr	r2, [r3, #24]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f042 0208 	orr.w	r2, r2, #8
 800bf1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	699a      	ldr	r2, [r3, #24]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f022 0204 	bic.w	r2, r2, #4
 800bf2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6999      	ldr	r1, [r3, #24]
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	691a      	ldr	r2, [r3, #16]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	430a      	orrs	r2, r1
 800bf3c:	619a      	str	r2, [r3, #24]
      break;
 800bf3e:	e0a5      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68b9      	ldr	r1, [r7, #8]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f000 faa8 	bl	800c49c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	699a      	ldr	r2, [r3, #24]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	699a      	ldr	r2, [r3, #24]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6999      	ldr	r1, [r3, #24]
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	021a      	lsls	r2, r3, #8
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	619a      	str	r2, [r3, #24]
      break;
 800bf80:	e084      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68b9      	ldr	r1, [r7, #8]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 fb11 	bl	800c5b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	69da      	ldr	r2, [r3, #28]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f042 0208 	orr.w	r2, r2, #8
 800bf9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	69da      	ldr	r2, [r3, #28]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f022 0204 	bic.w	r2, r2, #4
 800bfac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	69d9      	ldr	r1, [r3, #28]
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	691a      	ldr	r2, [r3, #16]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	430a      	orrs	r2, r1
 800bfbe:	61da      	str	r2, [r3, #28]
      break;
 800bfc0:	e064      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68b9      	ldr	r1, [r7, #8]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f000 fb79 	bl	800c6c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	69da      	ldr	r2, [r3, #28]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bfdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	69da      	ldr	r2, [r3, #28]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	69d9      	ldr	r1, [r3, #28]
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	021a      	lsls	r2, r3, #8
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	430a      	orrs	r2, r1
 800c000:	61da      	str	r2, [r3, #28]
      break;
 800c002:	e043      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68b9      	ldr	r1, [r7, #8]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 fbc2 	bl	800c794 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f042 0208 	orr.w	r2, r2, #8
 800c01e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f022 0204 	bic.w	r2, r2, #4
 800c02e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	691a      	ldr	r2, [r3, #16]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	430a      	orrs	r2, r1
 800c040:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c042:	e023      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	68b9      	ldr	r1, [r7, #8]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 fc06 	bl	800c85c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c05e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c06e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	691b      	ldr	r3, [r3, #16]
 800c07a:	021a      	lsls	r2, r3, #8
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	430a      	orrs	r2, r1
 800c082:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c084:	e002      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	75fb      	strb	r3, [r7, #23]
      break;
 800c08a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c094:	7dfb      	ldrb	r3, [r7, #23]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop

0800c0a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d101      	bne.n	800c0bc <HAL_TIM_ConfigClockSource+0x1c>
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	e0b6      	b.n	800c22a <HAL_TIM_ConfigClockSource+0x18a>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c0de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0f8:	d03e      	beq.n	800c178 <HAL_TIM_ConfigClockSource+0xd8>
 800c0fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0fe:	f200 8087 	bhi.w	800c210 <HAL_TIM_ConfigClockSource+0x170>
 800c102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c106:	f000 8086 	beq.w	800c216 <HAL_TIM_ConfigClockSource+0x176>
 800c10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c10e:	d87f      	bhi.n	800c210 <HAL_TIM_ConfigClockSource+0x170>
 800c110:	2b70      	cmp	r3, #112	; 0x70
 800c112:	d01a      	beq.n	800c14a <HAL_TIM_ConfigClockSource+0xaa>
 800c114:	2b70      	cmp	r3, #112	; 0x70
 800c116:	d87b      	bhi.n	800c210 <HAL_TIM_ConfigClockSource+0x170>
 800c118:	2b60      	cmp	r3, #96	; 0x60
 800c11a:	d050      	beq.n	800c1be <HAL_TIM_ConfigClockSource+0x11e>
 800c11c:	2b60      	cmp	r3, #96	; 0x60
 800c11e:	d877      	bhi.n	800c210 <HAL_TIM_ConfigClockSource+0x170>
 800c120:	2b50      	cmp	r3, #80	; 0x50
 800c122:	d03c      	beq.n	800c19e <HAL_TIM_ConfigClockSource+0xfe>
 800c124:	2b50      	cmp	r3, #80	; 0x50
 800c126:	d873      	bhi.n	800c210 <HAL_TIM_ConfigClockSource+0x170>
 800c128:	2b40      	cmp	r3, #64	; 0x40
 800c12a:	d058      	beq.n	800c1de <HAL_TIM_ConfigClockSource+0x13e>
 800c12c:	2b40      	cmp	r3, #64	; 0x40
 800c12e:	d86f      	bhi.n	800c210 <HAL_TIM_ConfigClockSource+0x170>
 800c130:	2b30      	cmp	r3, #48	; 0x30
 800c132:	d064      	beq.n	800c1fe <HAL_TIM_ConfigClockSource+0x15e>
 800c134:	2b30      	cmp	r3, #48	; 0x30
 800c136:	d86b      	bhi.n	800c210 <HAL_TIM_ConfigClockSource+0x170>
 800c138:	2b20      	cmp	r3, #32
 800c13a:	d060      	beq.n	800c1fe <HAL_TIM_ConfigClockSource+0x15e>
 800c13c:	2b20      	cmp	r3, #32
 800c13e:	d867      	bhi.n	800c210 <HAL_TIM_ConfigClockSource+0x170>
 800c140:	2b00      	cmp	r3, #0
 800c142:	d05c      	beq.n	800c1fe <HAL_TIM_ConfigClockSource+0x15e>
 800c144:	2b10      	cmp	r3, #16
 800c146:	d05a      	beq.n	800c1fe <HAL_TIM_ConfigClockSource+0x15e>
 800c148:	e062      	b.n	800c210 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c15a:	f000 fc5f 	bl	800ca1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c16c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	609a      	str	r2, [r3, #8]
      break;
 800c176:	e04f      	b.n	800c218 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c188:	f000 fc48 	bl	800ca1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	689a      	ldr	r2, [r3, #8]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c19a:	609a      	str	r2, [r3, #8]
      break;
 800c19c:	e03c      	b.n	800c218 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	f000 fbbc 	bl	800c928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2150      	movs	r1, #80	; 0x50
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 fc15 	bl	800c9e6 <TIM_ITRx_SetConfig>
      break;
 800c1bc:	e02c      	b.n	800c218 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	f000 fbdb 	bl	800c986 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2160      	movs	r1, #96	; 0x60
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f000 fc05 	bl	800c9e6 <TIM_ITRx_SetConfig>
      break;
 800c1dc:	e01c      	b.n	800c218 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f000 fb9c 	bl	800c928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2140      	movs	r1, #64	; 0x40
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 fbf5 	bl	800c9e6 <TIM_ITRx_SetConfig>
      break;
 800c1fc:	e00c      	b.n	800c218 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4619      	mov	r1, r3
 800c208:	4610      	mov	r0, r2
 800c20a:	f000 fbec 	bl	800c9e6 <TIM_ITRx_SetConfig>
      break;
 800c20e:	e003      	b.n	800c218 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	73fb      	strb	r3, [r7, #15]
      break;
 800c214:	e000      	b.n	800c218 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c228:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c232:	b480      	push	{r7}
 800c234:	b083      	sub	sp, #12
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c23a:	bf00      	nop
 800c23c:	370c      	adds	r7, #12
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr

0800c246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c246:	b480      	push	{r7}
 800c248:	b083      	sub	sp, #12
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c24e:	bf00      	nop
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
	...

0800c25c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a3c      	ldr	r2, [pc, #240]	; (800c360 <TIM_Base_SetConfig+0x104>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d00f      	beq.n	800c294 <TIM_Base_SetConfig+0x38>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c27a:	d00b      	beq.n	800c294 <TIM_Base_SetConfig+0x38>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a39      	ldr	r2, [pc, #228]	; (800c364 <TIM_Base_SetConfig+0x108>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d007      	beq.n	800c294 <TIM_Base_SetConfig+0x38>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a38      	ldr	r2, [pc, #224]	; (800c368 <TIM_Base_SetConfig+0x10c>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d003      	beq.n	800c294 <TIM_Base_SetConfig+0x38>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a37      	ldr	r2, [pc, #220]	; (800c36c <TIM_Base_SetConfig+0x110>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d108      	bne.n	800c2a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c29a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a2d      	ldr	r2, [pc, #180]	; (800c360 <TIM_Base_SetConfig+0x104>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d01b      	beq.n	800c2e6 <TIM_Base_SetConfig+0x8a>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2b4:	d017      	beq.n	800c2e6 <TIM_Base_SetConfig+0x8a>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a2a      	ldr	r2, [pc, #168]	; (800c364 <TIM_Base_SetConfig+0x108>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d013      	beq.n	800c2e6 <TIM_Base_SetConfig+0x8a>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a29      	ldr	r2, [pc, #164]	; (800c368 <TIM_Base_SetConfig+0x10c>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d00f      	beq.n	800c2e6 <TIM_Base_SetConfig+0x8a>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a28      	ldr	r2, [pc, #160]	; (800c36c <TIM_Base_SetConfig+0x110>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d00b      	beq.n	800c2e6 <TIM_Base_SetConfig+0x8a>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a27      	ldr	r2, [pc, #156]	; (800c370 <TIM_Base_SetConfig+0x114>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d007      	beq.n	800c2e6 <TIM_Base_SetConfig+0x8a>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a26      	ldr	r2, [pc, #152]	; (800c374 <TIM_Base_SetConfig+0x118>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d003      	beq.n	800c2e6 <TIM_Base_SetConfig+0x8a>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a25      	ldr	r2, [pc, #148]	; (800c378 <TIM_Base_SetConfig+0x11c>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d108      	bne.n	800c2f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	695b      	ldr	r3, [r3, #20]
 800c302:	4313      	orrs	r3, r2
 800c304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	689a      	ldr	r2, [r3, #8]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a10      	ldr	r2, [pc, #64]	; (800c360 <TIM_Base_SetConfig+0x104>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d00f      	beq.n	800c344 <TIM_Base_SetConfig+0xe8>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	4a11      	ldr	r2, [pc, #68]	; (800c36c <TIM_Base_SetConfig+0x110>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d00b      	beq.n	800c344 <TIM_Base_SetConfig+0xe8>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4a10      	ldr	r2, [pc, #64]	; (800c370 <TIM_Base_SetConfig+0x114>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d007      	beq.n	800c344 <TIM_Base_SetConfig+0xe8>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4a0f      	ldr	r2, [pc, #60]	; (800c374 <TIM_Base_SetConfig+0x118>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d003      	beq.n	800c344 <TIM_Base_SetConfig+0xe8>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a0e      	ldr	r2, [pc, #56]	; (800c378 <TIM_Base_SetConfig+0x11c>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d103      	bne.n	800c34c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	691a      	ldr	r2, [r3, #16]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	615a      	str	r2, [r3, #20]
}
 800c352:	bf00      	nop
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	40012c00 	.word	0x40012c00
 800c364:	40000400 	.word	0x40000400
 800c368:	40000800 	.word	0x40000800
 800c36c:	40013400 	.word	0x40013400
 800c370:	40014000 	.word	0x40014000
 800c374:	40014400 	.word	0x40014400
 800c378:	40014800 	.word	0x40014800

0800c37c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b087      	sub	sp, #28
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a1b      	ldr	r3, [r3, #32]
 800c38a:	f023 0201 	bic.w	r2, r3, #1
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a1b      	ldr	r3, [r3, #32]
 800c396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f023 0303 	bic.w	r3, r3, #3
 800c3b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	f023 0302 	bic.w	r3, r3, #2
 800c3c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	697a      	ldr	r2, [r7, #20]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a2c      	ldr	r2, [pc, #176]	; (800c488 <TIM_OC1_SetConfig+0x10c>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d00f      	beq.n	800c3fc <TIM_OC1_SetConfig+0x80>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a2b      	ldr	r2, [pc, #172]	; (800c48c <TIM_OC1_SetConfig+0x110>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d00b      	beq.n	800c3fc <TIM_OC1_SetConfig+0x80>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a2a      	ldr	r2, [pc, #168]	; (800c490 <TIM_OC1_SetConfig+0x114>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d007      	beq.n	800c3fc <TIM_OC1_SetConfig+0x80>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a29      	ldr	r2, [pc, #164]	; (800c494 <TIM_OC1_SetConfig+0x118>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d003      	beq.n	800c3fc <TIM_OC1_SetConfig+0x80>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a28      	ldr	r2, [pc, #160]	; (800c498 <TIM_OC1_SetConfig+0x11c>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d10c      	bne.n	800c416 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	f023 0308 	bic.w	r3, r3, #8
 800c402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f023 0304 	bic.w	r3, r3, #4
 800c414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4a1b      	ldr	r2, [pc, #108]	; (800c488 <TIM_OC1_SetConfig+0x10c>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d00f      	beq.n	800c43e <TIM_OC1_SetConfig+0xc2>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4a1a      	ldr	r2, [pc, #104]	; (800c48c <TIM_OC1_SetConfig+0x110>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d00b      	beq.n	800c43e <TIM_OC1_SetConfig+0xc2>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4a19      	ldr	r2, [pc, #100]	; (800c490 <TIM_OC1_SetConfig+0x114>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d007      	beq.n	800c43e <TIM_OC1_SetConfig+0xc2>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a18      	ldr	r2, [pc, #96]	; (800c494 <TIM_OC1_SetConfig+0x118>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d003      	beq.n	800c43e <TIM_OC1_SetConfig+0xc2>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a17      	ldr	r2, [pc, #92]	; (800c498 <TIM_OC1_SetConfig+0x11c>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d111      	bne.n	800c462 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c44c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	693a      	ldr	r2, [r7, #16]
 800c454:	4313      	orrs	r3, r2
 800c456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	699b      	ldr	r3, [r3, #24]
 800c45c:	693a      	ldr	r2, [r7, #16]
 800c45e:	4313      	orrs	r3, r2
 800c460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	685a      	ldr	r2, [r3, #4]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	697a      	ldr	r2, [r7, #20]
 800c47a:	621a      	str	r2, [r3, #32]
}
 800c47c:	bf00      	nop
 800c47e:	371c      	adds	r7, #28
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	40012c00 	.word	0x40012c00
 800c48c:	40013400 	.word	0x40013400
 800c490:	40014000 	.word	0x40014000
 800c494:	40014400 	.word	0x40014400
 800c498:	40014800 	.word	0x40014800

0800c49c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b087      	sub	sp, #28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a1b      	ldr	r3, [r3, #32]
 800c4aa:	f023 0210 	bic.w	r2, r3, #16
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a1b      	ldr	r3, [r3, #32]
 800c4b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c4ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	021b      	lsls	r3, r3, #8
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	f023 0320 	bic.w	r3, r3, #32
 800c4ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	011b      	lsls	r3, r3, #4
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a28      	ldr	r2, [pc, #160]	; (800c59c <TIM_OC2_SetConfig+0x100>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d003      	beq.n	800c508 <TIM_OC2_SetConfig+0x6c>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4a27      	ldr	r2, [pc, #156]	; (800c5a0 <TIM_OC2_SetConfig+0x104>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d10d      	bne.n	800c524 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c50e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	011b      	lsls	r3, r3, #4
 800c516:	697a      	ldr	r2, [r7, #20]
 800c518:	4313      	orrs	r3, r2
 800c51a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c522:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4a1d      	ldr	r2, [pc, #116]	; (800c59c <TIM_OC2_SetConfig+0x100>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d00f      	beq.n	800c54c <TIM_OC2_SetConfig+0xb0>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4a1c      	ldr	r2, [pc, #112]	; (800c5a0 <TIM_OC2_SetConfig+0x104>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d00b      	beq.n	800c54c <TIM_OC2_SetConfig+0xb0>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a1b      	ldr	r2, [pc, #108]	; (800c5a4 <TIM_OC2_SetConfig+0x108>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d007      	beq.n	800c54c <TIM_OC2_SetConfig+0xb0>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a1a      	ldr	r2, [pc, #104]	; (800c5a8 <TIM_OC2_SetConfig+0x10c>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d003      	beq.n	800c54c <TIM_OC2_SetConfig+0xb0>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a19      	ldr	r2, [pc, #100]	; (800c5ac <TIM_OC2_SetConfig+0x110>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d113      	bne.n	800c574 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c552:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c55a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	695b      	ldr	r3, [r3, #20]
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	693a      	ldr	r2, [r7, #16]
 800c564:	4313      	orrs	r3, r2
 800c566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	4313      	orrs	r3, r2
 800c572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	685a      	ldr	r2, [r3, #4]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	621a      	str	r2, [r3, #32]
}
 800c58e:	bf00      	nop
 800c590:	371c      	adds	r7, #28
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	40012c00 	.word	0x40012c00
 800c5a0:	40013400 	.word	0x40013400
 800c5a4:	40014000 	.word	0x40014000
 800c5a8:	40014400 	.word	0x40014400
 800c5ac:	40014800 	.word	0x40014800

0800c5b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b087      	sub	sp, #28
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6a1b      	ldr	r3, [r3, #32]
 800c5be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	69db      	ldr	r3, [r3, #28]
 800c5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f023 0303 	bic.w	r3, r3, #3
 800c5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	021b      	lsls	r3, r3, #8
 800c604:	697a      	ldr	r2, [r7, #20]
 800c606:	4313      	orrs	r3, r2
 800c608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a27      	ldr	r2, [pc, #156]	; (800c6ac <TIM_OC3_SetConfig+0xfc>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d003      	beq.n	800c61a <TIM_OC3_SetConfig+0x6a>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a26      	ldr	r2, [pc, #152]	; (800c6b0 <TIM_OC3_SetConfig+0x100>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d10d      	bne.n	800c636 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	021b      	lsls	r3, r3, #8
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c634:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4a1c      	ldr	r2, [pc, #112]	; (800c6ac <TIM_OC3_SetConfig+0xfc>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d00f      	beq.n	800c65e <TIM_OC3_SetConfig+0xae>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a1b      	ldr	r2, [pc, #108]	; (800c6b0 <TIM_OC3_SetConfig+0x100>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d00b      	beq.n	800c65e <TIM_OC3_SetConfig+0xae>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a1a      	ldr	r2, [pc, #104]	; (800c6b4 <TIM_OC3_SetConfig+0x104>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d007      	beq.n	800c65e <TIM_OC3_SetConfig+0xae>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4a19      	ldr	r2, [pc, #100]	; (800c6b8 <TIM_OC3_SetConfig+0x108>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d003      	beq.n	800c65e <TIM_OC3_SetConfig+0xae>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a18      	ldr	r2, [pc, #96]	; (800c6bc <TIM_OC3_SetConfig+0x10c>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d113      	bne.n	800c686 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c66c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	695b      	ldr	r3, [r3, #20]
 800c672:	011b      	lsls	r3, r3, #4
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	4313      	orrs	r3, r2
 800c678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	699b      	ldr	r3, [r3, #24]
 800c67e:	011b      	lsls	r3, r3, #4
 800c680:	693a      	ldr	r2, [r7, #16]
 800c682:	4313      	orrs	r3, r2
 800c684:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	621a      	str	r2, [r3, #32]
}
 800c6a0:	bf00      	nop
 800c6a2:	371c      	adds	r7, #28
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	40012c00 	.word	0x40012c00
 800c6b0:	40013400 	.word	0x40013400
 800c6b4:	40014000 	.word	0x40014000
 800c6b8:	40014400 	.word	0x40014400
 800c6bc:	40014800 	.word	0x40014800

0800c6c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a1b      	ldr	r3, [r3, #32]
 800c6ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	69db      	ldr	r3, [r3, #28]
 800c6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	021b      	lsls	r3, r3, #8
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	4313      	orrs	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c70e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	031b      	lsls	r3, r3, #12
 800c716:	693a      	ldr	r2, [r7, #16]
 800c718:	4313      	orrs	r3, r2
 800c71a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4a18      	ldr	r2, [pc, #96]	; (800c780 <TIM_OC4_SetConfig+0xc0>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d00f      	beq.n	800c744 <TIM_OC4_SetConfig+0x84>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4a17      	ldr	r2, [pc, #92]	; (800c784 <TIM_OC4_SetConfig+0xc4>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d00b      	beq.n	800c744 <TIM_OC4_SetConfig+0x84>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a16      	ldr	r2, [pc, #88]	; (800c788 <TIM_OC4_SetConfig+0xc8>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d007      	beq.n	800c744 <TIM_OC4_SetConfig+0x84>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a15      	ldr	r2, [pc, #84]	; (800c78c <TIM_OC4_SetConfig+0xcc>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d003      	beq.n	800c744 <TIM_OC4_SetConfig+0x84>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a14      	ldr	r2, [pc, #80]	; (800c790 <TIM_OC4_SetConfig+0xd0>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d109      	bne.n	800c758 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c74a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	695b      	ldr	r3, [r3, #20]
 800c750:	019b      	lsls	r3, r3, #6
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	4313      	orrs	r3, r2
 800c756:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	697a      	ldr	r2, [r7, #20]
 800c75c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	693a      	ldr	r2, [r7, #16]
 800c770:	621a      	str	r2, [r3, #32]
}
 800c772:	bf00      	nop
 800c774:	371c      	adds	r7, #28
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	40012c00 	.word	0x40012c00
 800c784:	40013400 	.word	0x40013400
 800c788:	40014000 	.word	0x40014000
 800c78c:	40014400 	.word	0x40014400
 800c790:	40014800 	.word	0x40014800

0800c794 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c794:	b480      	push	{r7}
 800c796:	b087      	sub	sp, #28
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
 800c7a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a1b      	ldr	r3, [r3, #32]
 800c7ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c7d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	041b      	lsls	r3, r3, #16
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a17      	ldr	r2, [pc, #92]	; (800c848 <TIM_OC5_SetConfig+0xb4>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d00f      	beq.n	800c80e <TIM_OC5_SetConfig+0x7a>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a16      	ldr	r2, [pc, #88]	; (800c84c <TIM_OC5_SetConfig+0xb8>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d00b      	beq.n	800c80e <TIM_OC5_SetConfig+0x7a>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a15      	ldr	r2, [pc, #84]	; (800c850 <TIM_OC5_SetConfig+0xbc>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d007      	beq.n	800c80e <TIM_OC5_SetConfig+0x7a>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a14      	ldr	r2, [pc, #80]	; (800c854 <TIM_OC5_SetConfig+0xc0>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d003      	beq.n	800c80e <TIM_OC5_SetConfig+0x7a>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a13      	ldr	r2, [pc, #76]	; (800c858 <TIM_OC5_SetConfig+0xc4>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d109      	bne.n	800c822 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c814:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	695b      	ldr	r3, [r3, #20]
 800c81a:	021b      	lsls	r3, r3, #8
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	4313      	orrs	r3, r2
 800c820:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	685a      	ldr	r2, [r3, #4]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	621a      	str	r2, [r3, #32]
}
 800c83c:	bf00      	nop
 800c83e:	371c      	adds	r7, #28
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr
 800c848:	40012c00 	.word	0x40012c00
 800c84c:	40013400 	.word	0x40013400
 800c850:	40014000 	.word	0x40014000
 800c854:	40014400 	.word	0x40014400
 800c858:	40014800 	.word	0x40014800

0800c85c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b087      	sub	sp, #28
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a1b      	ldr	r3, [r3, #32]
 800c876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c88a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c88e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	021b      	lsls	r3, r3, #8
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	4313      	orrs	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	051b      	lsls	r3, r3, #20
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a18      	ldr	r2, [pc, #96]	; (800c914 <TIM_OC6_SetConfig+0xb8>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d00f      	beq.n	800c8d8 <TIM_OC6_SetConfig+0x7c>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a17      	ldr	r2, [pc, #92]	; (800c918 <TIM_OC6_SetConfig+0xbc>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d00b      	beq.n	800c8d8 <TIM_OC6_SetConfig+0x7c>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a16      	ldr	r2, [pc, #88]	; (800c91c <TIM_OC6_SetConfig+0xc0>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d007      	beq.n	800c8d8 <TIM_OC6_SetConfig+0x7c>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a15      	ldr	r2, [pc, #84]	; (800c920 <TIM_OC6_SetConfig+0xc4>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d003      	beq.n	800c8d8 <TIM_OC6_SetConfig+0x7c>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a14      	ldr	r2, [pc, #80]	; (800c924 <TIM_OC6_SetConfig+0xc8>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d109      	bne.n	800c8ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c8de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	029b      	lsls	r3, r3, #10
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	621a      	str	r2, [r3, #32]
}
 800c906:	bf00      	nop
 800c908:	371c      	adds	r7, #28
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	40012c00 	.word	0x40012c00
 800c918:	40013400 	.word	0x40013400
 800c91c:	40014000 	.word	0x40014000
 800c920:	40014400 	.word	0x40014400
 800c924:	40014800 	.word	0x40014800

0800c928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c928:	b480      	push	{r7}
 800c92a:	b087      	sub	sp, #28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6a1b      	ldr	r3, [r3, #32]
 800c938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	f023 0201 	bic.w	r2, r3, #1
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	699b      	ldr	r3, [r3, #24]
 800c94a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	011b      	lsls	r3, r3, #4
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	4313      	orrs	r3, r2
 800c95c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	f023 030a 	bic.w	r3, r3, #10
 800c964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	621a      	str	r2, [r3, #32]
}
 800c97a:	bf00      	nop
 800c97c:	371c      	adds	r7, #28
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c986:	b480      	push	{r7}
 800c988:	b087      	sub	sp, #28
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6a1b      	ldr	r3, [r3, #32]
 800c996:	f023 0210 	bic.w	r2, r3, #16
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6a1b      	ldr	r3, [r3, #32]
 800c9a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c9b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	031b      	lsls	r3, r3, #12
 800c9b6:	697a      	ldr	r2, [r7, #20]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c9c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	011b      	lsls	r3, r3, #4
 800c9c8:	693a      	ldr	r2, [r7, #16]
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	693a      	ldr	r2, [r7, #16]
 800c9d8:	621a      	str	r2, [r3, #32]
}
 800c9da:	bf00      	nop
 800c9dc:	371c      	adds	r7, #28
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	b085      	sub	sp, #20
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	f043 0307 	orr.w	r3, r3, #7
 800ca08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	609a      	str	r2, [r3, #8]
}
 800ca10:	bf00      	nop
 800ca12:	3714      	adds	r7, #20
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b087      	sub	sp, #28
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	607a      	str	r2, [r7, #4]
 800ca28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	021a      	lsls	r2, r3, #8
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	431a      	orrs	r2, r3
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	697a      	ldr	r2, [r7, #20]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	609a      	str	r2, [r3, #8]
}
 800ca50:	bf00      	nop
 800ca52:	371c      	adds	r7, #28
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b087      	sub	sp, #28
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	f003 031f 	and.w	r3, r3, #31
 800ca6e:	2201      	movs	r2, #1
 800ca70:	fa02 f303 	lsl.w	r3, r2, r3
 800ca74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6a1a      	ldr	r2, [r3, #32]
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	43db      	mvns	r3, r3
 800ca7e:	401a      	ands	r2, r3
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6a1a      	ldr	r2, [r3, #32]
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	f003 031f 	and.w	r3, r3, #31
 800ca8e:	6879      	ldr	r1, [r7, #4]
 800ca90:	fa01 f303 	lsl.w	r3, r1, r3
 800ca94:	431a      	orrs	r2, r3
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	621a      	str	r2, [r3, #32]
}
 800ca9a:	bf00      	nop
 800ca9c:	371c      	adds	r7, #28
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
	...

0800caa8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d109      	bne.n	800cacc <HAL_TIMEx_PWMN_Start+0x24>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	bf14      	ite	ne
 800cac4:	2301      	movne	r3, #1
 800cac6:	2300      	moveq	r3, #0
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	e022      	b.n	800cb12 <HAL_TIMEx_PWMN_Start+0x6a>
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	2b04      	cmp	r3, #4
 800cad0:	d109      	bne.n	800cae6 <HAL_TIMEx_PWMN_Start+0x3e>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	2b01      	cmp	r3, #1
 800cadc:	bf14      	ite	ne
 800cade:	2301      	movne	r3, #1
 800cae0:	2300      	moveq	r3, #0
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	e015      	b.n	800cb12 <HAL_TIMEx_PWMN_Start+0x6a>
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	2b08      	cmp	r3, #8
 800caea:	d109      	bne.n	800cb00 <HAL_TIMEx_PWMN_Start+0x58>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	bf14      	ite	ne
 800caf8:	2301      	movne	r3, #1
 800cafa:	2300      	moveq	r3, #0
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	e008      	b.n	800cb12 <HAL_TIMEx_PWMN_Start+0x6a>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	bf14      	ite	ne
 800cb0c:	2301      	movne	r3, #1
 800cb0e:	2300      	moveq	r3, #0
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	e069      	b.n	800cbee <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d104      	bne.n	800cb2a <HAL_TIMEx_PWMN_Start+0x82>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2202      	movs	r2, #2
 800cb24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb28:	e013      	b.n	800cb52 <HAL_TIMEx_PWMN_Start+0xaa>
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d104      	bne.n	800cb3a <HAL_TIMEx_PWMN_Start+0x92>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2202      	movs	r2, #2
 800cb34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb38:	e00b      	b.n	800cb52 <HAL_TIMEx_PWMN_Start+0xaa>
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	2b08      	cmp	r3, #8
 800cb3e:	d104      	bne.n	800cb4a <HAL_TIMEx_PWMN_Start+0xa2>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2202      	movs	r2, #2
 800cb44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cb48:	e003      	b.n	800cb52 <HAL_TIMEx_PWMN_Start+0xaa>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2202      	movs	r2, #2
 800cb4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2204      	movs	r2, #4
 800cb58:	6839      	ldr	r1, [r7, #0]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f000 f974 	bl	800ce48 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a20      	ldr	r2, [pc, #128]	; (800cbf8 <HAL_TIMEx_PWMN_Start+0x150>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d018      	beq.n	800cbac <HAL_TIMEx_PWMN_Start+0x104>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb82:	d013      	beq.n	800cbac <HAL_TIMEx_PWMN_Start+0x104>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a1c      	ldr	r2, [pc, #112]	; (800cbfc <HAL_TIMEx_PWMN_Start+0x154>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d00e      	beq.n	800cbac <HAL_TIMEx_PWMN_Start+0x104>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a1b      	ldr	r2, [pc, #108]	; (800cc00 <HAL_TIMEx_PWMN_Start+0x158>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d009      	beq.n	800cbac <HAL_TIMEx_PWMN_Start+0x104>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a19      	ldr	r2, [pc, #100]	; (800cc04 <HAL_TIMEx_PWMN_Start+0x15c>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d004      	beq.n	800cbac <HAL_TIMEx_PWMN_Start+0x104>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a18      	ldr	r2, [pc, #96]	; (800cc08 <HAL_TIMEx_PWMN_Start+0x160>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d115      	bne.n	800cbd8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	689a      	ldr	r2, [r3, #8]
 800cbb2:	4b16      	ldr	r3, [pc, #88]	; (800cc0c <HAL_TIMEx_PWMN_Start+0x164>)
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2b06      	cmp	r3, #6
 800cbbc:	d015      	beq.n	800cbea <HAL_TIMEx_PWMN_Start+0x142>
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc4:	d011      	beq.n	800cbea <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f042 0201 	orr.w	r2, r2, #1
 800cbd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbd6:	e008      	b.n	800cbea <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f042 0201 	orr.w	r2, r2, #1
 800cbe6:	601a      	str	r2, [r3, #0]
 800cbe8:	e000      	b.n	800cbec <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	40012c00 	.word	0x40012c00
 800cbfc:	40000400 	.word	0x40000400
 800cc00:	40000800 	.word	0x40000800
 800cc04:	40013400 	.word	0x40013400
 800cc08:	40014000 	.word	0x40014000
 800cc0c:	00010007 	.word	0x00010007

0800cc10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b085      	sub	sp, #20
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d101      	bne.n	800cc28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc24:	2302      	movs	r3, #2
 800cc26:	e063      	b.n	800ccf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2202      	movs	r2, #2
 800cc34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a2b      	ldr	r2, [pc, #172]	; (800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d004      	beq.n	800cc5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a2a      	ldr	r2, [pc, #168]	; (800cd00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d108      	bne.n	800cc6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a1b      	ldr	r2, [pc, #108]	; (800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d018      	beq.n	800ccc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc9a:	d013      	beq.n	800ccc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a18      	ldr	r2, [pc, #96]	; (800cd04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d00e      	beq.n	800ccc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a17      	ldr	r2, [pc, #92]	; (800cd08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d009      	beq.n	800ccc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a12      	ldr	r2, [pc, #72]	; (800cd00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d004      	beq.n	800ccc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a13      	ldr	r2, [pc, #76]	; (800cd0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d10c      	bne.n	800ccde <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2201      	movs	r2, #1
 800cce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr
 800ccfc:	40012c00 	.word	0x40012c00
 800cd00:	40013400 	.word	0x40013400
 800cd04:	40000400 	.word	0x40000400
 800cd08:	40000800 	.word	0x40000800
 800cd0c:	40014000 	.word	0x40014000

0800cd10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d101      	bne.n	800cd2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cd28:	2302      	movs	r3, #2
 800cd2a:	e065      	b.n	800cdf8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	691b      	ldr	r3, [r3, #16]
 800cd76:	4313      	orrs	r3, r2
 800cd78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	695b      	ldr	r3, [r3, #20]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd92:	4313      	orrs	r3, r2
 800cd94:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	041b      	lsls	r3, r3, #16
 800cda2:	4313      	orrs	r3, r2
 800cda4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a16      	ldr	r2, [pc, #88]	; (800ce04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d004      	beq.n	800cdba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a14      	ldr	r2, [pc, #80]	; (800ce08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d115      	bne.n	800cde6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc4:	051b      	lsls	r3, r3, #20
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	69db      	ldr	r3, [r3, #28]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	6a1b      	ldr	r3, [r3, #32]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr
 800ce04:	40012c00 	.word	0x40012c00
 800ce08:	40013400 	.word	0x40013400

0800ce0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce14:	bf00      	nop
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b087      	sub	sp, #28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	f003 031f 	and.w	r3, r3, #31
 800ce5a:	2204      	movs	r2, #4
 800ce5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6a1a      	ldr	r2, [r3, #32]
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	43db      	mvns	r3, r3
 800ce6a:	401a      	ands	r2, r3
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6a1a      	ldr	r2, [r3, #32]
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	f003 031f 	and.w	r3, r3, #31
 800ce7a:	6879      	ldr	r1, [r7, #4]
 800ce7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ce80:	431a      	orrs	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	621a      	str	r2, [r3, #32]
}
 800ce86:	bf00      	nop
 800ce88:	371c      	adds	r7, #28
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr

0800ce92 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ce92:	b480      	push	{r7}
 800ce94:	b085      	sub	sp, #20
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cea2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800cea6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cec8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800cecc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	43db      	mvns	r3, r3
 800cedc:	b29b      	uxth	r3, r3
 800cede:	4013      	ands	r3, r2
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3714      	adds	r7, #20
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr

0800cef6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cef6:	b084      	sub	sp, #16
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	f107 0014 	add.w	r0, r7, #20
 800cf04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	b004      	add	sp, #16
 800cf36:	4770      	bx	lr

0800cf38 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b09d      	sub	sp, #116	; 0x74
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800cf5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf5e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	78db      	ldrb	r3, [r3, #3]
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	d81f      	bhi.n	800cfaa <USB_ActivateEndpoint+0x72>
 800cf6a:	a201      	add	r2, pc, #4	; (adr r2, 800cf70 <USB_ActivateEndpoint+0x38>)
 800cf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf70:	0800cf81 	.word	0x0800cf81
 800cf74:	0800cf9d 	.word	0x0800cf9d
 800cf78:	0800cfb3 	.word	0x0800cfb3
 800cf7c:	0800cf8f 	.word	0x0800cf8f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cf80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cf84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cf8c:	e012      	b.n	800cfb4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800cf8e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cf92:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800cf96:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cf9a:	e00b      	b.n	800cfb4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cf9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cfa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cfa4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cfa8:	e004      	b.n	800cfb4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800cfb0:	e000      	b.n	800cfb4 <USB_ActivateEndpoint+0x7c>
      break;
 800cfb2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	441a      	add	r2, r3
 800cfbe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cfc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	4413      	add	r3, r2
 800cfe0:	881b      	ldrh	r3, [r3, #0]
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	b21b      	sxth	r3, r3
 800cfe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfee:	b21a      	sxth	r2, r3
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	b21b      	sxth	r3, r3
 800cff6:	4313      	orrs	r3, r2
 800cff8:	b21b      	sxth	r3, r3
 800cffa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	441a      	add	r2, r3
 800d008:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d00c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	7b1b      	ldrb	r3, [r3, #12]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f040 8178 	bne.w	800d31a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	785b      	ldrb	r3, [r3, #1]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f000 8084 	beq.w	800d13c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	61bb      	str	r3, [r7, #24]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d03e:	b29b      	uxth	r3, r3
 800d040:	461a      	mov	r2, r3
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	4413      	add	r3, r2
 800d046:	61bb      	str	r3, [r7, #24]
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	011a      	lsls	r2, r3, #4
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	4413      	add	r3, r2
 800d052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d056:	617b      	str	r3, [r7, #20]
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	88db      	ldrh	r3, [r3, #6]
 800d05c:	085b      	lsrs	r3, r3, #1
 800d05e:	b29b      	uxth	r3, r3
 800d060:	005b      	lsls	r3, r3, #1
 800d062:	b29a      	uxth	r2, r3
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	4413      	add	r3, r2
 800d072:	881b      	ldrh	r3, [r3, #0]
 800d074:	827b      	strh	r3, [r7, #18]
 800d076:	8a7b      	ldrh	r3, [r7, #18]
 800d078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d01b      	beq.n	800d0b8 <USB_ActivateEndpoint+0x180>
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4413      	add	r3, r2
 800d08a:	881b      	ldrh	r3, [r3, #0]
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d096:	823b      	strh	r3, [r7, #16]
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	441a      	add	r2, r3
 800d0a2:	8a3b      	ldrh	r3, [r7, #16]
 800d0a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	78db      	ldrb	r3, [r3, #3]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d020      	beq.n	800d102 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	4413      	add	r3, r2
 800d0ca:	881b      	ldrh	r3, [r3, #0]
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0d6:	81bb      	strh	r3, [r7, #12]
 800d0d8:	89bb      	ldrh	r3, [r7, #12]
 800d0da:	f083 0320 	eor.w	r3, r3, #32
 800d0de:	81bb      	strh	r3, [r7, #12]
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	441a      	add	r2, r3
 800d0ea:	89bb      	ldrh	r3, [r7, #12]
 800d0ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	8013      	strh	r3, [r2, #0]
 800d100:	e2d5      	b.n	800d6ae <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4413      	add	r3, r2
 800d10c:	881b      	ldrh	r3, [r3, #0]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d118:	81fb      	strh	r3, [r7, #14]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	441a      	add	r2, r3
 800d124:	89fb      	ldrh	r3, [r7, #14]
 800d126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d12a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d12e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d136:	b29b      	uxth	r3, r3
 800d138:	8013      	strh	r3, [r2, #0]
 800d13a:	e2b8      	b.n	800d6ae <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	633b      	str	r3, [r7, #48]	; 0x30
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d146:	b29b      	uxth	r3, r3
 800d148:	461a      	mov	r2, r3
 800d14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14c:	4413      	add	r3, r2
 800d14e:	633b      	str	r3, [r7, #48]	; 0x30
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	011a      	lsls	r2, r3, #4
 800d156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d158:	4413      	add	r3, r2
 800d15a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800d15e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	88db      	ldrh	r3, [r3, #6]
 800d164:	085b      	lsrs	r3, r3, #1
 800d166:	b29b      	uxth	r3, r3
 800d168:	005b      	lsls	r3, r3, #1
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	62bb      	str	r3, [r7, #40]	; 0x28
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	461a      	mov	r2, r3
 800d17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d180:	4413      	add	r3, r2
 800d182:	62bb      	str	r3, [r7, #40]	; 0x28
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	011a      	lsls	r2, r3, #4
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	4413      	add	r3, r2
 800d18e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d192:	627b      	str	r3, [r7, #36]	; 0x24
 800d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	b29b      	uxth	r3, r3
 800d19a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a2:	801a      	strh	r2, [r3, #0]
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	2b3e      	cmp	r3, #62	; 0x3e
 800d1aa:	d91d      	bls.n	800d1e8 <USB_ActivateEndpoint+0x2b0>
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	095b      	lsrs	r3, r3, #5
 800d1b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	691b      	ldr	r3, [r3, #16]
 800d1b8:	f003 031f 	and.w	r3, r3, #31
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d102      	bne.n	800d1c6 <USB_ActivateEndpoint+0x28e>
 800d1c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	b29a      	uxth	r2, r3
 800d1cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	029b      	lsls	r3, r3, #10
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e4:	801a      	strh	r2, [r3, #0]
 800d1e6:	e026      	b.n	800d236 <USB_ActivateEndpoint+0x2fe>
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10a      	bne.n	800d206 <USB_ActivateEndpoint+0x2ce>
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d202:	801a      	strh	r2, [r3, #0]
 800d204:	e017      	b.n	800d236 <USB_ActivateEndpoint+0x2fe>
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	085b      	lsrs	r3, r3, #1
 800d20c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	691b      	ldr	r3, [r3, #16]
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	2b00      	cmp	r3, #0
 800d218:	d002      	beq.n	800d220 <USB_ActivateEndpoint+0x2e8>
 800d21a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d21c:	3301      	adds	r3, #1
 800d21e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d222:	881b      	ldrh	r3, [r3, #0]
 800d224:	b29a      	uxth	r2, r3
 800d226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d228:	b29b      	uxth	r3, r3
 800d22a:	029b      	lsls	r3, r3, #10
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	4313      	orrs	r3, r2
 800d230:	b29a      	uxth	r2, r3
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4413      	add	r3, r2
 800d240:	881b      	ldrh	r3, [r3, #0]
 800d242:	847b      	strh	r3, [r7, #34]	; 0x22
 800d244:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d01b      	beq.n	800d286 <USB_ActivateEndpoint+0x34e>
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	4413      	add	r3, r2
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d264:	843b      	strh	r3, [r7, #32]
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	441a      	add	r2, r3
 800d270:	8c3b      	ldrh	r3, [r7, #32]
 800d272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d27a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d282:	b29b      	uxth	r3, r3
 800d284:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d124      	bne.n	800d2d8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	4413      	add	r3, r2
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d2a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2a4:	83bb      	strh	r3, [r7, #28]
 800d2a6:	8bbb      	ldrh	r3, [r7, #28]
 800d2a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d2ac:	83bb      	strh	r3, [r7, #28]
 800d2ae:	8bbb      	ldrh	r3, [r7, #28]
 800d2b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d2b4:	83bb      	strh	r3, [r7, #28]
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	441a      	add	r2, r3
 800d2c0:	8bbb      	ldrh	r3, [r7, #28]
 800d2c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d2ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	8013      	strh	r3, [r2, #0]
 800d2d6:	e1ea      	b.n	800d6ae <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	4413      	add	r3, r2
 800d2e2:	881b      	ldrh	r3, [r3, #0]
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2ee:	83fb      	strh	r3, [r7, #30]
 800d2f0:	8bfb      	ldrh	r3, [r7, #30]
 800d2f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d2f6:	83fb      	strh	r3, [r7, #30]
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	441a      	add	r2, r3
 800d302:	8bfb      	ldrh	r3, [r7, #30]
 800d304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d30c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d314:	b29b      	uxth	r3, r3
 800d316:	8013      	strh	r3, [r2, #0]
 800d318:	e1c9      	b.n	800d6ae <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	78db      	ldrb	r3, [r3, #3]
 800d31e:	2b02      	cmp	r3, #2
 800d320:	d11e      	bne.n	800d360 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	4413      	add	r3, r2
 800d32c:	881b      	ldrh	r3, [r3, #0]
 800d32e:	b29b      	uxth	r3, r3
 800d330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d338:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	441a      	add	r2, r3
 800d346:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d34a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d34e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d352:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	8013      	strh	r3, [r2, #0]
 800d35e:	e01d      	b.n	800d39c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	4413      	add	r3, r2
 800d36a:	881b      	ldrh	r3, [r3, #0]
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d376:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	441a      	add	r2, r3
 800d384:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d38c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d398:	b29b      	uxth	r3, r3
 800d39a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3ac:	4413      	add	r3, r2
 800d3ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	011a      	lsls	r2, r3, #4
 800d3b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3b8:	4413      	add	r3, r2
 800d3ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3be:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	891b      	ldrh	r3, [r3, #8]
 800d3c4:	085b      	lsrs	r3, r3, #1
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	005b      	lsls	r3, r3, #1
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3ce:	801a      	strh	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	657b      	str	r3, [r7, #84]	; 0x54
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	461a      	mov	r2, r3
 800d3de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3e0:	4413      	add	r3, r2
 800d3e2:	657b      	str	r3, [r7, #84]	; 0x54
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	011a      	lsls	r2, r3, #4
 800d3ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3ec:	4413      	add	r3, r2
 800d3ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800d3f2:	653b      	str	r3, [r7, #80]	; 0x50
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	895b      	ldrh	r3, [r3, #10]
 800d3f8:	085b      	lsrs	r3, r3, #1
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	005b      	lsls	r3, r3, #1
 800d3fe:	b29a      	uxth	r2, r3
 800d400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d402:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	785b      	ldrb	r3, [r3, #1]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f040 8093 	bne.w	800d534 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	009b      	lsls	r3, r3, #2
 800d416:	4413      	add	r3, r2
 800d418:	881b      	ldrh	r3, [r3, #0]
 800d41a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d41e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d426:	2b00      	cmp	r3, #0
 800d428:	d01b      	beq.n	800d462 <USB_ActivateEndpoint+0x52a>
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	4413      	add	r3, r2
 800d434:	881b      	ldrh	r3, [r3, #0]
 800d436:	b29b      	uxth	r3, r3
 800d438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d43c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d440:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	441a      	add	r2, r3
 800d44c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d44e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d456:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d45a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d45e:	b29b      	uxth	r3, r3
 800d460:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	4413      	add	r3, r2
 800d46c:	881b      	ldrh	r3, [r3, #0]
 800d46e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d470:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d476:	2b00      	cmp	r3, #0
 800d478:	d01b      	beq.n	800d4b2 <USB_ActivateEndpoint+0x57a>
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	4413      	add	r3, r2
 800d484:	881b      	ldrh	r3, [r3, #0]
 800d486:	b29b      	uxth	r3, r3
 800d488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d48c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d490:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	441a      	add	r2, r3
 800d49c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d49e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4413      	add	r3, r2
 800d4bc:	881b      	ldrh	r3, [r3, #0]
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4c8:	873b      	strh	r3, [r7, #56]	; 0x38
 800d4ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d4cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d4d0:	873b      	strh	r3, [r7, #56]	; 0x38
 800d4d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d4d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d4d8:	873b      	strh	r3, [r7, #56]	; 0x38
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	441a      	add	r2, r3
 800d4e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d4e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	881b      	ldrh	r3, [r3, #0]
 800d506:	b29b      	uxth	r3, r3
 800d508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d50c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d510:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	441a      	add	r2, r3
 800d51c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d51e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d52e:	b29b      	uxth	r3, r3
 800d530:	8013      	strh	r3, [r2, #0]
 800d532:	e0bc      	b.n	800d6ae <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	4413      	add	r3, r2
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d544:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d01d      	beq.n	800d58c <USB_ActivateEndpoint+0x654>
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	881b      	ldrh	r3, [r3, #0]
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d566:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	441a      	add	r2, r3
 800d574:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d57c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d588:	b29b      	uxth	r3, r3
 800d58a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4413      	add	r3, r2
 800d596:	881b      	ldrh	r3, [r3, #0]
 800d598:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d59c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d01d      	beq.n	800d5e4 <USB_ActivateEndpoint+0x6ac>
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	4413      	add	r3, r2
 800d5b2:	881b      	ldrh	r3, [r3, #0]
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	441a      	add	r2, r3
 800d5cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d5d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	78db      	ldrb	r3, [r3, #3]
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d024      	beq.n	800d636 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	4413      	add	r3, r2
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d602:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d606:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d60a:	f083 0320 	eor.w	r3, r3, #32
 800d60e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	441a      	add	r2, r3
 800d61c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d62c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d630:	b29b      	uxth	r3, r3
 800d632:	8013      	strh	r3, [r2, #0]
 800d634:	e01d      	b.n	800d672 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	009b      	lsls	r3, r3, #2
 800d63e:	4413      	add	r3, r2
 800d640:	881b      	ldrh	r3, [r3, #0]
 800d642:	b29b      	uxth	r3, r3
 800d644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d64c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	441a      	add	r2, r3
 800d65a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d65e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d66e:	b29b      	uxth	r3, r3
 800d670:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4413      	add	r3, r2
 800d67c:	881b      	ldrh	r3, [r3, #0]
 800d67e:	b29b      	uxth	r3, r3
 800d680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d688:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	441a      	add	r2, r3
 800d696:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d69a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d69e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d6ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3774      	adds	r7, #116	; 0x74
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop

0800d6c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b08d      	sub	sp, #52	; 0x34
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	7b1b      	ldrb	r3, [r3, #12]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	f040 808e 	bne.w	800d7f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	785b      	ldrb	r3, [r3, #1]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d044      	beq.n	800d766 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	4413      	add	r3, r2
 800d6e6:	881b      	ldrh	r3, [r3, #0]
 800d6e8:	81bb      	strh	r3, [r7, #12]
 800d6ea:	89bb      	ldrh	r3, [r7, #12]
 800d6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d01b      	beq.n	800d72c <USB_DeactivateEndpoint+0x6c>
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	4413      	add	r3, r2
 800d6fe:	881b      	ldrh	r3, [r3, #0]
 800d700:	b29b      	uxth	r3, r3
 800d702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d70a:	817b      	strh	r3, [r7, #10]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	441a      	add	r2, r3
 800d716:	897b      	ldrh	r3, [r7, #10]
 800d718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d71c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d724:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d728:	b29b      	uxth	r3, r3
 800d72a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	4413      	add	r3, r2
 800d736:	881b      	ldrh	r3, [r3, #0]
 800d738:	b29b      	uxth	r3, r3
 800d73a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d73e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d742:	813b      	strh	r3, [r7, #8]
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	441a      	add	r2, r3
 800d74e:	893b      	ldrh	r3, [r7, #8]
 800d750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d760:	b29b      	uxth	r3, r3
 800d762:	8013      	strh	r3, [r2, #0]
 800d764:	e192      	b.n	800da8c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	881b      	ldrh	r3, [r3, #0]
 800d772:	827b      	strh	r3, [r7, #18]
 800d774:	8a7b      	ldrh	r3, [r7, #18]
 800d776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d01b      	beq.n	800d7b6 <USB_DeactivateEndpoint+0xf6>
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4413      	add	r3, r2
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d794:	823b      	strh	r3, [r7, #16]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	441a      	add	r2, r3
 800d7a0:	8a3b      	ldrh	r3, [r7, #16]
 800d7a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	4413      	add	r3, r2
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7cc:	81fb      	strh	r3, [r7, #14]
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	441a      	add	r2, r3
 800d7d8:	89fb      	ldrh	r3, [r7, #14]
 800d7da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	8013      	strh	r3, [r2, #0]
 800d7ee:	e14d      	b.n	800da8c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	785b      	ldrb	r3, [r3, #1]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f040 80a5 	bne.w	800d944 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4413      	add	r3, r2
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	843b      	strh	r3, [r7, #32]
 800d808:	8c3b      	ldrh	r3, [r7, #32]
 800d80a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d01b      	beq.n	800d84a <USB_DeactivateEndpoint+0x18a>
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	4413      	add	r3, r2
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	b29b      	uxth	r3, r3
 800d820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d828:	83fb      	strh	r3, [r7, #30]
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	441a      	add	r2, r3
 800d834:	8bfb      	ldrh	r3, [r7, #30]
 800d836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d83a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d83e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d846:	b29b      	uxth	r3, r3
 800d848:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	4413      	add	r3, r2
 800d854:	881b      	ldrh	r3, [r3, #0]
 800d856:	83bb      	strh	r3, [r7, #28]
 800d858:	8bbb      	ldrh	r3, [r7, #28]
 800d85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d01b      	beq.n	800d89a <USB_DeactivateEndpoint+0x1da>
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	4413      	add	r3, r2
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	b29b      	uxth	r3, r3
 800d870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d878:	837b      	strh	r3, [r7, #26]
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	441a      	add	r2, r3
 800d884:	8b7b      	ldrh	r3, [r7, #26]
 800d886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d88a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d88e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d892:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d896:	b29b      	uxth	r3, r3
 800d898:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	4413      	add	r3, r2
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8b0:	833b      	strh	r3, [r7, #24]
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	441a      	add	r2, r3
 800d8bc:	8b3b      	ldrh	r3, [r7, #24]
 800d8be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4413      	add	r3, r2
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d8e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8e8:	82fb      	strh	r3, [r7, #22]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	441a      	add	r2, r3
 800d8f4:	8afb      	ldrh	r3, [r7, #22]
 800d8f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d906:	b29b      	uxth	r3, r3
 800d908:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d90a:	687a      	ldr	r2, [r7, #4]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	4413      	add	r3, r2
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	b29b      	uxth	r3, r3
 800d918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d91c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d920:	82bb      	strh	r3, [r7, #20]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	441a      	add	r2, r3
 800d92c:	8abb      	ldrh	r3, [r7, #20]
 800d92e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d93a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d93e:	b29b      	uxth	r3, r3
 800d940:	8013      	strh	r3, [r2, #0]
 800d942:	e0a3      	b.n	800da8c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	881b      	ldrh	r3, [r3, #0]
 800d950:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d952:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d01b      	beq.n	800d994 <USB_DeactivateEndpoint+0x2d4>
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	4413      	add	r3, r2
 800d966:	881b      	ldrh	r3, [r3, #0]
 800d968:	b29b      	uxth	r3, r3
 800d96a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d96e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d972:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	441a      	add	r2, r3
 800d97e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d990:	b29b      	uxth	r3, r3
 800d992:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	881b      	ldrh	r3, [r3, #0]
 800d9a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d9a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d01b      	beq.n	800d9e4 <USB_DeactivateEndpoint+0x324>
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	4413      	add	r3, r2
 800d9b6:	881b      	ldrh	r3, [r3, #0]
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9c2:	853b      	strh	r3, [r7, #40]	; 0x28
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	441a      	add	r2, r3
 800d9ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d9d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4413      	add	r3, r2
 800d9ee:	881b      	ldrh	r3, [r3, #0]
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	441a      	add	r2, r3
 800da06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800da14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da18:	b29b      	uxth	r3, r3
 800da1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	4413      	add	r3, r2
 800da26:	881b      	ldrh	r3, [r3, #0]
 800da28:	b29b      	uxth	r3, r3
 800da2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da32:	84bb      	strh	r3, [r7, #36]	; 0x24
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	441a      	add	r2, r3
 800da3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da50:	b29b      	uxth	r3, r3
 800da52:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	4413      	add	r3, r2
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	b29b      	uxth	r3, r3
 800da62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da6a:	847b      	strh	r3, [r7, #34]	; 0x22
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	441a      	add	r2, r3
 800da76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da88:	b29b      	uxth	r3, r3
 800da8a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3734      	adds	r7, #52	; 0x34
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b0c2      	sub	sp, #264	; 0x108
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800daa8:	6018      	str	r0, [r3, #0]
 800daaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dab2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	785b      	ldrb	r3, [r3, #1]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	f040 86b7 	bne.w	800e834 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800dac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	699a      	ldr	r2, [r3, #24]
 800dad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	691b      	ldr	r3, [r3, #16]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d908      	bls.n	800daf4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800dae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	691b      	ldr	r3, [r3, #16]
 800daee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800daf2:	e007      	b.n	800db04 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800daf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	699b      	ldr	r3, [r3, #24]
 800db00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800db04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	7b1b      	ldrb	r3, [r3, #12]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d13a      	bne.n	800db8a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800db14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	6959      	ldr	r1, [r3, #20]
 800db20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	88da      	ldrh	r2, [r3, #6]
 800db2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db30:	b29b      	uxth	r3, r3
 800db32:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800db36:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800db3a:	6800      	ldr	r0, [r0, #0]
 800db3c:	f001 fc8c 	bl	800f458 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800db40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	613b      	str	r3, [r7, #16]
 800db4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	461a      	mov	r2, r3
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	4413      	add	r3, r2
 800db62:	613b      	str	r3, [r7, #16]
 800db64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	011a      	lsls	r2, r3, #4
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	4413      	add	r3, r2
 800db76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800db7a:	60fb      	str	r3, [r7, #12]
 800db7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db80:	b29a      	uxth	r2, r3
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	801a      	strh	r2, [r3, #0]
 800db86:	f000 be1f 	b.w	800e7c8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800db8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	78db      	ldrb	r3, [r3, #3]
 800db96:	2b02      	cmp	r3, #2
 800db98:	f040 8462 	bne.w	800e460 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800db9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	6a1a      	ldr	r2, [r3, #32]
 800dba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	691b      	ldr	r3, [r3, #16]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	f240 83df 	bls.w	800e378 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dbba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	4413      	add	r3, r2
 800dbd4:	881b      	ldrh	r3, [r3, #0]
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbe0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800dbe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	441a      	add	r2, r3
 800dbfe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dc02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800dc0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800dc16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	6a1a      	ldr	r2, [r3, #32]
 800dc22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc26:	1ad2      	subs	r2, r2, r3
 800dc28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dc34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f000 81c7 	beq.w	800dfea <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dc5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	633b      	str	r3, [r7, #48]	; 0x30
 800dc68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	785b      	ldrb	r3, [r3, #1]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d177      	bne.n	800dd68 <USB_EPStartXfer+0x2ce>
 800dc78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	461a      	mov	r2, r3
 800dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc98:	4413      	add	r3, r2
 800dc9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	011a      	lsls	r2, r3, #4
 800dcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcac:	4413      	add	r3, r2
 800dcae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dcb2:	627b      	str	r3, [r7, #36]	; 0x24
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	801a      	strh	r2, [r3, #0]
 800dcc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcc8:	2b3e      	cmp	r3, #62	; 0x3e
 800dcca:	d921      	bls.n	800dd10 <USB_EPStartXfer+0x276>
 800dccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcd0:	095b      	lsrs	r3, r3, #5
 800dcd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dcd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcda:	f003 031f 	and.w	r3, r3, #31
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d104      	bne.n	800dcec <USB_EPStartXfer+0x252>
 800dce2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dce6:	3b01      	subs	r3, #1
 800dce8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	881b      	ldrh	r3, [r3, #0]
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	029b      	lsls	r3, r3, #10
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0c:	801a      	strh	r2, [r3, #0]
 800dd0e:	e050      	b.n	800ddb2 <USB_EPStartXfer+0x318>
 800dd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d10a      	bne.n	800dd2e <USB_EPStartXfer+0x294>
 800dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1a:	881b      	ldrh	r3, [r3, #0]
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2a:	801a      	strh	r2, [r3, #0]
 800dd2c:	e041      	b.n	800ddb2 <USB_EPStartXfer+0x318>
 800dd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd32:	085b      	lsrs	r3, r3, #1
 800dd34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd3c:	f003 0301 	and.w	r3, r3, #1
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d004      	beq.n	800dd4e <USB_EPStartXfer+0x2b4>
 800dd44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dd48:	3301      	adds	r3, #1
 800dd4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd50:	881b      	ldrh	r3, [r3, #0]
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	029b      	lsls	r3, r3, #10
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	b29a      	uxth	r2, r3
 800dd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd64:	801a      	strh	r2, [r3, #0]
 800dd66:	e024      	b.n	800ddb2 <USB_EPStartXfer+0x318>
 800dd68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	785b      	ldrb	r3, [r3, #1]
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d11c      	bne.n	800ddb2 <USB_EPStartXfer+0x318>
 800dd78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	461a      	mov	r2, r3
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8c:	4413      	add	r3, r2
 800dd8e:	633b      	str	r3, [r7, #48]	; 0x30
 800dd90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	011a      	lsls	r2, r3, #4
 800dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda0:	4413      	add	r3, r2
 800dda2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dda6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ddb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	895b      	ldrh	r3, [r3, #10]
 800ddbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ddc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	6959      	ldr	r1, [r3, #20]
 800ddce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ddd8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800dddc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800dde0:	6800      	ldr	r0, [r0, #0]
 800dde2:	f001 fb39 	bl	800f458 <USB_WritePMA>
            ep->xfer_buff += len;
 800dde6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	695a      	ldr	r2, [r3, #20]
 800ddf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddf6:	441a      	add	r2, r3
 800ddf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800de04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6a1a      	ldr	r2, [r3, #32]
 800de10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	691b      	ldr	r3, [r3, #16]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d90f      	bls.n	800de40 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800de20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	6a1a      	ldr	r2, [r3, #32]
 800de2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de30:	1ad2      	subs	r2, r2, r3
 800de32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	621a      	str	r2, [r3, #32]
 800de3e:	e00e      	b.n	800de5e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800de40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6a1b      	ldr	r3, [r3, #32]
 800de4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800de50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2200      	movs	r2, #0
 800de5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800de5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	785b      	ldrb	r3, [r3, #1]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d177      	bne.n	800df5e <USB_EPStartXfer+0x4c4>
 800de6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	61bb      	str	r3, [r7, #24]
 800de7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de88:	b29b      	uxth	r3, r3
 800de8a:	461a      	mov	r2, r3
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	4413      	add	r3, r2
 800de90:	61bb      	str	r3, [r7, #24]
 800de92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	011a      	lsls	r2, r3, #4
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	4413      	add	r3, r2
 800dea4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	881b      	ldrh	r3, [r3, #0]
 800deae:	b29b      	uxth	r3, r3
 800deb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	801a      	strh	r2, [r3, #0]
 800deba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800debe:	2b3e      	cmp	r3, #62	; 0x3e
 800dec0:	d921      	bls.n	800df06 <USB_EPStartXfer+0x46c>
 800dec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dec6:	095b      	lsrs	r3, r3, #5
 800dec8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800decc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ded0:	f003 031f 	and.w	r3, r3, #31
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d104      	bne.n	800dee2 <USB_EPStartXfer+0x448>
 800ded8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dedc:	3b01      	subs	r3, #1
 800dede:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	881b      	ldrh	r3, [r3, #0]
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800deec:	b29b      	uxth	r3, r3
 800deee:	029b      	lsls	r3, r3, #10
 800def0:	b29b      	uxth	r3, r3
 800def2:	4313      	orrs	r3, r2
 800def4:	b29b      	uxth	r3, r3
 800def6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800defa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800defe:	b29a      	uxth	r2, r3
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	801a      	strh	r2, [r3, #0]
 800df04:	e056      	b.n	800dfb4 <USB_EPStartXfer+0x51a>
 800df06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10a      	bne.n	800df24 <USB_EPStartXfer+0x48a>
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	881b      	ldrh	r3, [r3, #0]
 800df12:	b29b      	uxth	r3, r3
 800df14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	801a      	strh	r2, [r3, #0]
 800df22:	e047      	b.n	800dfb4 <USB_EPStartXfer+0x51a>
 800df24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df28:	085b      	lsrs	r3, r3, #1
 800df2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800df2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df32:	f003 0301 	and.w	r3, r3, #1
 800df36:	2b00      	cmp	r3, #0
 800df38:	d004      	beq.n	800df44 <USB_EPStartXfer+0x4aa>
 800df3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800df3e:	3301      	adds	r3, #1
 800df40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	881b      	ldrh	r3, [r3, #0]
 800df48:	b29a      	uxth	r2, r3
 800df4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800df4e:	b29b      	uxth	r3, r3
 800df50:	029b      	lsls	r3, r3, #10
 800df52:	b29b      	uxth	r3, r3
 800df54:	4313      	orrs	r3, r2
 800df56:	b29a      	uxth	r2, r3
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	801a      	strh	r2, [r3, #0]
 800df5c:	e02a      	b.n	800dfb4 <USB_EPStartXfer+0x51a>
 800df5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	785b      	ldrb	r3, [r3, #1]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d122      	bne.n	800dfb4 <USB_EPStartXfer+0x51a>
 800df6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	623b      	str	r3, [r7, #32]
 800df7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df88:	b29b      	uxth	r3, r3
 800df8a:	461a      	mov	r2, r3
 800df8c:	6a3b      	ldr	r3, [r7, #32]
 800df8e:	4413      	add	r3, r2
 800df90:	623b      	str	r3, [r7, #32]
 800df92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	011a      	lsls	r2, r3, #4
 800dfa0:	6a3b      	ldr	r3, [r7, #32]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dfa8:	61fb      	str	r3, [r7, #28]
 800dfaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800dfb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	891b      	ldrh	r3, [r3, #8]
 800dfc0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dfc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	6959      	ldr	r1, [r3, #20]
 800dfd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dfda:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800dfde:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800dfe2:	6800      	ldr	r0, [r0, #0]
 800dfe4:	f001 fa38 	bl	800f458 <USB_WritePMA>
 800dfe8:	e3ee      	b.n	800e7c8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dfea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	785b      	ldrb	r3, [r3, #1]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d177      	bne.n	800e0ea <USB_EPStartXfer+0x650>
 800dffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	64bb      	str	r3, [r7, #72]	; 0x48
 800e006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e00a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e014:	b29b      	uxth	r3, r3
 800e016:	461a      	mov	r2, r3
 800e018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e01a:	4413      	add	r3, r2
 800e01c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	011a      	lsls	r2, r3, #4
 800e02c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e02e:	4413      	add	r3, r2
 800e030:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e034:	647b      	str	r3, [r7, #68]	; 0x44
 800e036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e040:	b29a      	uxth	r2, r3
 800e042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e044:	801a      	strh	r2, [r3, #0]
 800e046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e04a:	2b3e      	cmp	r3, #62	; 0x3e
 800e04c:	d921      	bls.n	800e092 <USB_EPStartXfer+0x5f8>
 800e04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e052:	095b      	lsrs	r3, r3, #5
 800e054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e05c:	f003 031f 	and.w	r3, r3, #31
 800e060:	2b00      	cmp	r3, #0
 800e062:	d104      	bne.n	800e06e <USB_EPStartXfer+0x5d4>
 800e064:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e068:	3b01      	subs	r3, #1
 800e06a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e06e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e070:	881b      	ldrh	r3, [r3, #0]
 800e072:	b29a      	uxth	r2, r3
 800e074:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e078:	b29b      	uxth	r3, r3
 800e07a:	029b      	lsls	r3, r3, #10
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	4313      	orrs	r3, r2
 800e080:	b29b      	uxth	r3, r3
 800e082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e08e:	801a      	strh	r2, [r3, #0]
 800e090:	e056      	b.n	800e140 <USB_EPStartXfer+0x6a6>
 800e092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e096:	2b00      	cmp	r3, #0
 800e098:	d10a      	bne.n	800e0b0 <USB_EPStartXfer+0x616>
 800e09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e09c:	881b      	ldrh	r3, [r3, #0]
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0ac:	801a      	strh	r2, [r3, #0]
 800e0ae:	e047      	b.n	800e140 <USB_EPStartXfer+0x6a6>
 800e0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0b4:	085b      	lsrs	r3, r3, #1
 800e0b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0be:	f003 0301 	and.w	r3, r3, #1
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d004      	beq.n	800e0d0 <USB_EPStartXfer+0x636>
 800e0c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e0d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0d2:	881b      	ldrh	r3, [r3, #0]
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	029b      	lsls	r3, r3, #10
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0e6:	801a      	strh	r2, [r3, #0]
 800e0e8:	e02a      	b.n	800e140 <USB_EPStartXfer+0x6a6>
 800e0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	785b      	ldrb	r3, [r3, #1]
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d122      	bne.n	800e140 <USB_EPStartXfer+0x6a6>
 800e0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	653b      	str	r3, [r7, #80]	; 0x50
 800e106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e10a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e114:	b29b      	uxth	r3, r3
 800e116:	461a      	mov	r2, r3
 800e118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e11a:	4413      	add	r3, r2
 800e11c:	653b      	str	r3, [r7, #80]	; 0x50
 800e11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	011a      	lsls	r2, r3, #4
 800e12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e12e:	4413      	add	r3, r2
 800e130:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e134:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e13a:	b29a      	uxth	r2, r3
 800e13c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e13e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	891b      	ldrh	r3, [r3, #8]
 800e14c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	6959      	ldr	r1, [r3, #20]
 800e15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e160:	b29b      	uxth	r3, r3
 800e162:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e166:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e16a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e16e:	6800      	ldr	r0, [r0, #0]
 800e170:	f001 f972 	bl	800f458 <USB_WritePMA>
            ep->xfer_buff += len;
 800e174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	695a      	ldr	r2, [r3, #20]
 800e180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e184:	441a      	add	r2, r3
 800e186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e18a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	6a1a      	ldr	r2, [r3, #32]
 800e19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	691b      	ldr	r3, [r3, #16]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d90f      	bls.n	800e1ce <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	6a1a      	ldr	r2, [r3, #32]
 800e1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1be:	1ad2      	subs	r2, r2, r3
 800e1c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	621a      	str	r2, [r3, #32]
 800e1cc:	e00e      	b.n	800e1ec <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	6a1b      	ldr	r3, [r3, #32]
 800e1da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e1de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	643b      	str	r3, [r7, #64]	; 0x40
 800e1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	785b      	ldrb	r3, [r3, #1]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d177      	bne.n	800e2f8 <USB_EPStartXfer+0x85e>
 800e208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e20c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	63bb      	str	r3, [r7, #56]	; 0x38
 800e214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e218:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e222:	b29b      	uxth	r3, r3
 800e224:	461a      	mov	r2, r3
 800e226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e228:	4413      	add	r3, r2
 800e22a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	011a      	lsls	r2, r3, #4
 800e23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23c:	4413      	add	r3, r2
 800e23e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e242:	637b      	str	r3, [r7, #52]	; 0x34
 800e244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e246:	881b      	ldrh	r3, [r3, #0]
 800e248:	b29b      	uxth	r3, r3
 800e24a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e24e:	b29a      	uxth	r2, r3
 800e250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e252:	801a      	strh	r2, [r3, #0]
 800e254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e258:	2b3e      	cmp	r3, #62	; 0x3e
 800e25a:	d921      	bls.n	800e2a0 <USB_EPStartXfer+0x806>
 800e25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e260:	095b      	lsrs	r3, r3, #5
 800e262:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e26a:	f003 031f 	and.w	r3, r3, #31
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d104      	bne.n	800e27c <USB_EPStartXfer+0x7e2>
 800e272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e276:	3b01      	subs	r3, #1
 800e278:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	b29a      	uxth	r2, r3
 800e282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e286:	b29b      	uxth	r3, r3
 800e288:	029b      	lsls	r3, r3, #10
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	4313      	orrs	r3, r2
 800e28e:	b29b      	uxth	r3, r3
 800e290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e298:	b29a      	uxth	r2, r3
 800e29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e29c:	801a      	strh	r2, [r3, #0]
 800e29e:	e050      	b.n	800e342 <USB_EPStartXfer+0x8a8>
 800e2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10a      	bne.n	800e2be <USB_EPStartXfer+0x824>
 800e2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2aa:	881b      	ldrh	r3, [r3, #0]
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ba:	801a      	strh	r2, [r3, #0]
 800e2bc:	e041      	b.n	800e342 <USB_EPStartXfer+0x8a8>
 800e2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2c2:	085b      	lsrs	r3, r3, #1
 800e2c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2cc:	f003 0301 	and.w	r3, r3, #1
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d004      	beq.n	800e2de <USB_EPStartXfer+0x844>
 800e2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2d8:	3301      	adds	r3, #1
 800e2da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2e0:	881b      	ldrh	r3, [r3, #0]
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	029b      	lsls	r3, r3, #10
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f4:	801a      	strh	r2, [r3, #0]
 800e2f6:	e024      	b.n	800e342 <USB_EPStartXfer+0x8a8>
 800e2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	785b      	ldrb	r3, [r3, #1]
 800e304:	2b01      	cmp	r3, #1
 800e306:	d11c      	bne.n	800e342 <USB_EPStartXfer+0x8a8>
 800e308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e30c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e316:	b29b      	uxth	r3, r3
 800e318:	461a      	mov	r2, r3
 800e31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e31c:	4413      	add	r3, r2
 800e31e:	643b      	str	r3, [r7, #64]	; 0x40
 800e320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	011a      	lsls	r2, r3, #4
 800e32e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e330:	4413      	add	r3, r2
 800e332:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e336:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e340:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	895b      	ldrh	r3, [r3, #10]
 800e34e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	6959      	ldr	r1, [r3, #20]
 800e35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e362:	b29b      	uxth	r3, r3
 800e364:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e368:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e36c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e370:	6800      	ldr	r0, [r0, #0]
 800e372:	f001 f871 	bl	800f458 <USB_WritePMA>
 800e376:	e227      	b.n	800e7c8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e37c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	6a1b      	ldr	r3, [r3, #32]
 800e384:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e38c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4413      	add	r3, r2
 800e3a2:	881b      	ldrh	r3, [r3, #0]
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e3aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3ae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	441a      	add	r2, r3
 800e3cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e3d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e3d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e3d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	461a      	mov	r2, r3
 800e402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e404:	4413      	add	r3, r2
 800e406:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e40c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	011a      	lsls	r2, r3, #4
 800e416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e418:	4413      	add	r3, r2
 800e41a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e41e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e424:	b29a      	uxth	r2, r3
 800e426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e428:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e42a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e42e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	891b      	ldrh	r3, [r3, #8]
 800e436:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e43e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6959      	ldr	r1, [r3, #20]
 800e446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e450:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e454:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e458:	6800      	ldr	r0, [r0, #0]
 800e45a:	f000 fffd 	bl	800f458 <USB_WritePMA>
 800e45e:	e1b3      	b.n	800e7c8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	6a1a      	ldr	r2, [r3, #32]
 800e46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e470:	1ad2      	subs	r2, r2, r3
 800e472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e48c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4413      	add	r3, r2
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	f000 80c6 	beq.w	800e632 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	673b      	str	r3, [r7, #112]	; 0x70
 800e4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	785b      	ldrb	r3, [r3, #1]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d177      	bne.n	800e5b2 <USB_EPStartXfer+0xb18>
 800e4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800e4ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	461a      	mov	r2, r3
 800e4e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e4e2:	4413      	add	r3, r2
 800e4e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800e4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	011a      	lsls	r2, r3, #4
 800e4f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e4f6:	4413      	add	r3, r2
 800e4f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e4fc:	667b      	str	r3, [r7, #100]	; 0x64
 800e4fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e500:	881b      	ldrh	r3, [r3, #0]
 800e502:	b29b      	uxth	r3, r3
 800e504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e508:	b29a      	uxth	r2, r3
 800e50a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e50c:	801a      	strh	r2, [r3, #0]
 800e50e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e512:	2b3e      	cmp	r3, #62	; 0x3e
 800e514:	d921      	bls.n	800e55a <USB_EPStartXfer+0xac0>
 800e516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e51a:	095b      	lsrs	r3, r3, #5
 800e51c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e524:	f003 031f 	and.w	r3, r3, #31
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d104      	bne.n	800e536 <USB_EPStartXfer+0xa9c>
 800e52c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e530:	3b01      	subs	r3, #1
 800e532:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e538:	881b      	ldrh	r3, [r3, #0]
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e540:	b29b      	uxth	r3, r3
 800e542:	029b      	lsls	r3, r3, #10
 800e544:	b29b      	uxth	r3, r3
 800e546:	4313      	orrs	r3, r2
 800e548:	b29b      	uxth	r3, r3
 800e54a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e54e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e552:	b29a      	uxth	r2, r3
 800e554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e556:	801a      	strh	r2, [r3, #0]
 800e558:	e050      	b.n	800e5fc <USB_EPStartXfer+0xb62>
 800e55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d10a      	bne.n	800e578 <USB_EPStartXfer+0xade>
 800e562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e564:	881b      	ldrh	r3, [r3, #0]
 800e566:	b29b      	uxth	r3, r3
 800e568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e56c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e570:	b29a      	uxth	r2, r3
 800e572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e574:	801a      	strh	r2, [r3, #0]
 800e576:	e041      	b.n	800e5fc <USB_EPStartXfer+0xb62>
 800e578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e57c:	085b      	lsrs	r3, r3, #1
 800e57e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e586:	f003 0301 	and.w	r3, r3, #1
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d004      	beq.n	800e598 <USB_EPStartXfer+0xafe>
 800e58e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e592:	3301      	adds	r3, #1
 800e594:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e59a:	881b      	ldrh	r3, [r3, #0]
 800e59c:	b29a      	uxth	r2, r3
 800e59e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	029b      	lsls	r3, r3, #10
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	b29a      	uxth	r2, r3
 800e5ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5ae:	801a      	strh	r2, [r3, #0]
 800e5b0:	e024      	b.n	800e5fc <USB_EPStartXfer+0xb62>
 800e5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	785b      	ldrb	r3, [r3, #1]
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d11c      	bne.n	800e5fc <USB_EPStartXfer+0xb62>
 800e5c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5d6:	4413      	add	r3, r2
 800e5d8:	673b      	str	r3, [r7, #112]	; 0x70
 800e5da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	011a      	lsls	r2, r3, #4
 800e5e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5ea:	4413      	add	r3, r2
 800e5ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e5f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	895b      	ldrh	r3, [r3, #10]
 800e608:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	6959      	ldr	r1, [r3, #20]
 800e618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e622:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e626:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e62a:	6800      	ldr	r0, [r0, #0]
 800e62c:	f000 ff14 	bl	800f458 <USB_WritePMA>
 800e630:	e0ca      	b.n	800e7c8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	785b      	ldrb	r3, [r3, #1]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d177      	bne.n	800e732 <USB_EPStartXfer+0xc98>
 800e642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	461a      	mov	r2, r3
 800e660:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e662:	4413      	add	r3, r2
 800e664:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e66a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	011a      	lsls	r2, r3, #4
 800e674:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e676:	4413      	add	r3, r2
 800e678:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e67c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e67e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e680:	881b      	ldrh	r3, [r3, #0]
 800e682:	b29b      	uxth	r3, r3
 800e684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e688:	b29a      	uxth	r2, r3
 800e68a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e68c:	801a      	strh	r2, [r3, #0]
 800e68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e692:	2b3e      	cmp	r3, #62	; 0x3e
 800e694:	d921      	bls.n	800e6da <USB_EPStartXfer+0xc40>
 800e696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e69a:	095b      	lsrs	r3, r3, #5
 800e69c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6a4:	f003 031f 	and.w	r3, r3, #31
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d104      	bne.n	800e6b6 <USB_EPStartXfer+0xc1c>
 800e6ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e6b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	029b      	lsls	r3, r3, #10
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6d6:	801a      	strh	r2, [r3, #0]
 800e6d8:	e05c      	b.n	800e794 <USB_EPStartXfer+0xcfa>
 800e6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d10a      	bne.n	800e6f8 <USB_EPStartXfer+0xc5e>
 800e6e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6e4:	881b      	ldrh	r3, [r3, #0]
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6f4:	801a      	strh	r2, [r3, #0]
 800e6f6:	e04d      	b.n	800e794 <USB_EPStartXfer+0xcfa>
 800e6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6fc:	085b      	lsrs	r3, r3, #1
 800e6fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e706:	f003 0301 	and.w	r3, r3, #1
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d004      	beq.n	800e718 <USB_EPStartXfer+0xc7e>
 800e70e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e712:	3301      	adds	r3, #1
 800e714:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e71a:	881b      	ldrh	r3, [r3, #0]
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e722:	b29b      	uxth	r3, r3
 800e724:	029b      	lsls	r3, r3, #10
 800e726:	b29b      	uxth	r3, r3
 800e728:	4313      	orrs	r3, r2
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e72e:	801a      	strh	r2, [r3, #0]
 800e730:	e030      	b.n	800e794 <USB_EPStartXfer+0xcfa>
 800e732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	785b      	ldrb	r3, [r3, #1]
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d128      	bne.n	800e794 <USB_EPStartXfer+0xcfa>
 800e742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e75e:	b29b      	uxth	r3, r3
 800e760:	461a      	mov	r2, r3
 800e762:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e766:	4413      	add	r3, r2
 800e768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e76c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	011a      	lsls	r2, r3, #4
 800e77a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e77e:	4413      	add	r3, r2
 800e780:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e78c:	b29a      	uxth	r2, r3
 800e78e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e792:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	891b      	ldrh	r3, [r3, #8]
 800e7a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	6959      	ldr	r1, [r3, #20]
 800e7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e7ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e7be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e7c2:	6800      	ldr	r0, [r0, #0]
 800e7c4:	f000 fe48 	bl	800f458 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	4413      	add	r3, r2
 800e7e2:	881b      	ldrh	r3, [r3, #0]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e7ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7ee:	817b      	strh	r3, [r7, #10]
 800e7f0:	897b      	ldrh	r3, [r7, #10]
 800e7f2:	f083 0310 	eor.w	r3, r3, #16
 800e7f6:	817b      	strh	r3, [r7, #10]
 800e7f8:	897b      	ldrh	r3, [r7, #10]
 800e7fa:	f083 0320 	eor.w	r3, r3, #32
 800e7fe:	817b      	strh	r3, [r7, #10]
 800e800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e80e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	441a      	add	r2, r3
 800e81a:	897b      	ldrh	r3, [r7, #10]
 800e81c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	8013      	strh	r3, [r2, #0]
 800e830:	f000 bcde 	b.w	800f1f0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	7b1b      	ldrb	r3, [r3, #12]
 800e840:	2b00      	cmp	r3, #0
 800e842:	f040 80bb 	bne.w	800e9bc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	699a      	ldr	r2, [r3, #24]
 800e852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	691b      	ldr	r3, [r3, #16]
 800e85e:	429a      	cmp	r2, r3
 800e860:	d917      	bls.n	800e892 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800e862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	691b      	ldr	r3, [r3, #16]
 800e86e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800e872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	699a      	ldr	r2, [r3, #24]
 800e87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e882:	1ad2      	subs	r2, r2, r3
 800e884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	619a      	str	r2, [r3, #24]
 800e890:	e00e      	b.n	800e8b0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800e892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	699b      	ldr	r3, [r3, #24]
 800e89e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800e8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e8be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e8d4:	4413      	add	r3, r2
 800e8d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	011a      	lsls	r2, r3, #4
 800e8e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e8ec:	4413      	add	r3, r2
 800e8ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e8f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e8f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e8fa:	881b      	ldrh	r3, [r3, #0]
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e902:	b29a      	uxth	r2, r3
 800e904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e908:	801a      	strh	r2, [r3, #0]
 800e90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e90e:	2b3e      	cmp	r3, #62	; 0x3e
 800e910:	d924      	bls.n	800e95c <USB_EPStartXfer+0xec2>
 800e912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e916:	095b      	lsrs	r3, r3, #5
 800e918:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e920:	f003 031f 	and.w	r3, r3, #31
 800e924:	2b00      	cmp	r3, #0
 800e926:	d104      	bne.n	800e932 <USB_EPStartXfer+0xe98>
 800e928:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e92c:	3b01      	subs	r3, #1
 800e92e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e936:	881b      	ldrh	r3, [r3, #0]
 800e938:	b29a      	uxth	r2, r3
 800e93a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e93e:	b29b      	uxth	r3, r3
 800e940:	029b      	lsls	r3, r3, #10
 800e942:	b29b      	uxth	r3, r3
 800e944:	4313      	orrs	r3, r2
 800e946:	b29b      	uxth	r3, r3
 800e948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e94c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e950:	b29a      	uxth	r2, r3
 800e952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e956:	801a      	strh	r2, [r3, #0]
 800e958:	f000 bc10 	b.w	800f17c <USB_EPStartXfer+0x16e2>
 800e95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e960:	2b00      	cmp	r3, #0
 800e962:	d10c      	bne.n	800e97e <USB_EPStartXfer+0xee4>
 800e964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e968:	881b      	ldrh	r3, [r3, #0]
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e974:	b29a      	uxth	r2, r3
 800e976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e97a:	801a      	strh	r2, [r3, #0]
 800e97c:	e3fe      	b.n	800f17c <USB_EPStartXfer+0x16e2>
 800e97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e982:	085b      	lsrs	r3, r3, #1
 800e984:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e98c:	f003 0301 	and.w	r3, r3, #1
 800e990:	2b00      	cmp	r3, #0
 800e992:	d004      	beq.n	800e99e <USB_EPStartXfer+0xf04>
 800e994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e998:	3301      	adds	r3, #1
 800e99a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e99e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9a2:	881b      	ldrh	r3, [r3, #0]
 800e9a4:	b29a      	uxth	r2, r3
 800e9a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	029b      	lsls	r3, r3, #10
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9b8:	801a      	strh	r2, [r3, #0]
 800e9ba:	e3df      	b.n	800f17c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e9bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	78db      	ldrb	r3, [r3, #3]
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	f040 8218 	bne.w	800edfe <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e9ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	785b      	ldrb	r3, [r3, #1]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f040 809d 	bne.w	800eb1a <USB_EPStartXfer+0x1080>
 800e9e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	461a      	mov	r2, r3
 800ea00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea04:	4413      	add	r3, r2
 800ea06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ea0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	011a      	lsls	r2, r3, #4
 800ea18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea1c:	4413      	add	r3, r2
 800ea1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ea22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ea26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ea2a:	881b      	ldrh	r3, [r3, #0]
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ea38:	801a      	strh	r2, [r3, #0]
 800ea3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	691b      	ldr	r3, [r3, #16]
 800ea46:	2b3e      	cmp	r3, #62	; 0x3e
 800ea48:	d92b      	bls.n	800eaa2 <USB_EPStartXfer+0x1008>
 800ea4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	095b      	lsrs	r3, r3, #5
 800ea58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ea5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	691b      	ldr	r3, [r3, #16]
 800ea68:	f003 031f 	and.w	r3, r3, #31
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d104      	bne.n	800ea7a <USB_EPStartXfer+0xfe0>
 800ea70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea74:	3b01      	subs	r3, #1
 800ea76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ea7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ea7e:	881b      	ldrh	r3, [r3, #0]
 800ea80:	b29a      	uxth	r2, r3
 800ea82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	029b      	lsls	r3, r3, #10
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea98:	b29a      	uxth	r2, r3
 800ea9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ea9e:	801a      	strh	r2, [r3, #0]
 800eaa0:	e070      	b.n	800eb84 <USB_EPStartXfer+0x10ea>
 800eaa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eaa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	691b      	ldr	r3, [r3, #16]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d10c      	bne.n	800eacc <USB_EPStartXfer+0x1032>
 800eab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eab6:	881b      	ldrh	r3, [r3, #0]
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eabe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eac8:	801a      	strh	r2, [r3, #0]
 800eaca:	e05b      	b.n	800eb84 <USB_EPStartXfer+0x10ea>
 800eacc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ead0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	691b      	ldr	r3, [r3, #16]
 800ead8:	085b      	lsrs	r3, r3, #1
 800eada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	f003 0301 	and.w	r3, r3, #1
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d004      	beq.n	800eafc <USB_EPStartXfer+0x1062>
 800eaf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eafc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eb00:	881b      	ldrh	r3, [r3, #0]
 800eb02:	b29a      	uxth	r2, r3
 800eb04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	029b      	lsls	r3, r3, #10
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	4313      	orrs	r3, r2
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eb16:	801a      	strh	r2, [r3, #0]
 800eb18:	e034      	b.n	800eb84 <USB_EPStartXfer+0x10ea>
 800eb1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	785b      	ldrb	r3, [r3, #1]
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d12c      	bne.n	800eb84 <USB_EPStartXfer+0x10ea>
 800eb2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eb38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	461a      	mov	r2, r3
 800eb4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eb4e:	4413      	add	r3, r2
 800eb50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eb54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	011a      	lsls	r2, r3, #4
 800eb62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eb66:	4413      	add	r3, r2
 800eb68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800eb6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eb70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eb82:	801a      	strh	r2, [r3, #0]
 800eb84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800eb92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	785b      	ldrb	r3, [r3, #1]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f040 809d 	bne.w	800ecde <USB_EPStartXfer+0x1244>
 800eba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ebb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ebc8:	4413      	add	r3, r2
 800ebca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ebce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	011a      	lsls	r2, r3, #4
 800ebdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ebe6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ebea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ebee:	881b      	ldrh	r3, [r3, #0]
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ebfc:	801a      	strh	r2, [r3, #0]
 800ebfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	691b      	ldr	r3, [r3, #16]
 800ec0a:	2b3e      	cmp	r3, #62	; 0x3e
 800ec0c:	d92b      	bls.n	800ec66 <USB_EPStartXfer+0x11cc>
 800ec0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	095b      	lsrs	r3, r3, #5
 800ec1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ec20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	f003 031f 	and.w	r3, r3, #31
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d104      	bne.n	800ec3e <USB_EPStartXfer+0x11a4>
 800ec34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec38:	3b01      	subs	r3, #1
 800ec3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ec3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec42:	881b      	ldrh	r3, [r3, #0]
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	029b      	lsls	r3, r3, #10
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	4313      	orrs	r3, r2
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec62:	801a      	strh	r2, [r3, #0]
 800ec64:	e069      	b.n	800ed3a <USB_EPStartXfer+0x12a0>
 800ec66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	691b      	ldr	r3, [r3, #16]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d10c      	bne.n	800ec90 <USB_EPStartXfer+0x11f6>
 800ec76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec7a:	881b      	ldrh	r3, [r3, #0]
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec86:	b29a      	uxth	r2, r3
 800ec88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec8c:	801a      	strh	r2, [r3, #0]
 800ec8e:	e054      	b.n	800ed3a <USB_EPStartXfer+0x12a0>
 800ec90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	085b      	lsrs	r3, r3, #1
 800ec9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800eca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	691b      	ldr	r3, [r3, #16]
 800ecae:	f003 0301 	and.w	r3, r3, #1
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d004      	beq.n	800ecc0 <USB_EPStartXfer+0x1226>
 800ecb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecba:	3301      	adds	r3, #1
 800ecbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ecc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	029b      	lsls	r3, r3, #10
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	b29a      	uxth	r2, r3
 800ecd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ecda:	801a      	strh	r2, [r3, #0]
 800ecdc:	e02d      	b.n	800ed3a <USB_EPStartXfer+0x12a0>
 800ecde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ece2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	785b      	ldrb	r3, [r3, #1]
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d125      	bne.n	800ed3a <USB_EPStartXfer+0x12a0>
 800ecee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	461a      	mov	r2, r3
 800ed00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ed04:	4413      	add	r3, r2
 800ed06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ed0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	011a      	lsls	r2, r3, #4
 800ed18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ed1c:	4413      	add	r3, r2
 800ed1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ed22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ed26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	691b      	ldr	r3, [r3, #16]
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ed38:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ed3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	69db      	ldr	r3, [r3, #28]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f000 8218 	beq.w	800f17c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ed4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	4413      	add	r3, r2
 800ed66:	881b      	ldrh	r3, [r3, #0]
 800ed68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ed6c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ed70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d005      	beq.n	800ed84 <USB_EPStartXfer+0x12ea>
 800ed78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ed7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d10d      	bne.n	800eda0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ed84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ed88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	f040 81f5 	bne.w	800f17c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ed92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ed96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f040 81ee 	bne.w	800f17c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800eda0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eda4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4413      	add	r3, r2
 800edba:	881b      	ldrh	r3, [r3, #0]
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800edc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edc6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800edca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	441a      	add	r2, r3
 800ede4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ede8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	8013      	strh	r3, [r2, #0]
 800edfc:	e1be      	b.n	800f17c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800edfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	78db      	ldrb	r3, [r3, #3]
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	f040 81b4 	bne.w	800f178 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ee10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	699a      	ldr	r2, [r3, #24]
 800ee1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	691b      	ldr	r3, [r3, #16]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d917      	bls.n	800ee5c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800ee2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	691b      	ldr	r3, [r3, #16]
 800ee38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800ee3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	699a      	ldr	r2, [r3, #24]
 800ee48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee4c:	1ad2      	subs	r2, r2, r3
 800ee4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	619a      	str	r2, [r3, #24]
 800ee5a:	e00e      	b.n	800ee7a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ee5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	699b      	ldr	r3, [r3, #24]
 800ee68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ee6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2200      	movs	r2, #0
 800ee78:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ee7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	785b      	ldrb	r3, [r3, #1]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	f040 8085 	bne.w	800ef96 <USB_EPStartXfer+0x14fc>
 800ee8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ee9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	461a      	mov	r2, r3
 800eeac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800eeb0:	4413      	add	r3, r2
 800eeb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800eeb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	011a      	lsls	r2, r3, #4
 800eec4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800eec8:	4413      	add	r3, r2
 800eeca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800eece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eed2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eed6:	881b      	ldrh	r3, [r3, #0]
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eede:	b29a      	uxth	r2, r3
 800eee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eee4:	801a      	strh	r2, [r3, #0]
 800eee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eeea:	2b3e      	cmp	r3, #62	; 0x3e
 800eeec:	d923      	bls.n	800ef36 <USB_EPStartXfer+0x149c>
 800eeee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eef2:	095b      	lsrs	r3, r3, #5
 800eef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800eef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eefc:	f003 031f 	and.w	r3, r3, #31
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d104      	bne.n	800ef0e <USB_EPStartXfer+0x1474>
 800ef04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ef0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	b29a      	uxth	r2, r3
 800ef16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	029b      	lsls	r3, r3, #10
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	4313      	orrs	r3, r2
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef32:	801a      	strh	r2, [r3, #0]
 800ef34:	e060      	b.n	800eff8 <USB_EPStartXfer+0x155e>
 800ef36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d10c      	bne.n	800ef58 <USB_EPStartXfer+0x14be>
 800ef3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef42:	881b      	ldrh	r3, [r3, #0]
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef54:	801a      	strh	r2, [r3, #0]
 800ef56:	e04f      	b.n	800eff8 <USB_EPStartXfer+0x155e>
 800ef58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef5c:	085b      	lsrs	r3, r3, #1
 800ef5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ef62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef66:	f003 0301 	and.w	r3, r3, #1
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d004      	beq.n	800ef78 <USB_EPStartXfer+0x14de>
 800ef6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef72:	3301      	adds	r3, #1
 800ef74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ef78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef7c:	881b      	ldrh	r3, [r3, #0]
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	029b      	lsls	r3, r3, #10
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	b29a      	uxth	r2, r3
 800ef8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef92:	801a      	strh	r2, [r3, #0]
 800ef94:	e030      	b.n	800eff8 <USB_EPStartXfer+0x155e>
 800ef96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	785b      	ldrb	r3, [r3, #1]
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d128      	bne.n	800eff8 <USB_EPStartXfer+0x155e>
 800efa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800efb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	461a      	mov	r2, r3
 800efc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800efca:	4413      	add	r3, r2
 800efcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800efd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	011a      	lsls	r2, r3, #4
 800efde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800efe2:	4413      	add	r3, r2
 800efe4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800efe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800efec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eff0:	b29a      	uxth	r2, r3
 800eff2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800eff6:	801a      	strh	r2, [r3, #0]
 800eff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800effc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f00a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	785b      	ldrb	r3, [r3, #1]
 800f012:	2b00      	cmp	r3, #0
 800f014:	f040 8085 	bne.w	800f122 <USB_EPStartXfer+0x1688>
 800f018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f01c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f02a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f034:	b29b      	uxth	r3, r3
 800f036:	461a      	mov	r2, r3
 800f038:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f03c:	4413      	add	r3, r2
 800f03e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	011a      	lsls	r2, r3, #4
 800f050:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f054:	4413      	add	r3, r2
 800f056:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f05a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f05e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f062:	881b      	ldrh	r3, [r3, #0]
 800f064:	b29b      	uxth	r3, r3
 800f066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f070:	801a      	strh	r2, [r3, #0]
 800f072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f076:	2b3e      	cmp	r3, #62	; 0x3e
 800f078:	d923      	bls.n	800f0c2 <USB_EPStartXfer+0x1628>
 800f07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f07e:	095b      	lsrs	r3, r3, #5
 800f080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f088:	f003 031f 	and.w	r3, r3, #31
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d104      	bne.n	800f09a <USB_EPStartXfer+0x1600>
 800f090:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f094:	3b01      	subs	r3, #1
 800f096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f09a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f09e:	881b      	ldrh	r3, [r3, #0]
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	029b      	lsls	r3, r3, #10
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0b8:	b29a      	uxth	r2, r3
 800f0ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f0be:	801a      	strh	r2, [r3, #0]
 800f0c0:	e05c      	b.n	800f17c <USB_EPStartXfer+0x16e2>
 800f0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d10c      	bne.n	800f0e4 <USB_EPStartXfer+0x164a>
 800f0ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f0ce:	881b      	ldrh	r3, [r3, #0]
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f0e0:	801a      	strh	r2, [r3, #0]
 800f0e2:	e04b      	b.n	800f17c <USB_EPStartXfer+0x16e2>
 800f0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0e8:	085b      	lsrs	r3, r3, #1
 800f0ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0f2:	f003 0301 	and.w	r3, r3, #1
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d004      	beq.n	800f104 <USB_EPStartXfer+0x166a>
 800f0fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f0fe:	3301      	adds	r3, #1
 800f100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f104:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f108:	881b      	ldrh	r3, [r3, #0]
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f110:	b29b      	uxth	r3, r3
 800f112:	029b      	lsls	r3, r3, #10
 800f114:	b29b      	uxth	r3, r3
 800f116:	4313      	orrs	r3, r2
 800f118:	b29a      	uxth	r2, r3
 800f11a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f11e:	801a      	strh	r2, [r3, #0]
 800f120:	e02c      	b.n	800f17c <USB_EPStartXfer+0x16e2>
 800f122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	785b      	ldrb	r3, [r3, #1]
 800f12e:	2b01      	cmp	r3, #1
 800f130:	d124      	bne.n	800f17c <USB_EPStartXfer+0x16e2>
 800f132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f140:	b29b      	uxth	r3, r3
 800f142:	461a      	mov	r2, r3
 800f144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f148:	4413      	add	r3, r2
 800f14a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f14e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	011a      	lsls	r2, r3, #4
 800f15c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f160:	4413      	add	r3, r2
 800f162:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f16e:	b29a      	uxth	r2, r3
 800f170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f174:	801a      	strh	r2, [r3, #0]
 800f176:	e001      	b.n	800f17c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f178:	2301      	movs	r3, #1
 800f17a:	e03a      	b.n	800f1f2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f18a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	781b      	ldrb	r3, [r3, #0]
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	4413      	add	r3, r2
 800f196:	881b      	ldrh	r3, [r3, #0]
 800f198:	b29b      	uxth	r3, r3
 800f19a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1a2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f1a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f1aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f1ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f1b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f1b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f1ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f1be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	441a      	add	r2, r3
 800f1d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f1dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f1f0:	2300      	movs	r3, #0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b085      	sub	sp, #20
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	785b      	ldrb	r3, [r3, #1]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d020      	beq.n	800f250 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	4413      	add	r3, r2
 800f218:	881b      	ldrh	r3, [r3, #0]
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f224:	81bb      	strh	r3, [r7, #12]
 800f226:	89bb      	ldrh	r3, [r7, #12]
 800f228:	f083 0310 	eor.w	r3, r3, #16
 800f22c:	81bb      	strh	r3, [r7, #12]
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	441a      	add	r2, r3
 800f238:	89bb      	ldrh	r3, [r7, #12]
 800f23a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f23e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	8013      	strh	r3, [r2, #0]
 800f24e:	e01f      	b.n	800f290 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	4413      	add	r3, r2
 800f25a:	881b      	ldrh	r3, [r3, #0]
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f266:	81fb      	strh	r3, [r7, #14]
 800f268:	89fb      	ldrh	r3, [r7, #14]
 800f26a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f26e:	81fb      	strh	r3, [r7, #14]
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	441a      	add	r2, r3
 800f27a:	89fb      	ldrh	r3, [r7, #14]
 800f27c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f290:	2300      	movs	r3, #0
}
 800f292:	4618      	mov	r0, r3
 800f294:	3714      	adds	r7, #20
 800f296:	46bd      	mov	sp, r7
 800f298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29c:	4770      	bx	lr

0800f29e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f29e:	b480      	push	{r7}
 800f2a0:	b087      	sub	sp, #28
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
 800f2a6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	7b1b      	ldrb	r3, [r3, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	f040 809d 	bne.w	800f3ec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	785b      	ldrb	r3, [r3, #1]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d04c      	beq.n	800f354 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	4413      	add	r3, r2
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	823b      	strh	r3, [r7, #16]
 800f2c8:	8a3b      	ldrh	r3, [r7, #16]
 800f2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d01b      	beq.n	800f30a <USB_EPClearStall+0x6c>
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	009b      	lsls	r3, r3, #2
 800f2da:	4413      	add	r3, r2
 800f2dc:	881b      	ldrh	r3, [r3, #0]
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2e8:	81fb      	strh	r3, [r7, #14]
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	441a      	add	r2, r3
 800f2f4:	89fb      	ldrh	r3, [r7, #14]
 800f2f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f302:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f306:	b29b      	uxth	r3, r3
 800f308:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	78db      	ldrb	r3, [r3, #3]
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d06c      	beq.n	800f3ec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	4413      	add	r3, r2
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	b29b      	uxth	r3, r3
 800f320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f328:	81bb      	strh	r3, [r7, #12]
 800f32a:	89bb      	ldrh	r3, [r7, #12]
 800f32c:	f083 0320 	eor.w	r3, r3, #32
 800f330:	81bb      	strh	r3, [r7, #12]
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	441a      	add	r2, r3
 800f33c:	89bb      	ldrh	r3, [r7, #12]
 800f33e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f34a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f34e:	b29b      	uxth	r3, r3
 800f350:	8013      	strh	r3, [r2, #0]
 800f352:	e04b      	b.n	800f3ec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	4413      	add	r3, r2
 800f35e:	881b      	ldrh	r3, [r3, #0]
 800f360:	82fb      	strh	r3, [r7, #22]
 800f362:	8afb      	ldrh	r3, [r7, #22]
 800f364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d01b      	beq.n	800f3a4 <USB_EPClearStall+0x106>
 800f36c:	687a      	ldr	r2, [r7, #4]
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	009b      	lsls	r3, r3, #2
 800f374:	4413      	add	r3, r2
 800f376:	881b      	ldrh	r3, [r3, #0]
 800f378:	b29b      	uxth	r3, r3
 800f37a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f37e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f382:	82bb      	strh	r3, [r7, #20]
 800f384:	687a      	ldr	r2, [r7, #4]
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	441a      	add	r2, r3
 800f38e:	8abb      	ldrh	r3, [r7, #20]
 800f390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	4413      	add	r3, r2
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f3b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3ba:	827b      	strh	r3, [r7, #18]
 800f3bc:	8a7b      	ldrh	r3, [r7, #18]
 800f3be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f3c2:	827b      	strh	r3, [r7, #18]
 800f3c4:	8a7b      	ldrh	r3, [r7, #18]
 800f3c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f3ca:	827b      	strh	r3, [r7, #18]
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	441a      	add	r2, r3
 800f3d6:	8a7b      	ldrh	r3, [r7, #18]
 800f3d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f3ec:	2300      	movs	r3, #0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	371c      	adds	r7, #28
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f3fa:	b480      	push	{r7}
 800f3fc:	b083      	sub	sp, #12
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
 800f402:	460b      	mov	r3, r1
 800f404:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f406:	78fb      	ldrb	r3, [r7, #3]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d103      	bne.n	800f414 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2280      	movs	r2, #128	; 0x80
 800f410:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800f414:	2300      	movs	r3, #0
}
 800f416:	4618      	mov	r0, r3
 800f418:	370c      	adds	r7, #12
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f422:	b480      	push	{r7}
 800f424:	b083      	sub	sp, #12
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f446:	b29b      	uxth	r3, r3
 800f448:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f44a:	68fb      	ldr	r3, [r7, #12]
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3714      	adds	r7, #20
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr

0800f458 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f458:	b480      	push	{r7}
 800f45a:	b08b      	sub	sp, #44	; 0x2c
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	60f8      	str	r0, [r7, #12]
 800f460:	60b9      	str	r1, [r7, #8]
 800f462:	4611      	mov	r1, r2
 800f464:	461a      	mov	r2, r3
 800f466:	460b      	mov	r3, r1
 800f468:	80fb      	strh	r3, [r7, #6]
 800f46a:	4613      	mov	r3, r2
 800f46c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f46e:	88bb      	ldrh	r3, [r7, #4]
 800f470:	3301      	adds	r3, #1
 800f472:	085b      	lsrs	r3, r3, #1
 800f474:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f47e:	88fb      	ldrh	r3, [r7, #6]
 800f480:	005a      	lsls	r2, r3, #1
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	4413      	add	r3, r2
 800f486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f48a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f48c:	69bb      	ldr	r3, [r7, #24]
 800f48e:	627b      	str	r3, [r7, #36]	; 0x24
 800f490:	e01e      	b.n	800f4d0 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800f492:	69fb      	ldr	r3, [r7, #28]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	3301      	adds	r3, #1
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	021b      	lsls	r3, r3, #8
 800f4a0:	b21a      	sxth	r2, r3
 800f4a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	b21b      	sxth	r3, r3
 800f4aa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f4ac:	6a3b      	ldr	r3, [r7, #32]
 800f4ae:	8a7a      	ldrh	r2, [r7, #18]
 800f4b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f4b2:	6a3b      	ldr	r3, [r7, #32]
 800f4b4:	3302      	adds	r3, #2
 800f4b6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800f4b8:	6a3b      	ldr	r3, [r7, #32]
 800f4ba:	3302      	adds	r3, #2
 800f4bc:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800f4c4:	69fb      	ldr	r3, [r7, #28]
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	3b01      	subs	r3, #1
 800f4ce:	627b      	str	r3, [r7, #36]	; 0x24
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d1dd      	bne.n	800f492 <USB_WritePMA+0x3a>
  }
}
 800f4d6:	bf00      	nop
 800f4d8:	bf00      	nop
 800f4da:	372c      	adds	r7, #44	; 0x2c
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr

0800f4e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b08b      	sub	sp, #44	; 0x2c
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	4611      	mov	r1, r2
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	80fb      	strh	r3, [r7, #6]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f4fa:	88bb      	ldrh	r3, [r7, #4]
 800f4fc:	085b      	lsrs	r3, r3, #1
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f50a:	88fb      	ldrh	r3, [r7, #6]
 800f50c:	005a      	lsls	r2, r3, #1
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	4413      	add	r3, r2
 800f512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f516:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	627b      	str	r3, [r7, #36]	; 0x24
 800f51c:	e01b      	b.n	800f556 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f51e:	6a3b      	ldr	r3, [r7, #32]
 800f520:	881b      	ldrh	r3, [r3, #0]
 800f522:	b29b      	uxth	r3, r3
 800f524:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f526:	6a3b      	ldr	r3, [r7, #32]
 800f528:	3302      	adds	r3, #2
 800f52a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	b2da      	uxtb	r2, r3
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	3301      	adds	r3, #1
 800f538:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	0a1b      	lsrs	r3, r3, #8
 800f53e:	b2da      	uxtb	r2, r3
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	3301      	adds	r3, #1
 800f548:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800f54a:	6a3b      	ldr	r3, [r7, #32]
 800f54c:	3302      	adds	r3, #2
 800f54e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800f550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f552:	3b01      	subs	r3, #1
 800f554:	627b      	str	r3, [r7, #36]	; 0x24
 800f556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d1e0      	bne.n	800f51e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f55c:	88bb      	ldrh	r3, [r7, #4]
 800f55e:	f003 0301 	and.w	r3, r3, #1
 800f562:	b29b      	uxth	r3, r3
 800f564:	2b00      	cmp	r3, #0
 800f566:	d007      	beq.n	800f578 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800f568:	6a3b      	ldr	r3, [r7, #32]
 800f56a:	881b      	ldrh	r3, [r3, #0]
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	b2da      	uxtb	r2, r3
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	701a      	strb	r2, [r3, #0]
  }
}
 800f578:	bf00      	nop
 800f57a:	372c      	adds	r7, #44	; 0x2c
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	1c5a      	adds	r2, r3, #1
 800f590:	607a      	str	r2, [r7, #4]
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800f596:	89fb      	ldrh	r3, [r7, #14]
 800f598:	021b      	lsls	r3, r3, #8
 800f59a:	b21a      	sxth	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	b21b      	sxth	r3, r3
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	b21b      	sxth	r3, r3
 800f5a6:	b29b      	uxth	r3, r3
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3714      	adds	r7, #20
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	683a      	ldr	r2, [r7, #0]
 800f5c2:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2204      	movs	r2, #4
 800f5c8:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2204      	movs	r2, #4
 800f5ce:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	1ad3      	subs	r3, r2, r3
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	3b01      	subs	r3, #1
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	b21a      	sxth	r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f600:	b29b      	uxth	r3, r3
 800f602:	1ad3      	subs	r3, r2, r3
 800f604:	b29b      	uxth	r3, r3
 800f606:	3b01      	subs	r3, #1
 800f608:	b29b      	uxth	r3, r3
 800f60a:	b21a      	sxth	r2, r3
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2201      	movs	r2, #1
 800f628:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2201      	movs	r2, #1
 800f630:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2200      	movs	r2, #0
 800f644:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2200      	movs	r2, #0
 800f654:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2200      	movs	r2, #0
 800f65a:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2200      	movs	r2, #0
 800f672:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800f67a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f684:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2200      	movs	r2, #0
 800f68c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2200      	movs	r2, #0
 800f694:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2200      	movs	r2, #0
 800f69a:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	73fb      	strb	r3, [r7, #15]
 800f6a6:	e010      	b.n	800f6ca <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 800f6a8:	7bfb      	ldrb	r3, [r7, #15]
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	330a      	adds	r3, #10
 800f6ae:	00db      	lsls	r3, r3, #3
 800f6b0:	4413      	add	r3, r2
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800f6b6:	7bfb      	ldrb	r3, [r7, #15]
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	330a      	adds	r3, #10
 800f6bc:	00db      	lsls	r3, r3, #3
 800f6be:	4413      	add	r3, r2
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f6c4:	7bfb      	ldrb	r3, [r7, #15]
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	73fb      	strb	r3, [r7, #15]
 800f6ca:	7bfb      	ldrb	r3, [r7, #15]
 800f6cc:	2b03      	cmp	r3, #3
 800f6ce:	d9eb      	bls.n	800f6a8 <UG_Init+0xf4>
   }

   gui = g;
 800f6d0:	4a04      	ldr	r2, [pc, #16]	; (800f6e4 <UG_Init+0x130>)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6013      	str	r3, [r2, #0]
   return 1;
 800f6d6:	2301      	movs	r3, #1
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3714      	adds	r7, #20
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr
 800f6e4:	20001a18 	.word	0x20001a18

0800f6e8 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800f6f0:	4b04      	ldr	r3, [pc, #16]	; (800f704 <UG_FontSelect+0x1c>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f6f8:	bf00      	nop
 800f6fa:	370c      	adds	r7, #12
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr
 800f704:	20001a18 	.word	0x20001a18

0800f708 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af02      	add	r7, sp, #8
 800f70e:	4603      	mov	r3, r0
 800f710:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800f712:	4b0e      	ldr	r3, [pc, #56]	; (800f74c <UG_FillScreen+0x44>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	3b01      	subs	r3, #1
 800f720:	b29b      	uxth	r3, r3
 800f722:	b21a      	sxth	r2, r3
 800f724:	4b09      	ldr	r3, [pc, #36]	; (800f74c <UG_FillScreen+0x44>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f72e:	b29b      	uxth	r3, r3
 800f730:	3b01      	subs	r3, #1
 800f732:	b29b      	uxth	r3, r3
 800f734:	b219      	sxth	r1, r3
 800f736:	88fb      	ldrh	r3, [r7, #6]
 800f738:	9300      	str	r3, [sp, #0]
 800f73a:	460b      	mov	r3, r1
 800f73c:	2100      	movs	r1, #0
 800f73e:	2000      	movs	r0, #0
 800f740:	f000 f806 	bl	800f750 <UG_FillFrame>
}
 800f744:	bf00      	nop
 800f746:	3708      	adds	r7, #8
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	20001a18 	.word	0x20001a18

0800f750 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800f750:	b5b0      	push	{r4, r5, r7, lr}
 800f752:	b086      	sub	sp, #24
 800f754:	af02      	add	r7, sp, #8
 800f756:	4604      	mov	r4, r0
 800f758:	4608      	mov	r0, r1
 800f75a:	4611      	mov	r1, r2
 800f75c:	461a      	mov	r2, r3
 800f75e:	4623      	mov	r3, r4
 800f760:	80fb      	strh	r3, [r7, #6]
 800f762:	4603      	mov	r3, r0
 800f764:	80bb      	strh	r3, [r7, #4]
 800f766:	460b      	mov	r3, r1
 800f768:	807b      	strh	r3, [r7, #2]
 800f76a:	4613      	mov	r3, r2
 800f76c:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800f76e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f776:	429a      	cmp	r2, r3
 800f778:	da05      	bge.n	800f786 <UG_FillFrame+0x36>
     swap(x1,x2);
 800f77a:	88fb      	ldrh	r3, [r7, #6]
 800f77c:	817b      	strh	r3, [r7, #10]
 800f77e:	887b      	ldrh	r3, [r7, #2]
 800f780:	80fb      	strh	r3, [r7, #6]
 800f782:	897b      	ldrh	r3, [r7, #10]
 800f784:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800f786:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f78a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f78e:	429a      	cmp	r2, r3
 800f790:	da05      	bge.n	800f79e <UG_FillFrame+0x4e>
     swap(y1,y2);
 800f792:	88bb      	ldrh	r3, [r7, #4]
 800f794:	813b      	strh	r3, [r7, #8]
 800f796:	883b      	ldrh	r3, [r7, #0]
 800f798:	80bb      	strh	r3, [r7, #4]
 800f79a:	893b      	ldrh	r3, [r7, #8]
 800f79c:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800f79e:	4b24      	ldr	r3, [pc, #144]	; (800f830 <UG_FillFrame+0xe0>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f7a6:	f003 0302 	and.w	r3, r3, #2
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d012      	beq.n	800f7d4 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f7ae:	4b20      	ldr	r3, [pc, #128]	; (800f830 <UG_FillFrame+0xe0>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7b4:	461d      	mov	r5, r3
 800f7b6:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f7ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f7be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f7c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f7c6:	8c3b      	ldrh	r3, [r7, #32]
 800f7c8:	9300      	str	r3, [sp, #0]
 800f7ca:	4623      	mov	r3, r4
 800f7cc:	47a8      	blx	r5
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d028      	beq.n	800f826 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 800f7d4:	88bb      	ldrh	r3, [r7, #4]
 800f7d6:	81bb      	strh	r3, [r7, #12]
 800f7d8:	e01e      	b.n	800f818 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 800f7da:	88fb      	ldrh	r3, [r7, #6]
 800f7dc:	81fb      	strh	r3, [r7, #14]
 800f7de:	e00f      	b.n	800f800 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 800f7e0:	4b13      	ldr	r3, [pc, #76]	; (800f830 <UG_FillFrame+0xe0>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	8c3a      	ldrh	r2, [r7, #32]
 800f7ea:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800f7ee:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800f7f2:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800f7f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	81fb      	strh	r3, [r7, #14]
 800f800:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f804:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f808:	429a      	cmp	r2, r3
 800f80a:	dde9      	ble.n	800f7e0 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800f80c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f810:	b29b      	uxth	r3, r3
 800f812:	3301      	adds	r3, #1
 800f814:	b29b      	uxth	r3, r3
 800f816:	81bb      	strh	r3, [r7, #12]
 800f818:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f81c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f820:	429a      	cmp	r2, r3
 800f822:	ddda      	ble.n	800f7da <UG_FillFrame+0x8a>
 800f824:	e000      	b.n	800f828 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f826:	bf00      	nop
      }
   }
}
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bdb0      	pop	{r4, r5, r7, pc}
 800f82e:	bf00      	nop
 800f830:	20001a18 	.word	0x20001a18

0800f834 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800f834:	b590      	push	{r4, r7, lr}
 800f836:	b085      	sub	sp, #20
 800f838:	af02      	add	r7, sp, #8
 800f83a:	4604      	mov	r4, r0
 800f83c:	4608      	mov	r0, r1
 800f83e:	4611      	mov	r1, r2
 800f840:	461a      	mov	r2, r3
 800f842:	4623      	mov	r3, r4
 800f844:	80fb      	strh	r3, [r7, #6]
 800f846:	4603      	mov	r3, r0
 800f848:	80bb      	strh	r3, [r7, #4]
 800f84a:	460b      	mov	r3, r1
 800f84c:	807b      	strh	r3, [r7, #2]
 800f84e:	4613      	mov	r3, r2
 800f850:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 800f852:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800f856:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f85a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f85e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f862:	8b3b      	ldrh	r3, [r7, #24]
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	4623      	mov	r3, r4
 800f868:	f000 f912 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 800f86c:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f870:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f874:	f9b7 1000 	ldrsh.w	r1, [r7]
 800f878:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f87c:	8b3b      	ldrh	r3, [r7, #24]
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	4623      	mov	r3, r4
 800f882:	f000 f905 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 800f886:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f88a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f88e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f892:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f896:	8b3b      	ldrh	r3, [r7, #24]
 800f898:	9300      	str	r3, [sp, #0]
 800f89a:	4623      	mov	r3, r4
 800f89c:	f000 f8f8 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 800f8a0:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f8a4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f8a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f8ac:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800f8b0:	8b3b      	ldrh	r3, [r7, #24]
 800f8b2:	9300      	str	r3, [sp, #0]
 800f8b4:	4623      	mov	r3, r4
 800f8b6:	f000 f8eb 	bl	800fa90 <UG_DrawLine>
}
 800f8ba:	bf00      	nop
 800f8bc:	370c      	adds	r7, #12
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd90      	pop	{r4, r7, pc}
	...

0800f8c4 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 800f8c4:	b590      	push	{r4, r7, lr}
 800f8c6:	b087      	sub	sp, #28
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	4608      	mov	r0, r1
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	4623      	mov	r3, r4
 800f8d4:	80fb      	strh	r3, [r7, #6]
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	80bb      	strh	r3, [r7, #4]
 800f8da:	460b      	mov	r3, r1
 800f8dc:	807b      	strh	r3, [r7, #2]
 800f8de:	4613      	mov	r3, r2
 800f8e0:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 800f8e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f2c0 80c8 	blt.w	800fa7c <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 800f8ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f2c0 80c5 	blt.w	800fa80 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 800f8f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	f340 80c2 	ble.w	800fa84 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 800f900:	887b      	ldrh	r3, [r7, #2]
 800f902:	005b      	lsls	r3, r3, #1
 800f904:	b29b      	uxth	r3, r3
 800f906:	f1c3 0301 	rsb	r3, r3, #1
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	827b      	strh	r3, [r7, #18]
   yd = 0;
 800f90e:	2300      	movs	r3, #0
 800f910:	823b      	strh	r3, [r7, #16]
   e = 0;
 800f912:	2300      	movs	r3, #0
 800f914:	81fb      	strh	r3, [r7, #14]
   x = r;
 800f916:	887b      	ldrh	r3, [r7, #2]
 800f918:	82fb      	strh	r3, [r7, #22]
   y = 0;
 800f91a:	2300      	movs	r3, #0
 800f91c:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 800f91e:	e0a5      	b.n	800fa6c <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 800f920:	4b5a      	ldr	r3, [pc, #360]	; (800fa8c <UG_DrawCircle+0x1c8>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	88f9      	ldrh	r1, [r7, #6]
 800f92a:	8afa      	ldrh	r2, [r7, #22]
 800f92c:	1a8a      	subs	r2, r1, r2
 800f92e:	b292      	uxth	r2, r2
 800f930:	b210      	sxth	r0, r2
 800f932:	88b9      	ldrh	r1, [r7, #4]
 800f934:	8aba      	ldrh	r2, [r7, #20]
 800f936:	440a      	add	r2, r1
 800f938:	b292      	uxth	r2, r2
 800f93a:	b211      	sxth	r1, r2
 800f93c:	883a      	ldrh	r2, [r7, #0]
 800f93e:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 800f940:	4b52      	ldr	r3, [pc, #328]	; (800fa8c <UG_DrawCircle+0x1c8>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	88f9      	ldrh	r1, [r7, #6]
 800f94a:	8afa      	ldrh	r2, [r7, #22]
 800f94c:	1a8a      	subs	r2, r1, r2
 800f94e:	b292      	uxth	r2, r2
 800f950:	b210      	sxth	r0, r2
 800f952:	88b9      	ldrh	r1, [r7, #4]
 800f954:	8aba      	ldrh	r2, [r7, #20]
 800f956:	1a8a      	subs	r2, r1, r2
 800f958:	b292      	uxth	r2, r2
 800f95a:	b211      	sxth	r1, r2
 800f95c:	883a      	ldrh	r2, [r7, #0]
 800f95e:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 800f960:	4b4a      	ldr	r3, [pc, #296]	; (800fa8c <UG_DrawCircle+0x1c8>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	88f9      	ldrh	r1, [r7, #6]
 800f96a:	8afa      	ldrh	r2, [r7, #22]
 800f96c:	440a      	add	r2, r1
 800f96e:	b292      	uxth	r2, r2
 800f970:	b210      	sxth	r0, r2
 800f972:	88b9      	ldrh	r1, [r7, #4]
 800f974:	8aba      	ldrh	r2, [r7, #20]
 800f976:	440a      	add	r2, r1
 800f978:	b292      	uxth	r2, r2
 800f97a:	b211      	sxth	r1, r2
 800f97c:	883a      	ldrh	r2, [r7, #0]
 800f97e:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 800f980:	4b42      	ldr	r3, [pc, #264]	; (800fa8c <UG_DrawCircle+0x1c8>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	88f9      	ldrh	r1, [r7, #6]
 800f98a:	8afa      	ldrh	r2, [r7, #22]
 800f98c:	440a      	add	r2, r1
 800f98e:	b292      	uxth	r2, r2
 800f990:	b210      	sxth	r0, r2
 800f992:	88b9      	ldrh	r1, [r7, #4]
 800f994:	8aba      	ldrh	r2, [r7, #20]
 800f996:	1a8a      	subs	r2, r1, r2
 800f998:	b292      	uxth	r2, r2
 800f99a:	b211      	sxth	r1, r2
 800f99c:	883a      	ldrh	r2, [r7, #0]
 800f99e:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 800f9a0:	4b3a      	ldr	r3, [pc, #232]	; (800fa8c <UG_DrawCircle+0x1c8>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	88f9      	ldrh	r1, [r7, #6]
 800f9aa:	8aba      	ldrh	r2, [r7, #20]
 800f9ac:	1a8a      	subs	r2, r1, r2
 800f9ae:	b292      	uxth	r2, r2
 800f9b0:	b210      	sxth	r0, r2
 800f9b2:	88b9      	ldrh	r1, [r7, #4]
 800f9b4:	8afa      	ldrh	r2, [r7, #22]
 800f9b6:	440a      	add	r2, r1
 800f9b8:	b292      	uxth	r2, r2
 800f9ba:	b211      	sxth	r1, r2
 800f9bc:	883a      	ldrh	r2, [r7, #0]
 800f9be:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 800f9c0:	4b32      	ldr	r3, [pc, #200]	; (800fa8c <UG_DrawCircle+0x1c8>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	88f9      	ldrh	r1, [r7, #6]
 800f9ca:	8aba      	ldrh	r2, [r7, #20]
 800f9cc:	1a8a      	subs	r2, r1, r2
 800f9ce:	b292      	uxth	r2, r2
 800f9d0:	b210      	sxth	r0, r2
 800f9d2:	88b9      	ldrh	r1, [r7, #4]
 800f9d4:	8afa      	ldrh	r2, [r7, #22]
 800f9d6:	1a8a      	subs	r2, r1, r2
 800f9d8:	b292      	uxth	r2, r2
 800f9da:	b211      	sxth	r1, r2
 800f9dc:	883a      	ldrh	r2, [r7, #0]
 800f9de:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 800f9e0:	4b2a      	ldr	r3, [pc, #168]	; (800fa8c <UG_DrawCircle+0x1c8>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	88f9      	ldrh	r1, [r7, #6]
 800f9ea:	8aba      	ldrh	r2, [r7, #20]
 800f9ec:	440a      	add	r2, r1
 800f9ee:	b292      	uxth	r2, r2
 800f9f0:	b210      	sxth	r0, r2
 800f9f2:	88b9      	ldrh	r1, [r7, #4]
 800f9f4:	8afa      	ldrh	r2, [r7, #22]
 800f9f6:	440a      	add	r2, r1
 800f9f8:	b292      	uxth	r2, r2
 800f9fa:	b211      	sxth	r1, r2
 800f9fc:	883a      	ldrh	r2, [r7, #0]
 800f9fe:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 800fa00:	4b22      	ldr	r3, [pc, #136]	; (800fa8c <UG_DrawCircle+0x1c8>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	88f9      	ldrh	r1, [r7, #6]
 800fa0a:	8aba      	ldrh	r2, [r7, #20]
 800fa0c:	440a      	add	r2, r1
 800fa0e:	b292      	uxth	r2, r2
 800fa10:	b210      	sxth	r0, r2
 800fa12:	88b9      	ldrh	r1, [r7, #4]
 800fa14:	8afa      	ldrh	r2, [r7, #22]
 800fa16:	1a8a      	subs	r2, r1, r2
 800fa18:	b292      	uxth	r2, r2
 800fa1a:	b211      	sxth	r1, r2
 800fa1c:	883a      	ldrh	r2, [r7, #0]
 800fa1e:	4798      	blx	r3

      y++;
 800fa20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	3301      	adds	r3, #1
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	82bb      	strh	r3, [r7, #20]
      e += yd;
 800fa2c:	89fa      	ldrh	r2, [r7, #14]
 800fa2e:	8a3b      	ldrh	r3, [r7, #16]
 800fa30:	4413      	add	r3, r2
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 800fa36:	8a3b      	ldrh	r3, [r7, #16]
 800fa38:	3302      	adds	r3, #2
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 800fa3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fa42:	005a      	lsls	r2, r3, #1
 800fa44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa48:	4413      	add	r3, r2
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	dd0e      	ble.n	800fa6c <UG_DrawCircle+0x1a8>
      {
         x--;
 800fa4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	3b01      	subs	r3, #1
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	82fb      	strh	r3, [r7, #22]
         e += xd;
 800fa5a:	89fa      	ldrh	r2, [r7, #14]
 800fa5c:	8a7b      	ldrh	r3, [r7, #18]
 800fa5e:	4413      	add	r3, r2
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 800fa64:	8a7b      	ldrh	r3, [r7, #18]
 800fa66:	3302      	adds	r3, #2
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 800fa6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa70:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	f6bf af53 	bge.w	800f920 <UG_DrawCircle+0x5c>
 800fa7a:	e004      	b.n	800fa86 <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 800fa7c:	bf00      	nop
 800fa7e:	e002      	b.n	800fa86 <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 800fa80:	bf00      	nop
 800fa82:	e000      	b.n	800fa86 <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 800fa84:	bf00      	nop
      }
   }
}
 800fa86:	371c      	adds	r7, #28
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd90      	pop	{r4, r7, pc}
 800fa8c:	20001a18 	.word	0x20001a18

0800fa90 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800fa90:	b5b0      	push	{r4, r5, r7, lr}
 800fa92:	b08a      	sub	sp, #40	; 0x28
 800fa94:	af02      	add	r7, sp, #8
 800fa96:	4604      	mov	r4, r0
 800fa98:	4608      	mov	r0, r1
 800fa9a:	4611      	mov	r1, r2
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	4623      	mov	r3, r4
 800faa0:	80fb      	strh	r3, [r7, #6]
 800faa2:	4603      	mov	r3, r0
 800faa4:	80bb      	strh	r3, [r7, #4]
 800faa6:	460b      	mov	r3, r1
 800faa8:	807b      	strh	r3, [r7, #2]
 800faaa:	4613      	mov	r3, r2
 800faac:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800faae:	4b67      	ldr	r3, [pc, #412]	; (800fc4c <UG_DrawLine+0x1bc>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800fab6:	f003 0302 	and.w	r3, r3, #2
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d013      	beq.n	800fae6 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fabe:	4b63      	ldr	r3, [pc, #396]	; (800fc4c <UG_DrawLine+0x1bc>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fac4:	461d      	mov	r5, r3
 800fac6:	f9b7 4000 	ldrsh.w	r4, [r7]
 800faca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800face:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fad2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fad6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fad8:	9300      	str	r3, [sp, #0]
 800fada:	4623      	mov	r3, r4
 800fadc:	47a8      	blx	r5
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	f000 80ae 	beq.w	800fc42 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800fae6:	887a      	ldrh	r2, [r7, #2]
 800fae8:	88fb      	ldrh	r3, [r7, #6]
 800faea:	1ad3      	subs	r3, r2, r3
 800faec:	b29b      	uxth	r3, r3
 800faee:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 800faf0:	883a      	ldrh	r2, [r7, #0]
 800faf2:	88bb      	ldrh	r3, [r7, #4]
 800faf4:	1ad3      	subs	r3, r2, r3
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 800fafa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	bfb8      	it	lt
 800fb02:	425b      	neglt	r3, r3
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 800fb08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	bfb8      	it	lt
 800fb10:	425b      	neglt	r3, r3
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 800fb16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	dd01      	ble.n	800fb22 <UG_DrawLine+0x92>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	e001      	b.n	800fb26 <UG_DrawLine+0x96>
 800fb22:	f04f 33ff 	mov.w	r3, #4294967295
 800fb26:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 800fb28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	dd01      	ble.n	800fb34 <UG_DrawLine+0xa4>
 800fb30:	2301      	movs	r3, #1
 800fb32:	e001      	b.n	800fb38 <UG_DrawLine+0xa8>
 800fb34:	f04f 33ff 	mov.w	r3, #4294967295
 800fb38:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 800fb3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb3e:	105b      	asrs	r3, r3, #1
 800fb40:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800fb42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fb46:	105b      	asrs	r3, r3, #1
 800fb48:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 800fb4a:	88fb      	ldrh	r3, [r7, #6]
 800fb4c:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800fb4e:	88bb      	ldrh	r3, [r7, #4]
 800fb50:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 800fb52:	4b3e      	ldr	r3, [pc, #248]	; (800fc4c <UG_DrawLine+0x1bc>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fb5c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800fb60:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800fb64:	4798      	blx	r3

   if( dxabs >= dyabs )
 800fb66:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800fb6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	db33      	blt.n	800fbda <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 800fb72:	2300      	movs	r3, #0
 800fb74:	83fb      	strh	r3, [r7, #30]
 800fb76:	e029      	b.n	800fbcc <UG_DrawLine+0x13c>
      {
         y += dyabs;
 800fb78:	8b7a      	ldrh	r2, [r7, #26]
 800fb7a:	89fb      	ldrh	r3, [r7, #14]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 800fb82:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800fb86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	db09      	blt.n	800fba2 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 800fb8e:	8b7a      	ldrh	r2, [r7, #26]
 800fb90:	8a3b      	ldrh	r3, [r7, #16]
 800fb92:	1ad3      	subs	r3, r2, r3
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 800fb98:	8afa      	ldrh	r2, [r7, #22]
 800fb9a:	897b      	ldrh	r3, [r7, #10]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 800fba2:	8b3a      	ldrh	r2, [r7, #24]
 800fba4:	89bb      	ldrh	r3, [r7, #12]
 800fba6:	4413      	add	r3, r2
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 800fbac:	4b27      	ldr	r3, [pc, #156]	; (800fc4c <UG_DrawLine+0x1bc>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fbb6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800fbba:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800fbbe:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 800fbc0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	83fb      	strh	r3, [r7, #30]
 800fbcc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800fbd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	dbcf      	blt.n	800fb78 <UG_DrawLine+0xe8>
 800fbd8:	e034      	b.n	800fc44 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800fbda:	2300      	movs	r3, #0
 800fbdc:	83fb      	strh	r3, [r7, #30]
 800fbde:	e029      	b.n	800fc34 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 800fbe0:	8bba      	ldrh	r2, [r7, #28]
 800fbe2:	8a3b      	ldrh	r3, [r7, #16]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 800fbea:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800fbee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	db09      	blt.n	800fc0a <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 800fbf6:	8bba      	ldrh	r2, [r7, #28]
 800fbf8:	89fb      	ldrh	r3, [r7, #14]
 800fbfa:	1ad3      	subs	r3, r2, r3
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800fc00:	8b3a      	ldrh	r2, [r7, #24]
 800fc02:	89bb      	ldrh	r3, [r7, #12]
 800fc04:	4413      	add	r3, r2
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 800fc0a:	8afa      	ldrh	r2, [r7, #22]
 800fc0c:	897b      	ldrh	r3, [r7, #10]
 800fc0e:	4413      	add	r3, r2
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 800fc14:	4b0d      	ldr	r3, [pc, #52]	; (800fc4c <UG_DrawLine+0x1bc>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fc1e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800fc22:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800fc26:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 800fc28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fc2c:	b29b      	uxth	r3, r3
 800fc2e:	3301      	adds	r3, #1
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	83fb      	strh	r3, [r7, #30]
 800fc34:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800fc38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	dbcf      	blt.n	800fbe0 <UG_DrawLine+0x150>
 800fc40:	e000      	b.n	800fc44 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fc42:	bf00      	nop
      }
   }  
}
 800fc44:	3720      	adds	r7, #32
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bdb0      	pop	{r4, r5, r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	20001a18 	.word	0x20001a18

0800fc50 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800fc50:	b590      	push	{r4, r7, lr}
 800fc52:	b087      	sub	sp, #28
 800fc54:	af02      	add	r7, sp, #8
 800fc56:	4603      	mov	r3, r0
 800fc58:	603a      	str	r2, [r7, #0]
 800fc5a:	80fb      	strh	r3, [r7, #6]
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 800fc60:	88fb      	ldrh	r3, [r7, #6]
 800fc62:	81fb      	strh	r3, [r7, #14]
   yp=y;
 800fc64:	88bb      	ldrh	r3, [r7, #4]
 800fc66:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 800fc68:	4b44      	ldr	r3, [pc, #272]	; (800fd7c <UG_PutString+0x12c>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f000 fa96 	bl	80101a0 <_UG_FontSelect>
   while ( *str != 0 )
 800fc74:	e064      	b.n	800fd40 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800fc76:	4b41      	ldr	r3, [pc, #260]	; (800fd7c <UG_PutString+0x12c>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d106      	bne.n	800fc90 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 800fc82:	463b      	mov	r3, r7
 800fc84:	4618      	mov	r0, r3
 800fc86:	f000 f8c7 	bl	800fe18 <_UG_DecodeUTF8>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	817b      	strh	r3, [r7, #10]
 800fc8e:	e004      	b.n	800fc9a <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	1c5a      	adds	r2, r3, #1
 800fc94:	603a      	str	r2, [r7, #0]
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 800fc9a:	897b      	ldrh	r3, [r7, #10]
 800fc9c:	2b0a      	cmp	r3, #10
 800fc9e:	d105      	bne.n	800fcac <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 800fca0:	4b36      	ldr	r3, [pc, #216]	; (800fd7c <UG_PutString+0x12c>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	881b      	ldrh	r3, [r3, #0]
 800fca8:	81fb      	strh	r3, [r7, #14]
         continue;
 800fcaa:	e049      	b.n	800fd40 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 800fcac:	897b      	ldrh	r3, [r7, #10]
 800fcae:	2100      	movs	r1, #0
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f000 f929 	bl	800ff08 <_UG_GetCharData>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 800fcba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fcbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc2:	d100      	bne.n	800fcc6 <UG_PutString+0x76>
 800fcc4:	e03c      	b.n	800fd40 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 800fcc6:	4b2d      	ldr	r3, [pc, #180]	; (800fd7c <UG_PutString+0x12c>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fcd6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fcda:	4413      	add	r3, r2
 800fcdc:	4299      	cmp	r1, r3
 800fcde:	dc12      	bgt.n	800fd06 <UG_PutString+0xb6>
      {
         xp = x;
 800fce0:	88fb      	ldrh	r3, [r7, #6]
 800fce2:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800fce4:	4b25      	ldr	r3, [pc, #148]	; (800fd7c <UG_PutString+0x12c>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fcec:	b21a      	sxth	r2, r3
 800fcee:	4b23      	ldr	r3, [pc, #140]	; (800fd7c <UG_PutString+0x12c>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 800fcf6:	b21b      	sxth	r3, r3
 800fcf8:	4413      	add	r3, r2
 800fcfa:	b21b      	sxth	r3, r3
 800fcfc:	b29a      	uxth	r2, r3
 800fcfe:	89bb      	ldrh	r3, [r7, #12]
 800fd00:	4413      	add	r3, r2
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800fd06:	4b1d      	ldr	r3, [pc, #116]	; (800fd7c <UG_PutString+0x12c>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 800fd0e:	4b1b      	ldr	r3, [pc, #108]	; (800fd7c <UG_PutString+0x12c>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800fd16:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fd1a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800fd1e:	8978      	ldrh	r0, [r7, #10]
 800fd20:	9300      	str	r3, [sp, #0]
 800fd22:	4623      	mov	r3, r4
 800fd24:	f000 fabe 	bl	80102a4 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 800fd28:	4b14      	ldr	r3, [pc, #80]	; (800fd7c <UG_PutString+0x12c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 800fd30:	b29a      	uxth	r2, r3
 800fd32:	893b      	ldrh	r3, [r7, #8]
 800fd34:	4413      	add	r3, r2
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	89fb      	ldrh	r3, [r7, #14]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d196      	bne.n	800fc76 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 800fd48:	4b0c      	ldr	r3, [pc, #48]	; (800fd7c <UG_PutString+0x12c>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fd50:	f003 0302 	and.w	r3, r3, #2
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d00c      	beq.n	800fd72 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800fd58:	4b08      	ldr	r3, [pc, #32]	; (800fd7c <UG_PutString+0x12c>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd5e:	461c      	mov	r4, r3
 800fd60:	f04f 33ff 	mov.w	r3, #4294967295
 800fd64:	f04f 32ff 	mov.w	r2, #4294967295
 800fd68:	f04f 31ff 	mov.w	r1, #4294967295
 800fd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd70:	47a0      	blx	r4
}
 800fd72:	bf00      	nop
 800fd74:	3714      	adds	r7, #20
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd90      	pop	{r4, r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	20001a18 	.word	0x20001a18

0800fd80 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 800fd80:	b480      	push	{r7}
 800fd82:	b083      	sub	sp, #12
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	4603      	mov	r3, r0
 800fd88:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800fd8a:	4b05      	ldr	r3, [pc, #20]	; (800fda0 <UG_SetForecolor+0x20>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	88fa      	ldrh	r2, [r7, #6]
 800fd90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800fd94:	bf00      	nop
 800fd96:	370c      	adds	r7, #12
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr
 800fda0:	20001a18 	.word	0x20001a18

0800fda4 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	4603      	mov	r3, r0
 800fdac:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 800fdae:	4b05      	ldr	r3, [pc, #20]	; (800fdc4 <UG_SetBackcolor+0x20>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	88fa      	ldrh	r2, [r7, #6]
 800fdb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800fdb8:	bf00      	nop
 800fdba:	370c      	adds	r7, #12
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc2:	4770      	bx	lr
 800fdc4:	20001a18 	.word	0x20001a18

0800fdc8 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b083      	sub	sp, #12
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	4603      	mov	r3, r0
 800fdd0:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800fdd2:	4b06      	ldr	r3, [pc, #24]	; (800fdec <UG_FontSetHSpace+0x24>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	88fa      	ldrh	r2, [r7, #6]
 800fdd8:	b252      	sxtb	r2, r2
 800fdda:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 800fdde:	bf00      	nop
 800fde0:	370c      	adds	r7, #12
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	20001a18 	.word	0x20001a18

0800fdf0 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b083      	sub	sp, #12
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 800fdfa:	4b06      	ldr	r3, [pc, #24]	; (800fe14 <UG_FontSetVSpace+0x24>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	88fa      	ldrh	r2, [r7, #6]
 800fe00:	b252      	sxtb	r2, r2
 800fe02:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 800fe06:	bf00      	nop
 800fe08:	370c      	adds	r7, #12
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	20001a18 	.word	0x20001a18

0800fe18 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 800fe18:	b480      	push	{r7}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]

  char c=**str;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 800fe28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	db07      	blt.n	800fe40 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	1c5a      	adds	r2, r3, #1
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	601a      	str	r2, [r3, #0]
    return c;
 800fe3a:	7bfb      	ldrb	r3, [r7, #15]
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	e05c      	b.n	800fefa <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 800fe40:	2300      	movs	r3, #0
 800fe42:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 800fe44:	2300      	movs	r3, #0
 800fe46:	81bb      	strh	r3, [r7, #12]

  while(**str)
 800fe48:	e04f      	b.n	800feea <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	1c5a      	adds	r2, r3, #1
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 800fe5c:	7bbb      	ldrb	r3, [r7, #14]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d130      	bne.n	800fec4 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 800fe62:	7bfb      	ldrb	r3, [r7, #15]
 800fe64:	2bdf      	cmp	r3, #223	; 0xdf
 800fe66:	d806      	bhi.n	800fe76 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 800fe6c:	7bfb      	ldrb	r3, [r7, #15]
 800fe6e:	f003 031f 	and.w	r3, r3, #31
 800fe72:	73fb      	strb	r3, [r7, #15]
 800fe74:	e023      	b.n	800febe <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800fe76:	7bfb      	ldrb	r3, [r7, #15]
 800fe78:	2bef      	cmp	r3, #239	; 0xef
 800fe7a:	d806      	bhi.n	800fe8a <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 800fe7c:	2302      	movs	r3, #2
 800fe7e:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 800fe80:	7bfb      	ldrb	r3, [r7, #15]
 800fe82:	f003 030f 	and.w	r3, r3, #15
 800fe86:	73fb      	strb	r3, [r7, #15]
 800fe88:	e019      	b.n	800febe <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800fe8a:	7bfb      	ldrb	r3, [r7, #15]
 800fe8c:	2bf7      	cmp	r3, #247	; 0xf7
 800fe8e:	d806      	bhi.n	800fe9e <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 800fe90:	2303      	movs	r3, #3
 800fe92:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 800fe94:	7bfb      	ldrb	r3, [r7, #15]
 800fe96:	f003 0307 	and.w	r3, r3, #7
 800fe9a:	73fb      	strb	r3, [r7, #15]
 800fe9c:	e00f      	b.n	800febe <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 800fe9e:	7bfb      	ldrb	r3, [r7, #15]
 800fea0:	2bfb      	cmp	r3, #251	; 0xfb
 800fea2:	d806      	bhi.n	800feb2 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 800fea4:	2304      	movs	r3, #4
 800fea6:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 800fea8:	7bfb      	ldrb	r3, [r7, #15]
 800feaa:	f003 0303 	and.w	r3, r3, #3
 800feae:	73fb      	strb	r3, [r7, #15]
 800feb0:	e005      	b.n	800febe <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 800feb2:	2305      	movs	r3, #5
 800feb4:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 800feb6:	7bfb      	ldrb	r3, [r7, #15]
 800feb8:	f003 0301 	and.w	r3, r3, #1
 800febc:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 800febe:	7bfb      	ldrb	r3, [r7, #15]
 800fec0:	81bb      	strh	r3, [r7, #12]
 800fec2:	e012      	b.n	800feea <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 800fec4:	89bb      	ldrh	r3, [r7, #12]
 800fec6:	019b      	lsls	r3, r3, #6
 800fec8:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 800feca:	7bfb      	ldrb	r3, [r7, #15]
 800fecc:	b21b      	sxth	r3, r3
 800fece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fed2:	b21a      	sxth	r2, r3
 800fed4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fed8:	4313      	orrs	r3, r2
 800feda:	b21b      	sxth	r3, r3
 800fedc:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 800fede:	7bbb      	ldrb	r3, [r7, #14]
 800fee0:	3b01      	subs	r3, #1
 800fee2:	73bb      	strb	r3, [r7, #14]
 800fee4:	7bbb      	ldrb	r3, [r7, #14]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d005      	beq.n	800fef6 <_UG_DecodeUTF8+0xde>
  while(**str)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d1aa      	bne.n	800fe4a <_UG_DecodeUTF8+0x32>
 800fef4:	e000      	b.n	800fef8 <_UG_DecodeUTF8+0xe0>
        break;
 800fef6:	bf00      	nop
    }
  }
  return encoding;
 800fef8:	89bb      	ldrh	r3, [r7, #12]
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3714      	adds	r7, #20
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
	...

0800ff08 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b086      	sub	sp, #24
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	4603      	mov	r3, r0
 800ff10:	6039      	str	r1, [r7, #0]
 800ff12:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 800ff14:	2300      	movs	r3, #0
 800ff16:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 800ff20:	2300      	movs	r3, #0
 800ff22:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 800ff24:	2300      	movs	r3, #0
 800ff26:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800ff28:	4b98      	ldr	r3, [pc, #608]	; (801018c <_UG_GetCharData+0x284>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff2e:	4b98      	ldr	r3, [pc, #608]	; (8010190 <_UG_GetCharData+0x288>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d10f      	bne.n	800ff56 <_UG_GetCharData+0x4e>
 800ff36:	4b97      	ldr	r3, [pc, #604]	; (8010194 <_UG_GetCharData+0x28c>)
 800ff38:	881b      	ldrh	r3, [r3, #0]
 800ff3a:	88fa      	ldrh	r2, [r7, #6]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d10a      	bne.n	800ff56 <_UG_GetCharData+0x4e>
    if(p){
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d003      	beq.n	800ff4e <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 800ff46:	4b94      	ldr	r3, [pc, #592]	; (8010198 <_UG_GetCharData+0x290>)
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 800ff4e:	4b93      	ldr	r3, [pc, #588]	; (801019c <_UG_GetCharData+0x294>)
 800ff50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff54:	e116      	b.n	8010184 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800ff56:	4b8d      	ldr	r3, [pc, #564]	; (801018c <_UG_GetCharData+0x284>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	f000 80cc 	beq.w	80100fc <_UG_GetCharData+0x1f4>
    switch ( encoding )
 800ff64:	88fb      	ldrh	r3, [r7, #6]
 800ff66:	2bfc      	cmp	r3, #252	; 0xfc
 800ff68:	f300 80c8 	bgt.w	80100fc <_UG_GetCharData+0x1f4>
 800ff6c:	2bd6      	cmp	r3, #214	; 0xd6
 800ff6e:	da09      	bge.n	800ff84 <_UG_GetCharData+0x7c>
 800ff70:	2bc4      	cmp	r3, #196	; 0xc4
 800ff72:	d06c      	beq.n	801004e <_UG_GetCharData+0x146>
 800ff74:	2bc4      	cmp	r3, #196	; 0xc4
 800ff76:	f300 80c1 	bgt.w	80100fc <_UG_GetCharData+0x1f4>
 800ff7a:	2bb0      	cmp	r3, #176	; 0xb0
 800ff7c:	d06d      	beq.n	801005a <_UG_GetCharData+0x152>
 800ff7e:	2bb5      	cmp	r3, #181	; 0xb5
 800ff80:	d068      	beq.n	8010054 <_UG_GetCharData+0x14c>
 800ff82:	e06e      	b.n	8010062 <_UG_GetCharData+0x15a>
 800ff84:	3bd6      	subs	r3, #214	; 0xd6
 800ff86:	2b26      	cmp	r3, #38	; 0x26
 800ff88:	f200 80b8 	bhi.w	80100fc <_UG_GetCharData+0x1f4>
 800ff8c:	a201      	add	r2, pc, #4	; (adr r2, 800ff94 <_UG_GetCharData+0x8c>)
 800ff8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff92:	bf00      	nop
 800ff94:	08010037 	.word	0x08010037
 800ff98:	080100fd 	.word	0x080100fd
 800ff9c:	080100fd 	.word	0x080100fd
 800ffa0:	080100fd 	.word	0x080100fd
 800ffa4:	080100fd 	.word	0x080100fd
 800ffa8:	080100fd 	.word	0x080100fd
 800ffac:	08010043 	.word	0x08010043
 800ffb0:	080100fd 	.word	0x080100fd
 800ffb4:	080100fd 	.word	0x080100fd
 800ffb8:	080100fd 	.word	0x080100fd
 800ffbc:	080100fd 	.word	0x080100fd
 800ffc0:	080100fd 	.word	0x080100fd
 800ffc4:	080100fd 	.word	0x080100fd
 800ffc8:	080100fd 	.word	0x080100fd
 800ffcc:	08010049 	.word	0x08010049
 800ffd0:	080100fd 	.word	0x080100fd
 800ffd4:	080100fd 	.word	0x080100fd
 800ffd8:	080100fd 	.word	0x080100fd
 800ffdc:	080100fd 	.word	0x080100fd
 800ffe0:	080100fd 	.word	0x080100fd
 800ffe4:	080100fd 	.word	0x080100fd
 800ffe8:	080100fd 	.word	0x080100fd
 800ffec:	080100fd 	.word	0x080100fd
 800fff0:	080100fd 	.word	0x080100fd
 800fff4:	080100fd 	.word	0x080100fd
 800fff8:	080100fd 	.word	0x080100fd
 800fffc:	080100fd 	.word	0x080100fd
 8010000:	080100fd 	.word	0x080100fd
 8010004:	080100fd 	.word	0x080100fd
 8010008:	080100fd 	.word	0x080100fd
 801000c:	080100fd 	.word	0x080100fd
 8010010:	080100fd 	.word	0x080100fd
 8010014:	08010031 	.word	0x08010031
 8010018:	080100fd 	.word	0x080100fd
 801001c:	080100fd 	.word	0x080100fd
 8010020:	080100fd 	.word	0x080100fd
 8010024:	080100fd 	.word	0x080100fd
 8010028:	080100fd 	.word	0x080100fd
 801002c:	0801003d 	.word	0x0801003d
    {
       case 0xF6: encoding = 0x94; break; // ö
 8010030:	2394      	movs	r3, #148	; 0x94
 8010032:	80fb      	strh	r3, [r7, #6]
 8010034:	e015      	b.n	8010062 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8010036:	2399      	movs	r3, #153	; 0x99
 8010038:	80fb      	strh	r3, [r7, #6]
 801003a:	e012      	b.n	8010062 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 801003c:	2381      	movs	r3, #129	; 0x81
 801003e:	80fb      	strh	r3, [r7, #6]
 8010040:	e00f      	b.n	8010062 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8010042:	239a      	movs	r3, #154	; 0x9a
 8010044:	80fb      	strh	r3, [r7, #6]
 8010046:	e00c      	b.n	8010062 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8010048:	2384      	movs	r3, #132	; 0x84
 801004a:	80fb      	strh	r3, [r7, #6]
 801004c:	e009      	b.n	8010062 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 801004e:	238e      	movs	r3, #142	; 0x8e
 8010050:	80fb      	strh	r3, [r7, #6]
 8010052:	e006      	b.n	8010062 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8010054:	23e6      	movs	r3, #230	; 0xe6
 8010056:	80fb      	strh	r3, [r7, #6]
 8010058:	e003      	b.n	8010062 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 801005a:	23f8      	movs	r3, #248	; 0xf8
 801005c:	80fb      	strh	r3, [r7, #6]
 801005e:	bf00      	nop
 8010060:	e04c      	b.n	80100fc <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8010062:	e04b      	b.n	80100fc <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8010064:	4b49      	ldr	r3, [pc, #292]	; (801018c <_UG_GetCharData+0x284>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801006a:	8a7a      	ldrh	r2, [r7, #18]
 801006c:	0052      	lsls	r2, r2, #1
 801006e:	4413      	add	r3, r2
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff fa87 	bl	800f584 <ptr_8to16>
 8010076:	4603      	mov	r3, r0
 8010078:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 801007a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801007e:	2b00      	cmp	r3, #0
 8010080:	da06      	bge.n	8010090 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8010082:	89fb      	ldrh	r3, [r7, #14]
 8010084:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010088:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 801008a:	2301      	movs	r3, #1
 801008c:	747b      	strb	r3, [r7, #17]
 801008e:	e032      	b.n	80100f6 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8010090:	7c7b      	ldrb	r3, [r7, #17]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d021      	beq.n	80100da <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8010096:	88fa      	ldrh	r2, [r7, #6]
 8010098:	8afb      	ldrh	r3, [r7, #22]
 801009a:	429a      	cmp	r2, r3
 801009c:	d30d      	bcc.n	80100ba <_UG_GetCharData+0x1b2>
 801009e:	88fa      	ldrh	r2, [r7, #6]
 80100a0:	89fb      	ldrh	r3, [r7, #14]
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d809      	bhi.n	80100ba <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 80100a6:	88fa      	ldrh	r2, [r7, #6]
 80100a8:	8afb      	ldrh	r3, [r7, #22]
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	b29a      	uxth	r2, r3
 80100ae:	8abb      	ldrh	r3, [r7, #20]
 80100b0:	4413      	add	r3, r2
 80100b2:	82bb      	strh	r3, [r7, #20]
        found=1;
 80100b4:	2301      	movs	r3, #1
 80100b6:	743b      	strb	r3, [r7, #16]
        break;
 80100b8:	e02a      	b.n	8010110 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 80100ba:	88fa      	ldrh	r2, [r7, #6]
 80100bc:	8afb      	ldrh	r3, [r7, #22]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d323      	bcc.n	801010a <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 80100c2:	89fa      	ldrh	r2, [r7, #14]
 80100c4:	8afb      	ldrh	r3, [r7, #22]
 80100c6:	1ad3      	subs	r3, r2, r3
 80100c8:	b29a      	uxth	r2, r3
 80100ca:	8abb      	ldrh	r3, [r7, #20]
 80100cc:	4413      	add	r3, r2
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	3301      	adds	r3, #1
 80100d2:	82bb      	strh	r3, [r7, #20]
      range=0;
 80100d4:	2300      	movs	r3, #0
 80100d6:	747b      	strb	r3, [r7, #17]
 80100d8:	e00d      	b.n	80100f6 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 80100da:	88fa      	ldrh	r2, [r7, #6]
 80100dc:	89fb      	ldrh	r3, [r7, #14]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d102      	bne.n	80100e8 <_UG_GetCharData+0x1e0>
      {
        found=1;
 80100e2:	2301      	movs	r3, #1
 80100e4:	743b      	strb	r3, [r7, #16]
        break;
 80100e6:	e013      	b.n	8010110 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 80100e8:	88fa      	ldrh	r2, [r7, #6]
 80100ea:	89fb      	ldrh	r3, [r7, #14]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d30e      	bcc.n	801010e <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80100f0:	8abb      	ldrh	r3, [r7, #20]
 80100f2:	3301      	adds	r3, #1
 80100f4:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80100f6:	8a7b      	ldrh	r3, [r7, #18]
 80100f8:	3301      	adds	r3, #1
 80100fa:	827b      	strh	r3, [r7, #18]
 80100fc:	4b23      	ldr	r3, [pc, #140]	; (801018c <_UG_GetCharData+0x284>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8010102:	8a7a      	ldrh	r2, [r7, #18]
 8010104:	429a      	cmp	r2, r3
 8010106:	d3ad      	bcc.n	8010064 <_UG_GetCharData+0x15c>
 8010108:	e002      	b.n	8010110 <_UG_GetCharData+0x208>
        break;
 801010a:	bf00      	nop
 801010c:	e000      	b.n	8010110 <_UG_GetCharData+0x208>
        break;
 801010e:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8010110:	7c3b      	ldrb	r3, [r7, #16]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d034      	beq.n	8010180 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8010116:	4b1d      	ldr	r3, [pc, #116]	; (801018c <_UG_GetCharData+0x284>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801011c:	4a1c      	ldr	r2, [pc, #112]	; (8010190 <_UG_GetCharData+0x288>)
 801011e:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8010120:	4a1c      	ldr	r2, [pc, #112]	; (8010194 <_UG_GetCharData+0x28c>)
 8010122:	88fb      	ldrh	r3, [r7, #6]
 8010124:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8010126:	4b19      	ldr	r3, [pc, #100]	; (801018c <_UG_GetCharData+0x284>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801012c:	8aba      	ldrh	r2, [r7, #20]
 801012e:	4917      	ldr	r1, [pc, #92]	; (801018c <_UG_GetCharData+0x284>)
 8010130:	6809      	ldr	r1, [r1, #0]
 8010132:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8010134:	fb01 f202 	mul.w	r2, r1, r2
 8010138:	4413      	add	r3, r2
 801013a:	4a17      	ldr	r2, [pc, #92]	; (8010198 <_UG_GetCharData+0x290>)
 801013c:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 801013e:	4b13      	ldr	r3, [pc, #76]	; (801018c <_UG_GetCharData+0x284>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010144:	2b00      	cmp	r3, #0
 8010146:	d009      	beq.n	801015c <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8010148:	4b10      	ldr	r3, [pc, #64]	; (801018c <_UG_GetCharData+0x284>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801014e:	8abb      	ldrh	r3, [r7, #20]
 8010150:	4413      	add	r3, r2
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	b21a      	sxth	r2, r3
 8010156:	4b11      	ldr	r3, [pc, #68]	; (801019c <_UG_GetCharData+0x294>)
 8010158:	801a      	strh	r2, [r3, #0]
 801015a:	e006      	b.n	801016a <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 801015c:	4b0b      	ldr	r3, [pc, #44]	; (801018c <_UG_GetCharData+0x284>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010164:	b21a      	sxth	r2, r3
 8010166:	4b0d      	ldr	r3, [pc, #52]	; (801019c <_UG_GetCharData+0x294>)
 8010168:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d003      	beq.n	8010178 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8010170:	4b09      	ldr	r3, [pc, #36]	; (8010198 <_UG_GetCharData+0x290>)
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8010178:	4b08      	ldr	r3, [pc, #32]	; (801019c <_UG_GetCharData+0x294>)
 801017a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801017e:	e001      	b.n	8010184 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8010180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010184:	4618      	mov	r0, r3
 8010186:	3718      	adds	r7, #24
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	20001a18 	.word	0x20001a18
 8010190:	20001a1c 	.word	0x20001a1c
 8010194:	20001a20 	.word	0x20001a20
 8010198:	20001a24 	.word	0x20001a24
 801019c:	20001a28 	.word	0x20001a28

080101a0 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 80101a0:	b590      	push	{r4, r7, lr}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80101a8:	4b3d      	ldr	r3, [pc, #244]	; (80102a0 <_UG_FontSelect+0x100>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d070      	beq.n	8010296 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 80101b4:	4b3a      	ldr	r3, [pc, #232]	; (80102a0 <_UG_FontSelect+0x100>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	781a      	ldrb	r2, [r3, #0]
 80101c0:	4b37      	ldr	r3, [pc, #220]	; (80102a0 <_UG_FontSelect+0x100>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80101c8:	b2d2      	uxtb	r2, r2
 80101ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	1c5a      	adds	r2, r3, #1
 80101d2:	607a      	str	r2, [r7, #4]
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	b25b      	sxtb	r3, r3
 80101d8:	2b00      	cmp	r3, #0
 80101da:	da01      	bge.n	80101e0 <_UG_FontSelect+0x40>
 80101dc:	2201      	movs	r2, #1
 80101de:	e000      	b.n	80101e2 <_UG_FontSelect+0x42>
 80101e0:	2200      	movs	r2, #0
 80101e2:	4b2f      	ldr	r3, [pc, #188]	; (80102a0 <_UG_FontSelect+0x100>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	b2d2      	uxtb	r2, r2
 80101e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	1c5a      	adds	r2, r3, #1
 80101f0:	607a      	str	r2, [r7, #4]
 80101f2:	4a2b      	ldr	r2, [pc, #172]	; (80102a0 <_UG_FontSelect+0x100>)
 80101f4:	6812      	ldr	r2, [r2, #0]
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	1c5a      	adds	r2, r3, #1
 8010200:	607a      	str	r2, [r7, #4]
 8010202:	4a27      	ldr	r2, [pc, #156]	; (80102a0 <_UG_FontSelect+0x100>)
 8010204:	6812      	ldr	r2, [r2, #0]
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 801020c:	4b24      	ldr	r3, [pc, #144]	; (80102a0 <_UG_FontSelect+0x100>)
 801020e:	681c      	ldr	r4, [r3, #0]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7ff f9b7 	bl	800f584 <ptr_8to16>
 8010216:	4603      	mov	r3, r0
 8010218:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	3302      	adds	r3, #2
 801021e:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8010220:	4b1f      	ldr	r3, [pc, #124]	; (80102a0 <_UG_FontSelect+0x100>)
 8010222:	681c      	ldr	r4, [r3, #0]
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f7ff f9ad 	bl	800f584 <ptr_8to16>
 801022a:	4603      	mov	r3, r0
 801022c:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	3302      	adds	r3, #2
 8010232:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8010234:	4b1a      	ldr	r3, [pc, #104]	; (80102a0 <_UG_FontSelect+0x100>)
 8010236:	681c      	ldr	r4, [r3, #0]
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7ff f9a3 	bl	800f584 <ptr_8to16>
 801023e:	4603      	mov	r3, r0
 8010240:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	3302      	adds	r3, #2
 8010246:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	1c5a      	adds	r2, r3, #1
 801024c:	607a      	str	r2, [r7, #4]
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00b      	beq.n	801026c <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8010254:	4b12      	ldr	r3, [pc, #72]	; (80102a0 <_UG_FontSelect+0x100>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 801025c:	4b10      	ldr	r3, [pc, #64]	; (80102a0 <_UG_FontSelect+0x100>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010262:	461a      	mov	r2, r3
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	4413      	add	r3, r2
 8010268:	607b      	str	r3, [r7, #4]
 801026a:	e003      	b.n	8010274 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 801026c:	4b0c      	ldr	r3, [pc, #48]	; (80102a0 <_UG_FontSelect+0x100>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	2200      	movs	r2, #0
 8010272:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8010274:	4b0a      	ldr	r3, [pc, #40]	; (80102a0 <_UG_FontSelect+0x100>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 801027c:	4b08      	ldr	r3, [pc, #32]	; (80102a0 <_UG_FontSelect+0x100>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8010282:	005b      	lsls	r3, r3, #1
 8010284:	461a      	mov	r2, r3
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4413      	add	r3, r2
 801028a:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 801028c:	4b04      	ldr	r3, [pc, #16]	; (80102a0 <_UG_FontSelect+0x100>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	641a      	str	r2, [r3, #64]	; 0x40
 8010294:	e000      	b.n	8010298 <_UG_FontSelect+0xf8>
    return;
 8010296:	bf00      	nop
}
 8010298:	370c      	adds	r7, #12
 801029a:	46bd      	mov	sp, r7
 801029c:	bd90      	pop	{r4, r7, pc}
 801029e:	bf00      	nop
 80102a0:	20001a18 	.word	0x20001a18

080102a4 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 80102a4:	b5b0      	push	{r4, r5, r7, lr}
 80102a6:	b08c      	sub	sp, #48	; 0x30
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	4604      	mov	r4, r0
 80102ac:	4608      	mov	r0, r1
 80102ae:	4611      	mov	r1, r2
 80102b0:	461a      	mov	r2, r3
 80102b2:	4623      	mov	r3, r4
 80102b4:	80fb      	strh	r3, [r7, #6]
 80102b6:	4603      	mov	r3, r0
 80102b8:	80bb      	strh	r3, [r7, #4]
 80102ba:	460b      	mov	r3, r1
 80102bc:	807b      	strh	r3, [r7, #2]
 80102be:	4613      	mov	r3, r2
 80102c0:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80102c2:	2300      	movs	r3, #0
 80102c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80102c6:	2300      	movs	r3, #0
 80102c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80102ca:	2300      	movs	r3, #0
 80102cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80102ce:	2300      	movs	r3, #0
 80102d0:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 80102d2:	4b8c      	ldr	r3, [pc, #560]	; (8010504 <_UG_PutChar+0x260>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80102da:	75fb      	strb	r3, [r7, #23]
 80102dc:	4b89      	ldr	r3, [pc, #548]	; (8010504 <_UG_PutChar+0x260>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80102e4:	f003 0302 	and.w	r3, r3, #2
 80102e8:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 80102ea:	2300      	movs	r3, #0
 80102ec:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 80102ee:	f107 0208 	add.w	r2, r7, #8
 80102f2:	88fb      	ldrh	r3, [r7, #6]
 80102f4:	4611      	mov	r1, r2
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7ff fe06 	bl	800ff08 <_UG_GetCharData>
 80102fc:	4603      	mov	r3, r0
 80102fe:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8010300:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010308:	d102      	bne.n	8010310 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 801030a:	f04f 33ff 	mov.w	r3, #4294967295
 801030e:	e226      	b.n	801075e <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8010310:	4b7c      	ldr	r3, [pc, #496]	; (8010504 <_UG_PutChar+0x260>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010318:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 801031a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801031c:	2b00      	cmp	r3, #0
 801031e:	d101      	bne.n	8010324 <_UG_PutChar+0x80>
     return 0;
 8010320:	2300      	movs	r3, #0
 8010322:	e21c      	b.n	801075e <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8010324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010326:	08db      	lsrs	r3, r3, #3
 8010328:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 801032a:	4b76      	ldr	r3, [pc, #472]	; (8010504 <_UG_PutChar+0x260>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010332:	f003 0307 	and.w	r3, r3, #7
 8010336:	b2db      	uxtb	r3, r3
 8010338:	2b00      	cmp	r3, #0
 801033a:	d002      	beq.n	8010342 <_UG_PutChar+0x9e>
 801033c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801033e:	3301      	adds	r3, #1
 8010340:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8010342:	7dbb      	ldrb	r3, [r7, #22]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d01d      	beq.n	8010384 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8010348:	4b6e      	ldr	r3, [pc, #440]	; (8010504 <_UG_PutChar+0x260>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801034e:	461d      	mov	r5, r3
 8010350:	88ba      	ldrh	r2, [r7, #4]
 8010352:	8abb      	ldrh	r3, [r7, #20]
 8010354:	4413      	add	r3, r2
 8010356:	b29b      	uxth	r3, r3
 8010358:	3b01      	subs	r3, #1
 801035a:	b29b      	uxth	r3, r3
 801035c:	b21c      	sxth	r4, r3
 801035e:	4b69      	ldr	r3, [pc, #420]	; (8010504 <_UG_PutChar+0x260>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010366:	b29a      	uxth	r2, r3
 8010368:	887b      	ldrh	r3, [r7, #2]
 801036a:	4413      	add	r3, r2
 801036c:	b29b      	uxth	r3, r3
 801036e:	3b01      	subs	r3, #1
 8010370:	b29b      	uxth	r3, r3
 8010372:	b21b      	sxth	r3, r3
 8010374:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010378:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 801037c:	4622      	mov	r2, r4
 801037e:	47a8      	blx	r5
 8010380:	4603      	mov	r3, r0
 8010382:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8010384:	4b5f      	ldr	r3, [pc, #380]	; (8010504 <_UG_PutChar+0x260>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801038c:	2b00      	cmp	r3, #0
 801038e:	f040 8172 	bne.w	8010676 <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010392:	2300      	movs	r3, #0
 8010394:	853b      	strh	r3, [r7, #40]	; 0x28
 8010396:	e0ec      	b.n	8010572 <_UG_PutChar+0x2ce>
     {
       c=0;
 8010398:	2300      	movs	r3, #0
 801039a:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 801039c:	2300      	movs	r3, #0
 801039e:	857b      	strh	r3, [r7, #42]	; 0x2a
 80103a0:	e0df      	b.n	8010562 <_UG_PutChar+0x2be>
       {
         b = *data++;
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	1c5a      	adds	r2, r3, #1
 80103a6:	60ba      	str	r2, [r7, #8]
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80103ac:	2300      	movs	r3, #0
 80103ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80103b0:	e0ca      	b.n	8010548 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 80103b2:	7f7b      	ldrb	r3, [r7, #29]
 80103b4:	f003 0301 	and.w	r3, r3, #1
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d033      	beq.n	8010424 <_UG_PutChar+0x180>
           {
             if(driver)
 80103bc:	7dbb      	ldrb	r3, [r7, #22]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d01f      	beq.n	8010402 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 80103c2:	8c3b      	ldrh	r3, [r7, #32]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d00a      	beq.n	80103de <_UG_PutChar+0x13a>
 80103c8:	7dfb      	ldrb	r3, [r7, #23]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d107      	bne.n	80103de <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80103ce:	8c3a      	ldrh	r2, [r7, #32]
 80103d0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80103d4:	69bb      	ldr	r3, [r7, #24]
 80103d6:	4610      	mov	r0, r2
 80103d8:	4798      	blx	r3
                 bpixels=0;
 80103da:	2300      	movs	r3, #0
 80103dc:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 80103de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d10a      	bne.n	80103fa <_UG_PutChar+0x156>
 80103e4:	7dfb      	ldrb	r3, [r7, #23]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d007      	beq.n	80103fa <_UG_PutChar+0x156>
               {
                 x0=x+c;
 80103ea:	88ba      	ldrh	r2, [r7, #4]
 80103ec:	8bfb      	ldrh	r3, [r7, #30]
 80103ee:	4413      	add	r3, r2
 80103f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 80103f2:	887a      	ldrh	r2, [r7, #2]
 80103f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80103f6:	4413      	add	r3, r2
 80103f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 80103fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103fc:	3301      	adds	r3, #1
 80103fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8010400:	e096      	b.n	8010530 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8010402:	4b40      	ldr	r3, [pc, #256]	; (8010504 <_UG_PutChar+0x260>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	88b9      	ldrh	r1, [r7, #4]
 801040c:	8bfa      	ldrh	r2, [r7, #30]
 801040e:	440a      	add	r2, r1
 8010410:	b292      	uxth	r2, r2
 8010412:	b210      	sxth	r0, r2
 8010414:	8879      	ldrh	r1, [r7, #2]
 8010416:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010418:	440a      	add	r2, r1
 801041a:	b292      	uxth	r2, r2
 801041c:	b211      	sxth	r1, r2
 801041e:	883a      	ldrh	r2, [r7, #0]
 8010420:	4798      	blx	r3
 8010422:	e085      	b.n	8010530 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8010424:	7dbb      	ldrb	r3, [r7, #22]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d06e      	beq.n	8010508 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 801042a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801042c:	2b00      	cmp	r3, #0
 801042e:	d064      	beq.n	80104fa <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8010430:	7dfb      	ldrb	r3, [r7, #23]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d15e      	bne.n	80104f4 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8010436:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010438:	8839      	ldrh	r1, [r7, #0]
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	4610      	mov	r0, r2
 801043e:	4798      	blx	r3
                   fpixels=0;
 8010440:	2300      	movs	r3, #0
 8010442:	847b      	strh	r3, [r7, #34]	; 0x22
 8010444:	e059      	b.n	80104fa <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8010446:	88ba      	ldrh	r2, [r7, #4]
 8010448:	8abb      	ldrh	r3, [r7, #20]
 801044a:	4413      	add	r3, r2
 801044c:	b29a      	uxth	r2, r3
 801044e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010450:	1ad3      	subs	r3, r2, r3
 8010452:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8010454:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010456:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801045a:	429a      	cmp	r2, r3
 801045c:	d003      	beq.n	8010466 <_UG_PutChar+0x1c2>
 801045e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010460:	89fb      	ldrh	r3, [r7, #14]
 8010462:	429a      	cmp	r2, r3
 8010464:	d224      	bcs.n	80104b0 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8010466:	4b27      	ldr	r3, [pc, #156]	; (8010504 <_UG_PutChar+0x260>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801046c:	461d      	mov	r5, r3
 801046e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8010472:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010476:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010478:	89fb      	ldrh	r3, [r7, #14]
 801047a:	4413      	add	r3, r2
 801047c:	b29b      	uxth	r3, r3
 801047e:	3b01      	subs	r3, #1
 8010480:	b29b      	uxth	r3, r3
 8010482:	b21c      	sxth	r4, r3
 8010484:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010486:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801048a:	fb92 f3f3 	sdiv	r3, r2, r3
 801048e:	b29a      	uxth	r2, r3
 8010490:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010492:	4413      	add	r3, r2
 8010494:	b29b      	uxth	r3, r3
 8010496:	b21b      	sxth	r3, r3
 8010498:	4622      	mov	r2, r4
 801049a:	47a8      	blx	r5
 801049c:	4603      	mov	r3, r0
 801049e:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80104a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80104a2:	8839      	ldrh	r1, [r7, #0]
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	4610      	mov	r0, r2
 80104a8:	4798      	blx	r3
                       fpixels=0;
 80104aa:	2300      	movs	r3, #0
 80104ac:	847b      	strh	r3, [r7, #34]	; 0x22
 80104ae:	e021      	b.n	80104f4 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80104b0:	4b14      	ldr	r3, [pc, #80]	; (8010504 <_UG_PutChar+0x260>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104b6:	461c      	mov	r4, r3
 80104b8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80104bc:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80104c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80104c2:	89fb      	ldrh	r3, [r7, #14]
 80104c4:	4413      	add	r3, r2
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	3b01      	subs	r3, #1
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	b21a      	sxth	r2, r3
 80104ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80104d2:	47a0      	blx	r4
 80104d4:	4603      	mov	r3, r0
 80104d6:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80104d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80104da:	8839      	ldrh	r1, [r7, #0]
 80104dc:	69bb      	ldr	r3, [r7, #24]
 80104de:	4610      	mov	r0, r2
 80104e0:	4798      	blx	r3
                       fpixels -= width;
 80104e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80104e4:	89fb      	ldrh	r3, [r7, #14]
 80104e6:	1ad3      	subs	r3, r2, r3
 80104e8:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 80104ea:	88bb      	ldrh	r3, [r7, #4]
 80104ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 80104ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80104f0:	3301      	adds	r3, #1
 80104f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 80104f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1a5      	bne.n	8010446 <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 80104fa:	8c3b      	ldrh	r3, [r7, #32]
 80104fc:	3301      	adds	r3, #1
 80104fe:	843b      	strh	r3, [r7, #32]
 8010500:	e016      	b.n	8010530 <_UG_PutChar+0x28c>
 8010502:	bf00      	nop
 8010504:	20001a18 	.word	0x20001a18
             }
             else if(!trans)                           // Not accelerated output
 8010508:	7dfb      	ldrb	r3, [r7, #23]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d110      	bne.n	8010530 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 801050e:	4b96      	ldr	r3, [pc, #600]	; (8010768 <_UG_PutChar+0x4c4>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	88b9      	ldrh	r1, [r7, #4]
 8010518:	8bfa      	ldrh	r2, [r7, #30]
 801051a:	440a      	add	r2, r1
 801051c:	b292      	uxth	r2, r2
 801051e:	b210      	sxth	r0, r2
 8010520:	8879      	ldrh	r1, [r7, #2]
 8010522:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010524:	440a      	add	r2, r1
 8010526:	b292      	uxth	r2, r2
 8010528:	b211      	sxth	r1, r2
 801052a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801052e:	4798      	blx	r3
             }
           }
           b >>= 1;
 8010530:	7f7b      	ldrb	r3, [r7, #29]
 8010532:	085b      	lsrs	r3, r3, #1
 8010534:	777b      	strb	r3, [r7, #29]
           c++;
 8010536:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801053a:	b29b      	uxth	r3, r3
 801053c:	3301      	adds	r3, #1
 801053e:	b29b      	uxth	r3, r3
 8010540:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8010542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010544:	3301      	adds	r3, #1
 8010546:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801054a:	2b07      	cmp	r3, #7
 801054c:	d806      	bhi.n	801055c <_UG_PutChar+0x2b8>
 801054e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8010552:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010556:	429a      	cmp	r2, r3
 8010558:	f6ff af2b 	blt.w	80103b2 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 801055c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801055e:	3301      	adds	r3, #1
 8010560:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010562:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010566:	429a      	cmp	r2, r3
 8010568:	f4ff af1b 	bcc.w	80103a2 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 801056c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801056e:	3301      	adds	r3, #1
 8010570:	853b      	strh	r3, [r7, #40]	; 0x28
 8010572:	4b7d      	ldr	r3, [pc, #500]	; (8010768 <_UG_PutChar+0x4c4>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801057a:	b29b      	uxth	r3, r3
 801057c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801057e:	429a      	cmp	r2, r3
 8010580:	f4ff af0a 	bcc.w	8010398 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8010584:	7dbb      	ldrb	r3, [r7, #22]
 8010586:	2b00      	cmp	r3, #0
 8010588:	f000 80e7 	beq.w	801075a <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 801058c:	8c3b      	ldrh	r3, [r7, #32]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d009      	beq.n	80105a6 <_UG_PutChar+0x302>
 8010592:	7dfb      	ldrb	r3, [r7, #23]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d106      	bne.n	80105a6 <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8010598:	8c3a      	ldrh	r2, [r7, #32]
 801059a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 801059e:	69bb      	ldr	r3, [r7, #24]
 80105a0:	4610      	mov	r0, r2
 80105a2:	4798      	blx	r3
 80105a4:	e0d9      	b.n	801075a <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 80105a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f000 80d6 	beq.w	801075a <_UG_PutChar+0x4b6>
       {
         if(!trans)
 80105ae:	7dfb      	ldrb	r3, [r7, #23]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d15c      	bne.n	801066e <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 80105b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80105b6:	8839      	ldrh	r1, [r7, #0]
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	4610      	mov	r0, r2
 80105bc:	4798      	blx	r3
 80105be:	e0cc      	b.n	801075a <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 80105c0:	88ba      	ldrh	r2, [r7, #4]
 80105c2:	8abb      	ldrh	r3, [r7, #20]
 80105c4:	4413      	add	r3, r2
 80105c6:	b29a      	uxth	r2, r3
 80105c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 80105ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80105d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d003      	beq.n	80105e0 <_UG_PutChar+0x33c>
 80105d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80105da:	8a3b      	ldrh	r3, [r7, #16]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d224      	bcs.n	801062a <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80105e0:	4b61      	ldr	r3, [pc, #388]	; (8010768 <_UG_PutChar+0x4c4>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80105e6:	461d      	mov	r5, r3
 80105e8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80105ec:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80105f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80105f2:	8a3b      	ldrh	r3, [r7, #16]
 80105f4:	4413      	add	r3, r2
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	3b01      	subs	r3, #1
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	b21c      	sxth	r4, r3
 80105fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010600:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010604:	fb92 f3f3 	sdiv	r3, r2, r3
 8010608:	b29a      	uxth	r2, r3
 801060a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801060c:	4413      	add	r3, r2
 801060e:	b29b      	uxth	r3, r3
 8010610:	b21b      	sxth	r3, r3
 8010612:	4622      	mov	r2, r4
 8010614:	47a8      	blx	r5
 8010616:	4603      	mov	r3, r0
 8010618:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 801061a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801061c:	8839      	ldrh	r1, [r7, #0]
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	4610      	mov	r0, r2
 8010622:	4798      	blx	r3
               fpixels=0;
 8010624:	2300      	movs	r3, #0
 8010626:	847b      	strh	r3, [r7, #34]	; 0x22
 8010628:	e021      	b.n	801066e <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 801062a:	4b4f      	ldr	r3, [pc, #316]	; (8010768 <_UG_PutChar+0x4c4>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010630:	461c      	mov	r4, r3
 8010632:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8010636:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801063a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801063c:	8a3b      	ldrh	r3, [r7, #16]
 801063e:	4413      	add	r3, r2
 8010640:	b29b      	uxth	r3, r3
 8010642:	3b01      	subs	r3, #1
 8010644:	b29b      	uxth	r3, r3
 8010646:	b21a      	sxth	r2, r3
 8010648:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801064c:	47a0      	blx	r4
 801064e:	4603      	mov	r3, r0
 8010650:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8010652:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010654:	8839      	ldrh	r1, [r7, #0]
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	4610      	mov	r0, r2
 801065a:	4798      	blx	r3
               fpixels -= width;
 801065c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801065e:	8a3b      	ldrh	r3, [r7, #16]
 8010660:	1ad3      	subs	r3, r2, r3
 8010662:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8010664:	88bb      	ldrh	r3, [r7, #4]
 8010666:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8010668:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801066a:	3301      	adds	r3, #1
 801066c:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 801066e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010670:	2b00      	cmp	r3, #0
 8010672:	d1a5      	bne.n	80105c0 <_UG_PutChar+0x31c>
 8010674:	e071      	b.n	801075a <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8010676:	4b3c      	ldr	r3, [pc, #240]	; (8010768 <_UG_PutChar+0x4c4>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801067e:	2b01      	cmp	r3, #1
 8010680:	d16b      	bne.n	801075a <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010682:	2300      	movs	r3, #0
 8010684:	853b      	strh	r3, [r7, #40]	; 0x28
 8010686:	e060      	b.n	801074a <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8010688:	2300      	movs	r3, #0
 801068a:	857b      	strh	r3, [r7, #42]	; 0x2a
 801068c:	e04a      	b.n	8010724 <_UG_PutChar+0x480>
       {
         b = *data++;
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	1c5a      	adds	r2, r3, #1
 8010692:	60ba      	str	r2, [r7, #8]
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8010698:	883b      	ldrh	r3, [r7, #0]
 801069a:	b2db      	uxtb	r3, r3
 801069c:	7f7a      	ldrb	r2, [r7, #29]
 801069e:	fb03 f202 	mul.w	r2, r3, r2
 80106a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	7f79      	ldrb	r1, [r7, #29]
 80106aa:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80106ae:	fb01 f303 	mul.w	r3, r1, r3
 80106b2:	4413      	add	r3, r2
 80106b4:	121b      	asrs	r3, r3, #8
 80106b6:	b21b      	sxth	r3, r3
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80106bc:	883b      	ldrh	r3, [r7, #0]
 80106be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80106c2:	7f79      	ldrb	r1, [r7, #29]
 80106c4:	fb03 f101 	mul.w	r1, r3, r1
 80106c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80106cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80106d0:	7f78      	ldrb	r0, [r7, #29]
 80106d2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80106d6:	fb00 f303 	mul.w	r3, r0, r3
 80106da:	440b      	add	r3, r1
 80106dc:	121b      	asrs	r3, r3, #8
 80106de:	b21b      	sxth	r3, r3
 80106e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80106e4:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80106e6:	4313      	orrs	r3, r2
 80106e8:	b21b      	sxth	r3, r3
 80106ea:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 80106ec:	7dbb      	ldrb	r3, [r7, #22]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d005      	beq.n	80106fe <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80106f2:	8a7a      	ldrh	r2, [r7, #18]
 80106f4:	69bb      	ldr	r3, [r7, #24]
 80106f6:	4611      	mov	r1, r2
 80106f8:	2001      	movs	r0, #1
 80106fa:	4798      	blx	r3
 80106fc:	e00f      	b.n	801071e <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 80106fe:	4b1a      	ldr	r3, [pc, #104]	; (8010768 <_UG_PutChar+0x4c4>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	88b9      	ldrh	r1, [r7, #4]
 8010708:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801070a:	440a      	add	r2, r1
 801070c:	b292      	uxth	r2, r2
 801070e:	b210      	sxth	r0, r2
 8010710:	8879      	ldrh	r1, [r7, #2]
 8010712:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010714:	440a      	add	r2, r1
 8010716:	b292      	uxth	r2, r2
 8010718:	b211      	sxth	r1, r2
 801071a:	8a7a      	ldrh	r2, [r7, #18]
 801071c:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 801071e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010720:	3301      	adds	r3, #1
 8010722:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010724:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010726:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801072a:	429a      	cmp	r2, r3
 801072c:	dbaf      	blt.n	801068e <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	4a0d      	ldr	r2, [pc, #52]	; (8010768 <_UG_PutChar+0x4c4>)
 8010732:	6812      	ldr	r2, [r2, #0]
 8010734:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8010738:	4611      	mov	r1, r2
 801073a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801073e:	1a8a      	subs	r2, r1, r2
 8010740:	4413      	add	r3, r2
 8010742:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010744:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010746:	3301      	adds	r3, #1
 8010748:	853b      	strh	r3, [r7, #40]	; 0x28
 801074a:	4b07      	ldr	r3, [pc, #28]	; (8010768 <_UG_PutChar+0x4c4>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010752:	b29b      	uxth	r3, r3
 8010754:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010756:	429a      	cmp	r2, r3
 8010758:	d396      	bcc.n	8010688 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 801075a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801075e:	4618      	mov	r0, r3
 8010760:	3730      	adds	r7, #48	; 0x30
 8010762:	46bd      	mov	sp, r7
 8010764:	bdb0      	pop	{r4, r5, r7, pc}
 8010766:	bf00      	nop
 8010768:	20001a18 	.word	0x20001a18

0801076c <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 801076c:	b480      	push	{r7}
 801076e:	b089      	sub	sp, #36	; 0x24
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8010774:	4b57      	ldr	r3, [pc, #348]	; (80108d4 <_UG_ProcessTouchData+0x168>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	88db      	ldrh	r3, [r3, #6]
 801077a:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 801077c:	4b55      	ldr	r3, [pc, #340]	; (80108d4 <_UG_ProcessTouchData+0x168>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	891b      	ldrh	r3, [r3, #8]
 8010782:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8010784:	4b53      	ldr	r3, [pc, #332]	; (80108d4 <_UG_ProcessTouchData+0x168>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	791b      	ldrb	r3, [r3, #4]
 801078a:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010792:	2300      	movs	r3, #0
 8010794:	83fb      	strh	r3, [r7, #30]
 8010796:	e090      	b.n	80108ba <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	685a      	ldr	r2, [r3, #4]
 801079c:	8bfb      	ldrh	r3, [r7, #30]
 801079e:	015b      	lsls	r3, r3, #5
 80107a0:	4413      	add	r3, r2
 80107a2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	785b      	ldrb	r3, [r3, #1]
 80107ae:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80107b0:	7bfb      	ldrb	r3, [r7, #15]
 80107b2:	f003 0301 	and.w	r3, r3, #1
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d179      	bne.n	80108ae <_UG_ProcessTouchData+0x142>
 80107ba:	7bfb      	ldrb	r3, [r7, #15]
 80107bc:	f003 0302 	and.w	r3, r3, #2
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d074      	beq.n	80108ae <_UG_ProcessTouchData+0x142>
 80107c4:	7bfb      	ldrb	r3, [r7, #15]
 80107c6:	f003 0308 	and.w	r3, r3, #8
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d06f      	beq.n	80108ae <_UG_ProcessTouchData+0x142>
 80107ce:	7bfb      	ldrb	r3, [r7, #15]
 80107d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d16a      	bne.n	80108ae <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 80107d8:	7dfb      	ldrb	r3, [r7, #23]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d047      	beq.n	801086e <_UG_ProcessTouchData+0x102>
 80107de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80107e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107e6:	d042      	beq.n	801086e <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80107e8:	7f7b      	ldrb	r3, [r7, #29]
 80107ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d107      	bne.n	8010802 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 80107f2:	7f7b      	ldrb	r3, [r7, #29]
 80107f4:	f043 0305 	orr.w	r3, r3, #5
 80107f8:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80107fa:	7f7b      	ldrb	r3, [r7, #29]
 80107fc:	f023 0318 	bic.w	r3, r3, #24
 8010800:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010802:	7f7b      	ldrb	r3, [r7, #29]
 8010804:	f023 0320 	bic.w	r3, r3, #32
 8010808:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010810:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010814:	429a      	cmp	r2, r3
 8010816:	db25      	blt.n	8010864 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801081e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010822:	429a      	cmp	r2, r3
 8010824:	dc1e      	bgt.n	8010864 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801082c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010830:	429a      	cmp	r2, r3
 8010832:	db17      	blt.n	8010864 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801083a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801083e:	429a      	cmp	r2, r3
 8010840:	dc10      	bgt.n	8010864 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010842:	7f7b      	ldrb	r3, [r7, #29]
 8010844:	f043 0320 	orr.w	r3, r3, #32
 8010848:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 801084a:	7f7b      	ldrb	r3, [r7, #29]
 801084c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010850:	2b00      	cmp	r3, #0
 8010852:	d107      	bne.n	8010864 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8010854:	7f7b      	ldrb	r3, [r7, #29]
 8010856:	f023 0304 	bic.w	r3, r3, #4
 801085a:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 801085c:	7f7b      	ldrb	r3, [r7, #29]
 801085e:	f043 0302 	orr.w	r3, r3, #2
 8010862:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8010864:	7f7b      	ldrb	r3, [r7, #29]
 8010866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801086a:	777b      	strb	r3, [r7, #29]
 801086c:	e01f      	b.n	80108ae <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 801086e:	7f7b      	ldrb	r3, [r7, #29]
 8010870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010874:	2b00      	cmp	r3, #0
 8010876:	d01a      	beq.n	80108ae <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8010878:	7f7b      	ldrb	r3, [r7, #29]
 801087a:	f003 0320 	and.w	r3, r3, #32
 801087e:	2b00      	cmp	r3, #0
 8010880:	d004      	beq.n	801088c <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8010882:	7f7b      	ldrb	r3, [r7, #29]
 8010884:	f043 0308 	orr.w	r3, r3, #8
 8010888:	777b      	strb	r3, [r7, #29]
 801088a:	e003      	b.n	8010894 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 801088c:	7f7b      	ldrb	r3, [r7, #29]
 801088e:	f043 0310 	orr.w	r3, r3, #16
 8010892:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8010894:	7f7b      	ldrb	r3, [r7, #29]
 8010896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801089a:	2b00      	cmp	r3, #0
 801089c:	d003      	beq.n	80108a6 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 801089e:	7f7b      	ldrb	r3, [r7, #29]
 80108a0:	f043 0301 	orr.w	r3, r3, #1
 80108a4:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 80108a6:	7f7b      	ldrb	r3, [r7, #29]
 80108a8:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 80108ac:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	7f7a      	ldrb	r2, [r7, #29]
 80108b2:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 80108b4:	8bfb      	ldrh	r3, [r7, #30]
 80108b6:	3301      	adds	r3, #1
 80108b8:	83fb      	strh	r3, [r7, #30]
 80108ba:	8bfa      	ldrh	r2, [r7, #30]
 80108bc:	8abb      	ldrh	r3, [r7, #20]
 80108be:	429a      	cmp	r2, r3
 80108c0:	f4ff af6a 	bcc.w	8010798 <_UG_ProcessTouchData+0x2c>
   }
}
 80108c4:	bf00      	nop
 80108c6:	bf00      	nop
 80108c8:	3724      	adds	r7, #36	; 0x24
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr
 80108d2:	bf00      	nop
 80108d4:	20001a18 	.word	0x20001a18

080108d8 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b086      	sub	sp, #24
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80108e6:	2300      	movs	r3, #0
 80108e8:	82fb      	strh	r3, [r7, #22]
 80108ea:	e035      	b.n	8010958 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	685a      	ldr	r2, [r3, #4]
 80108f0:	8afb      	ldrh	r3, [r7, #22]
 80108f2:	015b      	lsls	r3, r3, #5
 80108f4:	4413      	add	r3, r2
 80108f6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	785b      	ldrb	r3, [r3, #1]
 8010902:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8010904:	7bfb      	ldrb	r3, [r7, #15]
 8010906:	f003 0301 	and.w	r3, r3, #1
 801090a:	2b00      	cmp	r3, #0
 801090c:	d121      	bne.n	8010952 <_UG_UpdateObjects+0x7a>
 801090e:	7bfb      	ldrb	r3, [r7, #15]
 8010910:	f003 0302 	and.w	r3, r3, #2
 8010914:	2b00      	cmp	r3, #0
 8010916:	d01c      	beq.n	8010952 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8010918:	7bfb      	ldrb	r3, [r7, #15]
 801091a:	f003 0320 	and.w	r3, r3, #32
 801091e:	2b00      	cmp	r3, #0
 8010920:	d004      	beq.n	801092c <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	6939      	ldr	r1, [r7, #16]
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 801092c:	7bfb      	ldrb	r3, [r7, #15]
 801092e:	f003 0308 	and.w	r3, r3, #8
 8010932:	2b00      	cmp	r3, #0
 8010934:	d00d      	beq.n	8010952 <_UG_UpdateObjects+0x7a>
 8010936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801093a:	2b00      	cmp	r3, #0
 801093c:	da09      	bge.n	8010952 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 801093e:	7bbb      	ldrb	r3, [r7, #14]
 8010940:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8010944:	2b00      	cmp	r3, #0
 8010946:	d004      	beq.n	8010952 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	6939      	ldr	r1, [r7, #16]
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8010952:	8afb      	ldrh	r3, [r7, #22]
 8010954:	3301      	adds	r3, #1
 8010956:	82fb      	strh	r3, [r7, #22]
 8010958:	8afa      	ldrh	r2, [r7, #22]
 801095a:	8abb      	ldrh	r3, [r7, #20]
 801095c:	429a      	cmp	r2, r3
 801095e:	d3c5      	bcc.n	80108ec <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8010960:	bf00      	nop
 8010962:	bf00      	nop
 8010964:	3718      	adds	r7, #24
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
	...

0801096c <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b086      	sub	sp, #24
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8010974:	4b22      	ldr	r3, [pc, #136]	; (8010a00 <_UG_HandleEvents+0x94>)
 8010976:	2200      	movs	r2, #0
 8010978:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 801097a:	4b21      	ldr	r3, [pc, #132]	; (8010a00 <_UG_HandleEvents+0x94>)
 801097c:	2202      	movs	r2, #2
 801097e:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010986:	2300      	movs	r3, #0
 8010988:	82fb      	strh	r3, [r7, #22]
 801098a:	e02f      	b.n	80109ec <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	685a      	ldr	r2, [r3, #4]
 8010990:	8afb      	ldrh	r3, [r7, #22]
 8010992:	015b      	lsls	r3, r3, #5
 8010994:	4413      	add	r3, r2
 8010996:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 801099e:	7bfb      	ldrb	r3, [r7, #15]
 80109a0:	f003 0301 	and.w	r3, r3, #1
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d11e      	bne.n	80109e6 <_UG_HandleEvents+0x7a>
 80109a8:	7bfb      	ldrb	r3, [r7, #15]
 80109aa:	f003 0302 	and.w	r3, r3, #2
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d019      	beq.n	80109e6 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	7e9b      	ldrb	r3, [r3, #26]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d015      	beq.n	80109e6 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80109ba:	4a11      	ldr	r2, [pc, #68]	; (8010a00 <_UG_HandleEvents+0x94>)
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	7e1a      	ldrb	r2, [r3, #24]
 80109c4:	4b0e      	ldr	r3, [pc, #56]	; (8010a00 <_UG_HandleEvents+0x94>)
 80109c6:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	7e5a      	ldrb	r2, [r3, #25]
 80109cc:	4b0c      	ldr	r3, [pc, #48]	; (8010a00 <_UG_HandleEvents+0x94>)
 80109ce:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	7e9a      	ldrb	r2, [r3, #26]
 80109d4:	4b0a      	ldr	r3, [pc, #40]	; (8010a00 <_UG_HandleEvents+0x94>)
 80109d6:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109dc:	4808      	ldr	r0, [pc, #32]	; (8010a00 <_UG_HandleEvents+0x94>)
 80109de:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	2200      	movs	r2, #0
 80109e4:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 80109e6:	8afb      	ldrh	r3, [r7, #22]
 80109e8:	3301      	adds	r3, #1
 80109ea:	82fb      	strh	r3, [r7, #22]
 80109ec:	8afa      	ldrh	r2, [r7, #22]
 80109ee:	8abb      	ldrh	r3, [r7, #20]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d3cb      	bcc.n	801098c <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80109f4:	bf00      	nop
 80109f6:	bf00      	nop
 80109f8:	3718      	adds	r7, #24
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	20001a2c 	.word	0x20001a2c

08010a04 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8010a04:	b590      	push	{r4, r7, lr}
 8010a06:	b08f      	sub	sp, #60	; 0x3c
 8010a08:	af02      	add	r7, sp, #8
 8010a0a:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	685b      	ldr	r3, [r3, #4]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	f000 812c 	beq.w	8010c6e <_UG_PutText+0x26a>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	f000 8127 	beq.w	8010c6e <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	89db      	ldrh	r3, [r3, #14]
 8010a24:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	895b      	ldrh	r3, [r3, #10]
 8010a2a:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	3302      	adds	r3, #2
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8010a36:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8010a3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010a3e:	1ad2      	subs	r2, r2, r3
 8010a40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	f2c0 8114 	blt.w	8010c72 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	891b      	ldrh	r3, [r3, #8]
 8010a4e:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	899b      	ldrh	r3, [r3, #12]
 8010a54:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	7d1b      	ldrb	r3, [r3, #20]
 8010a5a:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	8adb      	ldrh	r3, [r3, #22]
 8010a60:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	8b1b      	ldrh	r3, [r3, #24]
 8010a66:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7ff fb92 	bl	80101a0 <_UG_FontSelect>

   rc=1;
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010a84:	4b80      	ldr	r3, [pc, #512]	; (8010c88 <_UG_PutText+0x284>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d107      	bne.n	8010aa0 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8010a90:	f107 0308 	add.w	r3, r7, #8
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7ff f9bf 	bl	800fe18 <_UG_DecodeUTF8>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010a9e:	e004      	b.n	8010aaa <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	1c5a      	adds	r2, r3, #1
 8010aa4:	60ba      	str	r2, [r7, #8]
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8010aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d006      	beq.n	8010abe <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8010ab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ab2:	2b0a      	cmp	r3, #10
 8010ab4:	d1e6      	bne.n	8010a84 <_UG_PutText+0x80>
 8010ab6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ab8:	3301      	adds	r3, #1
 8010aba:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010abc:	e7e2      	b.n	8010a84 <_UG_PutText+0x80>
     if(!chr) break;
 8010abe:	bf00      	nop
   }

   yp = 0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8010ac4:	7e7b      	ldrb	r3, [r7, #25]
 8010ac6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d01f      	beq.n	8010b0e <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8010ace:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010ad0:	8c3b      	ldrh	r3, [r7, #32]
 8010ad2:	1ad3      	subs	r3, r2, r3
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8010adc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010ade:	8bfb      	ldrh	r3, [r7, #30]
 8010ae0:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8010ae2:	fb11 f303 	smulbb	r3, r1, r3
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	1ad3      	subs	r3, r2, r3
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8010aee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010af0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010af2:	3b01      	subs	r3, #1
 8010af4:	b299      	uxth	r1, r3
 8010af6:	8abb      	ldrh	r3, [r7, #20]
 8010af8:	fb11 f303 	smulbb	r3, r1, r3
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	1ad3      	subs	r3, r2, r3
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8010b04:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	f2c0 80b4 	blt.w	8010c76 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8010b0e:	7e7b      	ldrb	r3, [r7, #25]
 8010b10:	f003 0310 	and.w	r3, r3, #16
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d003      	beq.n	8010b20 <_UG_PutText+0x11c>
 8010b18:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010b1c:	105b      	asrs	r3, r3, #1
 8010b1e:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8010b20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010b22:	8c3b      	ldrh	r3, [r7, #32]
 8010b24:	4413      	add	r3, r2
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8010b32:	2300      	movs	r3, #0
 8010b34:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010b36:	4b54      	ldr	r3, [pc, #336]	; (8010c88 <_UG_PutText+0x284>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d107      	bne.n	8010b52 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8010b42:	f107 0308 	add.w	r3, r7, #8
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7ff f966 	bl	800fe18 <_UG_DecodeUTF8>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010b50:	e004      	b.n	8010b5c <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	60ba      	str	r2, [r7, #8]
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8010b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d01b      	beq.n	8010b9a <_UG_PutText+0x196>
 8010b62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b64:	2b0a      	cmp	r3, #10
 8010b66:	d018      	beq.n	8010b9a <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8010b68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7ff f9cb 	bl	800ff08 <_UG_GetCharData>
 8010b72:	4603      	mov	r3, r0
 8010b74:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8010b76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b7e:	d00a      	beq.n	8010b96 <_UG_PutText+0x192>
         sl++;
 8010b80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b82:	3301      	adds	r3, #1
 8010b84:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8010b86:	8a7a      	ldrh	r2, [r7, #18]
 8010b88:	8afb      	ldrh	r3, [r7, #22]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	b29a      	uxth	r2, r3
 8010b8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b90:	4413      	add	r3, r2
 8010b92:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010b94:	e7cf      	b.n	8010b36 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8010b96:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010b98:	e7cd      	b.n	8010b36 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8010b9a:	8afb      	ldrh	r3, [r7, #22]
 8010b9c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010b9e:	1ad3      	subs	r3, r2, r3
 8010ba0:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8010ba2:	8b7a      	ldrh	r2, [r7, #26]
 8010ba4:	8bbb      	ldrh	r3, [r7, #28]
 8010ba6:	1ad3      	subs	r3, r2, r3
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	3301      	adds	r3, #1
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8010bb0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010bb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010bb4:	1ad3      	subs	r3, r2, r3
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8010bba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	db5b      	blt.n	8010c7a <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8010bc2:	7e7b      	ldrb	r3, [r7, #25]
 8010bc4:	f003 0301 	and.w	r3, r3, #1
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d002      	beq.n	8010bd2 <_UG_PutText+0x1ce>
 8010bcc:	2300      	movs	r3, #0
 8010bce:	853b      	strh	r3, [r7, #40]	; 0x28
 8010bd0:	e008      	b.n	8010be4 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8010bd2:	7e7b      	ldrb	r3, [r7, #25]
 8010bd4:	f003 0302 	and.w	r3, r3, #2
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d003      	beq.n	8010be4 <_UG_PutText+0x1e0>
 8010bdc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010be0:	105b      	asrs	r3, r3, #1
 8010be2:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8010be4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010be6:	8bbb      	ldrh	r3, [r7, #28]
 8010be8:	4413      	add	r3, r2
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010bee:	4b26      	ldr	r3, [pc, #152]	; (8010c88 <_UG_PutText+0x284>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d107      	bne.n	8010c0a <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8010bfa:	f107 030c 	add.w	r3, r7, #12
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7ff f90a 	bl	800fe18 <_UG_DecodeUTF8>
 8010c04:	4603      	mov	r3, r0
 8010c06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010c08:	e004      	b.n	8010c14 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	1c5a      	adds	r2, r3, #1
 8010c0e:	60fa      	str	r2, [r7, #12]
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8010c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d031      	beq.n	8010c7e <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8010c1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c1c:	2b0a      	cmp	r3, #10
 8010c1e:	d01c      	beq.n	8010c5a <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	8a1c      	ldrh	r4, [r3, #16]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	8a5b      	ldrh	r3, [r3, #18]
 8010c28:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8010c2c:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8010c30:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8010c32:	9300      	str	r3, [sp, #0]
 8010c34:	4623      	mov	r3, r4
 8010c36:	f7ff fb35 	bl	80102a4 <_UG_PutChar>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8010c3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c46:	d0d2      	beq.n	8010bee <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8010c48:	8a7a      	ldrh	r2, [r7, #18]
 8010c4a:	8afb      	ldrh	r3, [r7, #22]
 8010c4c:	4413      	add	r3, r2
 8010c4e:	b29a      	uxth	r2, r3
 8010c50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010c52:	4413      	add	r3, r2
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010c58:	e7c9      	b.n	8010bee <_UG_PutText+0x1ea>
           break;
 8010c5a:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8010c5c:	8bfa      	ldrh	r2, [r7, #30]
 8010c5e:	8abb      	ldrh	r3, [r7, #20]
 8010c60:	4413      	add	r3, r2
 8010c62:	b29a      	uxth	r2, r3
 8010c64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010c66:	4413      	add	r3, r2
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8010c6c:	e75d      	b.n	8010b2a <_UG_PutText+0x126>
     return;
 8010c6e:	bf00      	nop
 8010c70:	e006      	b.n	8010c80 <_UG_PutText+0x27c>
     return;
 8010c72:	bf00      	nop
 8010c74:	e004      	b.n	8010c80 <_UG_PutText+0x27c>
        return;
 8010c76:	bf00      	nop
 8010c78:	e002      	b.n	8010c80 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8010c7a:	bf00      	nop
 8010c7c:	e000      	b.n	8010c80 <_UG_PutText+0x27c>
           return;
 8010c7e:	bf00      	nop
   }
}
 8010c80:	3734      	adds	r7, #52	; 0x34
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd90      	pop	{r4, r7, pc}
 8010c86:	bf00      	nop
 8010c88:	20001a18 	.word	0x20001a18

08010c8c <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8010c8c:	b5b0      	push	{r4, r5, r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af02      	add	r7, sp, #8
 8010c92:	4604      	mov	r4, r0
 8010c94:	4608      	mov	r0, r1
 8010c96:	4611      	mov	r1, r2
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4623      	mov	r3, r4
 8010c9c:	80fb      	strh	r3, [r7, #6]
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	80bb      	strh	r3, [r7, #4]
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	807b      	strh	r3, [r7, #2]
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8010caa:	887b      	ldrh	r3, [r7, #2]
 8010cac:	3b01      	subs	r3, #1
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	b21c      	sxth	r4, r3
 8010cb2:	69bb      	ldr	r3, [r7, #24]
 8010cb4:	1c9a      	adds	r2, r3, #2
 8010cb6:	61ba      	str	r2, [r7, #24]
 8010cb8:	881b      	ldrh	r3, [r3, #0]
 8010cba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010cbe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8010cc2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	4613      	mov	r3, r2
 8010cca:	4622      	mov	r2, r4
 8010ccc:	f7fe fee0 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8010cd0:	88bb      	ldrh	r3, [r7, #4]
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	b219      	sxth	r1, r3
 8010cd8:	883b      	ldrh	r3, [r7, #0]
 8010cda:	3b01      	subs	r3, #1
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	b21c      	sxth	r4, r3
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	1c9a      	adds	r2, r3, #2
 8010ce4:	61ba      	str	r2, [r7, #24]
 8010ce6:	881b      	ldrh	r3, [r3, #0]
 8010ce8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010cec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010cf0:	9300      	str	r3, [sp, #0]
 8010cf2:	4623      	mov	r3, r4
 8010cf4:	f7fe fecc 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8010cf8:	69bb      	ldr	r3, [r7, #24]
 8010cfa:	1c9a      	adds	r2, r3, #2
 8010cfc:	61ba      	str	r2, [r7, #24]
 8010cfe:	881b      	ldrh	r3, [r3, #0]
 8010d00:	f9b7 4000 	ldrsh.w	r4, [r7]
 8010d04:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010d08:	f9b7 1000 	ldrsh.w	r1, [r7]
 8010d0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010d10:	9300      	str	r3, [sp, #0]
 8010d12:	4623      	mov	r3, r4
 8010d14:	f7fe febc 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8010d18:	883b      	ldrh	r3, [r7, #0]
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	b21c      	sxth	r4, r3
 8010d20:	69bb      	ldr	r3, [r7, #24]
 8010d22:	1c9a      	adds	r2, r3, #2
 8010d24:	61ba      	str	r2, [r7, #24]
 8010d26:	881b      	ldrh	r3, [r3, #0]
 8010d28:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010d2c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8010d30:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8010d34:	9300      	str	r3, [sp, #0]
 8010d36:	4623      	mov	r3, r4
 8010d38:	f7fe feaa 	bl	800fa90 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8010d3c:	88fb      	ldrh	r3, [r7, #6]
 8010d3e:	3301      	adds	r3, #1
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	b218      	sxth	r0, r3
 8010d44:	88bb      	ldrh	r3, [r7, #4]
 8010d46:	3301      	adds	r3, #1
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	b219      	sxth	r1, r3
 8010d4c:	887b      	ldrh	r3, [r7, #2]
 8010d4e:	3b02      	subs	r3, #2
 8010d50:	b29b      	uxth	r3, r3
 8010d52:	b21c      	sxth	r4, r3
 8010d54:	88bb      	ldrh	r3, [r7, #4]
 8010d56:	3301      	adds	r3, #1
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	b21d      	sxth	r5, r3
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	1c9a      	adds	r2, r3, #2
 8010d60:	61ba      	str	r2, [r7, #24]
 8010d62:	881b      	ldrh	r3, [r3, #0]
 8010d64:	9300      	str	r3, [sp, #0]
 8010d66:	462b      	mov	r3, r5
 8010d68:	4622      	mov	r2, r4
 8010d6a:	f7fe fe91 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8010d6e:	88fb      	ldrh	r3, [r7, #6]
 8010d70:	3301      	adds	r3, #1
 8010d72:	b29b      	uxth	r3, r3
 8010d74:	b218      	sxth	r0, r3
 8010d76:	88bb      	ldrh	r3, [r7, #4]
 8010d78:	3302      	adds	r3, #2
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	b219      	sxth	r1, r3
 8010d7e:	88fb      	ldrh	r3, [r7, #6]
 8010d80:	3301      	adds	r3, #1
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	b21c      	sxth	r4, r3
 8010d86:	883b      	ldrh	r3, [r7, #0]
 8010d88:	3b02      	subs	r3, #2
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	b21d      	sxth	r5, r3
 8010d8e:	69bb      	ldr	r3, [r7, #24]
 8010d90:	1c9a      	adds	r2, r3, #2
 8010d92:	61ba      	str	r2, [r7, #24]
 8010d94:	881b      	ldrh	r3, [r3, #0]
 8010d96:	9300      	str	r3, [sp, #0]
 8010d98:	462b      	mov	r3, r5
 8010d9a:	4622      	mov	r2, r4
 8010d9c:	f7fe fe78 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8010da0:	88fb      	ldrh	r3, [r7, #6]
 8010da2:	3301      	adds	r3, #1
 8010da4:	b29b      	uxth	r3, r3
 8010da6:	b218      	sxth	r0, r3
 8010da8:	883b      	ldrh	r3, [r7, #0]
 8010daa:	3b01      	subs	r3, #1
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	b219      	sxth	r1, r3
 8010db0:	887b      	ldrh	r3, [r7, #2]
 8010db2:	3b01      	subs	r3, #1
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	b21c      	sxth	r4, r3
 8010db8:	883b      	ldrh	r3, [r7, #0]
 8010dba:	3b01      	subs	r3, #1
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	b21d      	sxth	r5, r3
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	1c9a      	adds	r2, r3, #2
 8010dc4:	61ba      	str	r2, [r7, #24]
 8010dc6:	881b      	ldrh	r3, [r3, #0]
 8010dc8:	9300      	str	r3, [sp, #0]
 8010dca:	462b      	mov	r3, r5
 8010dcc:	4622      	mov	r2, r4
 8010dce:	f7fe fe5f 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8010dd2:	887b      	ldrh	r3, [r7, #2]
 8010dd4:	3b01      	subs	r3, #1
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	b218      	sxth	r0, r3
 8010dda:	88bb      	ldrh	r3, [r7, #4]
 8010ddc:	3301      	adds	r3, #1
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	b219      	sxth	r1, r3
 8010de2:	887b      	ldrh	r3, [r7, #2]
 8010de4:	3b01      	subs	r3, #1
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	b21c      	sxth	r4, r3
 8010dea:	883b      	ldrh	r3, [r7, #0]
 8010dec:	3b02      	subs	r3, #2
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	b21d      	sxth	r5, r3
 8010df2:	69bb      	ldr	r3, [r7, #24]
 8010df4:	1c9a      	adds	r2, r3, #2
 8010df6:	61ba      	str	r2, [r7, #24]
 8010df8:	881b      	ldrh	r3, [r3, #0]
 8010dfa:	9300      	str	r3, [sp, #0]
 8010dfc:	462b      	mov	r3, r5
 8010dfe:	4622      	mov	r2, r4
 8010e00:	f7fe fe46 	bl	800fa90 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8010e04:	88fb      	ldrh	r3, [r7, #6]
 8010e06:	3302      	adds	r3, #2
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	b218      	sxth	r0, r3
 8010e0c:	88bb      	ldrh	r3, [r7, #4]
 8010e0e:	3302      	adds	r3, #2
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	b219      	sxth	r1, r3
 8010e14:	887b      	ldrh	r3, [r7, #2]
 8010e16:	3b03      	subs	r3, #3
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	b21c      	sxth	r4, r3
 8010e1c:	88bb      	ldrh	r3, [r7, #4]
 8010e1e:	3302      	adds	r3, #2
 8010e20:	b29b      	uxth	r3, r3
 8010e22:	b21d      	sxth	r5, r3
 8010e24:	69bb      	ldr	r3, [r7, #24]
 8010e26:	1c9a      	adds	r2, r3, #2
 8010e28:	61ba      	str	r2, [r7, #24]
 8010e2a:	881b      	ldrh	r3, [r3, #0]
 8010e2c:	9300      	str	r3, [sp, #0]
 8010e2e:	462b      	mov	r3, r5
 8010e30:	4622      	mov	r2, r4
 8010e32:	f7fe fe2d 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8010e36:	88fb      	ldrh	r3, [r7, #6]
 8010e38:	3302      	adds	r3, #2
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	b218      	sxth	r0, r3
 8010e3e:	88bb      	ldrh	r3, [r7, #4]
 8010e40:	3303      	adds	r3, #3
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	b219      	sxth	r1, r3
 8010e46:	88fb      	ldrh	r3, [r7, #6]
 8010e48:	3302      	adds	r3, #2
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	b21c      	sxth	r4, r3
 8010e4e:	883b      	ldrh	r3, [r7, #0]
 8010e50:	3b03      	subs	r3, #3
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	b21d      	sxth	r5, r3
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	1c9a      	adds	r2, r3, #2
 8010e5a:	61ba      	str	r2, [r7, #24]
 8010e5c:	881b      	ldrh	r3, [r3, #0]
 8010e5e:	9300      	str	r3, [sp, #0]
 8010e60:	462b      	mov	r3, r5
 8010e62:	4622      	mov	r2, r4
 8010e64:	f7fe fe14 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8010e68:	88fb      	ldrh	r3, [r7, #6]
 8010e6a:	3302      	adds	r3, #2
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	b218      	sxth	r0, r3
 8010e70:	883b      	ldrh	r3, [r7, #0]
 8010e72:	3b02      	subs	r3, #2
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	b219      	sxth	r1, r3
 8010e78:	887b      	ldrh	r3, [r7, #2]
 8010e7a:	3b02      	subs	r3, #2
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	b21c      	sxth	r4, r3
 8010e80:	883b      	ldrh	r3, [r7, #0]
 8010e82:	3b02      	subs	r3, #2
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	b21d      	sxth	r5, r3
 8010e88:	69bb      	ldr	r3, [r7, #24]
 8010e8a:	1c9a      	adds	r2, r3, #2
 8010e8c:	61ba      	str	r2, [r7, #24]
 8010e8e:	881b      	ldrh	r3, [r3, #0]
 8010e90:	9300      	str	r3, [sp, #0]
 8010e92:	462b      	mov	r3, r5
 8010e94:	4622      	mov	r2, r4
 8010e96:	f7fe fdfb 	bl	800fa90 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8010e9a:	887b      	ldrh	r3, [r7, #2]
 8010e9c:	3b02      	subs	r3, #2
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	b218      	sxth	r0, r3
 8010ea2:	88bb      	ldrh	r3, [r7, #4]
 8010ea4:	3302      	adds	r3, #2
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	b219      	sxth	r1, r3
 8010eaa:	887b      	ldrh	r3, [r7, #2]
 8010eac:	3b02      	subs	r3, #2
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	b21a      	sxth	r2, r3
 8010eb2:	883b      	ldrh	r3, [r7, #0]
 8010eb4:	3b03      	subs	r3, #3
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	b21c      	sxth	r4, r3
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	881b      	ldrh	r3, [r3, #0]
 8010ebe:	9300      	str	r3, [sp, #0]
 8010ec0:	4623      	mov	r3, r4
 8010ec2:	f7fe fde5 	bl	800fa90 <UG_DrawLine>
}
 8010ec6:	bf00      	nop
 8010ec8:	3708      	adds	r7, #8
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010ed0 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	6039      	str	r1, [r7, #0]
 8010eda:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8010edc:	79fb      	ldrb	r3, [r7, #7]
 8010ede:	2b03      	cmp	r3, #3
 8010ee0:	d810      	bhi.n	8010f04 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8010ee2:	4b0b      	ldr	r3, [pc, #44]	; (8010f10 <UG_DriverRegister+0x40>)
 8010ee4:	681a      	ldr	r2, [r3, #0]
 8010ee6:	79fb      	ldrb	r3, [r7, #7]
 8010ee8:	330a      	adds	r3, #10
 8010eea:	00db      	lsls	r3, r3, #3
 8010eec:	4413      	add	r3, r2
 8010eee:	683a      	ldr	r2, [r7, #0]
 8010ef0:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8010ef2:	4b07      	ldr	r3, [pc, #28]	; (8010f10 <UG_DriverRegister+0x40>)
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	79fb      	ldrb	r3, [r7, #7]
 8010ef8:	330a      	adds	r3, #10
 8010efa:	00db      	lsls	r3, r3, #3
 8010efc:	4413      	add	r3, r2
 8010efe:	2203      	movs	r2, #3
 8010f00:	721a      	strb	r2, [r3, #8]
 8010f02:	e000      	b.n	8010f06 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8010f04:	bf00      	nop
}
 8010f06:	370c      	adds	r7, #12
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr
 8010f10:	20001a18 	.word	0x20001a18

08010f14 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8010f1a:	4b5e      	ldr	r3, [pc, #376]	; (8011094 <UG_Update+0x180>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010f22:	f003 0301 	and.w	r3, r3, #1
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d00a      	beq.n	8010f40 <UG_Update+0x2c>
 8010f2a:	4b5a      	ldr	r3, [pc, #360]	; (8011094 <UG_Update+0x180>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8010f32:	4b58      	ldr	r3, [pc, #352]	; (8011094 <UG_Update+0x180>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f022 0201 	bic.w	r2, r2, #1
 8010f3a:	b2d2      	uxtb	r2, r2
 8010f3c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8010f40:	4b54      	ldr	r3, [pc, #336]	; (8011094 <UG_Update+0x180>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	68da      	ldr	r2, [r3, #12]
 8010f46:	4b53      	ldr	r3, [pc, #332]	; (8011094 <UG_Update+0x180>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	691b      	ldr	r3, [r3, #16]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d071      	beq.n	8011034 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8010f50:	4b50      	ldr	r3, [pc, #320]	; (8011094 <UG_Update+0x180>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	68db      	ldr	r3, [r3, #12]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d06c      	beq.n	8011034 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8010f5a:	4b4e      	ldr	r3, [pc, #312]	; (8011094 <UG_Update+0x180>)
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	4b4d      	ldr	r3, [pc, #308]	; (8011094 <UG_Update+0x180>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	6912      	ldr	r2, [r2, #16]
 8010f64:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8010f66:	4b4b      	ldr	r3, [pc, #300]	; (8011094 <UG_Update+0x180>)
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	4b4a      	ldr	r3, [pc, #296]	; (8011094 <UG_Update+0x180>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	68d2      	ldr	r2, [r2, #12]
 8010f70:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8010f72:	4b48      	ldr	r3, [pc, #288]	; (8011094 <UG_Update+0x180>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	695b      	ldr	r3, [r3, #20]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d045      	beq.n	8011008 <UG_Update+0xf4>
 8010f7c:	4b45      	ldr	r3, [pc, #276]	; (8011094 <UG_Update+0x180>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	695b      	ldr	r3, [r3, #20]
 8010f82:	7d9b      	ldrb	r3, [r3, #22]
 8010f84:	f003 0302 	and.w	r3, r3, #2
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d03d      	beq.n	8011008 <UG_Update+0xf4>
 8010f8c:	4b41      	ldr	r3, [pc, #260]	; (8011094 <UG_Update+0x180>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	695b      	ldr	r3, [r3, #20]
 8010f92:	7a1b      	ldrb	r3, [r3, #8]
 8010f94:	f003 0308 	and.w	r3, r3, #8
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d035      	beq.n	8011008 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8010f9c:	4b3d      	ldr	r3, [pc, #244]	; (8011094 <UG_Update+0x180>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	695b      	ldr	r3, [r3, #20]
 8010fa2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8010fa6:	4b3b      	ldr	r3, [pc, #236]	; (8011094 <UG_Update+0x180>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	691b      	ldr	r3, [r3, #16]
 8010fac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	d123      	bne.n	8010ffc <UG_Update+0xe8>
 8010fb4:	4b37      	ldr	r3, [pc, #220]	; (8011094 <UG_Update+0x180>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	695b      	ldr	r3, [r3, #20]
 8010fba:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010fbe:	4b35      	ldr	r3, [pc, #212]	; (8011094 <UG_Update+0x180>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	691b      	ldr	r3, [r3, #16]
 8010fc4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d117      	bne.n	8010ffc <UG_Update+0xe8>
 8010fcc:	4b31      	ldr	r3, [pc, #196]	; (8011094 <UG_Update+0x180>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	695b      	ldr	r3, [r3, #20]
 8010fd2:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8010fd6:	4b2f      	ldr	r3, [pc, #188]	; (8011094 <UG_Update+0x180>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d10b      	bne.n	8010ffc <UG_Update+0xe8>
 8010fe4:	4b2b      	ldr	r3, [pc, #172]	; (8011094 <UG_Update+0x180>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	695b      	ldr	r3, [r3, #20]
 8010fea:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8010fee:	4b29      	ldr	r3, [pc, #164]	; (8011094 <UG_Update+0x180>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	691b      	ldr	r3, [r3, #16]
 8010ff4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d005      	beq.n	8011008 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8010ffc:	4b25      	ldr	r3, [pc, #148]	; (8011094 <UG_Update+0x180>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	695b      	ldr	r3, [r3, #20]
 8011002:	4618      	mov	r0, r3
 8011004:	f000 f848 	bl	8011098 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8011008:	4b22      	ldr	r3, [pc, #136]	; (8011094 <UG_Update+0x180>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	691b      	ldr	r3, [r3, #16]
 801100e:	7a1a      	ldrb	r2, [r3, #8]
 8011010:	4b20      	ldr	r3, [pc, #128]	; (8011094 <UG_Update+0x180>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	691b      	ldr	r3, [r3, #16]
 8011016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801101a:	b2d2      	uxtb	r2, r2
 801101c:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 801101e:	4b1d      	ldr	r3, [pc, #116]	; (8011094 <UG_Update+0x180>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	691b      	ldr	r3, [r3, #16]
 8011024:	7a1a      	ldrb	r2, [r3, #8]
 8011026:	4b1b      	ldr	r3, [pc, #108]	; (8011094 <UG_Update+0x180>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	691b      	ldr	r3, [r3, #16]
 801102c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8011030:	b2d2      	uxtb	r2, r2
 8011032:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8011034:	4b17      	ldr	r3, [pc, #92]	; (8011094 <UG_Update+0x180>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	691b      	ldr	r3, [r3, #16]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d01b      	beq.n	8011076 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 801103e:	4b15      	ldr	r3, [pc, #84]	; (8011094 <UG_Update+0x180>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	691b      	ldr	r3, [r3, #16]
 8011044:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	7a1b      	ldrb	r3, [r3, #8]
 801104a:	f003 0320 	and.w	r3, r3, #32
 801104e:	2b00      	cmp	r3, #0
 8011050:	d002      	beq.n	8011058 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 f8ca 	bl	80111ec <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	7a1b      	ldrb	r3, [r3, #8]
 801105c:	f003 0308 	and.w	r3, r3, #8
 8011060:	2b00      	cmp	r3, #0
 8011062:	d008      	beq.n	8011076 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f7ff fb81 	bl	801076c <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f7ff fc34 	bl	80108d8 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f7ff fc7b 	bl	801096c <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8011076:	4b07      	ldr	r3, [pc, #28]	; (8011094 <UG_Update+0x180>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	689b      	ldr	r3, [r3, #8]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d004      	beq.n	801108c <UG_Update+0x178>
     gui->device->flush();
 8011082:	4b04      	ldr	r3, [pc, #16]	; (8011094 <UG_Update+0x180>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	689b      	ldr	r3, [r3, #8]
 801108a:	4798      	blx	r3
   }
}
 801108c:	bf00      	nop
 801108e:	3708      	adds	r7, #8
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	20001a18 	.word	0x20001a18

08011098 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8011098:	b590      	push	{r4, r7, lr}
 801109a:	b08f      	sub	sp, #60	; 0x3c
 801109c:	af02      	add	r7, sp, #8
 801109e:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	f000 809a 	beq.w	80111dc <_UG_WindowDrawTitle+0x144>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	7a1b      	ldrb	r3, [r3, #8]
 80110ac:	f003 0302 	and.w	r3, r3, #2
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f000 8093 	beq.w	80111dc <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	89db      	ldrh	r3, [r3, #14]
 80110ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	8a1b      	ldrh	r3, [r3, #16]
 80110c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	8a5b      	ldrh	r3, [r3, #18]
 80110c6:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	8a9b      	ldrh	r3, [r3, #20]
 80110cc:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	7d9b      	ldrb	r3, [r3, #22]
 80110d2:	f003 0301 	and.w	r3, r3, #1
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d00f      	beq.n	80110fa <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 80110da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80110dc:	3303      	adds	r3, #3
 80110de:	b29b      	uxth	r3, r3
 80110e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 80110e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80110e4:	3303      	adds	r3, #3
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 80110ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80110ec:	3b03      	subs	r3, #3
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 80110f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80110f4:	3b03      	subs	r3, #3
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 80110fa:	4b3b      	ldr	r3, [pc, #236]	; (80111e8 <_UG_WindowDrawTitle+0x150>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	691b      	ldr	r3, [r3, #16]
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	429a      	cmp	r2, r3
 8011104:	d106      	bne.n	8011114 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801110a:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011110:	83bb      	strh	r3, [r7, #28]
 8011112:	e005      	b.n	8011120 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011118:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801111e:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011126:	b29a      	uxth	r2, r3
 8011128:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801112a:	4413      	add	r3, r2
 801112c:	b29b      	uxth	r3, r3
 801112e:	3b01      	subs	r3, #1
 8011130:	b29b      	uxth	r3, r3
 8011132:	b21c      	sxth	r4, r3
 8011134:	8bfb      	ldrh	r3, [r7, #30]
 8011136:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801113a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801113e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8011142:	9300      	str	r3, [sp, #0]
 8011144:	4623      	mov	r3, r4
 8011146:	f7fe fb03 	bl	800f750 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	699b      	ldr	r3, [r3, #24]
 801114e:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	69db      	ldr	r3, [r3, #28]
 8011154:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8011156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011158:	3303      	adds	r3, #3
 801115a:	b29b      	uxth	r3, r3
 801115c:	b21b      	sxth	r3, r3
 801115e:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8011160:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011162:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8011164:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011166:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801116e:	b29a      	uxth	r2, r3
 8011170:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011172:	4413      	add	r3, r2
 8011174:	b29b      	uxth	r3, r3
 8011176:	3b01      	subs	r3, #1
 8011178:	b29b      	uxth	r3, r3
 801117a:	b21b      	sxth	r3, r3
 801117c:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011184:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801118e:	b21b      	sxth	r3, r3
 8011190:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8011198:	b21b      	sxth	r3, r3
 801119a:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 801119c:	f107 030c 	add.w	r3, r7, #12
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7ff fc2f 	bl	8010a04 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80111ac:	b29a      	uxth	r2, r3
 80111ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80111b0:	4413      	add	r3, r2
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	b219      	sxth	r1, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80111bc:	b29a      	uxth	r2, r3
 80111be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80111c0:	4413      	add	r3, r2
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	b21b      	sxth	r3, r3
 80111c6:	f649 5413 	movw	r4, #40211	; 0x9d13
 80111ca:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80111ce:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80111d2:	9400      	str	r4, [sp, #0]
 80111d4:	f7fe fc5c 	bl	800fa90 <UG_DrawLine>
      return UG_RESULT_OK;
 80111d8:	2300      	movs	r3, #0
 80111da:	e001      	b.n	80111e0 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 80111dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80111e0:	4618      	mov	r0, r3
 80111e2:	3734      	adds	r7, #52	; 0x34
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd90      	pop	{r4, r7, pc}
 80111e8:	20001a18 	.word	0x20001a18

080111ec <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 80111ec:	b590      	push	{r4, r7, lr}
 80111ee:	b089      	sub	sp, #36	; 0x24
 80111f0:	af02      	add	r7, sp, #8
 80111f2:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	89db      	ldrh	r3, [r3, #14]
 80111f8:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	8a1b      	ldrh	r3, [r3, #16]
 80111fe:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	8a5b      	ldrh	r3, [r3, #18]
 8011204:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	8a9b      	ldrh	r3, [r3, #20]
 801120a:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	7a1b      	ldrb	r3, [r3, #8]
 8011210:	f023 0320 	bic.w	r3, r3, #32
 8011214:	b2da      	uxtb	r2, r3
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	7a1b      	ldrb	r3, [r3, #8]
 801121e:	f003 0308 	and.w	r3, r3, #8
 8011222:	2b00      	cmp	r3, #0
 8011224:	f000 8084 	beq.w	8011330 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	7d9b      	ldrb	r3, [r3, #22]
 801122c:	f003 0301 	and.w	r3, r3, #1
 8011230:	2b00      	cmp	r3, #0
 8011232:	d021      	beq.n	8011278 <_UG_WindowUpdate+0x8c>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	7a1b      	ldrb	r3, [r3, #8]
 8011238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801123c:	2b00      	cmp	r3, #0
 801123e:	d11b      	bne.n	8011278 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8011240:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011244:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011248:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 801124c:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8011250:	4c43      	ldr	r4, [pc, #268]	; (8011360 <_UG_WindowUpdate+0x174>)
 8011252:	9400      	str	r4, [sp, #0]
 8011254:	f7ff fd1a 	bl	8010c8c <_UG_DrawObjectFrame>
         xs+=3;
 8011258:	8abb      	ldrh	r3, [r7, #20]
 801125a:	3303      	adds	r3, #3
 801125c:	b29b      	uxth	r3, r3
 801125e:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8011260:	8a7b      	ldrh	r3, [r7, #18]
 8011262:	3303      	adds	r3, #3
 8011264:	b29b      	uxth	r3, r3
 8011266:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8011268:	8a3b      	ldrh	r3, [r7, #16]
 801126a:	3b03      	subs	r3, #3
 801126c:	b29b      	uxth	r3, r3
 801126e:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8011270:	89fb      	ldrh	r3, [r7, #14]
 8011272:	3b03      	subs	r3, #3
 8011274:	b29b      	uxth	r3, r3
 8011276:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	7d9b      	ldrb	r3, [r3, #22]
 801127c:	f003 0302 	and.w	r3, r3, #2
 8011280:	2b00      	cmp	r3, #0
 8011282:	d01a      	beq.n	80112ba <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f7ff ff07 	bl	8011098 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011290:	b29a      	uxth	r2, r3
 8011292:	8a7b      	ldrh	r3, [r7, #18]
 8011294:	4413      	add	r3, r2
 8011296:	b29b      	uxth	r3, r3
 8011298:	3301      	adds	r3, #1
 801129a:	b29b      	uxth	r3, r3
 801129c:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	7a1b      	ldrb	r3, [r3, #8]
 80112a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d007      	beq.n	80112ba <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	7a1b      	ldrb	r3, [r3, #8]
 80112ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112b2:	b2da      	uxtb	r2, r3
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	721a      	strb	r2, [r3, #8]
            return;
 80112b8:	e04e      	b.n	8011358 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	899b      	ldrh	r3, [r3, #12]
 80112be:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80112c2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80112c6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80112ca:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80112ce:	9300      	str	r3, [sp, #0]
 80112d0:	4623      	mov	r3, r4
 80112d2:	f7fe fa3d 	bl	800f750 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 80112dc:	2300      	movs	r3, #0
 80112de:	82fb      	strh	r3, [r7, #22]
 80112e0:	e021      	b.n	8011326 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	685a      	ldr	r2, [r3, #4]
 80112e6:	8afb      	ldrh	r3, [r7, #22]
 80112e8:	015b      	lsls	r3, r3, #5
 80112ea:	4413      	add	r3, r2
 80112ec:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	f003 0301 	and.w	r3, r3, #1
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d112      	bne.n	8011320 <_UG_WindowUpdate+0x134>
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	f003 0302 	and.w	r3, r3, #2
 8011302:	2b00      	cmp	r3, #0
 8011304:	d00c      	beq.n	8011320 <_UG_WindowUpdate+0x134>
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	f003 0308 	and.w	r3, r3, #8
 801130e:	2b00      	cmp	r3, #0
 8011310:	d006      	beq.n	8011320 <_UG_WindowUpdate+0x134>
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801131a:	b2da      	uxtb	r2, r3
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8011320:	8afb      	ldrh	r3, [r7, #22]
 8011322:	3301      	adds	r3, #1
 8011324:	82fb      	strh	r3, [r7, #22]
 8011326:	8afa      	ldrh	r2, [r7, #22]
 8011328:	89bb      	ldrh	r3, [r7, #12]
 801132a:	429a      	cmp	r2, r3
 801132c:	d3d9      	bcc.n	80112e2 <_UG_WindowUpdate+0xf6>
 801132e:	e013      	b.n	8011358 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8011348:	4b06      	ldr	r3, [pc, #24]	; (8011364 <_UG_WindowUpdate+0x178>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011350:	9300      	str	r3, [sp, #0]
 8011352:	4623      	mov	r3, r4
 8011354:	f7fe f9fc 	bl	800f750 <UG_FillFrame>
   }
}
 8011358:	371c      	adds	r7, #28
 801135a:	46bd      	mov	sp, r7
 801135c:	bd90      	pop	{r4, r7, pc}
 801135e:	bf00      	nop
 8011360:	08037498 	.word	0x08037498
 8011364:	20001a18 	.word	0x20001a18

08011368 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b084      	sub	sp, #16
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	460b      	mov	r3, r1
 8011372:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011374:	2300      	movs	r3, #0
 8011376:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	7c1b      	ldrb	r3, [r3, #16]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d115      	bne.n	80113ac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011384:	2202      	movs	r2, #2
 8011386:	2181      	movs	r1, #129	; 0x81
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f001 fe62 	bl	8013052 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2201      	movs	r2, #1
 8011392:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011398:	2202      	movs	r2, #2
 801139a:	2101      	movs	r1, #1
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f001 fe58 	bl	8013052 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2201      	movs	r2, #1
 80113a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80113aa:	e012      	b.n	80113d2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80113ac:	2340      	movs	r3, #64	; 0x40
 80113ae:	2202      	movs	r2, #2
 80113b0:	2181      	movs	r1, #129	; 0x81
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f001 fe4d 	bl	8013052 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2201      	movs	r2, #1
 80113bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80113be:	2340      	movs	r3, #64	; 0x40
 80113c0:	2202      	movs	r2, #2
 80113c2:	2101      	movs	r1, #1
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f001 fe44 	bl	8013052 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2201      	movs	r2, #1
 80113ce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80113d2:	2308      	movs	r3, #8
 80113d4:	2203      	movs	r2, #3
 80113d6:	2182      	movs	r1, #130	; 0x82
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f001 fe3a 	bl	8013052 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	2201      	movs	r2, #1
 80113e2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80113e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80113e8:	f001 ff5c 	bl	80132a4 <USBD_static_malloc>
 80113ec:	4602      	mov	r2, r0
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d102      	bne.n	8011404 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80113fe:	2301      	movs	r3, #1
 8011400:	73fb      	strb	r3, [r7, #15]
 8011402:	e026      	b.n	8011452 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801140a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	2200      	movs	r2, #0
 801141a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	2200      	movs	r2, #0
 8011422:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	7c1b      	ldrb	r3, [r3, #16]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d109      	bne.n	8011442 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011438:	2101      	movs	r1, #1
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f001 fefb 	bl	8013236 <USBD_LL_PrepareReceive>
 8011440:	e007      	b.n	8011452 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011448:	2340      	movs	r3, #64	; 0x40
 801144a:	2101      	movs	r1, #1
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f001 fef2 	bl	8013236 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8011452:	7bfb      	ldrb	r3, [r7, #15]
}
 8011454:	4618      	mov	r0, r3
 8011456:	3710      	adds	r7, #16
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}

0801145c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b084      	sub	sp, #16
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	460b      	mov	r3, r1
 8011466:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011468:	2300      	movs	r3, #0
 801146a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801146c:	2181      	movs	r1, #129	; 0x81
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f001 fe15 	bl	801309e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2200      	movs	r2, #0
 8011478:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801147a:	2101      	movs	r1, #1
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f001 fe0e 	bl	801309e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2200      	movs	r2, #0
 8011486:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801148a:	2182      	movs	r1, #130	; 0x82
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f001 fe06 	bl	801309e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2200      	movs	r2, #0
 8011496:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00e      	beq.n	80114c0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114b2:	4618      	mov	r0, r3
 80114b4:	f001 ff04 	bl	80132c0 <USBD_static_free>
    pdev->pClassData = NULL;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2200      	movs	r2, #0
 80114bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80114c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3710      	adds	r7, #16
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b086      	sub	sp, #24
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
 80114d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114da:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80114dc:	2300      	movs	r3, #0
 80114de:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80114e0:	2300      	movs	r3, #0
 80114e2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80114e4:	2300      	movs	r3, #0
 80114e6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d039      	beq.n	8011568 <USBD_CDC_Setup+0x9e>
 80114f4:	2b20      	cmp	r3, #32
 80114f6:	d17f      	bne.n	80115f8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	88db      	ldrh	r3, [r3, #6]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d029      	beq.n	8011554 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	b25b      	sxtb	r3, r3
 8011506:	2b00      	cmp	r3, #0
 8011508:	da11      	bge.n	801152e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011510:	689b      	ldr	r3, [r3, #8]
 8011512:	683a      	ldr	r2, [r7, #0]
 8011514:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8011516:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011518:	683a      	ldr	r2, [r7, #0]
 801151a:	88d2      	ldrh	r2, [r2, #6]
 801151c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801151e:	6939      	ldr	r1, [r7, #16]
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	88db      	ldrh	r3, [r3, #6]
 8011524:	461a      	mov	r2, r3
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f001 f9e3 	bl	80128f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801152c:	e06b      	b.n	8011606 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	785a      	ldrb	r2, [r3, #1]
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	88db      	ldrh	r3, [r3, #6]
 801153c:	b2da      	uxtb	r2, r3
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8011544:	6939      	ldr	r1, [r7, #16]
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	88db      	ldrh	r3, [r3, #6]
 801154a:	461a      	mov	r2, r3
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f001 f9fe 	bl	801294e <USBD_CtlPrepareRx>
      break;
 8011552:	e058      	b.n	8011606 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801155a:	689b      	ldr	r3, [r3, #8]
 801155c:	683a      	ldr	r2, [r7, #0]
 801155e:	7850      	ldrb	r0, [r2, #1]
 8011560:	2200      	movs	r2, #0
 8011562:	6839      	ldr	r1, [r7, #0]
 8011564:	4798      	blx	r3
      break;
 8011566:	e04e      	b.n	8011606 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	785b      	ldrb	r3, [r3, #1]
 801156c:	2b0b      	cmp	r3, #11
 801156e:	d02e      	beq.n	80115ce <USBD_CDC_Setup+0x104>
 8011570:	2b0b      	cmp	r3, #11
 8011572:	dc38      	bgt.n	80115e6 <USBD_CDC_Setup+0x11c>
 8011574:	2b00      	cmp	r3, #0
 8011576:	d002      	beq.n	801157e <USBD_CDC_Setup+0xb4>
 8011578:	2b0a      	cmp	r3, #10
 801157a:	d014      	beq.n	80115a6 <USBD_CDC_Setup+0xdc>
 801157c:	e033      	b.n	80115e6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011584:	2b03      	cmp	r3, #3
 8011586:	d107      	bne.n	8011598 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8011588:	f107 030c 	add.w	r3, r7, #12
 801158c:	2202      	movs	r2, #2
 801158e:	4619      	mov	r1, r3
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f001 f9ae 	bl	80128f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011596:	e02e      	b.n	80115f6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8011598:	6839      	ldr	r1, [r7, #0]
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f001 f93e 	bl	801281c <USBD_CtlError>
            ret = USBD_FAIL;
 80115a0:	2302      	movs	r3, #2
 80115a2:	75fb      	strb	r3, [r7, #23]
          break;
 80115a4:	e027      	b.n	80115f6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115ac:	2b03      	cmp	r3, #3
 80115ae:	d107      	bne.n	80115c0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80115b0:	f107 030f 	add.w	r3, r7, #15
 80115b4:	2201      	movs	r2, #1
 80115b6:	4619      	mov	r1, r3
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f001 f99a 	bl	80128f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80115be:	e01a      	b.n	80115f6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80115c0:	6839      	ldr	r1, [r7, #0]
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f001 f92a 	bl	801281c <USBD_CtlError>
            ret = USBD_FAIL;
 80115c8:	2302      	movs	r3, #2
 80115ca:	75fb      	strb	r3, [r7, #23]
          break;
 80115cc:	e013      	b.n	80115f6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115d4:	2b03      	cmp	r3, #3
 80115d6:	d00d      	beq.n	80115f4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80115d8:	6839      	ldr	r1, [r7, #0]
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f001 f91e 	bl	801281c <USBD_CtlError>
            ret = USBD_FAIL;
 80115e0:	2302      	movs	r3, #2
 80115e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80115e4:	e006      	b.n	80115f4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80115e6:	6839      	ldr	r1, [r7, #0]
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f001 f917 	bl	801281c <USBD_CtlError>
          ret = USBD_FAIL;
 80115ee:	2302      	movs	r3, #2
 80115f0:	75fb      	strb	r3, [r7, #23]
          break;
 80115f2:	e000      	b.n	80115f6 <USBD_CDC_Setup+0x12c>
          break;
 80115f4:	bf00      	nop
      }
      break;
 80115f6:	e006      	b.n	8011606 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80115f8:	6839      	ldr	r1, [r7, #0]
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f001 f90e 	bl	801281c <USBD_CtlError>
      ret = USBD_FAIL;
 8011600:	2302      	movs	r3, #2
 8011602:	75fb      	strb	r3, [r7, #23]
      break;
 8011604:	bf00      	nop
  }

  return ret;
 8011606:	7dfb      	ldrb	r3, [r7, #23]
}
 8011608:	4618      	mov	r0, r3
 801160a:	3718      	adds	r7, #24
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	460b      	mov	r3, r1
 801161a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011622:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801162a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011632:	2b00      	cmp	r3, #0
 8011634:	d03a      	beq.n	80116ac <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011636:	78fa      	ldrb	r2, [r7, #3]
 8011638:	6879      	ldr	r1, [r7, #4]
 801163a:	4613      	mov	r3, r2
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	4413      	add	r3, r2
 8011640:	009b      	lsls	r3, r3, #2
 8011642:	440b      	add	r3, r1
 8011644:	331c      	adds	r3, #28
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d029      	beq.n	80116a0 <USBD_CDC_DataIn+0x90>
 801164c:	78fa      	ldrb	r2, [r7, #3]
 801164e:	6879      	ldr	r1, [r7, #4]
 8011650:	4613      	mov	r3, r2
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	4413      	add	r3, r2
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	440b      	add	r3, r1
 801165a:	331c      	adds	r3, #28
 801165c:	681a      	ldr	r2, [r3, #0]
 801165e:	78f9      	ldrb	r1, [r7, #3]
 8011660:	68b8      	ldr	r0, [r7, #8]
 8011662:	460b      	mov	r3, r1
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	440b      	add	r3, r1
 8011668:	00db      	lsls	r3, r3, #3
 801166a:	4403      	add	r3, r0
 801166c:	3338      	adds	r3, #56	; 0x38
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	fbb2 f1f3 	udiv	r1, r2, r3
 8011674:	fb01 f303 	mul.w	r3, r1, r3
 8011678:	1ad3      	subs	r3, r2, r3
 801167a:	2b00      	cmp	r3, #0
 801167c:	d110      	bne.n	80116a0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801167e:	78fa      	ldrb	r2, [r7, #3]
 8011680:	6879      	ldr	r1, [r7, #4]
 8011682:	4613      	mov	r3, r2
 8011684:	009b      	lsls	r3, r3, #2
 8011686:	4413      	add	r3, r2
 8011688:	009b      	lsls	r3, r3, #2
 801168a:	440b      	add	r3, r1
 801168c:	331c      	adds	r3, #28
 801168e:	2200      	movs	r2, #0
 8011690:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011692:	78f9      	ldrb	r1, [r7, #3]
 8011694:	2300      	movs	r3, #0
 8011696:	2200      	movs	r2, #0
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f001 fda9 	bl	80131f0 <USBD_LL_Transmit>
 801169e:	e003      	b.n	80116a8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2200      	movs	r2, #0
 80116a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80116a8:	2300      	movs	r3, #0
 80116aa:	e000      	b.n	80116ae <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80116ac:	2302      	movs	r3, #2
  }
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}

080116b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80116b6:	b580      	push	{r7, lr}
 80116b8:	b084      	sub	sp, #16
 80116ba:	af00      	add	r7, sp, #0
 80116bc:	6078      	str	r0, [r7, #4]
 80116be:	460b      	mov	r3, r1
 80116c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116c8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80116ca:	78fb      	ldrb	r3, [r7, #3]
 80116cc:	4619      	mov	r1, r3
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f001 fdd4 	bl	801327c <USBD_LL_GetRxDataSize>
 80116d4:	4602      	mov	r2, r0
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d00d      	beq.n	8011702 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116ec:	68db      	ldr	r3, [r3, #12]
 80116ee:	68fa      	ldr	r2, [r7, #12]
 80116f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80116f4:	68fa      	ldr	r2, [r7, #12]
 80116f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80116fa:	4611      	mov	r1, r2
 80116fc:	4798      	blx	r3

    return USBD_OK;
 80116fe:	2300      	movs	r3, #0
 8011700:	e000      	b.n	8011704 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8011702:	2302      	movs	r3, #2
  }
}
 8011704:	4618      	mov	r0, r3
 8011706:	3710      	adds	r7, #16
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}

0801170c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b084      	sub	sp, #16
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801171a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011722:	2b00      	cmp	r3, #0
 8011724:	d015      	beq.n	8011752 <USBD_CDC_EP0_RxReady+0x46>
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801172c:	2bff      	cmp	r3, #255	; 0xff
 801172e:	d010      	beq.n	8011752 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	68fa      	ldr	r2, [r7, #12]
 801173a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 801173e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011740:	68fa      	ldr	r2, [r7, #12]
 8011742:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011746:	b292      	uxth	r2, r2
 8011748:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	22ff      	movs	r2, #255	; 0xff
 801174e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8011752:	2300      	movs	r3, #0
}
 8011754:	4618      	mov	r0, r3
 8011756:	3710      	adds	r7, #16
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}

0801175c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801175c:	b480      	push	{r7}
 801175e:	b083      	sub	sp, #12
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2243      	movs	r2, #67	; 0x43
 8011768:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801176a:	4b03      	ldr	r3, [pc, #12]	; (8011778 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801176c:	4618      	mov	r0, r3
 801176e:	370c      	adds	r7, #12
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr
 8011778:	2000013c 	.word	0x2000013c

0801177c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801177c:	b480      	push	{r7}
 801177e:	b083      	sub	sp, #12
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2243      	movs	r2, #67	; 0x43
 8011788:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801178a:	4b03      	ldr	r3, [pc, #12]	; (8011798 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801178c:	4618      	mov	r0, r3
 801178e:	370c      	adds	r7, #12
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr
 8011798:	200000f8 	.word	0x200000f8

0801179c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801179c:	b480      	push	{r7}
 801179e:	b083      	sub	sp, #12
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2243      	movs	r2, #67	; 0x43
 80117a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80117aa:	4b03      	ldr	r3, [pc, #12]	; (80117b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr
 80117b8:	20000180 	.word	0x20000180

080117bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80117bc:	b480      	push	{r7}
 80117be:	b083      	sub	sp, #12
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	220a      	movs	r2, #10
 80117c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80117ca:	4b03      	ldr	r3, [pc, #12]	; (80117d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	370c      	adds	r7, #12
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr
 80117d8:	200000b4 	.word	0x200000b4

080117dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80117dc:	b480      	push	{r7}
 80117de:	b085      	sub	sp, #20
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80117e6:	2302      	movs	r3, #2
 80117e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d005      	beq.n	80117fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	683a      	ldr	r2, [r7, #0]
 80117f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80117f8:	2300      	movs	r3, #0
 80117fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80117fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80117fe:	4618      	mov	r0, r3
 8011800:	3714      	adds	r7, #20
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr

0801180a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801180a:	b480      	push	{r7}
 801180c:	b087      	sub	sp, #28
 801180e:	af00      	add	r7, sp, #0
 8011810:	60f8      	str	r0, [r7, #12]
 8011812:	60b9      	str	r1, [r7, #8]
 8011814:	4613      	mov	r3, r2
 8011816:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801181e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	68ba      	ldr	r2, [r7, #8]
 8011824:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011828:	88fa      	ldrh	r2, [r7, #6]
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8011830:	2300      	movs	r3, #0
}
 8011832:	4618      	mov	r0, r3
 8011834:	371c      	adds	r7, #28
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr

0801183e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801183e:	b480      	push	{r7}
 8011840:	b085      	sub	sp, #20
 8011842:	af00      	add	r7, sp, #0
 8011844:	6078      	str	r0, [r7, #4]
 8011846:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801184e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	683a      	ldr	r2, [r7, #0]
 8011854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8011858:	2300      	movs	r3, #0
}
 801185a:	4618      	mov	r0, r3
 801185c:	3714      	adds	r7, #20
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr

08011866 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011866:	b580      	push	{r7, lr}
 8011868:	b084      	sub	sp, #16
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011874:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801187c:	2b00      	cmp	r3, #0
 801187e:	d017      	beq.n	80118b0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	7c1b      	ldrb	r3, [r3, #16]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d109      	bne.n	801189c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801188e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011892:	2101      	movs	r1, #1
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f001 fcce 	bl	8013236 <USBD_LL_PrepareReceive>
 801189a:	e007      	b.n	80118ac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80118a2:	2340      	movs	r3, #64	; 0x40
 80118a4:	2101      	movs	r1, #1
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f001 fcc5 	bl	8013236 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80118ac:	2300      	movs	r3, #0
 80118ae:	e000      	b.n	80118b2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80118b0:	2302      	movs	r3, #2
  }
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3710      	adds	r7, #16
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}

080118ba <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80118ba:	b580      	push	{r7, lr}
 80118bc:	b084      	sub	sp, #16
 80118be:	af00      	add	r7, sp, #0
 80118c0:	60f8      	str	r0, [r7, #12]
 80118c2:	60b9      	str	r1, [r7, #8]
 80118c4:	4613      	mov	r3, r2
 80118c6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80118ce:	2302      	movs	r3, #2
 80118d0:	e01a      	b.n	8011908 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d003      	beq.n	80118e4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2200      	movs	r2, #0
 80118e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d003      	beq.n	80118f2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	68ba      	ldr	r2, [r7, #8]
 80118ee:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	2201      	movs	r2, #1
 80118f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	79fa      	ldrb	r2, [r7, #7]
 80118fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8011900:	68f8      	ldr	r0, [r7, #12]
 8011902:	f001 fb31 	bl	8012f68 <USBD_LL_Init>

  return USBD_OK;
 8011906:	2300      	movs	r3, #0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3710      	adds	r7, #16
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011910:	b480      	push	{r7}
 8011912:	b085      	sub	sp, #20
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801191a:	2300      	movs	r3, #0
 801191c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d006      	beq.n	8011932 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	683a      	ldr	r2, [r7, #0]
 8011928:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 801192c:	2300      	movs	r3, #0
 801192e:	73fb      	strb	r3, [r7, #15]
 8011930:	e001      	b.n	8011936 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8011932:	2302      	movs	r3, #2
 8011934:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011936:	7bfb      	ldrb	r3, [r7, #15]
}
 8011938:	4618      	mov	r0, r3
 801193a:	3714      	adds	r7, #20
 801193c:	46bd      	mov	sp, r7
 801193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011942:	4770      	bx	lr

08011944 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f001 fb65 	bl	801301c <USBD_LL_Start>

  return USBD_OK;
 8011952:	2300      	movs	r3, #0
}
 8011954:	4618      	mov	r0, r3
 8011956:	3708      	adds	r7, #8
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801195c:	b480      	push	{r7}
 801195e:	b083      	sub	sp, #12
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011964:	2300      	movs	r3, #0
}
 8011966:	4618      	mov	r0, r3
 8011968:	370c      	adds	r7, #12
 801196a:	46bd      	mov	sp, r7
 801196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011970:	4770      	bx	lr

08011972 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011972:	b580      	push	{r7, lr}
 8011974:	b084      	sub	sp, #16
 8011976:	af00      	add	r7, sp, #0
 8011978:	6078      	str	r0, [r7, #4]
 801197a:	460b      	mov	r3, r1
 801197c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801197e:	2302      	movs	r3, #2
 8011980:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011988:	2b00      	cmp	r3, #0
 801198a:	d00c      	beq.n	80119a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	78fa      	ldrb	r2, [r7, #3]
 8011996:	4611      	mov	r1, r2
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	4798      	blx	r3
 801199c:	4603      	mov	r3, r0
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d101      	bne.n	80119a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80119a2:	2300      	movs	r3, #0
 80119a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80119a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80119a8:	4618      	mov	r0, r3
 80119aa:	3710      	adds	r7, #16
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	460b      	mov	r3, r1
 80119ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	78fa      	ldrb	r2, [r7, #3]
 80119c6:	4611      	mov	r1, r2
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	4798      	blx	r3

  return USBD_OK;
 80119cc:	2300      	movs	r3, #0
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b082      	sub	sp, #8
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
 80119de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80119e6:	6839      	ldr	r1, [r7, #0]
 80119e8:	4618      	mov	r0, r3
 80119ea:	f000 feda 	bl	80127a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2201      	movs	r2, #1
 80119f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80119fc:	461a      	mov	r2, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011a0a:	f003 031f 	and.w	r3, r3, #31
 8011a0e:	2b02      	cmp	r3, #2
 8011a10:	d016      	beq.n	8011a40 <USBD_LL_SetupStage+0x6a>
 8011a12:	2b02      	cmp	r3, #2
 8011a14:	d81c      	bhi.n	8011a50 <USBD_LL_SetupStage+0x7a>
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d002      	beq.n	8011a20 <USBD_LL_SetupStage+0x4a>
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d008      	beq.n	8011a30 <USBD_LL_SetupStage+0x5a>
 8011a1e:	e017      	b.n	8011a50 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011a26:	4619      	mov	r1, r3
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f000 f9cd 	bl	8011dc8 <USBD_StdDevReq>
      break;
 8011a2e:	e01a      	b.n	8011a66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011a36:	4619      	mov	r1, r3
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 fa2f 	bl	8011e9c <USBD_StdItfReq>
      break;
 8011a3e:	e012      	b.n	8011a66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011a46:	4619      	mov	r1, r3
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f000 fa6f 	bl	8011f2c <USBD_StdEPReq>
      break;
 8011a4e:	e00a      	b.n	8011a66 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011a56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f001 fb3c 	bl	80130dc <USBD_LL_StallEP>
      break;
 8011a64:	bf00      	nop
  }

  return USBD_OK;
 8011a66:	2300      	movs	r3, #0
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3708      	adds	r7, #8
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}

08011a70 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b086      	sub	sp, #24
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	460b      	mov	r3, r1
 8011a7a:	607a      	str	r2, [r7, #4]
 8011a7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011a7e:	7afb      	ldrb	r3, [r7, #11]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d14b      	bne.n	8011b1c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011a8a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011a92:	2b03      	cmp	r3, #3
 8011a94:	d134      	bne.n	8011b00 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	68da      	ldr	r2, [r3, #12]
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	691b      	ldr	r3, [r3, #16]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d919      	bls.n	8011ad6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8011aa2:	697b      	ldr	r3, [r7, #20]
 8011aa4:	68da      	ldr	r2, [r3, #12]
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	691b      	ldr	r3, [r3, #16]
 8011aaa:	1ad2      	subs	r2, r2, r3
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	68da      	ldr	r2, [r3, #12]
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d203      	bcs.n	8011ac4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	e002      	b.n	8011aca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	461a      	mov	r2, r3
 8011acc:	6879      	ldr	r1, [r7, #4]
 8011ace:	68f8      	ldr	r0, [r7, #12]
 8011ad0:	f000 ff5b 	bl	801298a <USBD_CtlContinueRx>
 8011ad4:	e038      	b.n	8011b48 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011adc:	691b      	ldr	r3, [r3, #16]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d00a      	beq.n	8011af8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011ae8:	2b03      	cmp	r3, #3
 8011aea:	d105      	bne.n	8011af8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011af2:	691b      	ldr	r3, [r3, #16]
 8011af4:	68f8      	ldr	r0, [r7, #12]
 8011af6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8011af8:	68f8      	ldr	r0, [r7, #12]
 8011afa:	f000 ff58 	bl	80129ae <USBD_CtlSendStatus>
 8011afe:	e023      	b.n	8011b48 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011b06:	2b05      	cmp	r3, #5
 8011b08:	d11e      	bne.n	8011b48 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8011b12:	2100      	movs	r1, #0
 8011b14:	68f8      	ldr	r0, [r7, #12]
 8011b16:	f001 fae1 	bl	80130dc <USBD_LL_StallEP>
 8011b1a:	e015      	b.n	8011b48 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b22:	699b      	ldr	r3, [r3, #24]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d00d      	beq.n	8011b44 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011b2e:	2b03      	cmp	r3, #3
 8011b30:	d108      	bne.n	8011b44 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b38:	699b      	ldr	r3, [r3, #24]
 8011b3a:	7afa      	ldrb	r2, [r7, #11]
 8011b3c:	4611      	mov	r1, r2
 8011b3e:	68f8      	ldr	r0, [r7, #12]
 8011b40:	4798      	blx	r3
 8011b42:	e001      	b.n	8011b48 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011b44:	2302      	movs	r3, #2
 8011b46:	e000      	b.n	8011b4a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8011b48:	2300      	movs	r3, #0
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3718      	adds	r7, #24
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}

08011b52 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b086      	sub	sp, #24
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	60f8      	str	r0, [r7, #12]
 8011b5a:	460b      	mov	r3, r1
 8011b5c:	607a      	str	r2, [r7, #4]
 8011b5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011b60:	7afb      	ldrb	r3, [r7, #11]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d17f      	bne.n	8011c66 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	3314      	adds	r3, #20
 8011b6a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011b72:	2b02      	cmp	r3, #2
 8011b74:	d15c      	bne.n	8011c30 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	68da      	ldr	r2, [r3, #12]
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	691b      	ldr	r3, [r3, #16]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d915      	bls.n	8011bae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	68da      	ldr	r2, [r3, #12]
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	691b      	ldr	r3, [r3, #16]
 8011b8a:	1ad2      	subs	r2, r2, r3
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	68db      	ldr	r3, [r3, #12]
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	461a      	mov	r2, r3
 8011b98:	6879      	ldr	r1, [r7, #4]
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f000 fec5 	bl	801292a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	68f8      	ldr	r0, [r7, #12]
 8011ba8:	f001 fb45 	bl	8013236 <USBD_LL_PrepareReceive>
 8011bac:	e04e      	b.n	8011c4c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	689b      	ldr	r3, [r3, #8]
 8011bb2:	697a      	ldr	r2, [r7, #20]
 8011bb4:	6912      	ldr	r2, [r2, #16]
 8011bb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011bba:	fb01 f202 	mul.w	r2, r1, r2
 8011bbe:	1a9b      	subs	r3, r3, r2
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d11c      	bne.n	8011bfe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	689a      	ldr	r2, [r3, #8]
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d316      	bcc.n	8011bfe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	689a      	ldr	r2, [r3, #8]
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d20f      	bcs.n	8011bfe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011bde:	2200      	movs	r2, #0
 8011be0:	2100      	movs	r1, #0
 8011be2:	68f8      	ldr	r0, [r7, #12]
 8011be4:	f000 fea1 	bl	801292a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2200      	movs	r2, #0
 8011bec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	2100      	movs	r1, #0
 8011bf6:	68f8      	ldr	r0, [r7, #12]
 8011bf8:	f001 fb1d 	bl	8013236 <USBD_LL_PrepareReceive>
 8011bfc:	e026      	b.n	8011c4c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d00a      	beq.n	8011c20 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011c10:	2b03      	cmp	r3, #3
 8011c12:	d105      	bne.n	8011c20 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c1a:	68db      	ldr	r3, [r3, #12]
 8011c1c:	68f8      	ldr	r0, [r7, #12]
 8011c1e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8011c20:	2180      	movs	r1, #128	; 0x80
 8011c22:	68f8      	ldr	r0, [r7, #12]
 8011c24:	f001 fa5a 	bl	80130dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8011c28:	68f8      	ldr	r0, [r7, #12]
 8011c2a:	f000 fed3 	bl	80129d4 <USBD_CtlReceiveStatus>
 8011c2e:	e00d      	b.n	8011c4c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011c36:	2b04      	cmp	r3, #4
 8011c38:	d004      	beq.n	8011c44 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d103      	bne.n	8011c4c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8011c44:	2180      	movs	r1, #128	; 0x80
 8011c46:	68f8      	ldr	r0, [r7, #12]
 8011c48:	f001 fa48 	bl	80130dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011c52:	2b01      	cmp	r3, #1
 8011c54:	d11d      	bne.n	8011c92 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8011c56:	68f8      	ldr	r0, [r7, #12]
 8011c58:	f7ff fe80 	bl	801195c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011c64:	e015      	b.n	8011c92 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c6c:	695b      	ldr	r3, [r3, #20]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00d      	beq.n	8011c8e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011c78:	2b03      	cmp	r3, #3
 8011c7a:	d108      	bne.n	8011c8e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c82:	695b      	ldr	r3, [r3, #20]
 8011c84:	7afa      	ldrb	r2, [r7, #11]
 8011c86:	4611      	mov	r1, r2
 8011c88:	68f8      	ldr	r0, [r7, #12]
 8011c8a:	4798      	blx	r3
 8011c8c:	e001      	b.n	8011c92 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011c8e:	2302      	movs	r3, #2
 8011c90:	e000      	b.n	8011c94 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8011c92:	2300      	movs	r3, #0
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3718      	adds	r7, #24
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ca4:	2340      	movs	r3, #64	; 0x40
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	2100      	movs	r1, #0
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f001 f9d1 	bl	8013052 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2201      	movs	r2, #1
 8011cb4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2240      	movs	r2, #64	; 0x40
 8011cbc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011cc0:	2340      	movs	r3, #64	; 0x40
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	2180      	movs	r1, #128	; 0x80
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f001 f9c3 	bl	8013052 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2201      	movs	r2, #1
 8011cd0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2240      	movs	r2, #64	; 0x40
 8011cd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2201      	movs	r2, #1
 8011cdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2200      	movs	r2, #0
 8011cec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d009      	beq.n	8011d14 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	6852      	ldr	r2, [r2, #4]
 8011d0c:	b2d2      	uxtb	r2, r2
 8011d0e:	4611      	mov	r1, r2
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	4798      	blx	r3
  }

  return USBD_OK;
 8011d14:	2300      	movs	r3, #0
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3708      	adds	r7, #8
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011d1e:	b480      	push	{r7}
 8011d20:	b083      	sub	sp, #12
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	6078      	str	r0, [r7, #4]
 8011d26:	460b      	mov	r3, r1
 8011d28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	78fa      	ldrb	r2, [r7, #3]
 8011d2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr

08011d3e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011d3e:	b480      	push	{r7}
 8011d40:	b083      	sub	sp, #12
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2204      	movs	r2, #4
 8011d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011d5a:	2300      	movs	r3, #0
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	370c      	adds	r7, #12
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr

08011d68 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d76:	2b04      	cmp	r3, #4
 8011d78:	d105      	bne.n	8011d86 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011d86:	2300      	movs	r3, #0
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	370c      	adds	r7, #12
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr

08011d94 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b082      	sub	sp, #8
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011da2:	2b03      	cmp	r3, #3
 8011da4:	d10b      	bne.n	8011dbe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dac:	69db      	ldr	r3, [r3, #28]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d005      	beq.n	8011dbe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011db8:	69db      	ldr	r3, [r3, #28]
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011dbe:	2300      	movs	r3, #0
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}

08011dc8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b084      	sub	sp, #16
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011dde:	2b40      	cmp	r3, #64	; 0x40
 8011de0:	d005      	beq.n	8011dee <USBD_StdDevReq+0x26>
 8011de2:	2b40      	cmp	r3, #64	; 0x40
 8011de4:	d84f      	bhi.n	8011e86 <USBD_StdDevReq+0xbe>
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d009      	beq.n	8011dfe <USBD_StdDevReq+0x36>
 8011dea:	2b20      	cmp	r3, #32
 8011dec:	d14b      	bne.n	8011e86 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011df4:	689b      	ldr	r3, [r3, #8]
 8011df6:	6839      	ldr	r1, [r7, #0]
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	4798      	blx	r3
      break;
 8011dfc:	e048      	b.n	8011e90 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	785b      	ldrb	r3, [r3, #1]
 8011e02:	2b09      	cmp	r3, #9
 8011e04:	d839      	bhi.n	8011e7a <USBD_StdDevReq+0xb2>
 8011e06:	a201      	add	r2, pc, #4	; (adr r2, 8011e0c <USBD_StdDevReq+0x44>)
 8011e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e0c:	08011e5d 	.word	0x08011e5d
 8011e10:	08011e71 	.word	0x08011e71
 8011e14:	08011e7b 	.word	0x08011e7b
 8011e18:	08011e67 	.word	0x08011e67
 8011e1c:	08011e7b 	.word	0x08011e7b
 8011e20:	08011e3f 	.word	0x08011e3f
 8011e24:	08011e35 	.word	0x08011e35
 8011e28:	08011e7b 	.word	0x08011e7b
 8011e2c:	08011e53 	.word	0x08011e53
 8011e30:	08011e49 	.word	0x08011e49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011e34:	6839      	ldr	r1, [r7, #0]
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f000 f9dc 	bl	80121f4 <USBD_GetDescriptor>
          break;
 8011e3c:	e022      	b.n	8011e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011e3e:	6839      	ldr	r1, [r7, #0]
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f000 fb3f 	bl	80124c4 <USBD_SetAddress>
          break;
 8011e46:	e01d      	b.n	8011e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8011e48:	6839      	ldr	r1, [r7, #0]
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f000 fb7e 	bl	801254c <USBD_SetConfig>
          break;
 8011e50:	e018      	b.n	8011e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011e52:	6839      	ldr	r1, [r7, #0]
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f000 fc07 	bl	8012668 <USBD_GetConfig>
          break;
 8011e5a:	e013      	b.n	8011e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011e5c:	6839      	ldr	r1, [r7, #0]
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 fc37 	bl	80126d2 <USBD_GetStatus>
          break;
 8011e64:	e00e      	b.n	8011e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011e66:	6839      	ldr	r1, [r7, #0]
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f000 fc65 	bl	8012738 <USBD_SetFeature>
          break;
 8011e6e:	e009      	b.n	8011e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011e70:	6839      	ldr	r1, [r7, #0]
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f000 fc74 	bl	8012760 <USBD_ClrFeature>
          break;
 8011e78:	e004      	b.n	8011e84 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8011e7a:	6839      	ldr	r1, [r7, #0]
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f000 fccd 	bl	801281c <USBD_CtlError>
          break;
 8011e82:	bf00      	nop
      }
      break;
 8011e84:	e004      	b.n	8011e90 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8011e86:	6839      	ldr	r1, [r7, #0]
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f000 fcc7 	bl	801281c <USBD_CtlError>
      break;
 8011e8e:	bf00      	nop
  }

  return ret;
 8011e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3710      	adds	r7, #16
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	bf00      	nop

08011e9c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b084      	sub	sp, #16
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011eb2:	2b40      	cmp	r3, #64	; 0x40
 8011eb4:	d005      	beq.n	8011ec2 <USBD_StdItfReq+0x26>
 8011eb6:	2b40      	cmp	r3, #64	; 0x40
 8011eb8:	d82e      	bhi.n	8011f18 <USBD_StdItfReq+0x7c>
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d001      	beq.n	8011ec2 <USBD_StdItfReq+0x26>
 8011ebe:	2b20      	cmp	r3, #32
 8011ec0:	d12a      	bne.n	8011f18 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ec8:	3b01      	subs	r3, #1
 8011eca:	2b02      	cmp	r3, #2
 8011ecc:	d81d      	bhi.n	8011f0a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	889b      	ldrh	r3, [r3, #4]
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d813      	bhi.n	8011f00 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ede:	689b      	ldr	r3, [r3, #8]
 8011ee0:	6839      	ldr	r1, [r7, #0]
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	4798      	blx	r3
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	88db      	ldrh	r3, [r3, #6]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d110      	bne.n	8011f14 <USBD_StdItfReq+0x78>
 8011ef2:	7bfb      	ldrb	r3, [r7, #15]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d10d      	bne.n	8011f14 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f000 fd58 	bl	80129ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011efe:	e009      	b.n	8011f14 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8011f00:	6839      	ldr	r1, [r7, #0]
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	f000 fc8a 	bl	801281c <USBD_CtlError>
          break;
 8011f08:	e004      	b.n	8011f14 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8011f0a:	6839      	ldr	r1, [r7, #0]
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f000 fc85 	bl	801281c <USBD_CtlError>
          break;
 8011f12:	e000      	b.n	8011f16 <USBD_StdItfReq+0x7a>
          break;
 8011f14:	bf00      	nop
      }
      break;
 8011f16:	e004      	b.n	8011f22 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8011f18:	6839      	ldr	r1, [r7, #0]
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f000 fc7e 	bl	801281c <USBD_CtlError>
      break;
 8011f20:	bf00      	nop
  }

  return USBD_OK;
 8011f22:	2300      	movs	r3, #0
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3710      	adds	r7, #16
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}

08011f2c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011f36:	2300      	movs	r3, #0
 8011f38:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	889b      	ldrh	r3, [r3, #4]
 8011f3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011f48:	2b40      	cmp	r3, #64	; 0x40
 8011f4a:	d007      	beq.n	8011f5c <USBD_StdEPReq+0x30>
 8011f4c:	2b40      	cmp	r3, #64	; 0x40
 8011f4e:	f200 8146 	bhi.w	80121de <USBD_StdEPReq+0x2b2>
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d00a      	beq.n	8011f6c <USBD_StdEPReq+0x40>
 8011f56:	2b20      	cmp	r3, #32
 8011f58:	f040 8141 	bne.w	80121de <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f62:	689b      	ldr	r3, [r3, #8]
 8011f64:	6839      	ldr	r1, [r7, #0]
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	4798      	blx	r3
      break;
 8011f6a:	e13d      	b.n	80121e8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011f74:	2b20      	cmp	r3, #32
 8011f76:	d10a      	bne.n	8011f8e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f7e:	689b      	ldr	r3, [r3, #8]
 8011f80:	6839      	ldr	r1, [r7, #0]
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	4798      	blx	r3
 8011f86:	4603      	mov	r3, r0
 8011f88:	73fb      	strb	r3, [r7, #15]

        return ret;
 8011f8a:	7bfb      	ldrb	r3, [r7, #15]
 8011f8c:	e12d      	b.n	80121ea <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	785b      	ldrb	r3, [r3, #1]
 8011f92:	2b03      	cmp	r3, #3
 8011f94:	d007      	beq.n	8011fa6 <USBD_StdEPReq+0x7a>
 8011f96:	2b03      	cmp	r3, #3
 8011f98:	f300 811b 	bgt.w	80121d2 <USBD_StdEPReq+0x2a6>
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d072      	beq.n	8012086 <USBD_StdEPReq+0x15a>
 8011fa0:	2b01      	cmp	r3, #1
 8011fa2:	d03a      	beq.n	801201a <USBD_StdEPReq+0xee>
 8011fa4:	e115      	b.n	80121d2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fac:	2b02      	cmp	r3, #2
 8011fae:	d002      	beq.n	8011fb6 <USBD_StdEPReq+0x8a>
 8011fb0:	2b03      	cmp	r3, #3
 8011fb2:	d015      	beq.n	8011fe0 <USBD_StdEPReq+0xb4>
 8011fb4:	e02b      	b.n	801200e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011fb6:	7bbb      	ldrb	r3, [r7, #14]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d00c      	beq.n	8011fd6 <USBD_StdEPReq+0xaa>
 8011fbc:	7bbb      	ldrb	r3, [r7, #14]
 8011fbe:	2b80      	cmp	r3, #128	; 0x80
 8011fc0:	d009      	beq.n	8011fd6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8011fc2:	7bbb      	ldrb	r3, [r7, #14]
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f001 f888 	bl	80130dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8011fcc:	2180      	movs	r1, #128	; 0x80
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f001 f884 	bl	80130dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011fd4:	e020      	b.n	8012018 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8011fd6:	6839      	ldr	r1, [r7, #0]
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f000 fc1f 	bl	801281c <USBD_CtlError>
              break;
 8011fde:	e01b      	b.n	8012018 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	885b      	ldrh	r3, [r3, #2]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d10e      	bne.n	8012006 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8011fe8:	7bbb      	ldrb	r3, [r7, #14]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d00b      	beq.n	8012006 <USBD_StdEPReq+0xda>
 8011fee:	7bbb      	ldrb	r3, [r7, #14]
 8011ff0:	2b80      	cmp	r3, #128	; 0x80
 8011ff2:	d008      	beq.n	8012006 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	88db      	ldrh	r3, [r3, #6]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d104      	bne.n	8012006 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8011ffc:	7bbb      	ldrb	r3, [r7, #14]
 8011ffe:	4619      	mov	r1, r3
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f001 f86b 	bl	80130dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 fcd1 	bl	80129ae <USBD_CtlSendStatus>

              break;
 801200c:	e004      	b.n	8012018 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 801200e:	6839      	ldr	r1, [r7, #0]
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f000 fc03 	bl	801281c <USBD_CtlError>
              break;
 8012016:	bf00      	nop
          }
          break;
 8012018:	e0e0      	b.n	80121dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012020:	2b02      	cmp	r3, #2
 8012022:	d002      	beq.n	801202a <USBD_StdEPReq+0xfe>
 8012024:	2b03      	cmp	r3, #3
 8012026:	d015      	beq.n	8012054 <USBD_StdEPReq+0x128>
 8012028:	e026      	b.n	8012078 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801202a:	7bbb      	ldrb	r3, [r7, #14]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d00c      	beq.n	801204a <USBD_StdEPReq+0x11e>
 8012030:	7bbb      	ldrb	r3, [r7, #14]
 8012032:	2b80      	cmp	r3, #128	; 0x80
 8012034:	d009      	beq.n	801204a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012036:	7bbb      	ldrb	r3, [r7, #14]
 8012038:	4619      	mov	r1, r3
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f001 f84e 	bl	80130dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8012040:	2180      	movs	r1, #128	; 0x80
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f001 f84a 	bl	80130dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012048:	e01c      	b.n	8012084 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 801204a:	6839      	ldr	r1, [r7, #0]
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f000 fbe5 	bl	801281c <USBD_CtlError>
              break;
 8012052:	e017      	b.n	8012084 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	885b      	ldrh	r3, [r3, #2]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d112      	bne.n	8012082 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801205c:	7bbb      	ldrb	r3, [r7, #14]
 801205e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012062:	2b00      	cmp	r3, #0
 8012064:	d004      	beq.n	8012070 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8012066:	7bbb      	ldrb	r3, [r7, #14]
 8012068:	4619      	mov	r1, r3
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f001 f855 	bl	801311a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 fc9c 	bl	80129ae <USBD_CtlSendStatus>
              }
              break;
 8012076:	e004      	b.n	8012082 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8012078:	6839      	ldr	r1, [r7, #0]
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 fbce 	bl	801281c <USBD_CtlError>
              break;
 8012080:	e000      	b.n	8012084 <USBD_StdEPReq+0x158>
              break;
 8012082:	bf00      	nop
          }
          break;
 8012084:	e0aa      	b.n	80121dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801208c:	2b02      	cmp	r3, #2
 801208e:	d002      	beq.n	8012096 <USBD_StdEPReq+0x16a>
 8012090:	2b03      	cmp	r3, #3
 8012092:	d032      	beq.n	80120fa <USBD_StdEPReq+0x1ce>
 8012094:	e097      	b.n	80121c6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012096:	7bbb      	ldrb	r3, [r7, #14]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d007      	beq.n	80120ac <USBD_StdEPReq+0x180>
 801209c:	7bbb      	ldrb	r3, [r7, #14]
 801209e:	2b80      	cmp	r3, #128	; 0x80
 80120a0:	d004      	beq.n	80120ac <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80120a2:	6839      	ldr	r1, [r7, #0]
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f000 fbb9 	bl	801281c <USBD_CtlError>
                break;
 80120aa:	e091      	b.n	80121d0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80120ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	da0b      	bge.n	80120cc <USBD_StdEPReq+0x1a0>
 80120b4:	7bbb      	ldrb	r3, [r7, #14]
 80120b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80120ba:	4613      	mov	r3, r2
 80120bc:	009b      	lsls	r3, r3, #2
 80120be:	4413      	add	r3, r2
 80120c0:	009b      	lsls	r3, r3, #2
 80120c2:	3310      	adds	r3, #16
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	4413      	add	r3, r2
 80120c8:	3304      	adds	r3, #4
 80120ca:	e00b      	b.n	80120e4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80120cc:	7bbb      	ldrb	r3, [r7, #14]
 80120ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80120d2:	4613      	mov	r3, r2
 80120d4:	009b      	lsls	r3, r3, #2
 80120d6:	4413      	add	r3, r2
 80120d8:	009b      	lsls	r3, r3, #2
 80120da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	4413      	add	r3, r2
 80120e2:	3304      	adds	r3, #4
 80120e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	2200      	movs	r2, #0
 80120ea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	2202      	movs	r2, #2
 80120f0:	4619      	mov	r1, r3
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 fbfd 	bl	80128f2 <USBD_CtlSendData>
              break;
 80120f8:	e06a      	b.n	80121d0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80120fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	da11      	bge.n	8012126 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012102:	7bbb      	ldrb	r3, [r7, #14]
 8012104:	f003 020f 	and.w	r2, r3, #15
 8012108:	6879      	ldr	r1, [r7, #4]
 801210a:	4613      	mov	r3, r2
 801210c:	009b      	lsls	r3, r3, #2
 801210e:	4413      	add	r3, r2
 8012110:	009b      	lsls	r3, r3, #2
 8012112:	440b      	add	r3, r1
 8012114:	3318      	adds	r3, #24
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d117      	bne.n	801214c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 801211c:	6839      	ldr	r1, [r7, #0]
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f000 fb7c 	bl	801281c <USBD_CtlError>
                  break;
 8012124:	e054      	b.n	80121d0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012126:	7bbb      	ldrb	r3, [r7, #14]
 8012128:	f003 020f 	and.w	r2, r3, #15
 801212c:	6879      	ldr	r1, [r7, #4]
 801212e:	4613      	mov	r3, r2
 8012130:	009b      	lsls	r3, r3, #2
 8012132:	4413      	add	r3, r2
 8012134:	009b      	lsls	r3, r3, #2
 8012136:	440b      	add	r3, r1
 8012138:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d104      	bne.n	801214c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8012142:	6839      	ldr	r1, [r7, #0]
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f000 fb69 	bl	801281c <USBD_CtlError>
                  break;
 801214a:	e041      	b.n	80121d0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801214c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012150:	2b00      	cmp	r3, #0
 8012152:	da0b      	bge.n	801216c <USBD_StdEPReq+0x240>
 8012154:	7bbb      	ldrb	r3, [r7, #14]
 8012156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801215a:	4613      	mov	r3, r2
 801215c:	009b      	lsls	r3, r3, #2
 801215e:	4413      	add	r3, r2
 8012160:	009b      	lsls	r3, r3, #2
 8012162:	3310      	adds	r3, #16
 8012164:	687a      	ldr	r2, [r7, #4]
 8012166:	4413      	add	r3, r2
 8012168:	3304      	adds	r3, #4
 801216a:	e00b      	b.n	8012184 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801216c:	7bbb      	ldrb	r3, [r7, #14]
 801216e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012172:	4613      	mov	r3, r2
 8012174:	009b      	lsls	r3, r3, #2
 8012176:	4413      	add	r3, r2
 8012178:	009b      	lsls	r3, r3, #2
 801217a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	4413      	add	r3, r2
 8012182:	3304      	adds	r3, #4
 8012184:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012186:	7bbb      	ldrb	r3, [r7, #14]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d002      	beq.n	8012192 <USBD_StdEPReq+0x266>
 801218c:	7bbb      	ldrb	r3, [r7, #14]
 801218e:	2b80      	cmp	r3, #128	; 0x80
 8012190:	d103      	bne.n	801219a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	2200      	movs	r2, #0
 8012196:	601a      	str	r2, [r3, #0]
 8012198:	e00e      	b.n	80121b8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801219a:	7bbb      	ldrb	r3, [r7, #14]
 801219c:	4619      	mov	r1, r3
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 ffda 	bl	8013158 <USBD_LL_IsStallEP>
 80121a4:	4603      	mov	r3, r0
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d003      	beq.n	80121b2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	2201      	movs	r2, #1
 80121ae:	601a      	str	r2, [r3, #0]
 80121b0:	e002      	b.n	80121b8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	2200      	movs	r2, #0
 80121b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	2202      	movs	r2, #2
 80121bc:	4619      	mov	r1, r3
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f000 fb97 	bl	80128f2 <USBD_CtlSendData>
              break;
 80121c4:	e004      	b.n	80121d0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80121c6:	6839      	ldr	r1, [r7, #0]
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f000 fb27 	bl	801281c <USBD_CtlError>
              break;
 80121ce:	bf00      	nop
          }
          break;
 80121d0:	e004      	b.n	80121dc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80121d2:	6839      	ldr	r1, [r7, #0]
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f000 fb21 	bl	801281c <USBD_CtlError>
          break;
 80121da:	bf00      	nop
      }
      break;
 80121dc:	e004      	b.n	80121e8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80121de:	6839      	ldr	r1, [r7, #0]
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f000 fb1b 	bl	801281c <USBD_CtlError>
      break;
 80121e6:	bf00      	nop
  }

  return ret;
 80121e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3710      	adds	r7, #16
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
	...

080121f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80121fe:	2300      	movs	r3, #0
 8012200:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012202:	2300      	movs	r3, #0
 8012204:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012206:	2300      	movs	r3, #0
 8012208:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	885b      	ldrh	r3, [r3, #2]
 801220e:	0a1b      	lsrs	r3, r3, #8
 8012210:	b29b      	uxth	r3, r3
 8012212:	3b01      	subs	r3, #1
 8012214:	2b06      	cmp	r3, #6
 8012216:	f200 8128 	bhi.w	801246a <USBD_GetDescriptor+0x276>
 801221a:	a201      	add	r2, pc, #4	; (adr r2, 8012220 <USBD_GetDescriptor+0x2c>)
 801221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012220:	0801223d 	.word	0x0801223d
 8012224:	08012255 	.word	0x08012255
 8012228:	08012295 	.word	0x08012295
 801222c:	0801246b 	.word	0x0801246b
 8012230:	0801246b 	.word	0x0801246b
 8012234:	0801240b 	.word	0x0801240b
 8012238:	08012437 	.word	0x08012437
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	687a      	ldr	r2, [r7, #4]
 8012246:	7c12      	ldrb	r2, [r2, #16]
 8012248:	f107 0108 	add.w	r1, r7, #8
 801224c:	4610      	mov	r0, r2
 801224e:	4798      	blx	r3
 8012250:	60f8      	str	r0, [r7, #12]
      break;
 8012252:	e112      	b.n	801247a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	7c1b      	ldrb	r3, [r3, #16]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d10d      	bne.n	8012278 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012264:	f107 0208 	add.w	r2, r7, #8
 8012268:	4610      	mov	r0, r2
 801226a:	4798      	blx	r3
 801226c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	3301      	adds	r3, #1
 8012272:	2202      	movs	r2, #2
 8012274:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012276:	e100      	b.n	801247a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012280:	f107 0208 	add.w	r2, r7, #8
 8012284:	4610      	mov	r0, r2
 8012286:	4798      	blx	r3
 8012288:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	3301      	adds	r3, #1
 801228e:	2202      	movs	r2, #2
 8012290:	701a      	strb	r2, [r3, #0]
      break;
 8012292:	e0f2      	b.n	801247a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	885b      	ldrh	r3, [r3, #2]
 8012298:	b2db      	uxtb	r3, r3
 801229a:	2b05      	cmp	r3, #5
 801229c:	f200 80ac 	bhi.w	80123f8 <USBD_GetDescriptor+0x204>
 80122a0:	a201      	add	r2, pc, #4	; (adr r2, 80122a8 <USBD_GetDescriptor+0xb4>)
 80122a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122a6:	bf00      	nop
 80122a8:	080122c1 	.word	0x080122c1
 80122ac:	080122f5 	.word	0x080122f5
 80122b0:	08012329 	.word	0x08012329
 80122b4:	0801235d 	.word	0x0801235d
 80122b8:	08012391 	.word	0x08012391
 80122bc:	080123c5 	.word	0x080123c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d00b      	beq.n	80122e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	687a      	ldr	r2, [r7, #4]
 80122d6:	7c12      	ldrb	r2, [r2, #16]
 80122d8:	f107 0108 	add.w	r1, r7, #8
 80122dc:	4610      	mov	r0, r2
 80122de:	4798      	blx	r3
 80122e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122e2:	e091      	b.n	8012408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80122e4:	6839      	ldr	r1, [r7, #0]
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 fa98 	bl	801281c <USBD_CtlError>
            err++;
 80122ec:	7afb      	ldrb	r3, [r7, #11]
 80122ee:	3301      	adds	r3, #1
 80122f0:	72fb      	strb	r3, [r7, #11]
          break;
 80122f2:	e089      	b.n	8012408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80122fa:	689b      	ldr	r3, [r3, #8]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d00b      	beq.n	8012318 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012306:	689b      	ldr	r3, [r3, #8]
 8012308:	687a      	ldr	r2, [r7, #4]
 801230a:	7c12      	ldrb	r2, [r2, #16]
 801230c:	f107 0108 	add.w	r1, r7, #8
 8012310:	4610      	mov	r0, r2
 8012312:	4798      	blx	r3
 8012314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012316:	e077      	b.n	8012408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012318:	6839      	ldr	r1, [r7, #0]
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f000 fa7e 	bl	801281c <USBD_CtlError>
            err++;
 8012320:	7afb      	ldrb	r3, [r7, #11]
 8012322:	3301      	adds	r3, #1
 8012324:	72fb      	strb	r3, [r7, #11]
          break;
 8012326:	e06f      	b.n	8012408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801232e:	68db      	ldr	r3, [r3, #12]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d00b      	beq.n	801234c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801233a:	68db      	ldr	r3, [r3, #12]
 801233c:	687a      	ldr	r2, [r7, #4]
 801233e:	7c12      	ldrb	r2, [r2, #16]
 8012340:	f107 0108 	add.w	r1, r7, #8
 8012344:	4610      	mov	r0, r2
 8012346:	4798      	blx	r3
 8012348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801234a:	e05d      	b.n	8012408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801234c:	6839      	ldr	r1, [r7, #0]
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f000 fa64 	bl	801281c <USBD_CtlError>
            err++;
 8012354:	7afb      	ldrb	r3, [r7, #11]
 8012356:	3301      	adds	r3, #1
 8012358:	72fb      	strb	r3, [r7, #11]
          break;
 801235a:	e055      	b.n	8012408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012362:	691b      	ldr	r3, [r3, #16]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d00b      	beq.n	8012380 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801236e:	691b      	ldr	r3, [r3, #16]
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	7c12      	ldrb	r2, [r2, #16]
 8012374:	f107 0108 	add.w	r1, r7, #8
 8012378:	4610      	mov	r0, r2
 801237a:	4798      	blx	r3
 801237c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801237e:	e043      	b.n	8012408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012380:	6839      	ldr	r1, [r7, #0]
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f000 fa4a 	bl	801281c <USBD_CtlError>
            err++;
 8012388:	7afb      	ldrb	r3, [r7, #11]
 801238a:	3301      	adds	r3, #1
 801238c:	72fb      	strb	r3, [r7, #11]
          break;
 801238e:	e03b      	b.n	8012408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012396:	695b      	ldr	r3, [r3, #20]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d00b      	beq.n	80123b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80123a2:	695b      	ldr	r3, [r3, #20]
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	7c12      	ldrb	r2, [r2, #16]
 80123a8:	f107 0108 	add.w	r1, r7, #8
 80123ac:	4610      	mov	r0, r2
 80123ae:	4798      	blx	r3
 80123b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80123b2:	e029      	b.n	8012408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80123b4:	6839      	ldr	r1, [r7, #0]
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 fa30 	bl	801281c <USBD_CtlError>
            err++;
 80123bc:	7afb      	ldrb	r3, [r7, #11]
 80123be:	3301      	adds	r3, #1
 80123c0:	72fb      	strb	r3, [r7, #11]
          break;
 80123c2:	e021      	b.n	8012408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80123ca:	699b      	ldr	r3, [r3, #24]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d00b      	beq.n	80123e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80123d6:	699b      	ldr	r3, [r3, #24]
 80123d8:	687a      	ldr	r2, [r7, #4]
 80123da:	7c12      	ldrb	r2, [r2, #16]
 80123dc:	f107 0108 	add.w	r1, r7, #8
 80123e0:	4610      	mov	r0, r2
 80123e2:	4798      	blx	r3
 80123e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80123e6:	e00f      	b.n	8012408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80123e8:	6839      	ldr	r1, [r7, #0]
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f000 fa16 	bl	801281c <USBD_CtlError>
            err++;
 80123f0:	7afb      	ldrb	r3, [r7, #11]
 80123f2:	3301      	adds	r3, #1
 80123f4:	72fb      	strb	r3, [r7, #11]
          break;
 80123f6:	e007      	b.n	8012408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80123f8:	6839      	ldr	r1, [r7, #0]
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f000 fa0e 	bl	801281c <USBD_CtlError>
          err++;
 8012400:	7afb      	ldrb	r3, [r7, #11]
 8012402:	3301      	adds	r3, #1
 8012404:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8012406:	e038      	b.n	801247a <USBD_GetDescriptor+0x286>
 8012408:	e037      	b.n	801247a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	7c1b      	ldrb	r3, [r3, #16]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d109      	bne.n	8012426 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801241a:	f107 0208 	add.w	r2, r7, #8
 801241e:	4610      	mov	r0, r2
 8012420:	4798      	blx	r3
 8012422:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012424:	e029      	b.n	801247a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012426:	6839      	ldr	r1, [r7, #0]
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f000 f9f7 	bl	801281c <USBD_CtlError>
        err++;
 801242e:	7afb      	ldrb	r3, [r7, #11]
 8012430:	3301      	adds	r3, #1
 8012432:	72fb      	strb	r3, [r7, #11]
      break;
 8012434:	e021      	b.n	801247a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	7c1b      	ldrb	r3, [r3, #16]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d10d      	bne.n	801245a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012446:	f107 0208 	add.w	r2, r7, #8
 801244a:	4610      	mov	r0, r2
 801244c:	4798      	blx	r3
 801244e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	3301      	adds	r3, #1
 8012454:	2207      	movs	r2, #7
 8012456:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012458:	e00f      	b.n	801247a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801245a:	6839      	ldr	r1, [r7, #0]
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f000 f9dd 	bl	801281c <USBD_CtlError>
        err++;
 8012462:	7afb      	ldrb	r3, [r7, #11]
 8012464:	3301      	adds	r3, #1
 8012466:	72fb      	strb	r3, [r7, #11]
      break;
 8012468:	e007      	b.n	801247a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801246a:	6839      	ldr	r1, [r7, #0]
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f000 f9d5 	bl	801281c <USBD_CtlError>
      err++;
 8012472:	7afb      	ldrb	r3, [r7, #11]
 8012474:	3301      	adds	r3, #1
 8012476:	72fb      	strb	r3, [r7, #11]
      break;
 8012478:	bf00      	nop
  }

  if (err != 0U)
 801247a:	7afb      	ldrb	r3, [r7, #11]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d11c      	bne.n	80124ba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8012480:	893b      	ldrh	r3, [r7, #8]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d011      	beq.n	80124aa <USBD_GetDescriptor+0x2b6>
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	88db      	ldrh	r3, [r3, #6]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d00d      	beq.n	80124aa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	88da      	ldrh	r2, [r3, #6]
 8012492:	893b      	ldrh	r3, [r7, #8]
 8012494:	4293      	cmp	r3, r2
 8012496:	bf28      	it	cs
 8012498:	4613      	movcs	r3, r2
 801249a:	b29b      	uxth	r3, r3
 801249c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801249e:	893b      	ldrh	r3, [r7, #8]
 80124a0:	461a      	mov	r2, r3
 80124a2:	68f9      	ldr	r1, [r7, #12]
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f000 fa24 	bl	80128f2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	88db      	ldrh	r3, [r3, #6]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d104      	bne.n	80124bc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f000 fa7b 	bl	80129ae <USBD_CtlSendStatus>
 80124b8:	e000      	b.n	80124bc <USBD_GetDescriptor+0x2c8>
    return;
 80124ba:	bf00      	nop
    }
  }
}
 80124bc:	3710      	adds	r7, #16
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}
 80124c2:	bf00      	nop

080124c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b084      	sub	sp, #16
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	889b      	ldrh	r3, [r3, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d130      	bne.n	8012538 <USBD_SetAddress+0x74>
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	88db      	ldrh	r3, [r3, #6]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d12c      	bne.n	8012538 <USBD_SetAddress+0x74>
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	885b      	ldrh	r3, [r3, #2]
 80124e2:	2b7f      	cmp	r3, #127	; 0x7f
 80124e4:	d828      	bhi.n	8012538 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	885b      	ldrh	r3, [r3, #2]
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124f8:	2b03      	cmp	r3, #3
 80124fa:	d104      	bne.n	8012506 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80124fc:	6839      	ldr	r1, [r7, #0]
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f000 f98c 	bl	801281c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012504:	e01d      	b.n	8012542 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	7bfa      	ldrb	r2, [r7, #15]
 801250a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801250e:	7bfb      	ldrb	r3, [r7, #15]
 8012510:	4619      	mov	r1, r3
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f000 fe4d 	bl	80131b2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f000 fa48 	bl	80129ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801251e:	7bfb      	ldrb	r3, [r7, #15]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d004      	beq.n	801252e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2202      	movs	r2, #2
 8012528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801252c:	e009      	b.n	8012542 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	2201      	movs	r2, #1
 8012532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012536:	e004      	b.n	8012542 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012538:	6839      	ldr	r1, [r7, #0]
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 f96e 	bl	801281c <USBD_CtlError>
  }
}
 8012540:	bf00      	nop
 8012542:	bf00      	nop
 8012544:	3710      	adds	r7, #16
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}
	...

0801254c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	885b      	ldrh	r3, [r3, #2]
 801255a:	b2da      	uxtb	r2, r3
 801255c:	4b41      	ldr	r3, [pc, #260]	; (8012664 <USBD_SetConfig+0x118>)
 801255e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012560:	4b40      	ldr	r3, [pc, #256]	; (8012664 <USBD_SetConfig+0x118>)
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	2b01      	cmp	r3, #1
 8012566:	d904      	bls.n	8012572 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8012568:	6839      	ldr	r1, [r7, #0]
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f000 f956 	bl	801281c <USBD_CtlError>
 8012570:	e075      	b.n	801265e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012578:	2b02      	cmp	r3, #2
 801257a:	d002      	beq.n	8012582 <USBD_SetConfig+0x36>
 801257c:	2b03      	cmp	r3, #3
 801257e:	d023      	beq.n	80125c8 <USBD_SetConfig+0x7c>
 8012580:	e062      	b.n	8012648 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8012582:	4b38      	ldr	r3, [pc, #224]	; (8012664 <USBD_SetConfig+0x118>)
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d01a      	beq.n	80125c0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801258a:	4b36      	ldr	r3, [pc, #216]	; (8012664 <USBD_SetConfig+0x118>)
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	461a      	mov	r2, r3
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2203      	movs	r2, #3
 8012598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801259c:	4b31      	ldr	r3, [pc, #196]	; (8012664 <USBD_SetConfig+0x118>)
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	4619      	mov	r1, r3
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f7ff f9e5 	bl	8011972 <USBD_SetClassConfig>
 80125a8:	4603      	mov	r3, r0
 80125aa:	2b02      	cmp	r3, #2
 80125ac:	d104      	bne.n	80125b8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80125ae:	6839      	ldr	r1, [r7, #0]
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f000 f933 	bl	801281c <USBD_CtlError>
            return;
 80125b6:	e052      	b.n	801265e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f000 f9f8 	bl	80129ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80125be:	e04e      	b.n	801265e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f000 f9f4 	bl	80129ae <USBD_CtlSendStatus>
        break;
 80125c6:	e04a      	b.n	801265e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80125c8:	4b26      	ldr	r3, [pc, #152]	; (8012664 <USBD_SetConfig+0x118>)
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d112      	bne.n	80125f6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2202      	movs	r2, #2
 80125d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80125d8:	4b22      	ldr	r3, [pc, #136]	; (8012664 <USBD_SetConfig+0x118>)
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	461a      	mov	r2, r3
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80125e2:	4b20      	ldr	r3, [pc, #128]	; (8012664 <USBD_SetConfig+0x118>)
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	4619      	mov	r1, r3
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f7ff f9e1 	bl	80119b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f000 f9dd 	bl	80129ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80125f4:	e033      	b.n	801265e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80125f6:	4b1b      	ldr	r3, [pc, #108]	; (8012664 <USBD_SetConfig+0x118>)
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	461a      	mov	r2, r3
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	429a      	cmp	r2, r3
 8012602:	d01d      	beq.n	8012640 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	b2db      	uxtb	r3, r3
 801260a:	4619      	mov	r1, r3
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f7ff f9cf 	bl	80119b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8012612:	4b14      	ldr	r3, [pc, #80]	; (8012664 <USBD_SetConfig+0x118>)
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	461a      	mov	r2, r3
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801261c:	4b11      	ldr	r3, [pc, #68]	; (8012664 <USBD_SetConfig+0x118>)
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	4619      	mov	r1, r3
 8012622:	6878      	ldr	r0, [r7, #4]
 8012624:	f7ff f9a5 	bl	8011972 <USBD_SetClassConfig>
 8012628:	4603      	mov	r3, r0
 801262a:	2b02      	cmp	r3, #2
 801262c:	d104      	bne.n	8012638 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801262e:	6839      	ldr	r1, [r7, #0]
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f000 f8f3 	bl	801281c <USBD_CtlError>
            return;
 8012636:	e012      	b.n	801265e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f000 f9b8 	bl	80129ae <USBD_CtlSendStatus>
        break;
 801263e:	e00e      	b.n	801265e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f000 f9b4 	bl	80129ae <USBD_CtlSendStatus>
        break;
 8012646:	e00a      	b.n	801265e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8012648:	6839      	ldr	r1, [r7, #0]
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f000 f8e6 	bl	801281c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8012650:	4b04      	ldr	r3, [pc, #16]	; (8012664 <USBD_SetConfig+0x118>)
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	4619      	mov	r1, r3
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f7ff f9aa 	bl	80119b0 <USBD_ClrClassConfig>
        break;
 801265c:	bf00      	nop
    }
  }
}
 801265e:	3708      	adds	r7, #8
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}
 8012664:	20001a34 	.word	0x20001a34

08012668 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	88db      	ldrh	r3, [r3, #6]
 8012676:	2b01      	cmp	r3, #1
 8012678:	d004      	beq.n	8012684 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801267a:	6839      	ldr	r1, [r7, #0]
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f000 f8cd 	bl	801281c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012682:	e022      	b.n	80126ca <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801268a:	2b02      	cmp	r3, #2
 801268c:	dc02      	bgt.n	8012694 <USBD_GetConfig+0x2c>
 801268e:	2b00      	cmp	r3, #0
 8012690:	dc03      	bgt.n	801269a <USBD_GetConfig+0x32>
 8012692:	e015      	b.n	80126c0 <USBD_GetConfig+0x58>
 8012694:	2b03      	cmp	r3, #3
 8012696:	d00b      	beq.n	80126b0 <USBD_GetConfig+0x48>
 8012698:	e012      	b.n	80126c0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2200      	movs	r2, #0
 801269e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	3308      	adds	r3, #8
 80126a4:	2201      	movs	r2, #1
 80126a6:	4619      	mov	r1, r3
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f000 f922 	bl	80128f2 <USBD_CtlSendData>
        break;
 80126ae:	e00c      	b.n	80126ca <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	3304      	adds	r3, #4
 80126b4:	2201      	movs	r2, #1
 80126b6:	4619      	mov	r1, r3
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f000 f91a 	bl	80128f2 <USBD_CtlSendData>
        break;
 80126be:	e004      	b.n	80126ca <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80126c0:	6839      	ldr	r1, [r7, #0]
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f000 f8aa 	bl	801281c <USBD_CtlError>
        break;
 80126c8:	bf00      	nop
}
 80126ca:	bf00      	nop
 80126cc:	3708      	adds	r7, #8
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126d2:	b580      	push	{r7, lr}
 80126d4:	b082      	sub	sp, #8
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	6078      	str	r0, [r7, #4]
 80126da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126e2:	3b01      	subs	r3, #1
 80126e4:	2b02      	cmp	r3, #2
 80126e6:	d81e      	bhi.n	8012726 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	88db      	ldrh	r3, [r3, #6]
 80126ec:	2b02      	cmp	r3, #2
 80126ee:	d004      	beq.n	80126fa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80126f0:	6839      	ldr	r1, [r7, #0]
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 f892 	bl	801281c <USBD_CtlError>
        break;
 80126f8:	e01a      	b.n	8012730 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2201      	movs	r2, #1
 80126fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012706:	2b00      	cmp	r3, #0
 8012708:	d005      	beq.n	8012716 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	68db      	ldr	r3, [r3, #12]
 801270e:	f043 0202 	orr.w	r2, r3, #2
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	330c      	adds	r3, #12
 801271a:	2202      	movs	r2, #2
 801271c:	4619      	mov	r1, r3
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f000 f8e7 	bl	80128f2 <USBD_CtlSendData>
      break;
 8012724:	e004      	b.n	8012730 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8012726:	6839      	ldr	r1, [r7, #0]
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f000 f877 	bl	801281c <USBD_CtlError>
      break;
 801272e:	bf00      	nop
  }
}
 8012730:	bf00      	nop
 8012732:	3708      	adds	r7, #8
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	885b      	ldrh	r3, [r3, #2]
 8012746:	2b01      	cmp	r3, #1
 8012748:	d106      	bne.n	8012758 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2201      	movs	r2, #1
 801274e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f000 f92b 	bl	80129ae <USBD_CtlSendStatus>
  }
}
 8012758:	bf00      	nop
 801275a:	3708      	adds	r7, #8
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012770:	3b01      	subs	r3, #1
 8012772:	2b02      	cmp	r3, #2
 8012774:	d80b      	bhi.n	801278e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	885b      	ldrh	r3, [r3, #2]
 801277a:	2b01      	cmp	r3, #1
 801277c:	d10c      	bne.n	8012798 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2200      	movs	r2, #0
 8012782:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f000 f911 	bl	80129ae <USBD_CtlSendStatus>
      }
      break;
 801278c:	e004      	b.n	8012798 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801278e:	6839      	ldr	r1, [r7, #0]
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 f843 	bl	801281c <USBD_CtlError>
      break;
 8012796:	e000      	b.n	801279a <USBD_ClrFeature+0x3a>
      break;
 8012798:	bf00      	nop
  }
}
 801279a:	bf00      	nop
 801279c:	3708      	adds	r7, #8
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}

080127a2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80127a2:	b480      	push	{r7}
 80127a4:	b083      	sub	sp, #12
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	6078      	str	r0, [r7, #4]
 80127aa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	781a      	ldrb	r2, [r3, #0]
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	785a      	ldrb	r2, [r3, #1]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	3302      	adds	r3, #2
 80127c0:	781b      	ldrb	r3, [r3, #0]
 80127c2:	b29a      	uxth	r2, r3
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	3303      	adds	r3, #3
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	021b      	lsls	r3, r3, #8
 80127ce:	b29b      	uxth	r3, r3
 80127d0:	4413      	add	r3, r2
 80127d2:	b29a      	uxth	r2, r3
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	3304      	adds	r3, #4
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	b29a      	uxth	r2, r3
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	3305      	adds	r3, #5
 80127e4:	781b      	ldrb	r3, [r3, #0]
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	021b      	lsls	r3, r3, #8
 80127ea:	b29b      	uxth	r3, r3
 80127ec:	4413      	add	r3, r2
 80127ee:	b29a      	uxth	r2, r3
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	3306      	adds	r3, #6
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	b29a      	uxth	r2, r3
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	3307      	adds	r3, #7
 8012800:	781b      	ldrb	r3, [r3, #0]
 8012802:	b29b      	uxth	r3, r3
 8012804:	021b      	lsls	r3, r3, #8
 8012806:	b29b      	uxth	r3, r3
 8012808:	4413      	add	r3, r2
 801280a:	b29a      	uxth	r2, r3
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	80da      	strh	r2, [r3, #6]

}
 8012810:	bf00      	nop
 8012812:	370c      	adds	r7, #12
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr

0801281c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8012826:	2180      	movs	r1, #128	; 0x80
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 fc57 	bl	80130dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801282e:	2100      	movs	r1, #0
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 fc53 	bl	80130dc <USBD_LL_StallEP>
}
 8012836:	bf00      	nop
 8012838:	3708      	adds	r7, #8
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}

0801283e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801283e:	b580      	push	{r7, lr}
 8012840:	b086      	sub	sp, #24
 8012842:	af00      	add	r7, sp, #0
 8012844:	60f8      	str	r0, [r7, #12]
 8012846:	60b9      	str	r1, [r7, #8]
 8012848:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801284a:	2300      	movs	r3, #0
 801284c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d032      	beq.n	80128ba <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8012854:	68f8      	ldr	r0, [r7, #12]
 8012856:	f000 f834 	bl	80128c2 <USBD_GetLen>
 801285a:	4603      	mov	r3, r0
 801285c:	3301      	adds	r3, #1
 801285e:	b29b      	uxth	r3, r3
 8012860:	005b      	lsls	r3, r3, #1
 8012862:	b29a      	uxth	r2, r3
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8012868:	7dfb      	ldrb	r3, [r7, #23]
 801286a:	1c5a      	adds	r2, r3, #1
 801286c:	75fa      	strb	r2, [r7, #23]
 801286e:	461a      	mov	r2, r3
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	4413      	add	r3, r2
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	7812      	ldrb	r2, [r2, #0]
 8012878:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801287a:	7dfb      	ldrb	r3, [r7, #23]
 801287c:	1c5a      	adds	r2, r3, #1
 801287e:	75fa      	strb	r2, [r7, #23]
 8012880:	461a      	mov	r2, r3
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	4413      	add	r3, r2
 8012886:	2203      	movs	r2, #3
 8012888:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801288a:	e012      	b.n	80128b2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	1c5a      	adds	r2, r3, #1
 8012890:	60fa      	str	r2, [r7, #12]
 8012892:	7dfa      	ldrb	r2, [r7, #23]
 8012894:	1c51      	adds	r1, r2, #1
 8012896:	75f9      	strb	r1, [r7, #23]
 8012898:	4611      	mov	r1, r2
 801289a:	68ba      	ldr	r2, [r7, #8]
 801289c:	440a      	add	r2, r1
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80128a2:	7dfb      	ldrb	r3, [r7, #23]
 80128a4:	1c5a      	adds	r2, r3, #1
 80128a6:	75fa      	strb	r2, [r7, #23]
 80128a8:	461a      	mov	r2, r3
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	4413      	add	r3, r2
 80128ae:	2200      	movs	r2, #0
 80128b0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d1e8      	bne.n	801288c <USBD_GetString+0x4e>
    }
  }
}
 80128ba:	bf00      	nop
 80128bc:	3718      	adds	r7, #24
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}

080128c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80128c2:	b480      	push	{r7}
 80128c4:	b085      	sub	sp, #20
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80128ca:	2300      	movs	r3, #0
 80128cc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80128ce:	e005      	b.n	80128dc <USBD_GetLen+0x1a>
  {
    len++;
 80128d0:	7bfb      	ldrb	r3, [r7, #15]
 80128d2:	3301      	adds	r3, #1
 80128d4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	3301      	adds	r3, #1
 80128da:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d1f5      	bne.n	80128d0 <USBD_GetLen+0xe>
  }

  return len;
 80128e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3714      	adds	r7, #20
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr

080128f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80128f2:	b580      	push	{r7, lr}
 80128f4:	b084      	sub	sp, #16
 80128f6:	af00      	add	r7, sp, #0
 80128f8:	60f8      	str	r0, [r7, #12]
 80128fa:	60b9      	str	r1, [r7, #8]
 80128fc:	4613      	mov	r3, r2
 80128fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	2202      	movs	r2, #2
 8012904:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012908:	88fa      	ldrh	r2, [r7, #6]
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801290e:	88fa      	ldrh	r2, [r7, #6]
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012914:	88fb      	ldrh	r3, [r7, #6]
 8012916:	68ba      	ldr	r2, [r7, #8]
 8012918:	2100      	movs	r1, #0
 801291a:	68f8      	ldr	r0, [r7, #12]
 801291c:	f000 fc68 	bl	80131f0 <USBD_LL_Transmit>

  return USBD_OK;
 8012920:	2300      	movs	r3, #0
}
 8012922:	4618      	mov	r0, r3
 8012924:	3710      	adds	r7, #16
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}

0801292a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801292a:	b580      	push	{r7, lr}
 801292c:	b084      	sub	sp, #16
 801292e:	af00      	add	r7, sp, #0
 8012930:	60f8      	str	r0, [r7, #12]
 8012932:	60b9      	str	r1, [r7, #8]
 8012934:	4613      	mov	r3, r2
 8012936:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012938:	88fb      	ldrh	r3, [r7, #6]
 801293a:	68ba      	ldr	r2, [r7, #8]
 801293c:	2100      	movs	r1, #0
 801293e:	68f8      	ldr	r0, [r7, #12]
 8012940:	f000 fc56 	bl	80131f0 <USBD_LL_Transmit>

  return USBD_OK;
 8012944:	2300      	movs	r3, #0
}
 8012946:	4618      	mov	r0, r3
 8012948:	3710      	adds	r7, #16
 801294a:	46bd      	mov	sp, r7
 801294c:	bd80      	pop	{r7, pc}

0801294e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801294e:	b580      	push	{r7, lr}
 8012950:	b084      	sub	sp, #16
 8012952:	af00      	add	r7, sp, #0
 8012954:	60f8      	str	r0, [r7, #12]
 8012956:	60b9      	str	r1, [r7, #8]
 8012958:	4613      	mov	r3, r2
 801295a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	2203      	movs	r2, #3
 8012960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012964:	88fa      	ldrh	r2, [r7, #6]
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801296c:	88fa      	ldrh	r2, [r7, #6]
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012974:	88fb      	ldrh	r3, [r7, #6]
 8012976:	68ba      	ldr	r2, [r7, #8]
 8012978:	2100      	movs	r1, #0
 801297a:	68f8      	ldr	r0, [r7, #12]
 801297c:	f000 fc5b 	bl	8013236 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012980:	2300      	movs	r3, #0
}
 8012982:	4618      	mov	r0, r3
 8012984:	3710      	adds	r7, #16
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}

0801298a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801298a:	b580      	push	{r7, lr}
 801298c:	b084      	sub	sp, #16
 801298e:	af00      	add	r7, sp, #0
 8012990:	60f8      	str	r0, [r7, #12]
 8012992:	60b9      	str	r1, [r7, #8]
 8012994:	4613      	mov	r3, r2
 8012996:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012998:	88fb      	ldrh	r3, [r7, #6]
 801299a:	68ba      	ldr	r2, [r7, #8]
 801299c:	2100      	movs	r1, #0
 801299e:	68f8      	ldr	r0, [r7, #12]
 80129a0:	f000 fc49 	bl	8013236 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80129a4:	2300      	movs	r3, #0
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3710      	adds	r7, #16
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}

080129ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80129ae:	b580      	push	{r7, lr}
 80129b0:	b082      	sub	sp, #8
 80129b2:	af00      	add	r7, sp, #0
 80129b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2204      	movs	r2, #4
 80129ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80129be:	2300      	movs	r3, #0
 80129c0:	2200      	movs	r2, #0
 80129c2:	2100      	movs	r1, #0
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f000 fc13 	bl	80131f0 <USBD_LL_Transmit>

  return USBD_OK;
 80129ca:	2300      	movs	r3, #0
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2205      	movs	r2, #5
 80129e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80129e4:	2300      	movs	r3, #0
 80129e6:	2200      	movs	r2, #0
 80129e8:	2100      	movs	r1, #0
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f000 fc23 	bl	8013236 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80129f0:	2300      	movs	r3, #0
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	3708      	adds	r7, #8
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}
	...

080129fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012a00:	2200      	movs	r2, #0
 8012a02:	4912      	ldr	r1, [pc, #72]	; (8012a4c <MX_USB_DEVICE_Init+0x50>)
 8012a04:	4812      	ldr	r0, [pc, #72]	; (8012a50 <MX_USB_DEVICE_Init+0x54>)
 8012a06:	f7fe ff58 	bl	80118ba <USBD_Init>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d001      	beq.n	8012a14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012a10:	f7f0 fa84 	bl	8002f1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012a14:	490f      	ldr	r1, [pc, #60]	; (8012a54 <MX_USB_DEVICE_Init+0x58>)
 8012a16:	480e      	ldr	r0, [pc, #56]	; (8012a50 <MX_USB_DEVICE_Init+0x54>)
 8012a18:	f7fe ff7a 	bl	8011910 <USBD_RegisterClass>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d001      	beq.n	8012a26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012a22:	f7f0 fa7b 	bl	8002f1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012a26:	490c      	ldr	r1, [pc, #48]	; (8012a58 <MX_USB_DEVICE_Init+0x5c>)
 8012a28:	4809      	ldr	r0, [pc, #36]	; (8012a50 <MX_USB_DEVICE_Init+0x54>)
 8012a2a:	f7fe fed7 	bl	80117dc <USBD_CDC_RegisterInterface>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d001      	beq.n	8012a38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012a34:	f7f0 fa72 	bl	8002f1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012a38:	4805      	ldr	r0, [pc, #20]	; (8012a50 <MX_USB_DEVICE_Init+0x54>)
 8012a3a:	f7fe ff83 	bl	8011944 <USBD_Start>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d001      	beq.n	8012a48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012a44:	f7f0 fa6a 	bl	8002f1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012a48:	bf00      	nop
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	200001d4 	.word	0x200001d4
 8012a50:	20001a38 	.word	0x20001a38
 8012a54:	200000c0 	.word	0x200000c0
 8012a58:	200001c4 	.word	0x200001c4

08012a5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012a60:	2200      	movs	r2, #0
 8012a62:	4905      	ldr	r1, [pc, #20]	; (8012a78 <CDC_Init_FS+0x1c>)
 8012a64:	4805      	ldr	r0, [pc, #20]	; (8012a7c <CDC_Init_FS+0x20>)
 8012a66:	f7fe fed0 	bl	801180a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012a6a:	4905      	ldr	r1, [pc, #20]	; (8012a80 <CDC_Init_FS+0x24>)
 8012a6c:	4803      	ldr	r0, [pc, #12]	; (8012a7c <CDC_Init_FS+0x20>)
 8012a6e:	f7fe fee6 	bl	801183e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012a72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012a74:	4618      	mov	r0, r3
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	200020fc 	.word	0x200020fc
 8012a7c:	20001a38 	.word	0x20001a38
 8012a80:	20001cfc 	.word	0x20001cfc

08012a84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012a84:	b480      	push	{r7}
 8012a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012a88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr

08012a94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012a94:	b480      	push	{r7}
 8012a96:	b083      	sub	sp, #12
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	6039      	str	r1, [r7, #0]
 8012a9e:	71fb      	strb	r3, [r7, #7]
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012aa4:	79fb      	ldrb	r3, [r7, #7]
 8012aa6:	2b23      	cmp	r3, #35	; 0x23
 8012aa8:	d84a      	bhi.n	8012b40 <CDC_Control_FS+0xac>
 8012aaa:	a201      	add	r2, pc, #4	; (adr r2, 8012ab0 <CDC_Control_FS+0x1c>)
 8012aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab0:	08012b41 	.word	0x08012b41
 8012ab4:	08012b41 	.word	0x08012b41
 8012ab8:	08012b41 	.word	0x08012b41
 8012abc:	08012b41 	.word	0x08012b41
 8012ac0:	08012b41 	.word	0x08012b41
 8012ac4:	08012b41 	.word	0x08012b41
 8012ac8:	08012b41 	.word	0x08012b41
 8012acc:	08012b41 	.word	0x08012b41
 8012ad0:	08012b41 	.word	0x08012b41
 8012ad4:	08012b41 	.word	0x08012b41
 8012ad8:	08012b41 	.word	0x08012b41
 8012adc:	08012b41 	.word	0x08012b41
 8012ae0:	08012b41 	.word	0x08012b41
 8012ae4:	08012b41 	.word	0x08012b41
 8012ae8:	08012b41 	.word	0x08012b41
 8012aec:	08012b41 	.word	0x08012b41
 8012af0:	08012b41 	.word	0x08012b41
 8012af4:	08012b41 	.word	0x08012b41
 8012af8:	08012b41 	.word	0x08012b41
 8012afc:	08012b41 	.word	0x08012b41
 8012b00:	08012b41 	.word	0x08012b41
 8012b04:	08012b41 	.word	0x08012b41
 8012b08:	08012b41 	.word	0x08012b41
 8012b0c:	08012b41 	.word	0x08012b41
 8012b10:	08012b41 	.word	0x08012b41
 8012b14:	08012b41 	.word	0x08012b41
 8012b18:	08012b41 	.word	0x08012b41
 8012b1c:	08012b41 	.word	0x08012b41
 8012b20:	08012b41 	.word	0x08012b41
 8012b24:	08012b41 	.word	0x08012b41
 8012b28:	08012b41 	.word	0x08012b41
 8012b2c:	08012b41 	.word	0x08012b41
 8012b30:	08012b41 	.word	0x08012b41
 8012b34:	08012b41 	.word	0x08012b41
 8012b38:	08012b41 	.word	0x08012b41
 8012b3c:	08012b41 	.word	0x08012b41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012b40:	bf00      	nop
  }

  return (USBD_OK);
 8012b42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	370c      	adds	r7, #12
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4e:	4770      	bx	lr

08012b50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012b5a:	6879      	ldr	r1, [r7, #4]
 8012b5c:	4805      	ldr	r0, [pc, #20]	; (8012b74 <CDC_Receive_FS+0x24>)
 8012b5e:	f7fe fe6e 	bl	801183e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012b62:	4804      	ldr	r0, [pc, #16]	; (8012b74 <CDC_Receive_FS+0x24>)
 8012b64:	f7fe fe7f 	bl	8011866 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012b68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	3708      	adds	r7, #8
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}
 8012b72:	bf00      	nop
 8012b74:	20001a38 	.word	0x20001a38

08012b78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	4603      	mov	r3, r0
 8012b80:	6039      	str	r1, [r7, #0]
 8012b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	2212      	movs	r2, #18
 8012b88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012b8a:	4b03      	ldr	r3, [pc, #12]	; (8012b98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	370c      	adds	r7, #12
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr
 8012b98:	200001f0 	.word	0x200001f0

08012b9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b083      	sub	sp, #12
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	6039      	str	r1, [r7, #0]
 8012ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	2204      	movs	r2, #4
 8012bac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012bae:	4b03      	ldr	r3, [pc, #12]	; (8012bbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	370c      	adds	r7, #12
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr
 8012bbc:	20000204 	.word	0x20000204

08012bc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	6039      	str	r1, [r7, #0]
 8012bca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012bcc:	79fb      	ldrb	r3, [r7, #7]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d105      	bne.n	8012bde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012bd2:	683a      	ldr	r2, [r7, #0]
 8012bd4:	4907      	ldr	r1, [pc, #28]	; (8012bf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8012bd6:	4808      	ldr	r0, [pc, #32]	; (8012bf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8012bd8:	f7ff fe31 	bl	801283e <USBD_GetString>
 8012bdc:	e004      	b.n	8012be8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012bde:	683a      	ldr	r2, [r7, #0]
 8012be0:	4904      	ldr	r1, [pc, #16]	; (8012bf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8012be2:	4805      	ldr	r0, [pc, #20]	; (8012bf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8012be4:	f7ff fe2b 	bl	801283e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012be8:	4b02      	ldr	r3, [pc, #8]	; (8012bf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3708      	adds	r7, #8
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	200024fc 	.word	0x200024fc
 8012bf8:	080172b0 	.word	0x080172b0

08012bfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	4603      	mov	r3, r0
 8012c04:	6039      	str	r1, [r7, #0]
 8012c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012c08:	683a      	ldr	r2, [r7, #0]
 8012c0a:	4904      	ldr	r1, [pc, #16]	; (8012c1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012c0c:	4804      	ldr	r0, [pc, #16]	; (8012c20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012c0e:	f7ff fe16 	bl	801283e <USBD_GetString>
  return USBD_StrDesc;
 8012c12:	4b02      	ldr	r3, [pc, #8]	; (8012c1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3708      	adds	r7, #8
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	200024fc 	.word	0x200024fc
 8012c20:	080172c8 	.word	0x080172c8

08012c24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b082      	sub	sp, #8
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	6039      	str	r1, [r7, #0]
 8012c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	221a      	movs	r2, #26
 8012c34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012c36:	f000 f843 	bl	8012cc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012c3a:	4b02      	ldr	r3, [pc, #8]	; (8012c44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	3708      	adds	r7, #8
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	20000208 	.word	0x20000208

08012c48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	4603      	mov	r3, r0
 8012c50:	6039      	str	r1, [r7, #0]
 8012c52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012c54:	79fb      	ldrb	r3, [r7, #7]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d105      	bne.n	8012c66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012c5a:	683a      	ldr	r2, [r7, #0]
 8012c5c:	4907      	ldr	r1, [pc, #28]	; (8012c7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8012c5e:	4808      	ldr	r0, [pc, #32]	; (8012c80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012c60:	f7ff fded 	bl	801283e <USBD_GetString>
 8012c64:	e004      	b.n	8012c70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012c66:	683a      	ldr	r2, [r7, #0]
 8012c68:	4904      	ldr	r1, [pc, #16]	; (8012c7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8012c6a:	4805      	ldr	r0, [pc, #20]	; (8012c80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012c6c:	f7ff fde7 	bl	801283e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c70:	4b02      	ldr	r3, [pc, #8]	; (8012c7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	200024fc 	.word	0x200024fc
 8012c80:	080172dc 	.word	0x080172dc

08012c84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b082      	sub	sp, #8
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	6039      	str	r1, [r7, #0]
 8012c8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012c90:	79fb      	ldrb	r3, [r7, #7]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d105      	bne.n	8012ca2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	4907      	ldr	r1, [pc, #28]	; (8012cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012c9a:	4808      	ldr	r0, [pc, #32]	; (8012cbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012c9c:	f7ff fdcf 	bl	801283e <USBD_GetString>
 8012ca0:	e004      	b.n	8012cac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012ca2:	683a      	ldr	r2, [r7, #0]
 8012ca4:	4904      	ldr	r1, [pc, #16]	; (8012cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012ca6:	4805      	ldr	r0, [pc, #20]	; (8012cbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012ca8:	f7ff fdc9 	bl	801283e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012cac:	4b02      	ldr	r3, [pc, #8]	; (8012cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	200024fc 	.word	0x200024fc
 8012cbc:	080172e8 	.word	0x080172e8

08012cc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012cc6:	4b0f      	ldr	r3, [pc, #60]	; (8012d04 <Get_SerialNum+0x44>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012ccc:	4b0e      	ldr	r3, [pc, #56]	; (8012d08 <Get_SerialNum+0x48>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012cd2:	4b0e      	ldr	r3, [pc, #56]	; (8012d0c <Get_SerialNum+0x4c>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012cd8:	68fa      	ldr	r2, [r7, #12]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	4413      	add	r3, r2
 8012cde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d009      	beq.n	8012cfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012ce6:	2208      	movs	r2, #8
 8012ce8:	4909      	ldr	r1, [pc, #36]	; (8012d10 <Get_SerialNum+0x50>)
 8012cea:	68f8      	ldr	r0, [r7, #12]
 8012cec:	f000 f814 	bl	8012d18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012cf0:	2204      	movs	r2, #4
 8012cf2:	4908      	ldr	r1, [pc, #32]	; (8012d14 <Get_SerialNum+0x54>)
 8012cf4:	68b8      	ldr	r0, [r7, #8]
 8012cf6:	f000 f80f 	bl	8012d18 <IntToUnicode>
  }
}
 8012cfa:	bf00      	nop
 8012cfc:	3710      	adds	r7, #16
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	1ffff7ac 	.word	0x1ffff7ac
 8012d08:	1ffff7b0 	.word	0x1ffff7b0
 8012d0c:	1ffff7b4 	.word	0x1ffff7b4
 8012d10:	2000020a 	.word	0x2000020a
 8012d14:	2000021a 	.word	0x2000021a

08012d18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b087      	sub	sp, #28
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	60b9      	str	r1, [r7, #8]
 8012d22:	4613      	mov	r3, r2
 8012d24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012d26:	2300      	movs	r3, #0
 8012d28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	75fb      	strb	r3, [r7, #23]
 8012d2e:	e027      	b.n	8012d80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	0f1b      	lsrs	r3, r3, #28
 8012d34:	2b09      	cmp	r3, #9
 8012d36:	d80b      	bhi.n	8012d50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	0f1b      	lsrs	r3, r3, #28
 8012d3c:	b2da      	uxtb	r2, r3
 8012d3e:	7dfb      	ldrb	r3, [r7, #23]
 8012d40:	005b      	lsls	r3, r3, #1
 8012d42:	4619      	mov	r1, r3
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	440b      	add	r3, r1
 8012d48:	3230      	adds	r2, #48	; 0x30
 8012d4a:	b2d2      	uxtb	r2, r2
 8012d4c:	701a      	strb	r2, [r3, #0]
 8012d4e:	e00a      	b.n	8012d66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	0f1b      	lsrs	r3, r3, #28
 8012d54:	b2da      	uxtb	r2, r3
 8012d56:	7dfb      	ldrb	r3, [r7, #23]
 8012d58:	005b      	lsls	r3, r3, #1
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	440b      	add	r3, r1
 8012d60:	3237      	adds	r2, #55	; 0x37
 8012d62:	b2d2      	uxtb	r2, r2
 8012d64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	011b      	lsls	r3, r3, #4
 8012d6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012d6c:	7dfb      	ldrb	r3, [r7, #23]
 8012d6e:	005b      	lsls	r3, r3, #1
 8012d70:	3301      	adds	r3, #1
 8012d72:	68ba      	ldr	r2, [r7, #8]
 8012d74:	4413      	add	r3, r2
 8012d76:	2200      	movs	r2, #0
 8012d78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012d7a:	7dfb      	ldrb	r3, [r7, #23]
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	75fb      	strb	r3, [r7, #23]
 8012d80:	7dfa      	ldrb	r2, [r7, #23]
 8012d82:	79fb      	ldrb	r3, [r7, #7]
 8012d84:	429a      	cmp	r2, r3
 8012d86:	d3d3      	bcc.n	8012d30 <IntToUnicode+0x18>
  }
}
 8012d88:	bf00      	nop
 8012d8a:	bf00      	nop
 8012d8c:	371c      	adds	r7, #28
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d94:	4770      	bx	lr
	...

08012d98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b08a      	sub	sp, #40	; 0x28
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012da0:	f107 0314 	add.w	r3, r7, #20
 8012da4:	2200      	movs	r2, #0
 8012da6:	601a      	str	r2, [r3, #0]
 8012da8:	605a      	str	r2, [r3, #4]
 8012daa:	609a      	str	r2, [r3, #8]
 8012dac:	60da      	str	r2, [r3, #12]
 8012dae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	4a1c      	ldr	r2, [pc, #112]	; (8012e28 <HAL_PCD_MspInit+0x90>)
 8012db6:	4293      	cmp	r3, r2
 8012db8:	d131      	bne.n	8012e1e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012dba:	4b1c      	ldr	r3, [pc, #112]	; (8012e2c <HAL_PCD_MspInit+0x94>)
 8012dbc:	695b      	ldr	r3, [r3, #20]
 8012dbe:	4a1b      	ldr	r2, [pc, #108]	; (8012e2c <HAL_PCD_MspInit+0x94>)
 8012dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012dc4:	6153      	str	r3, [r2, #20]
 8012dc6:	4b19      	ldr	r3, [pc, #100]	; (8012e2c <HAL_PCD_MspInit+0x94>)
 8012dc8:	695b      	ldr	r3, [r3, #20]
 8012dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012dce:	613b      	str	r3, [r7, #16]
 8012dd0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012dd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012dd8:	2302      	movs	r3, #2
 8012dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012de0:	2303      	movs	r3, #3
 8012de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8012de4:	230e      	movs	r3, #14
 8012de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012de8:	f107 0314 	add.w	r3, r7, #20
 8012dec:	4619      	mov	r1, r3
 8012dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012df2:	f7f4 faa5 	bl	8007340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012df6:	4b0d      	ldr	r3, [pc, #52]	; (8012e2c <HAL_PCD_MspInit+0x94>)
 8012df8:	69db      	ldr	r3, [r3, #28]
 8012dfa:	4a0c      	ldr	r2, [pc, #48]	; (8012e2c <HAL_PCD_MspInit+0x94>)
 8012dfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012e00:	61d3      	str	r3, [r2, #28]
 8012e02:	4b0a      	ldr	r3, [pc, #40]	; (8012e2c <HAL_PCD_MspInit+0x94>)
 8012e04:	69db      	ldr	r3, [r3, #28]
 8012e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012e0a:	60fb      	str	r3, [r7, #12]
 8012e0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8012e0e:	2200      	movs	r2, #0
 8012e10:	2100      	movs	r1, #0
 8012e12:	2014      	movs	r0, #20
 8012e14:	f7f3 fcbf 	bl	8006796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8012e18:	2014      	movs	r0, #20
 8012e1a:	f7f3 fcd8 	bl	80067ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012e1e:	bf00      	nop
 8012e20:	3728      	adds	r7, #40	; 0x28
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	40005c00 	.word	0x40005c00
 8012e2c:	40021000 	.word	0x40021000

08012e30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b082      	sub	sp, #8
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012e44:	4619      	mov	r1, r3
 8012e46:	4610      	mov	r0, r2
 8012e48:	f7fe fdc5 	bl	80119d6 <USBD_LL_SetupStage>
}
 8012e4c:	bf00      	nop
 8012e4e:	3708      	adds	r7, #8
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}

08012e54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	460b      	mov	r3, r1
 8012e5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8012e66:	78fa      	ldrb	r2, [r7, #3]
 8012e68:	6879      	ldr	r1, [r7, #4]
 8012e6a:	4613      	mov	r3, r2
 8012e6c:	009b      	lsls	r3, r3, #2
 8012e6e:	4413      	add	r3, r2
 8012e70:	00db      	lsls	r3, r3, #3
 8012e72:	440b      	add	r3, r1
 8012e74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	78fb      	ldrb	r3, [r7, #3]
 8012e7c:	4619      	mov	r1, r3
 8012e7e:	f7fe fdf7 	bl	8011a70 <USBD_LL_DataOutStage>
}
 8012e82:	bf00      	nop
 8012e84:	3708      	adds	r7, #8
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}

08012e8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e8a:	b580      	push	{r7, lr}
 8012e8c:	b082      	sub	sp, #8
 8012e8e:	af00      	add	r7, sp, #0
 8012e90:	6078      	str	r0, [r7, #4]
 8012e92:	460b      	mov	r3, r1
 8012e94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8012e9c:	78fa      	ldrb	r2, [r7, #3]
 8012e9e:	6879      	ldr	r1, [r7, #4]
 8012ea0:	4613      	mov	r3, r2
 8012ea2:	009b      	lsls	r3, r3, #2
 8012ea4:	4413      	add	r3, r2
 8012ea6:	00db      	lsls	r3, r3, #3
 8012ea8:	440b      	add	r3, r1
 8012eaa:	333c      	adds	r3, #60	; 0x3c
 8012eac:	681a      	ldr	r2, [r3, #0]
 8012eae:	78fb      	ldrb	r3, [r7, #3]
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	f7fe fe4e 	bl	8011b52 <USBD_LL_DataInStage>
}
 8012eb6:	bf00      	nop
 8012eb8:	3708      	adds	r7, #8
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}

08012ebe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ebe:	b580      	push	{r7, lr}
 8012ec0:	b082      	sub	sp, #8
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7fe ff61 	bl	8011d94 <USBD_LL_SOF>
}
 8012ed2:	bf00      	nop
 8012ed4:	3708      	adds	r7, #8
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}

08012eda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012eda:	b580      	push	{r7, lr}
 8012edc:	b084      	sub	sp, #16
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	689b      	ldr	r3, [r3, #8]
 8012eea:	2b02      	cmp	r3, #2
 8012eec:	d001      	beq.n	8012ef2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012eee:	f7f0 f815 	bl	8002f1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8012ef8:	7bfa      	ldrb	r2, [r7, #15]
 8012efa:	4611      	mov	r1, r2
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7fe ff0e 	bl	8011d1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7fe fec7 	bl	8011c9c <USBD_LL_Reset>
}
 8012f0e:	bf00      	nop
 8012f10:	3710      	adds	r7, #16
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}
	...

08012f18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7fe ff09 	bl	8011d3e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	699b      	ldr	r3, [r3, #24]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d005      	beq.n	8012f40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012f34:	4b04      	ldr	r3, [pc, #16]	; (8012f48 <HAL_PCD_SuspendCallback+0x30>)
 8012f36:	691b      	ldr	r3, [r3, #16]
 8012f38:	4a03      	ldr	r2, [pc, #12]	; (8012f48 <HAL_PCD_SuspendCallback+0x30>)
 8012f3a:	f043 0306 	orr.w	r3, r3, #6
 8012f3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012f40:	bf00      	nop
 8012f42:	3708      	adds	r7, #8
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}
 8012f48:	e000ed00 	.word	0xe000ed00

08012f4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b082      	sub	sp, #8
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7fe ff04 	bl	8011d68 <USBD_LL_Resume>
}
 8012f60:	bf00      	nop
 8012f62:	3708      	adds	r7, #8
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012f70:	4a28      	ldr	r2, [pc, #160]	; (8013014 <USBD_LL_Init+0xac>)
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	4a26      	ldr	r2, [pc, #152]	; (8013014 <USBD_LL_Init+0xac>)
 8012f7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8012f80:	4b24      	ldr	r3, [pc, #144]	; (8013014 <USBD_LL_Init+0xac>)
 8012f82:	4a25      	ldr	r2, [pc, #148]	; (8013018 <USBD_LL_Init+0xb0>)
 8012f84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012f86:	4b23      	ldr	r3, [pc, #140]	; (8013014 <USBD_LL_Init+0xac>)
 8012f88:	2208      	movs	r2, #8
 8012f8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012f8c:	4b21      	ldr	r3, [pc, #132]	; (8013014 <USBD_LL_Init+0xac>)
 8012f8e:	2202      	movs	r2, #2
 8012f90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012f92:	4b20      	ldr	r3, [pc, #128]	; (8013014 <USBD_LL_Init+0xac>)
 8012f94:	2202      	movs	r2, #2
 8012f96:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012f98:	4b1e      	ldr	r3, [pc, #120]	; (8013014 <USBD_LL_Init+0xac>)
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012f9e:	4b1d      	ldr	r3, [pc, #116]	; (8013014 <USBD_LL_Init+0xac>)
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012fa4:	481b      	ldr	r0, [pc, #108]	; (8013014 <USBD_LL_Init+0xac>)
 8012fa6:	f7f4 fc9b 	bl	80078e0 <HAL_PCD_Init>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d001      	beq.n	8012fb4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8012fb0:	f7ef ffb4 	bl	8002f1c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012fba:	2318      	movs	r3, #24
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	2100      	movs	r1, #0
 8012fc0:	f7f6 f924 	bl	800920c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012fca:	2358      	movs	r3, #88	; 0x58
 8012fcc:	2200      	movs	r2, #0
 8012fce:	2180      	movs	r1, #128	; 0x80
 8012fd0:	f7f6 f91c 	bl	800920c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012fda:	23c0      	movs	r3, #192	; 0xc0
 8012fdc:	2200      	movs	r2, #0
 8012fde:	2181      	movs	r1, #129	; 0x81
 8012fe0:	f7f6 f914 	bl	800920c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012fea:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012fee:	2200      	movs	r2, #0
 8012ff0:	2101      	movs	r1, #1
 8012ff2:	f7f6 f90b 	bl	800920c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013000:	2200      	movs	r2, #0
 8013002:	2182      	movs	r1, #130	; 0x82
 8013004:	f7f6 f902 	bl	800920c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8013008:	2300      	movs	r3, #0
}
 801300a:	4618      	mov	r0, r3
 801300c:	3708      	adds	r7, #8
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	200026fc 	.word	0x200026fc
 8013018:	40005c00 	.word	0x40005c00

0801301c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b084      	sub	sp, #16
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013024:	2300      	movs	r3, #0
 8013026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013028:	2300      	movs	r3, #0
 801302a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013032:	4618      	mov	r0, r3
 8013034:	f7f4 fd26 	bl	8007a84 <HAL_PCD_Start>
 8013038:	4603      	mov	r3, r0
 801303a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801303c:	7bfb      	ldrb	r3, [r7, #15]
 801303e:	4618      	mov	r0, r3
 8013040:	f000 f954 	bl	80132ec <USBD_Get_USB_Status>
 8013044:	4603      	mov	r3, r0
 8013046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013048:	7bbb      	ldrb	r3, [r7, #14]
}
 801304a:	4618      	mov	r0, r3
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}

08013052 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013052:	b580      	push	{r7, lr}
 8013054:	b084      	sub	sp, #16
 8013056:	af00      	add	r7, sp, #0
 8013058:	6078      	str	r0, [r7, #4]
 801305a:	4608      	mov	r0, r1
 801305c:	4611      	mov	r1, r2
 801305e:	461a      	mov	r2, r3
 8013060:	4603      	mov	r3, r0
 8013062:	70fb      	strb	r3, [r7, #3]
 8013064:	460b      	mov	r3, r1
 8013066:	70bb      	strb	r3, [r7, #2]
 8013068:	4613      	mov	r3, r2
 801306a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801306c:	2300      	movs	r3, #0
 801306e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013070:	2300      	movs	r3, #0
 8013072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801307a:	78bb      	ldrb	r3, [r7, #2]
 801307c:	883a      	ldrh	r2, [r7, #0]
 801307e:	78f9      	ldrb	r1, [r7, #3]
 8013080:	f7f4 fe1f 	bl	8007cc2 <HAL_PCD_EP_Open>
 8013084:	4603      	mov	r3, r0
 8013086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013088:	7bfb      	ldrb	r3, [r7, #15]
 801308a:	4618      	mov	r0, r3
 801308c:	f000 f92e 	bl	80132ec <USBD_Get_USB_Status>
 8013090:	4603      	mov	r3, r0
 8013092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013094:	7bbb      	ldrb	r3, [r7, #14]
}
 8013096:	4618      	mov	r0, r3
 8013098:	3710      	adds	r7, #16
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}

0801309e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801309e:	b580      	push	{r7, lr}
 80130a0:	b084      	sub	sp, #16
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	6078      	str	r0, [r7, #4]
 80130a6:	460b      	mov	r3, r1
 80130a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130aa:	2300      	movs	r3, #0
 80130ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130ae:	2300      	movs	r3, #0
 80130b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130b8:	78fa      	ldrb	r2, [r7, #3]
 80130ba:	4611      	mov	r1, r2
 80130bc:	4618      	mov	r0, r3
 80130be:	f7f4 fe5d 	bl	8007d7c <HAL_PCD_EP_Close>
 80130c2:	4603      	mov	r3, r0
 80130c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80130c6:	7bfb      	ldrb	r3, [r7, #15]
 80130c8:	4618      	mov	r0, r3
 80130ca:	f000 f90f 	bl	80132ec <USBD_Get_USB_Status>
 80130ce:	4603      	mov	r3, r0
 80130d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	3710      	adds	r7, #16
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}

080130dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b084      	sub	sp, #16
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	460b      	mov	r3, r1
 80130e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130e8:	2300      	movs	r3, #0
 80130ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130ec:	2300      	movs	r3, #0
 80130ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130f6:	78fa      	ldrb	r2, [r7, #3]
 80130f8:	4611      	mov	r1, r2
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7f4 ff06 	bl	8007f0c <HAL_PCD_EP_SetStall>
 8013100:	4603      	mov	r3, r0
 8013102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013104:	7bfb      	ldrb	r3, [r7, #15]
 8013106:	4618      	mov	r0, r3
 8013108:	f000 f8f0 	bl	80132ec <USBD_Get_USB_Status>
 801310c:	4603      	mov	r3, r0
 801310e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013110:	7bbb      	ldrb	r3, [r7, #14]
}
 8013112:	4618      	mov	r0, r3
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}

0801311a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801311a:	b580      	push	{r7, lr}
 801311c:	b084      	sub	sp, #16
 801311e:	af00      	add	r7, sp, #0
 8013120:	6078      	str	r0, [r7, #4]
 8013122:	460b      	mov	r3, r1
 8013124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013126:	2300      	movs	r3, #0
 8013128:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801312a:	2300      	movs	r3, #0
 801312c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013134:	78fa      	ldrb	r2, [r7, #3]
 8013136:	4611      	mov	r1, r2
 8013138:	4618      	mov	r0, r3
 801313a:	f7f4 ff39 	bl	8007fb0 <HAL_PCD_EP_ClrStall>
 801313e:	4603      	mov	r3, r0
 8013140:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013142:	7bfb      	ldrb	r3, [r7, #15]
 8013144:	4618      	mov	r0, r3
 8013146:	f000 f8d1 	bl	80132ec <USBD_Get_USB_Status>
 801314a:	4603      	mov	r3, r0
 801314c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801314e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013150:	4618      	mov	r0, r3
 8013152:	3710      	adds	r7, #16
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}

08013158 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013158:	b480      	push	{r7}
 801315a:	b085      	sub	sp, #20
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
 8013160:	460b      	mov	r3, r1
 8013162:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801316a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801316c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013170:	2b00      	cmp	r3, #0
 8013172:	da0c      	bge.n	801318e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013174:	78fb      	ldrb	r3, [r7, #3]
 8013176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801317a:	68f9      	ldr	r1, [r7, #12]
 801317c:	1c5a      	adds	r2, r3, #1
 801317e:	4613      	mov	r3, r2
 8013180:	009b      	lsls	r3, r3, #2
 8013182:	4413      	add	r3, r2
 8013184:	00db      	lsls	r3, r3, #3
 8013186:	440b      	add	r3, r1
 8013188:	3302      	adds	r3, #2
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	e00b      	b.n	80131a6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801318e:	78fb      	ldrb	r3, [r7, #3]
 8013190:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013194:	68f9      	ldr	r1, [r7, #12]
 8013196:	4613      	mov	r3, r2
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	4413      	add	r3, r2
 801319c:	00db      	lsls	r3, r3, #3
 801319e:	440b      	add	r3, r1
 80131a0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80131a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3714      	adds	r7, #20
 80131aa:	46bd      	mov	sp, r7
 80131ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b0:	4770      	bx	lr

080131b2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b084      	sub	sp, #16
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
 80131ba:	460b      	mov	r3, r1
 80131bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131be:	2300      	movs	r3, #0
 80131c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131c2:	2300      	movs	r3, #0
 80131c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80131cc:	78fa      	ldrb	r2, [r7, #3]
 80131ce:	4611      	mov	r1, r2
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7f4 fd51 	bl	8007c78 <HAL_PCD_SetAddress>
 80131d6:	4603      	mov	r3, r0
 80131d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131da:	7bfb      	ldrb	r3, [r7, #15]
 80131dc:	4618      	mov	r0, r3
 80131de:	f000 f885 	bl	80132ec <USBD_Get_USB_Status>
 80131e2:	4603      	mov	r3, r0
 80131e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3710      	adds	r7, #16
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b086      	sub	sp, #24
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	60f8      	str	r0, [r7, #12]
 80131f8:	607a      	str	r2, [r7, #4]
 80131fa:	461a      	mov	r2, r3
 80131fc:	460b      	mov	r3, r1
 80131fe:	72fb      	strb	r3, [r7, #11]
 8013200:	4613      	mov	r3, r2
 8013202:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013204:	2300      	movs	r3, #0
 8013206:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013208:	2300      	movs	r3, #0
 801320a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013212:	893b      	ldrh	r3, [r7, #8]
 8013214:	7af9      	ldrb	r1, [r7, #11]
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	f7f4 fe41 	bl	8007e9e <HAL_PCD_EP_Transmit>
 801321c:	4603      	mov	r3, r0
 801321e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013220:	7dfb      	ldrb	r3, [r7, #23]
 8013222:	4618      	mov	r0, r3
 8013224:	f000 f862 	bl	80132ec <USBD_Get_USB_Status>
 8013228:	4603      	mov	r3, r0
 801322a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801322c:	7dbb      	ldrb	r3, [r7, #22]
}
 801322e:	4618      	mov	r0, r3
 8013230:	3718      	adds	r7, #24
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}

08013236 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013236:	b580      	push	{r7, lr}
 8013238:	b086      	sub	sp, #24
 801323a:	af00      	add	r7, sp, #0
 801323c:	60f8      	str	r0, [r7, #12]
 801323e:	607a      	str	r2, [r7, #4]
 8013240:	461a      	mov	r2, r3
 8013242:	460b      	mov	r3, r1
 8013244:	72fb      	strb	r3, [r7, #11]
 8013246:	4613      	mov	r3, r2
 8013248:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801324a:	2300      	movs	r3, #0
 801324c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801324e:	2300      	movs	r3, #0
 8013250:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013258:	893b      	ldrh	r3, [r7, #8]
 801325a:	7af9      	ldrb	r1, [r7, #11]
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	f7f4 fdd5 	bl	8007e0c <HAL_PCD_EP_Receive>
 8013262:	4603      	mov	r3, r0
 8013264:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013266:	7dfb      	ldrb	r3, [r7, #23]
 8013268:	4618      	mov	r0, r3
 801326a:	f000 f83f 	bl	80132ec <USBD_Get_USB_Status>
 801326e:	4603      	mov	r3, r0
 8013270:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013272:	7dbb      	ldrb	r3, [r7, #22]
}
 8013274:	4618      	mov	r0, r3
 8013276:	3718      	adds	r7, #24
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	460b      	mov	r3, r1
 8013286:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801328e:	78fa      	ldrb	r2, [r7, #3]
 8013290:	4611      	mov	r1, r2
 8013292:	4618      	mov	r0, r3
 8013294:	f7f4 fdeb 	bl	8007e6e <HAL_PCD_EP_GetRxCount>
 8013298:	4603      	mov	r3, r0
}
 801329a:	4618      	mov	r0, r3
 801329c:	3708      	adds	r7, #8
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}
	...

080132a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b083      	sub	sp, #12
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80132ac:	4b03      	ldr	r3, [pc, #12]	; (80132bc <USBD_static_malloc+0x18>)
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	370c      	adds	r7, #12
 80132b2:	46bd      	mov	sp, r7
 80132b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b8:	4770      	bx	lr
 80132ba:	bf00      	nop
 80132bc:	200029e8 	.word	0x200029e8

080132c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]

}
 80132c8:	bf00      	nop
 80132ca:	370c      	adds	r7, #12
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr

080132d4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	460b      	mov	r3, r1
 80132de:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80132e0:	bf00      	nop
 80132e2:	370c      	adds	r7, #12
 80132e4:	46bd      	mov	sp, r7
 80132e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ea:	4770      	bx	lr

080132ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80132ec:	b480      	push	{r7}
 80132ee:	b085      	sub	sp, #20
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	4603      	mov	r3, r0
 80132f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132f6:	2300      	movs	r3, #0
 80132f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80132fa:	79fb      	ldrb	r3, [r7, #7]
 80132fc:	2b03      	cmp	r3, #3
 80132fe:	d817      	bhi.n	8013330 <USBD_Get_USB_Status+0x44>
 8013300:	a201      	add	r2, pc, #4	; (adr r2, 8013308 <USBD_Get_USB_Status+0x1c>)
 8013302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013306:	bf00      	nop
 8013308:	08013319 	.word	0x08013319
 801330c:	0801331f 	.word	0x0801331f
 8013310:	08013325 	.word	0x08013325
 8013314:	0801332b 	.word	0x0801332b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013318:	2300      	movs	r3, #0
 801331a:	73fb      	strb	r3, [r7, #15]
    break;
 801331c:	e00b      	b.n	8013336 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801331e:	2302      	movs	r3, #2
 8013320:	73fb      	strb	r3, [r7, #15]
    break;
 8013322:	e008      	b.n	8013336 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013324:	2301      	movs	r3, #1
 8013326:	73fb      	strb	r3, [r7, #15]
    break;
 8013328:	e005      	b.n	8013336 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801332a:	2302      	movs	r3, #2
 801332c:	73fb      	strb	r3, [r7, #15]
    break;
 801332e:	e002      	b.n	8013336 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013330:	2302      	movs	r3, #2
 8013332:	73fb      	strb	r3, [r7, #15]
    break;
 8013334:	bf00      	nop
  }
  return usb_status;
 8013336:	7bfb      	ldrb	r3, [r7, #15]
}
 8013338:	4618      	mov	r0, r3
 801333a:	3714      	adds	r7, #20
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr

08013344 <__cvt>:
 8013344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013348:	ec55 4b10 	vmov	r4, r5, d0
 801334c:	2d00      	cmp	r5, #0
 801334e:	460e      	mov	r6, r1
 8013350:	4619      	mov	r1, r3
 8013352:	462b      	mov	r3, r5
 8013354:	bfbb      	ittet	lt
 8013356:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801335a:	461d      	movlt	r5, r3
 801335c:	2300      	movge	r3, #0
 801335e:	232d      	movlt	r3, #45	; 0x2d
 8013360:	700b      	strb	r3, [r1, #0]
 8013362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013364:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013368:	4691      	mov	r9, r2
 801336a:	f023 0820 	bic.w	r8, r3, #32
 801336e:	bfbc      	itt	lt
 8013370:	4622      	movlt	r2, r4
 8013372:	4614      	movlt	r4, r2
 8013374:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013378:	d005      	beq.n	8013386 <__cvt+0x42>
 801337a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801337e:	d100      	bne.n	8013382 <__cvt+0x3e>
 8013380:	3601      	adds	r6, #1
 8013382:	2102      	movs	r1, #2
 8013384:	e000      	b.n	8013388 <__cvt+0x44>
 8013386:	2103      	movs	r1, #3
 8013388:	ab03      	add	r3, sp, #12
 801338a:	9301      	str	r3, [sp, #4]
 801338c:	ab02      	add	r3, sp, #8
 801338e:	9300      	str	r3, [sp, #0]
 8013390:	ec45 4b10 	vmov	d0, r4, r5
 8013394:	4653      	mov	r3, sl
 8013396:	4632      	mov	r2, r6
 8013398:	f000 fe76 	bl	8014088 <_dtoa_r>
 801339c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80133a0:	4607      	mov	r7, r0
 80133a2:	d102      	bne.n	80133aa <__cvt+0x66>
 80133a4:	f019 0f01 	tst.w	r9, #1
 80133a8:	d022      	beq.n	80133f0 <__cvt+0xac>
 80133aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80133ae:	eb07 0906 	add.w	r9, r7, r6
 80133b2:	d110      	bne.n	80133d6 <__cvt+0x92>
 80133b4:	783b      	ldrb	r3, [r7, #0]
 80133b6:	2b30      	cmp	r3, #48	; 0x30
 80133b8:	d10a      	bne.n	80133d0 <__cvt+0x8c>
 80133ba:	2200      	movs	r2, #0
 80133bc:	2300      	movs	r3, #0
 80133be:	4620      	mov	r0, r4
 80133c0:	4629      	mov	r1, r5
 80133c2:	f7ed fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 80133c6:	b918      	cbnz	r0, 80133d0 <__cvt+0x8c>
 80133c8:	f1c6 0601 	rsb	r6, r6, #1
 80133cc:	f8ca 6000 	str.w	r6, [sl]
 80133d0:	f8da 3000 	ldr.w	r3, [sl]
 80133d4:	4499      	add	r9, r3
 80133d6:	2200      	movs	r2, #0
 80133d8:	2300      	movs	r3, #0
 80133da:	4620      	mov	r0, r4
 80133dc:	4629      	mov	r1, r5
 80133de:	f7ed fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 80133e2:	b108      	cbz	r0, 80133e8 <__cvt+0xa4>
 80133e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80133e8:	2230      	movs	r2, #48	; 0x30
 80133ea:	9b03      	ldr	r3, [sp, #12]
 80133ec:	454b      	cmp	r3, r9
 80133ee:	d307      	bcc.n	8013400 <__cvt+0xbc>
 80133f0:	9b03      	ldr	r3, [sp, #12]
 80133f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80133f4:	1bdb      	subs	r3, r3, r7
 80133f6:	4638      	mov	r0, r7
 80133f8:	6013      	str	r3, [r2, #0]
 80133fa:	b004      	add	sp, #16
 80133fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013400:	1c59      	adds	r1, r3, #1
 8013402:	9103      	str	r1, [sp, #12]
 8013404:	701a      	strb	r2, [r3, #0]
 8013406:	e7f0      	b.n	80133ea <__cvt+0xa6>

08013408 <__exponent>:
 8013408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801340a:	4603      	mov	r3, r0
 801340c:	2900      	cmp	r1, #0
 801340e:	bfb8      	it	lt
 8013410:	4249      	neglt	r1, r1
 8013412:	f803 2b02 	strb.w	r2, [r3], #2
 8013416:	bfb4      	ite	lt
 8013418:	222d      	movlt	r2, #45	; 0x2d
 801341a:	222b      	movge	r2, #43	; 0x2b
 801341c:	2909      	cmp	r1, #9
 801341e:	7042      	strb	r2, [r0, #1]
 8013420:	dd2a      	ble.n	8013478 <__exponent+0x70>
 8013422:	f10d 0207 	add.w	r2, sp, #7
 8013426:	4617      	mov	r7, r2
 8013428:	260a      	movs	r6, #10
 801342a:	4694      	mov	ip, r2
 801342c:	fb91 f5f6 	sdiv	r5, r1, r6
 8013430:	fb06 1415 	mls	r4, r6, r5, r1
 8013434:	3430      	adds	r4, #48	; 0x30
 8013436:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801343a:	460c      	mov	r4, r1
 801343c:	2c63      	cmp	r4, #99	; 0x63
 801343e:	f102 32ff 	add.w	r2, r2, #4294967295
 8013442:	4629      	mov	r1, r5
 8013444:	dcf1      	bgt.n	801342a <__exponent+0x22>
 8013446:	3130      	adds	r1, #48	; 0x30
 8013448:	f1ac 0402 	sub.w	r4, ip, #2
 801344c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013450:	1c41      	adds	r1, r0, #1
 8013452:	4622      	mov	r2, r4
 8013454:	42ba      	cmp	r2, r7
 8013456:	d30a      	bcc.n	801346e <__exponent+0x66>
 8013458:	f10d 0209 	add.w	r2, sp, #9
 801345c:	eba2 020c 	sub.w	r2, r2, ip
 8013460:	42bc      	cmp	r4, r7
 8013462:	bf88      	it	hi
 8013464:	2200      	movhi	r2, #0
 8013466:	4413      	add	r3, r2
 8013468:	1a18      	subs	r0, r3, r0
 801346a:	b003      	add	sp, #12
 801346c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801346e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013472:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013476:	e7ed      	b.n	8013454 <__exponent+0x4c>
 8013478:	2330      	movs	r3, #48	; 0x30
 801347a:	3130      	adds	r1, #48	; 0x30
 801347c:	7083      	strb	r3, [r0, #2]
 801347e:	70c1      	strb	r1, [r0, #3]
 8013480:	1d03      	adds	r3, r0, #4
 8013482:	e7f1      	b.n	8013468 <__exponent+0x60>

08013484 <_printf_float>:
 8013484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013488:	ed2d 8b02 	vpush	{d8}
 801348c:	b08d      	sub	sp, #52	; 0x34
 801348e:	460c      	mov	r4, r1
 8013490:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013494:	4616      	mov	r6, r2
 8013496:	461f      	mov	r7, r3
 8013498:	4605      	mov	r5, r0
 801349a:	f000 fcf5 	bl	8013e88 <_localeconv_r>
 801349e:	f8d0 a000 	ldr.w	sl, [r0]
 80134a2:	4650      	mov	r0, sl
 80134a4:	f7ec fee4 	bl	8000270 <strlen>
 80134a8:	2300      	movs	r3, #0
 80134aa:	930a      	str	r3, [sp, #40]	; 0x28
 80134ac:	6823      	ldr	r3, [r4, #0]
 80134ae:	9305      	str	r3, [sp, #20]
 80134b0:	f8d8 3000 	ldr.w	r3, [r8]
 80134b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80134b8:	3307      	adds	r3, #7
 80134ba:	f023 0307 	bic.w	r3, r3, #7
 80134be:	f103 0208 	add.w	r2, r3, #8
 80134c2:	f8c8 2000 	str.w	r2, [r8]
 80134c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80134ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80134ce:	9307      	str	r3, [sp, #28]
 80134d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80134d4:	ee08 0a10 	vmov	s16, r0
 80134d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80134dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134e0:	4b9e      	ldr	r3, [pc, #632]	; (801375c <_printf_float+0x2d8>)
 80134e2:	f04f 32ff 	mov.w	r2, #4294967295
 80134e6:	f7ed fb21 	bl	8000b2c <__aeabi_dcmpun>
 80134ea:	bb88      	cbnz	r0, 8013550 <_printf_float+0xcc>
 80134ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134f0:	4b9a      	ldr	r3, [pc, #616]	; (801375c <_printf_float+0x2d8>)
 80134f2:	f04f 32ff 	mov.w	r2, #4294967295
 80134f6:	f7ed fafb 	bl	8000af0 <__aeabi_dcmple>
 80134fa:	bb48      	cbnz	r0, 8013550 <_printf_float+0xcc>
 80134fc:	2200      	movs	r2, #0
 80134fe:	2300      	movs	r3, #0
 8013500:	4640      	mov	r0, r8
 8013502:	4649      	mov	r1, r9
 8013504:	f7ed faea 	bl	8000adc <__aeabi_dcmplt>
 8013508:	b110      	cbz	r0, 8013510 <_printf_float+0x8c>
 801350a:	232d      	movs	r3, #45	; 0x2d
 801350c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013510:	4a93      	ldr	r2, [pc, #588]	; (8013760 <_printf_float+0x2dc>)
 8013512:	4b94      	ldr	r3, [pc, #592]	; (8013764 <_printf_float+0x2e0>)
 8013514:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013518:	bf94      	ite	ls
 801351a:	4690      	movls	r8, r2
 801351c:	4698      	movhi	r8, r3
 801351e:	2303      	movs	r3, #3
 8013520:	6123      	str	r3, [r4, #16]
 8013522:	9b05      	ldr	r3, [sp, #20]
 8013524:	f023 0304 	bic.w	r3, r3, #4
 8013528:	6023      	str	r3, [r4, #0]
 801352a:	f04f 0900 	mov.w	r9, #0
 801352e:	9700      	str	r7, [sp, #0]
 8013530:	4633      	mov	r3, r6
 8013532:	aa0b      	add	r2, sp, #44	; 0x2c
 8013534:	4621      	mov	r1, r4
 8013536:	4628      	mov	r0, r5
 8013538:	f000 f9da 	bl	80138f0 <_printf_common>
 801353c:	3001      	adds	r0, #1
 801353e:	f040 8090 	bne.w	8013662 <_printf_float+0x1de>
 8013542:	f04f 30ff 	mov.w	r0, #4294967295
 8013546:	b00d      	add	sp, #52	; 0x34
 8013548:	ecbd 8b02 	vpop	{d8}
 801354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013550:	4642      	mov	r2, r8
 8013552:	464b      	mov	r3, r9
 8013554:	4640      	mov	r0, r8
 8013556:	4649      	mov	r1, r9
 8013558:	f7ed fae8 	bl	8000b2c <__aeabi_dcmpun>
 801355c:	b140      	cbz	r0, 8013570 <_printf_float+0xec>
 801355e:	464b      	mov	r3, r9
 8013560:	2b00      	cmp	r3, #0
 8013562:	bfbc      	itt	lt
 8013564:	232d      	movlt	r3, #45	; 0x2d
 8013566:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801356a:	4a7f      	ldr	r2, [pc, #508]	; (8013768 <_printf_float+0x2e4>)
 801356c:	4b7f      	ldr	r3, [pc, #508]	; (801376c <_printf_float+0x2e8>)
 801356e:	e7d1      	b.n	8013514 <_printf_float+0x90>
 8013570:	6863      	ldr	r3, [r4, #4]
 8013572:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013576:	9206      	str	r2, [sp, #24]
 8013578:	1c5a      	adds	r2, r3, #1
 801357a:	d13f      	bne.n	80135fc <_printf_float+0x178>
 801357c:	2306      	movs	r3, #6
 801357e:	6063      	str	r3, [r4, #4]
 8013580:	9b05      	ldr	r3, [sp, #20]
 8013582:	6861      	ldr	r1, [r4, #4]
 8013584:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013588:	2300      	movs	r3, #0
 801358a:	9303      	str	r3, [sp, #12]
 801358c:	ab0a      	add	r3, sp, #40	; 0x28
 801358e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013592:	ab09      	add	r3, sp, #36	; 0x24
 8013594:	ec49 8b10 	vmov	d0, r8, r9
 8013598:	9300      	str	r3, [sp, #0]
 801359a:	6022      	str	r2, [r4, #0]
 801359c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80135a0:	4628      	mov	r0, r5
 80135a2:	f7ff fecf 	bl	8013344 <__cvt>
 80135a6:	9b06      	ldr	r3, [sp, #24]
 80135a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135aa:	2b47      	cmp	r3, #71	; 0x47
 80135ac:	4680      	mov	r8, r0
 80135ae:	d108      	bne.n	80135c2 <_printf_float+0x13e>
 80135b0:	1cc8      	adds	r0, r1, #3
 80135b2:	db02      	blt.n	80135ba <_printf_float+0x136>
 80135b4:	6863      	ldr	r3, [r4, #4]
 80135b6:	4299      	cmp	r1, r3
 80135b8:	dd41      	ble.n	801363e <_printf_float+0x1ba>
 80135ba:	f1ab 0302 	sub.w	r3, fp, #2
 80135be:	fa5f fb83 	uxtb.w	fp, r3
 80135c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80135c6:	d820      	bhi.n	801360a <_printf_float+0x186>
 80135c8:	3901      	subs	r1, #1
 80135ca:	465a      	mov	r2, fp
 80135cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80135d0:	9109      	str	r1, [sp, #36]	; 0x24
 80135d2:	f7ff ff19 	bl	8013408 <__exponent>
 80135d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135d8:	1813      	adds	r3, r2, r0
 80135da:	2a01      	cmp	r2, #1
 80135dc:	4681      	mov	r9, r0
 80135de:	6123      	str	r3, [r4, #16]
 80135e0:	dc02      	bgt.n	80135e8 <_printf_float+0x164>
 80135e2:	6822      	ldr	r2, [r4, #0]
 80135e4:	07d2      	lsls	r2, r2, #31
 80135e6:	d501      	bpl.n	80135ec <_printf_float+0x168>
 80135e8:	3301      	adds	r3, #1
 80135ea:	6123      	str	r3, [r4, #16]
 80135ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d09c      	beq.n	801352e <_printf_float+0xaa>
 80135f4:	232d      	movs	r3, #45	; 0x2d
 80135f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135fa:	e798      	b.n	801352e <_printf_float+0xaa>
 80135fc:	9a06      	ldr	r2, [sp, #24]
 80135fe:	2a47      	cmp	r2, #71	; 0x47
 8013600:	d1be      	bne.n	8013580 <_printf_float+0xfc>
 8013602:	2b00      	cmp	r3, #0
 8013604:	d1bc      	bne.n	8013580 <_printf_float+0xfc>
 8013606:	2301      	movs	r3, #1
 8013608:	e7b9      	b.n	801357e <_printf_float+0xfa>
 801360a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801360e:	d118      	bne.n	8013642 <_printf_float+0x1be>
 8013610:	2900      	cmp	r1, #0
 8013612:	6863      	ldr	r3, [r4, #4]
 8013614:	dd0b      	ble.n	801362e <_printf_float+0x1aa>
 8013616:	6121      	str	r1, [r4, #16]
 8013618:	b913      	cbnz	r3, 8013620 <_printf_float+0x19c>
 801361a:	6822      	ldr	r2, [r4, #0]
 801361c:	07d0      	lsls	r0, r2, #31
 801361e:	d502      	bpl.n	8013626 <_printf_float+0x1a2>
 8013620:	3301      	adds	r3, #1
 8013622:	440b      	add	r3, r1
 8013624:	6123      	str	r3, [r4, #16]
 8013626:	65a1      	str	r1, [r4, #88]	; 0x58
 8013628:	f04f 0900 	mov.w	r9, #0
 801362c:	e7de      	b.n	80135ec <_printf_float+0x168>
 801362e:	b913      	cbnz	r3, 8013636 <_printf_float+0x1b2>
 8013630:	6822      	ldr	r2, [r4, #0]
 8013632:	07d2      	lsls	r2, r2, #31
 8013634:	d501      	bpl.n	801363a <_printf_float+0x1b6>
 8013636:	3302      	adds	r3, #2
 8013638:	e7f4      	b.n	8013624 <_printf_float+0x1a0>
 801363a:	2301      	movs	r3, #1
 801363c:	e7f2      	b.n	8013624 <_printf_float+0x1a0>
 801363e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013644:	4299      	cmp	r1, r3
 8013646:	db05      	blt.n	8013654 <_printf_float+0x1d0>
 8013648:	6823      	ldr	r3, [r4, #0]
 801364a:	6121      	str	r1, [r4, #16]
 801364c:	07d8      	lsls	r0, r3, #31
 801364e:	d5ea      	bpl.n	8013626 <_printf_float+0x1a2>
 8013650:	1c4b      	adds	r3, r1, #1
 8013652:	e7e7      	b.n	8013624 <_printf_float+0x1a0>
 8013654:	2900      	cmp	r1, #0
 8013656:	bfd4      	ite	le
 8013658:	f1c1 0202 	rsble	r2, r1, #2
 801365c:	2201      	movgt	r2, #1
 801365e:	4413      	add	r3, r2
 8013660:	e7e0      	b.n	8013624 <_printf_float+0x1a0>
 8013662:	6823      	ldr	r3, [r4, #0]
 8013664:	055a      	lsls	r2, r3, #21
 8013666:	d407      	bmi.n	8013678 <_printf_float+0x1f4>
 8013668:	6923      	ldr	r3, [r4, #16]
 801366a:	4642      	mov	r2, r8
 801366c:	4631      	mov	r1, r6
 801366e:	4628      	mov	r0, r5
 8013670:	47b8      	blx	r7
 8013672:	3001      	adds	r0, #1
 8013674:	d12c      	bne.n	80136d0 <_printf_float+0x24c>
 8013676:	e764      	b.n	8013542 <_printf_float+0xbe>
 8013678:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801367c:	f240 80e0 	bls.w	8013840 <_printf_float+0x3bc>
 8013680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013684:	2200      	movs	r2, #0
 8013686:	2300      	movs	r3, #0
 8013688:	f7ed fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 801368c:	2800      	cmp	r0, #0
 801368e:	d034      	beq.n	80136fa <_printf_float+0x276>
 8013690:	4a37      	ldr	r2, [pc, #220]	; (8013770 <_printf_float+0x2ec>)
 8013692:	2301      	movs	r3, #1
 8013694:	4631      	mov	r1, r6
 8013696:	4628      	mov	r0, r5
 8013698:	47b8      	blx	r7
 801369a:	3001      	adds	r0, #1
 801369c:	f43f af51 	beq.w	8013542 <_printf_float+0xbe>
 80136a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136a4:	429a      	cmp	r2, r3
 80136a6:	db02      	blt.n	80136ae <_printf_float+0x22a>
 80136a8:	6823      	ldr	r3, [r4, #0]
 80136aa:	07d8      	lsls	r0, r3, #31
 80136ac:	d510      	bpl.n	80136d0 <_printf_float+0x24c>
 80136ae:	ee18 3a10 	vmov	r3, s16
 80136b2:	4652      	mov	r2, sl
 80136b4:	4631      	mov	r1, r6
 80136b6:	4628      	mov	r0, r5
 80136b8:	47b8      	blx	r7
 80136ba:	3001      	adds	r0, #1
 80136bc:	f43f af41 	beq.w	8013542 <_printf_float+0xbe>
 80136c0:	f04f 0800 	mov.w	r8, #0
 80136c4:	f104 091a 	add.w	r9, r4, #26
 80136c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136ca:	3b01      	subs	r3, #1
 80136cc:	4543      	cmp	r3, r8
 80136ce:	dc09      	bgt.n	80136e4 <_printf_float+0x260>
 80136d0:	6823      	ldr	r3, [r4, #0]
 80136d2:	079b      	lsls	r3, r3, #30
 80136d4:	f100 8107 	bmi.w	80138e6 <_printf_float+0x462>
 80136d8:	68e0      	ldr	r0, [r4, #12]
 80136da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136dc:	4298      	cmp	r0, r3
 80136de:	bfb8      	it	lt
 80136e0:	4618      	movlt	r0, r3
 80136e2:	e730      	b.n	8013546 <_printf_float+0xc2>
 80136e4:	2301      	movs	r3, #1
 80136e6:	464a      	mov	r2, r9
 80136e8:	4631      	mov	r1, r6
 80136ea:	4628      	mov	r0, r5
 80136ec:	47b8      	blx	r7
 80136ee:	3001      	adds	r0, #1
 80136f0:	f43f af27 	beq.w	8013542 <_printf_float+0xbe>
 80136f4:	f108 0801 	add.w	r8, r8, #1
 80136f8:	e7e6      	b.n	80136c8 <_printf_float+0x244>
 80136fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	dc39      	bgt.n	8013774 <_printf_float+0x2f0>
 8013700:	4a1b      	ldr	r2, [pc, #108]	; (8013770 <_printf_float+0x2ec>)
 8013702:	2301      	movs	r3, #1
 8013704:	4631      	mov	r1, r6
 8013706:	4628      	mov	r0, r5
 8013708:	47b8      	blx	r7
 801370a:	3001      	adds	r0, #1
 801370c:	f43f af19 	beq.w	8013542 <_printf_float+0xbe>
 8013710:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013714:	4313      	orrs	r3, r2
 8013716:	d102      	bne.n	801371e <_printf_float+0x29a>
 8013718:	6823      	ldr	r3, [r4, #0]
 801371a:	07d9      	lsls	r1, r3, #31
 801371c:	d5d8      	bpl.n	80136d0 <_printf_float+0x24c>
 801371e:	ee18 3a10 	vmov	r3, s16
 8013722:	4652      	mov	r2, sl
 8013724:	4631      	mov	r1, r6
 8013726:	4628      	mov	r0, r5
 8013728:	47b8      	blx	r7
 801372a:	3001      	adds	r0, #1
 801372c:	f43f af09 	beq.w	8013542 <_printf_float+0xbe>
 8013730:	f04f 0900 	mov.w	r9, #0
 8013734:	f104 0a1a 	add.w	sl, r4, #26
 8013738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801373a:	425b      	negs	r3, r3
 801373c:	454b      	cmp	r3, r9
 801373e:	dc01      	bgt.n	8013744 <_printf_float+0x2c0>
 8013740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013742:	e792      	b.n	801366a <_printf_float+0x1e6>
 8013744:	2301      	movs	r3, #1
 8013746:	4652      	mov	r2, sl
 8013748:	4631      	mov	r1, r6
 801374a:	4628      	mov	r0, r5
 801374c:	47b8      	blx	r7
 801374e:	3001      	adds	r0, #1
 8013750:	f43f aef7 	beq.w	8013542 <_printf_float+0xbe>
 8013754:	f109 0901 	add.w	r9, r9, #1
 8013758:	e7ee      	b.n	8013738 <_printf_float+0x2b4>
 801375a:	bf00      	nop
 801375c:	7fefffff 	.word	0x7fefffff
 8013760:	080374b0 	.word	0x080374b0
 8013764:	080374b4 	.word	0x080374b4
 8013768:	080374b8 	.word	0x080374b8
 801376c:	080374bc 	.word	0x080374bc
 8013770:	080374c0 	.word	0x080374c0
 8013774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013778:	429a      	cmp	r2, r3
 801377a:	bfa8      	it	ge
 801377c:	461a      	movge	r2, r3
 801377e:	2a00      	cmp	r2, #0
 8013780:	4691      	mov	r9, r2
 8013782:	dc37      	bgt.n	80137f4 <_printf_float+0x370>
 8013784:	f04f 0b00 	mov.w	fp, #0
 8013788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801378c:	f104 021a 	add.w	r2, r4, #26
 8013790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013792:	9305      	str	r3, [sp, #20]
 8013794:	eba3 0309 	sub.w	r3, r3, r9
 8013798:	455b      	cmp	r3, fp
 801379a:	dc33      	bgt.n	8013804 <_printf_float+0x380>
 801379c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137a0:	429a      	cmp	r2, r3
 80137a2:	db3b      	blt.n	801381c <_printf_float+0x398>
 80137a4:	6823      	ldr	r3, [r4, #0]
 80137a6:	07da      	lsls	r2, r3, #31
 80137a8:	d438      	bmi.n	801381c <_printf_float+0x398>
 80137aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80137ae:	eba2 0903 	sub.w	r9, r2, r3
 80137b2:	9b05      	ldr	r3, [sp, #20]
 80137b4:	1ad2      	subs	r2, r2, r3
 80137b6:	4591      	cmp	r9, r2
 80137b8:	bfa8      	it	ge
 80137ba:	4691      	movge	r9, r2
 80137bc:	f1b9 0f00 	cmp.w	r9, #0
 80137c0:	dc35      	bgt.n	801382e <_printf_float+0x3aa>
 80137c2:	f04f 0800 	mov.w	r8, #0
 80137c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137ca:	f104 0a1a 	add.w	sl, r4, #26
 80137ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137d2:	1a9b      	subs	r3, r3, r2
 80137d4:	eba3 0309 	sub.w	r3, r3, r9
 80137d8:	4543      	cmp	r3, r8
 80137da:	f77f af79 	ble.w	80136d0 <_printf_float+0x24c>
 80137de:	2301      	movs	r3, #1
 80137e0:	4652      	mov	r2, sl
 80137e2:	4631      	mov	r1, r6
 80137e4:	4628      	mov	r0, r5
 80137e6:	47b8      	blx	r7
 80137e8:	3001      	adds	r0, #1
 80137ea:	f43f aeaa 	beq.w	8013542 <_printf_float+0xbe>
 80137ee:	f108 0801 	add.w	r8, r8, #1
 80137f2:	e7ec      	b.n	80137ce <_printf_float+0x34a>
 80137f4:	4613      	mov	r3, r2
 80137f6:	4631      	mov	r1, r6
 80137f8:	4642      	mov	r2, r8
 80137fa:	4628      	mov	r0, r5
 80137fc:	47b8      	blx	r7
 80137fe:	3001      	adds	r0, #1
 8013800:	d1c0      	bne.n	8013784 <_printf_float+0x300>
 8013802:	e69e      	b.n	8013542 <_printf_float+0xbe>
 8013804:	2301      	movs	r3, #1
 8013806:	4631      	mov	r1, r6
 8013808:	4628      	mov	r0, r5
 801380a:	9205      	str	r2, [sp, #20]
 801380c:	47b8      	blx	r7
 801380e:	3001      	adds	r0, #1
 8013810:	f43f ae97 	beq.w	8013542 <_printf_float+0xbe>
 8013814:	9a05      	ldr	r2, [sp, #20]
 8013816:	f10b 0b01 	add.w	fp, fp, #1
 801381a:	e7b9      	b.n	8013790 <_printf_float+0x30c>
 801381c:	ee18 3a10 	vmov	r3, s16
 8013820:	4652      	mov	r2, sl
 8013822:	4631      	mov	r1, r6
 8013824:	4628      	mov	r0, r5
 8013826:	47b8      	blx	r7
 8013828:	3001      	adds	r0, #1
 801382a:	d1be      	bne.n	80137aa <_printf_float+0x326>
 801382c:	e689      	b.n	8013542 <_printf_float+0xbe>
 801382e:	9a05      	ldr	r2, [sp, #20]
 8013830:	464b      	mov	r3, r9
 8013832:	4442      	add	r2, r8
 8013834:	4631      	mov	r1, r6
 8013836:	4628      	mov	r0, r5
 8013838:	47b8      	blx	r7
 801383a:	3001      	adds	r0, #1
 801383c:	d1c1      	bne.n	80137c2 <_printf_float+0x33e>
 801383e:	e680      	b.n	8013542 <_printf_float+0xbe>
 8013840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013842:	2a01      	cmp	r2, #1
 8013844:	dc01      	bgt.n	801384a <_printf_float+0x3c6>
 8013846:	07db      	lsls	r3, r3, #31
 8013848:	d53a      	bpl.n	80138c0 <_printf_float+0x43c>
 801384a:	2301      	movs	r3, #1
 801384c:	4642      	mov	r2, r8
 801384e:	4631      	mov	r1, r6
 8013850:	4628      	mov	r0, r5
 8013852:	47b8      	blx	r7
 8013854:	3001      	adds	r0, #1
 8013856:	f43f ae74 	beq.w	8013542 <_printf_float+0xbe>
 801385a:	ee18 3a10 	vmov	r3, s16
 801385e:	4652      	mov	r2, sl
 8013860:	4631      	mov	r1, r6
 8013862:	4628      	mov	r0, r5
 8013864:	47b8      	blx	r7
 8013866:	3001      	adds	r0, #1
 8013868:	f43f ae6b 	beq.w	8013542 <_printf_float+0xbe>
 801386c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013870:	2200      	movs	r2, #0
 8013872:	2300      	movs	r3, #0
 8013874:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013878:	f7ed f926 	bl	8000ac8 <__aeabi_dcmpeq>
 801387c:	b9d8      	cbnz	r0, 80138b6 <_printf_float+0x432>
 801387e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013882:	f108 0201 	add.w	r2, r8, #1
 8013886:	4631      	mov	r1, r6
 8013888:	4628      	mov	r0, r5
 801388a:	47b8      	blx	r7
 801388c:	3001      	adds	r0, #1
 801388e:	d10e      	bne.n	80138ae <_printf_float+0x42a>
 8013890:	e657      	b.n	8013542 <_printf_float+0xbe>
 8013892:	2301      	movs	r3, #1
 8013894:	4652      	mov	r2, sl
 8013896:	4631      	mov	r1, r6
 8013898:	4628      	mov	r0, r5
 801389a:	47b8      	blx	r7
 801389c:	3001      	adds	r0, #1
 801389e:	f43f ae50 	beq.w	8013542 <_printf_float+0xbe>
 80138a2:	f108 0801 	add.w	r8, r8, #1
 80138a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138a8:	3b01      	subs	r3, #1
 80138aa:	4543      	cmp	r3, r8
 80138ac:	dcf1      	bgt.n	8013892 <_printf_float+0x40e>
 80138ae:	464b      	mov	r3, r9
 80138b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80138b4:	e6da      	b.n	801366c <_printf_float+0x1e8>
 80138b6:	f04f 0800 	mov.w	r8, #0
 80138ba:	f104 0a1a 	add.w	sl, r4, #26
 80138be:	e7f2      	b.n	80138a6 <_printf_float+0x422>
 80138c0:	2301      	movs	r3, #1
 80138c2:	4642      	mov	r2, r8
 80138c4:	e7df      	b.n	8013886 <_printf_float+0x402>
 80138c6:	2301      	movs	r3, #1
 80138c8:	464a      	mov	r2, r9
 80138ca:	4631      	mov	r1, r6
 80138cc:	4628      	mov	r0, r5
 80138ce:	47b8      	blx	r7
 80138d0:	3001      	adds	r0, #1
 80138d2:	f43f ae36 	beq.w	8013542 <_printf_float+0xbe>
 80138d6:	f108 0801 	add.w	r8, r8, #1
 80138da:	68e3      	ldr	r3, [r4, #12]
 80138dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80138de:	1a5b      	subs	r3, r3, r1
 80138e0:	4543      	cmp	r3, r8
 80138e2:	dcf0      	bgt.n	80138c6 <_printf_float+0x442>
 80138e4:	e6f8      	b.n	80136d8 <_printf_float+0x254>
 80138e6:	f04f 0800 	mov.w	r8, #0
 80138ea:	f104 0919 	add.w	r9, r4, #25
 80138ee:	e7f4      	b.n	80138da <_printf_float+0x456>

080138f0 <_printf_common>:
 80138f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138f4:	4616      	mov	r6, r2
 80138f6:	4699      	mov	r9, r3
 80138f8:	688a      	ldr	r2, [r1, #8]
 80138fa:	690b      	ldr	r3, [r1, #16]
 80138fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013900:	4293      	cmp	r3, r2
 8013902:	bfb8      	it	lt
 8013904:	4613      	movlt	r3, r2
 8013906:	6033      	str	r3, [r6, #0]
 8013908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801390c:	4607      	mov	r7, r0
 801390e:	460c      	mov	r4, r1
 8013910:	b10a      	cbz	r2, 8013916 <_printf_common+0x26>
 8013912:	3301      	adds	r3, #1
 8013914:	6033      	str	r3, [r6, #0]
 8013916:	6823      	ldr	r3, [r4, #0]
 8013918:	0699      	lsls	r1, r3, #26
 801391a:	bf42      	ittt	mi
 801391c:	6833      	ldrmi	r3, [r6, #0]
 801391e:	3302      	addmi	r3, #2
 8013920:	6033      	strmi	r3, [r6, #0]
 8013922:	6825      	ldr	r5, [r4, #0]
 8013924:	f015 0506 	ands.w	r5, r5, #6
 8013928:	d106      	bne.n	8013938 <_printf_common+0x48>
 801392a:	f104 0a19 	add.w	sl, r4, #25
 801392e:	68e3      	ldr	r3, [r4, #12]
 8013930:	6832      	ldr	r2, [r6, #0]
 8013932:	1a9b      	subs	r3, r3, r2
 8013934:	42ab      	cmp	r3, r5
 8013936:	dc26      	bgt.n	8013986 <_printf_common+0x96>
 8013938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801393c:	1e13      	subs	r3, r2, #0
 801393e:	6822      	ldr	r2, [r4, #0]
 8013940:	bf18      	it	ne
 8013942:	2301      	movne	r3, #1
 8013944:	0692      	lsls	r2, r2, #26
 8013946:	d42b      	bmi.n	80139a0 <_printf_common+0xb0>
 8013948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801394c:	4649      	mov	r1, r9
 801394e:	4638      	mov	r0, r7
 8013950:	47c0      	blx	r8
 8013952:	3001      	adds	r0, #1
 8013954:	d01e      	beq.n	8013994 <_printf_common+0xa4>
 8013956:	6823      	ldr	r3, [r4, #0]
 8013958:	6922      	ldr	r2, [r4, #16]
 801395a:	f003 0306 	and.w	r3, r3, #6
 801395e:	2b04      	cmp	r3, #4
 8013960:	bf02      	ittt	eq
 8013962:	68e5      	ldreq	r5, [r4, #12]
 8013964:	6833      	ldreq	r3, [r6, #0]
 8013966:	1aed      	subeq	r5, r5, r3
 8013968:	68a3      	ldr	r3, [r4, #8]
 801396a:	bf0c      	ite	eq
 801396c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013970:	2500      	movne	r5, #0
 8013972:	4293      	cmp	r3, r2
 8013974:	bfc4      	itt	gt
 8013976:	1a9b      	subgt	r3, r3, r2
 8013978:	18ed      	addgt	r5, r5, r3
 801397a:	2600      	movs	r6, #0
 801397c:	341a      	adds	r4, #26
 801397e:	42b5      	cmp	r5, r6
 8013980:	d11a      	bne.n	80139b8 <_printf_common+0xc8>
 8013982:	2000      	movs	r0, #0
 8013984:	e008      	b.n	8013998 <_printf_common+0xa8>
 8013986:	2301      	movs	r3, #1
 8013988:	4652      	mov	r2, sl
 801398a:	4649      	mov	r1, r9
 801398c:	4638      	mov	r0, r7
 801398e:	47c0      	blx	r8
 8013990:	3001      	adds	r0, #1
 8013992:	d103      	bne.n	801399c <_printf_common+0xac>
 8013994:	f04f 30ff 	mov.w	r0, #4294967295
 8013998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801399c:	3501      	adds	r5, #1
 801399e:	e7c6      	b.n	801392e <_printf_common+0x3e>
 80139a0:	18e1      	adds	r1, r4, r3
 80139a2:	1c5a      	adds	r2, r3, #1
 80139a4:	2030      	movs	r0, #48	; 0x30
 80139a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80139aa:	4422      	add	r2, r4
 80139ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80139b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80139b4:	3302      	adds	r3, #2
 80139b6:	e7c7      	b.n	8013948 <_printf_common+0x58>
 80139b8:	2301      	movs	r3, #1
 80139ba:	4622      	mov	r2, r4
 80139bc:	4649      	mov	r1, r9
 80139be:	4638      	mov	r0, r7
 80139c0:	47c0      	blx	r8
 80139c2:	3001      	adds	r0, #1
 80139c4:	d0e6      	beq.n	8013994 <_printf_common+0xa4>
 80139c6:	3601      	adds	r6, #1
 80139c8:	e7d9      	b.n	801397e <_printf_common+0x8e>
	...

080139cc <_printf_i>:
 80139cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139d0:	7e0f      	ldrb	r7, [r1, #24]
 80139d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80139d4:	2f78      	cmp	r7, #120	; 0x78
 80139d6:	4691      	mov	r9, r2
 80139d8:	4680      	mov	r8, r0
 80139da:	460c      	mov	r4, r1
 80139dc:	469a      	mov	sl, r3
 80139de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80139e2:	d807      	bhi.n	80139f4 <_printf_i+0x28>
 80139e4:	2f62      	cmp	r7, #98	; 0x62
 80139e6:	d80a      	bhi.n	80139fe <_printf_i+0x32>
 80139e8:	2f00      	cmp	r7, #0
 80139ea:	f000 80d4 	beq.w	8013b96 <_printf_i+0x1ca>
 80139ee:	2f58      	cmp	r7, #88	; 0x58
 80139f0:	f000 80c0 	beq.w	8013b74 <_printf_i+0x1a8>
 80139f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80139f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80139fc:	e03a      	b.n	8013a74 <_printf_i+0xa8>
 80139fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013a02:	2b15      	cmp	r3, #21
 8013a04:	d8f6      	bhi.n	80139f4 <_printf_i+0x28>
 8013a06:	a101      	add	r1, pc, #4	; (adr r1, 8013a0c <_printf_i+0x40>)
 8013a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a0c:	08013a65 	.word	0x08013a65
 8013a10:	08013a79 	.word	0x08013a79
 8013a14:	080139f5 	.word	0x080139f5
 8013a18:	080139f5 	.word	0x080139f5
 8013a1c:	080139f5 	.word	0x080139f5
 8013a20:	080139f5 	.word	0x080139f5
 8013a24:	08013a79 	.word	0x08013a79
 8013a28:	080139f5 	.word	0x080139f5
 8013a2c:	080139f5 	.word	0x080139f5
 8013a30:	080139f5 	.word	0x080139f5
 8013a34:	080139f5 	.word	0x080139f5
 8013a38:	08013b7d 	.word	0x08013b7d
 8013a3c:	08013aa5 	.word	0x08013aa5
 8013a40:	08013b37 	.word	0x08013b37
 8013a44:	080139f5 	.word	0x080139f5
 8013a48:	080139f5 	.word	0x080139f5
 8013a4c:	08013b9f 	.word	0x08013b9f
 8013a50:	080139f5 	.word	0x080139f5
 8013a54:	08013aa5 	.word	0x08013aa5
 8013a58:	080139f5 	.word	0x080139f5
 8013a5c:	080139f5 	.word	0x080139f5
 8013a60:	08013b3f 	.word	0x08013b3f
 8013a64:	682b      	ldr	r3, [r5, #0]
 8013a66:	1d1a      	adds	r2, r3, #4
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	602a      	str	r2, [r5, #0]
 8013a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a74:	2301      	movs	r3, #1
 8013a76:	e09f      	b.n	8013bb8 <_printf_i+0x1ec>
 8013a78:	6820      	ldr	r0, [r4, #0]
 8013a7a:	682b      	ldr	r3, [r5, #0]
 8013a7c:	0607      	lsls	r7, r0, #24
 8013a7e:	f103 0104 	add.w	r1, r3, #4
 8013a82:	6029      	str	r1, [r5, #0]
 8013a84:	d501      	bpl.n	8013a8a <_printf_i+0xbe>
 8013a86:	681e      	ldr	r6, [r3, #0]
 8013a88:	e003      	b.n	8013a92 <_printf_i+0xc6>
 8013a8a:	0646      	lsls	r6, r0, #25
 8013a8c:	d5fb      	bpl.n	8013a86 <_printf_i+0xba>
 8013a8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013a92:	2e00      	cmp	r6, #0
 8013a94:	da03      	bge.n	8013a9e <_printf_i+0xd2>
 8013a96:	232d      	movs	r3, #45	; 0x2d
 8013a98:	4276      	negs	r6, r6
 8013a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a9e:	485a      	ldr	r0, [pc, #360]	; (8013c08 <_printf_i+0x23c>)
 8013aa0:	230a      	movs	r3, #10
 8013aa2:	e012      	b.n	8013aca <_printf_i+0xfe>
 8013aa4:	682b      	ldr	r3, [r5, #0]
 8013aa6:	6820      	ldr	r0, [r4, #0]
 8013aa8:	1d19      	adds	r1, r3, #4
 8013aaa:	6029      	str	r1, [r5, #0]
 8013aac:	0605      	lsls	r5, r0, #24
 8013aae:	d501      	bpl.n	8013ab4 <_printf_i+0xe8>
 8013ab0:	681e      	ldr	r6, [r3, #0]
 8013ab2:	e002      	b.n	8013aba <_printf_i+0xee>
 8013ab4:	0641      	lsls	r1, r0, #25
 8013ab6:	d5fb      	bpl.n	8013ab0 <_printf_i+0xe4>
 8013ab8:	881e      	ldrh	r6, [r3, #0]
 8013aba:	4853      	ldr	r0, [pc, #332]	; (8013c08 <_printf_i+0x23c>)
 8013abc:	2f6f      	cmp	r7, #111	; 0x6f
 8013abe:	bf0c      	ite	eq
 8013ac0:	2308      	moveq	r3, #8
 8013ac2:	230a      	movne	r3, #10
 8013ac4:	2100      	movs	r1, #0
 8013ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013aca:	6865      	ldr	r5, [r4, #4]
 8013acc:	60a5      	str	r5, [r4, #8]
 8013ace:	2d00      	cmp	r5, #0
 8013ad0:	bfa2      	ittt	ge
 8013ad2:	6821      	ldrge	r1, [r4, #0]
 8013ad4:	f021 0104 	bicge.w	r1, r1, #4
 8013ad8:	6021      	strge	r1, [r4, #0]
 8013ada:	b90e      	cbnz	r6, 8013ae0 <_printf_i+0x114>
 8013adc:	2d00      	cmp	r5, #0
 8013ade:	d04b      	beq.n	8013b78 <_printf_i+0x1ac>
 8013ae0:	4615      	mov	r5, r2
 8013ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8013ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8013aea:	5dc7      	ldrb	r7, [r0, r7]
 8013aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013af0:	4637      	mov	r7, r6
 8013af2:	42bb      	cmp	r3, r7
 8013af4:	460e      	mov	r6, r1
 8013af6:	d9f4      	bls.n	8013ae2 <_printf_i+0x116>
 8013af8:	2b08      	cmp	r3, #8
 8013afa:	d10b      	bne.n	8013b14 <_printf_i+0x148>
 8013afc:	6823      	ldr	r3, [r4, #0]
 8013afe:	07de      	lsls	r6, r3, #31
 8013b00:	d508      	bpl.n	8013b14 <_printf_i+0x148>
 8013b02:	6923      	ldr	r3, [r4, #16]
 8013b04:	6861      	ldr	r1, [r4, #4]
 8013b06:	4299      	cmp	r1, r3
 8013b08:	bfde      	ittt	le
 8013b0a:	2330      	movle	r3, #48	; 0x30
 8013b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013b10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013b14:	1b52      	subs	r2, r2, r5
 8013b16:	6122      	str	r2, [r4, #16]
 8013b18:	f8cd a000 	str.w	sl, [sp]
 8013b1c:	464b      	mov	r3, r9
 8013b1e:	aa03      	add	r2, sp, #12
 8013b20:	4621      	mov	r1, r4
 8013b22:	4640      	mov	r0, r8
 8013b24:	f7ff fee4 	bl	80138f0 <_printf_common>
 8013b28:	3001      	adds	r0, #1
 8013b2a:	d14a      	bne.n	8013bc2 <_printf_i+0x1f6>
 8013b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8013b30:	b004      	add	sp, #16
 8013b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b36:	6823      	ldr	r3, [r4, #0]
 8013b38:	f043 0320 	orr.w	r3, r3, #32
 8013b3c:	6023      	str	r3, [r4, #0]
 8013b3e:	4833      	ldr	r0, [pc, #204]	; (8013c0c <_printf_i+0x240>)
 8013b40:	2778      	movs	r7, #120	; 0x78
 8013b42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013b46:	6823      	ldr	r3, [r4, #0]
 8013b48:	6829      	ldr	r1, [r5, #0]
 8013b4a:	061f      	lsls	r7, r3, #24
 8013b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013b50:	d402      	bmi.n	8013b58 <_printf_i+0x18c>
 8013b52:	065f      	lsls	r7, r3, #25
 8013b54:	bf48      	it	mi
 8013b56:	b2b6      	uxthmi	r6, r6
 8013b58:	07df      	lsls	r7, r3, #31
 8013b5a:	bf48      	it	mi
 8013b5c:	f043 0320 	orrmi.w	r3, r3, #32
 8013b60:	6029      	str	r1, [r5, #0]
 8013b62:	bf48      	it	mi
 8013b64:	6023      	strmi	r3, [r4, #0]
 8013b66:	b91e      	cbnz	r6, 8013b70 <_printf_i+0x1a4>
 8013b68:	6823      	ldr	r3, [r4, #0]
 8013b6a:	f023 0320 	bic.w	r3, r3, #32
 8013b6e:	6023      	str	r3, [r4, #0]
 8013b70:	2310      	movs	r3, #16
 8013b72:	e7a7      	b.n	8013ac4 <_printf_i+0xf8>
 8013b74:	4824      	ldr	r0, [pc, #144]	; (8013c08 <_printf_i+0x23c>)
 8013b76:	e7e4      	b.n	8013b42 <_printf_i+0x176>
 8013b78:	4615      	mov	r5, r2
 8013b7a:	e7bd      	b.n	8013af8 <_printf_i+0x12c>
 8013b7c:	682b      	ldr	r3, [r5, #0]
 8013b7e:	6826      	ldr	r6, [r4, #0]
 8013b80:	6961      	ldr	r1, [r4, #20]
 8013b82:	1d18      	adds	r0, r3, #4
 8013b84:	6028      	str	r0, [r5, #0]
 8013b86:	0635      	lsls	r5, r6, #24
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	d501      	bpl.n	8013b90 <_printf_i+0x1c4>
 8013b8c:	6019      	str	r1, [r3, #0]
 8013b8e:	e002      	b.n	8013b96 <_printf_i+0x1ca>
 8013b90:	0670      	lsls	r0, r6, #25
 8013b92:	d5fb      	bpl.n	8013b8c <_printf_i+0x1c0>
 8013b94:	8019      	strh	r1, [r3, #0]
 8013b96:	2300      	movs	r3, #0
 8013b98:	6123      	str	r3, [r4, #16]
 8013b9a:	4615      	mov	r5, r2
 8013b9c:	e7bc      	b.n	8013b18 <_printf_i+0x14c>
 8013b9e:	682b      	ldr	r3, [r5, #0]
 8013ba0:	1d1a      	adds	r2, r3, #4
 8013ba2:	602a      	str	r2, [r5, #0]
 8013ba4:	681d      	ldr	r5, [r3, #0]
 8013ba6:	6862      	ldr	r2, [r4, #4]
 8013ba8:	2100      	movs	r1, #0
 8013baa:	4628      	mov	r0, r5
 8013bac:	f7ec fb10 	bl	80001d0 <memchr>
 8013bb0:	b108      	cbz	r0, 8013bb6 <_printf_i+0x1ea>
 8013bb2:	1b40      	subs	r0, r0, r5
 8013bb4:	6060      	str	r0, [r4, #4]
 8013bb6:	6863      	ldr	r3, [r4, #4]
 8013bb8:	6123      	str	r3, [r4, #16]
 8013bba:	2300      	movs	r3, #0
 8013bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013bc0:	e7aa      	b.n	8013b18 <_printf_i+0x14c>
 8013bc2:	6923      	ldr	r3, [r4, #16]
 8013bc4:	462a      	mov	r2, r5
 8013bc6:	4649      	mov	r1, r9
 8013bc8:	4640      	mov	r0, r8
 8013bca:	47d0      	blx	sl
 8013bcc:	3001      	adds	r0, #1
 8013bce:	d0ad      	beq.n	8013b2c <_printf_i+0x160>
 8013bd0:	6823      	ldr	r3, [r4, #0]
 8013bd2:	079b      	lsls	r3, r3, #30
 8013bd4:	d413      	bmi.n	8013bfe <_printf_i+0x232>
 8013bd6:	68e0      	ldr	r0, [r4, #12]
 8013bd8:	9b03      	ldr	r3, [sp, #12]
 8013bda:	4298      	cmp	r0, r3
 8013bdc:	bfb8      	it	lt
 8013bde:	4618      	movlt	r0, r3
 8013be0:	e7a6      	b.n	8013b30 <_printf_i+0x164>
 8013be2:	2301      	movs	r3, #1
 8013be4:	4632      	mov	r2, r6
 8013be6:	4649      	mov	r1, r9
 8013be8:	4640      	mov	r0, r8
 8013bea:	47d0      	blx	sl
 8013bec:	3001      	adds	r0, #1
 8013bee:	d09d      	beq.n	8013b2c <_printf_i+0x160>
 8013bf0:	3501      	adds	r5, #1
 8013bf2:	68e3      	ldr	r3, [r4, #12]
 8013bf4:	9903      	ldr	r1, [sp, #12]
 8013bf6:	1a5b      	subs	r3, r3, r1
 8013bf8:	42ab      	cmp	r3, r5
 8013bfa:	dcf2      	bgt.n	8013be2 <_printf_i+0x216>
 8013bfc:	e7eb      	b.n	8013bd6 <_printf_i+0x20a>
 8013bfe:	2500      	movs	r5, #0
 8013c00:	f104 0619 	add.w	r6, r4, #25
 8013c04:	e7f5      	b.n	8013bf2 <_printf_i+0x226>
 8013c06:	bf00      	nop
 8013c08:	080374c2 	.word	0x080374c2
 8013c0c:	080374d3 	.word	0x080374d3

08013c10 <std>:
 8013c10:	2300      	movs	r3, #0
 8013c12:	b510      	push	{r4, lr}
 8013c14:	4604      	mov	r4, r0
 8013c16:	e9c0 3300 	strd	r3, r3, [r0]
 8013c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c1e:	6083      	str	r3, [r0, #8]
 8013c20:	8181      	strh	r1, [r0, #12]
 8013c22:	6643      	str	r3, [r0, #100]	; 0x64
 8013c24:	81c2      	strh	r2, [r0, #14]
 8013c26:	6183      	str	r3, [r0, #24]
 8013c28:	4619      	mov	r1, r3
 8013c2a:	2208      	movs	r2, #8
 8013c2c:	305c      	adds	r0, #92	; 0x5c
 8013c2e:	f000 f916 	bl	8013e5e <memset>
 8013c32:	4b0d      	ldr	r3, [pc, #52]	; (8013c68 <std+0x58>)
 8013c34:	6263      	str	r3, [r4, #36]	; 0x24
 8013c36:	4b0d      	ldr	r3, [pc, #52]	; (8013c6c <std+0x5c>)
 8013c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c3a:	4b0d      	ldr	r3, [pc, #52]	; (8013c70 <std+0x60>)
 8013c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013c3e:	4b0d      	ldr	r3, [pc, #52]	; (8013c74 <std+0x64>)
 8013c40:	6323      	str	r3, [r4, #48]	; 0x30
 8013c42:	4b0d      	ldr	r3, [pc, #52]	; (8013c78 <std+0x68>)
 8013c44:	6224      	str	r4, [r4, #32]
 8013c46:	429c      	cmp	r4, r3
 8013c48:	d006      	beq.n	8013c58 <std+0x48>
 8013c4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8013c4e:	4294      	cmp	r4, r2
 8013c50:	d002      	beq.n	8013c58 <std+0x48>
 8013c52:	33d0      	adds	r3, #208	; 0xd0
 8013c54:	429c      	cmp	r4, r3
 8013c56:	d105      	bne.n	8013c64 <std+0x54>
 8013c58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c60:	f000 b986 	b.w	8013f70 <__retarget_lock_init_recursive>
 8013c64:	bd10      	pop	{r4, pc}
 8013c66:	bf00      	nop
 8013c68:	08013dd5 	.word	0x08013dd5
 8013c6c:	08013df7 	.word	0x08013df7
 8013c70:	08013e2f 	.word	0x08013e2f
 8013c74:	08013e53 	.word	0x08013e53
 8013c78:	20002c08 	.word	0x20002c08

08013c7c <stdio_exit_handler>:
 8013c7c:	4a02      	ldr	r2, [pc, #8]	; (8013c88 <stdio_exit_handler+0xc>)
 8013c7e:	4903      	ldr	r1, [pc, #12]	; (8013c8c <stdio_exit_handler+0x10>)
 8013c80:	4803      	ldr	r0, [pc, #12]	; (8013c90 <stdio_exit_handler+0x14>)
 8013c82:	f000 b869 	b.w	8013d58 <_fwalk_sglue>
 8013c86:	bf00      	nop
 8013c88:	20000224 	.word	0x20000224
 8013c8c:	08015921 	.word	0x08015921
 8013c90:	20000230 	.word	0x20000230

08013c94 <cleanup_stdio>:
 8013c94:	6841      	ldr	r1, [r0, #4]
 8013c96:	4b0c      	ldr	r3, [pc, #48]	; (8013cc8 <cleanup_stdio+0x34>)
 8013c98:	4299      	cmp	r1, r3
 8013c9a:	b510      	push	{r4, lr}
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	d001      	beq.n	8013ca4 <cleanup_stdio+0x10>
 8013ca0:	f001 fe3e 	bl	8015920 <_fflush_r>
 8013ca4:	68a1      	ldr	r1, [r4, #8]
 8013ca6:	4b09      	ldr	r3, [pc, #36]	; (8013ccc <cleanup_stdio+0x38>)
 8013ca8:	4299      	cmp	r1, r3
 8013caa:	d002      	beq.n	8013cb2 <cleanup_stdio+0x1e>
 8013cac:	4620      	mov	r0, r4
 8013cae:	f001 fe37 	bl	8015920 <_fflush_r>
 8013cb2:	68e1      	ldr	r1, [r4, #12]
 8013cb4:	4b06      	ldr	r3, [pc, #24]	; (8013cd0 <cleanup_stdio+0x3c>)
 8013cb6:	4299      	cmp	r1, r3
 8013cb8:	d004      	beq.n	8013cc4 <cleanup_stdio+0x30>
 8013cba:	4620      	mov	r0, r4
 8013cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cc0:	f001 be2e 	b.w	8015920 <_fflush_r>
 8013cc4:	bd10      	pop	{r4, pc}
 8013cc6:	bf00      	nop
 8013cc8:	20002c08 	.word	0x20002c08
 8013ccc:	20002c70 	.word	0x20002c70
 8013cd0:	20002cd8 	.word	0x20002cd8

08013cd4 <global_stdio_init.part.0>:
 8013cd4:	b510      	push	{r4, lr}
 8013cd6:	4b0b      	ldr	r3, [pc, #44]	; (8013d04 <global_stdio_init.part.0+0x30>)
 8013cd8:	4c0b      	ldr	r4, [pc, #44]	; (8013d08 <global_stdio_init.part.0+0x34>)
 8013cda:	4a0c      	ldr	r2, [pc, #48]	; (8013d0c <global_stdio_init.part.0+0x38>)
 8013cdc:	601a      	str	r2, [r3, #0]
 8013cde:	4620      	mov	r0, r4
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	2104      	movs	r1, #4
 8013ce4:	f7ff ff94 	bl	8013c10 <std>
 8013ce8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013cec:	2201      	movs	r2, #1
 8013cee:	2109      	movs	r1, #9
 8013cf0:	f7ff ff8e 	bl	8013c10 <std>
 8013cf4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013cf8:	2202      	movs	r2, #2
 8013cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cfe:	2112      	movs	r1, #18
 8013d00:	f7ff bf86 	b.w	8013c10 <std>
 8013d04:	20002d40 	.word	0x20002d40
 8013d08:	20002c08 	.word	0x20002c08
 8013d0c:	08013c7d 	.word	0x08013c7d

08013d10 <__sfp_lock_acquire>:
 8013d10:	4801      	ldr	r0, [pc, #4]	; (8013d18 <__sfp_lock_acquire+0x8>)
 8013d12:	f000 b92e 	b.w	8013f72 <__retarget_lock_acquire_recursive>
 8013d16:	bf00      	nop
 8013d18:	20002d49 	.word	0x20002d49

08013d1c <__sfp_lock_release>:
 8013d1c:	4801      	ldr	r0, [pc, #4]	; (8013d24 <__sfp_lock_release+0x8>)
 8013d1e:	f000 b929 	b.w	8013f74 <__retarget_lock_release_recursive>
 8013d22:	bf00      	nop
 8013d24:	20002d49 	.word	0x20002d49

08013d28 <__sinit>:
 8013d28:	b510      	push	{r4, lr}
 8013d2a:	4604      	mov	r4, r0
 8013d2c:	f7ff fff0 	bl	8013d10 <__sfp_lock_acquire>
 8013d30:	6a23      	ldr	r3, [r4, #32]
 8013d32:	b11b      	cbz	r3, 8013d3c <__sinit+0x14>
 8013d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d38:	f7ff bff0 	b.w	8013d1c <__sfp_lock_release>
 8013d3c:	4b04      	ldr	r3, [pc, #16]	; (8013d50 <__sinit+0x28>)
 8013d3e:	6223      	str	r3, [r4, #32]
 8013d40:	4b04      	ldr	r3, [pc, #16]	; (8013d54 <__sinit+0x2c>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d1f5      	bne.n	8013d34 <__sinit+0xc>
 8013d48:	f7ff ffc4 	bl	8013cd4 <global_stdio_init.part.0>
 8013d4c:	e7f2      	b.n	8013d34 <__sinit+0xc>
 8013d4e:	bf00      	nop
 8013d50:	08013c95 	.word	0x08013c95
 8013d54:	20002d40 	.word	0x20002d40

08013d58 <_fwalk_sglue>:
 8013d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d5c:	4607      	mov	r7, r0
 8013d5e:	4688      	mov	r8, r1
 8013d60:	4614      	mov	r4, r2
 8013d62:	2600      	movs	r6, #0
 8013d64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013d68:	f1b9 0901 	subs.w	r9, r9, #1
 8013d6c:	d505      	bpl.n	8013d7a <_fwalk_sglue+0x22>
 8013d6e:	6824      	ldr	r4, [r4, #0]
 8013d70:	2c00      	cmp	r4, #0
 8013d72:	d1f7      	bne.n	8013d64 <_fwalk_sglue+0xc>
 8013d74:	4630      	mov	r0, r6
 8013d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d7a:	89ab      	ldrh	r3, [r5, #12]
 8013d7c:	2b01      	cmp	r3, #1
 8013d7e:	d907      	bls.n	8013d90 <_fwalk_sglue+0x38>
 8013d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d84:	3301      	adds	r3, #1
 8013d86:	d003      	beq.n	8013d90 <_fwalk_sglue+0x38>
 8013d88:	4629      	mov	r1, r5
 8013d8a:	4638      	mov	r0, r7
 8013d8c:	47c0      	blx	r8
 8013d8e:	4306      	orrs	r6, r0
 8013d90:	3568      	adds	r5, #104	; 0x68
 8013d92:	e7e9      	b.n	8013d68 <_fwalk_sglue+0x10>

08013d94 <siprintf>:
 8013d94:	b40e      	push	{r1, r2, r3}
 8013d96:	b500      	push	{lr}
 8013d98:	b09c      	sub	sp, #112	; 0x70
 8013d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8013d9c:	9002      	str	r0, [sp, #8]
 8013d9e:	9006      	str	r0, [sp, #24]
 8013da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013da4:	4809      	ldr	r0, [pc, #36]	; (8013dcc <siprintf+0x38>)
 8013da6:	9107      	str	r1, [sp, #28]
 8013da8:	9104      	str	r1, [sp, #16]
 8013daa:	4909      	ldr	r1, [pc, #36]	; (8013dd0 <siprintf+0x3c>)
 8013dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8013db0:	9105      	str	r1, [sp, #20]
 8013db2:	6800      	ldr	r0, [r0, #0]
 8013db4:	9301      	str	r3, [sp, #4]
 8013db6:	a902      	add	r1, sp, #8
 8013db8:	f001 fc2e 	bl	8015618 <_svfiprintf_r>
 8013dbc:	9b02      	ldr	r3, [sp, #8]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	701a      	strb	r2, [r3, #0]
 8013dc2:	b01c      	add	sp, #112	; 0x70
 8013dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013dc8:	b003      	add	sp, #12
 8013dca:	4770      	bx	lr
 8013dcc:	2000027c 	.word	0x2000027c
 8013dd0:	ffff0208 	.word	0xffff0208

08013dd4 <__sread>:
 8013dd4:	b510      	push	{r4, lr}
 8013dd6:	460c      	mov	r4, r1
 8013dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ddc:	f000 f87a 	bl	8013ed4 <_read_r>
 8013de0:	2800      	cmp	r0, #0
 8013de2:	bfab      	itete	ge
 8013de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013de6:	89a3      	ldrhlt	r3, [r4, #12]
 8013de8:	181b      	addge	r3, r3, r0
 8013dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013dee:	bfac      	ite	ge
 8013df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8013df2:	81a3      	strhlt	r3, [r4, #12]
 8013df4:	bd10      	pop	{r4, pc}

08013df6 <__swrite>:
 8013df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dfa:	461f      	mov	r7, r3
 8013dfc:	898b      	ldrh	r3, [r1, #12]
 8013dfe:	05db      	lsls	r3, r3, #23
 8013e00:	4605      	mov	r5, r0
 8013e02:	460c      	mov	r4, r1
 8013e04:	4616      	mov	r6, r2
 8013e06:	d505      	bpl.n	8013e14 <__swrite+0x1e>
 8013e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e0c:	2302      	movs	r3, #2
 8013e0e:	2200      	movs	r2, #0
 8013e10:	f000 f84e 	bl	8013eb0 <_lseek_r>
 8013e14:	89a3      	ldrh	r3, [r4, #12]
 8013e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e1e:	81a3      	strh	r3, [r4, #12]
 8013e20:	4632      	mov	r2, r6
 8013e22:	463b      	mov	r3, r7
 8013e24:	4628      	mov	r0, r5
 8013e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e2a:	f000 b865 	b.w	8013ef8 <_write_r>

08013e2e <__sseek>:
 8013e2e:	b510      	push	{r4, lr}
 8013e30:	460c      	mov	r4, r1
 8013e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e36:	f000 f83b 	bl	8013eb0 <_lseek_r>
 8013e3a:	1c43      	adds	r3, r0, #1
 8013e3c:	89a3      	ldrh	r3, [r4, #12]
 8013e3e:	bf15      	itete	ne
 8013e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8013e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013e4a:	81a3      	strheq	r3, [r4, #12]
 8013e4c:	bf18      	it	ne
 8013e4e:	81a3      	strhne	r3, [r4, #12]
 8013e50:	bd10      	pop	{r4, pc}

08013e52 <__sclose>:
 8013e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e56:	f000 b81b 	b.w	8013e90 <_close_r>

08013e5a <index>:
 8013e5a:	f000 b808 	b.w	8013e6e <strchr>

08013e5e <memset>:
 8013e5e:	4402      	add	r2, r0
 8013e60:	4603      	mov	r3, r0
 8013e62:	4293      	cmp	r3, r2
 8013e64:	d100      	bne.n	8013e68 <memset+0xa>
 8013e66:	4770      	bx	lr
 8013e68:	f803 1b01 	strb.w	r1, [r3], #1
 8013e6c:	e7f9      	b.n	8013e62 <memset+0x4>

08013e6e <strchr>:
 8013e6e:	b2c9      	uxtb	r1, r1
 8013e70:	4603      	mov	r3, r0
 8013e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e76:	b11a      	cbz	r2, 8013e80 <strchr+0x12>
 8013e78:	428a      	cmp	r2, r1
 8013e7a:	d1f9      	bne.n	8013e70 <strchr+0x2>
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	4770      	bx	lr
 8013e80:	2900      	cmp	r1, #0
 8013e82:	bf18      	it	ne
 8013e84:	2300      	movne	r3, #0
 8013e86:	e7f9      	b.n	8013e7c <strchr+0xe>

08013e88 <_localeconv_r>:
 8013e88:	4800      	ldr	r0, [pc, #0]	; (8013e8c <_localeconv_r+0x4>)
 8013e8a:	4770      	bx	lr
 8013e8c:	20000370 	.word	0x20000370

08013e90 <_close_r>:
 8013e90:	b538      	push	{r3, r4, r5, lr}
 8013e92:	4d06      	ldr	r5, [pc, #24]	; (8013eac <_close_r+0x1c>)
 8013e94:	2300      	movs	r3, #0
 8013e96:	4604      	mov	r4, r0
 8013e98:	4608      	mov	r0, r1
 8013e9a:	602b      	str	r3, [r5, #0]
 8013e9c:	f7f0 f861 	bl	8003f62 <_close>
 8013ea0:	1c43      	adds	r3, r0, #1
 8013ea2:	d102      	bne.n	8013eaa <_close_r+0x1a>
 8013ea4:	682b      	ldr	r3, [r5, #0]
 8013ea6:	b103      	cbz	r3, 8013eaa <_close_r+0x1a>
 8013ea8:	6023      	str	r3, [r4, #0]
 8013eaa:	bd38      	pop	{r3, r4, r5, pc}
 8013eac:	20002d44 	.word	0x20002d44

08013eb0 <_lseek_r>:
 8013eb0:	b538      	push	{r3, r4, r5, lr}
 8013eb2:	4d07      	ldr	r5, [pc, #28]	; (8013ed0 <_lseek_r+0x20>)
 8013eb4:	4604      	mov	r4, r0
 8013eb6:	4608      	mov	r0, r1
 8013eb8:	4611      	mov	r1, r2
 8013eba:	2200      	movs	r2, #0
 8013ebc:	602a      	str	r2, [r5, #0]
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	f7f0 f876 	bl	8003fb0 <_lseek>
 8013ec4:	1c43      	adds	r3, r0, #1
 8013ec6:	d102      	bne.n	8013ece <_lseek_r+0x1e>
 8013ec8:	682b      	ldr	r3, [r5, #0]
 8013eca:	b103      	cbz	r3, 8013ece <_lseek_r+0x1e>
 8013ecc:	6023      	str	r3, [r4, #0]
 8013ece:	bd38      	pop	{r3, r4, r5, pc}
 8013ed0:	20002d44 	.word	0x20002d44

08013ed4 <_read_r>:
 8013ed4:	b538      	push	{r3, r4, r5, lr}
 8013ed6:	4d07      	ldr	r5, [pc, #28]	; (8013ef4 <_read_r+0x20>)
 8013ed8:	4604      	mov	r4, r0
 8013eda:	4608      	mov	r0, r1
 8013edc:	4611      	mov	r1, r2
 8013ede:	2200      	movs	r2, #0
 8013ee0:	602a      	str	r2, [r5, #0]
 8013ee2:	461a      	mov	r2, r3
 8013ee4:	f7f0 f804 	bl	8003ef0 <_read>
 8013ee8:	1c43      	adds	r3, r0, #1
 8013eea:	d102      	bne.n	8013ef2 <_read_r+0x1e>
 8013eec:	682b      	ldr	r3, [r5, #0]
 8013eee:	b103      	cbz	r3, 8013ef2 <_read_r+0x1e>
 8013ef0:	6023      	str	r3, [r4, #0]
 8013ef2:	bd38      	pop	{r3, r4, r5, pc}
 8013ef4:	20002d44 	.word	0x20002d44

08013ef8 <_write_r>:
 8013ef8:	b538      	push	{r3, r4, r5, lr}
 8013efa:	4d07      	ldr	r5, [pc, #28]	; (8013f18 <_write_r+0x20>)
 8013efc:	4604      	mov	r4, r0
 8013efe:	4608      	mov	r0, r1
 8013f00:	4611      	mov	r1, r2
 8013f02:	2200      	movs	r2, #0
 8013f04:	602a      	str	r2, [r5, #0]
 8013f06:	461a      	mov	r2, r3
 8013f08:	f7f0 f80f 	bl	8003f2a <_write>
 8013f0c:	1c43      	adds	r3, r0, #1
 8013f0e:	d102      	bne.n	8013f16 <_write_r+0x1e>
 8013f10:	682b      	ldr	r3, [r5, #0]
 8013f12:	b103      	cbz	r3, 8013f16 <_write_r+0x1e>
 8013f14:	6023      	str	r3, [r4, #0]
 8013f16:	bd38      	pop	{r3, r4, r5, pc}
 8013f18:	20002d44 	.word	0x20002d44

08013f1c <__errno>:
 8013f1c:	4b01      	ldr	r3, [pc, #4]	; (8013f24 <__errno+0x8>)
 8013f1e:	6818      	ldr	r0, [r3, #0]
 8013f20:	4770      	bx	lr
 8013f22:	bf00      	nop
 8013f24:	2000027c 	.word	0x2000027c

08013f28 <__libc_init_array>:
 8013f28:	b570      	push	{r4, r5, r6, lr}
 8013f2a:	4d0d      	ldr	r5, [pc, #52]	; (8013f60 <__libc_init_array+0x38>)
 8013f2c:	4c0d      	ldr	r4, [pc, #52]	; (8013f64 <__libc_init_array+0x3c>)
 8013f2e:	1b64      	subs	r4, r4, r5
 8013f30:	10a4      	asrs	r4, r4, #2
 8013f32:	2600      	movs	r6, #0
 8013f34:	42a6      	cmp	r6, r4
 8013f36:	d109      	bne.n	8013f4c <__libc_init_array+0x24>
 8013f38:	4d0b      	ldr	r5, [pc, #44]	; (8013f68 <__libc_init_array+0x40>)
 8013f3a:	4c0c      	ldr	r4, [pc, #48]	; (8013f6c <__libc_init_array+0x44>)
 8013f3c:	f003 f950 	bl	80171e0 <_init>
 8013f40:	1b64      	subs	r4, r4, r5
 8013f42:	10a4      	asrs	r4, r4, #2
 8013f44:	2600      	movs	r6, #0
 8013f46:	42a6      	cmp	r6, r4
 8013f48:	d105      	bne.n	8013f56 <__libc_init_array+0x2e>
 8013f4a:	bd70      	pop	{r4, r5, r6, pc}
 8013f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f50:	4798      	blx	r3
 8013f52:	3601      	adds	r6, #1
 8013f54:	e7ee      	b.n	8013f34 <__libc_init_array+0xc>
 8013f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f5a:	4798      	blx	r3
 8013f5c:	3601      	adds	r6, #1
 8013f5e:	e7f2      	b.n	8013f46 <__libc_init_array+0x1e>
 8013f60:	08037868 	.word	0x08037868
 8013f64:	08037868 	.word	0x08037868
 8013f68:	08037868 	.word	0x08037868
 8013f6c:	0803786c 	.word	0x0803786c

08013f70 <__retarget_lock_init_recursive>:
 8013f70:	4770      	bx	lr

08013f72 <__retarget_lock_acquire_recursive>:
 8013f72:	4770      	bx	lr

08013f74 <__retarget_lock_release_recursive>:
 8013f74:	4770      	bx	lr

08013f76 <quorem>:
 8013f76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f7a:	6903      	ldr	r3, [r0, #16]
 8013f7c:	690c      	ldr	r4, [r1, #16]
 8013f7e:	42a3      	cmp	r3, r4
 8013f80:	4607      	mov	r7, r0
 8013f82:	db7e      	blt.n	8014082 <quorem+0x10c>
 8013f84:	3c01      	subs	r4, #1
 8013f86:	f101 0814 	add.w	r8, r1, #20
 8013f8a:	f100 0514 	add.w	r5, r0, #20
 8013f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013f92:	9301      	str	r3, [sp, #4]
 8013f94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013f98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013fa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013fa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8013fac:	d331      	bcc.n	8014012 <quorem+0x9c>
 8013fae:	f04f 0e00 	mov.w	lr, #0
 8013fb2:	4640      	mov	r0, r8
 8013fb4:	46ac      	mov	ip, r5
 8013fb6:	46f2      	mov	sl, lr
 8013fb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8013fbc:	b293      	uxth	r3, r2
 8013fbe:	fb06 e303 	mla	r3, r6, r3, lr
 8013fc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013fc6:	0c1a      	lsrs	r2, r3, #16
 8013fc8:	b29b      	uxth	r3, r3
 8013fca:	ebaa 0303 	sub.w	r3, sl, r3
 8013fce:	f8dc a000 	ldr.w	sl, [ip]
 8013fd2:	fa13 f38a 	uxtah	r3, r3, sl
 8013fd6:	fb06 220e 	mla	r2, r6, lr, r2
 8013fda:	9300      	str	r3, [sp, #0]
 8013fdc:	9b00      	ldr	r3, [sp, #0]
 8013fde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013fe2:	b292      	uxth	r2, r2
 8013fe4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013fe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013fec:	f8bd 3000 	ldrh.w	r3, [sp]
 8013ff0:	4581      	cmp	r9, r0
 8013ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ff6:	f84c 3b04 	str.w	r3, [ip], #4
 8013ffa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013ffe:	d2db      	bcs.n	8013fb8 <quorem+0x42>
 8014000:	f855 300b 	ldr.w	r3, [r5, fp]
 8014004:	b92b      	cbnz	r3, 8014012 <quorem+0x9c>
 8014006:	9b01      	ldr	r3, [sp, #4]
 8014008:	3b04      	subs	r3, #4
 801400a:	429d      	cmp	r5, r3
 801400c:	461a      	mov	r2, r3
 801400e:	d32c      	bcc.n	801406a <quorem+0xf4>
 8014010:	613c      	str	r4, [r7, #16]
 8014012:	4638      	mov	r0, r7
 8014014:	f001 f9a6 	bl	8015364 <__mcmp>
 8014018:	2800      	cmp	r0, #0
 801401a:	db22      	blt.n	8014062 <quorem+0xec>
 801401c:	3601      	adds	r6, #1
 801401e:	4629      	mov	r1, r5
 8014020:	2000      	movs	r0, #0
 8014022:	f858 2b04 	ldr.w	r2, [r8], #4
 8014026:	f8d1 c000 	ldr.w	ip, [r1]
 801402a:	b293      	uxth	r3, r2
 801402c:	1ac3      	subs	r3, r0, r3
 801402e:	0c12      	lsrs	r2, r2, #16
 8014030:	fa13 f38c 	uxtah	r3, r3, ip
 8014034:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014038:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801403c:	b29b      	uxth	r3, r3
 801403e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014042:	45c1      	cmp	r9, r8
 8014044:	f841 3b04 	str.w	r3, [r1], #4
 8014048:	ea4f 4022 	mov.w	r0, r2, asr #16
 801404c:	d2e9      	bcs.n	8014022 <quorem+0xac>
 801404e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014052:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014056:	b922      	cbnz	r2, 8014062 <quorem+0xec>
 8014058:	3b04      	subs	r3, #4
 801405a:	429d      	cmp	r5, r3
 801405c:	461a      	mov	r2, r3
 801405e:	d30a      	bcc.n	8014076 <quorem+0x100>
 8014060:	613c      	str	r4, [r7, #16]
 8014062:	4630      	mov	r0, r6
 8014064:	b003      	add	sp, #12
 8014066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801406a:	6812      	ldr	r2, [r2, #0]
 801406c:	3b04      	subs	r3, #4
 801406e:	2a00      	cmp	r2, #0
 8014070:	d1ce      	bne.n	8014010 <quorem+0x9a>
 8014072:	3c01      	subs	r4, #1
 8014074:	e7c9      	b.n	801400a <quorem+0x94>
 8014076:	6812      	ldr	r2, [r2, #0]
 8014078:	3b04      	subs	r3, #4
 801407a:	2a00      	cmp	r2, #0
 801407c:	d1f0      	bne.n	8014060 <quorem+0xea>
 801407e:	3c01      	subs	r4, #1
 8014080:	e7eb      	b.n	801405a <quorem+0xe4>
 8014082:	2000      	movs	r0, #0
 8014084:	e7ee      	b.n	8014064 <quorem+0xee>
	...

08014088 <_dtoa_r>:
 8014088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801408c:	ed2d 8b04 	vpush	{d8-d9}
 8014090:	69c5      	ldr	r5, [r0, #28]
 8014092:	b093      	sub	sp, #76	; 0x4c
 8014094:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014098:	ec57 6b10 	vmov	r6, r7, d0
 801409c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80140a0:	9107      	str	r1, [sp, #28]
 80140a2:	4604      	mov	r4, r0
 80140a4:	920a      	str	r2, [sp, #40]	; 0x28
 80140a6:	930d      	str	r3, [sp, #52]	; 0x34
 80140a8:	b975      	cbnz	r5, 80140c8 <_dtoa_r+0x40>
 80140aa:	2010      	movs	r0, #16
 80140ac:	f000 fe2a 	bl	8014d04 <malloc>
 80140b0:	4602      	mov	r2, r0
 80140b2:	61e0      	str	r0, [r4, #28]
 80140b4:	b920      	cbnz	r0, 80140c0 <_dtoa_r+0x38>
 80140b6:	4bae      	ldr	r3, [pc, #696]	; (8014370 <_dtoa_r+0x2e8>)
 80140b8:	21ef      	movs	r1, #239	; 0xef
 80140ba:	48ae      	ldr	r0, [pc, #696]	; (8014374 <_dtoa_r+0x2ec>)
 80140bc:	f001 fc90 	bl	80159e0 <__assert_func>
 80140c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80140c4:	6005      	str	r5, [r0, #0]
 80140c6:	60c5      	str	r5, [r0, #12]
 80140c8:	69e3      	ldr	r3, [r4, #28]
 80140ca:	6819      	ldr	r1, [r3, #0]
 80140cc:	b151      	cbz	r1, 80140e4 <_dtoa_r+0x5c>
 80140ce:	685a      	ldr	r2, [r3, #4]
 80140d0:	604a      	str	r2, [r1, #4]
 80140d2:	2301      	movs	r3, #1
 80140d4:	4093      	lsls	r3, r2
 80140d6:	608b      	str	r3, [r1, #8]
 80140d8:	4620      	mov	r0, r4
 80140da:	f000 ff07 	bl	8014eec <_Bfree>
 80140de:	69e3      	ldr	r3, [r4, #28]
 80140e0:	2200      	movs	r2, #0
 80140e2:	601a      	str	r2, [r3, #0]
 80140e4:	1e3b      	subs	r3, r7, #0
 80140e6:	bfbb      	ittet	lt
 80140e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80140ec:	9303      	strlt	r3, [sp, #12]
 80140ee:	2300      	movge	r3, #0
 80140f0:	2201      	movlt	r2, #1
 80140f2:	bfac      	ite	ge
 80140f4:	f8c8 3000 	strge.w	r3, [r8]
 80140f8:	f8c8 2000 	strlt.w	r2, [r8]
 80140fc:	4b9e      	ldr	r3, [pc, #632]	; (8014378 <_dtoa_r+0x2f0>)
 80140fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014102:	ea33 0308 	bics.w	r3, r3, r8
 8014106:	d11b      	bne.n	8014140 <_dtoa_r+0xb8>
 8014108:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801410a:	f242 730f 	movw	r3, #9999	; 0x270f
 801410e:	6013      	str	r3, [r2, #0]
 8014110:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014114:	4333      	orrs	r3, r6
 8014116:	f000 8593 	beq.w	8014c40 <_dtoa_r+0xbb8>
 801411a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801411c:	b963      	cbnz	r3, 8014138 <_dtoa_r+0xb0>
 801411e:	4b97      	ldr	r3, [pc, #604]	; (801437c <_dtoa_r+0x2f4>)
 8014120:	e027      	b.n	8014172 <_dtoa_r+0xea>
 8014122:	4b97      	ldr	r3, [pc, #604]	; (8014380 <_dtoa_r+0x2f8>)
 8014124:	9300      	str	r3, [sp, #0]
 8014126:	3308      	adds	r3, #8
 8014128:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801412a:	6013      	str	r3, [r2, #0]
 801412c:	9800      	ldr	r0, [sp, #0]
 801412e:	b013      	add	sp, #76	; 0x4c
 8014130:	ecbd 8b04 	vpop	{d8-d9}
 8014134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014138:	4b90      	ldr	r3, [pc, #576]	; (801437c <_dtoa_r+0x2f4>)
 801413a:	9300      	str	r3, [sp, #0]
 801413c:	3303      	adds	r3, #3
 801413e:	e7f3      	b.n	8014128 <_dtoa_r+0xa0>
 8014140:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014144:	2200      	movs	r2, #0
 8014146:	ec51 0b17 	vmov	r0, r1, d7
 801414a:	eeb0 8a47 	vmov.f32	s16, s14
 801414e:	eef0 8a67 	vmov.f32	s17, s15
 8014152:	2300      	movs	r3, #0
 8014154:	f7ec fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8014158:	4681      	mov	r9, r0
 801415a:	b160      	cbz	r0, 8014176 <_dtoa_r+0xee>
 801415c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801415e:	2301      	movs	r3, #1
 8014160:	6013      	str	r3, [r2, #0]
 8014162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014164:	2b00      	cmp	r3, #0
 8014166:	f000 8568 	beq.w	8014c3a <_dtoa_r+0xbb2>
 801416a:	4b86      	ldr	r3, [pc, #536]	; (8014384 <_dtoa_r+0x2fc>)
 801416c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801416e:	6013      	str	r3, [r2, #0]
 8014170:	3b01      	subs	r3, #1
 8014172:	9300      	str	r3, [sp, #0]
 8014174:	e7da      	b.n	801412c <_dtoa_r+0xa4>
 8014176:	aa10      	add	r2, sp, #64	; 0x40
 8014178:	a911      	add	r1, sp, #68	; 0x44
 801417a:	4620      	mov	r0, r4
 801417c:	eeb0 0a48 	vmov.f32	s0, s16
 8014180:	eef0 0a68 	vmov.f32	s1, s17
 8014184:	f001 f994 	bl	80154b0 <__d2b>
 8014188:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801418c:	4682      	mov	sl, r0
 801418e:	2d00      	cmp	r5, #0
 8014190:	d07f      	beq.n	8014292 <_dtoa_r+0x20a>
 8014192:	ee18 3a90 	vmov	r3, s17
 8014196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801419a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801419e:	ec51 0b18 	vmov	r0, r1, d8
 80141a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80141a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80141aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80141ae:	4619      	mov	r1, r3
 80141b0:	2200      	movs	r2, #0
 80141b2:	4b75      	ldr	r3, [pc, #468]	; (8014388 <_dtoa_r+0x300>)
 80141b4:	f7ec f868 	bl	8000288 <__aeabi_dsub>
 80141b8:	a367      	add	r3, pc, #412	; (adr r3, 8014358 <_dtoa_r+0x2d0>)
 80141ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141be:	f7ec fa1b 	bl	80005f8 <__aeabi_dmul>
 80141c2:	a367      	add	r3, pc, #412	; (adr r3, 8014360 <_dtoa_r+0x2d8>)
 80141c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c8:	f7ec f860 	bl	800028c <__adddf3>
 80141cc:	4606      	mov	r6, r0
 80141ce:	4628      	mov	r0, r5
 80141d0:	460f      	mov	r7, r1
 80141d2:	f7ec f9a7 	bl	8000524 <__aeabi_i2d>
 80141d6:	a364      	add	r3, pc, #400	; (adr r3, 8014368 <_dtoa_r+0x2e0>)
 80141d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141dc:	f7ec fa0c 	bl	80005f8 <__aeabi_dmul>
 80141e0:	4602      	mov	r2, r0
 80141e2:	460b      	mov	r3, r1
 80141e4:	4630      	mov	r0, r6
 80141e6:	4639      	mov	r1, r7
 80141e8:	f7ec f850 	bl	800028c <__adddf3>
 80141ec:	4606      	mov	r6, r0
 80141ee:	460f      	mov	r7, r1
 80141f0:	f7ec fcb2 	bl	8000b58 <__aeabi_d2iz>
 80141f4:	2200      	movs	r2, #0
 80141f6:	4683      	mov	fp, r0
 80141f8:	2300      	movs	r3, #0
 80141fa:	4630      	mov	r0, r6
 80141fc:	4639      	mov	r1, r7
 80141fe:	f7ec fc6d 	bl	8000adc <__aeabi_dcmplt>
 8014202:	b148      	cbz	r0, 8014218 <_dtoa_r+0x190>
 8014204:	4658      	mov	r0, fp
 8014206:	f7ec f98d 	bl	8000524 <__aeabi_i2d>
 801420a:	4632      	mov	r2, r6
 801420c:	463b      	mov	r3, r7
 801420e:	f7ec fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8014212:	b908      	cbnz	r0, 8014218 <_dtoa_r+0x190>
 8014214:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014218:	f1bb 0f16 	cmp.w	fp, #22
 801421c:	d857      	bhi.n	80142ce <_dtoa_r+0x246>
 801421e:	4b5b      	ldr	r3, [pc, #364]	; (801438c <_dtoa_r+0x304>)
 8014220:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014228:	ec51 0b18 	vmov	r0, r1, d8
 801422c:	f7ec fc56 	bl	8000adc <__aeabi_dcmplt>
 8014230:	2800      	cmp	r0, #0
 8014232:	d04e      	beq.n	80142d2 <_dtoa_r+0x24a>
 8014234:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014238:	2300      	movs	r3, #0
 801423a:	930c      	str	r3, [sp, #48]	; 0x30
 801423c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801423e:	1b5b      	subs	r3, r3, r5
 8014240:	1e5a      	subs	r2, r3, #1
 8014242:	bf45      	ittet	mi
 8014244:	f1c3 0301 	rsbmi	r3, r3, #1
 8014248:	9305      	strmi	r3, [sp, #20]
 801424a:	2300      	movpl	r3, #0
 801424c:	2300      	movmi	r3, #0
 801424e:	9206      	str	r2, [sp, #24]
 8014250:	bf54      	ite	pl
 8014252:	9305      	strpl	r3, [sp, #20]
 8014254:	9306      	strmi	r3, [sp, #24]
 8014256:	f1bb 0f00 	cmp.w	fp, #0
 801425a:	db3c      	blt.n	80142d6 <_dtoa_r+0x24e>
 801425c:	9b06      	ldr	r3, [sp, #24]
 801425e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014262:	445b      	add	r3, fp
 8014264:	9306      	str	r3, [sp, #24]
 8014266:	2300      	movs	r3, #0
 8014268:	9308      	str	r3, [sp, #32]
 801426a:	9b07      	ldr	r3, [sp, #28]
 801426c:	2b09      	cmp	r3, #9
 801426e:	d868      	bhi.n	8014342 <_dtoa_r+0x2ba>
 8014270:	2b05      	cmp	r3, #5
 8014272:	bfc4      	itt	gt
 8014274:	3b04      	subgt	r3, #4
 8014276:	9307      	strgt	r3, [sp, #28]
 8014278:	9b07      	ldr	r3, [sp, #28]
 801427a:	f1a3 0302 	sub.w	r3, r3, #2
 801427e:	bfcc      	ite	gt
 8014280:	2500      	movgt	r5, #0
 8014282:	2501      	movle	r5, #1
 8014284:	2b03      	cmp	r3, #3
 8014286:	f200 8085 	bhi.w	8014394 <_dtoa_r+0x30c>
 801428a:	e8df f003 	tbb	[pc, r3]
 801428e:	3b2e      	.short	0x3b2e
 8014290:	5839      	.short	0x5839
 8014292:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014296:	441d      	add	r5, r3
 8014298:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801429c:	2b20      	cmp	r3, #32
 801429e:	bfc1      	itttt	gt
 80142a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80142a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80142a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80142ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80142b0:	bfd6      	itet	le
 80142b2:	f1c3 0320 	rsble	r3, r3, #32
 80142b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80142ba:	fa06 f003 	lslle.w	r0, r6, r3
 80142be:	f7ec f921 	bl	8000504 <__aeabi_ui2d>
 80142c2:	2201      	movs	r2, #1
 80142c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80142c8:	3d01      	subs	r5, #1
 80142ca:	920e      	str	r2, [sp, #56]	; 0x38
 80142cc:	e76f      	b.n	80141ae <_dtoa_r+0x126>
 80142ce:	2301      	movs	r3, #1
 80142d0:	e7b3      	b.n	801423a <_dtoa_r+0x1b2>
 80142d2:	900c      	str	r0, [sp, #48]	; 0x30
 80142d4:	e7b2      	b.n	801423c <_dtoa_r+0x1b4>
 80142d6:	9b05      	ldr	r3, [sp, #20]
 80142d8:	eba3 030b 	sub.w	r3, r3, fp
 80142dc:	9305      	str	r3, [sp, #20]
 80142de:	f1cb 0300 	rsb	r3, fp, #0
 80142e2:	9308      	str	r3, [sp, #32]
 80142e4:	2300      	movs	r3, #0
 80142e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80142e8:	e7bf      	b.n	801426a <_dtoa_r+0x1e2>
 80142ea:	2300      	movs	r3, #0
 80142ec:	9309      	str	r3, [sp, #36]	; 0x24
 80142ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	dc52      	bgt.n	801439a <_dtoa_r+0x312>
 80142f4:	2301      	movs	r3, #1
 80142f6:	9301      	str	r3, [sp, #4]
 80142f8:	9304      	str	r3, [sp, #16]
 80142fa:	461a      	mov	r2, r3
 80142fc:	920a      	str	r2, [sp, #40]	; 0x28
 80142fe:	e00b      	b.n	8014318 <_dtoa_r+0x290>
 8014300:	2301      	movs	r3, #1
 8014302:	e7f3      	b.n	80142ec <_dtoa_r+0x264>
 8014304:	2300      	movs	r3, #0
 8014306:	9309      	str	r3, [sp, #36]	; 0x24
 8014308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801430a:	445b      	add	r3, fp
 801430c:	9301      	str	r3, [sp, #4]
 801430e:	3301      	adds	r3, #1
 8014310:	2b01      	cmp	r3, #1
 8014312:	9304      	str	r3, [sp, #16]
 8014314:	bfb8      	it	lt
 8014316:	2301      	movlt	r3, #1
 8014318:	69e0      	ldr	r0, [r4, #28]
 801431a:	2100      	movs	r1, #0
 801431c:	2204      	movs	r2, #4
 801431e:	f102 0614 	add.w	r6, r2, #20
 8014322:	429e      	cmp	r6, r3
 8014324:	d93d      	bls.n	80143a2 <_dtoa_r+0x31a>
 8014326:	6041      	str	r1, [r0, #4]
 8014328:	4620      	mov	r0, r4
 801432a:	f000 fd9f 	bl	8014e6c <_Balloc>
 801432e:	9000      	str	r0, [sp, #0]
 8014330:	2800      	cmp	r0, #0
 8014332:	d139      	bne.n	80143a8 <_dtoa_r+0x320>
 8014334:	4b16      	ldr	r3, [pc, #88]	; (8014390 <_dtoa_r+0x308>)
 8014336:	4602      	mov	r2, r0
 8014338:	f240 11af 	movw	r1, #431	; 0x1af
 801433c:	e6bd      	b.n	80140ba <_dtoa_r+0x32>
 801433e:	2301      	movs	r3, #1
 8014340:	e7e1      	b.n	8014306 <_dtoa_r+0x27e>
 8014342:	2501      	movs	r5, #1
 8014344:	2300      	movs	r3, #0
 8014346:	9307      	str	r3, [sp, #28]
 8014348:	9509      	str	r5, [sp, #36]	; 0x24
 801434a:	f04f 33ff 	mov.w	r3, #4294967295
 801434e:	9301      	str	r3, [sp, #4]
 8014350:	9304      	str	r3, [sp, #16]
 8014352:	2200      	movs	r2, #0
 8014354:	2312      	movs	r3, #18
 8014356:	e7d1      	b.n	80142fc <_dtoa_r+0x274>
 8014358:	636f4361 	.word	0x636f4361
 801435c:	3fd287a7 	.word	0x3fd287a7
 8014360:	8b60c8b3 	.word	0x8b60c8b3
 8014364:	3fc68a28 	.word	0x3fc68a28
 8014368:	509f79fb 	.word	0x509f79fb
 801436c:	3fd34413 	.word	0x3fd34413
 8014370:	080374f1 	.word	0x080374f1
 8014374:	08037508 	.word	0x08037508
 8014378:	7ff00000 	.word	0x7ff00000
 801437c:	080374ed 	.word	0x080374ed
 8014380:	080374e4 	.word	0x080374e4
 8014384:	080374c1 	.word	0x080374c1
 8014388:	3ff80000 	.word	0x3ff80000
 801438c:	080375f8 	.word	0x080375f8
 8014390:	08037560 	.word	0x08037560
 8014394:	2301      	movs	r3, #1
 8014396:	9309      	str	r3, [sp, #36]	; 0x24
 8014398:	e7d7      	b.n	801434a <_dtoa_r+0x2c2>
 801439a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801439c:	9301      	str	r3, [sp, #4]
 801439e:	9304      	str	r3, [sp, #16]
 80143a0:	e7ba      	b.n	8014318 <_dtoa_r+0x290>
 80143a2:	3101      	adds	r1, #1
 80143a4:	0052      	lsls	r2, r2, #1
 80143a6:	e7ba      	b.n	801431e <_dtoa_r+0x296>
 80143a8:	69e3      	ldr	r3, [r4, #28]
 80143aa:	9a00      	ldr	r2, [sp, #0]
 80143ac:	601a      	str	r2, [r3, #0]
 80143ae:	9b04      	ldr	r3, [sp, #16]
 80143b0:	2b0e      	cmp	r3, #14
 80143b2:	f200 80a8 	bhi.w	8014506 <_dtoa_r+0x47e>
 80143b6:	2d00      	cmp	r5, #0
 80143b8:	f000 80a5 	beq.w	8014506 <_dtoa_r+0x47e>
 80143bc:	f1bb 0f00 	cmp.w	fp, #0
 80143c0:	dd38      	ble.n	8014434 <_dtoa_r+0x3ac>
 80143c2:	4bc0      	ldr	r3, [pc, #768]	; (80146c4 <_dtoa_r+0x63c>)
 80143c4:	f00b 020f 	and.w	r2, fp, #15
 80143c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80143cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80143d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80143d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80143d8:	d019      	beq.n	801440e <_dtoa_r+0x386>
 80143da:	4bbb      	ldr	r3, [pc, #748]	; (80146c8 <_dtoa_r+0x640>)
 80143dc:	ec51 0b18 	vmov	r0, r1, d8
 80143e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80143e4:	f7ec fa32 	bl	800084c <__aeabi_ddiv>
 80143e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80143ec:	f008 080f 	and.w	r8, r8, #15
 80143f0:	2503      	movs	r5, #3
 80143f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80146c8 <_dtoa_r+0x640>
 80143f6:	f1b8 0f00 	cmp.w	r8, #0
 80143fa:	d10a      	bne.n	8014412 <_dtoa_r+0x38a>
 80143fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014400:	4632      	mov	r2, r6
 8014402:	463b      	mov	r3, r7
 8014404:	f7ec fa22 	bl	800084c <__aeabi_ddiv>
 8014408:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801440c:	e02b      	b.n	8014466 <_dtoa_r+0x3de>
 801440e:	2502      	movs	r5, #2
 8014410:	e7ef      	b.n	80143f2 <_dtoa_r+0x36a>
 8014412:	f018 0f01 	tst.w	r8, #1
 8014416:	d008      	beq.n	801442a <_dtoa_r+0x3a2>
 8014418:	4630      	mov	r0, r6
 801441a:	4639      	mov	r1, r7
 801441c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014420:	f7ec f8ea 	bl	80005f8 <__aeabi_dmul>
 8014424:	3501      	adds	r5, #1
 8014426:	4606      	mov	r6, r0
 8014428:	460f      	mov	r7, r1
 801442a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801442e:	f109 0908 	add.w	r9, r9, #8
 8014432:	e7e0      	b.n	80143f6 <_dtoa_r+0x36e>
 8014434:	f000 809f 	beq.w	8014576 <_dtoa_r+0x4ee>
 8014438:	f1cb 0600 	rsb	r6, fp, #0
 801443c:	4ba1      	ldr	r3, [pc, #644]	; (80146c4 <_dtoa_r+0x63c>)
 801443e:	4fa2      	ldr	r7, [pc, #648]	; (80146c8 <_dtoa_r+0x640>)
 8014440:	f006 020f 	and.w	r2, r6, #15
 8014444:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801444c:	ec51 0b18 	vmov	r0, r1, d8
 8014450:	f7ec f8d2 	bl	80005f8 <__aeabi_dmul>
 8014454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014458:	1136      	asrs	r6, r6, #4
 801445a:	2300      	movs	r3, #0
 801445c:	2502      	movs	r5, #2
 801445e:	2e00      	cmp	r6, #0
 8014460:	d17e      	bne.n	8014560 <_dtoa_r+0x4d8>
 8014462:	2b00      	cmp	r3, #0
 8014464:	d1d0      	bne.n	8014408 <_dtoa_r+0x380>
 8014466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014468:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801446c:	2b00      	cmp	r3, #0
 801446e:	f000 8084 	beq.w	801457a <_dtoa_r+0x4f2>
 8014472:	4b96      	ldr	r3, [pc, #600]	; (80146cc <_dtoa_r+0x644>)
 8014474:	2200      	movs	r2, #0
 8014476:	4640      	mov	r0, r8
 8014478:	4649      	mov	r1, r9
 801447a:	f7ec fb2f 	bl	8000adc <__aeabi_dcmplt>
 801447e:	2800      	cmp	r0, #0
 8014480:	d07b      	beq.n	801457a <_dtoa_r+0x4f2>
 8014482:	9b04      	ldr	r3, [sp, #16]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d078      	beq.n	801457a <_dtoa_r+0x4f2>
 8014488:	9b01      	ldr	r3, [sp, #4]
 801448a:	2b00      	cmp	r3, #0
 801448c:	dd39      	ble.n	8014502 <_dtoa_r+0x47a>
 801448e:	4b90      	ldr	r3, [pc, #576]	; (80146d0 <_dtoa_r+0x648>)
 8014490:	2200      	movs	r2, #0
 8014492:	4640      	mov	r0, r8
 8014494:	4649      	mov	r1, r9
 8014496:	f7ec f8af 	bl	80005f8 <__aeabi_dmul>
 801449a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801449e:	9e01      	ldr	r6, [sp, #4]
 80144a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80144a4:	3501      	adds	r5, #1
 80144a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80144aa:	4628      	mov	r0, r5
 80144ac:	f7ec f83a 	bl	8000524 <__aeabi_i2d>
 80144b0:	4642      	mov	r2, r8
 80144b2:	464b      	mov	r3, r9
 80144b4:	f7ec f8a0 	bl	80005f8 <__aeabi_dmul>
 80144b8:	4b86      	ldr	r3, [pc, #536]	; (80146d4 <_dtoa_r+0x64c>)
 80144ba:	2200      	movs	r2, #0
 80144bc:	f7eb fee6 	bl	800028c <__adddf3>
 80144c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80144c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144c8:	9303      	str	r3, [sp, #12]
 80144ca:	2e00      	cmp	r6, #0
 80144cc:	d158      	bne.n	8014580 <_dtoa_r+0x4f8>
 80144ce:	4b82      	ldr	r3, [pc, #520]	; (80146d8 <_dtoa_r+0x650>)
 80144d0:	2200      	movs	r2, #0
 80144d2:	4640      	mov	r0, r8
 80144d4:	4649      	mov	r1, r9
 80144d6:	f7eb fed7 	bl	8000288 <__aeabi_dsub>
 80144da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144de:	4680      	mov	r8, r0
 80144e0:	4689      	mov	r9, r1
 80144e2:	f7ec fb19 	bl	8000b18 <__aeabi_dcmpgt>
 80144e6:	2800      	cmp	r0, #0
 80144e8:	f040 8296 	bne.w	8014a18 <_dtoa_r+0x990>
 80144ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80144f0:	4640      	mov	r0, r8
 80144f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80144f6:	4649      	mov	r1, r9
 80144f8:	f7ec faf0 	bl	8000adc <__aeabi_dcmplt>
 80144fc:	2800      	cmp	r0, #0
 80144fe:	f040 8289 	bne.w	8014a14 <_dtoa_r+0x98c>
 8014502:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014508:	2b00      	cmp	r3, #0
 801450a:	f2c0 814e 	blt.w	80147aa <_dtoa_r+0x722>
 801450e:	f1bb 0f0e 	cmp.w	fp, #14
 8014512:	f300 814a 	bgt.w	80147aa <_dtoa_r+0x722>
 8014516:	4b6b      	ldr	r3, [pc, #428]	; (80146c4 <_dtoa_r+0x63c>)
 8014518:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801451c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014522:	2b00      	cmp	r3, #0
 8014524:	f280 80dc 	bge.w	80146e0 <_dtoa_r+0x658>
 8014528:	9b04      	ldr	r3, [sp, #16]
 801452a:	2b00      	cmp	r3, #0
 801452c:	f300 80d8 	bgt.w	80146e0 <_dtoa_r+0x658>
 8014530:	f040 826f 	bne.w	8014a12 <_dtoa_r+0x98a>
 8014534:	4b68      	ldr	r3, [pc, #416]	; (80146d8 <_dtoa_r+0x650>)
 8014536:	2200      	movs	r2, #0
 8014538:	4640      	mov	r0, r8
 801453a:	4649      	mov	r1, r9
 801453c:	f7ec f85c 	bl	80005f8 <__aeabi_dmul>
 8014540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014544:	f7ec fade 	bl	8000b04 <__aeabi_dcmpge>
 8014548:	9e04      	ldr	r6, [sp, #16]
 801454a:	4637      	mov	r7, r6
 801454c:	2800      	cmp	r0, #0
 801454e:	f040 8245 	bne.w	80149dc <_dtoa_r+0x954>
 8014552:	9d00      	ldr	r5, [sp, #0]
 8014554:	2331      	movs	r3, #49	; 0x31
 8014556:	f805 3b01 	strb.w	r3, [r5], #1
 801455a:	f10b 0b01 	add.w	fp, fp, #1
 801455e:	e241      	b.n	80149e4 <_dtoa_r+0x95c>
 8014560:	07f2      	lsls	r2, r6, #31
 8014562:	d505      	bpl.n	8014570 <_dtoa_r+0x4e8>
 8014564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014568:	f7ec f846 	bl	80005f8 <__aeabi_dmul>
 801456c:	3501      	adds	r5, #1
 801456e:	2301      	movs	r3, #1
 8014570:	1076      	asrs	r6, r6, #1
 8014572:	3708      	adds	r7, #8
 8014574:	e773      	b.n	801445e <_dtoa_r+0x3d6>
 8014576:	2502      	movs	r5, #2
 8014578:	e775      	b.n	8014466 <_dtoa_r+0x3de>
 801457a:	9e04      	ldr	r6, [sp, #16]
 801457c:	465f      	mov	r7, fp
 801457e:	e792      	b.n	80144a6 <_dtoa_r+0x41e>
 8014580:	9900      	ldr	r1, [sp, #0]
 8014582:	4b50      	ldr	r3, [pc, #320]	; (80146c4 <_dtoa_r+0x63c>)
 8014584:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014588:	4431      	add	r1, r6
 801458a:	9102      	str	r1, [sp, #8]
 801458c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801458e:	eeb0 9a47 	vmov.f32	s18, s14
 8014592:	eef0 9a67 	vmov.f32	s19, s15
 8014596:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801459a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801459e:	2900      	cmp	r1, #0
 80145a0:	d044      	beq.n	801462c <_dtoa_r+0x5a4>
 80145a2:	494e      	ldr	r1, [pc, #312]	; (80146dc <_dtoa_r+0x654>)
 80145a4:	2000      	movs	r0, #0
 80145a6:	f7ec f951 	bl	800084c <__aeabi_ddiv>
 80145aa:	ec53 2b19 	vmov	r2, r3, d9
 80145ae:	f7eb fe6b 	bl	8000288 <__aeabi_dsub>
 80145b2:	9d00      	ldr	r5, [sp, #0]
 80145b4:	ec41 0b19 	vmov	d9, r0, r1
 80145b8:	4649      	mov	r1, r9
 80145ba:	4640      	mov	r0, r8
 80145bc:	f7ec facc 	bl	8000b58 <__aeabi_d2iz>
 80145c0:	4606      	mov	r6, r0
 80145c2:	f7eb ffaf 	bl	8000524 <__aeabi_i2d>
 80145c6:	4602      	mov	r2, r0
 80145c8:	460b      	mov	r3, r1
 80145ca:	4640      	mov	r0, r8
 80145cc:	4649      	mov	r1, r9
 80145ce:	f7eb fe5b 	bl	8000288 <__aeabi_dsub>
 80145d2:	3630      	adds	r6, #48	; 0x30
 80145d4:	f805 6b01 	strb.w	r6, [r5], #1
 80145d8:	ec53 2b19 	vmov	r2, r3, d9
 80145dc:	4680      	mov	r8, r0
 80145de:	4689      	mov	r9, r1
 80145e0:	f7ec fa7c 	bl	8000adc <__aeabi_dcmplt>
 80145e4:	2800      	cmp	r0, #0
 80145e6:	d164      	bne.n	80146b2 <_dtoa_r+0x62a>
 80145e8:	4642      	mov	r2, r8
 80145ea:	464b      	mov	r3, r9
 80145ec:	4937      	ldr	r1, [pc, #220]	; (80146cc <_dtoa_r+0x644>)
 80145ee:	2000      	movs	r0, #0
 80145f0:	f7eb fe4a 	bl	8000288 <__aeabi_dsub>
 80145f4:	ec53 2b19 	vmov	r2, r3, d9
 80145f8:	f7ec fa70 	bl	8000adc <__aeabi_dcmplt>
 80145fc:	2800      	cmp	r0, #0
 80145fe:	f040 80b6 	bne.w	801476e <_dtoa_r+0x6e6>
 8014602:	9b02      	ldr	r3, [sp, #8]
 8014604:	429d      	cmp	r5, r3
 8014606:	f43f af7c 	beq.w	8014502 <_dtoa_r+0x47a>
 801460a:	4b31      	ldr	r3, [pc, #196]	; (80146d0 <_dtoa_r+0x648>)
 801460c:	ec51 0b19 	vmov	r0, r1, d9
 8014610:	2200      	movs	r2, #0
 8014612:	f7eb fff1 	bl	80005f8 <__aeabi_dmul>
 8014616:	4b2e      	ldr	r3, [pc, #184]	; (80146d0 <_dtoa_r+0x648>)
 8014618:	ec41 0b19 	vmov	d9, r0, r1
 801461c:	2200      	movs	r2, #0
 801461e:	4640      	mov	r0, r8
 8014620:	4649      	mov	r1, r9
 8014622:	f7eb ffe9 	bl	80005f8 <__aeabi_dmul>
 8014626:	4680      	mov	r8, r0
 8014628:	4689      	mov	r9, r1
 801462a:	e7c5      	b.n	80145b8 <_dtoa_r+0x530>
 801462c:	ec51 0b17 	vmov	r0, r1, d7
 8014630:	f7eb ffe2 	bl	80005f8 <__aeabi_dmul>
 8014634:	9b02      	ldr	r3, [sp, #8]
 8014636:	9d00      	ldr	r5, [sp, #0]
 8014638:	930f      	str	r3, [sp, #60]	; 0x3c
 801463a:	ec41 0b19 	vmov	d9, r0, r1
 801463e:	4649      	mov	r1, r9
 8014640:	4640      	mov	r0, r8
 8014642:	f7ec fa89 	bl	8000b58 <__aeabi_d2iz>
 8014646:	4606      	mov	r6, r0
 8014648:	f7eb ff6c 	bl	8000524 <__aeabi_i2d>
 801464c:	3630      	adds	r6, #48	; 0x30
 801464e:	4602      	mov	r2, r0
 8014650:	460b      	mov	r3, r1
 8014652:	4640      	mov	r0, r8
 8014654:	4649      	mov	r1, r9
 8014656:	f7eb fe17 	bl	8000288 <__aeabi_dsub>
 801465a:	f805 6b01 	strb.w	r6, [r5], #1
 801465e:	9b02      	ldr	r3, [sp, #8]
 8014660:	429d      	cmp	r5, r3
 8014662:	4680      	mov	r8, r0
 8014664:	4689      	mov	r9, r1
 8014666:	f04f 0200 	mov.w	r2, #0
 801466a:	d124      	bne.n	80146b6 <_dtoa_r+0x62e>
 801466c:	4b1b      	ldr	r3, [pc, #108]	; (80146dc <_dtoa_r+0x654>)
 801466e:	ec51 0b19 	vmov	r0, r1, d9
 8014672:	f7eb fe0b 	bl	800028c <__adddf3>
 8014676:	4602      	mov	r2, r0
 8014678:	460b      	mov	r3, r1
 801467a:	4640      	mov	r0, r8
 801467c:	4649      	mov	r1, r9
 801467e:	f7ec fa4b 	bl	8000b18 <__aeabi_dcmpgt>
 8014682:	2800      	cmp	r0, #0
 8014684:	d173      	bne.n	801476e <_dtoa_r+0x6e6>
 8014686:	ec53 2b19 	vmov	r2, r3, d9
 801468a:	4914      	ldr	r1, [pc, #80]	; (80146dc <_dtoa_r+0x654>)
 801468c:	2000      	movs	r0, #0
 801468e:	f7eb fdfb 	bl	8000288 <__aeabi_dsub>
 8014692:	4602      	mov	r2, r0
 8014694:	460b      	mov	r3, r1
 8014696:	4640      	mov	r0, r8
 8014698:	4649      	mov	r1, r9
 801469a:	f7ec fa1f 	bl	8000adc <__aeabi_dcmplt>
 801469e:	2800      	cmp	r0, #0
 80146a0:	f43f af2f 	beq.w	8014502 <_dtoa_r+0x47a>
 80146a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80146a6:	1e6b      	subs	r3, r5, #1
 80146a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80146aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80146ae:	2b30      	cmp	r3, #48	; 0x30
 80146b0:	d0f8      	beq.n	80146a4 <_dtoa_r+0x61c>
 80146b2:	46bb      	mov	fp, r7
 80146b4:	e04a      	b.n	801474c <_dtoa_r+0x6c4>
 80146b6:	4b06      	ldr	r3, [pc, #24]	; (80146d0 <_dtoa_r+0x648>)
 80146b8:	f7eb ff9e 	bl	80005f8 <__aeabi_dmul>
 80146bc:	4680      	mov	r8, r0
 80146be:	4689      	mov	r9, r1
 80146c0:	e7bd      	b.n	801463e <_dtoa_r+0x5b6>
 80146c2:	bf00      	nop
 80146c4:	080375f8 	.word	0x080375f8
 80146c8:	080375d0 	.word	0x080375d0
 80146cc:	3ff00000 	.word	0x3ff00000
 80146d0:	40240000 	.word	0x40240000
 80146d4:	401c0000 	.word	0x401c0000
 80146d8:	40140000 	.word	0x40140000
 80146dc:	3fe00000 	.word	0x3fe00000
 80146e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80146e4:	9d00      	ldr	r5, [sp, #0]
 80146e6:	4642      	mov	r2, r8
 80146e8:	464b      	mov	r3, r9
 80146ea:	4630      	mov	r0, r6
 80146ec:	4639      	mov	r1, r7
 80146ee:	f7ec f8ad 	bl	800084c <__aeabi_ddiv>
 80146f2:	f7ec fa31 	bl	8000b58 <__aeabi_d2iz>
 80146f6:	9001      	str	r0, [sp, #4]
 80146f8:	f7eb ff14 	bl	8000524 <__aeabi_i2d>
 80146fc:	4642      	mov	r2, r8
 80146fe:	464b      	mov	r3, r9
 8014700:	f7eb ff7a 	bl	80005f8 <__aeabi_dmul>
 8014704:	4602      	mov	r2, r0
 8014706:	460b      	mov	r3, r1
 8014708:	4630      	mov	r0, r6
 801470a:	4639      	mov	r1, r7
 801470c:	f7eb fdbc 	bl	8000288 <__aeabi_dsub>
 8014710:	9e01      	ldr	r6, [sp, #4]
 8014712:	9f04      	ldr	r7, [sp, #16]
 8014714:	3630      	adds	r6, #48	; 0x30
 8014716:	f805 6b01 	strb.w	r6, [r5], #1
 801471a:	9e00      	ldr	r6, [sp, #0]
 801471c:	1bae      	subs	r6, r5, r6
 801471e:	42b7      	cmp	r7, r6
 8014720:	4602      	mov	r2, r0
 8014722:	460b      	mov	r3, r1
 8014724:	d134      	bne.n	8014790 <_dtoa_r+0x708>
 8014726:	f7eb fdb1 	bl	800028c <__adddf3>
 801472a:	4642      	mov	r2, r8
 801472c:	464b      	mov	r3, r9
 801472e:	4606      	mov	r6, r0
 8014730:	460f      	mov	r7, r1
 8014732:	f7ec f9f1 	bl	8000b18 <__aeabi_dcmpgt>
 8014736:	b9c8      	cbnz	r0, 801476c <_dtoa_r+0x6e4>
 8014738:	4642      	mov	r2, r8
 801473a:	464b      	mov	r3, r9
 801473c:	4630      	mov	r0, r6
 801473e:	4639      	mov	r1, r7
 8014740:	f7ec f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8014744:	b110      	cbz	r0, 801474c <_dtoa_r+0x6c4>
 8014746:	9b01      	ldr	r3, [sp, #4]
 8014748:	07db      	lsls	r3, r3, #31
 801474a:	d40f      	bmi.n	801476c <_dtoa_r+0x6e4>
 801474c:	4651      	mov	r1, sl
 801474e:	4620      	mov	r0, r4
 8014750:	f000 fbcc 	bl	8014eec <_Bfree>
 8014754:	2300      	movs	r3, #0
 8014756:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014758:	702b      	strb	r3, [r5, #0]
 801475a:	f10b 0301 	add.w	r3, fp, #1
 801475e:	6013      	str	r3, [r2, #0]
 8014760:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014762:	2b00      	cmp	r3, #0
 8014764:	f43f ace2 	beq.w	801412c <_dtoa_r+0xa4>
 8014768:	601d      	str	r5, [r3, #0]
 801476a:	e4df      	b.n	801412c <_dtoa_r+0xa4>
 801476c:	465f      	mov	r7, fp
 801476e:	462b      	mov	r3, r5
 8014770:	461d      	mov	r5, r3
 8014772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014776:	2a39      	cmp	r2, #57	; 0x39
 8014778:	d106      	bne.n	8014788 <_dtoa_r+0x700>
 801477a:	9a00      	ldr	r2, [sp, #0]
 801477c:	429a      	cmp	r2, r3
 801477e:	d1f7      	bne.n	8014770 <_dtoa_r+0x6e8>
 8014780:	9900      	ldr	r1, [sp, #0]
 8014782:	2230      	movs	r2, #48	; 0x30
 8014784:	3701      	adds	r7, #1
 8014786:	700a      	strb	r2, [r1, #0]
 8014788:	781a      	ldrb	r2, [r3, #0]
 801478a:	3201      	adds	r2, #1
 801478c:	701a      	strb	r2, [r3, #0]
 801478e:	e790      	b.n	80146b2 <_dtoa_r+0x62a>
 8014790:	4ba3      	ldr	r3, [pc, #652]	; (8014a20 <_dtoa_r+0x998>)
 8014792:	2200      	movs	r2, #0
 8014794:	f7eb ff30 	bl	80005f8 <__aeabi_dmul>
 8014798:	2200      	movs	r2, #0
 801479a:	2300      	movs	r3, #0
 801479c:	4606      	mov	r6, r0
 801479e:	460f      	mov	r7, r1
 80147a0:	f7ec f992 	bl	8000ac8 <__aeabi_dcmpeq>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	d09e      	beq.n	80146e6 <_dtoa_r+0x65e>
 80147a8:	e7d0      	b.n	801474c <_dtoa_r+0x6c4>
 80147aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147ac:	2a00      	cmp	r2, #0
 80147ae:	f000 80ca 	beq.w	8014946 <_dtoa_r+0x8be>
 80147b2:	9a07      	ldr	r2, [sp, #28]
 80147b4:	2a01      	cmp	r2, #1
 80147b6:	f300 80ad 	bgt.w	8014914 <_dtoa_r+0x88c>
 80147ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80147bc:	2a00      	cmp	r2, #0
 80147be:	f000 80a5 	beq.w	801490c <_dtoa_r+0x884>
 80147c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80147c6:	9e08      	ldr	r6, [sp, #32]
 80147c8:	9d05      	ldr	r5, [sp, #20]
 80147ca:	9a05      	ldr	r2, [sp, #20]
 80147cc:	441a      	add	r2, r3
 80147ce:	9205      	str	r2, [sp, #20]
 80147d0:	9a06      	ldr	r2, [sp, #24]
 80147d2:	2101      	movs	r1, #1
 80147d4:	441a      	add	r2, r3
 80147d6:	4620      	mov	r0, r4
 80147d8:	9206      	str	r2, [sp, #24]
 80147da:	f000 fc3d 	bl	8015058 <__i2b>
 80147de:	4607      	mov	r7, r0
 80147e0:	b165      	cbz	r5, 80147fc <_dtoa_r+0x774>
 80147e2:	9b06      	ldr	r3, [sp, #24]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	dd09      	ble.n	80147fc <_dtoa_r+0x774>
 80147e8:	42ab      	cmp	r3, r5
 80147ea:	9a05      	ldr	r2, [sp, #20]
 80147ec:	bfa8      	it	ge
 80147ee:	462b      	movge	r3, r5
 80147f0:	1ad2      	subs	r2, r2, r3
 80147f2:	9205      	str	r2, [sp, #20]
 80147f4:	9a06      	ldr	r2, [sp, #24]
 80147f6:	1aed      	subs	r5, r5, r3
 80147f8:	1ad3      	subs	r3, r2, r3
 80147fa:	9306      	str	r3, [sp, #24]
 80147fc:	9b08      	ldr	r3, [sp, #32]
 80147fe:	b1f3      	cbz	r3, 801483e <_dtoa_r+0x7b6>
 8014800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014802:	2b00      	cmp	r3, #0
 8014804:	f000 80a3 	beq.w	801494e <_dtoa_r+0x8c6>
 8014808:	2e00      	cmp	r6, #0
 801480a:	dd10      	ble.n	801482e <_dtoa_r+0x7a6>
 801480c:	4639      	mov	r1, r7
 801480e:	4632      	mov	r2, r6
 8014810:	4620      	mov	r0, r4
 8014812:	f000 fce1 	bl	80151d8 <__pow5mult>
 8014816:	4652      	mov	r2, sl
 8014818:	4601      	mov	r1, r0
 801481a:	4607      	mov	r7, r0
 801481c:	4620      	mov	r0, r4
 801481e:	f000 fc31 	bl	8015084 <__multiply>
 8014822:	4651      	mov	r1, sl
 8014824:	4680      	mov	r8, r0
 8014826:	4620      	mov	r0, r4
 8014828:	f000 fb60 	bl	8014eec <_Bfree>
 801482c:	46c2      	mov	sl, r8
 801482e:	9b08      	ldr	r3, [sp, #32]
 8014830:	1b9a      	subs	r2, r3, r6
 8014832:	d004      	beq.n	801483e <_dtoa_r+0x7b6>
 8014834:	4651      	mov	r1, sl
 8014836:	4620      	mov	r0, r4
 8014838:	f000 fcce 	bl	80151d8 <__pow5mult>
 801483c:	4682      	mov	sl, r0
 801483e:	2101      	movs	r1, #1
 8014840:	4620      	mov	r0, r4
 8014842:	f000 fc09 	bl	8015058 <__i2b>
 8014846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014848:	2b00      	cmp	r3, #0
 801484a:	4606      	mov	r6, r0
 801484c:	f340 8081 	ble.w	8014952 <_dtoa_r+0x8ca>
 8014850:	461a      	mov	r2, r3
 8014852:	4601      	mov	r1, r0
 8014854:	4620      	mov	r0, r4
 8014856:	f000 fcbf 	bl	80151d8 <__pow5mult>
 801485a:	9b07      	ldr	r3, [sp, #28]
 801485c:	2b01      	cmp	r3, #1
 801485e:	4606      	mov	r6, r0
 8014860:	dd7a      	ble.n	8014958 <_dtoa_r+0x8d0>
 8014862:	f04f 0800 	mov.w	r8, #0
 8014866:	6933      	ldr	r3, [r6, #16]
 8014868:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801486c:	6918      	ldr	r0, [r3, #16]
 801486e:	f000 fba5 	bl	8014fbc <__hi0bits>
 8014872:	f1c0 0020 	rsb	r0, r0, #32
 8014876:	9b06      	ldr	r3, [sp, #24]
 8014878:	4418      	add	r0, r3
 801487a:	f010 001f 	ands.w	r0, r0, #31
 801487e:	f000 8094 	beq.w	80149aa <_dtoa_r+0x922>
 8014882:	f1c0 0320 	rsb	r3, r0, #32
 8014886:	2b04      	cmp	r3, #4
 8014888:	f340 8085 	ble.w	8014996 <_dtoa_r+0x90e>
 801488c:	9b05      	ldr	r3, [sp, #20]
 801488e:	f1c0 001c 	rsb	r0, r0, #28
 8014892:	4403      	add	r3, r0
 8014894:	9305      	str	r3, [sp, #20]
 8014896:	9b06      	ldr	r3, [sp, #24]
 8014898:	4403      	add	r3, r0
 801489a:	4405      	add	r5, r0
 801489c:	9306      	str	r3, [sp, #24]
 801489e:	9b05      	ldr	r3, [sp, #20]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	dd05      	ble.n	80148b0 <_dtoa_r+0x828>
 80148a4:	4651      	mov	r1, sl
 80148a6:	461a      	mov	r2, r3
 80148a8:	4620      	mov	r0, r4
 80148aa:	f000 fcef 	bl	801528c <__lshift>
 80148ae:	4682      	mov	sl, r0
 80148b0:	9b06      	ldr	r3, [sp, #24]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	dd05      	ble.n	80148c2 <_dtoa_r+0x83a>
 80148b6:	4631      	mov	r1, r6
 80148b8:	461a      	mov	r2, r3
 80148ba:	4620      	mov	r0, r4
 80148bc:	f000 fce6 	bl	801528c <__lshift>
 80148c0:	4606      	mov	r6, r0
 80148c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d072      	beq.n	80149ae <_dtoa_r+0x926>
 80148c8:	4631      	mov	r1, r6
 80148ca:	4650      	mov	r0, sl
 80148cc:	f000 fd4a 	bl	8015364 <__mcmp>
 80148d0:	2800      	cmp	r0, #0
 80148d2:	da6c      	bge.n	80149ae <_dtoa_r+0x926>
 80148d4:	2300      	movs	r3, #0
 80148d6:	4651      	mov	r1, sl
 80148d8:	220a      	movs	r2, #10
 80148da:	4620      	mov	r0, r4
 80148dc:	f000 fb28 	bl	8014f30 <__multadd>
 80148e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80148e6:	4682      	mov	sl, r0
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	f000 81b0 	beq.w	8014c4e <_dtoa_r+0xbc6>
 80148ee:	2300      	movs	r3, #0
 80148f0:	4639      	mov	r1, r7
 80148f2:	220a      	movs	r2, #10
 80148f4:	4620      	mov	r0, r4
 80148f6:	f000 fb1b 	bl	8014f30 <__multadd>
 80148fa:	9b01      	ldr	r3, [sp, #4]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	4607      	mov	r7, r0
 8014900:	f300 8096 	bgt.w	8014a30 <_dtoa_r+0x9a8>
 8014904:	9b07      	ldr	r3, [sp, #28]
 8014906:	2b02      	cmp	r3, #2
 8014908:	dc59      	bgt.n	80149be <_dtoa_r+0x936>
 801490a:	e091      	b.n	8014a30 <_dtoa_r+0x9a8>
 801490c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801490e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014912:	e758      	b.n	80147c6 <_dtoa_r+0x73e>
 8014914:	9b04      	ldr	r3, [sp, #16]
 8014916:	1e5e      	subs	r6, r3, #1
 8014918:	9b08      	ldr	r3, [sp, #32]
 801491a:	42b3      	cmp	r3, r6
 801491c:	bfbf      	itttt	lt
 801491e:	9b08      	ldrlt	r3, [sp, #32]
 8014920:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8014922:	9608      	strlt	r6, [sp, #32]
 8014924:	1af3      	sublt	r3, r6, r3
 8014926:	bfb4      	ite	lt
 8014928:	18d2      	addlt	r2, r2, r3
 801492a:	1b9e      	subge	r6, r3, r6
 801492c:	9b04      	ldr	r3, [sp, #16]
 801492e:	bfbc      	itt	lt
 8014930:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8014932:	2600      	movlt	r6, #0
 8014934:	2b00      	cmp	r3, #0
 8014936:	bfb7      	itett	lt
 8014938:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801493c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8014940:	1a9d      	sublt	r5, r3, r2
 8014942:	2300      	movlt	r3, #0
 8014944:	e741      	b.n	80147ca <_dtoa_r+0x742>
 8014946:	9e08      	ldr	r6, [sp, #32]
 8014948:	9d05      	ldr	r5, [sp, #20]
 801494a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801494c:	e748      	b.n	80147e0 <_dtoa_r+0x758>
 801494e:	9a08      	ldr	r2, [sp, #32]
 8014950:	e770      	b.n	8014834 <_dtoa_r+0x7ac>
 8014952:	9b07      	ldr	r3, [sp, #28]
 8014954:	2b01      	cmp	r3, #1
 8014956:	dc19      	bgt.n	801498c <_dtoa_r+0x904>
 8014958:	9b02      	ldr	r3, [sp, #8]
 801495a:	b9bb      	cbnz	r3, 801498c <_dtoa_r+0x904>
 801495c:	9b03      	ldr	r3, [sp, #12]
 801495e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014962:	b99b      	cbnz	r3, 801498c <_dtoa_r+0x904>
 8014964:	9b03      	ldr	r3, [sp, #12]
 8014966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801496a:	0d1b      	lsrs	r3, r3, #20
 801496c:	051b      	lsls	r3, r3, #20
 801496e:	b183      	cbz	r3, 8014992 <_dtoa_r+0x90a>
 8014970:	9b05      	ldr	r3, [sp, #20]
 8014972:	3301      	adds	r3, #1
 8014974:	9305      	str	r3, [sp, #20]
 8014976:	9b06      	ldr	r3, [sp, #24]
 8014978:	3301      	adds	r3, #1
 801497a:	9306      	str	r3, [sp, #24]
 801497c:	f04f 0801 	mov.w	r8, #1
 8014980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014982:	2b00      	cmp	r3, #0
 8014984:	f47f af6f 	bne.w	8014866 <_dtoa_r+0x7de>
 8014988:	2001      	movs	r0, #1
 801498a:	e774      	b.n	8014876 <_dtoa_r+0x7ee>
 801498c:	f04f 0800 	mov.w	r8, #0
 8014990:	e7f6      	b.n	8014980 <_dtoa_r+0x8f8>
 8014992:	4698      	mov	r8, r3
 8014994:	e7f4      	b.n	8014980 <_dtoa_r+0x8f8>
 8014996:	d082      	beq.n	801489e <_dtoa_r+0x816>
 8014998:	9a05      	ldr	r2, [sp, #20]
 801499a:	331c      	adds	r3, #28
 801499c:	441a      	add	r2, r3
 801499e:	9205      	str	r2, [sp, #20]
 80149a0:	9a06      	ldr	r2, [sp, #24]
 80149a2:	441a      	add	r2, r3
 80149a4:	441d      	add	r5, r3
 80149a6:	9206      	str	r2, [sp, #24]
 80149a8:	e779      	b.n	801489e <_dtoa_r+0x816>
 80149aa:	4603      	mov	r3, r0
 80149ac:	e7f4      	b.n	8014998 <_dtoa_r+0x910>
 80149ae:	9b04      	ldr	r3, [sp, #16]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	dc37      	bgt.n	8014a24 <_dtoa_r+0x99c>
 80149b4:	9b07      	ldr	r3, [sp, #28]
 80149b6:	2b02      	cmp	r3, #2
 80149b8:	dd34      	ble.n	8014a24 <_dtoa_r+0x99c>
 80149ba:	9b04      	ldr	r3, [sp, #16]
 80149bc:	9301      	str	r3, [sp, #4]
 80149be:	9b01      	ldr	r3, [sp, #4]
 80149c0:	b963      	cbnz	r3, 80149dc <_dtoa_r+0x954>
 80149c2:	4631      	mov	r1, r6
 80149c4:	2205      	movs	r2, #5
 80149c6:	4620      	mov	r0, r4
 80149c8:	f000 fab2 	bl	8014f30 <__multadd>
 80149cc:	4601      	mov	r1, r0
 80149ce:	4606      	mov	r6, r0
 80149d0:	4650      	mov	r0, sl
 80149d2:	f000 fcc7 	bl	8015364 <__mcmp>
 80149d6:	2800      	cmp	r0, #0
 80149d8:	f73f adbb 	bgt.w	8014552 <_dtoa_r+0x4ca>
 80149dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149de:	9d00      	ldr	r5, [sp, #0]
 80149e0:	ea6f 0b03 	mvn.w	fp, r3
 80149e4:	f04f 0800 	mov.w	r8, #0
 80149e8:	4631      	mov	r1, r6
 80149ea:	4620      	mov	r0, r4
 80149ec:	f000 fa7e 	bl	8014eec <_Bfree>
 80149f0:	2f00      	cmp	r7, #0
 80149f2:	f43f aeab 	beq.w	801474c <_dtoa_r+0x6c4>
 80149f6:	f1b8 0f00 	cmp.w	r8, #0
 80149fa:	d005      	beq.n	8014a08 <_dtoa_r+0x980>
 80149fc:	45b8      	cmp	r8, r7
 80149fe:	d003      	beq.n	8014a08 <_dtoa_r+0x980>
 8014a00:	4641      	mov	r1, r8
 8014a02:	4620      	mov	r0, r4
 8014a04:	f000 fa72 	bl	8014eec <_Bfree>
 8014a08:	4639      	mov	r1, r7
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	f000 fa6e 	bl	8014eec <_Bfree>
 8014a10:	e69c      	b.n	801474c <_dtoa_r+0x6c4>
 8014a12:	2600      	movs	r6, #0
 8014a14:	4637      	mov	r7, r6
 8014a16:	e7e1      	b.n	80149dc <_dtoa_r+0x954>
 8014a18:	46bb      	mov	fp, r7
 8014a1a:	4637      	mov	r7, r6
 8014a1c:	e599      	b.n	8014552 <_dtoa_r+0x4ca>
 8014a1e:	bf00      	nop
 8014a20:	40240000 	.word	0x40240000
 8014a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	f000 80c8 	beq.w	8014bbc <_dtoa_r+0xb34>
 8014a2c:	9b04      	ldr	r3, [sp, #16]
 8014a2e:	9301      	str	r3, [sp, #4]
 8014a30:	2d00      	cmp	r5, #0
 8014a32:	dd05      	ble.n	8014a40 <_dtoa_r+0x9b8>
 8014a34:	4639      	mov	r1, r7
 8014a36:	462a      	mov	r2, r5
 8014a38:	4620      	mov	r0, r4
 8014a3a:	f000 fc27 	bl	801528c <__lshift>
 8014a3e:	4607      	mov	r7, r0
 8014a40:	f1b8 0f00 	cmp.w	r8, #0
 8014a44:	d05b      	beq.n	8014afe <_dtoa_r+0xa76>
 8014a46:	6879      	ldr	r1, [r7, #4]
 8014a48:	4620      	mov	r0, r4
 8014a4a:	f000 fa0f 	bl	8014e6c <_Balloc>
 8014a4e:	4605      	mov	r5, r0
 8014a50:	b928      	cbnz	r0, 8014a5e <_dtoa_r+0x9d6>
 8014a52:	4b83      	ldr	r3, [pc, #524]	; (8014c60 <_dtoa_r+0xbd8>)
 8014a54:	4602      	mov	r2, r0
 8014a56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014a5a:	f7ff bb2e 	b.w	80140ba <_dtoa_r+0x32>
 8014a5e:	693a      	ldr	r2, [r7, #16]
 8014a60:	3202      	adds	r2, #2
 8014a62:	0092      	lsls	r2, r2, #2
 8014a64:	f107 010c 	add.w	r1, r7, #12
 8014a68:	300c      	adds	r0, #12
 8014a6a:	f000 ffab 	bl	80159c4 <memcpy>
 8014a6e:	2201      	movs	r2, #1
 8014a70:	4629      	mov	r1, r5
 8014a72:	4620      	mov	r0, r4
 8014a74:	f000 fc0a 	bl	801528c <__lshift>
 8014a78:	9b00      	ldr	r3, [sp, #0]
 8014a7a:	3301      	adds	r3, #1
 8014a7c:	9304      	str	r3, [sp, #16]
 8014a7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a82:	4413      	add	r3, r2
 8014a84:	9308      	str	r3, [sp, #32]
 8014a86:	9b02      	ldr	r3, [sp, #8]
 8014a88:	f003 0301 	and.w	r3, r3, #1
 8014a8c:	46b8      	mov	r8, r7
 8014a8e:	9306      	str	r3, [sp, #24]
 8014a90:	4607      	mov	r7, r0
 8014a92:	9b04      	ldr	r3, [sp, #16]
 8014a94:	4631      	mov	r1, r6
 8014a96:	3b01      	subs	r3, #1
 8014a98:	4650      	mov	r0, sl
 8014a9a:	9301      	str	r3, [sp, #4]
 8014a9c:	f7ff fa6b 	bl	8013f76 <quorem>
 8014aa0:	4641      	mov	r1, r8
 8014aa2:	9002      	str	r0, [sp, #8]
 8014aa4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014aa8:	4650      	mov	r0, sl
 8014aaa:	f000 fc5b 	bl	8015364 <__mcmp>
 8014aae:	463a      	mov	r2, r7
 8014ab0:	9005      	str	r0, [sp, #20]
 8014ab2:	4631      	mov	r1, r6
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	f000 fc71 	bl	801539c <__mdiff>
 8014aba:	68c2      	ldr	r2, [r0, #12]
 8014abc:	4605      	mov	r5, r0
 8014abe:	bb02      	cbnz	r2, 8014b02 <_dtoa_r+0xa7a>
 8014ac0:	4601      	mov	r1, r0
 8014ac2:	4650      	mov	r0, sl
 8014ac4:	f000 fc4e 	bl	8015364 <__mcmp>
 8014ac8:	4602      	mov	r2, r0
 8014aca:	4629      	mov	r1, r5
 8014acc:	4620      	mov	r0, r4
 8014ace:	9209      	str	r2, [sp, #36]	; 0x24
 8014ad0:	f000 fa0c 	bl	8014eec <_Bfree>
 8014ad4:	9b07      	ldr	r3, [sp, #28]
 8014ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ad8:	9d04      	ldr	r5, [sp, #16]
 8014ada:	ea43 0102 	orr.w	r1, r3, r2
 8014ade:	9b06      	ldr	r3, [sp, #24]
 8014ae0:	4319      	orrs	r1, r3
 8014ae2:	d110      	bne.n	8014b06 <_dtoa_r+0xa7e>
 8014ae4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014ae8:	d029      	beq.n	8014b3e <_dtoa_r+0xab6>
 8014aea:	9b05      	ldr	r3, [sp, #20]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	dd02      	ble.n	8014af6 <_dtoa_r+0xa6e>
 8014af0:	9b02      	ldr	r3, [sp, #8]
 8014af2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8014af6:	9b01      	ldr	r3, [sp, #4]
 8014af8:	f883 9000 	strb.w	r9, [r3]
 8014afc:	e774      	b.n	80149e8 <_dtoa_r+0x960>
 8014afe:	4638      	mov	r0, r7
 8014b00:	e7ba      	b.n	8014a78 <_dtoa_r+0x9f0>
 8014b02:	2201      	movs	r2, #1
 8014b04:	e7e1      	b.n	8014aca <_dtoa_r+0xa42>
 8014b06:	9b05      	ldr	r3, [sp, #20]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	db04      	blt.n	8014b16 <_dtoa_r+0xa8e>
 8014b0c:	9907      	ldr	r1, [sp, #28]
 8014b0e:	430b      	orrs	r3, r1
 8014b10:	9906      	ldr	r1, [sp, #24]
 8014b12:	430b      	orrs	r3, r1
 8014b14:	d120      	bne.n	8014b58 <_dtoa_r+0xad0>
 8014b16:	2a00      	cmp	r2, #0
 8014b18:	dded      	ble.n	8014af6 <_dtoa_r+0xa6e>
 8014b1a:	4651      	mov	r1, sl
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	4620      	mov	r0, r4
 8014b20:	f000 fbb4 	bl	801528c <__lshift>
 8014b24:	4631      	mov	r1, r6
 8014b26:	4682      	mov	sl, r0
 8014b28:	f000 fc1c 	bl	8015364 <__mcmp>
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	dc03      	bgt.n	8014b38 <_dtoa_r+0xab0>
 8014b30:	d1e1      	bne.n	8014af6 <_dtoa_r+0xa6e>
 8014b32:	f019 0f01 	tst.w	r9, #1
 8014b36:	d0de      	beq.n	8014af6 <_dtoa_r+0xa6e>
 8014b38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014b3c:	d1d8      	bne.n	8014af0 <_dtoa_r+0xa68>
 8014b3e:	9a01      	ldr	r2, [sp, #4]
 8014b40:	2339      	movs	r3, #57	; 0x39
 8014b42:	7013      	strb	r3, [r2, #0]
 8014b44:	462b      	mov	r3, r5
 8014b46:	461d      	mov	r5, r3
 8014b48:	3b01      	subs	r3, #1
 8014b4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014b4e:	2a39      	cmp	r2, #57	; 0x39
 8014b50:	d06c      	beq.n	8014c2c <_dtoa_r+0xba4>
 8014b52:	3201      	adds	r2, #1
 8014b54:	701a      	strb	r2, [r3, #0]
 8014b56:	e747      	b.n	80149e8 <_dtoa_r+0x960>
 8014b58:	2a00      	cmp	r2, #0
 8014b5a:	dd07      	ble.n	8014b6c <_dtoa_r+0xae4>
 8014b5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014b60:	d0ed      	beq.n	8014b3e <_dtoa_r+0xab6>
 8014b62:	9a01      	ldr	r2, [sp, #4]
 8014b64:	f109 0301 	add.w	r3, r9, #1
 8014b68:	7013      	strb	r3, [r2, #0]
 8014b6a:	e73d      	b.n	80149e8 <_dtoa_r+0x960>
 8014b6c:	9b04      	ldr	r3, [sp, #16]
 8014b6e:	9a08      	ldr	r2, [sp, #32]
 8014b70:	f803 9c01 	strb.w	r9, [r3, #-1]
 8014b74:	4293      	cmp	r3, r2
 8014b76:	d043      	beq.n	8014c00 <_dtoa_r+0xb78>
 8014b78:	4651      	mov	r1, sl
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	220a      	movs	r2, #10
 8014b7e:	4620      	mov	r0, r4
 8014b80:	f000 f9d6 	bl	8014f30 <__multadd>
 8014b84:	45b8      	cmp	r8, r7
 8014b86:	4682      	mov	sl, r0
 8014b88:	f04f 0300 	mov.w	r3, #0
 8014b8c:	f04f 020a 	mov.w	r2, #10
 8014b90:	4641      	mov	r1, r8
 8014b92:	4620      	mov	r0, r4
 8014b94:	d107      	bne.n	8014ba6 <_dtoa_r+0xb1e>
 8014b96:	f000 f9cb 	bl	8014f30 <__multadd>
 8014b9a:	4680      	mov	r8, r0
 8014b9c:	4607      	mov	r7, r0
 8014b9e:	9b04      	ldr	r3, [sp, #16]
 8014ba0:	3301      	adds	r3, #1
 8014ba2:	9304      	str	r3, [sp, #16]
 8014ba4:	e775      	b.n	8014a92 <_dtoa_r+0xa0a>
 8014ba6:	f000 f9c3 	bl	8014f30 <__multadd>
 8014baa:	4639      	mov	r1, r7
 8014bac:	4680      	mov	r8, r0
 8014bae:	2300      	movs	r3, #0
 8014bb0:	220a      	movs	r2, #10
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	f000 f9bc 	bl	8014f30 <__multadd>
 8014bb8:	4607      	mov	r7, r0
 8014bba:	e7f0      	b.n	8014b9e <_dtoa_r+0xb16>
 8014bbc:	9b04      	ldr	r3, [sp, #16]
 8014bbe:	9301      	str	r3, [sp, #4]
 8014bc0:	9d00      	ldr	r5, [sp, #0]
 8014bc2:	4631      	mov	r1, r6
 8014bc4:	4650      	mov	r0, sl
 8014bc6:	f7ff f9d6 	bl	8013f76 <quorem>
 8014bca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014bce:	9b00      	ldr	r3, [sp, #0]
 8014bd0:	f805 9b01 	strb.w	r9, [r5], #1
 8014bd4:	1aea      	subs	r2, r5, r3
 8014bd6:	9b01      	ldr	r3, [sp, #4]
 8014bd8:	4293      	cmp	r3, r2
 8014bda:	dd07      	ble.n	8014bec <_dtoa_r+0xb64>
 8014bdc:	4651      	mov	r1, sl
 8014bde:	2300      	movs	r3, #0
 8014be0:	220a      	movs	r2, #10
 8014be2:	4620      	mov	r0, r4
 8014be4:	f000 f9a4 	bl	8014f30 <__multadd>
 8014be8:	4682      	mov	sl, r0
 8014bea:	e7ea      	b.n	8014bc2 <_dtoa_r+0xb3a>
 8014bec:	9b01      	ldr	r3, [sp, #4]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	bfc8      	it	gt
 8014bf2:	461d      	movgt	r5, r3
 8014bf4:	9b00      	ldr	r3, [sp, #0]
 8014bf6:	bfd8      	it	le
 8014bf8:	2501      	movle	r5, #1
 8014bfa:	441d      	add	r5, r3
 8014bfc:	f04f 0800 	mov.w	r8, #0
 8014c00:	4651      	mov	r1, sl
 8014c02:	2201      	movs	r2, #1
 8014c04:	4620      	mov	r0, r4
 8014c06:	f000 fb41 	bl	801528c <__lshift>
 8014c0a:	4631      	mov	r1, r6
 8014c0c:	4682      	mov	sl, r0
 8014c0e:	f000 fba9 	bl	8015364 <__mcmp>
 8014c12:	2800      	cmp	r0, #0
 8014c14:	dc96      	bgt.n	8014b44 <_dtoa_r+0xabc>
 8014c16:	d102      	bne.n	8014c1e <_dtoa_r+0xb96>
 8014c18:	f019 0f01 	tst.w	r9, #1
 8014c1c:	d192      	bne.n	8014b44 <_dtoa_r+0xabc>
 8014c1e:	462b      	mov	r3, r5
 8014c20:	461d      	mov	r5, r3
 8014c22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c26:	2a30      	cmp	r2, #48	; 0x30
 8014c28:	d0fa      	beq.n	8014c20 <_dtoa_r+0xb98>
 8014c2a:	e6dd      	b.n	80149e8 <_dtoa_r+0x960>
 8014c2c:	9a00      	ldr	r2, [sp, #0]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d189      	bne.n	8014b46 <_dtoa_r+0xabe>
 8014c32:	f10b 0b01 	add.w	fp, fp, #1
 8014c36:	2331      	movs	r3, #49	; 0x31
 8014c38:	e796      	b.n	8014b68 <_dtoa_r+0xae0>
 8014c3a:	4b0a      	ldr	r3, [pc, #40]	; (8014c64 <_dtoa_r+0xbdc>)
 8014c3c:	f7ff ba99 	b.w	8014172 <_dtoa_r+0xea>
 8014c40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	f47f aa6d 	bne.w	8014122 <_dtoa_r+0x9a>
 8014c48:	4b07      	ldr	r3, [pc, #28]	; (8014c68 <_dtoa_r+0xbe0>)
 8014c4a:	f7ff ba92 	b.w	8014172 <_dtoa_r+0xea>
 8014c4e:	9b01      	ldr	r3, [sp, #4]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	dcb5      	bgt.n	8014bc0 <_dtoa_r+0xb38>
 8014c54:	9b07      	ldr	r3, [sp, #28]
 8014c56:	2b02      	cmp	r3, #2
 8014c58:	f73f aeb1 	bgt.w	80149be <_dtoa_r+0x936>
 8014c5c:	e7b0      	b.n	8014bc0 <_dtoa_r+0xb38>
 8014c5e:	bf00      	nop
 8014c60:	08037560 	.word	0x08037560
 8014c64:	080374c0 	.word	0x080374c0
 8014c68:	080374e4 	.word	0x080374e4

08014c6c <_free_r>:
 8014c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c6e:	2900      	cmp	r1, #0
 8014c70:	d044      	beq.n	8014cfc <_free_r+0x90>
 8014c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c76:	9001      	str	r0, [sp, #4]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	f1a1 0404 	sub.w	r4, r1, #4
 8014c7e:	bfb8      	it	lt
 8014c80:	18e4      	addlt	r4, r4, r3
 8014c82:	f000 f8e7 	bl	8014e54 <__malloc_lock>
 8014c86:	4a1e      	ldr	r2, [pc, #120]	; (8014d00 <_free_r+0x94>)
 8014c88:	9801      	ldr	r0, [sp, #4]
 8014c8a:	6813      	ldr	r3, [r2, #0]
 8014c8c:	b933      	cbnz	r3, 8014c9c <_free_r+0x30>
 8014c8e:	6063      	str	r3, [r4, #4]
 8014c90:	6014      	str	r4, [r2, #0]
 8014c92:	b003      	add	sp, #12
 8014c94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c98:	f000 b8e2 	b.w	8014e60 <__malloc_unlock>
 8014c9c:	42a3      	cmp	r3, r4
 8014c9e:	d908      	bls.n	8014cb2 <_free_r+0x46>
 8014ca0:	6825      	ldr	r5, [r4, #0]
 8014ca2:	1961      	adds	r1, r4, r5
 8014ca4:	428b      	cmp	r3, r1
 8014ca6:	bf01      	itttt	eq
 8014ca8:	6819      	ldreq	r1, [r3, #0]
 8014caa:	685b      	ldreq	r3, [r3, #4]
 8014cac:	1949      	addeq	r1, r1, r5
 8014cae:	6021      	streq	r1, [r4, #0]
 8014cb0:	e7ed      	b.n	8014c8e <_free_r+0x22>
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	685b      	ldr	r3, [r3, #4]
 8014cb6:	b10b      	cbz	r3, 8014cbc <_free_r+0x50>
 8014cb8:	42a3      	cmp	r3, r4
 8014cba:	d9fa      	bls.n	8014cb2 <_free_r+0x46>
 8014cbc:	6811      	ldr	r1, [r2, #0]
 8014cbe:	1855      	adds	r5, r2, r1
 8014cc0:	42a5      	cmp	r5, r4
 8014cc2:	d10b      	bne.n	8014cdc <_free_r+0x70>
 8014cc4:	6824      	ldr	r4, [r4, #0]
 8014cc6:	4421      	add	r1, r4
 8014cc8:	1854      	adds	r4, r2, r1
 8014cca:	42a3      	cmp	r3, r4
 8014ccc:	6011      	str	r1, [r2, #0]
 8014cce:	d1e0      	bne.n	8014c92 <_free_r+0x26>
 8014cd0:	681c      	ldr	r4, [r3, #0]
 8014cd2:	685b      	ldr	r3, [r3, #4]
 8014cd4:	6053      	str	r3, [r2, #4]
 8014cd6:	440c      	add	r4, r1
 8014cd8:	6014      	str	r4, [r2, #0]
 8014cda:	e7da      	b.n	8014c92 <_free_r+0x26>
 8014cdc:	d902      	bls.n	8014ce4 <_free_r+0x78>
 8014cde:	230c      	movs	r3, #12
 8014ce0:	6003      	str	r3, [r0, #0]
 8014ce2:	e7d6      	b.n	8014c92 <_free_r+0x26>
 8014ce4:	6825      	ldr	r5, [r4, #0]
 8014ce6:	1961      	adds	r1, r4, r5
 8014ce8:	428b      	cmp	r3, r1
 8014cea:	bf04      	itt	eq
 8014cec:	6819      	ldreq	r1, [r3, #0]
 8014cee:	685b      	ldreq	r3, [r3, #4]
 8014cf0:	6063      	str	r3, [r4, #4]
 8014cf2:	bf04      	itt	eq
 8014cf4:	1949      	addeq	r1, r1, r5
 8014cf6:	6021      	streq	r1, [r4, #0]
 8014cf8:	6054      	str	r4, [r2, #4]
 8014cfa:	e7ca      	b.n	8014c92 <_free_r+0x26>
 8014cfc:	b003      	add	sp, #12
 8014cfe:	bd30      	pop	{r4, r5, pc}
 8014d00:	20002d4c 	.word	0x20002d4c

08014d04 <malloc>:
 8014d04:	4b02      	ldr	r3, [pc, #8]	; (8014d10 <malloc+0xc>)
 8014d06:	4601      	mov	r1, r0
 8014d08:	6818      	ldr	r0, [r3, #0]
 8014d0a:	f000 b823 	b.w	8014d54 <_malloc_r>
 8014d0e:	bf00      	nop
 8014d10:	2000027c 	.word	0x2000027c

08014d14 <sbrk_aligned>:
 8014d14:	b570      	push	{r4, r5, r6, lr}
 8014d16:	4e0e      	ldr	r6, [pc, #56]	; (8014d50 <sbrk_aligned+0x3c>)
 8014d18:	460c      	mov	r4, r1
 8014d1a:	6831      	ldr	r1, [r6, #0]
 8014d1c:	4605      	mov	r5, r0
 8014d1e:	b911      	cbnz	r1, 8014d26 <sbrk_aligned+0x12>
 8014d20:	f000 fe40 	bl	80159a4 <_sbrk_r>
 8014d24:	6030      	str	r0, [r6, #0]
 8014d26:	4621      	mov	r1, r4
 8014d28:	4628      	mov	r0, r5
 8014d2a:	f000 fe3b 	bl	80159a4 <_sbrk_r>
 8014d2e:	1c43      	adds	r3, r0, #1
 8014d30:	d00a      	beq.n	8014d48 <sbrk_aligned+0x34>
 8014d32:	1cc4      	adds	r4, r0, #3
 8014d34:	f024 0403 	bic.w	r4, r4, #3
 8014d38:	42a0      	cmp	r0, r4
 8014d3a:	d007      	beq.n	8014d4c <sbrk_aligned+0x38>
 8014d3c:	1a21      	subs	r1, r4, r0
 8014d3e:	4628      	mov	r0, r5
 8014d40:	f000 fe30 	bl	80159a4 <_sbrk_r>
 8014d44:	3001      	adds	r0, #1
 8014d46:	d101      	bne.n	8014d4c <sbrk_aligned+0x38>
 8014d48:	f04f 34ff 	mov.w	r4, #4294967295
 8014d4c:	4620      	mov	r0, r4
 8014d4e:	bd70      	pop	{r4, r5, r6, pc}
 8014d50:	20002d50 	.word	0x20002d50

08014d54 <_malloc_r>:
 8014d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d58:	1ccd      	adds	r5, r1, #3
 8014d5a:	f025 0503 	bic.w	r5, r5, #3
 8014d5e:	3508      	adds	r5, #8
 8014d60:	2d0c      	cmp	r5, #12
 8014d62:	bf38      	it	cc
 8014d64:	250c      	movcc	r5, #12
 8014d66:	2d00      	cmp	r5, #0
 8014d68:	4607      	mov	r7, r0
 8014d6a:	db01      	blt.n	8014d70 <_malloc_r+0x1c>
 8014d6c:	42a9      	cmp	r1, r5
 8014d6e:	d905      	bls.n	8014d7c <_malloc_r+0x28>
 8014d70:	230c      	movs	r3, #12
 8014d72:	603b      	str	r3, [r7, #0]
 8014d74:	2600      	movs	r6, #0
 8014d76:	4630      	mov	r0, r6
 8014d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014e50 <_malloc_r+0xfc>
 8014d80:	f000 f868 	bl	8014e54 <__malloc_lock>
 8014d84:	f8d8 3000 	ldr.w	r3, [r8]
 8014d88:	461c      	mov	r4, r3
 8014d8a:	bb5c      	cbnz	r4, 8014de4 <_malloc_r+0x90>
 8014d8c:	4629      	mov	r1, r5
 8014d8e:	4638      	mov	r0, r7
 8014d90:	f7ff ffc0 	bl	8014d14 <sbrk_aligned>
 8014d94:	1c43      	adds	r3, r0, #1
 8014d96:	4604      	mov	r4, r0
 8014d98:	d155      	bne.n	8014e46 <_malloc_r+0xf2>
 8014d9a:	f8d8 4000 	ldr.w	r4, [r8]
 8014d9e:	4626      	mov	r6, r4
 8014da0:	2e00      	cmp	r6, #0
 8014da2:	d145      	bne.n	8014e30 <_malloc_r+0xdc>
 8014da4:	2c00      	cmp	r4, #0
 8014da6:	d048      	beq.n	8014e3a <_malloc_r+0xe6>
 8014da8:	6823      	ldr	r3, [r4, #0]
 8014daa:	4631      	mov	r1, r6
 8014dac:	4638      	mov	r0, r7
 8014dae:	eb04 0903 	add.w	r9, r4, r3
 8014db2:	f000 fdf7 	bl	80159a4 <_sbrk_r>
 8014db6:	4581      	cmp	r9, r0
 8014db8:	d13f      	bne.n	8014e3a <_malloc_r+0xe6>
 8014dba:	6821      	ldr	r1, [r4, #0]
 8014dbc:	1a6d      	subs	r5, r5, r1
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	4638      	mov	r0, r7
 8014dc2:	f7ff ffa7 	bl	8014d14 <sbrk_aligned>
 8014dc6:	3001      	adds	r0, #1
 8014dc8:	d037      	beq.n	8014e3a <_malloc_r+0xe6>
 8014dca:	6823      	ldr	r3, [r4, #0]
 8014dcc:	442b      	add	r3, r5
 8014dce:	6023      	str	r3, [r4, #0]
 8014dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d038      	beq.n	8014e4a <_malloc_r+0xf6>
 8014dd8:	685a      	ldr	r2, [r3, #4]
 8014dda:	42a2      	cmp	r2, r4
 8014ddc:	d12b      	bne.n	8014e36 <_malloc_r+0xe2>
 8014dde:	2200      	movs	r2, #0
 8014de0:	605a      	str	r2, [r3, #4]
 8014de2:	e00f      	b.n	8014e04 <_malloc_r+0xb0>
 8014de4:	6822      	ldr	r2, [r4, #0]
 8014de6:	1b52      	subs	r2, r2, r5
 8014de8:	d41f      	bmi.n	8014e2a <_malloc_r+0xd6>
 8014dea:	2a0b      	cmp	r2, #11
 8014dec:	d917      	bls.n	8014e1e <_malloc_r+0xca>
 8014dee:	1961      	adds	r1, r4, r5
 8014df0:	42a3      	cmp	r3, r4
 8014df2:	6025      	str	r5, [r4, #0]
 8014df4:	bf18      	it	ne
 8014df6:	6059      	strne	r1, [r3, #4]
 8014df8:	6863      	ldr	r3, [r4, #4]
 8014dfa:	bf08      	it	eq
 8014dfc:	f8c8 1000 	streq.w	r1, [r8]
 8014e00:	5162      	str	r2, [r4, r5]
 8014e02:	604b      	str	r3, [r1, #4]
 8014e04:	4638      	mov	r0, r7
 8014e06:	f104 060b 	add.w	r6, r4, #11
 8014e0a:	f000 f829 	bl	8014e60 <__malloc_unlock>
 8014e0e:	f026 0607 	bic.w	r6, r6, #7
 8014e12:	1d23      	adds	r3, r4, #4
 8014e14:	1af2      	subs	r2, r6, r3
 8014e16:	d0ae      	beq.n	8014d76 <_malloc_r+0x22>
 8014e18:	1b9b      	subs	r3, r3, r6
 8014e1a:	50a3      	str	r3, [r4, r2]
 8014e1c:	e7ab      	b.n	8014d76 <_malloc_r+0x22>
 8014e1e:	42a3      	cmp	r3, r4
 8014e20:	6862      	ldr	r2, [r4, #4]
 8014e22:	d1dd      	bne.n	8014de0 <_malloc_r+0x8c>
 8014e24:	f8c8 2000 	str.w	r2, [r8]
 8014e28:	e7ec      	b.n	8014e04 <_malloc_r+0xb0>
 8014e2a:	4623      	mov	r3, r4
 8014e2c:	6864      	ldr	r4, [r4, #4]
 8014e2e:	e7ac      	b.n	8014d8a <_malloc_r+0x36>
 8014e30:	4634      	mov	r4, r6
 8014e32:	6876      	ldr	r6, [r6, #4]
 8014e34:	e7b4      	b.n	8014da0 <_malloc_r+0x4c>
 8014e36:	4613      	mov	r3, r2
 8014e38:	e7cc      	b.n	8014dd4 <_malloc_r+0x80>
 8014e3a:	230c      	movs	r3, #12
 8014e3c:	603b      	str	r3, [r7, #0]
 8014e3e:	4638      	mov	r0, r7
 8014e40:	f000 f80e 	bl	8014e60 <__malloc_unlock>
 8014e44:	e797      	b.n	8014d76 <_malloc_r+0x22>
 8014e46:	6025      	str	r5, [r4, #0]
 8014e48:	e7dc      	b.n	8014e04 <_malloc_r+0xb0>
 8014e4a:	605b      	str	r3, [r3, #4]
 8014e4c:	deff      	udf	#255	; 0xff
 8014e4e:	bf00      	nop
 8014e50:	20002d4c 	.word	0x20002d4c

08014e54 <__malloc_lock>:
 8014e54:	4801      	ldr	r0, [pc, #4]	; (8014e5c <__malloc_lock+0x8>)
 8014e56:	f7ff b88c 	b.w	8013f72 <__retarget_lock_acquire_recursive>
 8014e5a:	bf00      	nop
 8014e5c:	20002d48 	.word	0x20002d48

08014e60 <__malloc_unlock>:
 8014e60:	4801      	ldr	r0, [pc, #4]	; (8014e68 <__malloc_unlock+0x8>)
 8014e62:	f7ff b887 	b.w	8013f74 <__retarget_lock_release_recursive>
 8014e66:	bf00      	nop
 8014e68:	20002d48 	.word	0x20002d48

08014e6c <_Balloc>:
 8014e6c:	b570      	push	{r4, r5, r6, lr}
 8014e6e:	69c6      	ldr	r6, [r0, #28]
 8014e70:	4604      	mov	r4, r0
 8014e72:	460d      	mov	r5, r1
 8014e74:	b976      	cbnz	r6, 8014e94 <_Balloc+0x28>
 8014e76:	2010      	movs	r0, #16
 8014e78:	f7ff ff44 	bl	8014d04 <malloc>
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	61e0      	str	r0, [r4, #28]
 8014e80:	b920      	cbnz	r0, 8014e8c <_Balloc+0x20>
 8014e82:	4b18      	ldr	r3, [pc, #96]	; (8014ee4 <_Balloc+0x78>)
 8014e84:	4818      	ldr	r0, [pc, #96]	; (8014ee8 <_Balloc+0x7c>)
 8014e86:	216b      	movs	r1, #107	; 0x6b
 8014e88:	f000 fdaa 	bl	80159e0 <__assert_func>
 8014e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014e90:	6006      	str	r6, [r0, #0]
 8014e92:	60c6      	str	r6, [r0, #12]
 8014e94:	69e6      	ldr	r6, [r4, #28]
 8014e96:	68f3      	ldr	r3, [r6, #12]
 8014e98:	b183      	cbz	r3, 8014ebc <_Balloc+0x50>
 8014e9a:	69e3      	ldr	r3, [r4, #28]
 8014e9c:	68db      	ldr	r3, [r3, #12]
 8014e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014ea2:	b9b8      	cbnz	r0, 8014ed4 <_Balloc+0x68>
 8014ea4:	2101      	movs	r1, #1
 8014ea6:	fa01 f605 	lsl.w	r6, r1, r5
 8014eaa:	1d72      	adds	r2, r6, #5
 8014eac:	0092      	lsls	r2, r2, #2
 8014eae:	4620      	mov	r0, r4
 8014eb0:	f000 fdb4 	bl	8015a1c <_calloc_r>
 8014eb4:	b160      	cbz	r0, 8014ed0 <_Balloc+0x64>
 8014eb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014eba:	e00e      	b.n	8014eda <_Balloc+0x6e>
 8014ebc:	2221      	movs	r2, #33	; 0x21
 8014ebe:	2104      	movs	r1, #4
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	f000 fdab 	bl	8015a1c <_calloc_r>
 8014ec6:	69e3      	ldr	r3, [r4, #28]
 8014ec8:	60f0      	str	r0, [r6, #12]
 8014eca:	68db      	ldr	r3, [r3, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d1e4      	bne.n	8014e9a <_Balloc+0x2e>
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	bd70      	pop	{r4, r5, r6, pc}
 8014ed4:	6802      	ldr	r2, [r0, #0]
 8014ed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014eda:	2300      	movs	r3, #0
 8014edc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ee0:	e7f7      	b.n	8014ed2 <_Balloc+0x66>
 8014ee2:	bf00      	nop
 8014ee4:	080374f1 	.word	0x080374f1
 8014ee8:	08037571 	.word	0x08037571

08014eec <_Bfree>:
 8014eec:	b570      	push	{r4, r5, r6, lr}
 8014eee:	69c6      	ldr	r6, [r0, #28]
 8014ef0:	4605      	mov	r5, r0
 8014ef2:	460c      	mov	r4, r1
 8014ef4:	b976      	cbnz	r6, 8014f14 <_Bfree+0x28>
 8014ef6:	2010      	movs	r0, #16
 8014ef8:	f7ff ff04 	bl	8014d04 <malloc>
 8014efc:	4602      	mov	r2, r0
 8014efe:	61e8      	str	r0, [r5, #28]
 8014f00:	b920      	cbnz	r0, 8014f0c <_Bfree+0x20>
 8014f02:	4b09      	ldr	r3, [pc, #36]	; (8014f28 <_Bfree+0x3c>)
 8014f04:	4809      	ldr	r0, [pc, #36]	; (8014f2c <_Bfree+0x40>)
 8014f06:	218f      	movs	r1, #143	; 0x8f
 8014f08:	f000 fd6a 	bl	80159e0 <__assert_func>
 8014f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f10:	6006      	str	r6, [r0, #0]
 8014f12:	60c6      	str	r6, [r0, #12]
 8014f14:	b13c      	cbz	r4, 8014f26 <_Bfree+0x3a>
 8014f16:	69eb      	ldr	r3, [r5, #28]
 8014f18:	6862      	ldr	r2, [r4, #4]
 8014f1a:	68db      	ldr	r3, [r3, #12]
 8014f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014f20:	6021      	str	r1, [r4, #0]
 8014f22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014f26:	bd70      	pop	{r4, r5, r6, pc}
 8014f28:	080374f1 	.word	0x080374f1
 8014f2c:	08037571 	.word	0x08037571

08014f30 <__multadd>:
 8014f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f34:	690d      	ldr	r5, [r1, #16]
 8014f36:	4607      	mov	r7, r0
 8014f38:	460c      	mov	r4, r1
 8014f3a:	461e      	mov	r6, r3
 8014f3c:	f101 0c14 	add.w	ip, r1, #20
 8014f40:	2000      	movs	r0, #0
 8014f42:	f8dc 3000 	ldr.w	r3, [ip]
 8014f46:	b299      	uxth	r1, r3
 8014f48:	fb02 6101 	mla	r1, r2, r1, r6
 8014f4c:	0c1e      	lsrs	r6, r3, #16
 8014f4e:	0c0b      	lsrs	r3, r1, #16
 8014f50:	fb02 3306 	mla	r3, r2, r6, r3
 8014f54:	b289      	uxth	r1, r1
 8014f56:	3001      	adds	r0, #1
 8014f58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014f5c:	4285      	cmp	r5, r0
 8014f5e:	f84c 1b04 	str.w	r1, [ip], #4
 8014f62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014f66:	dcec      	bgt.n	8014f42 <__multadd+0x12>
 8014f68:	b30e      	cbz	r6, 8014fae <__multadd+0x7e>
 8014f6a:	68a3      	ldr	r3, [r4, #8]
 8014f6c:	42ab      	cmp	r3, r5
 8014f6e:	dc19      	bgt.n	8014fa4 <__multadd+0x74>
 8014f70:	6861      	ldr	r1, [r4, #4]
 8014f72:	4638      	mov	r0, r7
 8014f74:	3101      	adds	r1, #1
 8014f76:	f7ff ff79 	bl	8014e6c <_Balloc>
 8014f7a:	4680      	mov	r8, r0
 8014f7c:	b928      	cbnz	r0, 8014f8a <__multadd+0x5a>
 8014f7e:	4602      	mov	r2, r0
 8014f80:	4b0c      	ldr	r3, [pc, #48]	; (8014fb4 <__multadd+0x84>)
 8014f82:	480d      	ldr	r0, [pc, #52]	; (8014fb8 <__multadd+0x88>)
 8014f84:	21ba      	movs	r1, #186	; 0xba
 8014f86:	f000 fd2b 	bl	80159e0 <__assert_func>
 8014f8a:	6922      	ldr	r2, [r4, #16]
 8014f8c:	3202      	adds	r2, #2
 8014f8e:	f104 010c 	add.w	r1, r4, #12
 8014f92:	0092      	lsls	r2, r2, #2
 8014f94:	300c      	adds	r0, #12
 8014f96:	f000 fd15 	bl	80159c4 <memcpy>
 8014f9a:	4621      	mov	r1, r4
 8014f9c:	4638      	mov	r0, r7
 8014f9e:	f7ff ffa5 	bl	8014eec <_Bfree>
 8014fa2:	4644      	mov	r4, r8
 8014fa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014fa8:	3501      	adds	r5, #1
 8014faa:	615e      	str	r6, [r3, #20]
 8014fac:	6125      	str	r5, [r4, #16]
 8014fae:	4620      	mov	r0, r4
 8014fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fb4:	08037560 	.word	0x08037560
 8014fb8:	08037571 	.word	0x08037571

08014fbc <__hi0bits>:
 8014fbc:	0c03      	lsrs	r3, r0, #16
 8014fbe:	041b      	lsls	r3, r3, #16
 8014fc0:	b9d3      	cbnz	r3, 8014ff8 <__hi0bits+0x3c>
 8014fc2:	0400      	lsls	r0, r0, #16
 8014fc4:	2310      	movs	r3, #16
 8014fc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014fca:	bf04      	itt	eq
 8014fcc:	0200      	lsleq	r0, r0, #8
 8014fce:	3308      	addeq	r3, #8
 8014fd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014fd4:	bf04      	itt	eq
 8014fd6:	0100      	lsleq	r0, r0, #4
 8014fd8:	3304      	addeq	r3, #4
 8014fda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014fde:	bf04      	itt	eq
 8014fe0:	0080      	lsleq	r0, r0, #2
 8014fe2:	3302      	addeq	r3, #2
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	db05      	blt.n	8014ff4 <__hi0bits+0x38>
 8014fe8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014fec:	f103 0301 	add.w	r3, r3, #1
 8014ff0:	bf08      	it	eq
 8014ff2:	2320      	moveq	r3, #32
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	4770      	bx	lr
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	e7e4      	b.n	8014fc6 <__hi0bits+0xa>

08014ffc <__lo0bits>:
 8014ffc:	6803      	ldr	r3, [r0, #0]
 8014ffe:	f013 0207 	ands.w	r2, r3, #7
 8015002:	d00c      	beq.n	801501e <__lo0bits+0x22>
 8015004:	07d9      	lsls	r1, r3, #31
 8015006:	d422      	bmi.n	801504e <__lo0bits+0x52>
 8015008:	079a      	lsls	r2, r3, #30
 801500a:	bf49      	itett	mi
 801500c:	085b      	lsrmi	r3, r3, #1
 801500e:	089b      	lsrpl	r3, r3, #2
 8015010:	6003      	strmi	r3, [r0, #0]
 8015012:	2201      	movmi	r2, #1
 8015014:	bf5c      	itt	pl
 8015016:	6003      	strpl	r3, [r0, #0]
 8015018:	2202      	movpl	r2, #2
 801501a:	4610      	mov	r0, r2
 801501c:	4770      	bx	lr
 801501e:	b299      	uxth	r1, r3
 8015020:	b909      	cbnz	r1, 8015026 <__lo0bits+0x2a>
 8015022:	0c1b      	lsrs	r3, r3, #16
 8015024:	2210      	movs	r2, #16
 8015026:	b2d9      	uxtb	r1, r3
 8015028:	b909      	cbnz	r1, 801502e <__lo0bits+0x32>
 801502a:	3208      	adds	r2, #8
 801502c:	0a1b      	lsrs	r3, r3, #8
 801502e:	0719      	lsls	r1, r3, #28
 8015030:	bf04      	itt	eq
 8015032:	091b      	lsreq	r3, r3, #4
 8015034:	3204      	addeq	r2, #4
 8015036:	0799      	lsls	r1, r3, #30
 8015038:	bf04      	itt	eq
 801503a:	089b      	lsreq	r3, r3, #2
 801503c:	3202      	addeq	r2, #2
 801503e:	07d9      	lsls	r1, r3, #31
 8015040:	d403      	bmi.n	801504a <__lo0bits+0x4e>
 8015042:	085b      	lsrs	r3, r3, #1
 8015044:	f102 0201 	add.w	r2, r2, #1
 8015048:	d003      	beq.n	8015052 <__lo0bits+0x56>
 801504a:	6003      	str	r3, [r0, #0]
 801504c:	e7e5      	b.n	801501a <__lo0bits+0x1e>
 801504e:	2200      	movs	r2, #0
 8015050:	e7e3      	b.n	801501a <__lo0bits+0x1e>
 8015052:	2220      	movs	r2, #32
 8015054:	e7e1      	b.n	801501a <__lo0bits+0x1e>
	...

08015058 <__i2b>:
 8015058:	b510      	push	{r4, lr}
 801505a:	460c      	mov	r4, r1
 801505c:	2101      	movs	r1, #1
 801505e:	f7ff ff05 	bl	8014e6c <_Balloc>
 8015062:	4602      	mov	r2, r0
 8015064:	b928      	cbnz	r0, 8015072 <__i2b+0x1a>
 8015066:	4b05      	ldr	r3, [pc, #20]	; (801507c <__i2b+0x24>)
 8015068:	4805      	ldr	r0, [pc, #20]	; (8015080 <__i2b+0x28>)
 801506a:	f240 1145 	movw	r1, #325	; 0x145
 801506e:	f000 fcb7 	bl	80159e0 <__assert_func>
 8015072:	2301      	movs	r3, #1
 8015074:	6144      	str	r4, [r0, #20]
 8015076:	6103      	str	r3, [r0, #16]
 8015078:	bd10      	pop	{r4, pc}
 801507a:	bf00      	nop
 801507c:	08037560 	.word	0x08037560
 8015080:	08037571 	.word	0x08037571

08015084 <__multiply>:
 8015084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015088:	4691      	mov	r9, r2
 801508a:	690a      	ldr	r2, [r1, #16]
 801508c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015090:	429a      	cmp	r2, r3
 8015092:	bfb8      	it	lt
 8015094:	460b      	movlt	r3, r1
 8015096:	460c      	mov	r4, r1
 8015098:	bfbc      	itt	lt
 801509a:	464c      	movlt	r4, r9
 801509c:	4699      	movlt	r9, r3
 801509e:	6927      	ldr	r7, [r4, #16]
 80150a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80150a4:	68a3      	ldr	r3, [r4, #8]
 80150a6:	6861      	ldr	r1, [r4, #4]
 80150a8:	eb07 060a 	add.w	r6, r7, sl
 80150ac:	42b3      	cmp	r3, r6
 80150ae:	b085      	sub	sp, #20
 80150b0:	bfb8      	it	lt
 80150b2:	3101      	addlt	r1, #1
 80150b4:	f7ff feda 	bl	8014e6c <_Balloc>
 80150b8:	b930      	cbnz	r0, 80150c8 <__multiply+0x44>
 80150ba:	4602      	mov	r2, r0
 80150bc:	4b44      	ldr	r3, [pc, #272]	; (80151d0 <__multiply+0x14c>)
 80150be:	4845      	ldr	r0, [pc, #276]	; (80151d4 <__multiply+0x150>)
 80150c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80150c4:	f000 fc8c 	bl	80159e0 <__assert_func>
 80150c8:	f100 0514 	add.w	r5, r0, #20
 80150cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80150d0:	462b      	mov	r3, r5
 80150d2:	2200      	movs	r2, #0
 80150d4:	4543      	cmp	r3, r8
 80150d6:	d321      	bcc.n	801511c <__multiply+0x98>
 80150d8:	f104 0314 	add.w	r3, r4, #20
 80150dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80150e0:	f109 0314 	add.w	r3, r9, #20
 80150e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80150e8:	9202      	str	r2, [sp, #8]
 80150ea:	1b3a      	subs	r2, r7, r4
 80150ec:	3a15      	subs	r2, #21
 80150ee:	f022 0203 	bic.w	r2, r2, #3
 80150f2:	3204      	adds	r2, #4
 80150f4:	f104 0115 	add.w	r1, r4, #21
 80150f8:	428f      	cmp	r7, r1
 80150fa:	bf38      	it	cc
 80150fc:	2204      	movcc	r2, #4
 80150fe:	9201      	str	r2, [sp, #4]
 8015100:	9a02      	ldr	r2, [sp, #8]
 8015102:	9303      	str	r3, [sp, #12]
 8015104:	429a      	cmp	r2, r3
 8015106:	d80c      	bhi.n	8015122 <__multiply+0x9e>
 8015108:	2e00      	cmp	r6, #0
 801510a:	dd03      	ble.n	8015114 <__multiply+0x90>
 801510c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015110:	2b00      	cmp	r3, #0
 8015112:	d05b      	beq.n	80151cc <__multiply+0x148>
 8015114:	6106      	str	r6, [r0, #16]
 8015116:	b005      	add	sp, #20
 8015118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801511c:	f843 2b04 	str.w	r2, [r3], #4
 8015120:	e7d8      	b.n	80150d4 <__multiply+0x50>
 8015122:	f8b3 a000 	ldrh.w	sl, [r3]
 8015126:	f1ba 0f00 	cmp.w	sl, #0
 801512a:	d024      	beq.n	8015176 <__multiply+0xf2>
 801512c:	f104 0e14 	add.w	lr, r4, #20
 8015130:	46a9      	mov	r9, r5
 8015132:	f04f 0c00 	mov.w	ip, #0
 8015136:	f85e 2b04 	ldr.w	r2, [lr], #4
 801513a:	f8d9 1000 	ldr.w	r1, [r9]
 801513e:	fa1f fb82 	uxth.w	fp, r2
 8015142:	b289      	uxth	r1, r1
 8015144:	fb0a 110b 	mla	r1, sl, fp, r1
 8015148:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801514c:	f8d9 2000 	ldr.w	r2, [r9]
 8015150:	4461      	add	r1, ip
 8015152:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015156:	fb0a c20b 	mla	r2, sl, fp, ip
 801515a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801515e:	b289      	uxth	r1, r1
 8015160:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015164:	4577      	cmp	r7, lr
 8015166:	f849 1b04 	str.w	r1, [r9], #4
 801516a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801516e:	d8e2      	bhi.n	8015136 <__multiply+0xb2>
 8015170:	9a01      	ldr	r2, [sp, #4]
 8015172:	f845 c002 	str.w	ip, [r5, r2]
 8015176:	9a03      	ldr	r2, [sp, #12]
 8015178:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801517c:	3304      	adds	r3, #4
 801517e:	f1b9 0f00 	cmp.w	r9, #0
 8015182:	d021      	beq.n	80151c8 <__multiply+0x144>
 8015184:	6829      	ldr	r1, [r5, #0]
 8015186:	f104 0c14 	add.w	ip, r4, #20
 801518a:	46ae      	mov	lr, r5
 801518c:	f04f 0a00 	mov.w	sl, #0
 8015190:	f8bc b000 	ldrh.w	fp, [ip]
 8015194:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015198:	fb09 220b 	mla	r2, r9, fp, r2
 801519c:	4452      	add	r2, sl
 801519e:	b289      	uxth	r1, r1
 80151a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80151a4:	f84e 1b04 	str.w	r1, [lr], #4
 80151a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80151ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80151b0:	f8be 1000 	ldrh.w	r1, [lr]
 80151b4:	fb09 110a 	mla	r1, r9, sl, r1
 80151b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80151bc:	4567      	cmp	r7, ip
 80151be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80151c2:	d8e5      	bhi.n	8015190 <__multiply+0x10c>
 80151c4:	9a01      	ldr	r2, [sp, #4]
 80151c6:	50a9      	str	r1, [r5, r2]
 80151c8:	3504      	adds	r5, #4
 80151ca:	e799      	b.n	8015100 <__multiply+0x7c>
 80151cc:	3e01      	subs	r6, #1
 80151ce:	e79b      	b.n	8015108 <__multiply+0x84>
 80151d0:	08037560 	.word	0x08037560
 80151d4:	08037571 	.word	0x08037571

080151d8 <__pow5mult>:
 80151d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151dc:	4615      	mov	r5, r2
 80151de:	f012 0203 	ands.w	r2, r2, #3
 80151e2:	4606      	mov	r6, r0
 80151e4:	460f      	mov	r7, r1
 80151e6:	d007      	beq.n	80151f8 <__pow5mult+0x20>
 80151e8:	4c25      	ldr	r4, [pc, #148]	; (8015280 <__pow5mult+0xa8>)
 80151ea:	3a01      	subs	r2, #1
 80151ec:	2300      	movs	r3, #0
 80151ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80151f2:	f7ff fe9d 	bl	8014f30 <__multadd>
 80151f6:	4607      	mov	r7, r0
 80151f8:	10ad      	asrs	r5, r5, #2
 80151fa:	d03d      	beq.n	8015278 <__pow5mult+0xa0>
 80151fc:	69f4      	ldr	r4, [r6, #28]
 80151fe:	b97c      	cbnz	r4, 8015220 <__pow5mult+0x48>
 8015200:	2010      	movs	r0, #16
 8015202:	f7ff fd7f 	bl	8014d04 <malloc>
 8015206:	4602      	mov	r2, r0
 8015208:	61f0      	str	r0, [r6, #28]
 801520a:	b928      	cbnz	r0, 8015218 <__pow5mult+0x40>
 801520c:	4b1d      	ldr	r3, [pc, #116]	; (8015284 <__pow5mult+0xac>)
 801520e:	481e      	ldr	r0, [pc, #120]	; (8015288 <__pow5mult+0xb0>)
 8015210:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015214:	f000 fbe4 	bl	80159e0 <__assert_func>
 8015218:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801521c:	6004      	str	r4, [r0, #0]
 801521e:	60c4      	str	r4, [r0, #12]
 8015220:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015224:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015228:	b94c      	cbnz	r4, 801523e <__pow5mult+0x66>
 801522a:	f240 2171 	movw	r1, #625	; 0x271
 801522e:	4630      	mov	r0, r6
 8015230:	f7ff ff12 	bl	8015058 <__i2b>
 8015234:	2300      	movs	r3, #0
 8015236:	f8c8 0008 	str.w	r0, [r8, #8]
 801523a:	4604      	mov	r4, r0
 801523c:	6003      	str	r3, [r0, #0]
 801523e:	f04f 0900 	mov.w	r9, #0
 8015242:	07eb      	lsls	r3, r5, #31
 8015244:	d50a      	bpl.n	801525c <__pow5mult+0x84>
 8015246:	4639      	mov	r1, r7
 8015248:	4622      	mov	r2, r4
 801524a:	4630      	mov	r0, r6
 801524c:	f7ff ff1a 	bl	8015084 <__multiply>
 8015250:	4639      	mov	r1, r7
 8015252:	4680      	mov	r8, r0
 8015254:	4630      	mov	r0, r6
 8015256:	f7ff fe49 	bl	8014eec <_Bfree>
 801525a:	4647      	mov	r7, r8
 801525c:	106d      	asrs	r5, r5, #1
 801525e:	d00b      	beq.n	8015278 <__pow5mult+0xa0>
 8015260:	6820      	ldr	r0, [r4, #0]
 8015262:	b938      	cbnz	r0, 8015274 <__pow5mult+0x9c>
 8015264:	4622      	mov	r2, r4
 8015266:	4621      	mov	r1, r4
 8015268:	4630      	mov	r0, r6
 801526a:	f7ff ff0b 	bl	8015084 <__multiply>
 801526e:	6020      	str	r0, [r4, #0]
 8015270:	f8c0 9000 	str.w	r9, [r0]
 8015274:	4604      	mov	r4, r0
 8015276:	e7e4      	b.n	8015242 <__pow5mult+0x6a>
 8015278:	4638      	mov	r0, r7
 801527a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801527e:	bf00      	nop
 8015280:	080376c0 	.word	0x080376c0
 8015284:	080374f1 	.word	0x080374f1
 8015288:	08037571 	.word	0x08037571

0801528c <__lshift>:
 801528c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015290:	460c      	mov	r4, r1
 8015292:	6849      	ldr	r1, [r1, #4]
 8015294:	6923      	ldr	r3, [r4, #16]
 8015296:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801529a:	68a3      	ldr	r3, [r4, #8]
 801529c:	4607      	mov	r7, r0
 801529e:	4691      	mov	r9, r2
 80152a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80152a4:	f108 0601 	add.w	r6, r8, #1
 80152a8:	42b3      	cmp	r3, r6
 80152aa:	db0b      	blt.n	80152c4 <__lshift+0x38>
 80152ac:	4638      	mov	r0, r7
 80152ae:	f7ff fddd 	bl	8014e6c <_Balloc>
 80152b2:	4605      	mov	r5, r0
 80152b4:	b948      	cbnz	r0, 80152ca <__lshift+0x3e>
 80152b6:	4602      	mov	r2, r0
 80152b8:	4b28      	ldr	r3, [pc, #160]	; (801535c <__lshift+0xd0>)
 80152ba:	4829      	ldr	r0, [pc, #164]	; (8015360 <__lshift+0xd4>)
 80152bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80152c0:	f000 fb8e 	bl	80159e0 <__assert_func>
 80152c4:	3101      	adds	r1, #1
 80152c6:	005b      	lsls	r3, r3, #1
 80152c8:	e7ee      	b.n	80152a8 <__lshift+0x1c>
 80152ca:	2300      	movs	r3, #0
 80152cc:	f100 0114 	add.w	r1, r0, #20
 80152d0:	f100 0210 	add.w	r2, r0, #16
 80152d4:	4618      	mov	r0, r3
 80152d6:	4553      	cmp	r3, sl
 80152d8:	db33      	blt.n	8015342 <__lshift+0xb6>
 80152da:	6920      	ldr	r0, [r4, #16]
 80152dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80152e0:	f104 0314 	add.w	r3, r4, #20
 80152e4:	f019 091f 	ands.w	r9, r9, #31
 80152e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80152ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80152f0:	d02b      	beq.n	801534a <__lshift+0xbe>
 80152f2:	f1c9 0e20 	rsb	lr, r9, #32
 80152f6:	468a      	mov	sl, r1
 80152f8:	2200      	movs	r2, #0
 80152fa:	6818      	ldr	r0, [r3, #0]
 80152fc:	fa00 f009 	lsl.w	r0, r0, r9
 8015300:	4310      	orrs	r0, r2
 8015302:	f84a 0b04 	str.w	r0, [sl], #4
 8015306:	f853 2b04 	ldr.w	r2, [r3], #4
 801530a:	459c      	cmp	ip, r3
 801530c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015310:	d8f3      	bhi.n	80152fa <__lshift+0x6e>
 8015312:	ebac 0304 	sub.w	r3, ip, r4
 8015316:	3b15      	subs	r3, #21
 8015318:	f023 0303 	bic.w	r3, r3, #3
 801531c:	3304      	adds	r3, #4
 801531e:	f104 0015 	add.w	r0, r4, #21
 8015322:	4584      	cmp	ip, r0
 8015324:	bf38      	it	cc
 8015326:	2304      	movcc	r3, #4
 8015328:	50ca      	str	r2, [r1, r3]
 801532a:	b10a      	cbz	r2, 8015330 <__lshift+0xa4>
 801532c:	f108 0602 	add.w	r6, r8, #2
 8015330:	3e01      	subs	r6, #1
 8015332:	4638      	mov	r0, r7
 8015334:	612e      	str	r6, [r5, #16]
 8015336:	4621      	mov	r1, r4
 8015338:	f7ff fdd8 	bl	8014eec <_Bfree>
 801533c:	4628      	mov	r0, r5
 801533e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015342:	f842 0f04 	str.w	r0, [r2, #4]!
 8015346:	3301      	adds	r3, #1
 8015348:	e7c5      	b.n	80152d6 <__lshift+0x4a>
 801534a:	3904      	subs	r1, #4
 801534c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015350:	f841 2f04 	str.w	r2, [r1, #4]!
 8015354:	459c      	cmp	ip, r3
 8015356:	d8f9      	bhi.n	801534c <__lshift+0xc0>
 8015358:	e7ea      	b.n	8015330 <__lshift+0xa4>
 801535a:	bf00      	nop
 801535c:	08037560 	.word	0x08037560
 8015360:	08037571 	.word	0x08037571

08015364 <__mcmp>:
 8015364:	b530      	push	{r4, r5, lr}
 8015366:	6902      	ldr	r2, [r0, #16]
 8015368:	690c      	ldr	r4, [r1, #16]
 801536a:	1b12      	subs	r2, r2, r4
 801536c:	d10e      	bne.n	801538c <__mcmp+0x28>
 801536e:	f100 0314 	add.w	r3, r0, #20
 8015372:	3114      	adds	r1, #20
 8015374:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015378:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801537c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015380:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015384:	42a5      	cmp	r5, r4
 8015386:	d003      	beq.n	8015390 <__mcmp+0x2c>
 8015388:	d305      	bcc.n	8015396 <__mcmp+0x32>
 801538a:	2201      	movs	r2, #1
 801538c:	4610      	mov	r0, r2
 801538e:	bd30      	pop	{r4, r5, pc}
 8015390:	4283      	cmp	r3, r0
 8015392:	d3f3      	bcc.n	801537c <__mcmp+0x18>
 8015394:	e7fa      	b.n	801538c <__mcmp+0x28>
 8015396:	f04f 32ff 	mov.w	r2, #4294967295
 801539a:	e7f7      	b.n	801538c <__mcmp+0x28>

0801539c <__mdiff>:
 801539c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a0:	460c      	mov	r4, r1
 80153a2:	4606      	mov	r6, r0
 80153a4:	4611      	mov	r1, r2
 80153a6:	4620      	mov	r0, r4
 80153a8:	4690      	mov	r8, r2
 80153aa:	f7ff ffdb 	bl	8015364 <__mcmp>
 80153ae:	1e05      	subs	r5, r0, #0
 80153b0:	d110      	bne.n	80153d4 <__mdiff+0x38>
 80153b2:	4629      	mov	r1, r5
 80153b4:	4630      	mov	r0, r6
 80153b6:	f7ff fd59 	bl	8014e6c <_Balloc>
 80153ba:	b930      	cbnz	r0, 80153ca <__mdiff+0x2e>
 80153bc:	4b3a      	ldr	r3, [pc, #232]	; (80154a8 <__mdiff+0x10c>)
 80153be:	4602      	mov	r2, r0
 80153c0:	f240 2137 	movw	r1, #567	; 0x237
 80153c4:	4839      	ldr	r0, [pc, #228]	; (80154ac <__mdiff+0x110>)
 80153c6:	f000 fb0b 	bl	80159e0 <__assert_func>
 80153ca:	2301      	movs	r3, #1
 80153cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80153d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153d4:	bfa4      	itt	ge
 80153d6:	4643      	movge	r3, r8
 80153d8:	46a0      	movge	r8, r4
 80153da:	4630      	mov	r0, r6
 80153dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80153e0:	bfa6      	itte	ge
 80153e2:	461c      	movge	r4, r3
 80153e4:	2500      	movge	r5, #0
 80153e6:	2501      	movlt	r5, #1
 80153e8:	f7ff fd40 	bl	8014e6c <_Balloc>
 80153ec:	b920      	cbnz	r0, 80153f8 <__mdiff+0x5c>
 80153ee:	4b2e      	ldr	r3, [pc, #184]	; (80154a8 <__mdiff+0x10c>)
 80153f0:	4602      	mov	r2, r0
 80153f2:	f240 2145 	movw	r1, #581	; 0x245
 80153f6:	e7e5      	b.n	80153c4 <__mdiff+0x28>
 80153f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80153fc:	6926      	ldr	r6, [r4, #16]
 80153fe:	60c5      	str	r5, [r0, #12]
 8015400:	f104 0914 	add.w	r9, r4, #20
 8015404:	f108 0514 	add.w	r5, r8, #20
 8015408:	f100 0e14 	add.w	lr, r0, #20
 801540c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015410:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015414:	f108 0210 	add.w	r2, r8, #16
 8015418:	46f2      	mov	sl, lr
 801541a:	2100      	movs	r1, #0
 801541c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015420:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015424:	fa11 f88b 	uxtah	r8, r1, fp
 8015428:	b299      	uxth	r1, r3
 801542a:	0c1b      	lsrs	r3, r3, #16
 801542c:	eba8 0801 	sub.w	r8, r8, r1
 8015430:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015434:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015438:	fa1f f888 	uxth.w	r8, r8
 801543c:	1419      	asrs	r1, r3, #16
 801543e:	454e      	cmp	r6, r9
 8015440:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015444:	f84a 3b04 	str.w	r3, [sl], #4
 8015448:	d8e8      	bhi.n	801541c <__mdiff+0x80>
 801544a:	1b33      	subs	r3, r6, r4
 801544c:	3b15      	subs	r3, #21
 801544e:	f023 0303 	bic.w	r3, r3, #3
 8015452:	3304      	adds	r3, #4
 8015454:	3415      	adds	r4, #21
 8015456:	42a6      	cmp	r6, r4
 8015458:	bf38      	it	cc
 801545a:	2304      	movcc	r3, #4
 801545c:	441d      	add	r5, r3
 801545e:	4473      	add	r3, lr
 8015460:	469e      	mov	lr, r3
 8015462:	462e      	mov	r6, r5
 8015464:	4566      	cmp	r6, ip
 8015466:	d30e      	bcc.n	8015486 <__mdiff+0xea>
 8015468:	f10c 0203 	add.w	r2, ip, #3
 801546c:	1b52      	subs	r2, r2, r5
 801546e:	f022 0203 	bic.w	r2, r2, #3
 8015472:	3d03      	subs	r5, #3
 8015474:	45ac      	cmp	ip, r5
 8015476:	bf38      	it	cc
 8015478:	2200      	movcc	r2, #0
 801547a:	4413      	add	r3, r2
 801547c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015480:	b17a      	cbz	r2, 80154a2 <__mdiff+0x106>
 8015482:	6107      	str	r7, [r0, #16]
 8015484:	e7a4      	b.n	80153d0 <__mdiff+0x34>
 8015486:	f856 8b04 	ldr.w	r8, [r6], #4
 801548a:	fa11 f288 	uxtah	r2, r1, r8
 801548e:	1414      	asrs	r4, r2, #16
 8015490:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015494:	b292      	uxth	r2, r2
 8015496:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801549a:	f84e 2b04 	str.w	r2, [lr], #4
 801549e:	1421      	asrs	r1, r4, #16
 80154a0:	e7e0      	b.n	8015464 <__mdiff+0xc8>
 80154a2:	3f01      	subs	r7, #1
 80154a4:	e7ea      	b.n	801547c <__mdiff+0xe0>
 80154a6:	bf00      	nop
 80154a8:	08037560 	.word	0x08037560
 80154ac:	08037571 	.word	0x08037571

080154b0 <__d2b>:
 80154b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80154b4:	460f      	mov	r7, r1
 80154b6:	2101      	movs	r1, #1
 80154b8:	ec59 8b10 	vmov	r8, r9, d0
 80154bc:	4616      	mov	r6, r2
 80154be:	f7ff fcd5 	bl	8014e6c <_Balloc>
 80154c2:	4604      	mov	r4, r0
 80154c4:	b930      	cbnz	r0, 80154d4 <__d2b+0x24>
 80154c6:	4602      	mov	r2, r0
 80154c8:	4b24      	ldr	r3, [pc, #144]	; (801555c <__d2b+0xac>)
 80154ca:	4825      	ldr	r0, [pc, #148]	; (8015560 <__d2b+0xb0>)
 80154cc:	f240 310f 	movw	r1, #783	; 0x30f
 80154d0:	f000 fa86 	bl	80159e0 <__assert_func>
 80154d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80154d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80154dc:	bb2d      	cbnz	r5, 801552a <__d2b+0x7a>
 80154de:	9301      	str	r3, [sp, #4]
 80154e0:	f1b8 0300 	subs.w	r3, r8, #0
 80154e4:	d026      	beq.n	8015534 <__d2b+0x84>
 80154e6:	4668      	mov	r0, sp
 80154e8:	9300      	str	r3, [sp, #0]
 80154ea:	f7ff fd87 	bl	8014ffc <__lo0bits>
 80154ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80154f2:	b1e8      	cbz	r0, 8015530 <__d2b+0x80>
 80154f4:	f1c0 0320 	rsb	r3, r0, #32
 80154f8:	fa02 f303 	lsl.w	r3, r2, r3
 80154fc:	430b      	orrs	r3, r1
 80154fe:	40c2      	lsrs	r2, r0
 8015500:	6163      	str	r3, [r4, #20]
 8015502:	9201      	str	r2, [sp, #4]
 8015504:	9b01      	ldr	r3, [sp, #4]
 8015506:	61a3      	str	r3, [r4, #24]
 8015508:	2b00      	cmp	r3, #0
 801550a:	bf14      	ite	ne
 801550c:	2202      	movne	r2, #2
 801550e:	2201      	moveq	r2, #1
 8015510:	6122      	str	r2, [r4, #16]
 8015512:	b1bd      	cbz	r5, 8015544 <__d2b+0x94>
 8015514:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015518:	4405      	add	r5, r0
 801551a:	603d      	str	r5, [r7, #0]
 801551c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015520:	6030      	str	r0, [r6, #0]
 8015522:	4620      	mov	r0, r4
 8015524:	b003      	add	sp, #12
 8015526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801552a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801552e:	e7d6      	b.n	80154de <__d2b+0x2e>
 8015530:	6161      	str	r1, [r4, #20]
 8015532:	e7e7      	b.n	8015504 <__d2b+0x54>
 8015534:	a801      	add	r0, sp, #4
 8015536:	f7ff fd61 	bl	8014ffc <__lo0bits>
 801553a:	9b01      	ldr	r3, [sp, #4]
 801553c:	6163      	str	r3, [r4, #20]
 801553e:	3020      	adds	r0, #32
 8015540:	2201      	movs	r2, #1
 8015542:	e7e5      	b.n	8015510 <__d2b+0x60>
 8015544:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015548:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801554c:	6038      	str	r0, [r7, #0]
 801554e:	6918      	ldr	r0, [r3, #16]
 8015550:	f7ff fd34 	bl	8014fbc <__hi0bits>
 8015554:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015558:	e7e2      	b.n	8015520 <__d2b+0x70>
 801555a:	bf00      	nop
 801555c:	08037560 	.word	0x08037560
 8015560:	08037571 	.word	0x08037571

08015564 <__ssputs_r>:
 8015564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015568:	688e      	ldr	r6, [r1, #8]
 801556a:	461f      	mov	r7, r3
 801556c:	42be      	cmp	r6, r7
 801556e:	680b      	ldr	r3, [r1, #0]
 8015570:	4682      	mov	sl, r0
 8015572:	460c      	mov	r4, r1
 8015574:	4690      	mov	r8, r2
 8015576:	d82c      	bhi.n	80155d2 <__ssputs_r+0x6e>
 8015578:	898a      	ldrh	r2, [r1, #12]
 801557a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801557e:	d026      	beq.n	80155ce <__ssputs_r+0x6a>
 8015580:	6965      	ldr	r5, [r4, #20]
 8015582:	6909      	ldr	r1, [r1, #16]
 8015584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015588:	eba3 0901 	sub.w	r9, r3, r1
 801558c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015590:	1c7b      	adds	r3, r7, #1
 8015592:	444b      	add	r3, r9
 8015594:	106d      	asrs	r5, r5, #1
 8015596:	429d      	cmp	r5, r3
 8015598:	bf38      	it	cc
 801559a:	461d      	movcc	r5, r3
 801559c:	0553      	lsls	r3, r2, #21
 801559e:	d527      	bpl.n	80155f0 <__ssputs_r+0x8c>
 80155a0:	4629      	mov	r1, r5
 80155a2:	f7ff fbd7 	bl	8014d54 <_malloc_r>
 80155a6:	4606      	mov	r6, r0
 80155a8:	b360      	cbz	r0, 8015604 <__ssputs_r+0xa0>
 80155aa:	6921      	ldr	r1, [r4, #16]
 80155ac:	464a      	mov	r2, r9
 80155ae:	f000 fa09 	bl	80159c4 <memcpy>
 80155b2:	89a3      	ldrh	r3, [r4, #12]
 80155b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80155b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155bc:	81a3      	strh	r3, [r4, #12]
 80155be:	6126      	str	r6, [r4, #16]
 80155c0:	6165      	str	r5, [r4, #20]
 80155c2:	444e      	add	r6, r9
 80155c4:	eba5 0509 	sub.w	r5, r5, r9
 80155c8:	6026      	str	r6, [r4, #0]
 80155ca:	60a5      	str	r5, [r4, #8]
 80155cc:	463e      	mov	r6, r7
 80155ce:	42be      	cmp	r6, r7
 80155d0:	d900      	bls.n	80155d4 <__ssputs_r+0x70>
 80155d2:	463e      	mov	r6, r7
 80155d4:	6820      	ldr	r0, [r4, #0]
 80155d6:	4632      	mov	r2, r6
 80155d8:	4641      	mov	r1, r8
 80155da:	f000 f9c9 	bl	8015970 <memmove>
 80155de:	68a3      	ldr	r3, [r4, #8]
 80155e0:	1b9b      	subs	r3, r3, r6
 80155e2:	60a3      	str	r3, [r4, #8]
 80155e4:	6823      	ldr	r3, [r4, #0]
 80155e6:	4433      	add	r3, r6
 80155e8:	6023      	str	r3, [r4, #0]
 80155ea:	2000      	movs	r0, #0
 80155ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155f0:	462a      	mov	r2, r5
 80155f2:	f000 fa3b 	bl	8015a6c <_realloc_r>
 80155f6:	4606      	mov	r6, r0
 80155f8:	2800      	cmp	r0, #0
 80155fa:	d1e0      	bne.n	80155be <__ssputs_r+0x5a>
 80155fc:	6921      	ldr	r1, [r4, #16]
 80155fe:	4650      	mov	r0, sl
 8015600:	f7ff fb34 	bl	8014c6c <_free_r>
 8015604:	230c      	movs	r3, #12
 8015606:	f8ca 3000 	str.w	r3, [sl]
 801560a:	89a3      	ldrh	r3, [r4, #12]
 801560c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015610:	81a3      	strh	r3, [r4, #12]
 8015612:	f04f 30ff 	mov.w	r0, #4294967295
 8015616:	e7e9      	b.n	80155ec <__ssputs_r+0x88>

08015618 <_svfiprintf_r>:
 8015618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801561c:	4698      	mov	r8, r3
 801561e:	898b      	ldrh	r3, [r1, #12]
 8015620:	061b      	lsls	r3, r3, #24
 8015622:	b09d      	sub	sp, #116	; 0x74
 8015624:	4607      	mov	r7, r0
 8015626:	460d      	mov	r5, r1
 8015628:	4614      	mov	r4, r2
 801562a:	d50e      	bpl.n	801564a <_svfiprintf_r+0x32>
 801562c:	690b      	ldr	r3, [r1, #16]
 801562e:	b963      	cbnz	r3, 801564a <_svfiprintf_r+0x32>
 8015630:	2140      	movs	r1, #64	; 0x40
 8015632:	f7ff fb8f 	bl	8014d54 <_malloc_r>
 8015636:	6028      	str	r0, [r5, #0]
 8015638:	6128      	str	r0, [r5, #16]
 801563a:	b920      	cbnz	r0, 8015646 <_svfiprintf_r+0x2e>
 801563c:	230c      	movs	r3, #12
 801563e:	603b      	str	r3, [r7, #0]
 8015640:	f04f 30ff 	mov.w	r0, #4294967295
 8015644:	e0d0      	b.n	80157e8 <_svfiprintf_r+0x1d0>
 8015646:	2340      	movs	r3, #64	; 0x40
 8015648:	616b      	str	r3, [r5, #20]
 801564a:	2300      	movs	r3, #0
 801564c:	9309      	str	r3, [sp, #36]	; 0x24
 801564e:	2320      	movs	r3, #32
 8015650:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015654:	f8cd 800c 	str.w	r8, [sp, #12]
 8015658:	2330      	movs	r3, #48	; 0x30
 801565a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015800 <_svfiprintf_r+0x1e8>
 801565e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015662:	f04f 0901 	mov.w	r9, #1
 8015666:	4623      	mov	r3, r4
 8015668:	469a      	mov	sl, r3
 801566a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801566e:	b10a      	cbz	r2, 8015674 <_svfiprintf_r+0x5c>
 8015670:	2a25      	cmp	r2, #37	; 0x25
 8015672:	d1f9      	bne.n	8015668 <_svfiprintf_r+0x50>
 8015674:	ebba 0b04 	subs.w	fp, sl, r4
 8015678:	d00b      	beq.n	8015692 <_svfiprintf_r+0x7a>
 801567a:	465b      	mov	r3, fp
 801567c:	4622      	mov	r2, r4
 801567e:	4629      	mov	r1, r5
 8015680:	4638      	mov	r0, r7
 8015682:	f7ff ff6f 	bl	8015564 <__ssputs_r>
 8015686:	3001      	adds	r0, #1
 8015688:	f000 80a9 	beq.w	80157de <_svfiprintf_r+0x1c6>
 801568c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801568e:	445a      	add	r2, fp
 8015690:	9209      	str	r2, [sp, #36]	; 0x24
 8015692:	f89a 3000 	ldrb.w	r3, [sl]
 8015696:	2b00      	cmp	r3, #0
 8015698:	f000 80a1 	beq.w	80157de <_svfiprintf_r+0x1c6>
 801569c:	2300      	movs	r3, #0
 801569e:	f04f 32ff 	mov.w	r2, #4294967295
 80156a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156a6:	f10a 0a01 	add.w	sl, sl, #1
 80156aa:	9304      	str	r3, [sp, #16]
 80156ac:	9307      	str	r3, [sp, #28]
 80156ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80156b2:	931a      	str	r3, [sp, #104]	; 0x68
 80156b4:	4654      	mov	r4, sl
 80156b6:	2205      	movs	r2, #5
 80156b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156bc:	4850      	ldr	r0, [pc, #320]	; (8015800 <_svfiprintf_r+0x1e8>)
 80156be:	f7ea fd87 	bl	80001d0 <memchr>
 80156c2:	9a04      	ldr	r2, [sp, #16]
 80156c4:	b9d8      	cbnz	r0, 80156fe <_svfiprintf_r+0xe6>
 80156c6:	06d0      	lsls	r0, r2, #27
 80156c8:	bf44      	itt	mi
 80156ca:	2320      	movmi	r3, #32
 80156cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156d0:	0711      	lsls	r1, r2, #28
 80156d2:	bf44      	itt	mi
 80156d4:	232b      	movmi	r3, #43	; 0x2b
 80156d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156da:	f89a 3000 	ldrb.w	r3, [sl]
 80156de:	2b2a      	cmp	r3, #42	; 0x2a
 80156e0:	d015      	beq.n	801570e <_svfiprintf_r+0xf6>
 80156e2:	9a07      	ldr	r2, [sp, #28]
 80156e4:	4654      	mov	r4, sl
 80156e6:	2000      	movs	r0, #0
 80156e8:	f04f 0c0a 	mov.w	ip, #10
 80156ec:	4621      	mov	r1, r4
 80156ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80156f2:	3b30      	subs	r3, #48	; 0x30
 80156f4:	2b09      	cmp	r3, #9
 80156f6:	d94d      	bls.n	8015794 <_svfiprintf_r+0x17c>
 80156f8:	b1b0      	cbz	r0, 8015728 <_svfiprintf_r+0x110>
 80156fa:	9207      	str	r2, [sp, #28]
 80156fc:	e014      	b.n	8015728 <_svfiprintf_r+0x110>
 80156fe:	eba0 0308 	sub.w	r3, r0, r8
 8015702:	fa09 f303 	lsl.w	r3, r9, r3
 8015706:	4313      	orrs	r3, r2
 8015708:	9304      	str	r3, [sp, #16]
 801570a:	46a2      	mov	sl, r4
 801570c:	e7d2      	b.n	80156b4 <_svfiprintf_r+0x9c>
 801570e:	9b03      	ldr	r3, [sp, #12]
 8015710:	1d19      	adds	r1, r3, #4
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	9103      	str	r1, [sp, #12]
 8015716:	2b00      	cmp	r3, #0
 8015718:	bfbb      	ittet	lt
 801571a:	425b      	neglt	r3, r3
 801571c:	f042 0202 	orrlt.w	r2, r2, #2
 8015720:	9307      	strge	r3, [sp, #28]
 8015722:	9307      	strlt	r3, [sp, #28]
 8015724:	bfb8      	it	lt
 8015726:	9204      	strlt	r2, [sp, #16]
 8015728:	7823      	ldrb	r3, [r4, #0]
 801572a:	2b2e      	cmp	r3, #46	; 0x2e
 801572c:	d10c      	bne.n	8015748 <_svfiprintf_r+0x130>
 801572e:	7863      	ldrb	r3, [r4, #1]
 8015730:	2b2a      	cmp	r3, #42	; 0x2a
 8015732:	d134      	bne.n	801579e <_svfiprintf_r+0x186>
 8015734:	9b03      	ldr	r3, [sp, #12]
 8015736:	1d1a      	adds	r2, r3, #4
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	9203      	str	r2, [sp, #12]
 801573c:	2b00      	cmp	r3, #0
 801573e:	bfb8      	it	lt
 8015740:	f04f 33ff 	movlt.w	r3, #4294967295
 8015744:	3402      	adds	r4, #2
 8015746:	9305      	str	r3, [sp, #20]
 8015748:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015810 <_svfiprintf_r+0x1f8>
 801574c:	7821      	ldrb	r1, [r4, #0]
 801574e:	2203      	movs	r2, #3
 8015750:	4650      	mov	r0, sl
 8015752:	f7ea fd3d 	bl	80001d0 <memchr>
 8015756:	b138      	cbz	r0, 8015768 <_svfiprintf_r+0x150>
 8015758:	9b04      	ldr	r3, [sp, #16]
 801575a:	eba0 000a 	sub.w	r0, r0, sl
 801575e:	2240      	movs	r2, #64	; 0x40
 8015760:	4082      	lsls	r2, r0
 8015762:	4313      	orrs	r3, r2
 8015764:	3401      	adds	r4, #1
 8015766:	9304      	str	r3, [sp, #16]
 8015768:	f814 1b01 	ldrb.w	r1, [r4], #1
 801576c:	4825      	ldr	r0, [pc, #148]	; (8015804 <_svfiprintf_r+0x1ec>)
 801576e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015772:	2206      	movs	r2, #6
 8015774:	f7ea fd2c 	bl	80001d0 <memchr>
 8015778:	2800      	cmp	r0, #0
 801577a:	d038      	beq.n	80157ee <_svfiprintf_r+0x1d6>
 801577c:	4b22      	ldr	r3, [pc, #136]	; (8015808 <_svfiprintf_r+0x1f0>)
 801577e:	bb1b      	cbnz	r3, 80157c8 <_svfiprintf_r+0x1b0>
 8015780:	9b03      	ldr	r3, [sp, #12]
 8015782:	3307      	adds	r3, #7
 8015784:	f023 0307 	bic.w	r3, r3, #7
 8015788:	3308      	adds	r3, #8
 801578a:	9303      	str	r3, [sp, #12]
 801578c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801578e:	4433      	add	r3, r6
 8015790:	9309      	str	r3, [sp, #36]	; 0x24
 8015792:	e768      	b.n	8015666 <_svfiprintf_r+0x4e>
 8015794:	fb0c 3202 	mla	r2, ip, r2, r3
 8015798:	460c      	mov	r4, r1
 801579a:	2001      	movs	r0, #1
 801579c:	e7a6      	b.n	80156ec <_svfiprintf_r+0xd4>
 801579e:	2300      	movs	r3, #0
 80157a0:	3401      	adds	r4, #1
 80157a2:	9305      	str	r3, [sp, #20]
 80157a4:	4619      	mov	r1, r3
 80157a6:	f04f 0c0a 	mov.w	ip, #10
 80157aa:	4620      	mov	r0, r4
 80157ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80157b0:	3a30      	subs	r2, #48	; 0x30
 80157b2:	2a09      	cmp	r2, #9
 80157b4:	d903      	bls.n	80157be <_svfiprintf_r+0x1a6>
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d0c6      	beq.n	8015748 <_svfiprintf_r+0x130>
 80157ba:	9105      	str	r1, [sp, #20]
 80157bc:	e7c4      	b.n	8015748 <_svfiprintf_r+0x130>
 80157be:	fb0c 2101 	mla	r1, ip, r1, r2
 80157c2:	4604      	mov	r4, r0
 80157c4:	2301      	movs	r3, #1
 80157c6:	e7f0      	b.n	80157aa <_svfiprintf_r+0x192>
 80157c8:	ab03      	add	r3, sp, #12
 80157ca:	9300      	str	r3, [sp, #0]
 80157cc:	462a      	mov	r2, r5
 80157ce:	4b0f      	ldr	r3, [pc, #60]	; (801580c <_svfiprintf_r+0x1f4>)
 80157d0:	a904      	add	r1, sp, #16
 80157d2:	4638      	mov	r0, r7
 80157d4:	f7fd fe56 	bl	8013484 <_printf_float>
 80157d8:	1c42      	adds	r2, r0, #1
 80157da:	4606      	mov	r6, r0
 80157dc:	d1d6      	bne.n	801578c <_svfiprintf_r+0x174>
 80157de:	89ab      	ldrh	r3, [r5, #12]
 80157e0:	065b      	lsls	r3, r3, #25
 80157e2:	f53f af2d 	bmi.w	8015640 <_svfiprintf_r+0x28>
 80157e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80157e8:	b01d      	add	sp, #116	; 0x74
 80157ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157ee:	ab03      	add	r3, sp, #12
 80157f0:	9300      	str	r3, [sp, #0]
 80157f2:	462a      	mov	r2, r5
 80157f4:	4b05      	ldr	r3, [pc, #20]	; (801580c <_svfiprintf_r+0x1f4>)
 80157f6:	a904      	add	r1, sp, #16
 80157f8:	4638      	mov	r0, r7
 80157fa:	f7fe f8e7 	bl	80139cc <_printf_i>
 80157fe:	e7eb      	b.n	80157d8 <_svfiprintf_r+0x1c0>
 8015800:	080376cc 	.word	0x080376cc
 8015804:	080376d6 	.word	0x080376d6
 8015808:	08013485 	.word	0x08013485
 801580c:	08015565 	.word	0x08015565
 8015810:	080376d2 	.word	0x080376d2

08015814 <__sflush_r>:
 8015814:	898a      	ldrh	r2, [r1, #12]
 8015816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801581a:	4605      	mov	r5, r0
 801581c:	0710      	lsls	r0, r2, #28
 801581e:	460c      	mov	r4, r1
 8015820:	d458      	bmi.n	80158d4 <__sflush_r+0xc0>
 8015822:	684b      	ldr	r3, [r1, #4]
 8015824:	2b00      	cmp	r3, #0
 8015826:	dc05      	bgt.n	8015834 <__sflush_r+0x20>
 8015828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801582a:	2b00      	cmp	r3, #0
 801582c:	dc02      	bgt.n	8015834 <__sflush_r+0x20>
 801582e:	2000      	movs	r0, #0
 8015830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015836:	2e00      	cmp	r6, #0
 8015838:	d0f9      	beq.n	801582e <__sflush_r+0x1a>
 801583a:	2300      	movs	r3, #0
 801583c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015840:	682f      	ldr	r7, [r5, #0]
 8015842:	6a21      	ldr	r1, [r4, #32]
 8015844:	602b      	str	r3, [r5, #0]
 8015846:	d032      	beq.n	80158ae <__sflush_r+0x9a>
 8015848:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801584a:	89a3      	ldrh	r3, [r4, #12]
 801584c:	075a      	lsls	r2, r3, #29
 801584e:	d505      	bpl.n	801585c <__sflush_r+0x48>
 8015850:	6863      	ldr	r3, [r4, #4]
 8015852:	1ac0      	subs	r0, r0, r3
 8015854:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015856:	b10b      	cbz	r3, 801585c <__sflush_r+0x48>
 8015858:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801585a:	1ac0      	subs	r0, r0, r3
 801585c:	2300      	movs	r3, #0
 801585e:	4602      	mov	r2, r0
 8015860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015862:	6a21      	ldr	r1, [r4, #32]
 8015864:	4628      	mov	r0, r5
 8015866:	47b0      	blx	r6
 8015868:	1c43      	adds	r3, r0, #1
 801586a:	89a3      	ldrh	r3, [r4, #12]
 801586c:	d106      	bne.n	801587c <__sflush_r+0x68>
 801586e:	6829      	ldr	r1, [r5, #0]
 8015870:	291d      	cmp	r1, #29
 8015872:	d82b      	bhi.n	80158cc <__sflush_r+0xb8>
 8015874:	4a29      	ldr	r2, [pc, #164]	; (801591c <__sflush_r+0x108>)
 8015876:	410a      	asrs	r2, r1
 8015878:	07d6      	lsls	r6, r2, #31
 801587a:	d427      	bmi.n	80158cc <__sflush_r+0xb8>
 801587c:	2200      	movs	r2, #0
 801587e:	6062      	str	r2, [r4, #4]
 8015880:	04d9      	lsls	r1, r3, #19
 8015882:	6922      	ldr	r2, [r4, #16]
 8015884:	6022      	str	r2, [r4, #0]
 8015886:	d504      	bpl.n	8015892 <__sflush_r+0x7e>
 8015888:	1c42      	adds	r2, r0, #1
 801588a:	d101      	bne.n	8015890 <__sflush_r+0x7c>
 801588c:	682b      	ldr	r3, [r5, #0]
 801588e:	b903      	cbnz	r3, 8015892 <__sflush_r+0x7e>
 8015890:	6560      	str	r0, [r4, #84]	; 0x54
 8015892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015894:	602f      	str	r7, [r5, #0]
 8015896:	2900      	cmp	r1, #0
 8015898:	d0c9      	beq.n	801582e <__sflush_r+0x1a>
 801589a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801589e:	4299      	cmp	r1, r3
 80158a0:	d002      	beq.n	80158a8 <__sflush_r+0x94>
 80158a2:	4628      	mov	r0, r5
 80158a4:	f7ff f9e2 	bl	8014c6c <_free_r>
 80158a8:	2000      	movs	r0, #0
 80158aa:	6360      	str	r0, [r4, #52]	; 0x34
 80158ac:	e7c0      	b.n	8015830 <__sflush_r+0x1c>
 80158ae:	2301      	movs	r3, #1
 80158b0:	4628      	mov	r0, r5
 80158b2:	47b0      	blx	r6
 80158b4:	1c41      	adds	r1, r0, #1
 80158b6:	d1c8      	bne.n	801584a <__sflush_r+0x36>
 80158b8:	682b      	ldr	r3, [r5, #0]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d0c5      	beq.n	801584a <__sflush_r+0x36>
 80158be:	2b1d      	cmp	r3, #29
 80158c0:	d001      	beq.n	80158c6 <__sflush_r+0xb2>
 80158c2:	2b16      	cmp	r3, #22
 80158c4:	d101      	bne.n	80158ca <__sflush_r+0xb6>
 80158c6:	602f      	str	r7, [r5, #0]
 80158c8:	e7b1      	b.n	801582e <__sflush_r+0x1a>
 80158ca:	89a3      	ldrh	r3, [r4, #12]
 80158cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158d0:	81a3      	strh	r3, [r4, #12]
 80158d2:	e7ad      	b.n	8015830 <__sflush_r+0x1c>
 80158d4:	690f      	ldr	r7, [r1, #16]
 80158d6:	2f00      	cmp	r7, #0
 80158d8:	d0a9      	beq.n	801582e <__sflush_r+0x1a>
 80158da:	0793      	lsls	r3, r2, #30
 80158dc:	680e      	ldr	r6, [r1, #0]
 80158de:	bf08      	it	eq
 80158e0:	694b      	ldreq	r3, [r1, #20]
 80158e2:	600f      	str	r7, [r1, #0]
 80158e4:	bf18      	it	ne
 80158e6:	2300      	movne	r3, #0
 80158e8:	eba6 0807 	sub.w	r8, r6, r7
 80158ec:	608b      	str	r3, [r1, #8]
 80158ee:	f1b8 0f00 	cmp.w	r8, #0
 80158f2:	dd9c      	ble.n	801582e <__sflush_r+0x1a>
 80158f4:	6a21      	ldr	r1, [r4, #32]
 80158f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80158f8:	4643      	mov	r3, r8
 80158fa:	463a      	mov	r2, r7
 80158fc:	4628      	mov	r0, r5
 80158fe:	47b0      	blx	r6
 8015900:	2800      	cmp	r0, #0
 8015902:	dc06      	bgt.n	8015912 <__sflush_r+0xfe>
 8015904:	89a3      	ldrh	r3, [r4, #12]
 8015906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801590a:	81a3      	strh	r3, [r4, #12]
 801590c:	f04f 30ff 	mov.w	r0, #4294967295
 8015910:	e78e      	b.n	8015830 <__sflush_r+0x1c>
 8015912:	4407      	add	r7, r0
 8015914:	eba8 0800 	sub.w	r8, r8, r0
 8015918:	e7e9      	b.n	80158ee <__sflush_r+0xda>
 801591a:	bf00      	nop
 801591c:	dfbffffe 	.word	0xdfbffffe

08015920 <_fflush_r>:
 8015920:	b538      	push	{r3, r4, r5, lr}
 8015922:	690b      	ldr	r3, [r1, #16]
 8015924:	4605      	mov	r5, r0
 8015926:	460c      	mov	r4, r1
 8015928:	b913      	cbnz	r3, 8015930 <_fflush_r+0x10>
 801592a:	2500      	movs	r5, #0
 801592c:	4628      	mov	r0, r5
 801592e:	bd38      	pop	{r3, r4, r5, pc}
 8015930:	b118      	cbz	r0, 801593a <_fflush_r+0x1a>
 8015932:	6a03      	ldr	r3, [r0, #32]
 8015934:	b90b      	cbnz	r3, 801593a <_fflush_r+0x1a>
 8015936:	f7fe f9f7 	bl	8013d28 <__sinit>
 801593a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d0f3      	beq.n	801592a <_fflush_r+0xa>
 8015942:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015944:	07d0      	lsls	r0, r2, #31
 8015946:	d404      	bmi.n	8015952 <_fflush_r+0x32>
 8015948:	0599      	lsls	r1, r3, #22
 801594a:	d402      	bmi.n	8015952 <_fflush_r+0x32>
 801594c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801594e:	f7fe fb10 	bl	8013f72 <__retarget_lock_acquire_recursive>
 8015952:	4628      	mov	r0, r5
 8015954:	4621      	mov	r1, r4
 8015956:	f7ff ff5d 	bl	8015814 <__sflush_r>
 801595a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801595c:	07da      	lsls	r2, r3, #31
 801595e:	4605      	mov	r5, r0
 8015960:	d4e4      	bmi.n	801592c <_fflush_r+0xc>
 8015962:	89a3      	ldrh	r3, [r4, #12]
 8015964:	059b      	lsls	r3, r3, #22
 8015966:	d4e1      	bmi.n	801592c <_fflush_r+0xc>
 8015968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801596a:	f7fe fb03 	bl	8013f74 <__retarget_lock_release_recursive>
 801596e:	e7dd      	b.n	801592c <_fflush_r+0xc>

08015970 <memmove>:
 8015970:	4288      	cmp	r0, r1
 8015972:	b510      	push	{r4, lr}
 8015974:	eb01 0402 	add.w	r4, r1, r2
 8015978:	d902      	bls.n	8015980 <memmove+0x10>
 801597a:	4284      	cmp	r4, r0
 801597c:	4623      	mov	r3, r4
 801597e:	d807      	bhi.n	8015990 <memmove+0x20>
 8015980:	1e43      	subs	r3, r0, #1
 8015982:	42a1      	cmp	r1, r4
 8015984:	d008      	beq.n	8015998 <memmove+0x28>
 8015986:	f811 2b01 	ldrb.w	r2, [r1], #1
 801598a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801598e:	e7f8      	b.n	8015982 <memmove+0x12>
 8015990:	4402      	add	r2, r0
 8015992:	4601      	mov	r1, r0
 8015994:	428a      	cmp	r2, r1
 8015996:	d100      	bne.n	801599a <memmove+0x2a>
 8015998:	bd10      	pop	{r4, pc}
 801599a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801599e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80159a2:	e7f7      	b.n	8015994 <memmove+0x24>

080159a4 <_sbrk_r>:
 80159a4:	b538      	push	{r3, r4, r5, lr}
 80159a6:	4d06      	ldr	r5, [pc, #24]	; (80159c0 <_sbrk_r+0x1c>)
 80159a8:	2300      	movs	r3, #0
 80159aa:	4604      	mov	r4, r0
 80159ac:	4608      	mov	r0, r1
 80159ae:	602b      	str	r3, [r5, #0]
 80159b0:	f7ee fb0c 	bl	8003fcc <_sbrk>
 80159b4:	1c43      	adds	r3, r0, #1
 80159b6:	d102      	bne.n	80159be <_sbrk_r+0x1a>
 80159b8:	682b      	ldr	r3, [r5, #0]
 80159ba:	b103      	cbz	r3, 80159be <_sbrk_r+0x1a>
 80159bc:	6023      	str	r3, [r4, #0]
 80159be:	bd38      	pop	{r3, r4, r5, pc}
 80159c0:	20002d44 	.word	0x20002d44

080159c4 <memcpy>:
 80159c4:	440a      	add	r2, r1
 80159c6:	4291      	cmp	r1, r2
 80159c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80159cc:	d100      	bne.n	80159d0 <memcpy+0xc>
 80159ce:	4770      	bx	lr
 80159d0:	b510      	push	{r4, lr}
 80159d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80159da:	4291      	cmp	r1, r2
 80159dc:	d1f9      	bne.n	80159d2 <memcpy+0xe>
 80159de:	bd10      	pop	{r4, pc}

080159e0 <__assert_func>:
 80159e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80159e2:	4614      	mov	r4, r2
 80159e4:	461a      	mov	r2, r3
 80159e6:	4b09      	ldr	r3, [pc, #36]	; (8015a0c <__assert_func+0x2c>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4605      	mov	r5, r0
 80159ec:	68d8      	ldr	r0, [r3, #12]
 80159ee:	b14c      	cbz	r4, 8015a04 <__assert_func+0x24>
 80159f0:	4b07      	ldr	r3, [pc, #28]	; (8015a10 <__assert_func+0x30>)
 80159f2:	9100      	str	r1, [sp, #0]
 80159f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80159f8:	4906      	ldr	r1, [pc, #24]	; (8015a14 <__assert_func+0x34>)
 80159fa:	462b      	mov	r3, r5
 80159fc:	f000 f872 	bl	8015ae4 <fiprintf>
 8015a00:	f000 f882 	bl	8015b08 <abort>
 8015a04:	4b04      	ldr	r3, [pc, #16]	; (8015a18 <__assert_func+0x38>)
 8015a06:	461c      	mov	r4, r3
 8015a08:	e7f3      	b.n	80159f2 <__assert_func+0x12>
 8015a0a:	bf00      	nop
 8015a0c:	2000027c 	.word	0x2000027c
 8015a10:	080376e7 	.word	0x080376e7
 8015a14:	080376f4 	.word	0x080376f4
 8015a18:	08037722 	.word	0x08037722

08015a1c <_calloc_r>:
 8015a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a1e:	fba1 2402 	umull	r2, r4, r1, r2
 8015a22:	b94c      	cbnz	r4, 8015a38 <_calloc_r+0x1c>
 8015a24:	4611      	mov	r1, r2
 8015a26:	9201      	str	r2, [sp, #4]
 8015a28:	f7ff f994 	bl	8014d54 <_malloc_r>
 8015a2c:	9a01      	ldr	r2, [sp, #4]
 8015a2e:	4605      	mov	r5, r0
 8015a30:	b930      	cbnz	r0, 8015a40 <_calloc_r+0x24>
 8015a32:	4628      	mov	r0, r5
 8015a34:	b003      	add	sp, #12
 8015a36:	bd30      	pop	{r4, r5, pc}
 8015a38:	220c      	movs	r2, #12
 8015a3a:	6002      	str	r2, [r0, #0]
 8015a3c:	2500      	movs	r5, #0
 8015a3e:	e7f8      	b.n	8015a32 <_calloc_r+0x16>
 8015a40:	4621      	mov	r1, r4
 8015a42:	f7fe fa0c 	bl	8013e5e <memset>
 8015a46:	e7f4      	b.n	8015a32 <_calloc_r+0x16>

08015a48 <__ascii_mbtowc>:
 8015a48:	b082      	sub	sp, #8
 8015a4a:	b901      	cbnz	r1, 8015a4e <__ascii_mbtowc+0x6>
 8015a4c:	a901      	add	r1, sp, #4
 8015a4e:	b142      	cbz	r2, 8015a62 <__ascii_mbtowc+0x1a>
 8015a50:	b14b      	cbz	r3, 8015a66 <__ascii_mbtowc+0x1e>
 8015a52:	7813      	ldrb	r3, [r2, #0]
 8015a54:	600b      	str	r3, [r1, #0]
 8015a56:	7812      	ldrb	r2, [r2, #0]
 8015a58:	1e10      	subs	r0, r2, #0
 8015a5a:	bf18      	it	ne
 8015a5c:	2001      	movne	r0, #1
 8015a5e:	b002      	add	sp, #8
 8015a60:	4770      	bx	lr
 8015a62:	4610      	mov	r0, r2
 8015a64:	e7fb      	b.n	8015a5e <__ascii_mbtowc+0x16>
 8015a66:	f06f 0001 	mvn.w	r0, #1
 8015a6a:	e7f8      	b.n	8015a5e <__ascii_mbtowc+0x16>

08015a6c <_realloc_r>:
 8015a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a70:	4680      	mov	r8, r0
 8015a72:	4614      	mov	r4, r2
 8015a74:	460e      	mov	r6, r1
 8015a76:	b921      	cbnz	r1, 8015a82 <_realloc_r+0x16>
 8015a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a7c:	4611      	mov	r1, r2
 8015a7e:	f7ff b969 	b.w	8014d54 <_malloc_r>
 8015a82:	b92a      	cbnz	r2, 8015a90 <_realloc_r+0x24>
 8015a84:	f7ff f8f2 	bl	8014c6c <_free_r>
 8015a88:	4625      	mov	r5, r4
 8015a8a:	4628      	mov	r0, r5
 8015a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a90:	f000 f841 	bl	8015b16 <_malloc_usable_size_r>
 8015a94:	4284      	cmp	r4, r0
 8015a96:	4607      	mov	r7, r0
 8015a98:	d802      	bhi.n	8015aa0 <_realloc_r+0x34>
 8015a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015a9e:	d812      	bhi.n	8015ac6 <_realloc_r+0x5a>
 8015aa0:	4621      	mov	r1, r4
 8015aa2:	4640      	mov	r0, r8
 8015aa4:	f7ff f956 	bl	8014d54 <_malloc_r>
 8015aa8:	4605      	mov	r5, r0
 8015aaa:	2800      	cmp	r0, #0
 8015aac:	d0ed      	beq.n	8015a8a <_realloc_r+0x1e>
 8015aae:	42bc      	cmp	r4, r7
 8015ab0:	4622      	mov	r2, r4
 8015ab2:	4631      	mov	r1, r6
 8015ab4:	bf28      	it	cs
 8015ab6:	463a      	movcs	r2, r7
 8015ab8:	f7ff ff84 	bl	80159c4 <memcpy>
 8015abc:	4631      	mov	r1, r6
 8015abe:	4640      	mov	r0, r8
 8015ac0:	f7ff f8d4 	bl	8014c6c <_free_r>
 8015ac4:	e7e1      	b.n	8015a8a <_realloc_r+0x1e>
 8015ac6:	4635      	mov	r5, r6
 8015ac8:	e7df      	b.n	8015a8a <_realloc_r+0x1e>

08015aca <__ascii_wctomb>:
 8015aca:	b149      	cbz	r1, 8015ae0 <__ascii_wctomb+0x16>
 8015acc:	2aff      	cmp	r2, #255	; 0xff
 8015ace:	bf85      	ittet	hi
 8015ad0:	238a      	movhi	r3, #138	; 0x8a
 8015ad2:	6003      	strhi	r3, [r0, #0]
 8015ad4:	700a      	strbls	r2, [r1, #0]
 8015ad6:	f04f 30ff 	movhi.w	r0, #4294967295
 8015ada:	bf98      	it	ls
 8015adc:	2001      	movls	r0, #1
 8015ade:	4770      	bx	lr
 8015ae0:	4608      	mov	r0, r1
 8015ae2:	4770      	bx	lr

08015ae4 <fiprintf>:
 8015ae4:	b40e      	push	{r1, r2, r3}
 8015ae6:	b503      	push	{r0, r1, lr}
 8015ae8:	4601      	mov	r1, r0
 8015aea:	ab03      	add	r3, sp, #12
 8015aec:	4805      	ldr	r0, [pc, #20]	; (8015b04 <fiprintf+0x20>)
 8015aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8015af2:	6800      	ldr	r0, [r0, #0]
 8015af4:	9301      	str	r3, [sp, #4]
 8015af6:	f000 f83f 	bl	8015b78 <_vfiprintf_r>
 8015afa:	b002      	add	sp, #8
 8015afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b00:	b003      	add	sp, #12
 8015b02:	4770      	bx	lr
 8015b04:	2000027c 	.word	0x2000027c

08015b08 <abort>:
 8015b08:	b508      	push	{r3, lr}
 8015b0a:	2006      	movs	r0, #6
 8015b0c:	f000 fa0c 	bl	8015f28 <raise>
 8015b10:	2001      	movs	r0, #1
 8015b12:	f7ee f9e3 	bl	8003edc <_exit>

08015b16 <_malloc_usable_size_r>:
 8015b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b1a:	1f18      	subs	r0, r3, #4
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	bfbc      	itt	lt
 8015b20:	580b      	ldrlt	r3, [r1, r0]
 8015b22:	18c0      	addlt	r0, r0, r3
 8015b24:	4770      	bx	lr

08015b26 <__sfputc_r>:
 8015b26:	6893      	ldr	r3, [r2, #8]
 8015b28:	3b01      	subs	r3, #1
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	b410      	push	{r4}
 8015b2e:	6093      	str	r3, [r2, #8]
 8015b30:	da08      	bge.n	8015b44 <__sfputc_r+0x1e>
 8015b32:	6994      	ldr	r4, [r2, #24]
 8015b34:	42a3      	cmp	r3, r4
 8015b36:	db01      	blt.n	8015b3c <__sfputc_r+0x16>
 8015b38:	290a      	cmp	r1, #10
 8015b3a:	d103      	bne.n	8015b44 <__sfputc_r+0x1e>
 8015b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b40:	f000 b934 	b.w	8015dac <__swbuf_r>
 8015b44:	6813      	ldr	r3, [r2, #0]
 8015b46:	1c58      	adds	r0, r3, #1
 8015b48:	6010      	str	r0, [r2, #0]
 8015b4a:	7019      	strb	r1, [r3, #0]
 8015b4c:	4608      	mov	r0, r1
 8015b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b52:	4770      	bx	lr

08015b54 <__sfputs_r>:
 8015b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b56:	4606      	mov	r6, r0
 8015b58:	460f      	mov	r7, r1
 8015b5a:	4614      	mov	r4, r2
 8015b5c:	18d5      	adds	r5, r2, r3
 8015b5e:	42ac      	cmp	r4, r5
 8015b60:	d101      	bne.n	8015b66 <__sfputs_r+0x12>
 8015b62:	2000      	movs	r0, #0
 8015b64:	e007      	b.n	8015b76 <__sfputs_r+0x22>
 8015b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b6a:	463a      	mov	r2, r7
 8015b6c:	4630      	mov	r0, r6
 8015b6e:	f7ff ffda 	bl	8015b26 <__sfputc_r>
 8015b72:	1c43      	adds	r3, r0, #1
 8015b74:	d1f3      	bne.n	8015b5e <__sfputs_r+0xa>
 8015b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015b78 <_vfiprintf_r>:
 8015b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b7c:	460d      	mov	r5, r1
 8015b7e:	b09d      	sub	sp, #116	; 0x74
 8015b80:	4614      	mov	r4, r2
 8015b82:	4698      	mov	r8, r3
 8015b84:	4606      	mov	r6, r0
 8015b86:	b118      	cbz	r0, 8015b90 <_vfiprintf_r+0x18>
 8015b88:	6a03      	ldr	r3, [r0, #32]
 8015b8a:	b90b      	cbnz	r3, 8015b90 <_vfiprintf_r+0x18>
 8015b8c:	f7fe f8cc 	bl	8013d28 <__sinit>
 8015b90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b92:	07d9      	lsls	r1, r3, #31
 8015b94:	d405      	bmi.n	8015ba2 <_vfiprintf_r+0x2a>
 8015b96:	89ab      	ldrh	r3, [r5, #12]
 8015b98:	059a      	lsls	r2, r3, #22
 8015b9a:	d402      	bmi.n	8015ba2 <_vfiprintf_r+0x2a>
 8015b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b9e:	f7fe f9e8 	bl	8013f72 <__retarget_lock_acquire_recursive>
 8015ba2:	89ab      	ldrh	r3, [r5, #12]
 8015ba4:	071b      	lsls	r3, r3, #28
 8015ba6:	d501      	bpl.n	8015bac <_vfiprintf_r+0x34>
 8015ba8:	692b      	ldr	r3, [r5, #16]
 8015baa:	b99b      	cbnz	r3, 8015bd4 <_vfiprintf_r+0x5c>
 8015bac:	4629      	mov	r1, r5
 8015bae:	4630      	mov	r0, r6
 8015bb0:	f000 f93a 	bl	8015e28 <__swsetup_r>
 8015bb4:	b170      	cbz	r0, 8015bd4 <_vfiprintf_r+0x5c>
 8015bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015bb8:	07dc      	lsls	r4, r3, #31
 8015bba:	d504      	bpl.n	8015bc6 <_vfiprintf_r+0x4e>
 8015bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8015bc0:	b01d      	add	sp, #116	; 0x74
 8015bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bc6:	89ab      	ldrh	r3, [r5, #12]
 8015bc8:	0598      	lsls	r0, r3, #22
 8015bca:	d4f7      	bmi.n	8015bbc <_vfiprintf_r+0x44>
 8015bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015bce:	f7fe f9d1 	bl	8013f74 <__retarget_lock_release_recursive>
 8015bd2:	e7f3      	b.n	8015bbc <_vfiprintf_r+0x44>
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8015bd8:	2320      	movs	r3, #32
 8015bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8015be2:	2330      	movs	r3, #48	; 0x30
 8015be4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015d98 <_vfiprintf_r+0x220>
 8015be8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015bec:	f04f 0901 	mov.w	r9, #1
 8015bf0:	4623      	mov	r3, r4
 8015bf2:	469a      	mov	sl, r3
 8015bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bf8:	b10a      	cbz	r2, 8015bfe <_vfiprintf_r+0x86>
 8015bfa:	2a25      	cmp	r2, #37	; 0x25
 8015bfc:	d1f9      	bne.n	8015bf2 <_vfiprintf_r+0x7a>
 8015bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8015c02:	d00b      	beq.n	8015c1c <_vfiprintf_r+0xa4>
 8015c04:	465b      	mov	r3, fp
 8015c06:	4622      	mov	r2, r4
 8015c08:	4629      	mov	r1, r5
 8015c0a:	4630      	mov	r0, r6
 8015c0c:	f7ff ffa2 	bl	8015b54 <__sfputs_r>
 8015c10:	3001      	adds	r0, #1
 8015c12:	f000 80a9 	beq.w	8015d68 <_vfiprintf_r+0x1f0>
 8015c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c18:	445a      	add	r2, fp
 8015c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8015c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	f000 80a1 	beq.w	8015d68 <_vfiprintf_r+0x1f0>
 8015c26:	2300      	movs	r3, #0
 8015c28:	f04f 32ff 	mov.w	r2, #4294967295
 8015c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c30:	f10a 0a01 	add.w	sl, sl, #1
 8015c34:	9304      	str	r3, [sp, #16]
 8015c36:	9307      	str	r3, [sp, #28]
 8015c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8015c3e:	4654      	mov	r4, sl
 8015c40:	2205      	movs	r2, #5
 8015c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c46:	4854      	ldr	r0, [pc, #336]	; (8015d98 <_vfiprintf_r+0x220>)
 8015c48:	f7ea fac2 	bl	80001d0 <memchr>
 8015c4c:	9a04      	ldr	r2, [sp, #16]
 8015c4e:	b9d8      	cbnz	r0, 8015c88 <_vfiprintf_r+0x110>
 8015c50:	06d1      	lsls	r1, r2, #27
 8015c52:	bf44      	itt	mi
 8015c54:	2320      	movmi	r3, #32
 8015c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c5a:	0713      	lsls	r3, r2, #28
 8015c5c:	bf44      	itt	mi
 8015c5e:	232b      	movmi	r3, #43	; 0x2b
 8015c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c64:	f89a 3000 	ldrb.w	r3, [sl]
 8015c68:	2b2a      	cmp	r3, #42	; 0x2a
 8015c6a:	d015      	beq.n	8015c98 <_vfiprintf_r+0x120>
 8015c6c:	9a07      	ldr	r2, [sp, #28]
 8015c6e:	4654      	mov	r4, sl
 8015c70:	2000      	movs	r0, #0
 8015c72:	f04f 0c0a 	mov.w	ip, #10
 8015c76:	4621      	mov	r1, r4
 8015c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c7c:	3b30      	subs	r3, #48	; 0x30
 8015c7e:	2b09      	cmp	r3, #9
 8015c80:	d94d      	bls.n	8015d1e <_vfiprintf_r+0x1a6>
 8015c82:	b1b0      	cbz	r0, 8015cb2 <_vfiprintf_r+0x13a>
 8015c84:	9207      	str	r2, [sp, #28]
 8015c86:	e014      	b.n	8015cb2 <_vfiprintf_r+0x13a>
 8015c88:	eba0 0308 	sub.w	r3, r0, r8
 8015c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8015c90:	4313      	orrs	r3, r2
 8015c92:	9304      	str	r3, [sp, #16]
 8015c94:	46a2      	mov	sl, r4
 8015c96:	e7d2      	b.n	8015c3e <_vfiprintf_r+0xc6>
 8015c98:	9b03      	ldr	r3, [sp, #12]
 8015c9a:	1d19      	adds	r1, r3, #4
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	9103      	str	r1, [sp, #12]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	bfbb      	ittet	lt
 8015ca4:	425b      	neglt	r3, r3
 8015ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8015caa:	9307      	strge	r3, [sp, #28]
 8015cac:	9307      	strlt	r3, [sp, #28]
 8015cae:	bfb8      	it	lt
 8015cb0:	9204      	strlt	r2, [sp, #16]
 8015cb2:	7823      	ldrb	r3, [r4, #0]
 8015cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8015cb6:	d10c      	bne.n	8015cd2 <_vfiprintf_r+0x15a>
 8015cb8:	7863      	ldrb	r3, [r4, #1]
 8015cba:	2b2a      	cmp	r3, #42	; 0x2a
 8015cbc:	d134      	bne.n	8015d28 <_vfiprintf_r+0x1b0>
 8015cbe:	9b03      	ldr	r3, [sp, #12]
 8015cc0:	1d1a      	adds	r2, r3, #4
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	9203      	str	r2, [sp, #12]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	bfb8      	it	lt
 8015cca:	f04f 33ff 	movlt.w	r3, #4294967295
 8015cce:	3402      	adds	r4, #2
 8015cd0:	9305      	str	r3, [sp, #20]
 8015cd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015da8 <_vfiprintf_r+0x230>
 8015cd6:	7821      	ldrb	r1, [r4, #0]
 8015cd8:	2203      	movs	r2, #3
 8015cda:	4650      	mov	r0, sl
 8015cdc:	f7ea fa78 	bl	80001d0 <memchr>
 8015ce0:	b138      	cbz	r0, 8015cf2 <_vfiprintf_r+0x17a>
 8015ce2:	9b04      	ldr	r3, [sp, #16]
 8015ce4:	eba0 000a 	sub.w	r0, r0, sl
 8015ce8:	2240      	movs	r2, #64	; 0x40
 8015cea:	4082      	lsls	r2, r0
 8015cec:	4313      	orrs	r3, r2
 8015cee:	3401      	adds	r4, #1
 8015cf0:	9304      	str	r3, [sp, #16]
 8015cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cf6:	4829      	ldr	r0, [pc, #164]	; (8015d9c <_vfiprintf_r+0x224>)
 8015cf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015cfc:	2206      	movs	r2, #6
 8015cfe:	f7ea fa67 	bl	80001d0 <memchr>
 8015d02:	2800      	cmp	r0, #0
 8015d04:	d03f      	beq.n	8015d86 <_vfiprintf_r+0x20e>
 8015d06:	4b26      	ldr	r3, [pc, #152]	; (8015da0 <_vfiprintf_r+0x228>)
 8015d08:	bb1b      	cbnz	r3, 8015d52 <_vfiprintf_r+0x1da>
 8015d0a:	9b03      	ldr	r3, [sp, #12]
 8015d0c:	3307      	adds	r3, #7
 8015d0e:	f023 0307 	bic.w	r3, r3, #7
 8015d12:	3308      	adds	r3, #8
 8015d14:	9303      	str	r3, [sp, #12]
 8015d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d18:	443b      	add	r3, r7
 8015d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8015d1c:	e768      	b.n	8015bf0 <_vfiprintf_r+0x78>
 8015d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d22:	460c      	mov	r4, r1
 8015d24:	2001      	movs	r0, #1
 8015d26:	e7a6      	b.n	8015c76 <_vfiprintf_r+0xfe>
 8015d28:	2300      	movs	r3, #0
 8015d2a:	3401      	adds	r4, #1
 8015d2c:	9305      	str	r3, [sp, #20]
 8015d2e:	4619      	mov	r1, r3
 8015d30:	f04f 0c0a 	mov.w	ip, #10
 8015d34:	4620      	mov	r0, r4
 8015d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d3a:	3a30      	subs	r2, #48	; 0x30
 8015d3c:	2a09      	cmp	r2, #9
 8015d3e:	d903      	bls.n	8015d48 <_vfiprintf_r+0x1d0>
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d0c6      	beq.n	8015cd2 <_vfiprintf_r+0x15a>
 8015d44:	9105      	str	r1, [sp, #20]
 8015d46:	e7c4      	b.n	8015cd2 <_vfiprintf_r+0x15a>
 8015d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d4c:	4604      	mov	r4, r0
 8015d4e:	2301      	movs	r3, #1
 8015d50:	e7f0      	b.n	8015d34 <_vfiprintf_r+0x1bc>
 8015d52:	ab03      	add	r3, sp, #12
 8015d54:	9300      	str	r3, [sp, #0]
 8015d56:	462a      	mov	r2, r5
 8015d58:	4b12      	ldr	r3, [pc, #72]	; (8015da4 <_vfiprintf_r+0x22c>)
 8015d5a:	a904      	add	r1, sp, #16
 8015d5c:	4630      	mov	r0, r6
 8015d5e:	f7fd fb91 	bl	8013484 <_printf_float>
 8015d62:	4607      	mov	r7, r0
 8015d64:	1c78      	adds	r0, r7, #1
 8015d66:	d1d6      	bne.n	8015d16 <_vfiprintf_r+0x19e>
 8015d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d6a:	07d9      	lsls	r1, r3, #31
 8015d6c:	d405      	bmi.n	8015d7a <_vfiprintf_r+0x202>
 8015d6e:	89ab      	ldrh	r3, [r5, #12]
 8015d70:	059a      	lsls	r2, r3, #22
 8015d72:	d402      	bmi.n	8015d7a <_vfiprintf_r+0x202>
 8015d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d76:	f7fe f8fd 	bl	8013f74 <__retarget_lock_release_recursive>
 8015d7a:	89ab      	ldrh	r3, [r5, #12]
 8015d7c:	065b      	lsls	r3, r3, #25
 8015d7e:	f53f af1d 	bmi.w	8015bbc <_vfiprintf_r+0x44>
 8015d82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d84:	e71c      	b.n	8015bc0 <_vfiprintf_r+0x48>
 8015d86:	ab03      	add	r3, sp, #12
 8015d88:	9300      	str	r3, [sp, #0]
 8015d8a:	462a      	mov	r2, r5
 8015d8c:	4b05      	ldr	r3, [pc, #20]	; (8015da4 <_vfiprintf_r+0x22c>)
 8015d8e:	a904      	add	r1, sp, #16
 8015d90:	4630      	mov	r0, r6
 8015d92:	f7fd fe1b 	bl	80139cc <_printf_i>
 8015d96:	e7e4      	b.n	8015d62 <_vfiprintf_r+0x1ea>
 8015d98:	080376cc 	.word	0x080376cc
 8015d9c:	080376d6 	.word	0x080376d6
 8015da0:	08013485 	.word	0x08013485
 8015da4:	08015b55 	.word	0x08015b55
 8015da8:	080376d2 	.word	0x080376d2

08015dac <__swbuf_r>:
 8015dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dae:	460e      	mov	r6, r1
 8015db0:	4614      	mov	r4, r2
 8015db2:	4605      	mov	r5, r0
 8015db4:	b118      	cbz	r0, 8015dbe <__swbuf_r+0x12>
 8015db6:	6a03      	ldr	r3, [r0, #32]
 8015db8:	b90b      	cbnz	r3, 8015dbe <__swbuf_r+0x12>
 8015dba:	f7fd ffb5 	bl	8013d28 <__sinit>
 8015dbe:	69a3      	ldr	r3, [r4, #24]
 8015dc0:	60a3      	str	r3, [r4, #8]
 8015dc2:	89a3      	ldrh	r3, [r4, #12]
 8015dc4:	071a      	lsls	r2, r3, #28
 8015dc6:	d525      	bpl.n	8015e14 <__swbuf_r+0x68>
 8015dc8:	6923      	ldr	r3, [r4, #16]
 8015dca:	b31b      	cbz	r3, 8015e14 <__swbuf_r+0x68>
 8015dcc:	6823      	ldr	r3, [r4, #0]
 8015dce:	6922      	ldr	r2, [r4, #16]
 8015dd0:	1a98      	subs	r0, r3, r2
 8015dd2:	6963      	ldr	r3, [r4, #20]
 8015dd4:	b2f6      	uxtb	r6, r6
 8015dd6:	4283      	cmp	r3, r0
 8015dd8:	4637      	mov	r7, r6
 8015dda:	dc04      	bgt.n	8015de6 <__swbuf_r+0x3a>
 8015ddc:	4621      	mov	r1, r4
 8015dde:	4628      	mov	r0, r5
 8015de0:	f7ff fd9e 	bl	8015920 <_fflush_r>
 8015de4:	b9e0      	cbnz	r0, 8015e20 <__swbuf_r+0x74>
 8015de6:	68a3      	ldr	r3, [r4, #8]
 8015de8:	3b01      	subs	r3, #1
 8015dea:	60a3      	str	r3, [r4, #8]
 8015dec:	6823      	ldr	r3, [r4, #0]
 8015dee:	1c5a      	adds	r2, r3, #1
 8015df0:	6022      	str	r2, [r4, #0]
 8015df2:	701e      	strb	r6, [r3, #0]
 8015df4:	6962      	ldr	r2, [r4, #20]
 8015df6:	1c43      	adds	r3, r0, #1
 8015df8:	429a      	cmp	r2, r3
 8015dfa:	d004      	beq.n	8015e06 <__swbuf_r+0x5a>
 8015dfc:	89a3      	ldrh	r3, [r4, #12]
 8015dfe:	07db      	lsls	r3, r3, #31
 8015e00:	d506      	bpl.n	8015e10 <__swbuf_r+0x64>
 8015e02:	2e0a      	cmp	r6, #10
 8015e04:	d104      	bne.n	8015e10 <__swbuf_r+0x64>
 8015e06:	4621      	mov	r1, r4
 8015e08:	4628      	mov	r0, r5
 8015e0a:	f7ff fd89 	bl	8015920 <_fflush_r>
 8015e0e:	b938      	cbnz	r0, 8015e20 <__swbuf_r+0x74>
 8015e10:	4638      	mov	r0, r7
 8015e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e14:	4621      	mov	r1, r4
 8015e16:	4628      	mov	r0, r5
 8015e18:	f000 f806 	bl	8015e28 <__swsetup_r>
 8015e1c:	2800      	cmp	r0, #0
 8015e1e:	d0d5      	beq.n	8015dcc <__swbuf_r+0x20>
 8015e20:	f04f 37ff 	mov.w	r7, #4294967295
 8015e24:	e7f4      	b.n	8015e10 <__swbuf_r+0x64>
	...

08015e28 <__swsetup_r>:
 8015e28:	b538      	push	{r3, r4, r5, lr}
 8015e2a:	4b2a      	ldr	r3, [pc, #168]	; (8015ed4 <__swsetup_r+0xac>)
 8015e2c:	4605      	mov	r5, r0
 8015e2e:	6818      	ldr	r0, [r3, #0]
 8015e30:	460c      	mov	r4, r1
 8015e32:	b118      	cbz	r0, 8015e3c <__swsetup_r+0x14>
 8015e34:	6a03      	ldr	r3, [r0, #32]
 8015e36:	b90b      	cbnz	r3, 8015e3c <__swsetup_r+0x14>
 8015e38:	f7fd ff76 	bl	8013d28 <__sinit>
 8015e3c:	89a3      	ldrh	r3, [r4, #12]
 8015e3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e42:	0718      	lsls	r0, r3, #28
 8015e44:	d422      	bmi.n	8015e8c <__swsetup_r+0x64>
 8015e46:	06d9      	lsls	r1, r3, #27
 8015e48:	d407      	bmi.n	8015e5a <__swsetup_r+0x32>
 8015e4a:	2309      	movs	r3, #9
 8015e4c:	602b      	str	r3, [r5, #0]
 8015e4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015e52:	81a3      	strh	r3, [r4, #12]
 8015e54:	f04f 30ff 	mov.w	r0, #4294967295
 8015e58:	e034      	b.n	8015ec4 <__swsetup_r+0x9c>
 8015e5a:	0758      	lsls	r0, r3, #29
 8015e5c:	d512      	bpl.n	8015e84 <__swsetup_r+0x5c>
 8015e5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e60:	b141      	cbz	r1, 8015e74 <__swsetup_r+0x4c>
 8015e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e66:	4299      	cmp	r1, r3
 8015e68:	d002      	beq.n	8015e70 <__swsetup_r+0x48>
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	f7fe fefe 	bl	8014c6c <_free_r>
 8015e70:	2300      	movs	r3, #0
 8015e72:	6363      	str	r3, [r4, #52]	; 0x34
 8015e74:	89a3      	ldrh	r3, [r4, #12]
 8015e76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015e7a:	81a3      	strh	r3, [r4, #12]
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	6063      	str	r3, [r4, #4]
 8015e80:	6923      	ldr	r3, [r4, #16]
 8015e82:	6023      	str	r3, [r4, #0]
 8015e84:	89a3      	ldrh	r3, [r4, #12]
 8015e86:	f043 0308 	orr.w	r3, r3, #8
 8015e8a:	81a3      	strh	r3, [r4, #12]
 8015e8c:	6923      	ldr	r3, [r4, #16]
 8015e8e:	b94b      	cbnz	r3, 8015ea4 <__swsetup_r+0x7c>
 8015e90:	89a3      	ldrh	r3, [r4, #12]
 8015e92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e9a:	d003      	beq.n	8015ea4 <__swsetup_r+0x7c>
 8015e9c:	4621      	mov	r1, r4
 8015e9e:	4628      	mov	r0, r5
 8015ea0:	f000 f884 	bl	8015fac <__smakebuf_r>
 8015ea4:	89a0      	ldrh	r0, [r4, #12]
 8015ea6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015eaa:	f010 0301 	ands.w	r3, r0, #1
 8015eae:	d00a      	beq.n	8015ec6 <__swsetup_r+0x9e>
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	60a3      	str	r3, [r4, #8]
 8015eb4:	6963      	ldr	r3, [r4, #20]
 8015eb6:	425b      	negs	r3, r3
 8015eb8:	61a3      	str	r3, [r4, #24]
 8015eba:	6923      	ldr	r3, [r4, #16]
 8015ebc:	b943      	cbnz	r3, 8015ed0 <__swsetup_r+0xa8>
 8015ebe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015ec2:	d1c4      	bne.n	8015e4e <__swsetup_r+0x26>
 8015ec4:	bd38      	pop	{r3, r4, r5, pc}
 8015ec6:	0781      	lsls	r1, r0, #30
 8015ec8:	bf58      	it	pl
 8015eca:	6963      	ldrpl	r3, [r4, #20]
 8015ecc:	60a3      	str	r3, [r4, #8]
 8015ece:	e7f4      	b.n	8015eba <__swsetup_r+0x92>
 8015ed0:	2000      	movs	r0, #0
 8015ed2:	e7f7      	b.n	8015ec4 <__swsetup_r+0x9c>
 8015ed4:	2000027c 	.word	0x2000027c

08015ed8 <_raise_r>:
 8015ed8:	291f      	cmp	r1, #31
 8015eda:	b538      	push	{r3, r4, r5, lr}
 8015edc:	4604      	mov	r4, r0
 8015ede:	460d      	mov	r5, r1
 8015ee0:	d904      	bls.n	8015eec <_raise_r+0x14>
 8015ee2:	2316      	movs	r3, #22
 8015ee4:	6003      	str	r3, [r0, #0]
 8015ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8015eea:	bd38      	pop	{r3, r4, r5, pc}
 8015eec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015eee:	b112      	cbz	r2, 8015ef6 <_raise_r+0x1e>
 8015ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015ef4:	b94b      	cbnz	r3, 8015f0a <_raise_r+0x32>
 8015ef6:	4620      	mov	r0, r4
 8015ef8:	f000 f830 	bl	8015f5c <_getpid_r>
 8015efc:	462a      	mov	r2, r5
 8015efe:	4601      	mov	r1, r0
 8015f00:	4620      	mov	r0, r4
 8015f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f06:	f000 b817 	b.w	8015f38 <_kill_r>
 8015f0a:	2b01      	cmp	r3, #1
 8015f0c:	d00a      	beq.n	8015f24 <_raise_r+0x4c>
 8015f0e:	1c59      	adds	r1, r3, #1
 8015f10:	d103      	bne.n	8015f1a <_raise_r+0x42>
 8015f12:	2316      	movs	r3, #22
 8015f14:	6003      	str	r3, [r0, #0]
 8015f16:	2001      	movs	r0, #1
 8015f18:	e7e7      	b.n	8015eea <_raise_r+0x12>
 8015f1a:	2400      	movs	r4, #0
 8015f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015f20:	4628      	mov	r0, r5
 8015f22:	4798      	blx	r3
 8015f24:	2000      	movs	r0, #0
 8015f26:	e7e0      	b.n	8015eea <_raise_r+0x12>

08015f28 <raise>:
 8015f28:	4b02      	ldr	r3, [pc, #8]	; (8015f34 <raise+0xc>)
 8015f2a:	4601      	mov	r1, r0
 8015f2c:	6818      	ldr	r0, [r3, #0]
 8015f2e:	f7ff bfd3 	b.w	8015ed8 <_raise_r>
 8015f32:	bf00      	nop
 8015f34:	2000027c 	.word	0x2000027c

08015f38 <_kill_r>:
 8015f38:	b538      	push	{r3, r4, r5, lr}
 8015f3a:	4d07      	ldr	r5, [pc, #28]	; (8015f58 <_kill_r+0x20>)
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	4604      	mov	r4, r0
 8015f40:	4608      	mov	r0, r1
 8015f42:	4611      	mov	r1, r2
 8015f44:	602b      	str	r3, [r5, #0]
 8015f46:	f7ed ffb9 	bl	8003ebc <_kill>
 8015f4a:	1c43      	adds	r3, r0, #1
 8015f4c:	d102      	bne.n	8015f54 <_kill_r+0x1c>
 8015f4e:	682b      	ldr	r3, [r5, #0]
 8015f50:	b103      	cbz	r3, 8015f54 <_kill_r+0x1c>
 8015f52:	6023      	str	r3, [r4, #0]
 8015f54:	bd38      	pop	{r3, r4, r5, pc}
 8015f56:	bf00      	nop
 8015f58:	20002d44 	.word	0x20002d44

08015f5c <_getpid_r>:
 8015f5c:	f7ed bfa6 	b.w	8003eac <_getpid>

08015f60 <__swhatbuf_r>:
 8015f60:	b570      	push	{r4, r5, r6, lr}
 8015f62:	460c      	mov	r4, r1
 8015f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f68:	2900      	cmp	r1, #0
 8015f6a:	b096      	sub	sp, #88	; 0x58
 8015f6c:	4615      	mov	r5, r2
 8015f6e:	461e      	mov	r6, r3
 8015f70:	da0d      	bge.n	8015f8e <__swhatbuf_r+0x2e>
 8015f72:	89a3      	ldrh	r3, [r4, #12]
 8015f74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015f78:	f04f 0100 	mov.w	r1, #0
 8015f7c:	bf0c      	ite	eq
 8015f7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015f82:	2340      	movne	r3, #64	; 0x40
 8015f84:	2000      	movs	r0, #0
 8015f86:	6031      	str	r1, [r6, #0]
 8015f88:	602b      	str	r3, [r5, #0]
 8015f8a:	b016      	add	sp, #88	; 0x58
 8015f8c:	bd70      	pop	{r4, r5, r6, pc}
 8015f8e:	466a      	mov	r2, sp
 8015f90:	f000 f848 	bl	8016024 <_fstat_r>
 8015f94:	2800      	cmp	r0, #0
 8015f96:	dbec      	blt.n	8015f72 <__swhatbuf_r+0x12>
 8015f98:	9901      	ldr	r1, [sp, #4]
 8015f9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015f9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015fa2:	4259      	negs	r1, r3
 8015fa4:	4159      	adcs	r1, r3
 8015fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015faa:	e7eb      	b.n	8015f84 <__swhatbuf_r+0x24>

08015fac <__smakebuf_r>:
 8015fac:	898b      	ldrh	r3, [r1, #12]
 8015fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015fb0:	079d      	lsls	r5, r3, #30
 8015fb2:	4606      	mov	r6, r0
 8015fb4:	460c      	mov	r4, r1
 8015fb6:	d507      	bpl.n	8015fc8 <__smakebuf_r+0x1c>
 8015fb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015fbc:	6023      	str	r3, [r4, #0]
 8015fbe:	6123      	str	r3, [r4, #16]
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	6163      	str	r3, [r4, #20]
 8015fc4:	b002      	add	sp, #8
 8015fc6:	bd70      	pop	{r4, r5, r6, pc}
 8015fc8:	ab01      	add	r3, sp, #4
 8015fca:	466a      	mov	r2, sp
 8015fcc:	f7ff ffc8 	bl	8015f60 <__swhatbuf_r>
 8015fd0:	9900      	ldr	r1, [sp, #0]
 8015fd2:	4605      	mov	r5, r0
 8015fd4:	4630      	mov	r0, r6
 8015fd6:	f7fe febd 	bl	8014d54 <_malloc_r>
 8015fda:	b948      	cbnz	r0, 8015ff0 <__smakebuf_r+0x44>
 8015fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fe0:	059a      	lsls	r2, r3, #22
 8015fe2:	d4ef      	bmi.n	8015fc4 <__smakebuf_r+0x18>
 8015fe4:	f023 0303 	bic.w	r3, r3, #3
 8015fe8:	f043 0302 	orr.w	r3, r3, #2
 8015fec:	81a3      	strh	r3, [r4, #12]
 8015fee:	e7e3      	b.n	8015fb8 <__smakebuf_r+0xc>
 8015ff0:	89a3      	ldrh	r3, [r4, #12]
 8015ff2:	6020      	str	r0, [r4, #0]
 8015ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ff8:	81a3      	strh	r3, [r4, #12]
 8015ffa:	9b00      	ldr	r3, [sp, #0]
 8015ffc:	6163      	str	r3, [r4, #20]
 8015ffe:	9b01      	ldr	r3, [sp, #4]
 8016000:	6120      	str	r0, [r4, #16]
 8016002:	b15b      	cbz	r3, 801601c <__smakebuf_r+0x70>
 8016004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016008:	4630      	mov	r0, r6
 801600a:	f000 f81d 	bl	8016048 <_isatty_r>
 801600e:	b128      	cbz	r0, 801601c <__smakebuf_r+0x70>
 8016010:	89a3      	ldrh	r3, [r4, #12]
 8016012:	f023 0303 	bic.w	r3, r3, #3
 8016016:	f043 0301 	orr.w	r3, r3, #1
 801601a:	81a3      	strh	r3, [r4, #12]
 801601c:	89a3      	ldrh	r3, [r4, #12]
 801601e:	431d      	orrs	r5, r3
 8016020:	81a5      	strh	r5, [r4, #12]
 8016022:	e7cf      	b.n	8015fc4 <__smakebuf_r+0x18>

08016024 <_fstat_r>:
 8016024:	b538      	push	{r3, r4, r5, lr}
 8016026:	4d07      	ldr	r5, [pc, #28]	; (8016044 <_fstat_r+0x20>)
 8016028:	2300      	movs	r3, #0
 801602a:	4604      	mov	r4, r0
 801602c:	4608      	mov	r0, r1
 801602e:	4611      	mov	r1, r2
 8016030:	602b      	str	r3, [r5, #0]
 8016032:	f7ed ffa2 	bl	8003f7a <_fstat>
 8016036:	1c43      	adds	r3, r0, #1
 8016038:	d102      	bne.n	8016040 <_fstat_r+0x1c>
 801603a:	682b      	ldr	r3, [r5, #0]
 801603c:	b103      	cbz	r3, 8016040 <_fstat_r+0x1c>
 801603e:	6023      	str	r3, [r4, #0]
 8016040:	bd38      	pop	{r3, r4, r5, pc}
 8016042:	bf00      	nop
 8016044:	20002d44 	.word	0x20002d44

08016048 <_isatty_r>:
 8016048:	b538      	push	{r3, r4, r5, lr}
 801604a:	4d06      	ldr	r5, [pc, #24]	; (8016064 <_isatty_r+0x1c>)
 801604c:	2300      	movs	r3, #0
 801604e:	4604      	mov	r4, r0
 8016050:	4608      	mov	r0, r1
 8016052:	602b      	str	r3, [r5, #0]
 8016054:	f7ed ffa1 	bl	8003f9a <_isatty>
 8016058:	1c43      	adds	r3, r0, #1
 801605a:	d102      	bne.n	8016062 <_isatty_r+0x1a>
 801605c:	682b      	ldr	r3, [r5, #0]
 801605e:	b103      	cbz	r3, 8016062 <_isatty_r+0x1a>
 8016060:	6023      	str	r3, [r4, #0]
 8016062:	bd38      	pop	{r3, r4, r5, pc}
 8016064:	20002d44 	.word	0x20002d44

08016068 <fmod>:
 8016068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801606a:	ed2d 8b02 	vpush	{d8}
 801606e:	ec57 6b10 	vmov	r6, r7, d0
 8016072:	ec55 4b11 	vmov	r4, r5, d1
 8016076:	f000 f8e9 	bl	801624c <__ieee754_fmod>
 801607a:	4622      	mov	r2, r4
 801607c:	462b      	mov	r3, r5
 801607e:	4630      	mov	r0, r6
 8016080:	4639      	mov	r1, r7
 8016082:	eeb0 8a40 	vmov.f32	s16, s0
 8016086:	eef0 8a60 	vmov.f32	s17, s1
 801608a:	f7ea fd4f 	bl	8000b2c <__aeabi_dcmpun>
 801608e:	b990      	cbnz	r0, 80160b6 <fmod+0x4e>
 8016090:	2200      	movs	r2, #0
 8016092:	2300      	movs	r3, #0
 8016094:	4620      	mov	r0, r4
 8016096:	4629      	mov	r1, r5
 8016098:	f7ea fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 801609c:	b158      	cbz	r0, 80160b6 <fmod+0x4e>
 801609e:	f7fd ff3d 	bl	8013f1c <__errno>
 80160a2:	2321      	movs	r3, #33	; 0x21
 80160a4:	6003      	str	r3, [r0, #0]
 80160a6:	2200      	movs	r2, #0
 80160a8:	2300      	movs	r3, #0
 80160aa:	4610      	mov	r0, r2
 80160ac:	4619      	mov	r1, r3
 80160ae:	f7ea fbcd 	bl	800084c <__aeabi_ddiv>
 80160b2:	ec41 0b18 	vmov	d8, r0, r1
 80160b6:	eeb0 0a48 	vmov.f32	s0, s16
 80160ba:	eef0 0a68 	vmov.f32	s1, s17
 80160be:	ecbd 8b02 	vpop	{d8}
 80160c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080160c4 <pow>:
 80160c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160c6:	ed2d 8b02 	vpush	{d8}
 80160ca:	eeb0 8a40 	vmov.f32	s16, s0
 80160ce:	eef0 8a60 	vmov.f32	s17, s1
 80160d2:	ec55 4b11 	vmov	r4, r5, d1
 80160d6:	f000 f9c7 	bl	8016468 <__ieee754_pow>
 80160da:	4622      	mov	r2, r4
 80160dc:	462b      	mov	r3, r5
 80160de:	4620      	mov	r0, r4
 80160e0:	4629      	mov	r1, r5
 80160e2:	ec57 6b10 	vmov	r6, r7, d0
 80160e6:	f7ea fd21 	bl	8000b2c <__aeabi_dcmpun>
 80160ea:	2800      	cmp	r0, #0
 80160ec:	d13b      	bne.n	8016166 <pow+0xa2>
 80160ee:	ec51 0b18 	vmov	r0, r1, d8
 80160f2:	2200      	movs	r2, #0
 80160f4:	2300      	movs	r3, #0
 80160f6:	f7ea fce7 	bl	8000ac8 <__aeabi_dcmpeq>
 80160fa:	b1b8      	cbz	r0, 801612c <pow+0x68>
 80160fc:	2200      	movs	r2, #0
 80160fe:	2300      	movs	r3, #0
 8016100:	4620      	mov	r0, r4
 8016102:	4629      	mov	r1, r5
 8016104:	f7ea fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 8016108:	2800      	cmp	r0, #0
 801610a:	d146      	bne.n	801619a <pow+0xd6>
 801610c:	ec45 4b10 	vmov	d0, r4, r5
 8016110:	f000 f848 	bl	80161a4 <finite>
 8016114:	b338      	cbz	r0, 8016166 <pow+0xa2>
 8016116:	2200      	movs	r2, #0
 8016118:	2300      	movs	r3, #0
 801611a:	4620      	mov	r0, r4
 801611c:	4629      	mov	r1, r5
 801611e:	f7ea fcdd 	bl	8000adc <__aeabi_dcmplt>
 8016122:	b300      	cbz	r0, 8016166 <pow+0xa2>
 8016124:	f7fd fefa 	bl	8013f1c <__errno>
 8016128:	2322      	movs	r3, #34	; 0x22
 801612a:	e01b      	b.n	8016164 <pow+0xa0>
 801612c:	ec47 6b10 	vmov	d0, r6, r7
 8016130:	f000 f838 	bl	80161a4 <finite>
 8016134:	b9e0      	cbnz	r0, 8016170 <pow+0xac>
 8016136:	eeb0 0a48 	vmov.f32	s0, s16
 801613a:	eef0 0a68 	vmov.f32	s1, s17
 801613e:	f000 f831 	bl	80161a4 <finite>
 8016142:	b1a8      	cbz	r0, 8016170 <pow+0xac>
 8016144:	ec45 4b10 	vmov	d0, r4, r5
 8016148:	f000 f82c 	bl	80161a4 <finite>
 801614c:	b180      	cbz	r0, 8016170 <pow+0xac>
 801614e:	4632      	mov	r2, r6
 8016150:	463b      	mov	r3, r7
 8016152:	4630      	mov	r0, r6
 8016154:	4639      	mov	r1, r7
 8016156:	f7ea fce9 	bl	8000b2c <__aeabi_dcmpun>
 801615a:	2800      	cmp	r0, #0
 801615c:	d0e2      	beq.n	8016124 <pow+0x60>
 801615e:	f7fd fedd 	bl	8013f1c <__errno>
 8016162:	2321      	movs	r3, #33	; 0x21
 8016164:	6003      	str	r3, [r0, #0]
 8016166:	ecbd 8b02 	vpop	{d8}
 801616a:	ec47 6b10 	vmov	d0, r6, r7
 801616e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016170:	2200      	movs	r2, #0
 8016172:	2300      	movs	r3, #0
 8016174:	4630      	mov	r0, r6
 8016176:	4639      	mov	r1, r7
 8016178:	f7ea fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 801617c:	2800      	cmp	r0, #0
 801617e:	d0f2      	beq.n	8016166 <pow+0xa2>
 8016180:	eeb0 0a48 	vmov.f32	s0, s16
 8016184:	eef0 0a68 	vmov.f32	s1, s17
 8016188:	f000 f80c 	bl	80161a4 <finite>
 801618c:	2800      	cmp	r0, #0
 801618e:	d0ea      	beq.n	8016166 <pow+0xa2>
 8016190:	ec45 4b10 	vmov	d0, r4, r5
 8016194:	f000 f806 	bl	80161a4 <finite>
 8016198:	e7c3      	b.n	8016122 <pow+0x5e>
 801619a:	4f01      	ldr	r7, [pc, #4]	; (80161a0 <pow+0xdc>)
 801619c:	2600      	movs	r6, #0
 801619e:	e7e2      	b.n	8016166 <pow+0xa2>
 80161a0:	3ff00000 	.word	0x3ff00000

080161a4 <finite>:
 80161a4:	b082      	sub	sp, #8
 80161a6:	ed8d 0b00 	vstr	d0, [sp]
 80161aa:	9801      	ldr	r0, [sp, #4]
 80161ac:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80161b0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80161b4:	0fc0      	lsrs	r0, r0, #31
 80161b6:	b002      	add	sp, #8
 80161b8:	4770      	bx	lr
	...

080161bc <round>:
 80161bc:	ec53 2b10 	vmov	r2, r3, d0
 80161c0:	b570      	push	{r4, r5, r6, lr}
 80161c2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80161c6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80161ca:	2813      	cmp	r0, #19
 80161cc:	ee10 5a10 	vmov	r5, s0
 80161d0:	4619      	mov	r1, r3
 80161d2:	dc18      	bgt.n	8016206 <round+0x4a>
 80161d4:	2800      	cmp	r0, #0
 80161d6:	da09      	bge.n	80161ec <round+0x30>
 80161d8:	3001      	adds	r0, #1
 80161da:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80161de:	d103      	bne.n	80161e8 <round+0x2c>
 80161e0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80161e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80161e8:	2300      	movs	r3, #0
 80161ea:	e02a      	b.n	8016242 <round+0x86>
 80161ec:	4c16      	ldr	r4, [pc, #88]	; (8016248 <round+0x8c>)
 80161ee:	4104      	asrs	r4, r0
 80161f0:	ea03 0604 	and.w	r6, r3, r4
 80161f4:	4316      	orrs	r6, r2
 80161f6:	d011      	beq.n	801621c <round+0x60>
 80161f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80161fc:	4103      	asrs	r3, r0
 80161fe:	440b      	add	r3, r1
 8016200:	ea23 0104 	bic.w	r1, r3, r4
 8016204:	e7f0      	b.n	80161e8 <round+0x2c>
 8016206:	2833      	cmp	r0, #51	; 0x33
 8016208:	dd0b      	ble.n	8016222 <round+0x66>
 801620a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801620e:	d105      	bne.n	801621c <round+0x60>
 8016210:	ee10 0a10 	vmov	r0, s0
 8016214:	f7ea f83a 	bl	800028c <__adddf3>
 8016218:	4602      	mov	r2, r0
 801621a:	460b      	mov	r3, r1
 801621c:	ec43 2b10 	vmov	d0, r2, r3
 8016220:	bd70      	pop	{r4, r5, r6, pc}
 8016222:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8016226:	f04f 34ff 	mov.w	r4, #4294967295
 801622a:	40f4      	lsrs	r4, r6
 801622c:	4214      	tst	r4, r2
 801622e:	d0f5      	beq.n	801621c <round+0x60>
 8016230:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8016234:	2301      	movs	r3, #1
 8016236:	4083      	lsls	r3, r0
 8016238:	195b      	adds	r3, r3, r5
 801623a:	bf28      	it	cs
 801623c:	3101      	addcs	r1, #1
 801623e:	ea23 0304 	bic.w	r3, r3, r4
 8016242:	461a      	mov	r2, r3
 8016244:	460b      	mov	r3, r1
 8016246:	e7e9      	b.n	801621c <round+0x60>
 8016248:	000fffff 	.word	0x000fffff

0801624c <__ieee754_fmod>:
 801624c:	ec53 2b11 	vmov	r2, r3, d1
 8016250:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8016254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016258:	ea5c 0402 	orrs.w	r4, ip, r2
 801625c:	ec51 0b10 	vmov	r0, r1, d0
 8016260:	ee11 7a10 	vmov	r7, s2
 8016264:	ee11 ea10 	vmov	lr, s2
 8016268:	461e      	mov	r6, r3
 801626a:	d00c      	beq.n	8016286 <__ieee754_fmod+0x3a>
 801626c:	4c78      	ldr	r4, [pc, #480]	; (8016450 <__ieee754_fmod+0x204>)
 801626e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8016272:	45a0      	cmp	r8, r4
 8016274:	4689      	mov	r9, r1
 8016276:	dc06      	bgt.n	8016286 <__ieee754_fmod+0x3a>
 8016278:	4254      	negs	r4, r2
 801627a:	4d76      	ldr	r5, [pc, #472]	; (8016454 <__ieee754_fmod+0x208>)
 801627c:	4314      	orrs	r4, r2
 801627e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8016282:	42ac      	cmp	r4, r5
 8016284:	d909      	bls.n	801629a <__ieee754_fmod+0x4e>
 8016286:	f7ea f9b7 	bl	80005f8 <__aeabi_dmul>
 801628a:	4602      	mov	r2, r0
 801628c:	460b      	mov	r3, r1
 801628e:	f7ea fadd 	bl	800084c <__aeabi_ddiv>
 8016292:	ec41 0b10 	vmov	d0, r0, r1
 8016296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801629a:	45e0      	cmp	r8, ip
 801629c:	ee10 aa10 	vmov	sl, s0
 80162a0:	ee10 4a10 	vmov	r4, s0
 80162a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80162a8:	dc09      	bgt.n	80162be <__ieee754_fmod+0x72>
 80162aa:	dbf2      	blt.n	8016292 <__ieee754_fmod+0x46>
 80162ac:	4290      	cmp	r0, r2
 80162ae:	d3f0      	bcc.n	8016292 <__ieee754_fmod+0x46>
 80162b0:	d105      	bne.n	80162be <__ieee754_fmod+0x72>
 80162b2:	4b69      	ldr	r3, [pc, #420]	; (8016458 <__ieee754_fmod+0x20c>)
 80162b4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80162b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80162bc:	e7e9      	b.n	8016292 <__ieee754_fmod+0x46>
 80162be:	4a65      	ldr	r2, [pc, #404]	; (8016454 <__ieee754_fmod+0x208>)
 80162c0:	ea19 0f02 	tst.w	r9, r2
 80162c4:	d148      	bne.n	8016358 <__ieee754_fmod+0x10c>
 80162c6:	f1b8 0f00 	cmp.w	r8, #0
 80162ca:	d13d      	bne.n	8016348 <__ieee754_fmod+0xfc>
 80162cc:	4963      	ldr	r1, [pc, #396]	; (801645c <__ieee754_fmod+0x210>)
 80162ce:	4653      	mov	r3, sl
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	dc36      	bgt.n	8016342 <__ieee754_fmod+0xf6>
 80162d4:	4216      	tst	r6, r2
 80162d6:	d14f      	bne.n	8016378 <__ieee754_fmod+0x12c>
 80162d8:	f1bc 0f00 	cmp.w	ip, #0
 80162dc:	d144      	bne.n	8016368 <__ieee754_fmod+0x11c>
 80162de:	4a5f      	ldr	r2, [pc, #380]	; (801645c <__ieee754_fmod+0x210>)
 80162e0:	463b      	mov	r3, r7
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	dc3d      	bgt.n	8016362 <__ieee754_fmod+0x116>
 80162e6:	485e      	ldr	r0, [pc, #376]	; (8016460 <__ieee754_fmod+0x214>)
 80162e8:	4281      	cmp	r1, r0
 80162ea:	db4a      	blt.n	8016382 <__ieee754_fmod+0x136>
 80162ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80162f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80162f4:	485a      	ldr	r0, [pc, #360]	; (8016460 <__ieee754_fmod+0x214>)
 80162f6:	4282      	cmp	r2, r0
 80162f8:	db57      	blt.n	80163aa <__ieee754_fmod+0x15e>
 80162fa:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80162fe:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8016302:	1a89      	subs	r1, r1, r2
 8016304:	1b98      	subs	r0, r3, r6
 8016306:	eba4 070e 	sub.w	r7, r4, lr
 801630a:	2900      	cmp	r1, #0
 801630c:	d162      	bne.n	80163d4 <__ieee754_fmod+0x188>
 801630e:	4574      	cmp	r4, lr
 8016310:	bf38      	it	cc
 8016312:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8016316:	2800      	cmp	r0, #0
 8016318:	bfa4      	itt	ge
 801631a:	463c      	movge	r4, r7
 801631c:	4603      	movge	r3, r0
 801631e:	ea53 0104 	orrs.w	r1, r3, r4
 8016322:	d0c6      	beq.n	80162b2 <__ieee754_fmod+0x66>
 8016324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016328:	db69      	blt.n	80163fe <__ieee754_fmod+0x1b2>
 801632a:	494d      	ldr	r1, [pc, #308]	; (8016460 <__ieee754_fmod+0x214>)
 801632c:	428a      	cmp	r2, r1
 801632e:	db6c      	blt.n	801640a <__ieee754_fmod+0x1be>
 8016330:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016334:	432b      	orrs	r3, r5
 8016336:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801633a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801633e:	4620      	mov	r0, r4
 8016340:	e7a7      	b.n	8016292 <__ieee754_fmod+0x46>
 8016342:	3901      	subs	r1, #1
 8016344:	005b      	lsls	r3, r3, #1
 8016346:	e7c3      	b.n	80162d0 <__ieee754_fmod+0x84>
 8016348:	4945      	ldr	r1, [pc, #276]	; (8016460 <__ieee754_fmod+0x214>)
 801634a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801634e:	2b00      	cmp	r3, #0
 8016350:	ddc0      	ble.n	80162d4 <__ieee754_fmod+0x88>
 8016352:	3901      	subs	r1, #1
 8016354:	005b      	lsls	r3, r3, #1
 8016356:	e7fa      	b.n	801634e <__ieee754_fmod+0x102>
 8016358:	ea4f 5128 	mov.w	r1, r8, asr #20
 801635c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016360:	e7b8      	b.n	80162d4 <__ieee754_fmod+0x88>
 8016362:	3a01      	subs	r2, #1
 8016364:	005b      	lsls	r3, r3, #1
 8016366:	e7bc      	b.n	80162e2 <__ieee754_fmod+0x96>
 8016368:	4a3d      	ldr	r2, [pc, #244]	; (8016460 <__ieee754_fmod+0x214>)
 801636a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801636e:	2b00      	cmp	r3, #0
 8016370:	ddb9      	ble.n	80162e6 <__ieee754_fmod+0x9a>
 8016372:	3a01      	subs	r2, #1
 8016374:	005b      	lsls	r3, r3, #1
 8016376:	e7fa      	b.n	801636e <__ieee754_fmod+0x122>
 8016378:	ea4f 522c 	mov.w	r2, ip, asr #20
 801637c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016380:	e7b1      	b.n	80162e6 <__ieee754_fmod+0x9a>
 8016382:	1a40      	subs	r0, r0, r1
 8016384:	281f      	cmp	r0, #31
 8016386:	dc0a      	bgt.n	801639e <__ieee754_fmod+0x152>
 8016388:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801638c:	fa08 f800 	lsl.w	r8, r8, r0
 8016390:	fa2a f303 	lsr.w	r3, sl, r3
 8016394:	ea43 0308 	orr.w	r3, r3, r8
 8016398:	fa0a f400 	lsl.w	r4, sl, r0
 801639c:	e7aa      	b.n	80162f4 <__ieee754_fmod+0xa8>
 801639e:	4b31      	ldr	r3, [pc, #196]	; (8016464 <__ieee754_fmod+0x218>)
 80163a0:	1a5b      	subs	r3, r3, r1
 80163a2:	fa0a f303 	lsl.w	r3, sl, r3
 80163a6:	2400      	movs	r4, #0
 80163a8:	e7a4      	b.n	80162f4 <__ieee754_fmod+0xa8>
 80163aa:	1a80      	subs	r0, r0, r2
 80163ac:	281f      	cmp	r0, #31
 80163ae:	dc0a      	bgt.n	80163c6 <__ieee754_fmod+0x17a>
 80163b0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80163b4:	fa0c fc00 	lsl.w	ip, ip, r0
 80163b8:	fa27 f606 	lsr.w	r6, r7, r6
 80163bc:	ea46 060c 	orr.w	r6, r6, ip
 80163c0:	fa07 fe00 	lsl.w	lr, r7, r0
 80163c4:	e79d      	b.n	8016302 <__ieee754_fmod+0xb6>
 80163c6:	4e27      	ldr	r6, [pc, #156]	; (8016464 <__ieee754_fmod+0x218>)
 80163c8:	1ab6      	subs	r6, r6, r2
 80163ca:	fa07 f606 	lsl.w	r6, r7, r6
 80163ce:	f04f 0e00 	mov.w	lr, #0
 80163d2:	e796      	b.n	8016302 <__ieee754_fmod+0xb6>
 80163d4:	4574      	cmp	r4, lr
 80163d6:	bf38      	it	cc
 80163d8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80163dc:	2800      	cmp	r0, #0
 80163de:	da05      	bge.n	80163ec <__ieee754_fmod+0x1a0>
 80163e0:	0fe0      	lsrs	r0, r4, #31
 80163e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80163e6:	0064      	lsls	r4, r4, #1
 80163e8:	3901      	subs	r1, #1
 80163ea:	e78b      	b.n	8016304 <__ieee754_fmod+0xb8>
 80163ec:	ea50 0307 	orrs.w	r3, r0, r7
 80163f0:	f43f af5f 	beq.w	80162b2 <__ieee754_fmod+0x66>
 80163f4:	0ffb      	lsrs	r3, r7, #31
 80163f6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80163fa:	007c      	lsls	r4, r7, #1
 80163fc:	e7f4      	b.n	80163e8 <__ieee754_fmod+0x19c>
 80163fe:	0fe1      	lsrs	r1, r4, #31
 8016400:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8016404:	0064      	lsls	r4, r4, #1
 8016406:	3a01      	subs	r2, #1
 8016408:	e78c      	b.n	8016324 <__ieee754_fmod+0xd8>
 801640a:	1a89      	subs	r1, r1, r2
 801640c:	2914      	cmp	r1, #20
 801640e:	dc0a      	bgt.n	8016426 <__ieee754_fmod+0x1da>
 8016410:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8016414:	fa03 f202 	lsl.w	r2, r3, r2
 8016418:	40cc      	lsrs	r4, r1
 801641a:	4322      	orrs	r2, r4
 801641c:	410b      	asrs	r3, r1
 801641e:	ea43 0105 	orr.w	r1, r3, r5
 8016422:	4610      	mov	r0, r2
 8016424:	e735      	b.n	8016292 <__ieee754_fmod+0x46>
 8016426:	291f      	cmp	r1, #31
 8016428:	dc07      	bgt.n	801643a <__ieee754_fmod+0x1ee>
 801642a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801642e:	40cc      	lsrs	r4, r1
 8016430:	fa03 f202 	lsl.w	r2, r3, r2
 8016434:	4322      	orrs	r2, r4
 8016436:	462b      	mov	r3, r5
 8016438:	e7f1      	b.n	801641e <__ieee754_fmod+0x1d2>
 801643a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801643e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016442:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8016446:	32e2      	adds	r2, #226	; 0xe2
 8016448:	fa43 f202 	asr.w	r2, r3, r2
 801644c:	e7f3      	b.n	8016436 <__ieee754_fmod+0x1ea>
 801644e:	bf00      	nop
 8016450:	7fefffff 	.word	0x7fefffff
 8016454:	7ff00000 	.word	0x7ff00000
 8016458:	08037828 	.word	0x08037828
 801645c:	fffffbed 	.word	0xfffffbed
 8016460:	fffffc02 	.word	0xfffffc02
 8016464:	fffffbe2 	.word	0xfffffbe2

08016468 <__ieee754_pow>:
 8016468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801646c:	ed2d 8b06 	vpush	{d8-d10}
 8016470:	b089      	sub	sp, #36	; 0x24
 8016472:	ed8d 1b00 	vstr	d1, [sp]
 8016476:	e9dd 2900 	ldrd	r2, r9, [sp]
 801647a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801647e:	ea58 0102 	orrs.w	r1, r8, r2
 8016482:	ec57 6b10 	vmov	r6, r7, d0
 8016486:	d115      	bne.n	80164b4 <__ieee754_pow+0x4c>
 8016488:	19b3      	adds	r3, r6, r6
 801648a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801648e:	4152      	adcs	r2, r2
 8016490:	4299      	cmp	r1, r3
 8016492:	4b89      	ldr	r3, [pc, #548]	; (80166b8 <__ieee754_pow+0x250>)
 8016494:	4193      	sbcs	r3, r2
 8016496:	f080 84d1 	bcs.w	8016e3c <__ieee754_pow+0x9d4>
 801649a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801649e:	4630      	mov	r0, r6
 80164a0:	4639      	mov	r1, r7
 80164a2:	f7e9 fef3 	bl	800028c <__adddf3>
 80164a6:	ec41 0b10 	vmov	d0, r0, r1
 80164aa:	b009      	add	sp, #36	; 0x24
 80164ac:	ecbd 8b06 	vpop	{d8-d10}
 80164b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b4:	4b81      	ldr	r3, [pc, #516]	; (80166bc <__ieee754_pow+0x254>)
 80164b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80164ba:	429c      	cmp	r4, r3
 80164bc:	ee10 aa10 	vmov	sl, s0
 80164c0:	463d      	mov	r5, r7
 80164c2:	dc06      	bgt.n	80164d2 <__ieee754_pow+0x6a>
 80164c4:	d101      	bne.n	80164ca <__ieee754_pow+0x62>
 80164c6:	2e00      	cmp	r6, #0
 80164c8:	d1e7      	bne.n	801649a <__ieee754_pow+0x32>
 80164ca:	4598      	cmp	r8, r3
 80164cc:	dc01      	bgt.n	80164d2 <__ieee754_pow+0x6a>
 80164ce:	d10f      	bne.n	80164f0 <__ieee754_pow+0x88>
 80164d0:	b172      	cbz	r2, 80164f0 <__ieee754_pow+0x88>
 80164d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80164d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80164da:	ea55 050a 	orrs.w	r5, r5, sl
 80164de:	d1dc      	bne.n	801649a <__ieee754_pow+0x32>
 80164e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80164e4:	18db      	adds	r3, r3, r3
 80164e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80164ea:	4152      	adcs	r2, r2
 80164ec:	429d      	cmp	r5, r3
 80164ee:	e7d0      	b.n	8016492 <__ieee754_pow+0x2a>
 80164f0:	2d00      	cmp	r5, #0
 80164f2:	da3b      	bge.n	801656c <__ieee754_pow+0x104>
 80164f4:	4b72      	ldr	r3, [pc, #456]	; (80166c0 <__ieee754_pow+0x258>)
 80164f6:	4598      	cmp	r8, r3
 80164f8:	dc51      	bgt.n	801659e <__ieee754_pow+0x136>
 80164fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80164fe:	4598      	cmp	r8, r3
 8016500:	f340 84ab 	ble.w	8016e5a <__ieee754_pow+0x9f2>
 8016504:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016508:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801650c:	2b14      	cmp	r3, #20
 801650e:	dd0f      	ble.n	8016530 <__ieee754_pow+0xc8>
 8016510:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016514:	fa22 f103 	lsr.w	r1, r2, r3
 8016518:	fa01 f303 	lsl.w	r3, r1, r3
 801651c:	4293      	cmp	r3, r2
 801651e:	f040 849c 	bne.w	8016e5a <__ieee754_pow+0x9f2>
 8016522:	f001 0101 	and.w	r1, r1, #1
 8016526:	f1c1 0302 	rsb	r3, r1, #2
 801652a:	9304      	str	r3, [sp, #16]
 801652c:	b182      	cbz	r2, 8016550 <__ieee754_pow+0xe8>
 801652e:	e05f      	b.n	80165f0 <__ieee754_pow+0x188>
 8016530:	2a00      	cmp	r2, #0
 8016532:	d15b      	bne.n	80165ec <__ieee754_pow+0x184>
 8016534:	f1c3 0314 	rsb	r3, r3, #20
 8016538:	fa48 f103 	asr.w	r1, r8, r3
 801653c:	fa01 f303 	lsl.w	r3, r1, r3
 8016540:	4543      	cmp	r3, r8
 8016542:	f040 8487 	bne.w	8016e54 <__ieee754_pow+0x9ec>
 8016546:	f001 0101 	and.w	r1, r1, #1
 801654a:	f1c1 0302 	rsb	r3, r1, #2
 801654e:	9304      	str	r3, [sp, #16]
 8016550:	4b5c      	ldr	r3, [pc, #368]	; (80166c4 <__ieee754_pow+0x25c>)
 8016552:	4598      	cmp	r8, r3
 8016554:	d132      	bne.n	80165bc <__ieee754_pow+0x154>
 8016556:	f1b9 0f00 	cmp.w	r9, #0
 801655a:	f280 8477 	bge.w	8016e4c <__ieee754_pow+0x9e4>
 801655e:	4959      	ldr	r1, [pc, #356]	; (80166c4 <__ieee754_pow+0x25c>)
 8016560:	4632      	mov	r2, r6
 8016562:	463b      	mov	r3, r7
 8016564:	2000      	movs	r0, #0
 8016566:	f7ea f971 	bl	800084c <__aeabi_ddiv>
 801656a:	e79c      	b.n	80164a6 <__ieee754_pow+0x3e>
 801656c:	2300      	movs	r3, #0
 801656e:	9304      	str	r3, [sp, #16]
 8016570:	2a00      	cmp	r2, #0
 8016572:	d13d      	bne.n	80165f0 <__ieee754_pow+0x188>
 8016574:	4b51      	ldr	r3, [pc, #324]	; (80166bc <__ieee754_pow+0x254>)
 8016576:	4598      	cmp	r8, r3
 8016578:	d1ea      	bne.n	8016550 <__ieee754_pow+0xe8>
 801657a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801657e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016582:	ea53 030a 	orrs.w	r3, r3, sl
 8016586:	f000 8459 	beq.w	8016e3c <__ieee754_pow+0x9d4>
 801658a:	4b4f      	ldr	r3, [pc, #316]	; (80166c8 <__ieee754_pow+0x260>)
 801658c:	429c      	cmp	r4, r3
 801658e:	dd08      	ble.n	80165a2 <__ieee754_pow+0x13a>
 8016590:	f1b9 0f00 	cmp.w	r9, #0
 8016594:	f2c0 8456 	blt.w	8016e44 <__ieee754_pow+0x9dc>
 8016598:	e9dd 0100 	ldrd	r0, r1, [sp]
 801659c:	e783      	b.n	80164a6 <__ieee754_pow+0x3e>
 801659e:	2302      	movs	r3, #2
 80165a0:	e7e5      	b.n	801656e <__ieee754_pow+0x106>
 80165a2:	f1b9 0f00 	cmp.w	r9, #0
 80165a6:	f04f 0000 	mov.w	r0, #0
 80165aa:	f04f 0100 	mov.w	r1, #0
 80165ae:	f6bf af7a 	bge.w	80164a6 <__ieee754_pow+0x3e>
 80165b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80165b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80165ba:	e774      	b.n	80164a6 <__ieee754_pow+0x3e>
 80165bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80165c0:	d106      	bne.n	80165d0 <__ieee754_pow+0x168>
 80165c2:	4632      	mov	r2, r6
 80165c4:	463b      	mov	r3, r7
 80165c6:	4630      	mov	r0, r6
 80165c8:	4639      	mov	r1, r7
 80165ca:	f7ea f815 	bl	80005f8 <__aeabi_dmul>
 80165ce:	e76a      	b.n	80164a6 <__ieee754_pow+0x3e>
 80165d0:	4b3e      	ldr	r3, [pc, #248]	; (80166cc <__ieee754_pow+0x264>)
 80165d2:	4599      	cmp	r9, r3
 80165d4:	d10c      	bne.n	80165f0 <__ieee754_pow+0x188>
 80165d6:	2d00      	cmp	r5, #0
 80165d8:	db0a      	blt.n	80165f0 <__ieee754_pow+0x188>
 80165da:	ec47 6b10 	vmov	d0, r6, r7
 80165de:	b009      	add	sp, #36	; 0x24
 80165e0:	ecbd 8b06 	vpop	{d8-d10}
 80165e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165e8:	f000 bd20 	b.w	801702c <__ieee754_sqrt>
 80165ec:	2300      	movs	r3, #0
 80165ee:	9304      	str	r3, [sp, #16]
 80165f0:	ec47 6b10 	vmov	d0, r6, r7
 80165f4:	f000 fc62 	bl	8016ebc <fabs>
 80165f8:	ec51 0b10 	vmov	r0, r1, d0
 80165fc:	f1ba 0f00 	cmp.w	sl, #0
 8016600:	d129      	bne.n	8016656 <__ieee754_pow+0x1ee>
 8016602:	b124      	cbz	r4, 801660e <__ieee754_pow+0x1a6>
 8016604:	4b2f      	ldr	r3, [pc, #188]	; (80166c4 <__ieee754_pow+0x25c>)
 8016606:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801660a:	429a      	cmp	r2, r3
 801660c:	d123      	bne.n	8016656 <__ieee754_pow+0x1ee>
 801660e:	f1b9 0f00 	cmp.w	r9, #0
 8016612:	da05      	bge.n	8016620 <__ieee754_pow+0x1b8>
 8016614:	4602      	mov	r2, r0
 8016616:	460b      	mov	r3, r1
 8016618:	2000      	movs	r0, #0
 801661a:	492a      	ldr	r1, [pc, #168]	; (80166c4 <__ieee754_pow+0x25c>)
 801661c:	f7ea f916 	bl	800084c <__aeabi_ddiv>
 8016620:	2d00      	cmp	r5, #0
 8016622:	f6bf af40 	bge.w	80164a6 <__ieee754_pow+0x3e>
 8016626:	9b04      	ldr	r3, [sp, #16]
 8016628:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801662c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016630:	431c      	orrs	r4, r3
 8016632:	d108      	bne.n	8016646 <__ieee754_pow+0x1de>
 8016634:	4602      	mov	r2, r0
 8016636:	460b      	mov	r3, r1
 8016638:	4610      	mov	r0, r2
 801663a:	4619      	mov	r1, r3
 801663c:	f7e9 fe24 	bl	8000288 <__aeabi_dsub>
 8016640:	4602      	mov	r2, r0
 8016642:	460b      	mov	r3, r1
 8016644:	e78f      	b.n	8016566 <__ieee754_pow+0xfe>
 8016646:	9b04      	ldr	r3, [sp, #16]
 8016648:	2b01      	cmp	r3, #1
 801664a:	f47f af2c 	bne.w	80164a6 <__ieee754_pow+0x3e>
 801664e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016652:	4619      	mov	r1, r3
 8016654:	e727      	b.n	80164a6 <__ieee754_pow+0x3e>
 8016656:	0feb      	lsrs	r3, r5, #31
 8016658:	3b01      	subs	r3, #1
 801665a:	9306      	str	r3, [sp, #24]
 801665c:	9a06      	ldr	r2, [sp, #24]
 801665e:	9b04      	ldr	r3, [sp, #16]
 8016660:	4313      	orrs	r3, r2
 8016662:	d102      	bne.n	801666a <__ieee754_pow+0x202>
 8016664:	4632      	mov	r2, r6
 8016666:	463b      	mov	r3, r7
 8016668:	e7e6      	b.n	8016638 <__ieee754_pow+0x1d0>
 801666a:	4b19      	ldr	r3, [pc, #100]	; (80166d0 <__ieee754_pow+0x268>)
 801666c:	4598      	cmp	r8, r3
 801666e:	f340 80fb 	ble.w	8016868 <__ieee754_pow+0x400>
 8016672:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016676:	4598      	cmp	r8, r3
 8016678:	4b13      	ldr	r3, [pc, #76]	; (80166c8 <__ieee754_pow+0x260>)
 801667a:	dd0c      	ble.n	8016696 <__ieee754_pow+0x22e>
 801667c:	429c      	cmp	r4, r3
 801667e:	dc0f      	bgt.n	80166a0 <__ieee754_pow+0x238>
 8016680:	f1b9 0f00 	cmp.w	r9, #0
 8016684:	da0f      	bge.n	80166a6 <__ieee754_pow+0x23e>
 8016686:	2000      	movs	r0, #0
 8016688:	b009      	add	sp, #36	; 0x24
 801668a:	ecbd 8b06 	vpop	{d8-d10}
 801668e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016692:	f000 bcc2 	b.w	801701a <__math_oflow>
 8016696:	429c      	cmp	r4, r3
 8016698:	dbf2      	blt.n	8016680 <__ieee754_pow+0x218>
 801669a:	4b0a      	ldr	r3, [pc, #40]	; (80166c4 <__ieee754_pow+0x25c>)
 801669c:	429c      	cmp	r4, r3
 801669e:	dd19      	ble.n	80166d4 <__ieee754_pow+0x26c>
 80166a0:	f1b9 0f00 	cmp.w	r9, #0
 80166a4:	dcef      	bgt.n	8016686 <__ieee754_pow+0x21e>
 80166a6:	2000      	movs	r0, #0
 80166a8:	b009      	add	sp, #36	; 0x24
 80166aa:	ecbd 8b06 	vpop	{d8-d10}
 80166ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166b2:	f000 bca9 	b.w	8017008 <__math_uflow>
 80166b6:	bf00      	nop
 80166b8:	fff00000 	.word	0xfff00000
 80166bc:	7ff00000 	.word	0x7ff00000
 80166c0:	433fffff 	.word	0x433fffff
 80166c4:	3ff00000 	.word	0x3ff00000
 80166c8:	3fefffff 	.word	0x3fefffff
 80166cc:	3fe00000 	.word	0x3fe00000
 80166d0:	41e00000 	.word	0x41e00000
 80166d4:	4b60      	ldr	r3, [pc, #384]	; (8016858 <__ieee754_pow+0x3f0>)
 80166d6:	2200      	movs	r2, #0
 80166d8:	f7e9 fdd6 	bl	8000288 <__aeabi_dsub>
 80166dc:	a354      	add	r3, pc, #336	; (adr r3, 8016830 <__ieee754_pow+0x3c8>)
 80166de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e2:	4604      	mov	r4, r0
 80166e4:	460d      	mov	r5, r1
 80166e6:	f7e9 ff87 	bl	80005f8 <__aeabi_dmul>
 80166ea:	a353      	add	r3, pc, #332	; (adr r3, 8016838 <__ieee754_pow+0x3d0>)
 80166ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166f0:	4606      	mov	r6, r0
 80166f2:	460f      	mov	r7, r1
 80166f4:	4620      	mov	r0, r4
 80166f6:	4629      	mov	r1, r5
 80166f8:	f7e9 ff7e 	bl	80005f8 <__aeabi_dmul>
 80166fc:	4b57      	ldr	r3, [pc, #348]	; (801685c <__ieee754_pow+0x3f4>)
 80166fe:	4682      	mov	sl, r0
 8016700:	468b      	mov	fp, r1
 8016702:	2200      	movs	r2, #0
 8016704:	4620      	mov	r0, r4
 8016706:	4629      	mov	r1, r5
 8016708:	f7e9 ff76 	bl	80005f8 <__aeabi_dmul>
 801670c:	4602      	mov	r2, r0
 801670e:	460b      	mov	r3, r1
 8016710:	a14b      	add	r1, pc, #300	; (adr r1, 8016840 <__ieee754_pow+0x3d8>)
 8016712:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016716:	f7e9 fdb7 	bl	8000288 <__aeabi_dsub>
 801671a:	4622      	mov	r2, r4
 801671c:	462b      	mov	r3, r5
 801671e:	f7e9 ff6b 	bl	80005f8 <__aeabi_dmul>
 8016722:	4602      	mov	r2, r0
 8016724:	460b      	mov	r3, r1
 8016726:	2000      	movs	r0, #0
 8016728:	494d      	ldr	r1, [pc, #308]	; (8016860 <__ieee754_pow+0x3f8>)
 801672a:	f7e9 fdad 	bl	8000288 <__aeabi_dsub>
 801672e:	4622      	mov	r2, r4
 8016730:	4680      	mov	r8, r0
 8016732:	4689      	mov	r9, r1
 8016734:	462b      	mov	r3, r5
 8016736:	4620      	mov	r0, r4
 8016738:	4629      	mov	r1, r5
 801673a:	f7e9 ff5d 	bl	80005f8 <__aeabi_dmul>
 801673e:	4602      	mov	r2, r0
 8016740:	460b      	mov	r3, r1
 8016742:	4640      	mov	r0, r8
 8016744:	4649      	mov	r1, r9
 8016746:	f7e9 ff57 	bl	80005f8 <__aeabi_dmul>
 801674a:	a33f      	add	r3, pc, #252	; (adr r3, 8016848 <__ieee754_pow+0x3e0>)
 801674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016750:	f7e9 ff52 	bl	80005f8 <__aeabi_dmul>
 8016754:	4602      	mov	r2, r0
 8016756:	460b      	mov	r3, r1
 8016758:	4650      	mov	r0, sl
 801675a:	4659      	mov	r1, fp
 801675c:	f7e9 fd94 	bl	8000288 <__aeabi_dsub>
 8016760:	4602      	mov	r2, r0
 8016762:	460b      	mov	r3, r1
 8016764:	4680      	mov	r8, r0
 8016766:	4689      	mov	r9, r1
 8016768:	4630      	mov	r0, r6
 801676a:	4639      	mov	r1, r7
 801676c:	f7e9 fd8e 	bl	800028c <__adddf3>
 8016770:	2000      	movs	r0, #0
 8016772:	4632      	mov	r2, r6
 8016774:	463b      	mov	r3, r7
 8016776:	4604      	mov	r4, r0
 8016778:	460d      	mov	r5, r1
 801677a:	f7e9 fd85 	bl	8000288 <__aeabi_dsub>
 801677e:	4602      	mov	r2, r0
 8016780:	460b      	mov	r3, r1
 8016782:	4640      	mov	r0, r8
 8016784:	4649      	mov	r1, r9
 8016786:	f7e9 fd7f 	bl	8000288 <__aeabi_dsub>
 801678a:	9b04      	ldr	r3, [sp, #16]
 801678c:	9a06      	ldr	r2, [sp, #24]
 801678e:	3b01      	subs	r3, #1
 8016790:	4313      	orrs	r3, r2
 8016792:	4682      	mov	sl, r0
 8016794:	468b      	mov	fp, r1
 8016796:	f040 81e7 	bne.w	8016b68 <__ieee754_pow+0x700>
 801679a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016850 <__ieee754_pow+0x3e8>
 801679e:	eeb0 8a47 	vmov.f32	s16, s14
 80167a2:	eef0 8a67 	vmov.f32	s17, s15
 80167a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80167aa:	2600      	movs	r6, #0
 80167ac:	4632      	mov	r2, r6
 80167ae:	463b      	mov	r3, r7
 80167b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167b4:	f7e9 fd68 	bl	8000288 <__aeabi_dsub>
 80167b8:	4622      	mov	r2, r4
 80167ba:	462b      	mov	r3, r5
 80167bc:	f7e9 ff1c 	bl	80005f8 <__aeabi_dmul>
 80167c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167c4:	4680      	mov	r8, r0
 80167c6:	4689      	mov	r9, r1
 80167c8:	4650      	mov	r0, sl
 80167ca:	4659      	mov	r1, fp
 80167cc:	f7e9 ff14 	bl	80005f8 <__aeabi_dmul>
 80167d0:	4602      	mov	r2, r0
 80167d2:	460b      	mov	r3, r1
 80167d4:	4640      	mov	r0, r8
 80167d6:	4649      	mov	r1, r9
 80167d8:	f7e9 fd58 	bl	800028c <__adddf3>
 80167dc:	4632      	mov	r2, r6
 80167de:	463b      	mov	r3, r7
 80167e0:	4680      	mov	r8, r0
 80167e2:	4689      	mov	r9, r1
 80167e4:	4620      	mov	r0, r4
 80167e6:	4629      	mov	r1, r5
 80167e8:	f7e9 ff06 	bl	80005f8 <__aeabi_dmul>
 80167ec:	460b      	mov	r3, r1
 80167ee:	4604      	mov	r4, r0
 80167f0:	460d      	mov	r5, r1
 80167f2:	4602      	mov	r2, r0
 80167f4:	4649      	mov	r1, r9
 80167f6:	4640      	mov	r0, r8
 80167f8:	f7e9 fd48 	bl	800028c <__adddf3>
 80167fc:	4b19      	ldr	r3, [pc, #100]	; (8016864 <__ieee754_pow+0x3fc>)
 80167fe:	4299      	cmp	r1, r3
 8016800:	ec45 4b19 	vmov	d9, r4, r5
 8016804:	4606      	mov	r6, r0
 8016806:	460f      	mov	r7, r1
 8016808:	468b      	mov	fp, r1
 801680a:	f340 82f0 	ble.w	8016dee <__ieee754_pow+0x986>
 801680e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016812:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016816:	4303      	orrs	r3, r0
 8016818:	f000 81e4 	beq.w	8016be4 <__ieee754_pow+0x77c>
 801681c:	ec51 0b18 	vmov	r0, r1, d8
 8016820:	2200      	movs	r2, #0
 8016822:	2300      	movs	r3, #0
 8016824:	f7ea f95a 	bl	8000adc <__aeabi_dcmplt>
 8016828:	3800      	subs	r0, #0
 801682a:	bf18      	it	ne
 801682c:	2001      	movne	r0, #1
 801682e:	e72b      	b.n	8016688 <__ieee754_pow+0x220>
 8016830:	60000000 	.word	0x60000000
 8016834:	3ff71547 	.word	0x3ff71547
 8016838:	f85ddf44 	.word	0xf85ddf44
 801683c:	3e54ae0b 	.word	0x3e54ae0b
 8016840:	55555555 	.word	0x55555555
 8016844:	3fd55555 	.word	0x3fd55555
 8016848:	652b82fe 	.word	0x652b82fe
 801684c:	3ff71547 	.word	0x3ff71547
 8016850:	00000000 	.word	0x00000000
 8016854:	bff00000 	.word	0xbff00000
 8016858:	3ff00000 	.word	0x3ff00000
 801685c:	3fd00000 	.word	0x3fd00000
 8016860:	3fe00000 	.word	0x3fe00000
 8016864:	408fffff 	.word	0x408fffff
 8016868:	4bd5      	ldr	r3, [pc, #852]	; (8016bc0 <__ieee754_pow+0x758>)
 801686a:	402b      	ands	r3, r5
 801686c:	2200      	movs	r2, #0
 801686e:	b92b      	cbnz	r3, 801687c <__ieee754_pow+0x414>
 8016870:	4bd4      	ldr	r3, [pc, #848]	; (8016bc4 <__ieee754_pow+0x75c>)
 8016872:	f7e9 fec1 	bl	80005f8 <__aeabi_dmul>
 8016876:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801687a:	460c      	mov	r4, r1
 801687c:	1523      	asrs	r3, r4, #20
 801687e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016882:	4413      	add	r3, r2
 8016884:	9305      	str	r3, [sp, #20]
 8016886:	4bd0      	ldr	r3, [pc, #832]	; (8016bc8 <__ieee754_pow+0x760>)
 8016888:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801688c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016890:	429c      	cmp	r4, r3
 8016892:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016896:	dd08      	ble.n	80168aa <__ieee754_pow+0x442>
 8016898:	4bcc      	ldr	r3, [pc, #816]	; (8016bcc <__ieee754_pow+0x764>)
 801689a:	429c      	cmp	r4, r3
 801689c:	f340 8162 	ble.w	8016b64 <__ieee754_pow+0x6fc>
 80168a0:	9b05      	ldr	r3, [sp, #20]
 80168a2:	3301      	adds	r3, #1
 80168a4:	9305      	str	r3, [sp, #20]
 80168a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80168aa:	2400      	movs	r4, #0
 80168ac:	00e3      	lsls	r3, r4, #3
 80168ae:	9307      	str	r3, [sp, #28]
 80168b0:	4bc7      	ldr	r3, [pc, #796]	; (8016bd0 <__ieee754_pow+0x768>)
 80168b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80168b6:	ed93 7b00 	vldr	d7, [r3]
 80168ba:	4629      	mov	r1, r5
 80168bc:	ec53 2b17 	vmov	r2, r3, d7
 80168c0:	eeb0 9a47 	vmov.f32	s18, s14
 80168c4:	eef0 9a67 	vmov.f32	s19, s15
 80168c8:	4682      	mov	sl, r0
 80168ca:	f7e9 fcdd 	bl	8000288 <__aeabi_dsub>
 80168ce:	4652      	mov	r2, sl
 80168d0:	4606      	mov	r6, r0
 80168d2:	460f      	mov	r7, r1
 80168d4:	462b      	mov	r3, r5
 80168d6:	ec51 0b19 	vmov	r0, r1, d9
 80168da:	f7e9 fcd7 	bl	800028c <__adddf3>
 80168de:	4602      	mov	r2, r0
 80168e0:	460b      	mov	r3, r1
 80168e2:	2000      	movs	r0, #0
 80168e4:	49bb      	ldr	r1, [pc, #748]	; (8016bd4 <__ieee754_pow+0x76c>)
 80168e6:	f7e9 ffb1 	bl	800084c <__aeabi_ddiv>
 80168ea:	ec41 0b1a 	vmov	d10, r0, r1
 80168ee:	4602      	mov	r2, r0
 80168f0:	460b      	mov	r3, r1
 80168f2:	4630      	mov	r0, r6
 80168f4:	4639      	mov	r1, r7
 80168f6:	f7e9 fe7f 	bl	80005f8 <__aeabi_dmul>
 80168fa:	2300      	movs	r3, #0
 80168fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016900:	9302      	str	r3, [sp, #8]
 8016902:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016906:	46ab      	mov	fp, r5
 8016908:	106d      	asrs	r5, r5, #1
 801690a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801690e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016912:	ec41 0b18 	vmov	d8, r0, r1
 8016916:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801691a:	2200      	movs	r2, #0
 801691c:	4640      	mov	r0, r8
 801691e:	4649      	mov	r1, r9
 8016920:	4614      	mov	r4, r2
 8016922:	461d      	mov	r5, r3
 8016924:	f7e9 fe68 	bl	80005f8 <__aeabi_dmul>
 8016928:	4602      	mov	r2, r0
 801692a:	460b      	mov	r3, r1
 801692c:	4630      	mov	r0, r6
 801692e:	4639      	mov	r1, r7
 8016930:	f7e9 fcaa 	bl	8000288 <__aeabi_dsub>
 8016934:	ec53 2b19 	vmov	r2, r3, d9
 8016938:	4606      	mov	r6, r0
 801693a:	460f      	mov	r7, r1
 801693c:	4620      	mov	r0, r4
 801693e:	4629      	mov	r1, r5
 8016940:	f7e9 fca2 	bl	8000288 <__aeabi_dsub>
 8016944:	4602      	mov	r2, r0
 8016946:	460b      	mov	r3, r1
 8016948:	4650      	mov	r0, sl
 801694a:	4659      	mov	r1, fp
 801694c:	f7e9 fc9c 	bl	8000288 <__aeabi_dsub>
 8016950:	4642      	mov	r2, r8
 8016952:	464b      	mov	r3, r9
 8016954:	f7e9 fe50 	bl	80005f8 <__aeabi_dmul>
 8016958:	4602      	mov	r2, r0
 801695a:	460b      	mov	r3, r1
 801695c:	4630      	mov	r0, r6
 801695e:	4639      	mov	r1, r7
 8016960:	f7e9 fc92 	bl	8000288 <__aeabi_dsub>
 8016964:	ec53 2b1a 	vmov	r2, r3, d10
 8016968:	f7e9 fe46 	bl	80005f8 <__aeabi_dmul>
 801696c:	ec53 2b18 	vmov	r2, r3, d8
 8016970:	ec41 0b19 	vmov	d9, r0, r1
 8016974:	ec51 0b18 	vmov	r0, r1, d8
 8016978:	f7e9 fe3e 	bl	80005f8 <__aeabi_dmul>
 801697c:	a37c      	add	r3, pc, #496	; (adr r3, 8016b70 <__ieee754_pow+0x708>)
 801697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016982:	4604      	mov	r4, r0
 8016984:	460d      	mov	r5, r1
 8016986:	f7e9 fe37 	bl	80005f8 <__aeabi_dmul>
 801698a:	a37b      	add	r3, pc, #492	; (adr r3, 8016b78 <__ieee754_pow+0x710>)
 801698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016990:	f7e9 fc7c 	bl	800028c <__adddf3>
 8016994:	4622      	mov	r2, r4
 8016996:	462b      	mov	r3, r5
 8016998:	f7e9 fe2e 	bl	80005f8 <__aeabi_dmul>
 801699c:	a378      	add	r3, pc, #480	; (adr r3, 8016b80 <__ieee754_pow+0x718>)
 801699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a2:	f7e9 fc73 	bl	800028c <__adddf3>
 80169a6:	4622      	mov	r2, r4
 80169a8:	462b      	mov	r3, r5
 80169aa:	f7e9 fe25 	bl	80005f8 <__aeabi_dmul>
 80169ae:	a376      	add	r3, pc, #472	; (adr r3, 8016b88 <__ieee754_pow+0x720>)
 80169b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b4:	f7e9 fc6a 	bl	800028c <__adddf3>
 80169b8:	4622      	mov	r2, r4
 80169ba:	462b      	mov	r3, r5
 80169bc:	f7e9 fe1c 	bl	80005f8 <__aeabi_dmul>
 80169c0:	a373      	add	r3, pc, #460	; (adr r3, 8016b90 <__ieee754_pow+0x728>)
 80169c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c6:	f7e9 fc61 	bl	800028c <__adddf3>
 80169ca:	4622      	mov	r2, r4
 80169cc:	462b      	mov	r3, r5
 80169ce:	f7e9 fe13 	bl	80005f8 <__aeabi_dmul>
 80169d2:	a371      	add	r3, pc, #452	; (adr r3, 8016b98 <__ieee754_pow+0x730>)
 80169d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d8:	f7e9 fc58 	bl	800028c <__adddf3>
 80169dc:	4622      	mov	r2, r4
 80169de:	4606      	mov	r6, r0
 80169e0:	460f      	mov	r7, r1
 80169e2:	462b      	mov	r3, r5
 80169e4:	4620      	mov	r0, r4
 80169e6:	4629      	mov	r1, r5
 80169e8:	f7e9 fe06 	bl	80005f8 <__aeabi_dmul>
 80169ec:	4602      	mov	r2, r0
 80169ee:	460b      	mov	r3, r1
 80169f0:	4630      	mov	r0, r6
 80169f2:	4639      	mov	r1, r7
 80169f4:	f7e9 fe00 	bl	80005f8 <__aeabi_dmul>
 80169f8:	4642      	mov	r2, r8
 80169fa:	4604      	mov	r4, r0
 80169fc:	460d      	mov	r5, r1
 80169fe:	464b      	mov	r3, r9
 8016a00:	ec51 0b18 	vmov	r0, r1, d8
 8016a04:	f7e9 fc42 	bl	800028c <__adddf3>
 8016a08:	ec53 2b19 	vmov	r2, r3, d9
 8016a0c:	f7e9 fdf4 	bl	80005f8 <__aeabi_dmul>
 8016a10:	4622      	mov	r2, r4
 8016a12:	462b      	mov	r3, r5
 8016a14:	f7e9 fc3a 	bl	800028c <__adddf3>
 8016a18:	4642      	mov	r2, r8
 8016a1a:	4682      	mov	sl, r0
 8016a1c:	468b      	mov	fp, r1
 8016a1e:	464b      	mov	r3, r9
 8016a20:	4640      	mov	r0, r8
 8016a22:	4649      	mov	r1, r9
 8016a24:	f7e9 fde8 	bl	80005f8 <__aeabi_dmul>
 8016a28:	4b6b      	ldr	r3, [pc, #428]	; (8016bd8 <__ieee754_pow+0x770>)
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	4606      	mov	r6, r0
 8016a2e:	460f      	mov	r7, r1
 8016a30:	f7e9 fc2c 	bl	800028c <__adddf3>
 8016a34:	4652      	mov	r2, sl
 8016a36:	465b      	mov	r3, fp
 8016a38:	f7e9 fc28 	bl	800028c <__adddf3>
 8016a3c:	2000      	movs	r0, #0
 8016a3e:	4604      	mov	r4, r0
 8016a40:	460d      	mov	r5, r1
 8016a42:	4602      	mov	r2, r0
 8016a44:	460b      	mov	r3, r1
 8016a46:	4640      	mov	r0, r8
 8016a48:	4649      	mov	r1, r9
 8016a4a:	f7e9 fdd5 	bl	80005f8 <__aeabi_dmul>
 8016a4e:	4b62      	ldr	r3, [pc, #392]	; (8016bd8 <__ieee754_pow+0x770>)
 8016a50:	4680      	mov	r8, r0
 8016a52:	4689      	mov	r9, r1
 8016a54:	2200      	movs	r2, #0
 8016a56:	4620      	mov	r0, r4
 8016a58:	4629      	mov	r1, r5
 8016a5a:	f7e9 fc15 	bl	8000288 <__aeabi_dsub>
 8016a5e:	4632      	mov	r2, r6
 8016a60:	463b      	mov	r3, r7
 8016a62:	f7e9 fc11 	bl	8000288 <__aeabi_dsub>
 8016a66:	4602      	mov	r2, r0
 8016a68:	460b      	mov	r3, r1
 8016a6a:	4650      	mov	r0, sl
 8016a6c:	4659      	mov	r1, fp
 8016a6e:	f7e9 fc0b 	bl	8000288 <__aeabi_dsub>
 8016a72:	ec53 2b18 	vmov	r2, r3, d8
 8016a76:	f7e9 fdbf 	bl	80005f8 <__aeabi_dmul>
 8016a7a:	4622      	mov	r2, r4
 8016a7c:	4606      	mov	r6, r0
 8016a7e:	460f      	mov	r7, r1
 8016a80:	462b      	mov	r3, r5
 8016a82:	ec51 0b19 	vmov	r0, r1, d9
 8016a86:	f7e9 fdb7 	bl	80005f8 <__aeabi_dmul>
 8016a8a:	4602      	mov	r2, r0
 8016a8c:	460b      	mov	r3, r1
 8016a8e:	4630      	mov	r0, r6
 8016a90:	4639      	mov	r1, r7
 8016a92:	f7e9 fbfb 	bl	800028c <__adddf3>
 8016a96:	4606      	mov	r6, r0
 8016a98:	460f      	mov	r7, r1
 8016a9a:	4602      	mov	r2, r0
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	4640      	mov	r0, r8
 8016aa0:	4649      	mov	r1, r9
 8016aa2:	f7e9 fbf3 	bl	800028c <__adddf3>
 8016aa6:	a33e      	add	r3, pc, #248	; (adr r3, 8016ba0 <__ieee754_pow+0x738>)
 8016aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aac:	2000      	movs	r0, #0
 8016aae:	4604      	mov	r4, r0
 8016ab0:	460d      	mov	r5, r1
 8016ab2:	f7e9 fda1 	bl	80005f8 <__aeabi_dmul>
 8016ab6:	4642      	mov	r2, r8
 8016ab8:	ec41 0b18 	vmov	d8, r0, r1
 8016abc:	464b      	mov	r3, r9
 8016abe:	4620      	mov	r0, r4
 8016ac0:	4629      	mov	r1, r5
 8016ac2:	f7e9 fbe1 	bl	8000288 <__aeabi_dsub>
 8016ac6:	4602      	mov	r2, r0
 8016ac8:	460b      	mov	r3, r1
 8016aca:	4630      	mov	r0, r6
 8016acc:	4639      	mov	r1, r7
 8016ace:	f7e9 fbdb 	bl	8000288 <__aeabi_dsub>
 8016ad2:	a335      	add	r3, pc, #212	; (adr r3, 8016ba8 <__ieee754_pow+0x740>)
 8016ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad8:	f7e9 fd8e 	bl	80005f8 <__aeabi_dmul>
 8016adc:	a334      	add	r3, pc, #208	; (adr r3, 8016bb0 <__ieee754_pow+0x748>)
 8016ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae2:	4606      	mov	r6, r0
 8016ae4:	460f      	mov	r7, r1
 8016ae6:	4620      	mov	r0, r4
 8016ae8:	4629      	mov	r1, r5
 8016aea:	f7e9 fd85 	bl	80005f8 <__aeabi_dmul>
 8016aee:	4602      	mov	r2, r0
 8016af0:	460b      	mov	r3, r1
 8016af2:	4630      	mov	r0, r6
 8016af4:	4639      	mov	r1, r7
 8016af6:	f7e9 fbc9 	bl	800028c <__adddf3>
 8016afa:	9a07      	ldr	r2, [sp, #28]
 8016afc:	4b37      	ldr	r3, [pc, #220]	; (8016bdc <__ieee754_pow+0x774>)
 8016afe:	4413      	add	r3, r2
 8016b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b04:	f7e9 fbc2 	bl	800028c <__adddf3>
 8016b08:	4682      	mov	sl, r0
 8016b0a:	9805      	ldr	r0, [sp, #20]
 8016b0c:	468b      	mov	fp, r1
 8016b0e:	f7e9 fd09 	bl	8000524 <__aeabi_i2d>
 8016b12:	9a07      	ldr	r2, [sp, #28]
 8016b14:	4b32      	ldr	r3, [pc, #200]	; (8016be0 <__ieee754_pow+0x778>)
 8016b16:	4413      	add	r3, r2
 8016b18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016b1c:	4606      	mov	r6, r0
 8016b1e:	460f      	mov	r7, r1
 8016b20:	4652      	mov	r2, sl
 8016b22:	465b      	mov	r3, fp
 8016b24:	ec51 0b18 	vmov	r0, r1, d8
 8016b28:	f7e9 fbb0 	bl	800028c <__adddf3>
 8016b2c:	4642      	mov	r2, r8
 8016b2e:	464b      	mov	r3, r9
 8016b30:	f7e9 fbac 	bl	800028c <__adddf3>
 8016b34:	4632      	mov	r2, r6
 8016b36:	463b      	mov	r3, r7
 8016b38:	f7e9 fba8 	bl	800028c <__adddf3>
 8016b3c:	2000      	movs	r0, #0
 8016b3e:	4632      	mov	r2, r6
 8016b40:	463b      	mov	r3, r7
 8016b42:	4604      	mov	r4, r0
 8016b44:	460d      	mov	r5, r1
 8016b46:	f7e9 fb9f 	bl	8000288 <__aeabi_dsub>
 8016b4a:	4642      	mov	r2, r8
 8016b4c:	464b      	mov	r3, r9
 8016b4e:	f7e9 fb9b 	bl	8000288 <__aeabi_dsub>
 8016b52:	ec53 2b18 	vmov	r2, r3, d8
 8016b56:	f7e9 fb97 	bl	8000288 <__aeabi_dsub>
 8016b5a:	4602      	mov	r2, r0
 8016b5c:	460b      	mov	r3, r1
 8016b5e:	4650      	mov	r0, sl
 8016b60:	4659      	mov	r1, fp
 8016b62:	e610      	b.n	8016786 <__ieee754_pow+0x31e>
 8016b64:	2401      	movs	r4, #1
 8016b66:	e6a1      	b.n	80168ac <__ieee754_pow+0x444>
 8016b68:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8016bb8 <__ieee754_pow+0x750>
 8016b6c:	e617      	b.n	801679e <__ieee754_pow+0x336>
 8016b6e:	bf00      	nop
 8016b70:	4a454eef 	.word	0x4a454eef
 8016b74:	3fca7e28 	.word	0x3fca7e28
 8016b78:	93c9db65 	.word	0x93c9db65
 8016b7c:	3fcd864a 	.word	0x3fcd864a
 8016b80:	a91d4101 	.word	0xa91d4101
 8016b84:	3fd17460 	.word	0x3fd17460
 8016b88:	518f264d 	.word	0x518f264d
 8016b8c:	3fd55555 	.word	0x3fd55555
 8016b90:	db6fabff 	.word	0xdb6fabff
 8016b94:	3fdb6db6 	.word	0x3fdb6db6
 8016b98:	33333303 	.word	0x33333303
 8016b9c:	3fe33333 	.word	0x3fe33333
 8016ba0:	e0000000 	.word	0xe0000000
 8016ba4:	3feec709 	.word	0x3feec709
 8016ba8:	dc3a03fd 	.word	0xdc3a03fd
 8016bac:	3feec709 	.word	0x3feec709
 8016bb0:	145b01f5 	.word	0x145b01f5
 8016bb4:	be3e2fe0 	.word	0xbe3e2fe0
 8016bb8:	00000000 	.word	0x00000000
 8016bbc:	3ff00000 	.word	0x3ff00000
 8016bc0:	7ff00000 	.word	0x7ff00000
 8016bc4:	43400000 	.word	0x43400000
 8016bc8:	0003988e 	.word	0x0003988e
 8016bcc:	000bb679 	.word	0x000bb679
 8016bd0:	08037838 	.word	0x08037838
 8016bd4:	3ff00000 	.word	0x3ff00000
 8016bd8:	40080000 	.word	0x40080000
 8016bdc:	08037858 	.word	0x08037858
 8016be0:	08037848 	.word	0x08037848
 8016be4:	a3b3      	add	r3, pc, #716	; (adr r3, 8016eb4 <__ieee754_pow+0xa4c>)
 8016be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bea:	4640      	mov	r0, r8
 8016bec:	4649      	mov	r1, r9
 8016bee:	f7e9 fb4d 	bl	800028c <__adddf3>
 8016bf2:	4622      	mov	r2, r4
 8016bf4:	ec41 0b1a 	vmov	d10, r0, r1
 8016bf8:	462b      	mov	r3, r5
 8016bfa:	4630      	mov	r0, r6
 8016bfc:	4639      	mov	r1, r7
 8016bfe:	f7e9 fb43 	bl	8000288 <__aeabi_dsub>
 8016c02:	4602      	mov	r2, r0
 8016c04:	460b      	mov	r3, r1
 8016c06:	ec51 0b1a 	vmov	r0, r1, d10
 8016c0a:	f7e9 ff85 	bl	8000b18 <__aeabi_dcmpgt>
 8016c0e:	2800      	cmp	r0, #0
 8016c10:	f47f ae04 	bne.w	801681c <__ieee754_pow+0x3b4>
 8016c14:	4aa2      	ldr	r2, [pc, #648]	; (8016ea0 <__ieee754_pow+0xa38>)
 8016c16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016c1a:	4293      	cmp	r3, r2
 8016c1c:	f340 8107 	ble.w	8016e2e <__ieee754_pow+0x9c6>
 8016c20:	151b      	asrs	r3, r3, #20
 8016c22:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016c26:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016c2a:	fa4a fa03 	asr.w	sl, sl, r3
 8016c2e:	44da      	add	sl, fp
 8016c30:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016c34:	489b      	ldr	r0, [pc, #620]	; (8016ea4 <__ieee754_pow+0xa3c>)
 8016c36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016c3a:	4108      	asrs	r0, r1
 8016c3c:	ea00 030a 	and.w	r3, r0, sl
 8016c40:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016c44:	f1c1 0114 	rsb	r1, r1, #20
 8016c48:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016c4c:	fa4a fa01 	asr.w	sl, sl, r1
 8016c50:	f1bb 0f00 	cmp.w	fp, #0
 8016c54:	f04f 0200 	mov.w	r2, #0
 8016c58:	4620      	mov	r0, r4
 8016c5a:	4629      	mov	r1, r5
 8016c5c:	bfb8      	it	lt
 8016c5e:	f1ca 0a00 	rsblt	sl, sl, #0
 8016c62:	f7e9 fb11 	bl	8000288 <__aeabi_dsub>
 8016c66:	ec41 0b19 	vmov	d9, r0, r1
 8016c6a:	4642      	mov	r2, r8
 8016c6c:	464b      	mov	r3, r9
 8016c6e:	ec51 0b19 	vmov	r0, r1, d9
 8016c72:	f7e9 fb0b 	bl	800028c <__adddf3>
 8016c76:	a37a      	add	r3, pc, #488	; (adr r3, 8016e60 <__ieee754_pow+0x9f8>)
 8016c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c7c:	2000      	movs	r0, #0
 8016c7e:	4604      	mov	r4, r0
 8016c80:	460d      	mov	r5, r1
 8016c82:	f7e9 fcb9 	bl	80005f8 <__aeabi_dmul>
 8016c86:	ec53 2b19 	vmov	r2, r3, d9
 8016c8a:	4606      	mov	r6, r0
 8016c8c:	460f      	mov	r7, r1
 8016c8e:	4620      	mov	r0, r4
 8016c90:	4629      	mov	r1, r5
 8016c92:	f7e9 faf9 	bl	8000288 <__aeabi_dsub>
 8016c96:	4602      	mov	r2, r0
 8016c98:	460b      	mov	r3, r1
 8016c9a:	4640      	mov	r0, r8
 8016c9c:	4649      	mov	r1, r9
 8016c9e:	f7e9 faf3 	bl	8000288 <__aeabi_dsub>
 8016ca2:	a371      	add	r3, pc, #452	; (adr r3, 8016e68 <__ieee754_pow+0xa00>)
 8016ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ca8:	f7e9 fca6 	bl	80005f8 <__aeabi_dmul>
 8016cac:	a370      	add	r3, pc, #448	; (adr r3, 8016e70 <__ieee754_pow+0xa08>)
 8016cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cb2:	4680      	mov	r8, r0
 8016cb4:	4689      	mov	r9, r1
 8016cb6:	4620      	mov	r0, r4
 8016cb8:	4629      	mov	r1, r5
 8016cba:	f7e9 fc9d 	bl	80005f8 <__aeabi_dmul>
 8016cbe:	4602      	mov	r2, r0
 8016cc0:	460b      	mov	r3, r1
 8016cc2:	4640      	mov	r0, r8
 8016cc4:	4649      	mov	r1, r9
 8016cc6:	f7e9 fae1 	bl	800028c <__adddf3>
 8016cca:	4604      	mov	r4, r0
 8016ccc:	460d      	mov	r5, r1
 8016cce:	4602      	mov	r2, r0
 8016cd0:	460b      	mov	r3, r1
 8016cd2:	4630      	mov	r0, r6
 8016cd4:	4639      	mov	r1, r7
 8016cd6:	f7e9 fad9 	bl	800028c <__adddf3>
 8016cda:	4632      	mov	r2, r6
 8016cdc:	463b      	mov	r3, r7
 8016cde:	4680      	mov	r8, r0
 8016ce0:	4689      	mov	r9, r1
 8016ce2:	f7e9 fad1 	bl	8000288 <__aeabi_dsub>
 8016ce6:	4602      	mov	r2, r0
 8016ce8:	460b      	mov	r3, r1
 8016cea:	4620      	mov	r0, r4
 8016cec:	4629      	mov	r1, r5
 8016cee:	f7e9 facb 	bl	8000288 <__aeabi_dsub>
 8016cf2:	4642      	mov	r2, r8
 8016cf4:	4606      	mov	r6, r0
 8016cf6:	460f      	mov	r7, r1
 8016cf8:	464b      	mov	r3, r9
 8016cfa:	4640      	mov	r0, r8
 8016cfc:	4649      	mov	r1, r9
 8016cfe:	f7e9 fc7b 	bl	80005f8 <__aeabi_dmul>
 8016d02:	a35d      	add	r3, pc, #372	; (adr r3, 8016e78 <__ieee754_pow+0xa10>)
 8016d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d08:	4604      	mov	r4, r0
 8016d0a:	460d      	mov	r5, r1
 8016d0c:	f7e9 fc74 	bl	80005f8 <__aeabi_dmul>
 8016d10:	a35b      	add	r3, pc, #364	; (adr r3, 8016e80 <__ieee754_pow+0xa18>)
 8016d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d16:	f7e9 fab7 	bl	8000288 <__aeabi_dsub>
 8016d1a:	4622      	mov	r2, r4
 8016d1c:	462b      	mov	r3, r5
 8016d1e:	f7e9 fc6b 	bl	80005f8 <__aeabi_dmul>
 8016d22:	a359      	add	r3, pc, #356	; (adr r3, 8016e88 <__ieee754_pow+0xa20>)
 8016d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d28:	f7e9 fab0 	bl	800028c <__adddf3>
 8016d2c:	4622      	mov	r2, r4
 8016d2e:	462b      	mov	r3, r5
 8016d30:	f7e9 fc62 	bl	80005f8 <__aeabi_dmul>
 8016d34:	a356      	add	r3, pc, #344	; (adr r3, 8016e90 <__ieee754_pow+0xa28>)
 8016d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d3a:	f7e9 faa5 	bl	8000288 <__aeabi_dsub>
 8016d3e:	4622      	mov	r2, r4
 8016d40:	462b      	mov	r3, r5
 8016d42:	f7e9 fc59 	bl	80005f8 <__aeabi_dmul>
 8016d46:	a354      	add	r3, pc, #336	; (adr r3, 8016e98 <__ieee754_pow+0xa30>)
 8016d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d4c:	f7e9 fa9e 	bl	800028c <__adddf3>
 8016d50:	4622      	mov	r2, r4
 8016d52:	462b      	mov	r3, r5
 8016d54:	f7e9 fc50 	bl	80005f8 <__aeabi_dmul>
 8016d58:	4602      	mov	r2, r0
 8016d5a:	460b      	mov	r3, r1
 8016d5c:	4640      	mov	r0, r8
 8016d5e:	4649      	mov	r1, r9
 8016d60:	f7e9 fa92 	bl	8000288 <__aeabi_dsub>
 8016d64:	4604      	mov	r4, r0
 8016d66:	460d      	mov	r5, r1
 8016d68:	4602      	mov	r2, r0
 8016d6a:	460b      	mov	r3, r1
 8016d6c:	4640      	mov	r0, r8
 8016d6e:	4649      	mov	r1, r9
 8016d70:	f7e9 fc42 	bl	80005f8 <__aeabi_dmul>
 8016d74:	2200      	movs	r2, #0
 8016d76:	ec41 0b19 	vmov	d9, r0, r1
 8016d7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016d7e:	4620      	mov	r0, r4
 8016d80:	4629      	mov	r1, r5
 8016d82:	f7e9 fa81 	bl	8000288 <__aeabi_dsub>
 8016d86:	4602      	mov	r2, r0
 8016d88:	460b      	mov	r3, r1
 8016d8a:	ec51 0b19 	vmov	r0, r1, d9
 8016d8e:	f7e9 fd5d 	bl	800084c <__aeabi_ddiv>
 8016d92:	4632      	mov	r2, r6
 8016d94:	4604      	mov	r4, r0
 8016d96:	460d      	mov	r5, r1
 8016d98:	463b      	mov	r3, r7
 8016d9a:	4640      	mov	r0, r8
 8016d9c:	4649      	mov	r1, r9
 8016d9e:	f7e9 fc2b 	bl	80005f8 <__aeabi_dmul>
 8016da2:	4632      	mov	r2, r6
 8016da4:	463b      	mov	r3, r7
 8016da6:	f7e9 fa71 	bl	800028c <__adddf3>
 8016daa:	4602      	mov	r2, r0
 8016dac:	460b      	mov	r3, r1
 8016dae:	4620      	mov	r0, r4
 8016db0:	4629      	mov	r1, r5
 8016db2:	f7e9 fa69 	bl	8000288 <__aeabi_dsub>
 8016db6:	4642      	mov	r2, r8
 8016db8:	464b      	mov	r3, r9
 8016dba:	f7e9 fa65 	bl	8000288 <__aeabi_dsub>
 8016dbe:	460b      	mov	r3, r1
 8016dc0:	4602      	mov	r2, r0
 8016dc2:	4939      	ldr	r1, [pc, #228]	; (8016ea8 <__ieee754_pow+0xa40>)
 8016dc4:	2000      	movs	r0, #0
 8016dc6:	f7e9 fa5f 	bl	8000288 <__aeabi_dsub>
 8016dca:	ec41 0b10 	vmov	d0, r0, r1
 8016dce:	ee10 3a90 	vmov	r3, s1
 8016dd2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016dda:	da2b      	bge.n	8016e34 <__ieee754_pow+0x9cc>
 8016ddc:	4650      	mov	r0, sl
 8016dde:	f000 f877 	bl	8016ed0 <scalbn>
 8016de2:	ec51 0b10 	vmov	r0, r1, d0
 8016de6:	ec53 2b18 	vmov	r2, r3, d8
 8016dea:	f7ff bbee 	b.w	80165ca <__ieee754_pow+0x162>
 8016dee:	4b2f      	ldr	r3, [pc, #188]	; (8016eac <__ieee754_pow+0xa44>)
 8016df0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016df4:	429e      	cmp	r6, r3
 8016df6:	f77f af0d 	ble.w	8016c14 <__ieee754_pow+0x7ac>
 8016dfa:	4b2d      	ldr	r3, [pc, #180]	; (8016eb0 <__ieee754_pow+0xa48>)
 8016dfc:	440b      	add	r3, r1
 8016dfe:	4303      	orrs	r3, r0
 8016e00:	d009      	beq.n	8016e16 <__ieee754_pow+0x9ae>
 8016e02:	ec51 0b18 	vmov	r0, r1, d8
 8016e06:	2200      	movs	r2, #0
 8016e08:	2300      	movs	r3, #0
 8016e0a:	f7e9 fe67 	bl	8000adc <__aeabi_dcmplt>
 8016e0e:	3800      	subs	r0, #0
 8016e10:	bf18      	it	ne
 8016e12:	2001      	movne	r0, #1
 8016e14:	e448      	b.n	80166a8 <__ieee754_pow+0x240>
 8016e16:	4622      	mov	r2, r4
 8016e18:	462b      	mov	r3, r5
 8016e1a:	f7e9 fa35 	bl	8000288 <__aeabi_dsub>
 8016e1e:	4642      	mov	r2, r8
 8016e20:	464b      	mov	r3, r9
 8016e22:	f7e9 fe6f 	bl	8000b04 <__aeabi_dcmpge>
 8016e26:	2800      	cmp	r0, #0
 8016e28:	f43f aef4 	beq.w	8016c14 <__ieee754_pow+0x7ac>
 8016e2c:	e7e9      	b.n	8016e02 <__ieee754_pow+0x99a>
 8016e2e:	f04f 0a00 	mov.w	sl, #0
 8016e32:	e71a      	b.n	8016c6a <__ieee754_pow+0x802>
 8016e34:	ec51 0b10 	vmov	r0, r1, d0
 8016e38:	4619      	mov	r1, r3
 8016e3a:	e7d4      	b.n	8016de6 <__ieee754_pow+0x97e>
 8016e3c:	491a      	ldr	r1, [pc, #104]	; (8016ea8 <__ieee754_pow+0xa40>)
 8016e3e:	2000      	movs	r0, #0
 8016e40:	f7ff bb31 	b.w	80164a6 <__ieee754_pow+0x3e>
 8016e44:	2000      	movs	r0, #0
 8016e46:	2100      	movs	r1, #0
 8016e48:	f7ff bb2d 	b.w	80164a6 <__ieee754_pow+0x3e>
 8016e4c:	4630      	mov	r0, r6
 8016e4e:	4639      	mov	r1, r7
 8016e50:	f7ff bb29 	b.w	80164a6 <__ieee754_pow+0x3e>
 8016e54:	9204      	str	r2, [sp, #16]
 8016e56:	f7ff bb7b 	b.w	8016550 <__ieee754_pow+0xe8>
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	f7ff bb65 	b.w	801652a <__ieee754_pow+0xc2>
 8016e60:	00000000 	.word	0x00000000
 8016e64:	3fe62e43 	.word	0x3fe62e43
 8016e68:	fefa39ef 	.word	0xfefa39ef
 8016e6c:	3fe62e42 	.word	0x3fe62e42
 8016e70:	0ca86c39 	.word	0x0ca86c39
 8016e74:	be205c61 	.word	0xbe205c61
 8016e78:	72bea4d0 	.word	0x72bea4d0
 8016e7c:	3e663769 	.word	0x3e663769
 8016e80:	c5d26bf1 	.word	0xc5d26bf1
 8016e84:	3ebbbd41 	.word	0x3ebbbd41
 8016e88:	af25de2c 	.word	0xaf25de2c
 8016e8c:	3f11566a 	.word	0x3f11566a
 8016e90:	16bebd93 	.word	0x16bebd93
 8016e94:	3f66c16c 	.word	0x3f66c16c
 8016e98:	5555553e 	.word	0x5555553e
 8016e9c:	3fc55555 	.word	0x3fc55555
 8016ea0:	3fe00000 	.word	0x3fe00000
 8016ea4:	fff00000 	.word	0xfff00000
 8016ea8:	3ff00000 	.word	0x3ff00000
 8016eac:	4090cbff 	.word	0x4090cbff
 8016eb0:	3f6f3400 	.word	0x3f6f3400
 8016eb4:	652b82fe 	.word	0x652b82fe
 8016eb8:	3c971547 	.word	0x3c971547

08016ebc <fabs>:
 8016ebc:	ec51 0b10 	vmov	r0, r1, d0
 8016ec0:	ee10 2a10 	vmov	r2, s0
 8016ec4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016ec8:	ec43 2b10 	vmov	d0, r2, r3
 8016ecc:	4770      	bx	lr
	...

08016ed0 <scalbn>:
 8016ed0:	b570      	push	{r4, r5, r6, lr}
 8016ed2:	ec55 4b10 	vmov	r4, r5, d0
 8016ed6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016eda:	4606      	mov	r6, r0
 8016edc:	462b      	mov	r3, r5
 8016ede:	b999      	cbnz	r1, 8016f08 <scalbn+0x38>
 8016ee0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016ee4:	4323      	orrs	r3, r4
 8016ee6:	d03f      	beq.n	8016f68 <scalbn+0x98>
 8016ee8:	4b35      	ldr	r3, [pc, #212]	; (8016fc0 <scalbn+0xf0>)
 8016eea:	4629      	mov	r1, r5
 8016eec:	ee10 0a10 	vmov	r0, s0
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	f7e9 fb81 	bl	80005f8 <__aeabi_dmul>
 8016ef6:	4b33      	ldr	r3, [pc, #204]	; (8016fc4 <scalbn+0xf4>)
 8016ef8:	429e      	cmp	r6, r3
 8016efa:	4604      	mov	r4, r0
 8016efc:	460d      	mov	r5, r1
 8016efe:	da10      	bge.n	8016f22 <scalbn+0x52>
 8016f00:	a327      	add	r3, pc, #156	; (adr r3, 8016fa0 <scalbn+0xd0>)
 8016f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f06:	e01f      	b.n	8016f48 <scalbn+0x78>
 8016f08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8016f0c:	4291      	cmp	r1, r2
 8016f0e:	d10c      	bne.n	8016f2a <scalbn+0x5a>
 8016f10:	ee10 2a10 	vmov	r2, s0
 8016f14:	4620      	mov	r0, r4
 8016f16:	4629      	mov	r1, r5
 8016f18:	f7e9 f9b8 	bl	800028c <__adddf3>
 8016f1c:	4604      	mov	r4, r0
 8016f1e:	460d      	mov	r5, r1
 8016f20:	e022      	b.n	8016f68 <scalbn+0x98>
 8016f22:	460b      	mov	r3, r1
 8016f24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016f28:	3936      	subs	r1, #54	; 0x36
 8016f2a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8016f2e:	4296      	cmp	r6, r2
 8016f30:	dd0d      	ble.n	8016f4e <scalbn+0x7e>
 8016f32:	2d00      	cmp	r5, #0
 8016f34:	a11c      	add	r1, pc, #112	; (adr r1, 8016fa8 <scalbn+0xd8>)
 8016f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f3a:	da02      	bge.n	8016f42 <scalbn+0x72>
 8016f3c:	a11c      	add	r1, pc, #112	; (adr r1, 8016fb0 <scalbn+0xe0>)
 8016f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f42:	a319      	add	r3, pc, #100	; (adr r3, 8016fa8 <scalbn+0xd8>)
 8016f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f48:	f7e9 fb56 	bl	80005f8 <__aeabi_dmul>
 8016f4c:	e7e6      	b.n	8016f1c <scalbn+0x4c>
 8016f4e:	1872      	adds	r2, r6, r1
 8016f50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016f54:	428a      	cmp	r2, r1
 8016f56:	dcec      	bgt.n	8016f32 <scalbn+0x62>
 8016f58:	2a00      	cmp	r2, #0
 8016f5a:	dd08      	ble.n	8016f6e <scalbn+0x9e>
 8016f5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016f60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016f64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016f68:	ec45 4b10 	vmov	d0, r4, r5
 8016f6c:	bd70      	pop	{r4, r5, r6, pc}
 8016f6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016f72:	da08      	bge.n	8016f86 <scalbn+0xb6>
 8016f74:	2d00      	cmp	r5, #0
 8016f76:	a10a      	add	r1, pc, #40	; (adr r1, 8016fa0 <scalbn+0xd0>)
 8016f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f7c:	dac0      	bge.n	8016f00 <scalbn+0x30>
 8016f7e:	a10e      	add	r1, pc, #56	; (adr r1, 8016fb8 <scalbn+0xe8>)
 8016f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f84:	e7bc      	b.n	8016f00 <scalbn+0x30>
 8016f86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016f8a:	3236      	adds	r2, #54	; 0x36
 8016f8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016f90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016f94:	4620      	mov	r0, r4
 8016f96:	4b0c      	ldr	r3, [pc, #48]	; (8016fc8 <scalbn+0xf8>)
 8016f98:	2200      	movs	r2, #0
 8016f9a:	e7d5      	b.n	8016f48 <scalbn+0x78>
 8016f9c:	f3af 8000 	nop.w
 8016fa0:	c2f8f359 	.word	0xc2f8f359
 8016fa4:	01a56e1f 	.word	0x01a56e1f
 8016fa8:	8800759c 	.word	0x8800759c
 8016fac:	7e37e43c 	.word	0x7e37e43c
 8016fb0:	8800759c 	.word	0x8800759c
 8016fb4:	fe37e43c 	.word	0xfe37e43c
 8016fb8:	c2f8f359 	.word	0xc2f8f359
 8016fbc:	81a56e1f 	.word	0x81a56e1f
 8016fc0:	43500000 	.word	0x43500000
 8016fc4:	ffff3cb0 	.word	0xffff3cb0
 8016fc8:	3c900000 	.word	0x3c900000

08016fcc <with_errno>:
 8016fcc:	b570      	push	{r4, r5, r6, lr}
 8016fce:	4604      	mov	r4, r0
 8016fd0:	460d      	mov	r5, r1
 8016fd2:	4616      	mov	r6, r2
 8016fd4:	f7fc ffa2 	bl	8013f1c <__errno>
 8016fd8:	4629      	mov	r1, r5
 8016fda:	6006      	str	r6, [r0, #0]
 8016fdc:	4620      	mov	r0, r4
 8016fde:	bd70      	pop	{r4, r5, r6, pc}

08016fe0 <xflow>:
 8016fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016fe2:	4614      	mov	r4, r2
 8016fe4:	461d      	mov	r5, r3
 8016fe6:	b108      	cbz	r0, 8016fec <xflow+0xc>
 8016fe8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016fec:	e9cd 2300 	strd	r2, r3, [sp]
 8016ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ff4:	4620      	mov	r0, r4
 8016ff6:	4629      	mov	r1, r5
 8016ff8:	f7e9 fafe 	bl	80005f8 <__aeabi_dmul>
 8016ffc:	2222      	movs	r2, #34	; 0x22
 8016ffe:	b003      	add	sp, #12
 8017000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017004:	f7ff bfe2 	b.w	8016fcc <with_errno>

08017008 <__math_uflow>:
 8017008:	b508      	push	{r3, lr}
 801700a:	2200      	movs	r2, #0
 801700c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017010:	f7ff ffe6 	bl	8016fe0 <xflow>
 8017014:	ec41 0b10 	vmov	d0, r0, r1
 8017018:	bd08      	pop	{r3, pc}

0801701a <__math_oflow>:
 801701a:	b508      	push	{r3, lr}
 801701c:	2200      	movs	r2, #0
 801701e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8017022:	f7ff ffdd 	bl	8016fe0 <xflow>
 8017026:	ec41 0b10 	vmov	d0, r0, r1
 801702a:	bd08      	pop	{r3, pc}

0801702c <__ieee754_sqrt>:
 801702c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017030:	ec55 4b10 	vmov	r4, r5, d0
 8017034:	4e67      	ldr	r6, [pc, #412]	; (80171d4 <__ieee754_sqrt+0x1a8>)
 8017036:	43ae      	bics	r6, r5
 8017038:	ee10 0a10 	vmov	r0, s0
 801703c:	ee10 2a10 	vmov	r2, s0
 8017040:	4629      	mov	r1, r5
 8017042:	462b      	mov	r3, r5
 8017044:	d10d      	bne.n	8017062 <__ieee754_sqrt+0x36>
 8017046:	f7e9 fad7 	bl	80005f8 <__aeabi_dmul>
 801704a:	4602      	mov	r2, r0
 801704c:	460b      	mov	r3, r1
 801704e:	4620      	mov	r0, r4
 8017050:	4629      	mov	r1, r5
 8017052:	f7e9 f91b 	bl	800028c <__adddf3>
 8017056:	4604      	mov	r4, r0
 8017058:	460d      	mov	r5, r1
 801705a:	ec45 4b10 	vmov	d0, r4, r5
 801705e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017062:	2d00      	cmp	r5, #0
 8017064:	dc0b      	bgt.n	801707e <__ieee754_sqrt+0x52>
 8017066:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801706a:	4326      	orrs	r6, r4
 801706c:	d0f5      	beq.n	801705a <__ieee754_sqrt+0x2e>
 801706e:	b135      	cbz	r5, 801707e <__ieee754_sqrt+0x52>
 8017070:	f7e9 f90a 	bl	8000288 <__aeabi_dsub>
 8017074:	4602      	mov	r2, r0
 8017076:	460b      	mov	r3, r1
 8017078:	f7e9 fbe8 	bl	800084c <__aeabi_ddiv>
 801707c:	e7eb      	b.n	8017056 <__ieee754_sqrt+0x2a>
 801707e:	1509      	asrs	r1, r1, #20
 8017080:	f000 808d 	beq.w	801719e <__ieee754_sqrt+0x172>
 8017084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017088:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801708c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017090:	07c9      	lsls	r1, r1, #31
 8017092:	bf5c      	itt	pl
 8017094:	005b      	lslpl	r3, r3, #1
 8017096:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801709a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801709e:	bf58      	it	pl
 80170a0:	0052      	lslpl	r2, r2, #1
 80170a2:	2500      	movs	r5, #0
 80170a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80170a8:	1076      	asrs	r6, r6, #1
 80170aa:	0052      	lsls	r2, r2, #1
 80170ac:	f04f 0e16 	mov.w	lr, #22
 80170b0:	46ac      	mov	ip, r5
 80170b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80170b6:	eb0c 0001 	add.w	r0, ip, r1
 80170ba:	4298      	cmp	r0, r3
 80170bc:	bfde      	ittt	le
 80170be:	1a1b      	suble	r3, r3, r0
 80170c0:	eb00 0c01 	addle.w	ip, r0, r1
 80170c4:	186d      	addle	r5, r5, r1
 80170c6:	005b      	lsls	r3, r3, #1
 80170c8:	f1be 0e01 	subs.w	lr, lr, #1
 80170cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80170d0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80170d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80170d8:	d1ed      	bne.n	80170b6 <__ieee754_sqrt+0x8a>
 80170da:	4674      	mov	r4, lr
 80170dc:	2720      	movs	r7, #32
 80170de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80170e2:	4563      	cmp	r3, ip
 80170e4:	eb01 000e 	add.w	r0, r1, lr
 80170e8:	dc02      	bgt.n	80170f0 <__ieee754_sqrt+0xc4>
 80170ea:	d113      	bne.n	8017114 <__ieee754_sqrt+0xe8>
 80170ec:	4290      	cmp	r0, r2
 80170ee:	d811      	bhi.n	8017114 <__ieee754_sqrt+0xe8>
 80170f0:	2800      	cmp	r0, #0
 80170f2:	eb00 0e01 	add.w	lr, r0, r1
 80170f6:	da57      	bge.n	80171a8 <__ieee754_sqrt+0x17c>
 80170f8:	f1be 0f00 	cmp.w	lr, #0
 80170fc:	db54      	blt.n	80171a8 <__ieee754_sqrt+0x17c>
 80170fe:	f10c 0801 	add.w	r8, ip, #1
 8017102:	eba3 030c 	sub.w	r3, r3, ip
 8017106:	4290      	cmp	r0, r2
 8017108:	bf88      	it	hi
 801710a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801710e:	1a12      	subs	r2, r2, r0
 8017110:	440c      	add	r4, r1
 8017112:	46c4      	mov	ip, r8
 8017114:	005b      	lsls	r3, r3, #1
 8017116:	3f01      	subs	r7, #1
 8017118:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801711c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8017120:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8017124:	d1dd      	bne.n	80170e2 <__ieee754_sqrt+0xb6>
 8017126:	4313      	orrs	r3, r2
 8017128:	d01b      	beq.n	8017162 <__ieee754_sqrt+0x136>
 801712a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80171d8 <__ieee754_sqrt+0x1ac>
 801712e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80171dc <__ieee754_sqrt+0x1b0>
 8017132:	e9da 0100 	ldrd	r0, r1, [sl]
 8017136:	e9db 2300 	ldrd	r2, r3, [fp]
 801713a:	f7e9 f8a5 	bl	8000288 <__aeabi_dsub>
 801713e:	e9da 8900 	ldrd	r8, r9, [sl]
 8017142:	4602      	mov	r2, r0
 8017144:	460b      	mov	r3, r1
 8017146:	4640      	mov	r0, r8
 8017148:	4649      	mov	r1, r9
 801714a:	f7e9 fcd1 	bl	8000af0 <__aeabi_dcmple>
 801714e:	b140      	cbz	r0, 8017162 <__ieee754_sqrt+0x136>
 8017150:	f1b4 3fff 	cmp.w	r4, #4294967295
 8017154:	e9da 0100 	ldrd	r0, r1, [sl]
 8017158:	e9db 2300 	ldrd	r2, r3, [fp]
 801715c:	d126      	bne.n	80171ac <__ieee754_sqrt+0x180>
 801715e:	3501      	adds	r5, #1
 8017160:	463c      	mov	r4, r7
 8017162:	106a      	asrs	r2, r5, #1
 8017164:	0863      	lsrs	r3, r4, #1
 8017166:	07e9      	lsls	r1, r5, #31
 8017168:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801716c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017170:	bf48      	it	mi
 8017172:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8017176:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801717a:	461c      	mov	r4, r3
 801717c:	e76d      	b.n	801705a <__ieee754_sqrt+0x2e>
 801717e:	0ad3      	lsrs	r3, r2, #11
 8017180:	3815      	subs	r0, #21
 8017182:	0552      	lsls	r2, r2, #21
 8017184:	2b00      	cmp	r3, #0
 8017186:	d0fa      	beq.n	801717e <__ieee754_sqrt+0x152>
 8017188:	02dc      	lsls	r4, r3, #11
 801718a:	d50a      	bpl.n	80171a2 <__ieee754_sqrt+0x176>
 801718c:	f1c1 0420 	rsb	r4, r1, #32
 8017190:	fa22 f404 	lsr.w	r4, r2, r4
 8017194:	1e4d      	subs	r5, r1, #1
 8017196:	408a      	lsls	r2, r1
 8017198:	4323      	orrs	r3, r4
 801719a:	1b41      	subs	r1, r0, r5
 801719c:	e772      	b.n	8017084 <__ieee754_sqrt+0x58>
 801719e:	4608      	mov	r0, r1
 80171a0:	e7f0      	b.n	8017184 <__ieee754_sqrt+0x158>
 80171a2:	005b      	lsls	r3, r3, #1
 80171a4:	3101      	adds	r1, #1
 80171a6:	e7ef      	b.n	8017188 <__ieee754_sqrt+0x15c>
 80171a8:	46e0      	mov	r8, ip
 80171aa:	e7aa      	b.n	8017102 <__ieee754_sqrt+0xd6>
 80171ac:	f7e9 f86e 	bl	800028c <__adddf3>
 80171b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80171b4:	4602      	mov	r2, r0
 80171b6:	460b      	mov	r3, r1
 80171b8:	4640      	mov	r0, r8
 80171ba:	4649      	mov	r1, r9
 80171bc:	f7e9 fc8e 	bl	8000adc <__aeabi_dcmplt>
 80171c0:	b120      	cbz	r0, 80171cc <__ieee754_sqrt+0x1a0>
 80171c2:	1ca0      	adds	r0, r4, #2
 80171c4:	bf08      	it	eq
 80171c6:	3501      	addeq	r5, #1
 80171c8:	3402      	adds	r4, #2
 80171ca:	e7ca      	b.n	8017162 <__ieee754_sqrt+0x136>
 80171cc:	3401      	adds	r4, #1
 80171ce:	f024 0401 	bic.w	r4, r4, #1
 80171d2:	e7c6      	b.n	8017162 <__ieee754_sqrt+0x136>
 80171d4:	7ff00000 	.word	0x7ff00000
 80171d8:	200003f0 	.word	0x200003f0
 80171dc:	200003f8 	.word	0x200003f8

080171e0 <_init>:
 80171e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171e2:	bf00      	nop
 80171e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171e6:	bc08      	pop	{r3}
 80171e8:	469e      	mov	lr, r3
 80171ea:	4770      	bx	lr

080171ec <_fini>:
 80171ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ee:	bf00      	nop
 80171f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171f2:	bc08      	pop	{r3}
 80171f4:	469e      	mov	lr, r3
 80171f6:	4770      	bx	lr
