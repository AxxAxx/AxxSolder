
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b90  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002df0  08015d70  08015d70  00025d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018b60  08018b60  000303dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018b60  08018b60  00028b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018b68  08018b68  000303dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018b68  08018b68  00028b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018b6c  08018b6c  00028b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003dc  20000000  08018b70  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fe8  200003e0  08018f4c  000303e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200023c8  08018f4c  000323c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003040c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026111  00000000  00000000  0003044f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b5a  00000000  00000000  00056560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002338  00000000  00000000  0005b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b31  00000000  00000000  0005d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254d9  00000000  00000000  0005ef29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b03a  00000000  00000000  00084402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e98c7  00000000  00000000  000af43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ad20  00000000  00000000  00198d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001a3a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003e0 	.word	0x200003e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015d58 	.word	0x08015d58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003e4 	.word	0x200003e4
 800021c:	08015d58 	.word	0x08015d58

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800104e:	0adb      	lsrs	r3, r3, #11
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <FlashCheckCRC>:

bool FlashCheckCRC()
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <FlashCheckCRC+0x70>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <FlashCheckCRC+0x70>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <FlashCheckCRC+0x70>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <FlashCheckCRC+0x74>)
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <FlashCheckCRC+0x78>)
 8001094:	f008 f8f0 	bl	8009278 <HAL_CRC_Calculate>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	461c      	mov	r4, r3
 800109e:	4615      	mov	r5, r2
 80010a0:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010aa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b6:	4299      	cmp	r1, r3
 80010b8:	bf08      	it	eq
 80010ba:	4290      	cmpeq	r0, r2
 80010bc:	d101      	bne.n	80010c2 <FlashCheckCRC+0x66>
	{
		return true;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <FlashCheckCRC+0x68>
	}
	return false;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0801f000 	.word	0x0801f000
 80010d4:	20001d28 	.word	0x20001d28

080010d8 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
	int i = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <FlashReadToBuf+0x88>)
 80010e4:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 80010e6:	f7ff ffb9 	bl	800105c <FlashCheckCRC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d031      	beq.n	8001154 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010f0:	e025      	b.n	800113e <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e013      	b.n	800112c <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <FlashReadToBuf+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d208      	bcs.n	8001126 <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	1d39      	adds	r1, r7, #4
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	440a      	add	r2, r1
 8001120:	7811      	ldrb	r1, [r2, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <FlashReadToBuf+0x90>)
 8001124:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b07      	cmp	r3, #7
 8001130:	dde8      	ble.n	8001104 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3308      	adds	r3, #8
 8001136:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3308      	adds	r3, #8
 800113c:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <FlashReadToBuf+0x8c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d203      	bcs.n	8001150 <FlashReadToBuf+0x78>
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <FlashReadToBuf+0x94>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d3d0      	bcc.n	80010f2 <FlashReadToBuf+0x1a>
		}
		return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <FlashReadToBuf+0x7e>
	}
	return false;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0801f000 	.word	0x0801f000
 8001164:	20000000 	.word	0x20000000
 8001168:	20000400 	.word	0x20000400
 800116c:	0801ffff 	.word	0x0801ffff

08001170 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 8001178:	f7ff ffae 	bl	80010d8 <FlashReadToBuf>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <FlashRead+0x26>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <FlashRead+0x30>)
 8001186:	4618      	mov	r0, r3
 8001188:	4611      	mov	r1, r2
 800118a:	2350      	movs	r3, #80	; 0x50
 800118c:	461a      	mov	r2, r3
 800118e:	f011 f8a6 	bl	80122de <memcpy>
		return true;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <FlashRead+0x28>
	}
	return false;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000400 	.word	0x20000400

080011a4 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <FlashWrite+0x170>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <FlashWrite+0x174>)
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 80011da:	f7ff ff7d 	bl	80010d8 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 80011de:	4a4f      	ldr	r2, [pc, #316]	; (800131c <FlashWrite+0x178>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	2350      	movs	r3, #80	; 0x50
 80011e8:	461a      	mov	r2, r3
 80011ea:	f011 f878 	bl	80122de <memcpy>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <FlashWrite+0x17c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4949      	ldr	r1, [pc, #292]	; (800131c <FlashWrite+0x178>)
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <FlashWrite+0x180>)
 80011f8:	f008 f83e 	bl	8009278 <HAL_CRC_Calculate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2200      	movs	r2, #0
 8001200:	461c      	mov	r4, r3
 8001202:	4615      	mov	r5, r2
 8001204:	e9c7 4506 	strd	r4, r5, [r7, #24]

	HAL_FLASH_Unlock();
 8001208:	f008 fd84 	bl	8009d14 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <FlashWrite+0x184>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8001214:	4845      	ldr	r0, [pc, #276]	; (800132c <FlashWrite+0x188>)
 8001216:	f7ff ff13 	bl	8001040 <GetPage>
 800121a:	4604      	mov	r4, r0
 800121c:	483e      	ldr	r0, [pc, #248]	; (8001318 <FlashWrite+0x174>)
 800121e:	f7ff ff0f 	bl	8001040 <GetPage>
 8001222:	4603      	mov	r3, r0
 8001224:	1ae3      	subs	r3, r4, r3
 8001226:	3301      	adds	r3, #1
 8001228:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <FlashWrite+0x18c>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <FlashWrite+0x18c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 8001236:	4838      	ldr	r0, [pc, #224]	; (8001318 <FlashWrite+0x174>)
 8001238:	f7ff ff02 	bl	8001040 <GetPage>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <FlashWrite+0x18c>)
 8001240:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8001242:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <FlashWrite+0x18c>)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4838      	ldr	r0, [pc, #224]	; (8001330 <FlashWrite+0x18c>)
 8001250:	f008 fe4c 	bl	8009eec <HAL_FLASHEx_Erase>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d152      	bne.n	8001300 <FlashWrite+0x15c>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 800125a:	e04b      	b.n	80012f4 <FlashWrite+0x150>
		{
			for (int j = 0; j < 8; j++)
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	e01b      	b.n	800129a <FlashWrite+0xf6>
			{
				if (j + i < bufLength)
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <FlashWrite+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d20a      	bcs.n	8001288 <FlashWrite+0xe4>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8001272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	441a      	add	r2, r3
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f107 0108 	add.w	r1, r7, #8
 800127e:	440b      	add	r3, r1
 8001280:	4926      	ldr	r1, [pc, #152]	; (800131c <FlashWrite+0x178>)
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e005      	b.n	8001294 <FlashWrite+0xf0>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f107 0208 	add.w	r2, r7, #8
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3301      	adds	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	2b07      	cmp	r3, #7
 800129e:	dde0      	ble.n	8001262 <FlashWrite+0xbe>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 80012a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <FlashWrite+0x17c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d20f      	bcs.n	80012ca <FlashWrite+0x126>
 80012aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012b0:	2000      	movs	r0, #0
 80012b2:	f008 fcc3 	bl	8009c3c <HAL_FLASH_Program>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <FlashWrite+0x126>
			{
				Address = Address + 8;
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	3308      	adds	r3, #8
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	3308      	adds	r3, #8
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c8:	e014      	b.n	80012f4 <FlashWrite+0x150>
			}
			else if (i >= bufLength)
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <FlashWrite+0x17c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d314      	bcc.n	80012fe <FlashWrite+0x15a>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 80012d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012da:	2000      	movs	r0, #0
 80012dc:	f008 fcae 	bl	8009c3c <HAL_FLASH_Program>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <FlashWrite+0x150>
				{
					HAL_FLASH_Lock();
 80012e6:	f008 fd37 	bl	8009d58 <HAL_FLASH_Lock>
					flashWriting = 0;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <FlashWrite+0x170>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					return true;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00b      	b.n	800130c <FlashWrite+0x168>
		while (Address < FLASH_USER_END_ADDR)
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <FlashWrite+0x188>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d3af      	bcc.n	800125c <FlashWrite+0xb8>
 80012fc:	e000      	b.n	8001300 <FlashWrite+0x15c>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012fe:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001300:	f008 fd2a 	bl	8009d58 <HAL_FLASH_Lock>

	flashWriting = 0;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <FlashWrite+0x170>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	return false;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	200003fc 	.word	0x200003fc
 8001318:	0801f000 	.word	0x0801f000
 800131c:	20000400 	.word	0x20000400
 8001320:	20000000 	.word	0x20000000
 8001324:	20001d28 	.word	0x20001d28
 8001328:	40022000 	.word	0x40022000
 800132c:	0801ffff 	.word	0x0801ffff
 8001330:	20000450 	.word	0x20000450

08001334 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	ed87 0b04 	vstr	d0, [r7, #16]
 800133e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001342:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800134a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134e:	f7ff fbed 	bl	8000b2c <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <clamp+0x2a>
 8001358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135c:	e001      	b.n	8001362 <clamp+0x2e>
 800135e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001362:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800136a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800136e:	f7ff fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <clamp+0x4a>
 8001378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137c:	e001      	b.n	8001382 <clamp+0x4e>
 800137e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001382:	ec43 2b17 	vmov	d7, r2, r3
}
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <get_mean_ADC_reading_indexed>:

/* Returns the average of 100 readings of the index+3*n value in the ADC_buffer vector */
double get_mean_ADC_reading_indexed(uint8_t index){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e012      	b.n	80013d2 <get_mean_ADC_reading_indexed+0x3e>
		ADC_filter_mean += ADC1_BUF[n];
 80013ac:	4a16      	ldr	r2, [pc, #88]	; (8001408 <get_mean_ADC_reading_indexed+0x74>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3303      	adds	r3, #3
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	dde9      	ble.n	80013ac <get_mean_ADC_reading_indexed+0x18>
	}
	return ADC_filter_mean/(ADC1_BUF_LEN/3.0);
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__aeabi_f2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <get_mean_ADC_reading_indexed+0x78>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200004d0 	.word	0x200004d0
 8001408:	200004d4 	.word	0x200004d4
 800140c:	40330000 	.word	0x40330000

08001410 <get_mcu_temp>:

void get_mcu_temp(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	sensor_values.mcu_temperature =	Moving_Average_Compute((((get_mean_ADC_reading_indexed(2) * VSENSE) - V30) / Avg_Slope + 25), &mcu_temperature_filter_struct);
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff ffbd 	bl	8001394 <get_mean_ADC_reading_indexed>
 800141a:	ec51 0b10 	vmov	r0, r1, d0
 800141e:	a328      	add	r3, pc, #160	; (adr r3, 80014c0 <get_mcu_temp+0xb0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f910 	bl	8000648 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <get_mcu_temp+0xa0>)
 8001436:	f7ff fa31 	bl	800089c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	a317      	add	r3, pc, #92	; (adr r3, 80014a0 <get_mcu_temp+0x90>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7fe ff46 	bl	80002d8 <__aeabi_dsub>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	a314      	add	r3, pc, #80	; (adr r3, 80014a8 <get_mcu_temp+0x98>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff fa1f 	bl	800089c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <get_mcu_temp+0xa4>)
 800146c:	f7fe ff36 	bl	80002dc <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbbe 	bl	8000bf8 <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <get_mcu_temp+0xa8>)
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fbab 	bl	8004bdc <Moving_Average_Compute>
 8001486:	ec53 2b10 	vmov	r2, r3, d0
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fbd3 	bl	8000c38 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <get_mcu_temp+0xac>)
 8001496:	61d3      	str	r3, [r2, #28]
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	f3af 8000 	nop.w
 80014a0:	851eb852 	.word	0x851eb852
 80014a4:	3fe851eb 	.word	0x3fe851eb
 80014a8:	47ae147b 	.word	0x47ae147b
 80014ac:	3f647ae1 	.word	0x3f647ae1
 80014b0:	40b00000 	.word	0x40b00000
 80014b4:	40390000 	.word	0x40390000
 80014b8:	200008e8 	.word	0x200008e8
 80014bc:	20000030 	.word	0x20000030
 80014c0:	66666666 	.word	0x66666666
 80014c4:	400a6666 	.word	0x400a6666

080014c8 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	//return ((color & 0b0000000000011111)  << 11)    |    ((color & 0b1111100000000000) >> 5)   |    ((color  & 0b0000011111100000) >> 6);
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	02db      	lsls	r3, r3, #11
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <change_state>:

void change_state(mainstates new_state){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <change_state+0x58>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <change_state+0x5c>)
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	active_state = new_state;
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <change_state+0x58>)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	7013      	strb	r3, [r2, #0]
	if((active_state == RUN) && (flash_values.GPIO4_ON_at_run == 1)){
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <change_state+0x58>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d110      	bne.n	8001538 <change_state+0x44>
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <change_state+0x60>)
 8001518:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <change_state+0x64>)
 8001522:	f7ff faf9 	bl	8000b18 <__aeabi_dcmpeq>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <change_state+0x44>
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <change_state+0x68>)
 8001532:	f008 ff99 	bl	800a468 <HAL_GPIO_WritePin>
 8001536:	e005      	b.n	8001544 <change_state+0x50>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <change_state+0x68>)
 800153e:	f008 ff93 	bl	800a468 <HAL_GPIO_WritePin>
	}
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000001d 	.word	0x2000001d
 8001550:	20000030 	.word	0x20000030
 8001554:	20000550 	.word	0x20000550
 8001558:	3ff00000 	.word	0x3ff00000
 800155c:	48000400 	.word	0x48000400

08001560 <get_bus_voltage>:

void get_bus_voltage(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading_indexed(0), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ff15 	bl	8001394 <get_mean_ADC_reading_indexed>
 800156a:	ec53 2b10 	vmov	r2, r3, d0
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb41 	bl	8000bf8 <__aeabi_d2uiz>
 8001576:	4603      	mov	r3, r0
 8001578:	490d      	ldr	r1, [pc, #52]	; (80015b0 <get_bus_voltage+0x50>)
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fb2e 	bl	8004bdc <Moving_Average_Compute>
 8001580:	ec51 0b10 	vmov	r0, r1, d0
 8001584:	a308      	add	r3, pc, #32	; (adr r3, 80015a8 <get_bus_voltage+0x48>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f85d 	bl	8000648 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb4f 	bl	8000c38 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <get_bus_voltage+0x54>)
 800159e:	6113      	str	r3, [r2, #16]
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	f3af 8000 	nop.w
 80015a8:	ada68bd9 	.word	0xada68bd9
 80015ac:	3f813656 	.word	0x3f813656
 80015b0:	20000c14 	.word	0x20000c14
 80015b4:	20000030 	.word	0x20000030

080015b8 <get_heater_current>:

void get_heater_current(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	sensor_values.heater_current = Moving_Average_Compute(current_raw, &current_filterStruct)*CURRENT_COMPENSATION;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <get_heater_current+0x40>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <get_heater_current+0x44>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fb0a 	bl	8004bdc <Moving_Average_Compute>
 80015c8:	ec51 0b10 	vmov	r0, r1, d0
 80015cc:	a308      	add	r3, pc, #32	; (adr r3, 80015f0 <get_heater_current+0x38>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f839 	bl	8000648 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fb2b 	bl	8000c38 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <get_heater_current+0x48>)
 80015e6:	6153      	str	r3, [r2, #20]
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f3af 8000 	nop.w
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	3fb99999 	.word	0x3fb99999
 80015f8:	20000546 	.word	0x20000546
 80015fc:	20000f40 	.word	0x20000f40
 8001600:	20000030 	.word	0x20000030
 8001604:	00000000 	.word	0x00000000

08001608 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(get_mean_ADC_reading_indexed(1), &thermocouple_temperature_filter_struct); /* Moving average filter */
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fec0 	bl	8001394 <get_mean_ADC_reading_indexed>
 8001614:	ec53 2b10 	vmov	r2, r3, d0
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff faec 	bl	8000bf8 <__aeabi_d2uiz>
 8001620:	4603      	mov	r3, r0
 8001622:	4977      	ldr	r1, [pc, #476]	; (8001800 <get_thermocouple_temperature+0x1f8>)
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fad9 	bl	8004bdc <Moving_Average_Compute>
 800162a:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 800162e:	4b75      	ldr	r3, [pc, #468]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d12e      	bne.n	8001694 <get_thermocouple_temperature+0x8c>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800163a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163e:	f7ff f803 	bl	8000648 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a357      	add	r3, pc, #348	; (adr r3, 80017a8 <get_thermocouple_temperature+0x1a0>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe fffa 	bl	8000648 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	a354      	add	r3, pc, #336	; (adr r3, 80017b0 <get_thermocouple_temperature+0x1a8>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001666:	f7fe ffef 	bl	8000648 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe fe33 	bl	80002dc <__adddf3>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	a34e      	add	r3, pc, #312	; (adr r3, 80017b8 <get_thermocouple_temperature+0x1b0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe fe2a 	bl	80002dc <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	495e      	ldr	r1, [pc, #376]	; (8001808 <get_thermocouple_temperature+0x200>)
 800168e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001692:	e064      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == T245){
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d12e      	bne.n	80016fa <get_thermocouple_temperature+0xf2>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 800169c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a4:	f7fe ffd0 	bl	8000648 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	a343      	add	r3, pc, #268	; (adr r3, 80017c0 <get_thermocouple_temperature+0x1b8>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffc7 	bl	8000648 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	a341      	add	r3, pc, #260	; (adr r3, 80017c8 <get_thermocouple_temperature+0x1c0>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016cc:	f7fe ffbc 	bl	8000648 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fe00 	bl	80002dc <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a33a      	add	r3, pc, #232	; (adr r3, 80017d0 <get_thermocouple_temperature+0x1c8>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fdf7 	bl	80002dc <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4945      	ldr	r1, [pc, #276]	; (8001808 <get_thermocouple_temperature+0x200>)
 80016f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016f8:	e031      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == NT115){
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d12d      	bne.n	800175e <get_thermocouple_temperature+0x156>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_NT115 + TC_temp*TC_COMPENSATION_X1_NT115 + TC_COMPENSATION_X0_NT115;
 8001702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800170a:	f7fe ff9d 	bl	8000648 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	a330      	add	r3, pc, #192	; (adr r3, 80017d8 <get_thermocouple_temperature+0x1d0>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe ff94 	bl	8000648 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	a32d      	add	r3, pc, #180	; (adr r3, 80017e0 <get_thermocouple_temperature+0x1d8>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f7fe ff89 	bl	8000648 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fdcd 	bl	80002dc <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	a327      	add	r3, pc, #156	; (adr r3, 80017e8 <get_thermocouple_temperature+0x1e0>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fdc4 	bl	80002dc <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	492b      	ldr	r1, [pc, #172]	; (8001808 <get_thermocouple_temperature+0x200>)
 800175a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <get_thermocouple_temperature+0x200>)
 8001760:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <get_thermocouple_temperature+0x204>)
 8001766:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800176a:	f7fe fdb7 	bl	80002dc <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4925      	ldr	r1, [pc, #148]	; (8001808 <get_thermocouple_temperature+0x200>)
 8001774:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <get_thermocouple_temperature+0x200>)
 800177a:	ed93 7b02 	vldr	d7, [r3, #8]
 800177e:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80017f0 <get_thermocouple_temperature+0x1e8>
 8001782:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80017f8 <get_thermocouple_temperature+0x1f0>
 8001786:	eeb0 0a47 	vmov.f32	s0, s14
 800178a:	eef0 0a67 	vmov.f32	s1, s15
 800178e:	f7ff fdd1 	bl	8001334 <clamp>
 8001792:	eeb0 7a40 	vmov.f32	s14, s0
 8001796:	eef0 7a60 	vmov.f32	s15, s1
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <get_thermocouple_temperature+0x200>)
 800179c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}
 80017a8:	82211f02 	.word	0x82211f02
 80017ac:	3ed1b769 	.word	0x3ed1b769
 80017b0:	7d232337 	.word	0x7d232337
 80017b4:	3fd46490 	.word	0x3fd46490
 80017b8:	11588fd7 	.word	0x11588fd7
 80017bc:	4034f7d1 	.word	0x4034f7d1
 80017c0:	a66d5482 	.word	0xa66d5482
 80017c4:	be9fc6dc 	.word	0xbe9fc6dc
 80017c8:	56fa2c99 	.word	0x56fa2c99
 80017cc:	3fbe8eac 	.word	0x3fbe8eac
 80017d0:	aef84767 	.word	0xaef84767
 80017d4:	4037c703 	.word	0x4037c703
 80017d8:	e0057d0c 	.word	0xe0057d0c
 80017dc:	3f0ac0ae 	.word	0x3f0ac0ae
 80017e0:	859db92b 	.word	0x859db92b
 80017e4:	3fdae99a 	.word	0x3fdae99a
 80017e8:	027d19fb 	.word	0x027d19fb
 80017ec:	40342538 	.word	0x40342538
 80017f0:	00000000 	.word	0x00000000
 80017f4:	408f3800 	.word	0x408f3800
	...
 8001800:	200005bc 	.word	0x200005bc
 8001804:	20000460 	.word	0x20000460
 8001808:	20000030 	.word	0x20000030
 800180c:	20000550 	.word	0x20000550

08001810 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <set_heater_duty+0x48>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.3);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fea5 	bl	8000574 <__aeabi_i2d>
 800182a:	a309      	add	r3, pc, #36	; (adr r3, 8001850 <set_heater_duty+0x40>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe ff0a 	bl	8000648 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <set_heater_duty+0x48>)
 800183a:	680c      	ldr	r4, [r1, #0]
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f9da 	bl	8000bf8 <__aeabi_d2uiz>
 8001844:	4603      	mov	r3, r0
 8001846:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	33333333 	.word	0x33333333
 8001854:	3fd33333 	.word	0x3fd33333
 8001858:	20001e64 	.word	0x20001e64
 800185c:	00000000 	.word	0x00000000

08001860 <heater_on>:

/* Update the duty cycle of timer controlling the heater PWM */
void heater_on(){
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <heater_on+0xa0>)
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe95 	bl	8000598 <__aeabi_f2d>
 800186e:	a31e      	add	r3, pc, #120	; (adr r3, 80018e8 <heater_on+0x88>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fee8 	bl	8000648 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <heater_on+0xa0>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe87 	bl	8000598 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7ff f803 	bl	800089c <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <heater_on+0xa4>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fed0 	bl	8000648 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <heater_on+0xa8>)
 80018ae:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <heater_on+0xa8>)
 80018b4:	ed93 7b00 	vldr	d7, [r3]
 80018b8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80018f0 <heater_on+0x90>
 80018bc:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80018f8 <heater_on+0x98>
 80018c0:	eeb0 0a47 	vmov.f32	s0, s14
 80018c4:	eef0 0a67 	vmov.f32	s1, s15
 80018c8:	f7ff fd34 	bl	8001334 <clamp>
 80018cc:	ec53 2b10 	vmov	r2, r3, d0
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f990 	bl	8000bf8 <__aeabi_d2uiz>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff97 	bl	8001810 <set_heater_duty>
}
 80018e2:	bf00      	nop
 80018e4:	bdb0      	pop	{r4, r5, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	a5e353f8 	.word	0xa5e353f8
 80018ec:	3fc0c49b 	.word	0x3fc0c49b
 80018f0:	00000000 	.word	0x00000000
 80018f4:	407f4000 	.word	0x407f4000
	...
 8001900:	20000030 	.word	0x20000030
 8001904:	200005a0 	.word	0x200005a0
 8001908:	200005b0 	.word	0x200005b0

0800190c <heater_off>:

/* Disable the duty cycle of timer controlling the heater PWM*/
void heater_off(){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	set_heater_duty(0);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff ff7d 	bl	8001810 <set_heater_duty>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	0000      	movs	r0, r0
 800191c:	0000      	movs	r0, r0
	...

08001920 <settings_menue>:

void settings_menue(){
 8001920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001924:	b08d      	sub	sp, #52	; 0x34
 8001926:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8001928:	2120      	movs	r1, #32
 800192a:	48c7      	ldr	r0, [pc, #796]	; (8001c48 <settings_menue+0x328>)
 800192c:	f008 fd84 	bl	800a438 <HAL_GPIO_ReadPin>
 8001930:	4603      	mov	r3, r0
 8001932:	2b01      	cmp	r3, #1
 8001934:	f040 831c 	bne.w	8001f70 <settings_menue+0x650>
		if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8001938:	4bc4      	ldr	r3, [pc, #784]	; (8001c4c <settings_menue+0x32c>)
 800193a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	f7ff f8e7 	bl	8000b18 <__aeabi_dcmpeq>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10b      	bne.n	8001968 <settings_menue+0x48>
 8001950:	4bbe      	ldr	r3, [pc, #760]	; (8001c4c <settings_menue+0x32c>)
 8001952:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195e:	f7ff f8db 	bl	8000b18 <__aeabi_dcmpeq>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d026      	beq.n	80019b6 <settings_menue+0x96>
			LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001968:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800196c:	f7ff fdac 	bl	80014c8 <RGB_to_BRG>
 8001970:	4603      	mov	r3, r0
 8001972:	461c      	mov	r4, r3
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff fda7 	bl	80014c8 <RGB_to_BRG>
 800197a:	4603      	mov	r3, r0
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	9400      	str	r4, [sp, #0]
 8001980:	4bb3      	ldr	r3, [pc, #716]	; (8001c50 <settings_menue+0x330>)
 8001982:	4ab4      	ldr	r2, [pc, #720]	; (8001c54 <settings_menue+0x334>)
 8001984:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001988:	2000      	movs	r0, #0
 800198a:	f004 fe9f 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 800198e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001992:	f7ff fd99 	bl	80014c8 <RGB_to_BRG>
 8001996:	4603      	mov	r3, r0
 8001998:	461c      	mov	r4, r3
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff fd94 	bl	80014c8 <RGB_to_BRG>
 80019a0:	4603      	mov	r3, r0
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	9400      	str	r4, [sp, #0]
 80019a6:	4baa      	ldr	r3, [pc, #680]	; (8001c50 <settings_menue+0x330>)
 80019a8:	4aab      	ldr	r2, [pc, #684]	; (8001c58 <settings_menue+0x338>)
 80019aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019ae:	2096      	movs	r0, #150	; 0x96
 80019b0:	f004 fe8c 	bl	80066cc <LCD_PutStr>
 80019b4:	e023      	b.n	80019fe <settings_menue+0xde>
		}
		else{
			LCD_PutStr(0, 215, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019b6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019ba:	f7ff fd85 	bl	80014c8 <RGB_to_BRG>
 80019be:	4603      	mov	r3, r0
 80019c0:	461c      	mov	r4, r3
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fd80 	bl	80014c8 <RGB_to_BRG>
 80019c8:	4603      	mov	r3, r0
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	9400      	str	r4, [sp, #0]
 80019ce:	4ba0      	ldr	r3, [pc, #640]	; (8001c50 <settings_menue+0x330>)
 80019d0:	4aa0      	ldr	r2, [pc, #640]	; (8001c54 <settings_menue+0x334>)
 80019d2:	21d7      	movs	r1, #215	; 0xd7
 80019d4:	2000      	movs	r0, #0
 80019d6:	f004 fe79 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(150, 215, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019da:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019de:	f7ff fd73 	bl	80014c8 <RGB_to_BRG>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461c      	mov	r4, r3
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fd6e 	bl	80014c8 <RGB_to_BRG>
 80019ec:	4603      	mov	r3, r0
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	9400      	str	r4, [sp, #0]
 80019f2:	4b97      	ldr	r3, [pc, #604]	; (8001c50 <settings_menue+0x330>)
 80019f4:	4a98      	ldr	r2, [pc, #608]	; (8001c58 <settings_menue+0x338>)
 80019f6:	21d7      	movs	r1, #215	; 0xd7
 80019f8:	2096      	movs	r0, #150	; 0x96
 80019fa:	f004 fe67 	bl	80066cc <LCD_PutStr>
		}

		TIM2->CNT = 1000;
 80019fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8001a22:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a26:	f7ff fd4f 	bl	80014c8 <RGB_to_BRG>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fd4a 	bl	80014c8 <RGB_to_BRG>
 8001a34:	4603      	mov	r3, r0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	9400      	str	r4, [sp, #0]
 8001a3a:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <settings_menue+0x330>)
 8001a3c:	4a87      	ldr	r2, [pc, #540]	; (8001c5c <settings_menue+0x33c>)
 8001a3e:	210c      	movs	r1, #12
 8001a40:	203c      	movs	r0, #60	; 0x3c
 8001a42:	f004 fe43 	bl	80066cc <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8001a46:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a4a:	f7ff fd3d 	bl	80014c8 <RGB_to_BRG>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2328      	movs	r3, #40	; 0x28
 8001a54:	22f0      	movs	r2, #240	; 0xf0
 8001a56:	2128      	movs	r1, #40	; 0x28
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f004 fdf9 	bl	8006650 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8001a5e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a62:	f7ff fd31 	bl	80014c8 <RGB_to_BRG>
 8001a66:	4603      	mov	r3, r0
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2329      	movs	r3, #41	; 0x29
 8001a6c:	22f0      	movs	r2, #240	; 0xf0
 8001a6e:	2129      	movs	r1, #41	; 0x29
 8001a70:	2000      	movs	r0, #0
 8001a72:	f004 fded 	bl	8006650 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8001a76:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a7a:	f7ff fd25 	bl	80014c8 <RGB_to_BRG>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	232a      	movs	r3, #42	; 0x2a
 8001a84:	22f0      	movs	r2, #240	; 0xf0
 8001a86:	212a      	movs	r1, #42	; 0x2a
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f004 fde1 	bl	8006650 <LCD_DrawLine>

		HAL_Delay(500);
 8001a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a92:	f004 ff35 	bl	8006900 <HAL_Delay>
		while(menu_active == 1){
 8001a96:	e267      	b.n	8001f68 <settings_menue+0x648>
			if(menue_level == 0){
 8001a98:	8c3b      	ldrh	r3, [r7, #32]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d120      	bne.n	8001ae0 <settings_menue+0x1c0>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 8001a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd55 	bl	8000554 <__aeabi_ui2d>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	ed9f 2b60 	vldr	d2, [pc, #384]	; 8001c30 <settings_menue+0x310>
 8001ab2:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8001c38 <settings_menue+0x318>
 8001ab6:	ec43 2b10 	vmov	d0, r2, r3
 8001aba:	f7ff fc3b 	bl	8001334 <clamp>
 8001abe:	ec53 2b10 	vmov	r2, r3, d0
 8001ac2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f895 	bl	8000bf8 <__aeabi_d2uiz>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 8001ae0:	8c3b      	ldrh	r3, [r7, #32]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	f040 8091 	bne.w	8001c0a <settings_menue+0x2ea>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001ae8:	69b8      	ldr	r0, [r7, #24]
 8001aea:	f7fe fd55 	bl	8000598 <__aeabi_f2d>
 8001aee:	4604      	mov	r4, r0
 8001af0:	460d      	mov	r5, r1
 8001af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_ui2d>
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	4b57      	ldr	r3, [pc, #348]	; (8001c60 <settings_menue+0x340>)
 8001b04:	f7fe fbe8 	bl	80002d8 <__aeabi_dsub>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f892 	bl	8000c38 <__aeabi_d2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd3e 	bl	8000598 <__aeabi_f2d>
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b24:	f7fe feba 	bl	800089c <__aeabi_ddiv>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fbd4 	bl	80002dc <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4690      	mov	r8, r2
 8001b3a:	4699      	mov	r9, r3
 8001b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b46:	ee17 0a90 	vmov	r0, s15
 8001b4a:	f7fe fd25 	bl	8000598 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001b54:	00c9      	lsls	r1, r1, #3
 8001b56:	483d      	ldr	r0, [pc, #244]	; (8001c4c <settings_menue+0x32c>)
 8001b58:	180c      	adds	r4, r1, r0
 8001b5a:	4640      	mov	r0, r8
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	f7fe fbbb 	bl	80002d8 <__aeabi_dsub>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9c4 2300 	strd	r2, r3, [r4]
				if ((menu_cursor_position == 5) || (menu_cursor_position == 8)){
 8001b6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d002      	beq.n	8001b76 <settings_menue+0x256>
 8001b70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d12c      	bne.n	8001bd0 <settings_menue+0x2b0>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001b76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <settings_menue+0x32c>)
 8001b7c:	4413      	add	r3, r2
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff f80f 	bl	8000ba8 <__aeabi_d2iz>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bfb8      	it	lt
 8001b90:	425b      	neglt	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fcee 	bl	8000574 <__aeabi_i2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001c40 <settings_menue+0x320>
 8001ba0:	ec43 2b10 	vmov	d0, r2, r3
 8001ba4:	f013 ff54 	bl	8015a50 <fmod>
 8001ba8:	eeb0 7a40 	vmov.f32	s14, s0
 8001bac:	eef0 7a60 	vmov.f32	s15, s1
 8001bb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4a25      	ldr	r2, [pc, #148]	; (8001c4c <settings_menue+0x32c>)
 8001bb6:	189c      	adds	r4, r3, r2
 8001bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbc:	eef0 0a67 	vmov.f32	s1, s15
 8001bc0:	f013 ff74 	bl	8015aac <round>
 8001bc4:	eeb0 7a40 	vmov.f32	s14, s0
 8001bc8:	eef0 7a60 	vmov.f32	s15, s1
 8001bcc:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 8001bd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d019      	beq.n	8001c0a <settings_menue+0x2ea>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001bd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <settings_menue+0x32c>)
 8001bdc:	4413      	add	r3, r2
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe ffdf 	bl	8000ba8 <__aeabi_d2iz>
 8001bea:	4603      	mov	r3, r0
 8001bec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bf0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4914      	ldr	r1, [pc, #80]	; (8001c4c <settings_menue+0x32c>)
 8001bfa:	185c      	adds	r4, r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	f7fe fcb9 	bl	8000574 <__aeabi_i2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 8001c0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c0c:	2b0c      	cmp	r3, #12
 8001c0e:	d906      	bls.n	8001c1e <settings_menue+0x2fe>
							menu_cursor_position = menu_length-1;
 8001c10:	230c      	movs	r3, #12
 8001c12:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 8001c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 6){
 8001c1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d91f      	bls.n	8001c64 <settings_menue+0x344>
				menue_start = menu_cursor_position-6;
 8001c24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c26:	3b06      	subs	r3, #6
 8001c28:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c2a:	e01d      	b.n	8001c68 <settings_menue+0x348>
 8001c2c:	f3af 8000 	nop.w
 8001c30:	00000000 	.word	0x00000000
 8001c34:	412e8480 	.word	0x412e8480
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	408f4000 	.word	0x408f4000
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40000000 	.word	0x40000000
 8001c48:	48000400 	.word	0x48000400
 8001c4c:	20000550 	.word	0x20000550
 8001c50:	08016f50 	.word	0x08016f50
 8001c54:	08015d70 	.word	0x08015d70
 8001c58:	08015d7c 	.word	0x08015d7c
 8001c5c:	08015d84 	.word	0x08015d84
 8001c60:	408f4000 	.word	0x408f4000
			}
			else{
				menue_start = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 8001c68:	2120      	movs	r1, #32
 8001c6a:	4891      	ldr	r0, [pc, #580]	; (8001eb0 <settings_menue+0x590>)
 8001c6c:	f008 fbe4 	bl	800a438 <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d127      	bne.n	8001cc6 <settings_menue+0x3a6>
 8001c76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	d824      	bhi.n	8001cc6 <settings_menue+0x3a6>
				if(menue_level == 0){
 8001c7c:	8c3b      	ldrh	r3, [r7, #32]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <settings_menue+0x37e>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 8001c82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4a8b      	ldr	r2, [pc, #556]	; (8001eb4 <settings_menue+0x594>)
 8001c88:	4413      	add	r3, r2
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ffd1 	bl	8000c38 <__aeabi_d2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 8001c9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 8001c9e:	8c3b      	ldrh	r3, [r7, #32]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <settings_menue+0x392>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001ca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ca6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001caa:	005a      	lsls	r2, r3, #1
 8001cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001cb2:	8c3b      	ldrh	r3, [r7, #32]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bfb8      	it	lt
 8001cba:	425b      	neglt	r3, r3
 8001cbc:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 8001cbe:	20c8      	movs	r0, #200	; 0xc8
 8001cc0:	f004 fe1e 	bl	8006900 <HAL_Delay>
 8001cc4:	e02e      	b.n	8001d24 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	4879      	ldr	r0, [pc, #484]	; (8001eb0 <settings_menue+0x590>)
 8001cca:	f008 fbb5 	bl	800a438 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <settings_menue+0x3c0>
 8001cd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d102      	bne.n	8001ce0 <settings_menue+0x3c0>
				menu_active = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	83fb      	strh	r3, [r7, #30]
 8001cde:	e021      	b.n	8001d24 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	4873      	ldr	r0, [pc, #460]	; (8001eb0 <settings_menue+0x590>)
 8001ce4:	f008 fba8 	bl	800a438 <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d108      	bne.n	8001d00 <settings_menue+0x3e0>
 8001cee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cf0:	2b0b      	cmp	r3, #11
 8001cf2:	d105      	bne.n	8001d00 <settings_menue+0x3e0>
				menu_active = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 8001cf8:	486e      	ldr	r0, [pc, #440]	; (8001eb4 <settings_menue+0x594>)
 8001cfa:	f7ff fa53 	bl	80011a4 <FlashWrite>
 8001cfe:	e011      	b.n	8001d24 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 8001d00:	2120      	movs	r1, #32
 8001d02:	486b      	ldr	r0, [pc, #428]	; (8001eb0 <settings_menue+0x590>)
 8001d04:	f008 fb98 	bl	800a438 <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10a      	bne.n	8001d24 <settings_menue+0x404>
 8001d0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d10:	2b0a      	cmp	r3, #10
 8001d12:	d107      	bne.n	8001d24 <settings_menue+0x404>
				flash_values = default_flash_values;
 8001d14:	4a67      	ldr	r2, [pc, #412]	; (8001eb4 <settings_menue+0x594>)
 8001d16:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <settings_menue+0x598>)
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	2350      	movs	r3, #80	; 0x50
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f010 fadd 	bl	80122de <memcpy>
			}

			for(int i = menue_start;i<=menue_start+6;i++){
 8001d24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e118      	b.n	8001f5c <settings_menue+0x63c>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001d2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d12b      	bne.n	8001d8a <settings_menue+0x46a>
 8001d32:	8c3b      	ldrh	r3, [r7, #32]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d128      	bne.n	8001d8a <settings_menue+0x46a>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001d38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	461a      	mov	r2, r3
 8001d48:	0091      	lsls	r1, r2, #2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4413      	add	r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	332d      	adds	r3, #45	; 0x2d
 8001d54:	b29c      	uxth	r4, r3
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4a56      	ldr	r2, [pc, #344]	; (8001ebc <settings_menue+0x59c>)
 8001d62:	189d      	adds	r5, r3, r2
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff fbaf 	bl	80014c8 <RGB_to_BRG>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461e      	mov	r6, r3
 8001d6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d72:	f7ff fba9 	bl	80014c8 <RGB_to_BRG>
 8001d76:	4603      	mov	r3, r0
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	9600      	str	r6, [sp, #0]
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <settings_menue+0x5a0>)
 8001d7e:	462a      	mov	r2, r5
 8001d80:	4621      	mov	r1, r4
 8001d82:	2005      	movs	r0, #5
 8001d84:	f004 fca2 	bl	80066cc <LCD_PutStr>
 8001d88:	e027      	b.n	8001dda <settings_menue+0x4ba>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001d8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	0091      	lsls	r1, r2, #2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4413      	add	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	332d      	adds	r3, #45	; 0x2d
 8001da6:	b29c      	uxth	r4, r3
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4a42      	ldr	r2, [pc, #264]	; (8001ebc <settings_menue+0x59c>)
 8001db4:	189d      	adds	r5, r3, r2
 8001db6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dba:	f7ff fb85 	bl	80014c8 <RGB_to_BRG>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461e      	mov	r6, r3
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff fb80 	bl	80014c8 <RGB_to_BRG>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	9600      	str	r6, [sp, #0]
 8001dce:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <settings_menue+0x5a0>)
 8001dd0:	462a      	mov	r2, r5
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	2005      	movs	r0, #5
 8001dd6:	f004 fc79 	bl	80066cc <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2214      	movs	r2, #20
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f010 f9fc 	bl	80121de <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4a32      	ldr	r2, [pc, #200]	; (8001eb4 <settings_menue+0x594>)
 8001dec:	4413      	add	r3, r2
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	4638      	mov	r0, r7
 8001df4:	4933      	ldr	r1, [pc, #204]	; (8001ec4 <settings_menue+0x5a4>)
 8001df6:	f010 f98f 	bl	8012118 <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <settings_menue+0x594>)
 8001e00:	4413      	add	r3, r2
 8001e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <settings_menue+0x5a8>)
 8001e0c:	f7fe fe8e 	bl	8000b2c <__aeabi_dcmplt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <settings_menue+0x508>
					str[1] = 32;
 8001e16:	2320      	movs	r3, #32
 8001e18:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001e22:	2320      	movs	r3, #32
 8001e24:	713b      	strb	r3, [r7, #4]
 8001e26:	e011      	b.n	8001e4c <settings_menue+0x52c>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4a21      	ldr	r2, [pc, #132]	; (8001eb4 <settings_menue+0x594>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e34:	a31c      	add	r3, pc, #112	; (adr r3, 8001ea8 <settings_menue+0x588>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fe77 	bl	8000b2c <__aeabi_dcmplt>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <settings_menue+0x52c>
					str[2] = 32;
 8001e44:	2320      	movs	r3, #32
 8001e46:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b09      	cmp	r3, #9
 8001e50:	dc5d      	bgt.n	8001f0e <settings_menue+0x5ee>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d138      	bne.n	8001ecc <settings_menue+0x5ac>
 8001e5a:	8c3b      	ldrh	r3, [r7, #32]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d135      	bne.n	8001ecc <settings_menue+0x5ac>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	0091      	lsls	r1, r2, #2
 8001e72:	461a      	mov	r2, r3
 8001e74:	460b      	mov	r3, r1
 8001e76:	4413      	add	r3, r2
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	332d      	adds	r3, #45	; 0x2d
 8001e7c:	b29c      	uxth	r4, r3
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fb22 	bl	80014c8 <RGB_to_BRG>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461d      	mov	r5, r3
 8001e88:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e8c:	f7ff fb1c 	bl	80014c8 <RGB_to_BRG>
 8001e90:	4603      	mov	r3, r0
 8001e92:	463a      	mov	r2, r7
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	9500      	str	r5, [sp, #0]
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <settings_menue+0x5a0>)
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	20c8      	movs	r0, #200	; 0xc8
 8001e9e:	f004 fc15 	bl	80066cc <LCD_PutStr>
 8001ea2:	e034      	b.n	8001f0e <settings_menue+0x5ee>
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	4058e000 	.word	0x4058e000
 8001eb0:	48000400 	.word	0x48000400
 8001eb4:	20000550 	.word	0x20000550
 8001eb8:	20000080 	.word	0x20000080
 8001ebc:	200000d0 	.word	0x200000d0
 8001ec0:	08016f50 	.word	0x08016f50
 8001ec4:	08015d90 	.word	0x08015d90
 8001ec8:	40230000 	.word	0x40230000
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001ecc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	461a      	mov	r2, r3
 8001edc:	0091      	lsls	r1, r2, #2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	332d      	adds	r3, #45	; 0x2d
 8001ee8:	b29c      	uxth	r4, r3
 8001eea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001eee:	f7ff faeb 	bl	80014c8 <RGB_to_BRG>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fae6 	bl	80014c8 <RGB_to_BRG>
 8001efc:	4603      	mov	r3, r0
 8001efe:	463a      	mov	r2, r7
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	9500      	str	r5, [sp, #0]
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <settings_menue+0x65c>)
 8001f06:	4621      	mov	r1, r4
 8001f08:	20c8      	movs	r0, #200	; 0xc8
 8001f0a:	f004 fbdf 	bl	80066cc <LCD_PutStr>
					}
				}
				if(i >= menu_length-3){
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	dd20      	ble.n	8001f56 <settings_menue+0x636>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	461a      	mov	r2, r3
 8001f24:	0091      	lsls	r1, r2, #2
 8001f26:	461a      	mov	r2, r3
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	332d      	adds	r3, #45	; 0x2d
 8001f30:	b29c      	uxth	r4, r3
 8001f32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f36:	f7ff fac7 	bl	80014c8 <RGB_to_BRG>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461d      	mov	r5, r3
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff fac2 	bl	80014c8 <RGB_to_BRG>
 8001f44:	4603      	mov	r3, r0
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	9500      	str	r5, [sp, #0]
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <settings_menue+0x65c>)
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <settings_menue+0x660>)
 8001f4e:	4621      	mov	r1, r4
 8001f50:	20c8      	movs	r0, #200	; 0xc8
 8001f52:	f004 fbbb 	bl	80066cc <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+6;i++){
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f5e:	3306      	adds	r3, #6
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	f77f aee1 	ble.w	8001d2a <settings_menue+0x40a>
		while(menu_active == 1){
 8001f68:	8bfb      	ldrh	r3, [r7, #30]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	f43f ad94 	beq.w	8001a98 <settings_menue+0x178>
				}

			}
		}
	}
}
 8001f70:	bf00      	nop
 8001f72:	372c      	adds	r7, #44	; 0x2c
 8001f74:	46bd      	mov	sp, r7
 8001f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08016f50 	.word	0x08016f50
 8001f80:	08015d98 	.word	0x08015d98
 8001f84:	00000000 	.word	0x00000000

08001f88 <update_display>:

void update_display(){
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af02      	add	r7, sp, #8
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8001f8e:	4b86      	ldr	r3, [pc, #536]	; (80021a8 <update_display+0x220>)
 8001f90:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	f7fe fdbc 	bl	8000b18 <__aeabi_dcmpeq>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <update_display+0x38>
 8001fa6:	4b80      	ldr	r3, [pc, #512]	; (80021a8 <update_display+0x220>)
 8001fa8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb4:	f7fe fdb0 	bl	8000b18 <__aeabi_dcmpeq>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 82f0 	beq.w	80025a0 <update_display+0x618>
		memset(&buffer, '\0', sizeof(buffer));
 8001fc0:	2228      	movs	r2, #40	; 0x28
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4879      	ldr	r0, [pc, #484]	; (80021ac <update_display+0x224>)
 8001fc6:	f010 f90a 	bl	80121de <memset>
		sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001fca:	4b79      	ldr	r3, [pc, #484]	; (80021b0 <update_display+0x228>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	4978      	ldr	r1, [pc, #480]	; (80021b4 <update_display+0x22c>)
 8001fd2:	4876      	ldr	r0, [pc, #472]	; (80021ac <update_display+0x224>)
 8001fd4:	f010 f8a0 	bl	8012118 <siprintf>
		if(sensor_values.set_temperature < 99.5){
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <update_display+0x228>)
 8001fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fde:	a370      	add	r3, pc, #448	; (adr r3, 80021a0 <update_display+0x218>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe fda2 	bl	8000b2c <__aeabi_dcmplt>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <update_display+0x72>
			buffer[2] = 32;
 8001fee:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <update_display+0x224>)
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8001ff4:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <update_display+0x224>)
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	70da      	strb	r2, [r3, #3]
		}
		LCD_PutStr(14, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001ffa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ffe:	f7ff fa63 	bl	80014c8 <RGB_to_BRG>
 8002002:	4603      	mov	r3, r0
 8002004:	461c      	mov	r4, r3
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff fa5e 	bl	80014c8 <RGB_to_BRG>
 800200c:	4603      	mov	r3, r0
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	9400      	str	r4, [sp, #0]
 8002012:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <update_display+0x230>)
 8002014:	4a65      	ldr	r2, [pc, #404]	; (80021ac <update_display+0x224>)
 8002016:	214b      	movs	r1, #75	; 0x4b
 8002018:	200e      	movs	r0, #14
 800201a:	f004 fb57 	bl	80066cc <LCD_PutStr>

		if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 800201e:	4b64      	ldr	r3, [pc, #400]	; (80021b0 <update_display+0x228>)
 8002020:	edd3 7a05 	vldr	s15, [r3, #20]
 8002024:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002030:	d512      	bpl.n	8002058 <update_display+0xd0>
			LCD_PutStr(10, 165, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002032:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002036:	f7ff fa47 	bl	80014c8 <RGB_to_BRG>
 800203a:	4603      	mov	r3, r0
 800203c:	461c      	mov	r4, r3
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fa42 	bl	80014c8 <RGB_to_BRG>
 8002044:	4603      	mov	r3, r0
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	9400      	str	r4, [sp, #0]
 800204a:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <update_display+0x230>)
 800204c:	4a5b      	ldr	r2, [pc, #364]	; (80021bc <update_display+0x234>)
 800204e:	21a5      	movs	r1, #165	; 0xa5
 8002050:	200a      	movs	r0, #10
 8002052:	f004 fb3b 	bl	80066cc <LCD_PutStr>
 8002056:	e02e      	b.n	80020b6 <update_display+0x12e>
		}
		else{
			memset(&buffer, '\0', sizeof(buffer));
 8002058:	2228      	movs	r2, #40	; 0x28
 800205a:	2100      	movs	r1, #0
 800205c:	4853      	ldr	r0, [pc, #332]	; (80021ac <update_display+0x224>)
 800205e:	f010 f8be 	bl	80121de <memset>
			sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8002062:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <update_display+0x228>)
 8002064:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002068:	4952      	ldr	r1, [pc, #328]	; (80021b4 <update_display+0x22c>)
 800206a:	4850      	ldr	r0, [pc, #320]	; (80021ac <update_display+0x224>)
 800206c:	f010 f854 	bl	8012118 <siprintf>
			if(sensor_values.thermocouple_temperature < 99.5){
 8002070:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <update_display+0x228>)
 8002072:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002076:	a34a      	add	r3, pc, #296	; (adr r3, 80021a0 <update_display+0x218>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fd56 	bl	8000b2c <__aeabi_dcmplt>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <update_display+0x10a>
				buffer[2] = 32;
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <update_display+0x224>)
 8002088:	2220      	movs	r2, #32
 800208a:	709a      	strb	r2, [r3, #2]
				buffer[3] = 32;
 800208c:	4b47      	ldr	r3, [pc, #284]	; (80021ac <update_display+0x224>)
 800208e:	2220      	movs	r2, #32
 8002090:	70da      	strb	r2, [r3, #3]
			}
			LCD_PutStr(14, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002092:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002096:	f7ff fa17 	bl	80014c8 <RGB_to_BRG>
 800209a:	4603      	mov	r3, r0
 800209c:	461c      	mov	r4, r3
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff fa12 	bl	80014c8 <RGB_to_BRG>
 80020a4:	4603      	mov	r3, r0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	9400      	str	r4, [sp, #0]
 80020aa:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <update_display+0x230>)
 80020ac:	4a3f      	ldr	r2, [pc, #252]	; (80021ac <update_display+0x224>)
 80020ae:	21a5      	movs	r1, #165	; 0xa5
 80020b0:	200e      	movs	r0, #14
 80020b2:	f004 fb0b 	bl	80066cc <LCD_PutStr>
		}

		memset(&buffer, '\0', sizeof(buffer));
 80020b6:	2228      	movs	r2, #40	; 0x28
 80020b8:	2100      	movs	r1, #0
 80020ba:	483c      	ldr	r0, [pc, #240]	; (80021ac <update_display+0x224>)
 80020bc:	f010 f88f 	bl	80121de <memset>
		sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 80020c0:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <update_display+0x228>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fa67 	bl	8000598 <__aeabi_f2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	493c      	ldr	r1, [pc, #240]	; (80021c0 <update_display+0x238>)
 80020d0:	4836      	ldr	r0, [pc, #216]	; (80021ac <update_display+0x224>)
 80020d2:	f010 f821 	bl	8012118 <siprintf>
		LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80020d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020da:	f7ff f9f5 	bl	80014c8 <RGB_to_BRG>
 80020de:	4603      	mov	r3, r0
 80020e0:	461c      	mov	r4, r3
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff f9f0 	bl	80014c8 <RGB_to_BRG>
 80020e8:	4603      	mov	r3, r0
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	9400      	str	r4, [sp, #0]
 80020ee:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <update_display+0x23c>)
 80020f0:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <update_display+0x224>)
 80020f2:	21ff      	movs	r1, #255	; 0xff
 80020f4:	2064      	movs	r0, #100	; 0x64
 80020f6:	f004 fae9 	bl	80066cc <LCD_PutStr>

		memset(&buffer, '\0', sizeof(buffer));
 80020fa:	2228      	movs	r2, #40	; 0x28
 80020fc:	2100      	movs	r1, #0
 80020fe:	482b      	ldr	r0, [pc, #172]	; (80021ac <update_display+0x224>)
 8002100:	f010 f86d 	bl	80121de <memset>
		sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <update_display+0x228>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fa45 	bl	8000598 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	492b      	ldr	r1, [pc, #172]	; (80021c0 <update_display+0x238>)
 8002114:	4825      	ldr	r0, [pc, #148]	; (80021ac <update_display+0x224>)
 8002116:	f00f ffff 	bl	8012118 <siprintf>
		LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800211a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800211e:	f7ff f9d3 	bl	80014c8 <RGB_to_BRG>
 8002122:	4603      	mov	r3, r0
 8002124:	461c      	mov	r4, r3
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff f9ce 	bl	80014c8 <RGB_to_BRG>
 800212c:	4603      	mov	r3, r0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	9400      	str	r4, [sp, #0]
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <update_display+0x23c>)
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <update_display+0x224>)
 8002136:	f240 1113 	movw	r1, #275	; 0x113
 800213a:	2064      	movs	r0, #100	; 0x64
 800213c:	f004 fac6 	bl	80066cc <LCD_PutStr>

		if(handle == T210){
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <update_display+0x240>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d112      	bne.n	800216e <update_display+0x1e6>
			LCD_PutStr(100, 235, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002148:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800214c:	f7ff f9bc 	bl	80014c8 <RGB_to_BRG>
 8002150:	4603      	mov	r3, r0
 8002152:	461c      	mov	r4, r3
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff f9b7 	bl	80014c8 <RGB_to_BRG>
 800215a:	4603      	mov	r3, r0
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	9400      	str	r4, [sp, #0]
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <update_display+0x23c>)
 8002162:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <update_display+0x244>)
 8002164:	21eb      	movs	r1, #235	; 0xeb
 8002166:	2064      	movs	r0, #100	; 0x64
 8002168:	f004 fab0 	bl	80066cc <LCD_PutStr>
 800216c:	e048      	b.n	8002200 <update_display+0x278>
		}
		else if(handle == T245){
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <update_display+0x240>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d12e      	bne.n	80021d4 <update_display+0x24c>
			LCD_PutStr(100, 235, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002176:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800217a:	f7ff f9a5 	bl	80014c8 <RGB_to_BRG>
 800217e:	4603      	mov	r3, r0
 8002180:	461c      	mov	r4, r3
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff f9a0 	bl	80014c8 <RGB_to_BRG>
 8002188:	4603      	mov	r3, r0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	9400      	str	r4, [sp, #0]
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <update_display+0x23c>)
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <update_display+0x248>)
 8002192:	21eb      	movs	r1, #235	; 0xeb
 8002194:	2064      	movs	r0, #100	; 0x64
 8002196:	f004 fa99 	bl	80066cc <LCD_PutStr>
 800219a:	e031      	b.n	8002200 <update_display+0x278>
 800219c:	f3af 8000 	nop.w
 80021a0:	00000000 	.word	0x00000000
 80021a4:	4058e000 	.word	0x4058e000
 80021a8:	20000550 	.word	0x20000550
 80021ac:	200004a8 	.word	0x200004a8
 80021b0:	20000030 	.word	0x20000030
 80021b4:	08015da0 	.word	0x08015da0
 80021b8:	08017f40 	.word	0x08017f40
 80021bc:	08015da4 	.word	0x08015da4
 80021c0:	08015dac 	.word	0x08015dac
 80021c4:	08015f80 	.word	0x08015f80
 80021c8:	20000460 	.word	0x20000460
 80021cc:	08015db4 	.word	0x08015db4
 80021d0:	08015dbc 	.word	0x08015dbc
		}
		else if(handle == NT115){
 80021d4:	4bab      	ldr	r3, [pc, #684]	; (8002484 <update_display+0x4fc>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d111      	bne.n	8002200 <update_display+0x278>
			LCD_PutStr(100, 235, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80021dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021e0:	f7ff f972 	bl	80014c8 <RGB_to_BRG>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461c      	mov	r4, r3
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7ff f96d 	bl	80014c8 <RGB_to_BRG>
 80021ee:	4603      	mov	r3, r0
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	9400      	str	r4, [sp, #0]
 80021f4:	4ba4      	ldr	r3, [pc, #656]	; (8002488 <update_display+0x500>)
 80021f6:	4aa5      	ldr	r2, [pc, #660]	; (800248c <update_display+0x504>)
 80021f8:	21eb      	movs	r1, #235	; 0xeb
 80021fa:	2064      	movs	r0, #100	; 0x64
 80021fc:	f004 fa66 	bl	80066cc <LCD_PutStr>
		}

		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002200:	4ba3      	ldr	r3, [pc, #652]	; (8002490 <update_display+0x508>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d008      	beq.n	800221a <update_display+0x292>
 8002208:	4ba1      	ldr	r3, [pc, #644]	; (8002490 <update_display+0x508>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d004      	beq.n	800221a <update_display+0x292>
 8002210:	4b9f      	ldr	r3, [pc, #636]	; (8002490 <update_display+0x508>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b04      	cmp	r3, #4
 8002216:	f040 8098 	bne.w	800234a <update_display+0x3c2>
 800221a:	4b9e      	ldr	r3, [pc, #632]	; (8002494 <update_display+0x50c>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 8093 	bne.w	800234a <update_display+0x3c2>
			UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 8002224:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002228:	f7ff f94e 	bl	80014c8 <RGB_to_BRG>
 800222c:	4603      	mov	r3, r0
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8002234:	22e6      	movs	r2, #230	; 0xe6
 8002236:	2137      	movs	r1, #55	; 0x37
 8002238:	20d2      	movs	r0, #210	; 0xd2
 800223a:	f00d fa29 	bl	800f690 <UG_FillFrame>
			LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff f942 	bl	80014c8 <RGB_to_BRG>
 8002244:	4603      	mov	r3, r0
 8002246:	461c      	mov	r4, r3
 8002248:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800224c:	f7ff f93c 	bl	80014c8 <RGB_to_BRG>
 8002250:	4603      	mov	r3, r0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	9400      	str	r4, [sp, #0]
 8002256:	4b90      	ldr	r3, [pc, #576]	; (8002498 <update_display+0x510>)
 8002258:	4a90      	ldr	r2, [pc, #576]	; (800249c <update_display+0x514>)
 800225a:	213a      	movs	r1, #58	; 0x3a
 800225c:	20d6      	movs	r0, #214	; 0xd6
 800225e:	f004 fa35 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002262:	2000      	movs	r0, #0
 8002264:	f7ff f930 	bl	80014c8 <RGB_to_BRG>
 8002268:	4603      	mov	r3, r0
 800226a:	461c      	mov	r4, r3
 800226c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002270:	f7ff f92a 	bl	80014c8 <RGB_to_BRG>
 8002274:	4603      	mov	r3, r0
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	9400      	str	r4, [sp, #0]
 800227a:	4b87      	ldr	r3, [pc, #540]	; (8002498 <update_display+0x510>)
 800227c:	4a88      	ldr	r2, [pc, #544]	; (80024a0 <update_display+0x518>)
 800227e:	215c      	movs	r1, #92	; 0x5c
 8002280:	20d8      	movs	r0, #216	; 0xd8
 8002282:	f004 fa23 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002286:	2000      	movs	r0, #0
 8002288:	f7ff f91e 	bl	80014c8 <RGB_to_BRG>
 800228c:	4603      	mov	r3, r0
 800228e:	461c      	mov	r4, r3
 8002290:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002294:	f7ff f918 	bl	80014c8 <RGB_to_BRG>
 8002298:	4603      	mov	r3, r0
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	9400      	str	r4, [sp, #0]
 800229e:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <update_display+0x510>)
 80022a0:	4a7e      	ldr	r2, [pc, #504]	; (800249c <update_display+0x514>)
 80022a2:	217e      	movs	r1, #126	; 0x7e
 80022a4:	20d6      	movs	r0, #214	; 0xd6
 80022a6:	f004 fa11 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff f90c 	bl	80014c8 <RGB_to_BRG>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461c      	mov	r4, r3
 80022b4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022b8:	f7ff f906 	bl	80014c8 <RGB_to_BRG>
 80022bc:	4603      	mov	r3, r0
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	9400      	str	r4, [sp, #0]
 80022c2:	4b75      	ldr	r3, [pc, #468]	; (8002498 <update_display+0x510>)
 80022c4:	4a76      	ldr	r2, [pc, #472]	; (80024a0 <update_display+0x518>)
 80022c6:	21a1      	movs	r1, #161	; 0xa1
 80022c8:	20d8      	movs	r0, #216	; 0xd8
 80022ca:	f004 f9ff 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff f8fa 	bl	80014c8 <RGB_to_BRG>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461c      	mov	r4, r3
 80022d8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022dc:	f7ff f8f4 	bl	80014c8 <RGB_to_BRG>
 80022e0:	4603      	mov	r3, r0
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	9400      	str	r4, [sp, #0]
 80022e6:	4b6c      	ldr	r3, [pc, #432]	; (8002498 <update_display+0x510>)
 80022e8:	4a6c      	ldr	r2, [pc, #432]	; (800249c <update_display+0x514>)
 80022ea:	21c2      	movs	r1, #194	; 0xc2
 80022ec:	20d6      	movs	r0, #214	; 0xd6
 80022ee:	f004 f9ed 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7ff f8e8 	bl	80014c8 <RGB_to_BRG>
 80022f8:	4603      	mov	r3, r0
 80022fa:	461c      	mov	r4, r3
 80022fc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002300:	f7ff f8e2 	bl	80014c8 <RGB_to_BRG>
 8002304:	4603      	mov	r3, r0
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	9400      	str	r4, [sp, #0]
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <update_display+0x510>)
 800230c:	4a64      	ldr	r2, [pc, #400]	; (80024a0 <update_display+0x518>)
 800230e:	21e4      	movs	r1, #228	; 0xe4
 8002310:	20d8      	movs	r0, #216	; 0xd8
 8002312:	f004 f9db 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002316:	2000      	movs	r0, #0
 8002318:	f7ff f8d6 	bl	80014c8 <RGB_to_BRG>
 800231c:	4603      	mov	r3, r0
 800231e:	461c      	mov	r4, r3
 8002320:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002324:	f7ff f8d0 	bl	80014c8 <RGB_to_BRG>
 8002328:	4603      	mov	r3, r0
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	9400      	str	r4, [sp, #0]
 800232e:	4b5a      	ldr	r3, [pc, #360]	; (8002498 <update_display+0x510>)
 8002330:	4a5a      	ldr	r2, [pc, #360]	; (800249c <update_display+0x514>)
 8002332:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002336:	20d6      	movs	r0, #214	; 0xd6
 8002338:	f004 f9c8 	bl	80066cc <LCD_PutStr>
			sleep_state_written_to_LCD = 1;
 800233c:	4b55      	ldr	r3, [pc, #340]	; (8002494 <update_display+0x50c>)
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
			standby_state_written_to_LCD = 0;
 8002342:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <update_display+0x51c>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e129      	b.n	800259e <update_display+0x616>
		}
		else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 800234a:	4b51      	ldr	r3, [pc, #324]	; (8002490 <update_display+0x508>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	f040 80b8 	bne.w	80024c4 <update_display+0x53c>
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <update_display+0x51c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 80b3 	bne.w	80024c4 <update_display+0x53c>
			UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 800235e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002362:	f7ff f8b1 	bl	80014c8 <RGB_to_BRG>
 8002366:	4603      	mov	r3, r0
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	f44f 738f 	mov.w	r3, #286	; 0x11e
 800236e:	22e6      	movs	r2, #230	; 0xe6
 8002370:	2137      	movs	r1, #55	; 0x37
 8002372:	20d2      	movs	r0, #210	; 0xd2
 8002374:	f00d f98c 	bl	800f690 <UG_FillFrame>
			LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff f8a5 	bl	80014c8 <RGB_to_BRG>
 800237e:	4603      	mov	r3, r0
 8002380:	461c      	mov	r4, r3
 8002382:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002386:	f7ff f89f 	bl	80014c8 <RGB_to_BRG>
 800238a:	4603      	mov	r3, r0
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	9400      	str	r4, [sp, #0]
 8002390:	4b41      	ldr	r3, [pc, #260]	; (8002498 <update_display+0x510>)
 8002392:	4a45      	ldr	r2, [pc, #276]	; (80024a8 <update_display+0x520>)
 8002394:	213a      	movs	r1, #58	; 0x3a
 8002396:	20d6      	movs	r0, #214	; 0xd6
 8002398:	f004 f998 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff f893 	bl	80014c8 <RGB_to_BRG>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461c      	mov	r4, r3
 80023a6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023aa:	f7ff f88d 	bl	80014c8 <RGB_to_BRG>
 80023ae:	4603      	mov	r3, r0
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	9400      	str	r4, [sp, #0]
 80023b4:	4b38      	ldr	r3, [pc, #224]	; (8002498 <update_display+0x510>)
 80023b6:	4a3d      	ldr	r2, [pc, #244]	; (80024ac <update_display+0x524>)
 80023b8:	215c      	movs	r1, #92	; 0x5c
 80023ba:	20d6      	movs	r0, #214	; 0xd6
 80023bc:	f004 f986 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff f881 	bl	80014c8 <RGB_to_BRG>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461c      	mov	r4, r3
 80023ca:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023ce:	f7ff f87b 	bl	80014c8 <RGB_to_BRG>
 80023d2:	4603      	mov	r3, r0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	9400      	str	r4, [sp, #0]
 80023d8:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <update_display+0x510>)
 80023da:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <update_display+0x528>)
 80023dc:	217e      	movs	r1, #126	; 0x7e
 80023de:	20d6      	movs	r0, #214	; 0xd6
 80023e0:	f004 f974 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff f86f 	bl	80014c8 <RGB_to_BRG>
 80023ea:	4603      	mov	r3, r0
 80023ec:	461c      	mov	r4, r3
 80023ee:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023f2:	f7ff f869 	bl	80014c8 <RGB_to_BRG>
 80023f6:	4603      	mov	r3, r0
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	9400      	str	r4, [sp, #0]
 80023fc:	4b26      	ldr	r3, [pc, #152]	; (8002498 <update_display+0x510>)
 80023fe:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <update_display+0x52c>)
 8002400:	21a1      	movs	r1, #161	; 0xa1
 8002402:	20d6      	movs	r0, #214	; 0xd6
 8002404:	f004 f962 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff f85d 	bl	80014c8 <RGB_to_BRG>
 800240e:	4603      	mov	r3, r0
 8002410:	461c      	mov	r4, r3
 8002412:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002416:	f7ff f857 	bl	80014c8 <RGB_to_BRG>
 800241a:	4603      	mov	r3, r0
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	9400      	str	r4, [sp, #0]
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <update_display+0x510>)
 8002422:	4a25      	ldr	r2, [pc, #148]	; (80024b8 <update_display+0x530>)
 8002424:	21c2      	movs	r1, #194	; 0xc2
 8002426:	20d6      	movs	r0, #214	; 0xd6
 8002428:	f004 f950 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff f84b 	bl	80014c8 <RGB_to_BRG>
 8002432:	4603      	mov	r3, r0
 8002434:	461c      	mov	r4, r3
 8002436:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800243a:	f7ff f845 	bl	80014c8 <RGB_to_BRG>
 800243e:	4603      	mov	r3, r0
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	9400      	str	r4, [sp, #0]
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <update_display+0x510>)
 8002446:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <update_display+0x534>)
 8002448:	21e4      	movs	r1, #228	; 0xe4
 800244a:	20d6      	movs	r0, #214	; 0xd6
 800244c:	f004 f93e 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002450:	2000      	movs	r0, #0
 8002452:	f7ff f839 	bl	80014c8 <RGB_to_BRG>
 8002456:	4603      	mov	r3, r0
 8002458:	461c      	mov	r4, r3
 800245a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800245e:	f7ff f833 	bl	80014c8 <RGB_to_BRG>
 8002462:	4603      	mov	r3, r0
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	9400      	str	r4, [sp, #0]
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <update_display+0x510>)
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <update_display+0x538>)
 800246c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002470:	20d6      	movs	r0, #214	; 0xd6
 8002472:	f004 f92b 	bl	80066cc <LCD_PutStr>
			standby_state_written_to_LCD = 1;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <update_display+0x51c>)
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <update_display+0x50c>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	e08c      	b.n	800259e <update_display+0x616>
 8002484:	20000460 	.word	0x20000460
 8002488:	08015f80 	.word	0x08015f80
 800248c:	08015dc4 	.word	0x08015dc4
 8002490:	2000001d 	.word	0x2000001d
 8002494:	20000487 	.word	0x20000487
 8002498:	08016f50 	.word	0x08016f50
 800249c:	08015dcc 	.word	0x08015dcc
 80024a0:	08015dd0 	.word	0x08015dd0
 80024a4:	20000488 	.word	0x20000488
 80024a8:	08015dd4 	.word	0x08015dd4
 80024ac:	08015dd8 	.word	0x08015dd8
 80024b0:	08015ddc 	.word	0x08015ddc
 80024b4:	08015de0 	.word	0x08015de0
 80024b8:	08015de4 	.word	0x08015de4
 80024bc:	08015de8 	.word	0x08015de8
 80024c0:	08015dec 	.word	0x08015dec
		}
		else if(active_state == RUN){
 80024c4:	4bb4      	ldr	r3, [pc, #720]	; (8002798 <update_display+0x810>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 836a 	bne.w	8002ba2 <update_display+0xc1a>
			UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 80024ce:	4bb3      	ldr	r3, [pc, #716]	; (800279c <update_display+0x814>)
 80024d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	4bb1      	ldr	r3, [pc, #708]	; (80027a0 <update_display+0x818>)
 80024da:	f7fe f9df 	bl	800089c <__aeabi_ddiv>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	4bae      	ldr	r3, [pc, #696]	; (80027a4 <update_display+0x81c>)
 80024ec:	f7fe f8ac 	bl	8000648 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	a1a2      	add	r1, pc, #648	; (adr r1, 8002780 <update_display+0x7f8>)
 80024f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024fa:	f7fd feed 	bl	80002d8 <__aeabi_dsub>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fb4f 	bl	8000ba8 <__aeabi_d2iz>
 800250a:	4603      	mov	r3, r0
 800250c:	b21c      	sxth	r4, r3
 800250e:	f248 607e 	movw	r0, #34430	; 0x867e
 8002512:	f7fe ffd9 	bl	80014c8 <RGB_to_BRG>
 8002516:	4603      	mov	r3, r0
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f240 131f 	movw	r3, #287	; 0x11f
 800251e:	22e6      	movs	r2, #230	; 0xe6
 8002520:	4621      	mov	r1, r4
 8002522:	20d2      	movs	r0, #210	; 0xd2
 8002524:	f00d f8b4 	bl	800f690 <UG_FillFrame>
			UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 8002528:	4b9c      	ldr	r3, [pc, #624]	; (800279c <update_display+0x814>)
 800252a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	4b9b      	ldr	r3, [pc, #620]	; (80027a0 <update_display+0x818>)
 8002534:	f7fe f9b2 	bl	800089c <__aeabi_ddiv>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	a391      	add	r3, pc, #580	; (adr r3, 8002788 <update_display+0x800>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe f87f 	bl	8000648 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	a18c      	add	r1, pc, #560	; (adr r1, 8002780 <update_display+0x7f8>)
 8002550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002554:	f7fd fec0 	bl	80002d8 <__aeabi_dsub>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	4b90      	ldr	r3, [pc, #576]	; (80027a8 <update_display+0x820>)
 8002566:	f7fd feb7 	bl	80002d8 <__aeabi_dsub>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb19 	bl	8000ba8 <__aeabi_d2iz>
 8002576:	4603      	mov	r3, r0
 8002578:	b21c      	sxth	r4, r3
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe ffa4 	bl	80014c8 <RGB_to_BRG>
 8002580:	4603      	mov	r3, r0
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	4623      	mov	r3, r4
 8002586:	22e6      	movs	r2, #230	; 0xe6
 8002588:	2137      	movs	r1, #55	; 0x37
 800258a:	20d2      	movs	r0, #210	; 0xd2
 800258c:	f00d f880 	bl	800f690 <UG_FillFrame>
			standby_state_written_to_LCD = 0;
 8002590:	4b86      	ldr	r3, [pc, #536]	; (80027ac <update_display+0x824>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002596:	4b86      	ldr	r3, [pc, #536]	; (80027b0 <update_display+0x828>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 800259c:	e301      	b.n	8002ba2 <update_display+0xc1a>
 800259e:	e300      	b.n	8002ba2 <update_display+0xc1a>
		}
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 80025a0:	2228      	movs	r2, #40	; 0x28
 80025a2:	2100      	movs	r1, #0
 80025a4:	4883      	ldr	r0, [pc, #524]	; (80027b4 <update_display+0x82c>)
 80025a6:	f00f fe1a 	bl	80121de <memset>
		sprintf(buffer, "%.f", sensor_values.set_temperature);
 80025aa:	4b83      	ldr	r3, [pc, #524]	; (80027b8 <update_display+0x830>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	4982      	ldr	r1, [pc, #520]	; (80027bc <update_display+0x834>)
 80025b2:	4880      	ldr	r0, [pc, #512]	; (80027b4 <update_display+0x82c>)
 80025b4:	f00f fdb0 	bl	8012118 <siprintf>
		if(sensor_values.set_temperature < 99.5){
 80025b8:	4b7f      	ldr	r3, [pc, #508]	; (80027b8 <update_display+0x830>)
 80025ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025be:	a374      	add	r3, pc, #464	; (adr r3, 8002790 <update_display+0x808>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fe fab2 	bl	8000b2c <__aeabi_dcmplt>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <update_display+0x652>
			buffer[2] = 32;
 80025ce:	4b79      	ldr	r3, [pc, #484]	; (80027b4 <update_display+0x82c>)
 80025d0:	2220      	movs	r2, #32
 80025d2:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 80025d4:	4b77      	ldr	r3, [pc, #476]	; (80027b4 <update_display+0x82c>)
 80025d6:	2220      	movs	r2, #32
 80025d8:	70da      	strb	r2, [r3, #3]
		}
		LCD_PutStr(14, 30, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80025da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025de:	f7fe ff73 	bl	80014c8 <RGB_to_BRG>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461c      	mov	r4, r3
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe ff6e 	bl	80014c8 <RGB_to_BRG>
 80025ec:	4603      	mov	r3, r0
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	9400      	str	r4, [sp, #0]
 80025f2:	4b73      	ldr	r3, [pc, #460]	; (80027c0 <update_display+0x838>)
 80025f4:	4a6f      	ldr	r2, [pc, #444]	; (80027b4 <update_display+0x82c>)
 80025f6:	211e      	movs	r1, #30
 80025f8:	200e      	movs	r0, #14
 80025fa:	f004 f867 	bl	80066cc <LCD_PutStr>

		if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 80025fe:	4b6e      	ldr	r3, [pc, #440]	; (80027b8 <update_display+0x830>)
 8002600:	edd3 7a05 	vldr	s15, [r3, #20]
 8002604:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002610:	d512      	bpl.n	8002638 <update_display+0x6b0>
			LCD_PutStr(10, 120, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002612:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002616:	f7fe ff57 	bl	80014c8 <RGB_to_BRG>
 800261a:	4603      	mov	r3, r0
 800261c:	461c      	mov	r4, r3
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe ff52 	bl	80014c8 <RGB_to_BRG>
 8002624:	4603      	mov	r3, r0
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	9400      	str	r4, [sp, #0]
 800262a:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <update_display+0x838>)
 800262c:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <update_display+0x83c>)
 800262e:	2178      	movs	r1, #120	; 0x78
 8002630:	200a      	movs	r0, #10
 8002632:	f004 f84b 	bl	80066cc <LCD_PutStr>
 8002636:	e02e      	b.n	8002696 <update_display+0x70e>
		}
		else{
			memset(&buffer, '\0', sizeof(buffer));
 8002638:	2228      	movs	r2, #40	; 0x28
 800263a:	2100      	movs	r1, #0
 800263c:	485d      	ldr	r0, [pc, #372]	; (80027b4 <update_display+0x82c>)
 800263e:	f00f fdce 	bl	80121de <memset>
			sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8002642:	4b5d      	ldr	r3, [pc, #372]	; (80027b8 <update_display+0x830>)
 8002644:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002648:	495c      	ldr	r1, [pc, #368]	; (80027bc <update_display+0x834>)
 800264a:	485a      	ldr	r0, [pc, #360]	; (80027b4 <update_display+0x82c>)
 800264c:	f00f fd64 	bl	8012118 <siprintf>
			if(sensor_values.thermocouple_temperature < 99.5){
 8002650:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <update_display+0x830>)
 8002652:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002656:	a34e      	add	r3, pc, #312	; (adr r3, 8002790 <update_display+0x808>)
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	f7fe fa66 	bl	8000b2c <__aeabi_dcmplt>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <update_display+0x6ea>
				buffer[2] = 32;
 8002666:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <update_display+0x82c>)
 8002668:	2220      	movs	r2, #32
 800266a:	709a      	strb	r2, [r3, #2]
				buffer[3] = 32;
 800266c:	4b51      	ldr	r3, [pc, #324]	; (80027b4 <update_display+0x82c>)
 800266e:	2220      	movs	r2, #32
 8002670:	70da      	strb	r2, [r3, #3]
			}
			LCD_PutStr(14, 120, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002672:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002676:	f7fe ff27 	bl	80014c8 <RGB_to_BRG>
 800267a:	4603      	mov	r3, r0
 800267c:	461c      	mov	r4, r3
 800267e:	2000      	movs	r0, #0
 8002680:	f7fe ff22 	bl	80014c8 <RGB_to_BRG>
 8002684:	4603      	mov	r3, r0
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	9400      	str	r4, [sp, #0]
 800268a:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <update_display+0x838>)
 800268c:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <update_display+0x82c>)
 800268e:	2178      	movs	r1, #120	; 0x78
 8002690:	200e      	movs	r0, #14
 8002692:	f004 f81b 	bl	80066cc <LCD_PutStr>
		}

		memset(&buffer, '\0', sizeof(buffer));
 8002696:	2228      	movs	r2, #40	; 0x28
 8002698:	2100      	movs	r1, #0
 800269a:	4846      	ldr	r0, [pc, #280]	; (80027b4 <update_display+0x82c>)
 800269c:	f00f fd9f 	bl	80121de <memset>
		sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 80026a0:	4b45      	ldr	r3, [pc, #276]	; (80027b8 <update_display+0x830>)
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff77 	bl	8000598 <__aeabi_f2d>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4946      	ldr	r1, [pc, #280]	; (80027c8 <update_display+0x840>)
 80026b0:	4840      	ldr	r0, [pc, #256]	; (80027b4 <update_display+0x82c>)
 80026b2:	f00f fd31 	bl	8012118 <siprintf>
		LCD_PutStr(100, 195, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026ba:	f7fe ff05 	bl	80014c8 <RGB_to_BRG>
 80026be:	4603      	mov	r3, r0
 80026c0:	461c      	mov	r4, r3
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7fe ff00 	bl	80014c8 <RGB_to_BRG>
 80026c8:	4603      	mov	r3, r0
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	9400      	str	r4, [sp, #0]
 80026ce:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <update_display+0x844>)
 80026d0:	4a38      	ldr	r2, [pc, #224]	; (80027b4 <update_display+0x82c>)
 80026d2:	21c3      	movs	r1, #195	; 0xc3
 80026d4:	2064      	movs	r0, #100	; 0x64
 80026d6:	f003 fff9 	bl	80066cc <LCD_PutStr>

		memset(&buffer, '\0', sizeof(buffer));
 80026da:	2228      	movs	r2, #40	; 0x28
 80026dc:	2100      	movs	r1, #0
 80026de:	4835      	ldr	r0, [pc, #212]	; (80027b4 <update_display+0x82c>)
 80026e0:	f00f fd7d 	bl	80121de <memset>
		sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 80026e4:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <update_display+0x830>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd ff55 	bl	8000598 <__aeabi_f2d>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4935      	ldr	r1, [pc, #212]	; (80027c8 <update_display+0x840>)
 80026f4:	482f      	ldr	r0, [pc, #188]	; (80027b4 <update_display+0x82c>)
 80026f6:	f00f fd0f 	bl	8012118 <siprintf>
		LCD_PutStr(100, 210, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026fe:	f7fe fee3 	bl	80014c8 <RGB_to_BRG>
 8002702:	4603      	mov	r3, r0
 8002704:	461c      	mov	r4, r3
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe fede 	bl	80014c8 <RGB_to_BRG>
 800270c:	4603      	mov	r3, r0
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	9400      	str	r4, [sp, #0]
 8002712:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <update_display+0x844>)
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <update_display+0x82c>)
 8002716:	21d2      	movs	r1, #210	; 0xd2
 8002718:	2064      	movs	r0, #100	; 0x64
 800271a:	f003 ffd7 	bl	80066cc <LCD_PutStr>

		if(handle == T210){
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <update_display+0x848>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d112      	bne.n	800274c <update_display+0x7c4>
			LCD_PutStr(100, 180, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002726:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800272a:	f7fe fecd 	bl	80014c8 <RGB_to_BRG>
 800272e:	4603      	mov	r3, r0
 8002730:	461c      	mov	r4, r3
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe fec8 	bl	80014c8 <RGB_to_BRG>
 8002738:	4603      	mov	r3, r0
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	9400      	str	r4, [sp, #0]
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <update_display+0x844>)
 8002740:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <update_display+0x84c>)
 8002742:	21b4      	movs	r1, #180	; 0xb4
 8002744:	2064      	movs	r0, #100	; 0x64
 8002746:	f003 ffc1 	bl	80066cc <LCD_PutStr>
 800274a:	e05d      	b.n	8002808 <update_display+0x880>
		}
		else if(handle == T245){
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <update_display+0x848>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d143      	bne.n	80027dc <update_display+0x854>
			LCD_PutStr(100, 180, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002754:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002758:	f7fe feb6 	bl	80014c8 <RGB_to_BRG>
 800275c:	4603      	mov	r3, r0
 800275e:	461c      	mov	r4, r3
 8002760:	2000      	movs	r0, #0
 8002762:	f7fe feb1 	bl	80014c8 <RGB_to_BRG>
 8002766:	4603      	mov	r3, r0
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	9400      	str	r4, [sp, #0]
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <update_display+0x844>)
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <update_display+0x850>)
 8002770:	21b4      	movs	r1, #180	; 0xb4
 8002772:	2064      	movs	r0, #100	; 0x64
 8002774:	f003 ffaa 	bl	80066cc <LCD_PutStr>
 8002778:	e046      	b.n	8002808 <update_display+0x880>
 800277a:	bf00      	nop
 800277c:	f3af 8000 	nop.w
 8002780:	00000000 	.word	0x00000000
 8002784:	4071f000 	.word	0x4071f000
 8002788:	00000000 	.word	0x00000000
 800278c:	406ce000 	.word	0x406ce000
 8002790:	00000000 	.word	0x00000000
 8002794:	4058e000 	.word	0x4058e000
 8002798:	2000001d 	.word	0x2000001d
 800279c:	200005a0 	.word	0x200005a0
 80027a0:	407f4000 	.word	0x407f4000
 80027a4:	406d0000 	.word	0x406d0000
 80027a8:	3ff00000 	.word	0x3ff00000
 80027ac:	20000488 	.word	0x20000488
 80027b0:	20000487 	.word	0x20000487
 80027b4:	200004a8 	.word	0x200004a8
 80027b8:	20000030 	.word	0x20000030
 80027bc:	08015da0 	.word	0x08015da0
 80027c0:	08017f40 	.word	0x08017f40
 80027c4:	08015da4 	.word	0x08015da4
 80027c8:	08015dac 	.word	0x08015dac
 80027cc:	08015f80 	.word	0x08015f80
 80027d0:	20000460 	.word	0x20000460
 80027d4:	08015db4 	.word	0x08015db4
 80027d8:	08015dbc 	.word	0x08015dbc
		}
		else if(handle == NT115){
 80027dc:	4ba9      	ldr	r3, [pc, #676]	; (8002a84 <update_display+0xafc>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <update_display+0x880>
			LCD_PutStr(100, 180, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80027e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027e8:	f7fe fe6e 	bl	80014c8 <RGB_to_BRG>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461c      	mov	r4, r3
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe fe69 	bl	80014c8 <RGB_to_BRG>
 80027f6:	4603      	mov	r3, r0
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	9400      	str	r4, [sp, #0]
 80027fc:	4ba2      	ldr	r3, [pc, #648]	; (8002a88 <update_display+0xb00>)
 80027fe:	4aa3      	ldr	r2, [pc, #652]	; (8002a8c <update_display+0xb04>)
 8002800:	21b4      	movs	r1, #180	; 0xb4
 8002802:	2064      	movs	r0, #100	; 0x64
 8002804:	f003 ff62 	bl	80066cc <LCD_PutStr>
		}

		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002808:	4ba1      	ldr	r3, [pc, #644]	; (8002a90 <update_display+0xb08>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d008      	beq.n	8002822 <update_display+0x89a>
 8002810:	4b9f      	ldr	r3, [pc, #636]	; (8002a90 <update_display+0xb08>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d004      	beq.n	8002822 <update_display+0x89a>
 8002818:	4b9d      	ldr	r3, [pc, #628]	; (8002a90 <update_display+0xb08>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b04      	cmp	r3, #4
 800281e:	f040 808c 	bne.w	800293a <update_display+0x9b2>
 8002822:	4b9c      	ldr	r3, [pc, #624]	; (8002a94 <update_display+0xb0c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8087 	bne.w	800293a <update_display+0x9b2>
			UG_FillFrame(290,5,310,226, RGB_to_BRG(C_ORANGE));
 800282c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002830:	f7fe fe4a 	bl	80014c8 <RGB_to_BRG>
 8002834:	4603      	mov	r3, r0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	23e2      	movs	r3, #226	; 0xe2
 800283a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800283e:	2105      	movs	r1, #5
 8002840:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002844:	f00c ff24 	bl	800f690 <UG_FillFrame>

			LCD_PutStr(294, 3,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe fe3d 	bl	80014c8 <RGB_to_BRG>
 800284e:	4603      	mov	r3, r0
 8002850:	461c      	mov	r4, r3
 8002852:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002856:	f7fe fe37 	bl	80014c8 <RGB_to_BRG>
 800285a:	4603      	mov	r3, r0
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	9400      	str	r4, [sp, #0]
 8002860:	4b8d      	ldr	r3, [pc, #564]	; (8002a98 <update_display+0xb10>)
 8002862:	4a8e      	ldr	r2, [pc, #568]	; (8002a9c <update_display+0xb14>)
 8002864:	2103      	movs	r1, #3
 8002866:	f44f 7093 	mov.w	r0, #294	; 0x126
 800286a:	f003 ff2f 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(296, 38, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe fe2a 	bl	80014c8 <RGB_to_BRG>
 8002874:	4603      	mov	r3, r0
 8002876:	461c      	mov	r4, r3
 8002878:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800287c:	f7fe fe24 	bl	80014c8 <RGB_to_BRG>
 8002880:	4603      	mov	r3, r0
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	9400      	str	r4, [sp, #0]
 8002886:	4b84      	ldr	r3, [pc, #528]	; (8002a98 <update_display+0xb10>)
 8002888:	4a85      	ldr	r2, [pc, #532]	; (8002aa0 <update_display+0xb18>)
 800288a:	2126      	movs	r1, #38	; 0x26
 800288c:	f44f 7094 	mov.w	r0, #296	; 0x128
 8002890:	f003 ff1c 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(294, 73, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002894:	2000      	movs	r0, #0
 8002896:	f7fe fe17 	bl	80014c8 <RGB_to_BRG>
 800289a:	4603      	mov	r3, r0
 800289c:	461c      	mov	r4, r3
 800289e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028a2:	f7fe fe11 	bl	80014c8 <RGB_to_BRG>
 80028a6:	4603      	mov	r3, r0
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	9400      	str	r4, [sp, #0]
 80028ac:	4b7a      	ldr	r3, [pc, #488]	; (8002a98 <update_display+0xb10>)
 80028ae:	4a7b      	ldr	r2, [pc, #492]	; (8002a9c <update_display+0xb14>)
 80028b0:	2149      	movs	r1, #73	; 0x49
 80028b2:	f44f 7093 	mov.w	r0, #294	; 0x126
 80028b6:	f003 ff09 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(296, 108, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe fe04 	bl	80014c8 <RGB_to_BRG>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461c      	mov	r4, r3
 80028c4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028c8:	f7fe fdfe 	bl	80014c8 <RGB_to_BRG>
 80028cc:	4603      	mov	r3, r0
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	9400      	str	r4, [sp, #0]
 80028d2:	4b71      	ldr	r3, [pc, #452]	; (8002a98 <update_display+0xb10>)
 80028d4:	4a72      	ldr	r2, [pc, #456]	; (8002aa0 <update_display+0xb18>)
 80028d6:	216c      	movs	r1, #108	; 0x6c
 80028d8:	f44f 7094 	mov.w	r0, #296	; 0x128
 80028dc:	f003 fef6 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(294, 143, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe fdf1 	bl	80014c8 <RGB_to_BRG>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461c      	mov	r4, r3
 80028ea:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028ee:	f7fe fdeb 	bl	80014c8 <RGB_to_BRG>
 80028f2:	4603      	mov	r3, r0
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	9400      	str	r4, [sp, #0]
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <update_display+0xb10>)
 80028fa:	4a68      	ldr	r2, [pc, #416]	; (8002a9c <update_display+0xb14>)
 80028fc:	218f      	movs	r1, #143	; 0x8f
 80028fe:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002902:	f003 fee3 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(296, 178, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fdde 	bl	80014c8 <RGB_to_BRG>
 800290c:	4603      	mov	r3, r0
 800290e:	461c      	mov	r4, r3
 8002910:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002914:	f7fe fdd8 	bl	80014c8 <RGB_to_BRG>
 8002918:	4603      	mov	r3, r0
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	9400      	str	r4, [sp, #0]
 800291e:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <update_display+0xb10>)
 8002920:	4a5f      	ldr	r2, [pc, #380]	; (8002aa0 <update_display+0xb18>)
 8002922:	21b2      	movs	r1, #178	; 0xb2
 8002924:	f44f 7094 	mov.w	r0, #296	; 0x128
 8002928:	f003 fed0 	bl	80066cc <LCD_PutStr>
			sleep_state_written_to_LCD = 1;
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <update_display+0xb0c>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
			standby_state_written_to_LCD = 0;
 8002932:	4b5c      	ldr	r3, [pc, #368]	; (8002aa4 <update_display+0xb1c>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e134      	b.n	8002ba4 <update_display+0xc1c>
		}
		else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 800293a:	4b55      	ldr	r3, [pc, #340]	; (8002a90 <update_display+0xb08>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	f040 80c0 	bne.w	8002ac4 <update_display+0xb3c>
 8002944:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <update_display+0xb1c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 80bb 	bne.w	8002ac4 <update_display+0xb3c>
			UG_FillFrame(290,5,310,226, RGB_to_BRG(C_ORANGE));
 800294e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002952:	f7fe fdb9 	bl	80014c8 <RGB_to_BRG>
 8002956:	4603      	mov	r3, r0
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	23e2      	movs	r3, #226	; 0xe2
 800295c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002960:	2105      	movs	r1, #5
 8002962:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002966:	f00c fe93 	bl	800f690 <UG_FillFrame>
			LCD_PutStr(294, 3,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe fdac 	bl	80014c8 <RGB_to_BRG>
 8002970:	4603      	mov	r3, r0
 8002972:	461c      	mov	r4, r3
 8002974:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002978:	f7fe fda6 	bl	80014c8 <RGB_to_BRG>
 800297c:	4603      	mov	r3, r0
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	9400      	str	r4, [sp, #0]
 8002982:	4b45      	ldr	r3, [pc, #276]	; (8002a98 <update_display+0xb10>)
 8002984:	4a48      	ldr	r2, [pc, #288]	; (8002aa8 <update_display+0xb20>)
 8002986:	2103      	movs	r1, #3
 8002988:	f44f 7093 	mov.w	r0, #294	; 0x126
 800298c:	f003 fe9e 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(294, 32,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe fd99 	bl	80014c8 <RGB_to_BRG>
 8002996:	4603      	mov	r3, r0
 8002998:	461c      	mov	r4, r3
 800299a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800299e:	f7fe fd93 	bl	80014c8 <RGB_to_BRG>
 80029a2:	4603      	mov	r3, r0
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	9400      	str	r4, [sp, #0]
 80029a8:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <update_display+0xb10>)
 80029aa:	4a40      	ldr	r2, [pc, #256]	; (8002aac <update_display+0xb24>)
 80029ac:	2120      	movs	r1, #32
 80029ae:	f44f 7093 	mov.w	r0, #294	; 0x126
 80029b2:	f003 fe8b 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(294, 61, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fe fd86 	bl	80014c8 <RGB_to_BRG>
 80029bc:	4603      	mov	r3, r0
 80029be:	461c      	mov	r4, r3
 80029c0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029c4:	f7fe fd80 	bl	80014c8 <RGB_to_BRG>
 80029c8:	4603      	mov	r3, r0
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	9400      	str	r4, [sp, #0]
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <update_display+0xb10>)
 80029d0:	4a37      	ldr	r2, [pc, #220]	; (8002ab0 <update_display+0xb28>)
 80029d2:	213d      	movs	r1, #61	; 0x3d
 80029d4:	f44f 7093 	mov.w	r0, #294	; 0x126
 80029d8:	f003 fe78 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(294, 90, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fe fd73 	bl	80014c8 <RGB_to_BRG>
 80029e2:	4603      	mov	r3, r0
 80029e4:	461c      	mov	r4, r3
 80029e6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029ea:	f7fe fd6d 	bl	80014c8 <RGB_to_BRG>
 80029ee:	4603      	mov	r3, r0
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	9400      	str	r4, [sp, #0]
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <update_display+0xb10>)
 80029f6:	4a2f      	ldr	r2, [pc, #188]	; (8002ab4 <update_display+0xb2c>)
 80029f8:	215a      	movs	r1, #90	; 0x5a
 80029fa:	f44f 7093 	mov.w	r0, #294	; 0x126
 80029fe:	f003 fe65 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(294, 119, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe fd60 	bl	80014c8 <RGB_to_BRG>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461c      	mov	r4, r3
 8002a0c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a10:	f7fe fd5a 	bl	80014c8 <RGB_to_BRG>
 8002a14:	4603      	mov	r3, r0
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	9400      	str	r4, [sp, #0]
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <update_display+0xb10>)
 8002a1c:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <update_display+0xb30>)
 8002a1e:	2177      	movs	r1, #119	; 0x77
 8002a20:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a24:	f003 fe52 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(294, 148, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fe fd4d 	bl	80014c8 <RGB_to_BRG>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	461c      	mov	r4, r3
 8002a32:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a36:	f7fe fd47 	bl	80014c8 <RGB_to_BRG>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	9400      	str	r4, [sp, #0]
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <update_display+0xb10>)
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <update_display+0xb34>)
 8002a44:	2194      	movs	r1, #148	; 0x94
 8002a46:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a4a:	f003 fe3f 	bl	80066cc <LCD_PutStr>
			LCD_PutStr(294, 177, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7fe fd3a 	bl	80014c8 <RGB_to_BRG>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461c      	mov	r4, r3
 8002a58:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a5c:	f7fe fd34 	bl	80014c8 <RGB_to_BRG>
 8002a60:	4603      	mov	r3, r0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	9400      	str	r4, [sp, #0]
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <update_display+0xb10>)
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <update_display+0xb38>)
 8002a6a:	21b1      	movs	r1, #177	; 0xb1
 8002a6c:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a70:	f003 fe2c 	bl	80066cc <LCD_PutStr>
			standby_state_written_to_LCD = 1;
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <update_display+0xb1c>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <update_display+0xb0c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e090      	b.n	8002ba4 <update_display+0xc1c>
 8002a82:	bf00      	nop
 8002a84:	20000460 	.word	0x20000460
 8002a88:	08015f80 	.word	0x08015f80
 8002a8c:	08015dc4 	.word	0x08015dc4
 8002a90:	2000001d 	.word	0x2000001d
 8002a94:	20000487 	.word	0x20000487
 8002a98:	08016f50 	.word	0x08016f50
 8002a9c:	08015dcc 	.word	0x08015dcc
 8002aa0:	08015dd0 	.word	0x08015dd0
 8002aa4:	20000488 	.word	0x20000488
 8002aa8:	08015dd4 	.word	0x08015dd4
 8002aac:	08015dd8 	.word	0x08015dd8
 8002ab0:	08015ddc 	.word	0x08015ddc
 8002ab4:	08015de0 	.word	0x08015de0
 8002ab8:	08015de4 	.word	0x08015de4
 8002abc:	08015de8 	.word	0x08015de8
 8002ac0:	08015dec 	.word	0x08015dec
		}
		else if(active_state == RUN){
 8002ac4:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <update_display+0xc38>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d16b      	bne.n	8002ba4 <update_display+0xc1c>
			UG_FillFrame(290, 226-(PID_output/PID_MAX_OUTPUT)*221, 	310, 	226, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002acc:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <update_display+0xc3c>)
 8002ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <update_display+0xc40>)
 8002ad8:	f7fd fee0 	bl	800089c <__aeabi_ddiv>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	a332      	add	r3, pc, #200	; (adr r3, 8002bb0 <update_display+0xc28>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fdad 	bl	8000648 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	4935      	ldr	r1, [pc, #212]	; (8002bcc <update_display+0xc44>)
 8002af8:	f7fd fbee 	bl	80002d8 <__aeabi_dsub>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7fe f850 	bl	8000ba8 <__aeabi_d2iz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b21c      	sxth	r4, r3
 8002b0c:	f248 607e 	movw	r0, #34430	; 0x867e
 8002b10:	f7fe fcda 	bl	80014c8 <RGB_to_BRG>
 8002b14:	4603      	mov	r3, r0
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	23e2      	movs	r3, #226	; 0xe2
 8002b1a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002b1e:	4621      	mov	r1, r4
 8002b20:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002b24:	f00c fdb4 	bl	800f690 <UG_FillFrame>
			UG_FillFrame(290, 5, 									310, 	226-(PID_output/PID_MAX_OUTPUT)*211-1, RGB_to_BRG(C_BLACK));
 8002b28:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <update_display+0xc3c>)
 8002b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <update_display+0xc40>)
 8002b34:	f7fd feb2 	bl	800089c <__aeabi_ddiv>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	a31d      	add	r3, pc, #116	; (adr r3, 8002bb8 <update_display+0xc30>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f7fd fd7f 	bl	8000648 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	f04f 0000 	mov.w	r0, #0
 8002b52:	491e      	ldr	r1, [pc, #120]	; (8002bcc <update_display+0xc44>)
 8002b54:	f7fd fbc0 	bl	80002d8 <__aeabi_dsub>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <update_display+0xc48>)
 8002b66:	f7fd fbb7 	bl	80002d8 <__aeabi_dsub>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	f7fe f819 	bl	8000ba8 <__aeabi_d2iz>
 8002b76:	4603      	mov	r3, r0
 8002b78:	b21c      	sxth	r4, r3
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe fca4 	bl	80014c8 <RGB_to_BRG>
 8002b80:	4603      	mov	r3, r0
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4623      	mov	r3, r4
 8002b86:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002b8a:	2105      	movs	r1, #5
 8002b8c:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002b90:	f00c fd7e 	bl	800f690 <UG_FillFrame>
			standby_state_written_to_LCD = 0;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <update_display+0xc4c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <update_display+0xc50>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002ba0:	e000      	b.n	8002ba4 <update_display+0xc1c>
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8002ba2:	bf00      	nop
}
 8002ba4:	bf00      	nop
 8002ba6:	3704      	adds	r7, #4
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}
 8002bac:	f3af 8000 	nop.w
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	406ba000 	.word	0x406ba000
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	406a6000 	.word	0x406a6000
 8002bc0:	2000001d 	.word	0x2000001d
 8002bc4:	200005a0 	.word	0x200005a0
 8002bc8:	407f4000 	.word	0x407f4000
 8002bcc:	406c4000 	.word	0x406c4000
 8002bd0:	3ff00000 	.word	0x3ff00000
 8002bd4:	20000488 	.word	0x20000488
 8002bd8:	20000487 	.word	0x20000487

08002bdc <LCD_draw_main_screen>:

void LCD_draw_main_screen(){
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af02      	add	r7, sp, #8
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8002be2:	4bd8      	ldr	r3, [pc, #864]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002be4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	f7fd ff92 	bl	8000b18 <__aeabi_dcmpeq>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <LCD_draw_main_screen+0x38>
 8002bfa:	4bd2      	ldr	r3, [pc, #840]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002bfc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c08:	f7fd ff86 	bl	8000b18 <__aeabi_dcmpeq>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 81b6 	beq.w	8002f80 <LCD_draw_main_screen+0x3a4>
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe fc57 	bl	80014c8 <RGB_to_BRG>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f00c fd13 	bl	800f648 <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002c22:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c26:	f7fe fc4f 	bl	80014c8 <RGB_to_BRG>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461c      	mov	r4, r3
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fe fc4a 	bl	80014c8 <RGB_to_BRG>
 8002c34:	4603      	mov	r3, r0
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	9400      	str	r4, [sp, #0]
 8002c3a:	4bc3      	ldr	r3, [pc, #780]	; (8002f48 <LCD_draw_main_screen+0x36c>)
 8002c3c:	4ac3      	ldr	r2, [pc, #780]	; (8002f4c <LCD_draw_main_screen+0x370>)
 8002c3e:	210c      	movs	r1, #12
 8002c40:	2035      	movs	r0, #53	; 0x35
 8002c42:	f003 fd43 	bl	80066cc <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8002c46:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c4a:	f7fe fc3d 	bl	80014c8 <RGB_to_BRG>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2328      	movs	r3, #40	; 0x28
 8002c54:	22f0      	movs	r2, #240	; 0xf0
 8002c56:	2128      	movs	r1, #40	; 0x28
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f003 fcf9 	bl	8006650 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002c5e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c62:	f7fe fc31 	bl	80014c8 <RGB_to_BRG>
 8002c66:	4603      	mov	r3, r0
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	2329      	movs	r3, #41	; 0x29
 8002c6c:	22f0      	movs	r2, #240	; 0xf0
 8002c6e:	2129      	movs	r1, #41	; 0x29
 8002c70:	2000      	movs	r0, #0
 8002c72:	f003 fced 	bl	8006650 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8002c76:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c7a:	f7fe fc25 	bl	80014c8 <RGB_to_BRG>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	232a      	movs	r3, #42	; 0x2a
 8002c84:	22f0      	movs	r2, #240	; 0xf0
 8002c86:	212a      	movs	r1, #42	; 0x2a
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f003 fce1 	bl	8006650 <LCD_DrawLine>


		LCD_PutStr(14, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002c8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002c92:	f7fe fc19 	bl	80014c8 <RGB_to_BRG>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461c      	mov	r4, r3
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fc14 	bl	80014c8 <RGB_to_BRG>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	9301      	str	r3, [sp, #4]
 8002ca4:	9400      	str	r4, [sp, #0]
 8002ca6:	4baa      	ldr	r3, [pc, #680]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002ca8:	4aaa      	ldr	r2, [pc, #680]	; (8002f54 <LCD_draw_main_screen+0x378>)
 8002caa:	2132      	movs	r1, #50	; 0x32
 8002cac:	200e      	movs	r0, #14
 8002cae:	f003 fd0d 	bl	80066cc <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 8002cb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cb6:	f7fe fc07 	bl	80014c8 <RGB_to_BRG>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2205      	movs	r2, #5
 8002cbe:	2155      	movs	r1, #85	; 0x55
 8002cc0:	2078      	movs	r0, #120	; 0x78
 8002cc2:	f00c fd9f 	bl	800f804 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 8002cc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cca:	f7fe fbfd 	bl	80014c8 <RGB_to_BRG>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	2155      	movs	r1, #85	; 0x55
 8002cd4:	2078      	movs	r0, #120	; 0x78
 8002cd6:	f00c fd95 	bl	800f804 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 8002cda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cde:	f7fe fbf3 	bl	80014c8 <RGB_to_BRG>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	2155      	movs	r1, #85	; 0x55
 8002ce8:	2078      	movs	r0, #120	; 0x78
 8002cea:	f00c fd8b 	bl	800f804 <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002cee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cf2:	f7fe fbe9 	bl	80014c8 <RGB_to_BRG>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461c      	mov	r4, r3
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fe fbe4 	bl	80014c8 <RGB_to_BRG>
 8002d00:	4603      	mov	r3, r0
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	9400      	str	r4, [sp, #0]
 8002d06:	4b94      	ldr	r3, [pc, #592]	; (8002f58 <LCD_draw_main_screen+0x37c>)
 8002d08:	4a94      	ldr	r2, [pc, #592]	; (8002f5c <LCD_draw_main_screen+0x380>)
 8002d0a:	214b      	movs	r1, #75	; 0x4b
 8002d0c:	2082      	movs	r0, #130	; 0x82
 8002d0e:	f003 fcdd 	bl	80066cc <LCD_PutStr>


		LCD_PutStr(14, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002d12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d16:	f7fe fbd7 	bl	80014c8 <RGB_to_BRG>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461c      	mov	r4, r3
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fe fbd2 	bl	80014c8 <RGB_to_BRG>
 8002d24:	4603      	mov	r3, r0
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	9400      	str	r4, [sp, #0]
 8002d2a:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002d2c:	4a8c      	ldr	r2, [pc, #560]	; (8002f60 <LCD_draw_main_screen+0x384>)
 8002d2e:	218c      	movs	r1, #140	; 0x8c
 8002d30:	200e      	movs	r0, #14
 8002d32:	f003 fccb 	bl	80066cc <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 8002d36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d3a:	f7fe fbc5 	bl	80014c8 <RGB_to_BRG>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2205      	movs	r2, #5
 8002d42:	21af      	movs	r1, #175	; 0xaf
 8002d44:	2078      	movs	r0, #120	; 0x78
 8002d46:	f00c fd5d 	bl	800f804 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 8002d4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d4e:	f7fe fbbb 	bl	80014c8 <RGB_to_BRG>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2204      	movs	r2, #4
 8002d56:	21af      	movs	r1, #175	; 0xaf
 8002d58:	2078      	movs	r0, #120	; 0x78
 8002d5a:	f00c fd53 	bl	800f804 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 8002d5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d62:	f7fe fbb1 	bl	80014c8 <RGB_to_BRG>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2203      	movs	r2, #3
 8002d6a:	21af      	movs	r1, #175	; 0xaf
 8002d6c:	2078      	movs	r0, #120	; 0x78
 8002d6e:	f00c fd49 	bl	800f804 <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002d72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d76:	f7fe fba7 	bl	80014c8 <RGB_to_BRG>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461c      	mov	r4, r3
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fe fba2 	bl	80014c8 <RGB_to_BRG>
 8002d84:	4603      	mov	r3, r0
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	9400      	str	r4, [sp, #0]
 8002d8a:	4b73      	ldr	r3, [pc, #460]	; (8002f58 <LCD_draw_main_screen+0x37c>)
 8002d8c:	4a73      	ldr	r2, [pc, #460]	; (8002f5c <LCD_draw_main_screen+0x380>)
 8002d8e:	21a5      	movs	r1, #165	; 0xa5
 8002d90:	2082      	movs	r0, #130	; 0x82
 8002d92:	f003 fc9b 	bl	80066cc <LCD_PutStr>

		UG_DrawFrame(6, 134, 182, 220, RGB_to_BRG(C_WHITE));
 8002d96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d9a:	f7fe fb95 	bl	80014c8 <RGB_to_BRG>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	23dc      	movs	r3, #220	; 0xdc
 8002da4:	22b6      	movs	r2, #182	; 0xb6
 8002da6:	2186      	movs	r1, #134	; 0x86
 8002da8:	2006      	movs	r0, #6
 8002daa:	f00c fce3 	bl	800f774 <UG_DrawFrame>
		UG_DrawFrame(5, 133, 183, 221, RGB_to_BRG(C_WHITE));
 8002dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002db2:	f7fe fb89 	bl	80014c8 <RGB_to_BRG>
 8002db6:	4603      	mov	r3, r0
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	23dd      	movs	r3, #221	; 0xdd
 8002dbc:	22b7      	movs	r2, #183	; 0xb7
 8002dbe:	2185      	movs	r1, #133	; 0x85
 8002dc0:	2005      	movs	r0, #5
 8002dc2:	f00c fcd7 	bl	800f774 <UG_DrawFrame>

		LCD_PutStr(6, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002dc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dca:	f7fe fb7d 	bl	80014c8 <RGB_to_BRG>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461c      	mov	r4, r3
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7fe fb78 	bl	80014c8 <RGB_to_BRG>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	9400      	str	r4, [sp, #0]
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <LCD_draw_main_screen+0x388>)
 8002de0:	4a61      	ldr	r2, [pc, #388]	; (8002f68 <LCD_draw_main_screen+0x38c>)
 8002de2:	21eb      	movs	r1, #235	; 0xeb
 8002de4:	2006      	movs	r0, #6
 8002de6:	f003 fc71 	bl	80066cc <LCD_PutStr>
		LCD_PutStr(6, 255, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002dea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dee:	f7fe fb6b 	bl	80014c8 <RGB_to_BRG>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461c      	mov	r4, r3
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7fe fb66 	bl	80014c8 <RGB_to_BRG>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	9400      	str	r4, [sp, #0]
 8002e02:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <LCD_draw_main_screen+0x388>)
 8002e04:	4a59      	ldr	r2, [pc, #356]	; (8002f6c <LCD_draw_main_screen+0x390>)
 8002e06:	21ff      	movs	r1, #255	; 0xff
 8002e08:	2006      	movs	r0, #6
 8002e0a:	f003 fc5f 	bl	80066cc <LCD_PutStr>
		LCD_PutStr(6, 275, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002e0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e12:	f7fe fb59 	bl	80014c8 <RGB_to_BRG>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461c      	mov	r4, r3
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fe fb54 	bl	80014c8 <RGB_to_BRG>
 8002e20:	4603      	mov	r3, r0
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	9400      	str	r4, [sp, #0]
 8002e26:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <LCD_draw_main_screen+0x388>)
 8002e28:	4a51      	ldr	r2, [pc, #324]	; (8002f70 <LCD_draw_main_screen+0x394>)
 8002e2a:	f240 1113 	movw	r1, #275	; 0x113
 8002e2e:	2006      	movs	r0, #6
 8002e30:	f003 fc4c 	bl	80066cc <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002e34:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002e38:	f7fe fb46 	bl	80014c8 <RGB_to_BRG>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	f44f 7394 	mov.w	r3, #296	; 0x128
 8002e44:	22f0      	movs	r2, #240	; 0xf0
 8002e46:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	f00c fdc0 	bl	800f9d0 <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002e50:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002e54:	f7fe fb38 	bl	80014c8 <RGB_to_BRG>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f240 1329 	movw	r3, #297	; 0x129
 8002e60:	22f0      	movs	r2, #240	; 0xf0
 8002e62:	f240 1129 	movw	r1, #297	; 0x129
 8002e66:	2002      	movs	r0, #2
 8002e68:	f00c fdb2 	bl	800f9d0 <UG_DrawLine>


		LCD_PutStr(6, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002e6c:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002e70:	f7fe fb2a 	bl	80014c8 <RGB_to_BRG>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461c      	mov	r4, r3
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe fb25 	bl	80014c8 <RGB_to_BRG>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	9400      	str	r4, [sp, #0]
 8002e84:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002e86:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <LCD_draw_main_screen+0x398>)
 8002e88:	f240 112d 	movw	r1, #301	; 0x12d
 8002e8c:	2006      	movs	r0, #6
 8002e8e:	f003 fc1d 	bl	80066cc <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002e92:	2228      	movs	r2, #40	; 0x28
 8002e94:	2100      	movs	r1, #0
 8002e96:	4838      	ldr	r0, [pc, #224]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002e98:	f00f f9a1 	bl	80121de <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002e9e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ea2:	4936      	ldr	r1, [pc, #216]	; (8002f7c <LCD_draw_main_screen+0x3a0>)
 8002ea4:	4834      	ldr	r0, [pc, #208]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ea6:	f00f f937 	bl	8012118 <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002eaa:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002eae:	f7fe fb0b 	bl	80014c8 <RGB_to_BRG>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461c      	mov	r4, r3
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7fe fb06 	bl	80014c8 <RGB_to_BRG>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	9400      	str	r4, [sp, #0]
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002ec4:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ec6:	f240 112d 	movw	r1, #301	; 0x12d
 8002eca:	2082      	movs	r0, #130	; 0x82
 8002ecc:	f003 fbfe 	bl	80066cc <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002ed0:	2228      	movs	r2, #40	; 0x28
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4828      	ldr	r0, [pc, #160]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ed6:	f00f f982 	bl	80121de <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002edc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002ee0:	4926      	ldr	r1, [pc, #152]	; (8002f7c <LCD_draw_main_screen+0x3a0>)
 8002ee2:	4825      	ldr	r0, [pc, #148]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ee4:	f00f f918 	bl	8012118 <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002ee8:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002eec:	f7fe faec 	bl	80014c8 <RGB_to_BRG>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461c      	mov	r4, r3
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fe fae7 	bl	80014c8 <RGB_to_BRG>
 8002efa:	4603      	mov	r3, r0
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	9400      	str	r4, [sp, #0]
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002f04:	f240 112d 	movw	r1, #301	; 0x12d
 8002f08:	20be      	movs	r0, #190	; 0xbe
 8002f0a:	f003 fbdf 	bl	80066cc <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 8002f0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f12:	f7fe fad9 	bl	80014c8 <RGB_to_BRG>
 8002f16:	4603      	mov	r3, r0
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	f240 1321 	movw	r3, #289	; 0x121
 8002f1e:	22e8      	movs	r2, #232	; 0xe8
 8002f20:	2135      	movs	r1, #53	; 0x35
 8002f22:	20d0      	movs	r0, #208	; 0xd0
 8002f24:	f00c fc26 	bl	800f774 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 8002f28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f2c:	f7fe facc 	bl	80014c8 <RGB_to_BRG>
 8002f30:	4603      	mov	r3, r0
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002f38:	22e7      	movs	r2, #231	; 0xe7
 8002f3a:	2136      	movs	r1, #54	; 0x36
 8002f3c:	20d1      	movs	r0, #209	; 0xd1
 8002f3e:	f00c fc19 	bl	800f774 <UG_DrawFrame>
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8002f42:	e113      	b.n	800316c <LCD_draw_main_screen+0x590>
 8002f44:	20000550 	.word	0x20000550
 8002f48:	08016d1c 	.word	0x08016d1c
 8002f4c:	08015df0 	.word	0x08015df0
 8002f50:	08016f50 	.word	0x08016f50
 8002f54:	08015dfc 	.word	0x08015dfc
 8002f58:	08017e60 	.word	0x08017e60
 8002f5c:	08015e08 	.word	0x08015e08
 8002f60:	08015e0c 	.word	0x08015e0c
 8002f64:	08015f80 	.word	0x08015f80
 8002f68:	08015e18 	.word	0x08015e18
 8002f6c:	08015e28 	.word	0x08015e28
 8002f70:	08015e44 	.word	0x08015e44
 8002f74:	08015e64 	.word	0x08015e64
 8002f78:	200004a8 	.word	0x200004a8
 8002f7c:	08015d90 	.word	0x08015d90
	}
	else{
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fe faa1 	bl	80014c8 <RGB_to_BRG>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f00c fb5d 	bl	800f648 <UG_FillScreen>

		LCD_PutStr(14, 5, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002f8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f92:	f7fe fa99 	bl	80014c8 <RGB_to_BRG>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461c      	mov	r4, r3
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7fe fa94 	bl	80014c8 <RGB_to_BRG>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	9400      	str	r4, [sp, #0]
 8002fa6:	4b73      	ldr	r3, [pc, #460]	; (8003174 <LCD_draw_main_screen+0x598>)
 8002fa8:	4a73      	ldr	r2, [pc, #460]	; (8003178 <LCD_draw_main_screen+0x59c>)
 8002faa:	2105      	movs	r1, #5
 8002fac:	200e      	movs	r0, #14
 8002fae:	f003 fb8d 	bl	80066cc <LCD_PutStr>
		UG_DrawCircle(120, 40, 5, RGB_to_BRG(C_WHITE));
 8002fb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fb6:	f7fe fa87 	bl	80014c8 <RGB_to_BRG>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2205      	movs	r2, #5
 8002fbe:	2128      	movs	r1, #40	; 0x28
 8002fc0:	2078      	movs	r0, #120	; 0x78
 8002fc2:	f00c fc1f 	bl	800f804 <UG_DrawCircle>
		UG_DrawCircle(120, 40, 4, RGB_to_BRG(C_WHITE));
 8002fc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fca:	f7fe fa7d 	bl	80014c8 <RGB_to_BRG>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	2128      	movs	r1, #40	; 0x28
 8002fd4:	2078      	movs	r0, #120	; 0x78
 8002fd6:	f00c fc15 	bl	800f804 <UG_DrawCircle>
		UG_DrawCircle(120, 40, 3, RGB_to_BRG(C_WHITE));
 8002fda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fde:	f7fe fa73 	bl	80014c8 <RGB_to_BRG>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	2128      	movs	r1, #40	; 0x28
 8002fe8:	2078      	movs	r0, #120	; 0x78
 8002fea:	f00c fc0b 	bl	800f804 <UG_DrawCircle>
		LCD_PutStr(130, 30, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002fee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ff2:	f7fe fa69 	bl	80014c8 <RGB_to_BRG>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f7fe fa64 	bl	80014c8 <RGB_to_BRG>
 8003000:	4603      	mov	r3, r0
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	9400      	str	r4, [sp, #0]
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <LCD_draw_main_screen+0x5a0>)
 8003008:	4a5d      	ldr	r2, [pc, #372]	; (8003180 <LCD_draw_main_screen+0x5a4>)
 800300a:	211e      	movs	r1, #30
 800300c:	2082      	movs	r0, #130	; 0x82
 800300e:	f003 fb5d 	bl	80066cc <LCD_PutStr>


		LCD_PutStr(14, 95, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003012:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003016:	f7fe fa57 	bl	80014c8 <RGB_to_BRG>
 800301a:	4603      	mov	r3, r0
 800301c:	461c      	mov	r4, r3
 800301e:	2000      	movs	r0, #0
 8003020:	f7fe fa52 	bl	80014c8 <RGB_to_BRG>
 8003024:	4603      	mov	r3, r0
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	9400      	str	r4, [sp, #0]
 800302a:	4b52      	ldr	r3, [pc, #328]	; (8003174 <LCD_draw_main_screen+0x598>)
 800302c:	4a55      	ldr	r2, [pc, #340]	; (8003184 <LCD_draw_main_screen+0x5a8>)
 800302e:	215f      	movs	r1, #95	; 0x5f
 8003030:	200e      	movs	r0, #14
 8003032:	f003 fb4b 	bl	80066cc <LCD_PutStr>
		UG_DrawCircle(120, 130, 5, RGB_to_BRG(C_WHITE));
 8003036:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800303a:	f7fe fa45 	bl	80014c8 <RGB_to_BRG>
 800303e:	4603      	mov	r3, r0
 8003040:	2205      	movs	r2, #5
 8003042:	2182      	movs	r1, #130	; 0x82
 8003044:	2078      	movs	r0, #120	; 0x78
 8003046:	f00c fbdd 	bl	800f804 <UG_DrawCircle>
		UG_DrawCircle(120, 130, 4, RGB_to_BRG(C_WHITE));
 800304a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800304e:	f7fe fa3b 	bl	80014c8 <RGB_to_BRG>
 8003052:	4603      	mov	r3, r0
 8003054:	2204      	movs	r2, #4
 8003056:	2182      	movs	r1, #130	; 0x82
 8003058:	2078      	movs	r0, #120	; 0x78
 800305a:	f00c fbd3 	bl	800f804 <UG_DrawCircle>
		UG_DrawCircle(120, 130, 3, RGB_to_BRG(C_WHITE));
 800305e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003062:	f7fe fa31 	bl	80014c8 <RGB_to_BRG>
 8003066:	4603      	mov	r3, r0
 8003068:	2203      	movs	r2, #3
 800306a:	2182      	movs	r1, #130	; 0x82
 800306c:	2078      	movs	r0, #120	; 0x78
 800306e:	f00c fbc9 	bl	800f804 <UG_DrawCircle>
		LCD_PutStr(130, 120, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003072:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003076:	f7fe fa27 	bl	80014c8 <RGB_to_BRG>
 800307a:	4603      	mov	r3, r0
 800307c:	461c      	mov	r4, r3
 800307e:	2000      	movs	r0, #0
 8003080:	f7fe fa22 	bl	80014c8 <RGB_to_BRG>
 8003084:	4603      	mov	r3, r0
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	9400      	str	r4, [sp, #0]
 800308a:	4b3c      	ldr	r3, [pc, #240]	; (800317c <LCD_draw_main_screen+0x5a0>)
 800308c:	4a3c      	ldr	r2, [pc, #240]	; (8003180 <LCD_draw_main_screen+0x5a4>)
 800308e:	2178      	movs	r1, #120	; 0x78
 8003090:	2082      	movs	r0, #130	; 0x82
 8003092:	f003 fb1b 	bl	80066cc <LCD_PutStr>

		UG_DrawFrame(6, 89, 182,175, RGB_to_BRG(C_WHITE));
 8003096:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800309a:	f7fe fa15 	bl	80014c8 <RGB_to_BRG>
 800309e:	4603      	mov	r3, r0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	23af      	movs	r3, #175	; 0xaf
 80030a4:	22b6      	movs	r2, #182	; 0xb6
 80030a6:	2159      	movs	r1, #89	; 0x59
 80030a8:	2006      	movs	r0, #6
 80030aa:	f00c fb63 	bl	800f774 <UG_DrawFrame>
		UG_DrawFrame(5, 88, 183, 176, RGB_to_BRG(C_WHITE));
 80030ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030b2:	f7fe fa09 	bl	80014c8 <RGB_to_BRG>
 80030b6:	4603      	mov	r3, r0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	23b0      	movs	r3, #176	; 0xb0
 80030bc:	22b7      	movs	r2, #183	; 0xb7
 80030be:	2158      	movs	r1, #88	; 0x58
 80030c0:	2005      	movs	r0, #5
 80030c2:	f00c fb57 	bl	800f774 <UG_DrawFrame>

		LCD_PutStr(6, 180, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80030c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030ca:	f7fe f9fd 	bl	80014c8 <RGB_to_BRG>
 80030ce:	4603      	mov	r3, r0
 80030d0:	461c      	mov	r4, r3
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fe f9f8 	bl	80014c8 <RGB_to_BRG>
 80030d8:	4603      	mov	r3, r0
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	9400      	str	r4, [sp, #0]
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <LCD_draw_main_screen+0x5ac>)
 80030e0:	4a2a      	ldr	r2, [pc, #168]	; (800318c <LCD_draw_main_screen+0x5b0>)
 80030e2:	21b4      	movs	r1, #180	; 0xb4
 80030e4:	2006      	movs	r0, #6
 80030e6:	f003 faf1 	bl	80066cc <LCD_PutStr>
		LCD_PutStr(6, 195, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80030ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030ee:	f7fe f9eb 	bl	80014c8 <RGB_to_BRG>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461c      	mov	r4, r3
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fe f9e6 	bl	80014c8 <RGB_to_BRG>
 80030fc:	4603      	mov	r3, r0
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	9400      	str	r4, [sp, #0]
 8003102:	4b21      	ldr	r3, [pc, #132]	; (8003188 <LCD_draw_main_screen+0x5ac>)
 8003104:	4a22      	ldr	r2, [pc, #136]	; (8003190 <LCD_draw_main_screen+0x5b4>)
 8003106:	21c3      	movs	r1, #195	; 0xc3
 8003108:	2006      	movs	r0, #6
 800310a:	f003 fadf 	bl	80066cc <LCD_PutStr>
		LCD_PutStr(6, 210, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800310e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003112:	f7fe f9d9 	bl	80014c8 <RGB_to_BRG>
 8003116:	4603      	mov	r3, r0
 8003118:	461c      	mov	r4, r3
 800311a:	2000      	movs	r0, #0
 800311c:	f7fe f9d4 	bl	80014c8 <RGB_to_BRG>
 8003120:	4603      	mov	r3, r0
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	9400      	str	r4, [sp, #0]
 8003126:	4b18      	ldr	r3, [pc, #96]	; (8003188 <LCD_draw_main_screen+0x5ac>)
 8003128:	4a1a      	ldr	r2, [pc, #104]	; (8003194 <LCD_draw_main_screen+0x5b8>)
 800312a:	21d2      	movs	r1, #210	; 0xd2
 800312c:	2006      	movs	r0, #6
 800312e:	f003 facd 	bl	80066cc <LCD_PutStr>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
		memset(&buffer, '\0', sizeof(buffer));
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
		LCD_PutStr(190, 271, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
*/
		UG_DrawFrame(288, 3, 312, 228, RGB_to_BRG(C_WHITE));
 8003132:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003136:	f7fe f9c7 	bl	80014c8 <RGB_to_BRG>
 800313a:	4603      	mov	r3, r0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	23e4      	movs	r3, #228	; 0xe4
 8003140:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003144:	2103      	movs	r1, #3
 8003146:	f44f 7090 	mov.w	r0, #288	; 0x120
 800314a:	f00c fb13 	bl	800f774 <UG_DrawFrame>
		UG_DrawFrame(289, 4, 311, 227, RGB_to_BRG(C_WHITE));
 800314e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003152:	f7fe f9b9 	bl	80014c8 <RGB_to_BRG>
 8003156:	4603      	mov	r3, r0
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	23e3      	movs	r3, #227	; 0xe3
 800315c:	f240 1237 	movw	r2, #311	; 0x137
 8003160:	2104      	movs	r1, #4
 8003162:	f240 1021 	movw	r0, #289	; 0x121
 8003166:	f00c fb05 	bl	800f774 <UG_DrawFrame>

	}
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	3704      	adds	r7, #4
 8003170:	46bd      	mov	sp, r7
 8003172:	bd90      	pop	{r4, r7, pc}
 8003174:	08016f50 	.word	0x08016f50
 8003178:	08015dfc 	.word	0x08015dfc
 800317c:	08017e60 	.word	0x08017e60
 8003180:	08015e08 	.word	0x08015e08
 8003184:	08015e0c 	.word	0x08015e0c
 8003188:	08015f80 	.word	0x08015f80
 800318c:	08015e18 	.word	0x08015e18
 8003190:	08015e28 	.word	0x08015e28
 8003194:	08015e44 	.word	0x08015e44

08003198 <show_popup>:

void show_popup(char * text[20]){
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b085      	sub	sp, #20
 800319c:	af02      	add	r7, sp, #8
 800319e:	6078      	str	r0, [r7, #4]
	UG_FillFrame(10, 150, 225, 205, RGB_to_BRG(C_ORANGE));
 80031a0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80031a4:	f7fe f990 	bl	80014c8 <RGB_to_BRG>
 80031a8:	4603      	mov	r3, r0
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	23cd      	movs	r3, #205	; 0xcd
 80031ae:	22e1      	movs	r2, #225	; 0xe1
 80031b0:	2196      	movs	r1, #150	; 0x96
 80031b2:	200a      	movs	r0, #10
 80031b4:	f00c fa6c 	bl	800f690 <UG_FillFrame>
	UG_FillFrame(15, 155, 220, 200, RGB_to_BRG(C_WHITE));
 80031b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031bc:	f7fe f984 	bl	80014c8 <RGB_to_BRG>
 80031c0:	4603      	mov	r3, r0
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	23c8      	movs	r3, #200	; 0xc8
 80031c6:	22dc      	movs	r2, #220	; 0xdc
 80031c8:	219b      	movs	r1, #155	; 0x9b
 80031ca:	200f      	movs	r0, #15
 80031cc:	f00c fa60 	bl	800f690 <UG_FillFrame>
	LCD_PutStr(20, 150, text, FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80031d0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80031d4:	f7fe f978 	bl	80014c8 <RGB_to_BRG>
 80031d8:	4603      	mov	r3, r0
 80031da:	461c      	mov	r4, r3
 80031dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031e0:	f7fe f972 	bl	80014c8 <RGB_to_BRG>
 80031e4:	4603      	mov	r3, r0
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	9400      	str	r4, [sp, #0]
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <show_popup+0x80>)
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	2196      	movs	r1, #150	; 0x96
 80031f0:	2014      	movs	r0, #20
 80031f2:	f003 fa6b 	bl	80066cc <LCD_PutStr>
	HAL_Delay(2000);
 80031f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031fa:	f003 fb81 	bl	8006900 <HAL_Delay>
	LCD_draw_main_screen();
 80031fe:	f7ff fced 	bl	8002bdc <LCD_draw_main_screen>
	standby_state_written_to_LCD = 0;
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <show_popup+0x84>)
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
	sleep_state_written_to_LCD = 0;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <show_popup+0x88>)
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bd90      	pop	{r4, r7, pc}
 8003216:	bf00      	nop
 8003218:	08016f50 	.word	0x08016f50
 800321c:	20000488 	.word	0x20000488
 8003220:	20000487 	.word	0x20000487

08003224 <LCD_draw_earth_fault_popup>:

void LCD_draw_earth_fault_popup(){
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b083      	sub	sp, #12
 8003228:	af02      	add	r7, sp, #8
	heater_off();
 800322a:	f7fe fb6f 	bl	800190c <heater_off>

	UG_FillFrame(10, 50, 205, 205, RGB_to_BRG(C_ORANGE));
 800322e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003232:	f7fe f949 	bl	80014c8 <RGB_to_BRG>
 8003236:	4603      	mov	r3, r0
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	23cd      	movs	r3, #205	; 0xcd
 800323c:	22cd      	movs	r2, #205	; 0xcd
 800323e:	2132      	movs	r1, #50	; 0x32
 8003240:	200a      	movs	r0, #10
 8003242:	f00c fa25 	bl	800f690 <UG_FillFrame>
	UG_FillFrame(15, 55, 200, 200, RGB_to_BRG(C_WHITE));
 8003246:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800324a:	f7fe f93d 	bl	80014c8 <RGB_to_BRG>
 800324e:	4603      	mov	r3, r0
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	23c8      	movs	r3, #200	; 0xc8
 8003254:	22c8      	movs	r2, #200	; 0xc8
 8003256:	2137      	movs	r1, #55	; 0x37
 8003258:	200f      	movs	r0, #15
 800325a:	f00c fa19 	bl	800f690 <UG_FillFrame>
	LCD_PutStr(20, 60, "GROUNDING", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 800325e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003262:	f7fe f931 	bl	80014c8 <RGB_to_BRG>
 8003266:	4603      	mov	r3, r0
 8003268:	461c      	mov	r4, r3
 800326a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800326e:	f7fe f92b 	bl	80014c8 <RGB_to_BRG>
 8003272:	4603      	mov	r3, r0
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	9400      	str	r4, [sp, #0]
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <LCD_draw_earth_fault_popup+0x104>)
 800327a:	4a2c      	ldr	r2, [pc, #176]	; (800332c <LCD_draw_earth_fault_popup+0x108>)
 800327c:	213c      	movs	r1, #60	; 0x3c
 800327e:	2014      	movs	r0, #20
 8003280:	f003 fa24 	bl	80066cc <LCD_PutStr>
	LCD_PutStr(20, 80, "ERROR", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8003284:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003288:	f7fe f91e 	bl	80014c8 <RGB_to_BRG>
 800328c:	4603      	mov	r3, r0
 800328e:	461c      	mov	r4, r3
 8003290:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003294:	f7fe f918 	bl	80014c8 <RGB_to_BRG>
 8003298:	4603      	mov	r3, r0
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	9400      	str	r4, [sp, #0]
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <LCD_draw_earth_fault_popup+0x104>)
 80032a0:	4a23      	ldr	r2, [pc, #140]	; (8003330 <LCD_draw_earth_fault_popup+0x10c>)
 80032a2:	2150      	movs	r1, #80	; 0x50
 80032a4:	2014      	movs	r0, #20
 80032a6:	f003 fa11 	bl	80066cc <LCD_PutStr>

	LCD_PutStr(20, 120, "CHECK", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80032aa:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032ae:	f7fe f90b 	bl	80014c8 <RGB_to_BRG>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461c      	mov	r4, r3
 80032b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032ba:	f7fe f905 	bl	80014c8 <RGB_to_BRG>
 80032be:	4603      	mov	r3, r0
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	9400      	str	r4, [sp, #0]
 80032c4:	4b18      	ldr	r3, [pc, #96]	; (8003328 <LCD_draw_earth_fault_popup+0x104>)
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <LCD_draw_earth_fault_popup+0x110>)
 80032c8:	2178      	movs	r1, #120	; 0x78
 80032ca:	2014      	movs	r0, #20
 80032cc:	f003 f9fe 	bl	80066cc <LCD_PutStr>
	LCD_PutStr(20, 140, "CONNECTIONS", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80032d0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032d4:	f7fe f8f8 	bl	80014c8 <RGB_to_BRG>
 80032d8:	4603      	mov	r3, r0
 80032da:	461c      	mov	r4, r3
 80032dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032e0:	f7fe f8f2 	bl	80014c8 <RGB_to_BRG>
 80032e4:	4603      	mov	r3, r0
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	9400      	str	r4, [sp, #0]
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <LCD_draw_earth_fault_popup+0x104>)
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <LCD_draw_earth_fault_popup+0x114>)
 80032ee:	218c      	movs	r1, #140	; 0x8c
 80032f0:	2014      	movs	r0, #20
 80032f2:	f003 f9eb 	bl	80066cc <LCD_PutStr>
	LCD_PutStr(20, 160, "AND REBOOT", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80032f6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032fa:	f7fe f8e5 	bl	80014c8 <RGB_to_BRG>
 80032fe:	4603      	mov	r3, r0
 8003300:	461c      	mov	r4, r3
 8003302:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003306:	f7fe f8df 	bl	80014c8 <RGB_to_BRG>
 800330a:	4603      	mov	r3, r0
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	9400      	str	r4, [sp, #0]
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <LCD_draw_earth_fault_popup+0x104>)
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <LCD_draw_earth_fault_popup+0x118>)
 8003314:	21a0      	movs	r1, #160	; 0xa0
 8003316:	2014      	movs	r0, #20
 8003318:	f003 f9d8 	bl	80066cc <LCD_PutStr>

	Error_Handler();
 800331c:	f001 fc28 	bl	8004b70 <Error_Handler>
}
 8003320:	bf00      	nop
 8003322:	3704      	adds	r7, #4
 8003324:	46bd      	mov	sp, r7
 8003326:	bd90      	pop	{r4, r7, pc}
 8003328:	08016f50 	.word	0x08016f50
 800332c:	08015e6c 	.word	0x08015e6c
 8003330:	08015e78 	.word	0x08015e78
 8003334:	08015e80 	.word	0x08015e80
 8003338:	08015e88 	.word	0x08015e88
 800333c:	08015e94 	.word	0x08015e94

08003340 <get_set_temperature>:


/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8003340:	b598      	push	{r3, r4, r7, lr}
 8003342:	af00      	add	r7, sp, #0
	if(custom_temperature_on == 0){
 8003344:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <get_set_temperature+0x70>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d12f      	bne.n	80033ac <get_set_temperature+0x6c>
		TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 800334c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f8fe 	bl	8000554 <__aeabi_ui2d>
 8003358:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <get_set_temperature+0x74>)
 800335a:	ed93 7b00 	vldr	d7, [r3]
 800335e:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <get_set_temperature+0x78>)
 8003360:	ed93 6b00 	vldr	d6, [r3]
 8003364:	eeb0 2a46 	vmov.f32	s4, s12
 8003368:	eef0 2a66 	vmov.f32	s5, s13
 800336c:	eeb0 1a47 	vmov.f32	s2, s14
 8003370:	eef0 1a67 	vmov.f32	s3, s15
 8003374:	ec41 0b10 	vmov	d0, r0, r1
 8003378:	f7fd ffdc 	bl	8001334 <clamp>
 800337c:	ec53 2b10 	vmov	r2, r3, d0
 8003380:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	f7fd fc36 	bl	8000bf8 <__aeabi_d2uiz>
 800338c:	4603      	mov	r3, r0
 800338e:	6263      	str	r3, [r4, #36]	; 0x24
		sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 8003390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	b29b      	uxth	r3, r3
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd f8e9 	bl	8000574 <__aeabi_i2d>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4905      	ldr	r1, [pc, #20]	; (80033bc <get_set_temperature+0x7c>)
 80033a8:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80033ac:	bf00      	nop
 80033ae:	bd98      	pop	{r3, r4, r7, pc}
 80033b0:	20000548 	.word	0x20000548
 80033b4:	20000020 	.word	0x20000020
 80033b8:	20000028 	.word	0x20000028
 80033bc:	20000030 	.word	0x20000030

080033c0 <beep>:

/* Beep the beeper */
void beep(){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <beep+0x30>)
 80033c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <beep+0x34>)
 80033d0:	f7fd fba2 	bl	8000b18 <__aeabi_dcmpeq>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d100      	bne.n	80033dc <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 80033da:	e006      	b.n	80033ea <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 80033dc:	2104      	movs	r1, #4
 80033de:	4806      	ldr	r0, [pc, #24]	; (80033f8 <beep+0x38>)
 80033e0:	f008 ffd2 	bl	800c388 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 80033e4:	4805      	ldr	r0, [pc, #20]	; (80033fc <beep+0x3c>)
 80033e6:	f008 fedf 	bl	800c1a8 <HAL_TIM_Base_Start_IT>
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000550 	.word	0x20000550
 80033f4:	3ff00000 	.word	0x3ff00000
 80033f8:	20001efc 	.word	0x20001efc
 80033fc:	20002078 	.word	0x20002078

08003400 <handle_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void handle_emergency_shutdown(){
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	af00      	add	r7, sp, #0
	/* Get time when iron turns on */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8003404:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <handle_emergency_shutdown+0xe8>)
 8003406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <handle_emergency_shutdown+0x20>
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <handle_emergency_shutdown+0xec>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <handle_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8003416:	f003 fa67 	bl	80068e8 <HAL_GetTick>
 800341a:	4603      	mov	r3, r0
 800341c:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <handle_emergency_shutdown+0xf0>)
 800341e:	6013      	str	r3, [r2, #0]
	}

	/* Set state to EMERGENCY_SLEEP if iron ON for longer time than emergency_time */
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8003420:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <handle_emergency_shutdown+0xe8>)
 8003422:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	f7fd fb73 	bl	8000b18 <__aeabi_dcmpeq>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d024      	beq.n	8003482 <handle_emergency_shutdown+0x82>
 8003438:	f003 fa56 	bl	80068e8 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <handle_emergency_shutdown+0xf0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd f885 	bl	8000554 <__aeabi_ui2d>
 800344a:	4604      	mov	r4, r0
 800344c:	460d      	mov	r5, r1
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <handle_emergency_shutdown+0xf4>)
 8003450:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003454:	a322      	add	r3, pc, #136	; (adr r3, 80034e0 <handle_emergency_shutdown+0xe0>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd f8f5 	bl	8000648 <__aeabi_dmul>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	f7fd fb75 	bl	8000b54 <__aeabi_dcmpge>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <handle_emergency_shutdown+0x82>
 8003470:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <handle_emergency_shutdown+0xec>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <handle_emergency_shutdown+0x82>
		change_state(EMERGENCY_SLEEP);
 8003478:	2003      	movs	r0, #3
 800347a:	f7fe f83b 	bl	80014f4 <change_state>
		beep();
 800347e:	f7ff ff9f 	bl	80033c0 <beep>
	}

	/* Set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <handle_emergency_shutdown+0xe8>)
 8003484:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <handle_emergency_shutdown+0xf8>)
 800348e:	f7fd fb6b 	bl	8000b68 <__aeabi_dcmpgt>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d009      	beq.n	80034ac <handle_emergency_shutdown+0xac>
 8003498:	4b14      	ldr	r3, [pc, #80]	; (80034ec <handle_emergency_shutdown+0xec>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <handle_emergency_shutdown+0xac>
		show_popup("\n\n  NO tip detected");
 80034a0:	4816      	ldr	r0, [pc, #88]	; (80034fc <handle_emergency_shutdown+0xfc>)
 80034a2:	f7ff fe79 	bl	8003198 <show_popup>
		change_state(EMERGENCY_SLEEP);
 80034a6:	2003      	movs	r0, #3
 80034a8:	f7fe f824 	bl	80014f4 <change_state>
	}
	/* Set state to EMERGENCY_SLEEP if input voltage is too low */
	if((sensor_values.bus_voltage <= MIN_BUSVOLTAGE) && (active_state == RUN)){
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <handle_emergency_shutdown+0xe8>)
 80034ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80034b2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80034b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	d900      	bls.n	80034c2 <handle_emergency_shutdown+0xc2>
		show_popup("\n\n  Too Low voltage");
		change_state(EMERGENCY_SLEEP);
	}
}
 80034c0:	e009      	b.n	80034d6 <handle_emergency_shutdown+0xd6>
	if((sensor_values.bus_voltage <= MIN_BUSVOLTAGE) && (active_state == RUN)){
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <handle_emergency_shutdown+0xec>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d105      	bne.n	80034d6 <handle_emergency_shutdown+0xd6>
		show_popup("\n\n  Too Low voltage");
 80034ca:	480d      	ldr	r0, [pc, #52]	; (8003500 <handle_emergency_shutdown+0x100>)
 80034cc:	f7ff fe64 	bl	8003198 <show_popup>
		change_state(EMERGENCY_SLEEP);
 80034d0:	2003      	movs	r0, #3
 80034d2:	f7fe f80f 	bl	80014f4 <change_state>
}
 80034d6:	bf00      	nop
 80034d8:	bdb0      	pop	{r4, r5, r7, pc}
 80034da:	bf00      	nop
 80034dc:	f3af 8000 	nop.w
 80034e0:	00000000 	.word	0x00000000
 80034e4:	40ed4c00 	.word	0x40ed4c00
 80034e8:	20000030 	.word	0x20000030
 80034ec:	2000001d 	.word	0x2000001d
 80034f0:	20000470 	.word	0x20000470
 80034f4:	20000550 	.word	0x20000550
 80034f8:	407e0000 	.word	0x407e0000
 80034fc:	08015ea0 	.word	0x08015ea0
 8003500:	08015eb4 	.word	0x08015eb4

08003504 <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 8003504:	b598      	push	{r3, r4, r7, lr}
 8003506:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 8003508:	4b24      	ldr	r3, [pc, #144]	; (800359c <handle_button_status+0x98>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d11e      	bne.n	800354e <handle_button_status+0x4a>
		SW_1_pressed = 0;
 8003510:	4b22      	ldr	r3, [pc, #136]	; (800359c <handle_button_status+0x98>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 8003516:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <handle_button_status+0x9c>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <handle_button_status+0x22>
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <handle_button_status+0x9c>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d103      	bne.n	800352e <handle_button_status+0x2a>
			change_state(HALTED);
 8003526:	2004      	movs	r0, #4
 8003528:	f7fd ffe4 	bl	80014f4 <change_state>
 800352c:	e00a      	b.n	8003544 <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <handle_button_status+0x9c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d003      	beq.n	800353e <handle_button_status+0x3a>
 8003536:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <handle_button_status+0x9c>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d102      	bne.n	8003544 <handle_button_status+0x40>
			change_state(RUN);
 800353e:	2000      	movs	r0, #0
 8003540:	f7fd ffd8 	bl	80014f4 <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 8003544:	f003 f9d0 	bl	80068e8 <HAL_GetTick>
 8003548:	4603      	mov	r3, r0
 800354a:	4a16      	ldr	r2, [pc, #88]	; (80035a4 <handle_button_status+0xa0>)
 800354c:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <handle_button_status+0xa4>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10d      	bne.n	8003572 <handle_button_status+0x6e>
		SW_2_pressed = 0;
 8003556:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <handle_button_status+0xa4>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <handle_button_status+0xa8>)
 800355e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003562:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	f7fd fb45 	bl	8000bf8 <__aeabi_d2uiz>
 800356e:	4603      	mov	r3, r0
 8003570:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 8003572:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <handle_button_status+0xac>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10d      	bne.n	8003596 <handle_button_status+0x92>
		SW_3_pressed = 0;
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <handle_button_status+0xac>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <handle_button_status+0xa8>)
 8003582:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003586:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	f7fd fb33 	bl	8000bf8 <__aeabi_d2uiz>
 8003592:	4603      	mov	r3, r0
 8003594:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 8003596:	bf00      	nop
 8003598:	bd98      	pop	{r3, r4, r7, pc}
 800359a:	bf00      	nop
 800359c:	20000484 	.word	0x20000484
 80035a0:	2000001d 	.word	0x2000001d
 80035a4:	2000046c 	.word	0x2000046c
 80035a8:	20000485 	.word	0x20000485
 80035ac:	20000550 	.word	0x20000550
 80035b0:	20000486 	.word	0x20000486
 80035b4:	00000000 	.word	0x00000000

080035b8 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035c4:	f006 ff38 	bl	800a438 <HAL_GPIO_ReadPin>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <get_stand_status+0x1c>
		stand_status = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	e001      	b.n	80035d8 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	493b      	ldr	r1, [pc, #236]	; (80036c8 <get_stand_status+0x110>)
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 fafd 	bl	8004bdc <Moving_Average_Compute>
 80035e2:	eeb0 7a40 	vmov.f32	s14, s0
 80035e6:	eef0 7a60 	vmov.f32	s15, s1
 80035ea:	4b38      	ldr	r3, [pc, #224]	; (80036cc <get_stand_status+0x114>)
 80035ec:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand >= 0.2){
 80035f0:	4b36      	ldr	r3, [pc, #216]	; (80036cc <get_stand_status+0x114>)
 80035f2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80035f6:	a330      	add	r3, pc, #192	; (adr r3, 80036b8 <get_stand_status+0x100>)
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f7fd faaa 	bl	8000b54 <__aeabi_dcmpge>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d039      	beq.n	800367a <get_stand_status+0xc2>
		if(active_state == RUN){
 8003606:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <get_stand_status+0x118>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d107      	bne.n	800361e <get_stand_status+0x66>
			change_state(STANDBY);
 800360e:	2001      	movs	r0, #1
 8003610:	f7fd ff70 	bl	80014f4 <change_state>
			previous_standby_millis = HAL_GetTick();
 8003614:	f003 f968 	bl	80068e8 <HAL_GetTick>
 8003618:	4603      	mov	r3, r0
 800361a:	4a2e      	ldr	r2, [pc, #184]	; (80036d4 <get_stand_status+0x11c>)
 800361c:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 800361e:	f003 f963 	bl	80068e8 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <get_stand_status+0x11c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ff92 	bl	8000554 <__aeabi_ui2d>
 8003630:	4604      	mov	r4, r0
 8003632:	460d      	mov	r5, r1
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <get_stand_status+0x120>)
 8003636:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800363a:	a321      	add	r3, pc, #132	; (adr r3, 80036c0 <get_stand_status+0x108>)
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	f7fd f802 	bl	8000648 <__aeabi_dmul>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4620      	mov	r0, r4
 800364a:	4629      	mov	r1, r5
 800364c:	f7fd fa82 	bl	8000b54 <__aeabi_dcmpge>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d006      	beq.n	8003664 <get_stand_status+0xac>
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <get_stand_status+0x118>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d102      	bne.n	8003664 <get_stand_status+0xac>
			change_state(SLEEP);
 800365e:	2002      	movs	r0, #2
 8003660:	f7fd ff48 	bl	80014f4 <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <get_stand_status+0x118>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d003      	beq.n	8003674 <get_stand_status+0xbc>
 800366c:	4b18      	ldr	r3, [pc, #96]	; (80036d0 <get_stand_status+0x118>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d102      	bne.n	800367a <get_stand_status+0xc2>
			change_state(SLEEP);
 8003674:	2002      	movs	r0, #2
 8003676:	f7fd ff3d 	bl	80014f4 <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.2){
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <get_stand_status+0x114>)
 800367c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003680:	a30d      	add	r3, pc, #52	; (adr r3, 80036b8 <get_stand_status+0x100>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f7fd fa51 	bl	8000b2c <__aeabi_dcmplt>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d100      	bne.n	8003692 <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
			change_state(RUN);
		}
	}
}
 8003690:	e00e      	b.n	80036b0 <get_stand_status+0xf8>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
 8003692:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <get_stand_status+0x118>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d007      	beq.n	80036aa <get_stand_status+0xf2>
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <get_stand_status+0x118>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d003      	beq.n	80036aa <get_stand_status+0xf2>
 80036a2:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <get_stand_status+0x118>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <get_stand_status+0xf8>
			change_state(RUN);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f7fd ff22 	bl	80014f4 <change_state>
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bdb0      	pop	{r4, r5, r7, pc}
 80036b8:	9999999a 	.word	0x9999999a
 80036bc:	3fc99999 	.word	0x3fc99999
 80036c0:	00000000 	.word	0x00000000
 80036c4:	40ed4c00 	.word	0x40ed4c00
 80036c8:	2000126c 	.word	0x2000126c
 80036cc:	20000030 	.word	0x20000030
 80036d0:	2000001d 	.word	0x2000001d
 80036d4:	20000474 	.word	0x20000474
 80036d8:	20000550 	.word	0x20000550

080036dc <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_1_Pin) == 0){
 80036e2:	2110      	movs	r1, #16
 80036e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036e8:	f006 fea6 	bl	800a438 <HAL_GPIO_ReadPin>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <get_handle_type+0x1c>
		handle_status = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	71fb      	strb	r3, [r7, #7]
 80036f6:	e001      	b.n	80036fc <get_handle_type+0x20>
	}
	else{
		handle_status = 1;
 80036f8:	2301      	movs	r3, #1
 80036fa:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle1_sense = Moving_Average_Compute(handle_status, &handle1_sense_filterStruct); /* Moving average filter */
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	495b      	ldr	r1, [pc, #364]	; (800386c <get_handle_type+0x190>)
 8003700:	4618      	mov	r0, r3
 8003702:	f001 fa6b 	bl	8004bdc <Moving_Average_Compute>
 8003706:	eeb0 7a40 	vmov.f32	s14, s0
 800370a:	eef0 7a60 	vmov.f32	s15, s1
 800370e:	4b58      	ldr	r3, [pc, #352]	; (8003870 <get_handle_type+0x194>)
 8003710:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_2_Pin) == 0){
 8003714:	2120      	movs	r1, #32
 8003716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800371a:	f006 fe8d 	bl	800a438 <HAL_GPIO_ReadPin>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <get_handle_type+0x4e>
		handle_status = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	71fb      	strb	r3, [r7, #7]
 8003728:	e001      	b.n	800372e <get_handle_type+0x52>
	}
	else{
		handle_status = 1;
 800372a:	2301      	movs	r3, #1
 800372c:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle2_sense = Moving_Average_Compute(handle_status, &handle2_sense_filterStruct); /* Moving average filter */
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	4950      	ldr	r1, [pc, #320]	; (8003874 <get_handle_type+0x198>)
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fa52 	bl	8004bdc <Moving_Average_Compute>
 8003738:	eeb0 7a40 	vmov.f32	s14, s0
 800373c:	eef0 7a60 	vmov.f32	s15, s1
 8003740:	4b4b      	ldr	r3, [pc, #300]	; (8003870 <get_handle_type+0x194>)
 8003742:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

	/* Determine if NT115 handle is detected */
	if((sensor_values.handle1_sense >= 0.5) && (sensor_values.handle2_sense < 0.5)){
 8003746:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <get_handle_type+0x194>)
 8003748:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	4b49      	ldr	r3, [pc, #292]	; (8003878 <get_handle_type+0x19c>)
 8003752:	f7fd f9ff 	bl	8000b54 <__aeabi_dcmpge>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d023      	beq.n	80037a4 <get_handle_type+0xc8>
 800375c:	4b44      	ldr	r3, [pc, #272]	; (8003870 <get_handle_type+0x194>)
 800375e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	4b44      	ldr	r3, [pc, #272]	; (8003878 <get_handle_type+0x19c>)
 8003768:	f7fd f9e0 	bl	8000b2c <__aeabi_dcmplt>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d018      	beq.n	80037a4 <get_handle_type+0xc8>
		handle = NT115;
 8003772:	4b42      	ldr	r3, [pc, #264]	; (800387c <get_handle_type+0x1a0>)
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 20; //20W
 8003778:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <get_handle_type+0x194>)
 800377a:	4a41      	ldr	r2, [pc, #260]	; (8003880 <get_handle_type+0x1a4>)
 800377c:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 3;
 800377e:	4941      	ldr	r1, [pc, #260]	; (8003884 <get_handle_type+0x1a8>)
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	4b40      	ldr	r3, [pc, #256]	; (8003888 <get_handle_type+0x1ac>)
 8003786:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 1;
 800378a:	4940      	ldr	r1, [pc, #256]	; (800388c <get_handle_type+0x1b0>)
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <get_handle_type+0x1b4>)
 8003792:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8003796:	493f      	ldr	r1, [pc, #252]	; (8003894 <get_handle_type+0x1b8>)
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <get_handle_type+0x1bc>)
 800379e:	e9c1 2300 	strd	r2, r3, [r1]
 80037a2:	e046      	b.n	8003832 <get_handle_type+0x156>
	}
	/* Determine if T210 handle is detected */
	else if((sensor_values.handle1_sense < 0.5) && (sensor_values.handle2_sense >= 0.5)){
 80037a4:	4b32      	ldr	r3, [pc, #200]	; (8003870 <get_handle_type+0x194>)
 80037a6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	4b32      	ldr	r3, [pc, #200]	; (8003878 <get_handle_type+0x19c>)
 80037b0:	f7fd f9bc 	bl	8000b2c <__aeabi_dcmplt>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d023      	beq.n	8003802 <get_handle_type+0x126>
 80037ba:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <get_handle_type+0x194>)
 80037bc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <get_handle_type+0x19c>)
 80037c6:	f7fd f9c5 	bl	8000b54 <__aeabi_dcmpge>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d018      	beq.n	8003802 <get_handle_type+0x126>
		handle = T210;
 80037d0:	4b2a      	ldr	r3, [pc, #168]	; (800387c <get_handle_type+0x1a0>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <get_handle_type+0x194>)
 80037d8:	4a30      	ldr	r2, [pc, #192]	; (800389c <get_handle_type+0x1c0>)
 80037da:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 6;
 80037dc:	4929      	ldr	r1, [pc, #164]	; (8003884 <get_handle_type+0x1a8>)
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	4b2f      	ldr	r3, [pc, #188]	; (80038a0 <get_handle_type+0x1c4>)
 80037e4:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 5;
 80037e8:	4928      	ldr	r1, [pc, #160]	; (800388c <get_handle_type+0x1b0>)
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <get_handle_type+0x1c8>)
 80037f0:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 80037f4:	4927      	ldr	r1, [pc, #156]	; (8003894 <get_handle_type+0x1b8>)
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <get_handle_type+0x19c>)
 80037fc:	e9c1 2300 	strd	r2, r3, [r1]
 8003800:	e017      	b.n	8003832 <get_handle_type+0x156>
	}
	else{
		handle = T245;
 8003802:	4b1e      	ldr	r3, [pc, #120]	; (800387c <get_handle_type+0x1a0>)
 8003804:	2202      	movs	r2, #2
 8003806:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <get_handle_type+0x194>)
 800380a:	4a27      	ldr	r2, [pc, #156]	; (80038a8 <get_handle_type+0x1cc>)
 800380c:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 8;
 800380e:	491d      	ldr	r1, [pc, #116]	; (8003884 <get_handle_type+0x1a8>)
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	4b25      	ldr	r3, [pc, #148]	; (80038ac <get_handle_type+0x1d0>)
 8003816:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 3;
 800381a:	491c      	ldr	r1, [pc, #112]	; (800388c <get_handle_type+0x1b0>)
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	4b19      	ldr	r3, [pc, #100]	; (8003888 <get_handle_type+0x1ac>)
 8003822:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8003826:	491b      	ldr	r1, [pc, #108]	; (8003894 <get_handle_type+0x1b8>)
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <get_handle_type+0x19c>)
 800382e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <get_handle_type+0x1a8>)
 8003834:	ed93 7b00 	vldr	d7, [r3]
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <get_handle_type+0x1b0>)
 800383a:	ed93 6b00 	vldr	d6, [r3]
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <get_handle_type+0x1b8>)
 8003840:	ed93 5b00 	vldr	d5, [r3]
 8003844:	eeb0 2a45 	vmov.f32	s4, s10
 8003848:	eef0 2a65 	vmov.f32	s5, s11
 800384c:	eeb0 1a46 	vmov.f32	s2, s12
 8003850:	eef0 1a66 	vmov.f32	s3, s13
 8003854:	eeb0 0a47 	vmov.f32	s0, s14
 8003858:	eef0 0a67 	vmov.f32	s1, s15
 800385c:	4814      	ldr	r0, [pc, #80]	; (80038b0 <get_handle_type+0x1d4>)
 800385e:	f001 fc76 	bl	800514e <PID_SetTunings>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20001598 	.word	0x20001598
 8003870:	20000030 	.word	0x20000030
 8003874:	200018c4 	.word	0x200018c4
 8003878:	3fe00000 	.word	0x3fe00000
 800387c:	20000460 	.word	0x20000460
 8003880:	41a00000 	.word	0x41a00000
 8003884:	20000490 	.word	0x20000490
 8003888:	40080000 	.word	0x40080000
 800388c:	20000498 	.word	0x20000498
 8003890:	3ff00000 	.word	0x3ff00000
 8003894:	200004a0 	.word	0x200004a0
 8003898:	3fd00000 	.word	0x3fd00000
 800389c:	42700000 	.word	0x42700000
 80038a0:	40180000 	.word	0x40180000
 80038a4:	40140000 	.word	0x40140000
 80038a8:	42f00000 	.word	0x42f00000
 80038ac:	40200000 	.word	0x40200000
 80038b0:	20002158 	.word	0x20002158

080038b4 <HAL_GPIO_EXTI_Callback>:

/* Interrupts at button press */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d006      	beq.n	80038d2 <HAL_GPIO_EXTI_Callback+0x1e>
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	2b80      	cmp	r3, #128	; 0x80
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_EXTI_Callback+0x1e>
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d0:	d109      	bne.n	80038e6 <HAL_GPIO_EXTI_Callback+0x32>
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d105      	bne.n	80038e6 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_TIM_Base_Start_IT(&htim16);
 80038da:	4806      	ldr	r0, [pc, #24]	; (80038f4 <HAL_GPIO_EXTI_Callback+0x40>)
 80038dc:	f008 fc64 	bl	800c1a8 <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
    }
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	2000001c 	.word	0x2000001c
 80038f4:	2000202c 	.word	0x2000202c

080038f8 <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7f1b      	ldrb	r3, [r3, #28]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d003      	beq.n	8003910 <HAL_TIM_IC_CaptureCallback+0x18>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7f1b      	ldrb	r3, [r3, #28]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d101      	bne.n	8003914 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 8003910:	f7ff fd56 	bl	80033c0 <beep>
	}
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	if (((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) && (current_measurement_requested == 1)){
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a0c      	ldr	r2, [pc, #48]	; (8003958 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d110      	bne.n	800394e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	7f1b      	ldrb	r3, [r3, #28]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d10c      	bne.n	800394e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d108      	bne.n	800394e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		current_measurement_requested = 0;
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
		current_measurement_done = 0;
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc2);
 8003948:	4806      	ldr	r0, [pc, #24]	; (8003964 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 800394a:	f003 fce5 	bl	8007318 <HAL_ADC_Start_IT>
	}
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20001e64 	.word	0x20001e64
 800395c:	200005b8 	.word	0x200005b8
 8003960:	200001d4 	.word	0x200001d4
 8003964:	20001c5c 	.word	0x20001c5c

08003968 <HAL_TIM_PeriodElapsedCallback>:

/* Timer Callbacks */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	/* take thermocouple measurement every 25 ms */
	if (htim == &htim6){
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a35      	ldr	r2, [pc, #212]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d10c      	bne.n	8003992 <HAL_TIM_PeriodElapsedCallback+0x2a>
		heater_off();
 8003978:	f7fd ffc8 	bl	800190c <heater_off>
		thermocouple_measurement_done = 0;
 800397c:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim7);
 8003982:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim7){
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a2e      	ldr	r2, [pc, #184]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d104      	bne.n	80039a4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 800399a:	2239      	movs	r2, #57	; 0x39
 800399c:	492d      	ldr	r1, [pc, #180]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800399e:	482e      	ldr	r0, [pc, #184]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80039a0:	f003 fdea 	bl	8007578 <HAL_ADC_Start_DMA>
		}

	/* Beep length timer */
	if (htim == &htim17){
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a2d      	ldr	r2, [pc, #180]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d106      	bne.n	80039ba <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_TIM_Base_Stop_IT(&htim17);
 80039ac:	482b      	ldr	r0, [pc, #172]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80039ae:	f008 fc65 	bl	800c27c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 80039b2:	2104      	movs	r1, #4
 80039b4:	482a      	ldr	r0, [pc, #168]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80039b6:	f008 fe33 	bl	800c620 <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim16 && SW_ready == 0)){
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a29      	ldr	r2, [pc, #164]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d13d      	bne.n	8003a3e <HAL_TIM_PeriodElapsedCallback+0xd6>
 80039c2:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d139      	bne.n	8003a3e <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 80039ca:	2120      	movs	r1, #32
 80039cc:	4827      	ldr	r0, [pc, #156]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80039ce:	f006 fd33 	bl	800a438 <HAL_GPIO_ReadPin>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d10b      	bne.n	80039f0 <HAL_TIM_PeriodElapsedCallback+0x88>
			SW_ready = 1;
 80039d8:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80039da:	2201      	movs	r2, #1
 80039dc:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 80039de:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
			beep();
 80039e4:	f7ff fcec 	bl	80033c0 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 80039e8:	481e      	ldr	r0, [pc, #120]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80039ea:	f008 fc47 	bl	800c27c <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim16);
		}
	}
}
 80039ee:	e026      	b.n	8003a3e <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 80039f0:	2180      	movs	r1, #128	; 0x80
 80039f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039f6:	f006 fd1f 	bl	800a438 <HAL_GPIO_ReadPin>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10b      	bne.n	8003a18 <HAL_TIM_PeriodElapsedCallback+0xb0>
			SW_ready = 1;
 8003a00:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 8003a06:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
			beep();
 8003a0c:	f7ff fcd8 	bl	80033c0 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003a10:	4814      	ldr	r0, [pc, #80]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a12:	f008 fc33 	bl	800c27c <HAL_TIM_Base_Stop_IT>
}
 8003a16:	e012      	b.n	8003a3e <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 8003a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a1c:	4813      	ldr	r0, [pc, #76]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003a1e:	f006 fd0b 	bl	800a438 <HAL_GPIO_ReadPin>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d10a      	bne.n	8003a3e <HAL_TIM_PeriodElapsedCallback+0xd6>
			SW_ready = 1;
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
			beep();
 8003a34:	f7ff fcc4 	bl	80033c0 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003a38:	480a      	ldr	r0, [pc, #40]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a3a:	f008 fc1f 	bl	800c27c <HAL_TIM_Base_Stop_IT>
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20001f48 	.word	0x20001f48
 8003a4c:	200001d5 	.word	0x200001d5
 8003a50:	20001f94 	.word	0x20001f94
 8003a54:	200004d4 	.word	0x200004d4
 8003a58:	20001bf0 	.word	0x20001bf0
 8003a5c:	20002078 	.word	0x20002078
 8003a60:	20001efc 	.word	0x20001efc
 8003a64:	2000202c 	.word	0x2000202c
 8003a68:	2000001c 	.word	0x2000001c
 8003a6c:	48000400 	.word	0x48000400
 8003a70:	20000484 	.word	0x20000484
 8003a74:	20000485 	.word	0x20000485
 8003a78:	20000486 	.word	0x20000486

08003a7c <HAL_ADC_ConvCpltCallback>:
/* ADC conversion completed Callbacks */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (thermocouple_measurement_done == 0)){
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a8c:	d110      	bne.n	8003ab0 <HAL_ADC_ConvCpltCallback+0x34>
 8003a8e:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <HAL_ADC_ConvCpltCallback+0x74>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_ADC_ConvCpltCallback+0x34>
		get_thermocouple_temperature();
 8003a96:	f7fd fdb7 	bl	8001608 <get_thermocouple_temperature>
		heater_on();
 8003a9a:	f7fd fee1 	bl	8001860 <heater_on>
		/* Compute PID */
		PID_Compute(&TPID);
 8003a9e:	4815      	ldr	r0, [pc, #84]	; (8003af4 <HAL_ADC_ConvCpltCallback+0x78>)
 8003aa0:	f001 f97e 	bl	8004da0 <PID_Compute>
		HAL_ADC_Stop_DMA(&hadc1);
 8003aa4:	4814      	ldr	r0, [pc, #80]	; (8003af8 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003aa6:	f003 fe1b 	bl	80076e0 <HAL_ADC_Stop_DMA>
		thermocouple_measurement_done = 1;
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <HAL_ADC_ConvCpltCallback+0x74>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
	}
	if ((hadc->Instance == ADC2) && (current_measurement_done == 0)){
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a11      	ldr	r2, [pc, #68]	; (8003afc <HAL_ADC_ConvCpltCallback+0x80>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d116      	bne.n	8003ae8 <HAL_ADC_ConvCpltCallback+0x6c>
 8003aba:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_ADC_ConvCpltCallback+0x84>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d112      	bne.n	8003ae8 <HAL_ADC_ConvCpltCallback+0x6c>
		sensor_values.leak_current = HAL_ADC_GetValue(&hadc2);
 8003ac2:	4810      	ldr	r0, [pc, #64]	; (8003b04 <HAL_ADC_ConvCpltCallback+0x88>)
 8003ac4:	f003 fe6d 	bl	80077a2 <HAL_ADC_GetValue>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003ace:	831a      	strh	r2, [r3, #24]
		current_raw = HAL_ADC_GetValue(&hadc2);
 8003ad0:	480c      	ldr	r0, [pc, #48]	; (8003b04 <HAL_ADC_ConvCpltCallback+0x88>)
 8003ad2:	f003 fe66 	bl	80077a2 <HAL_ADC_GetValue>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <HAL_ADC_ConvCpltCallback+0x90>)
 8003adc:	801a      	strh	r2, [r3, #0]
		heater_on();
 8003ade:	f7fd febf 	bl	8001860 <heater_on>
		current_measurement_done = 1;
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <HAL_ADC_ConvCpltCallback+0x84>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	701a      	strb	r2, [r3, #0]
	}
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	200001d5 	.word	0x200001d5
 8003af4:	20002158 	.word	0x20002158
 8003af8:	20001bf0 	.word	0x20001bf0
 8003afc:	50000100 	.word	0x50000100
 8003b00:	200001d4 	.word	0x200001d4
 8003b04:	20001c5c 	.word	0x20001c5c
 8003b08:	20000030 	.word	0x20000030
 8003b0c:	20000546 	.word	0x20000546

08003b10 <HAL_ADC_LevelOutOfWindowCallback>:

/* ADC watchdog Callback */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
		LCD_draw_earth_fault_popup();
 8003b18:	f7ff fb84 	bl	8003224 <LCD_draw_earth_fault_popup>
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	0000      	movs	r0, r0
	...

08003b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b2c:	ed2d 8b06 	vpush	{d8-d10}
 8003b30:	b08e      	sub	sp, #56	; 0x38
 8003b32:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b34:	f002 fe74 	bl	8006820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b38:	f000 fa6e 	bl	8004018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b3c:	f000 ff68 	bl	8004a10 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b40:	f000 ff34 	bl	80049ac <MX_DMA_Init>
  MX_ADC1_Init();
 8003b44:	f000 fab4 	bl	80040b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003b48:	f000 fb4a 	bl	80041e0 <MX_ADC2_Init>
  MX_CRC_Init();
 8003b4c:	f000 fbe6 	bl	800431c <MX_CRC_Init>
  MX_TIM1_Init();
 8003b50:	f000 fc84 	bl	800445c <MX_TIM1_Init>
  MX_TIM2_Init();
 8003b54:	f000 fd22 	bl	800459c <MX_TIM2_Init>
  MX_TIM4_Init();
 8003b58:	f000 fd74 	bl	8004644 <MX_TIM4_Init>
  MX_SPI2_Init();
 8003b5c:	f000 fc40 	bl	80043e0 <MX_SPI2_Init>
  MX_I2C1_Init();
 8003b60:	f000 fbfe 	bl	8004360 <MX_I2C1_Init>
  MX_TIM17_Init();
 8003b64:	f000 fea6 	bl	80048b4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8003b68:	f000 fed4 	bl	8004914 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003b6c:	f000 fdfa 	bl	8004764 <MX_TIM7_Init>
  MX_TIM8_Init();
 8003b70:	f000 fe38 	bl	80047e4 <MX_TIM8_Init>
  MX_TIM6_Init();
 8003b74:	f000 fdc0 	bl	80046f8 <MX_TIM6_Init>
  MX_TIM16_Init();
 8003b78:	f000 fe74 	bl	8004864 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f7fd fe47 	bl	8001810 <set_heater_duty>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8003b82:	2108      	movs	r1, #8
 8003b84:	4896      	ldr	r0, [pc, #600]	; (8003de0 <main+0x2b8>)
 8003b86:	f009 fe03 	bl	800d790 <HAL_TIMEx_PWMN_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8003b8a:	213c      	movs	r1, #60	; 0x3c
 8003b8c:	4895      	ldr	r0, [pc, #596]	; (8003de4 <main+0x2bc>)
 8003b8e:	f008 ff21 	bl	800c9d4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8003b92:	2100      	movs	r1, #0
 8003b94:	4892      	ldr	r0, [pc, #584]	; (8003de0 <main+0x2b8>)
 8003b96:	f008 fbf7 	bl	800c388 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 8003b9a:	4b93      	ldr	r3, [pc, #588]	; (8003de8 <main+0x2c0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2205      	movs	r2, #5
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(&htim6);
 8003ba2:	4892      	ldr	r0, [pc, #584]	; (8003dec <main+0x2c4>)
 8003ba4:	f008 fb00 	bl	800c1a8 <HAL_TIM_Base_Start_IT>

	__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 8003ba8:	4b91      	ldr	r3, [pc, #580]	; (8003df0 <main+0x2c8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	4b90      	ldr	r3, [pc, #576]	; (8003df0 <main+0x2c8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	60da      	str	r2, [r3, #12]

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003bb8:	217f      	movs	r1, #127	; 0x7f
 8003bba:	488e      	ldr	r0, [pc, #568]	; (8003df4 <main+0x2cc>)
 8003bbc:	f005 f8b0 	bl	8008d20 <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003bc0:	217f      	movs	r1, #127	; 0x7f
 8003bc2:	488d      	ldr	r0, [pc, #564]	; (8003df8 <main+0x2d0>)
 8003bc4:	f005 f8ac 	bl	8008d20 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8003bc8:	2239      	movs	r2, #57	; 0x39
 8003bca:	498c      	ldr	r1, [pc, #560]	; (8003dfc <main+0x2d4>)
 8003bcc:	488a      	ldr	r0, [pc, #552]	; (8003df8 <main+0x2d0>)
 8003bce:	f003 fcd3 	bl	8007578 <HAL_ADC_Start_DMA>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,30);
 8003bd2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003bd6:	488a      	ldr	r0, [pc, #552]	; (8003e00 <main+0x2d8>)
 8003bd8:	f000 ffcf 	bl	8004b7a <Moving_Average_Init>
	Moving_Average_Init(&mcu_temperature_filter_struct,100);
 8003bdc:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8003e04 <main+0x2dc>
 8003be0:	4889      	ldr	r0, [pc, #548]	; (8003e08 <main+0x2e0>)
 8003be2:	f000 ffca 	bl	8004b7a <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,25);
 8003be6:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8003bea:	4888      	ldr	r0, [pc, #544]	; (8003e0c <main+0x2e4>)
 8003bec:	f000 ffc5 	bl	8004b7a <Moving_Average_Init>
	Moving_Average_Init(&current_filterStruct,3);
 8003bf0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003bf4:	4886      	ldr	r0, [pc, #536]	; (8003e10 <main+0x2e8>)
 8003bf6:	f000 ffc0 	bl	8004b7a <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 8003bfa:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003bfe:	4885      	ldr	r0, [pc, #532]	; (8003e14 <main+0x2ec>)
 8003c00:	f000 ffbb 	bl	8004b7a <Moving_Average_Init>
	Moving_Average_Init(&handle1_sense_filterStruct,20);
 8003c04:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003c08:	4883      	ldr	r0, [pc, #524]	; (8003e18 <main+0x2f0>)
 8003c0a:	f000 ffb6 	bl	8004b7a <Moving_Average_Init>
	Moving_Average_Init(&handle2_sense_filterStruct,20);
 8003c0e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003c12:	4882      	ldr	r0, [pc, #520]	; (8003e1c <main+0x2f4>)
 8003c14:	f000 ffb1 	bl	8004b7a <Moving_Average_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 8003c18:	20c8      	movs	r0, #200	; 0xc8
 8003c1a:	f002 fe71 	bl	8006900 <HAL_Delay>

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 8003c1e:	f7fd fa1d 	bl	800105c <FlashCheckCRC>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f083 0301 	eor.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <main+0x10c>
  	    	FlashWrite(&default_flash_values);
 8003c2e:	487c      	ldr	r0, [pc, #496]	; (8003e20 <main+0x2f8>)
 8003c30:	f7fd fab8 	bl	80011a4 <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 8003c34:	487b      	ldr	r0, [pc, #492]	; (8003e24 <main+0x2fc>)
 8003c36:	f7fd fa9b 	bl	8001170 <FlashRead>

  	    /* Set screen rotation */
  	    if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8003c3a:	4b7a      	ldr	r3, [pc, #488]	; (8003e24 <main+0x2fc>)
 8003c3c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	f7fc ff66 	bl	8000b18 <__aeabi_dcmpeq>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
		  #define LCD_WIDTH  240
		  #define LCD_HEIGHT 320
  	    }
  	    if((flash_values.screen_rotation == 1) || (flash_values.screen_rotation == 3)){
 8003c50:	4b74      	ldr	r3, [pc, #464]	; (8003e24 <main+0x2fc>)
 8003c52:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	4b73      	ldr	r3, [pc, #460]	; (8003e28 <main+0x300>)
 8003c5c:	f7fc ff5c 	bl	8000b18 <__aeabi_dcmpeq>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
		  #define LCD_WIDTH  240
		  #define LCD_HEIGHT 320
		}

  	    LCD_init();
 8003c64:	f002 fd70 	bl	8006748 <LCD_init>
  	  	LCD_SetRotation(flash_values.screen_rotation);
 8003c68:	4b6e      	ldr	r3, [pc, #440]	; (8003e24 <main+0x2fc>)
 8003c6a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	f7fc ffc1 	bl	8000bf8 <__aeabi_d2uiz>
 8003c76:	4603      	mov	r3, r0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f002 fb12 	bl	80062a4 <LCD_SetRotation>

  		/* Set startup state */
  	    change_state(HALTED);
 8003c80:	2004      	movs	r0, #4
 8003c82:	f7fd fc37 	bl	80014f4 <change_state>

  		settings_menue();
 8003c86:	f7fd fe4b 	bl	8001920 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8003c8a:	4b66      	ldr	r3, [pc, #408]	; (8003e24 <main+0x2fc>)
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	f7fc ffae 	bl	8000bf8 <__aeabi_d2uiz>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_CD_DIRECT);
 8003ca0:	4b62      	ldr	r3, [pc, #392]	; (8003e2c <main+0x304>)
 8003ca2:	ed93 7b00 	vldr	d7, [r3]
 8003ca6:	4b62      	ldr	r3, [pc, #392]	; (8003e30 <main+0x308>)
 8003ca8:	ed93 6b00 	vldr	d6, [r3]
 8003cac:	4b61      	ldr	r3, [pc, #388]	; (8003e34 <main+0x30c>)
 8003cae:	ed93 5b00 	vldr	d5, [r3]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	eeb0 2a45 	vmov.f32	s4, s10
 8003cba:	eef0 2a65 	vmov.f32	s5, s11
 8003cbe:	eeb0 1a46 	vmov.f32	s2, s12
 8003cc2:	eef0 1a66 	vmov.f32	s3, s13
 8003cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8003cca:	eef0 0a67 	vmov.f32	s1, s15
 8003cce:	4b5a      	ldr	r3, [pc, #360]	; (8003e38 <main+0x310>)
 8003cd0:	4a5a      	ldr	r2, [pc, #360]	; (8003e3c <main+0x314>)
 8003cd2:	495b      	ldr	r1, [pc, #364]	; (8003e40 <main+0x318>)
 8003cd4:	485b      	ldr	r0, [pc, #364]	; (8003e44 <main+0x31c>)
 8003cd6:	f001 f81b 	bl	8004d10 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4859      	ldr	r0, [pc, #356]	; (8003e44 <main+0x31c>)
 8003cde:	f001 f9aa 	bl	8005036 <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 8003ce2:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <main+0x320>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4856      	ldr	r0, [pc, #344]	; (8003e44 <main+0x31c>)
 8003cec:	f001 fb1e 	bl	800532c <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 8003cf0:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8003dd0 <main+0x2a8>
 8003cf4:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8003dd8 <main+0x2b0>
 8003cf8:	4852      	ldr	r0, [pc, #328]	; (8003e44 <main+0x31c>)
 8003cfa:	f001 f9ba 	bl	8005072 <PID_SetOutputLimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 8003cfe:	f7fe ff6d 	bl	8002bdc <LCD_draw_main_screen>

  		/* Init and fill filter structures with initial values */
  		for (int i = 0; i<200;i++){
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	e010      	b.n	8003d2a <main+0x202>
  			get_bus_voltage();
 8003d08:	f7fd fc2a 	bl	8001560 <get_bus_voltage>
  			get_heater_current();
 8003d0c:	f7fd fc54 	bl	80015b8 <get_heater_current>
  			get_mcu_temp();
 8003d10:	f7fd fb7e 	bl	8001410 <get_mcu_temp>
  			get_thermocouple_temperature();
 8003d14:	f7fd fc78 	bl	8001608 <get_thermocouple_temperature>
  			get_handle_type();
 8003d18:	f7ff fce0 	bl	80036dc <get_handle_type>
  			get_stand_status();
 8003d1c:	f7ff fc4c 	bl	80035b8 <get_stand_status>
  			handle_button_status();
 8003d20:	f7ff fbf0 	bl	8003504 <handle_button_status>
  		for (int i = 0; i<200;i++){
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3301      	adds	r3, #1
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2bc7      	cmp	r3, #199	; 0xc7
 8003d2e:	ddeb      	ble.n	8003d08 <main+0x1e0>
  		}

  		/* Start-up beep */
  		beep();
 8003d30:	f7ff fb46 	bl	80033c0 <beep>
  		HAL_Delay(100);
 8003d34:	2064      	movs	r0, #100	; 0x64
 8003d36:	f002 fde3 	bl	8006900 <HAL_Delay>
  		beep();
 8003d3a:	f7ff fb41 	bl	80033c0 <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003d3e:	f002 fdd3 	bl	80068e8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <main+0x324>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	1ad2      	subs	r2, r2, r3
 8003d4a:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <main+0x328>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d30e      	bcc.n	8003d70 <main+0x248>
  				get_stand_status();
 8003d52:	f7ff fc31 	bl	80035b8 <get_stand_status>
  				get_handle_type();
 8003d56:	f7ff fcc1 	bl	80036dc <get_handle_type>
  				get_set_temperature();
 8003d5a:	f7ff faf1 	bl	8003340 <get_set_temperature>
  				handle_button_status();
 8003d5e:	f7ff fbd1 	bl	8003504 <handle_button_status>
  	  			handle_emergency_shutdown();
 8003d62:	f7ff fb4d 	bl	8003400 <handle_emergency_shutdown>
  				previous_sensor_update_high_update = HAL_GetTick();
 8003d66:	f002 fdbf 	bl	80068e8 <HAL_GetTick>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4a37      	ldr	r2, [pc, #220]	; (8003e4c <main+0x324>)
 8003d6e:	6013      	str	r3, [r2, #0]
  			}

  			if(HAL_GetTick() - previous_sensor_update_low_update >= interval_sensor_update_low_update){
 8003d70:	f002 fdba 	bl	80068e8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <main+0x32c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	1ad2      	subs	r2, r2, r3
 8003d7c:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <main+0x330>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d30a      	bcc.n	8003d9a <main+0x272>
  				get_bus_voltage();
 8003d84:	f7fd fbec 	bl	8001560 <get_bus_voltage>
  				get_heater_current();
 8003d88:	f7fd fc16 	bl	80015b8 <get_heater_current>
  				get_mcu_temp();
 8003d8c:	f7fd fb40 	bl	8001410 <get_mcu_temp>
  				previous_sensor_update_low_update = HAL_GetTick();
 8003d90:	f002 fdaa 	bl	80068e8 <HAL_GetTick>
 8003d94:	4603      	mov	r3, r0
 8003d96:	4a2f      	ldr	r2, [pc, #188]	; (8003e54 <main+0x32c>)
 8003d98:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8003d9a:	4b30      	ldr	r3, [pc, #192]	; (8003e5c <main+0x334>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	dc68      	bgt.n	8003e74 <main+0x34c>
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	da5e      	bge.n	8003e64 <main+0x33c>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <main+0x288>
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d007      	beq.n	8003dbe <main+0x296>
 8003dae:	e061      	b.n	8003e74 <main+0x34c>
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8003db0:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <main+0x338>)
 8003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db6:	4920      	ldr	r1, [pc, #128]	; (8003e38 <main+0x310>)
 8003db8:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003dbc:	e05a      	b.n	8003e74 <main+0x34c>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 8003dbe:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <main+0x2fc>)
 8003dc0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003dc4:	491c      	ldr	r1, [pc, #112]	; (8003e38 <main+0x310>)
 8003dc6:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003dca:	e053      	b.n	8003e74 <main+0x34c>
 8003dcc:	f3af 8000 	nop.w
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	407f4000 	.word	0x407f4000
	...
 8003de0:	20001e64 	.word	0x20001e64
 8003de4:	20001eb0 	.word	0x20001eb0
 8003de8:	20001efc 	.word	0x20001efc
 8003dec:	20001f48 	.word	0x20001f48
 8003df0:	20001f94 	.word	0x20001f94
 8003df4:	20001c5c 	.word	0x20001c5c
 8003df8:	20001bf0 	.word	0x20001bf0
 8003dfc:	200004d4 	.word	0x200004d4
 8003e00:	200005bc 	.word	0x200005bc
 8003e04:	42c80000 	.word	0x42c80000
 8003e08:	200008e8 	.word	0x200008e8
 8003e0c:	20000c14 	.word	0x20000c14
 8003e10:	20000f40 	.word	0x20000f40
 8003e14:	2000126c 	.word	0x2000126c
 8003e18:	20001598 	.word	0x20001598
 8003e1c:	200018c4 	.word	0x200018c4
 8003e20:	20000080 	.word	0x20000080
 8003e24:	20000550 	.word	0x20000550
 8003e28:	3ff00000 	.word	0x3ff00000
 8003e2c:	20000490 	.word	0x20000490
 8003e30:	20000498 	.word	0x20000498
 8003e34:	200004a0 	.word	0x200004a0
 8003e38:	200005a8 	.word	0x200005a8
 8003e3c:	200005a0 	.word	0x200005a0
 8003e40:	20000038 	.word	0x20000038
 8003e44:	20002158 	.word	0x20002158
 8003e48:	2000000c 	.word	0x2000000c
 8003e4c:	2000047c 	.word	0x2000047c
 8003e50:	20000014 	.word	0x20000014
 8003e54:	20000480 	.word	0x20000480
 8003e58:	20000018 	.word	0x20000018
 8003e5c:	2000001d 	.word	0x2000001d
 8003e60:	20000030 	.word	0x20000030
  				}
  				case SLEEP:
  				case EMERGENCY_SLEEP:
  				case HALTED: {
  					PID_setpoint = 0;
 8003e64:	4959      	ldr	r1, [pc, #356]	; (8003fcc <main+0x4a4>)
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003e72:	bf00      	nop
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8003e74:	f002 fd38 	bl	80068e8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b55      	ldr	r3, [pc, #340]	; (8003fd0 <main+0x4a8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	1ad2      	subs	r2, r2, r3
 8003e80:	4b54      	ldr	r3, [pc, #336]	; (8003fd4 <main+0x4ac>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d371      	bcc.n	8003f6c <main+0x444>
  				memset(&buffer, '\0', sizeof(buffer));
 8003e88:	2228      	movs	r2, #40	; 0x28
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4852      	ldr	r0, [pc, #328]	; (8003fd8 <main+0x4b0>)
 8003e8e:	f00e f9a6 	bl	80121de <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003e92:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <main+0x4b4>)
 8003e94:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8003e98:	4b4c      	ldr	r3, [pc, #304]	; (8003fcc <main+0x4a4>)
 8003e9a:	e9d3 8900 	ldrd	r8, r9, [r3]
  						sensor_values.thermocouple_temperature, PID_setpoint,
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003e9e:	4b50      	ldr	r3, [pc, #320]	; (8003fe0 <main+0x4b8>)
 8003ea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	4b4e      	ldr	r3, [pc, #312]	; (8003fe4 <main+0x4bc>)
 8003eaa:	f7fc fcf7 	bl	800089c <__aeabi_ddiv>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	4b4b      	ldr	r3, [pc, #300]	; (8003fe8 <main+0x4c0>)
 8003ebc:	f7fc fbc4 	bl	8000648 <__aeabi_dmul>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	ec43 2b19 	vmov	d9, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003ec8:	4848      	ldr	r0, [pc, #288]	; (8003fec <main+0x4c4>)
 8003eca:	f001 fa73 	bl	80053b4 <PID_GetPpart>
 8003ece:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	4b46      	ldr	r3, [pc, #280]	; (8003ff0 <main+0x4c8>)
 8003ed8:	f7fc fce0 	bl	800089c <__aeabi_ddiv>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003ee4:	4841      	ldr	r0, [pc, #260]	; (8003fec <main+0x4c4>)
 8003ee6:	f001 fa77 	bl	80053d8 <PID_GetIpart>
 8003eea:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	4b3f      	ldr	r3, [pc, #252]	; (8003ff0 <main+0x4c8>)
 8003ef4:	f7fc fcd2 	bl	800089c <__aeabi_ddiv>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f00:	483a      	ldr	r0, [pc, #232]	; (8003fec <main+0x4c4>)
 8003f02:	f001 fa7b 	bl	80053fc <PID_GetDpart>
 8003f06:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <main+0x4c8>)
 8003f10:	f7fc fcc4 	bl	800089c <__aeabi_ddiv>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4614      	mov	r4, r2
 8003f1a:	461d      	mov	r5, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f1c:	4b2f      	ldr	r3, [pc, #188]	; (8003fdc <main+0x4b4>)
 8003f1e:	695b      	ldr	r3, [r3, #20]
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fb39 	bl	8000598 <__aeabi_f2d>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003f2e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003f32:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003f36:	ed8d ab04 	vstr	d10, [sp, #16]
 8003f3a:	ed8d 9b02 	vstr	d9, [sp, #8]
 8003f3e:	e9cd 8900 	strd	r8, r9, [sp]
 8003f42:	4652      	mov	r2, sl
 8003f44:	465b      	mov	r3, fp
 8003f46:	492b      	ldr	r1, [pc, #172]	; (8003ff4 <main+0x4cc>)
 8003f48:	4823      	ldr	r0, [pc, #140]	; (8003fd8 <main+0x4b0>)
 8003f4a:	f00e f8e5 	bl	8012118 <siprintf>
  				//CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
  			    HAL_UART_Transmit_IT(&huart1, (uint8_t *) buffer, strlen(buffer));
 8003f4e:	4822      	ldr	r0, [pc, #136]	; (8003fd8 <main+0x4b0>)
 8003f50:	f7fc f9b6 	bl	80002c0 <strlen>
 8003f54:	4603      	mov	r3, r0
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	491f      	ldr	r1, [pc, #124]	; (8003fd8 <main+0x4b0>)
 8003f5c:	4826      	ldr	r0, [pc, #152]	; (8003ff8 <main+0x4d0>)
 8003f5e:	f009 fee9 	bl	800dd34 <HAL_UART_Transmit_IT>
  				previous_millis_debug = HAL_GetTick();
 8003f62:	f002 fcc1 	bl	80068e8 <HAL_GetTick>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <main+0x4a8>)
 8003f6a:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_measure_current_update >= interval_measure_current){
 8003f6c:	f002 fcbc 	bl	80068e8 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <main+0x4d4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	1ad2      	subs	r2, r2, r3
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <main+0x4d8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d311      	bcc.n	8003fa4 <main+0x47c>
  					if(thermocouple_measurement_done == 1){ //Only take current measurement if thermocouple measurement is not ongoing
 8003f80:	4b20      	ldr	r3, [pc, #128]	; (8004004 <main+0x4dc>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d10d      	bne.n	8003fa4 <main+0x47c>
						current_measurement_done = 0;
 8003f88:	4b1f      	ldr	r3, [pc, #124]	; (8004008 <main+0x4e0>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
						set_heater_duty(PID_MAX_OUTPUT/2);
 8003f8e:	20fa      	movs	r0, #250	; 0xfa
 8003f90:	f7fd fc3e 	bl	8001810 <set_heater_duty>
						current_measurement_requested = 1;
 8003f94:	4b1d      	ldr	r3, [pc, #116]	; (800400c <main+0x4e4>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	701a      	strb	r2, [r3, #0]
	  					previous_measure_current_update = HAL_GetTick();
 8003f9a:	f002 fca5 	bl	80068e8 <HAL_GetTick>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <main+0x4d4>)
 8003fa2:	6013      	str	r3, [r2, #0]
  					}
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 8003fa4:	f002 fca0 	bl	80068e8 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b19      	ldr	r3, [pc, #100]	; (8004010 <main+0x4e8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1ad2      	subs	r2, r2, r3
 8003fb0:	4b18      	ldr	r3, [pc, #96]	; (8004014 <main+0x4ec>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	f4ff aec2 	bcc.w	8003d3e <main+0x216>
  				update_display();
 8003fba:	f7fd ffe5 	bl	8001f88 <update_display>
  				previous_millis_display = HAL_GetTick();
 8003fbe:	f002 fc93 	bl	80068e8 <HAL_GetTick>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4a12      	ldr	r2, [pc, #72]	; (8004010 <main+0x4e8>)
 8003fc6:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003fc8:	e6b9      	b.n	8003d3e <main+0x216>
 8003fca:	bf00      	nop
 8003fcc:	200005a8 	.word	0x200005a8
 8003fd0:	20000468 	.word	0x20000468
 8003fd4:	20000008 	.word	0x20000008
 8003fd8:	200004a8 	.word	0x200004a8
 8003fdc:	20000030 	.word	0x20000030
 8003fe0:	200005a0 	.word	0x200005a0
 8003fe4:	407f4000 	.word	0x407f4000
 8003fe8:	40590000 	.word	0x40590000
 8003fec:	20002158 	.word	0x20002158
 8003ff0:	40240000 	.word	0x40240000
 8003ff4:	08015ec8 	.word	0x08015ec8
 8003ff8:	200020c4 	.word	0x200020c4
 8003ffc:	20000478 	.word	0x20000478
 8004000:	20000010 	.word	0x20000010
 8004004:	200001d5 	.word	0x200001d5
 8004008:	200001d4 	.word	0x200001d4
 800400c:	200005b8 	.word	0x200005b8
 8004010:	20000464 	.word	0x20000464
 8004014:	20000004 	.word	0x20000004

08004018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b094      	sub	sp, #80	; 0x50
 800401c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800401e:	f107 0318 	add.w	r3, r7, #24
 8004022:	2238      	movs	r2, #56	; 0x38
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f00e f8d9 	bl	80121de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800402c:	1d3b      	adds	r3, r7, #4
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	609a      	str	r2, [r3, #8]
 8004036:	60da      	str	r2, [r3, #12]
 8004038:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800403a:	2000      	movs	r0, #0
 800403c:	f006 fb76 	bl	800a72c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004040:	2302      	movs	r3, #2
 8004042:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800404e:	2302      	movs	r3, #2
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004052:	2302      	movs	r3, #2
 8004054:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004056:	2304      	movs	r3, #4
 8004058:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800405a:	2355      	movs	r3, #85	; 0x55
 800405c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800405e:	2302      	movs	r3, #2
 8004060:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004062:	2302      	movs	r3, #2
 8004064:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004066:	2302      	movs	r3, #2
 8004068:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800406a:	f107 0318 	add.w	r3, r7, #24
 800406e:	4618      	mov	r0, r3
 8004070:	f006 fc10 	bl	800a894 <HAL_RCC_OscConfig>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800407a:	f000 fd79 	bl	8004b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800407e:	230f      	movs	r3, #15
 8004080:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004082:	2303      	movs	r3, #3
 8004084:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004092:	1d3b      	adds	r3, r7, #4
 8004094:	2104      	movs	r1, #4
 8004096:	4618      	mov	r0, r3
 8004098:	f006 ff0e 	bl	800aeb8 <HAL_RCC_ClockConfig>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80040a2:	f000 fd65 	bl	8004b70 <Error_Handler>
  }
}
 80040a6:	bf00      	nop
 80040a8:	3750      	adds	r7, #80	; 0x50
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08c      	sub	sp, #48	; 0x30
 80040b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80040b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	2220      	movs	r2, #32
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f00e f888 	bl	80121de <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80040ce:	4b40      	ldr	r3, [pc, #256]	; (80041d0 <MX_ADC1_Init+0x120>)
 80040d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80040d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80040d6:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <MX_ADC1_Init+0x120>)
 80040d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80040dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040de:	4b3c      	ldr	r3, [pc, #240]	; (80041d0 <MX_ADC1_Init+0x120>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040e4:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <MX_ADC1_Init+0x120>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80040ea:	4b39      	ldr	r3, [pc, #228]	; (80041d0 <MX_ADC1_Init+0x120>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80040f0:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <MX_ADC1_Init+0x120>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040f6:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <MX_ADC1_Init+0x120>)
 80040f8:	2204      	movs	r2, #4
 80040fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80040fc:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <MX_ADC1_Init+0x120>)
 80040fe:	2200      	movs	r2, #0
 8004100:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004102:	4b33      	ldr	r3, [pc, #204]	; (80041d0 <MX_ADC1_Init+0x120>)
 8004104:	2201      	movs	r2, #1
 8004106:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8004108:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <MX_ADC1_Init+0x120>)
 800410a:	2203      	movs	r2, #3
 800410c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800410e:	4b30      	ldr	r3, [pc, #192]	; (80041d0 <MX_ADC1_Init+0x120>)
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004116:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <MX_ADC1_Init+0x120>)
 8004118:	2200      	movs	r2, #0
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <MX_ADC1_Init+0x120>)
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004122:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <MX_ADC1_Init+0x120>)
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800412a:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <MX_ADC1_Init+0x120>)
 800412c:	2200      	movs	r2, #0
 800412e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004130:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <MX_ADC1_Init+0x120>)
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004138:	4825      	ldr	r0, [pc, #148]	; (80041d0 <MX_ADC1_Init+0x120>)
 800413a:	f002 ff69 	bl	8007010 <HAL_ADC_Init>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004144:	f000 fd14 	bl	8004b70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004148:	2300      	movs	r3, #0
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800414c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004150:	4619      	mov	r1, r3
 8004152:	481f      	ldr	r0, [pc, #124]	; (80041d0 <MX_ADC1_Init+0x120>)
 8004154:	f004 fe78 	bl	8008e48 <HAL_ADCEx_MultiModeConfigChannel>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800415e:	f000 fd07 	bl	8004b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004162:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <MX_ADC1_Init+0x124>)
 8004164:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004166:	2306      	movs	r3, #6
 8004168:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800416a:	2306      	movs	r3, #6
 800416c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800416e:	237f      	movs	r3, #127	; 0x7f
 8004170:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004172:	2304      	movs	r3, #4
 8004174:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4814      	ldr	r0, [pc, #80]	; (80041d0 <MX_ADC1_Init+0x120>)
 8004180:	f003 fd4a 	bl	8007c18 <HAL_ADC_ConfigChannel>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800418a:	f000 fcf1 	bl	8004b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800418e:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <MX_ADC1_Init+0x128>)
 8004190:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004192:	230c      	movs	r3, #12
 8004194:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	4619      	mov	r1, r3
 800419a:	480d      	ldr	r0, [pc, #52]	; (80041d0 <MX_ADC1_Init+0x120>)
 800419c:	f003 fd3c 	bl	8007c18 <HAL_ADC_ConfigChannel>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80041a6:	f000 fce3 	bl	8004b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <MX_ADC1_Init+0x12c>)
 80041ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80041ae:	2312      	movs	r3, #18
 80041b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4806      	ldr	r0, [pc, #24]	; (80041d0 <MX_ADC1_Init+0x120>)
 80041b8:	f003 fd2e 	bl	8007c18 <HAL_ADC_ConfigChannel>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80041c2:	f000 fcd5 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041c6:	bf00      	nop
 80041c8:	3730      	adds	r7, #48	; 0x30
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20001bf0 	.word	0x20001bf0
 80041d4:	0c900008 	.word	0x0c900008
 80041d8:	10c00010 	.word	0x10c00010
 80041dc:	c3210000 	.word	0xc3210000

080041e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b090      	sub	sp, #64	; 0x40
 80041e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80041e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	605a      	str	r2, [r3, #4]
 80041f0:	609a      	str	r2, [r3, #8]
 80041f2:	60da      	str	r2, [r3, #12]
 80041f4:	611a      	str	r2, [r3, #16]
 80041f6:	615a      	str	r2, [r3, #20]
 80041f8:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	2220      	movs	r2, #32
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f00d ffec 	bl	80121de <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004206:	4b40      	ldr	r3, [pc, #256]	; (8004308 <MX_ADC2_Init+0x128>)
 8004208:	4a40      	ldr	r2, [pc, #256]	; (800430c <MX_ADC2_Init+0x12c>)
 800420a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800420c:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <MX_ADC2_Init+0x128>)
 800420e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004212:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004214:	4b3c      	ldr	r3, [pc, #240]	; (8004308 <MX_ADC2_Init+0x128>)
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800421a:	4b3b      	ldr	r3, [pc, #236]	; (8004308 <MX_ADC2_Init+0x128>)
 800421c:	2200      	movs	r2, #0
 800421e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004220:	4b39      	ldr	r3, [pc, #228]	; (8004308 <MX_ADC2_Init+0x128>)
 8004222:	2200      	movs	r2, #0
 8004224:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004226:	4b38      	ldr	r3, [pc, #224]	; (8004308 <MX_ADC2_Init+0x128>)
 8004228:	2201      	movs	r2, #1
 800422a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800422c:	4b36      	ldr	r3, [pc, #216]	; (8004308 <MX_ADC2_Init+0x128>)
 800422e:	2204      	movs	r2, #4
 8004230:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004232:	4b35      	ldr	r3, [pc, #212]	; (8004308 <MX_ADC2_Init+0x128>)
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004238:	4b33      	ldr	r3, [pc, #204]	; (8004308 <MX_ADC2_Init+0x128>)
 800423a:	2200      	movs	r2, #0
 800423c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800423e:	4b32      	ldr	r3, [pc, #200]	; (8004308 <MX_ADC2_Init+0x128>)
 8004240:	2202      	movs	r2, #2
 8004242:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004244:	4b30      	ldr	r3, [pc, #192]	; (8004308 <MX_ADC2_Init+0x128>)
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800424c:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <MX_ADC2_Init+0x128>)
 800424e:	2200      	movs	r2, #0
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <MX_ADC2_Init+0x128>)
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004258:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <MX_ADC2_Init+0x128>)
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004260:	4b29      	ldr	r3, [pc, #164]	; (8004308 <MX_ADC2_Init+0x128>)
 8004262:	2200      	movs	r2, #0
 8004264:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <MX_ADC2_Init+0x128>)
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800426e:	4826      	ldr	r0, [pc, #152]	; (8004308 <MX_ADC2_Init+0x128>)
 8004270:	f002 fece 	bl	8007010 <HAL_ADC_Init>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 800427a:	f000 fc79 	bl	8004b70 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800427e:	4b24      	ldr	r3, [pc, #144]	; (8004310 <MX_ADC2_Init+0x130>)
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8004282:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 8004288:	4b22      	ldr	r3, [pc, #136]	; (8004314 <MX_ADC2_Init+0x134>)
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 800428c:	2301      	movs	r3, #1
 800428e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.HighThreshold = 2000;
 8004292:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.LowThreshold = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 800429c:	2300      	movs	r3, #0
 800429e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80042a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a4:	4619      	mov	r1, r3
 80042a6:	4818      	ldr	r0, [pc, #96]	; (8004308 <MX_ADC2_Init+0x128>)
 80042a8:	f004 f8a6 	bl	80083f8 <HAL_ADC_AnalogWDGConfig>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80042b2:	f000 fc5d 	bl	8004b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80042b6:	4b17      	ldr	r3, [pc, #92]	; (8004314 <MX_ADC2_Init+0x134>)
 80042b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042ba:	2306      	movs	r3, #6
 80042bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042c2:	237f      	movs	r3, #127	; 0x7f
 80042c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80042c6:	2304      	movs	r3, #4
 80042c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	480d      	ldr	r0, [pc, #52]	; (8004308 <MX_ADC2_Init+0x128>)
 80042d4:	f003 fca0 	bl	8007c18 <HAL_ADC_ConfigChannel>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 80042de:	f000 fc47 	bl	8004b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <MX_ADC2_Init+0x138>)
 80042e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80042e6:	230c      	movs	r3, #12
 80042e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4806      	ldr	r0, [pc, #24]	; (8004308 <MX_ADC2_Init+0x128>)
 80042f0:	f003 fc92 	bl	8007c18 <HAL_ADC_ConfigChannel>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 80042fa:	f000 fc39 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80042fe:	bf00      	nop
 8004300:	3740      	adds	r7, #64	; 0x40
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20001c5c 	.word	0x20001c5c
 800430c:	50000100 	.word	0x50000100
 8004310:	7dc00000 	.word	0x7dc00000
 8004314:	08600004 	.word	0x08600004
 8004318:	2a000400 	.word	0x2a000400

0800431c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004320:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <MX_CRC_Init+0x3c>)
 8004322:	4a0e      	ldr	r2, [pc, #56]	; (800435c <MX_CRC_Init+0x40>)
 8004324:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <MX_CRC_Init+0x3c>)
 8004328:	2200      	movs	r2, #0
 800432a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <MX_CRC_Init+0x3c>)
 800432e:	2200      	movs	r2, #0
 8004330:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <MX_CRC_Init+0x3c>)
 8004334:	2200      	movs	r2, #0
 8004336:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004338:	4b07      	ldr	r3, [pc, #28]	; (8004358 <MX_CRC_Init+0x3c>)
 800433a:	2200      	movs	r2, #0
 800433c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <MX_CRC_Init+0x3c>)
 8004340:	2201      	movs	r2, #1
 8004342:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004344:	4804      	ldr	r0, [pc, #16]	; (8004358 <MX_CRC_Init+0x3c>)
 8004346:	f004 ff33 	bl	80091b0 <HAL_CRC_Init>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8004350:	f000 fc0e 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20001d28 	.word	0x20001d28
 800435c:	40023000 	.word	0x40023000

08004360 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004364:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <MX_I2C1_Init+0x74>)
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <MX_I2C1_Init+0x78>)
 8004368:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <MX_I2C1_Init+0x74>)
 800436c:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <MX_I2C1_Init+0x7c>)
 800436e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <MX_I2C1_Init+0x74>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004376:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <MX_I2C1_Init+0x74>)
 8004378:	2201      	movs	r2, #1
 800437a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800437c:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <MX_I2C1_Init+0x74>)
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004382:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <MX_I2C1_Init+0x74>)
 8004384:	2200      	movs	r2, #0
 8004386:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004388:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <MX_I2C1_Init+0x74>)
 800438a:	2200      	movs	r2, #0
 800438c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800438e:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <MX_I2C1_Init+0x74>)
 8004390:	2200      	movs	r2, #0
 8004392:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004394:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <MX_I2C1_Init+0x74>)
 8004396:	2200      	movs	r2, #0
 8004398:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800439a:	480e      	ldr	r0, [pc, #56]	; (80043d4 <MX_I2C1_Init+0x74>)
 800439c:	f006 f894 	bl	800a4c8 <HAL_I2C_Init>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80043a6:	f000 fbe3 	bl	8004b70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80043aa:	2100      	movs	r1, #0
 80043ac:	4809      	ldr	r0, [pc, #36]	; (80043d4 <MX_I2C1_Init+0x74>)
 80043ae:	f006 f926 	bl	800a5fe <HAL_I2CEx_ConfigAnalogFilter>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80043b8:	f000 fbda 	bl	8004b70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80043bc:	2100      	movs	r1, #0
 80043be:	4805      	ldr	r0, [pc, #20]	; (80043d4 <MX_I2C1_Init+0x74>)
 80043c0:	f006 f968 	bl	800a694 <HAL_I2CEx_ConfigDigitalFilter>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80043ca:	f000 fbd1 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20001d4c 	.word	0x20001d4c
 80043d8:	40005400 	.word	0x40005400
 80043dc:	30a0a7fb 	.word	0x30a0a7fb

080043e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <MX_SPI2_Init+0x74>)
 80043e6:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <MX_SPI2_Init+0x78>)
 80043e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <MX_SPI2_Init+0x74>)
 80043ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80043f2:	4b18      	ldr	r3, [pc, #96]	; (8004454 <MX_SPI2_Init+0x74>)
 80043f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043f8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <MX_SPI2_Init+0x74>)
 80043fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004400:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004402:	4b14      	ldr	r3, [pc, #80]	; (8004454 <MX_SPI2_Init+0x74>)
 8004404:	2200      	movs	r2, #0
 8004406:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <MX_SPI2_Init+0x74>)
 800440a:	2200      	movs	r2, #0
 800440c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <MX_SPI2_Init+0x74>)
 8004410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004414:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <MX_SPI2_Init+0x74>)
 8004418:	2210      	movs	r2, #16
 800441a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <MX_SPI2_Init+0x74>)
 800441e:	2200      	movs	r2, #0
 8004420:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004422:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <MX_SPI2_Init+0x74>)
 8004424:	2200      	movs	r2, #0
 8004426:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <MX_SPI2_Init+0x74>)
 800442a:	2200      	movs	r2, #0
 800442c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <MX_SPI2_Init+0x74>)
 8004430:	2207      	movs	r2, #7
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004434:	4b07      	ldr	r3, [pc, #28]	; (8004454 <MX_SPI2_Init+0x74>)
 8004436:	2200      	movs	r2, #0
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <MX_SPI2_Init+0x74>)
 800443c:	2208      	movs	r2, #8
 800443e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004440:	4804      	ldr	r0, [pc, #16]	; (8004454 <MX_SPI2_Init+0x74>)
 8004442:	f007 f945 	bl	800b6d0 <HAL_SPI_Init>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800444c:	f000 fb90 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004450:	bf00      	nop
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20001da0 	.word	0x20001da0
 8004458:	40003800 	.word	0x40003800

0800445c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b098      	sub	sp, #96	; 0x60
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004462:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800446e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	609a      	str	r2, [r3, #8]
 800447a:	60da      	str	r2, [r3, #12]
 800447c:	611a      	str	r2, [r3, #16]
 800447e:	615a      	str	r2, [r3, #20]
 8004480:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	2234      	movs	r2, #52	; 0x34
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f00d fea8 	bl	80121de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800448e:	4b41      	ldr	r3, [pc, #260]	; (8004594 <MX_TIM1_Init+0x138>)
 8004490:	4a41      	ldr	r2, [pc, #260]	; (8004598 <MX_TIM1_Init+0x13c>)
 8004492:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8004494:	4b3f      	ldr	r3, [pc, #252]	; (8004594 <MX_TIM1_Init+0x138>)
 8004496:	2213      	movs	r2, #19
 8004498:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800449a:	4b3e      	ldr	r3, [pc, #248]	; (8004594 <MX_TIM1_Init+0x138>)
 800449c:	2200      	movs	r2, #0
 800449e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80044a0:	4b3c      	ldr	r3, [pc, #240]	; (8004594 <MX_TIM1_Init+0x138>)
 80044a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044a8:	4b3a      	ldr	r3, [pc, #232]	; (8004594 <MX_TIM1_Init+0x138>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80044ae:	4b39      	ldr	r3, [pc, #228]	; (8004594 <MX_TIM1_Init+0x138>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044b4:	4b37      	ldr	r3, [pc, #220]	; (8004594 <MX_TIM1_Init+0x138>)
 80044b6:	2280      	movs	r2, #128	; 0x80
 80044b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044ba:	4836      	ldr	r0, [pc, #216]	; (8004594 <MX_TIM1_Init+0x138>)
 80044bc:	f007 ff0d 	bl	800c2da <HAL_TIM_PWM_Init>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80044c6:	f000 fb53 	bl	8004b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d2:	2300      	movs	r3, #0
 80044d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044da:	4619      	mov	r1, r3
 80044dc:	482d      	ldr	r0, [pc, #180]	; (8004594 <MX_TIM1_Init+0x138>)
 80044de:	f009 fa5f 	bl	800d9a0 <HAL_TIMEx_MasterConfigSynchronization>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80044e8:	f000 fb42 	bl	8004b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ec:	2360      	movs	r3, #96	; 0x60
 80044ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044f4:	2300      	movs	r3, #0
 80044f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044f8:	2300      	movs	r3, #0
 80044fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004500:	2300      	movs	r3, #0
 8004502:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004504:	2300      	movs	r3, #0
 8004506:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004508:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800450c:	2200      	movs	r2, #0
 800450e:	4619      	mov	r1, r3
 8004510:	4820      	ldr	r0, [pc, #128]	; (8004594 <MX_TIM1_Init+0x138>)
 8004512:	f008 fc5d 	bl	800cdd0 <HAL_TIM_PWM_ConfigChannel>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800451c:	f000 fb28 	bl	8004b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004520:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004524:	2208      	movs	r2, #8
 8004526:	4619      	mov	r1, r3
 8004528:	481a      	ldr	r0, [pc, #104]	; (8004594 <MX_TIM1_Init+0x138>)
 800452a:	f008 fc51 	bl	800cdd0 <HAL_TIM_PWM_ConfigChannel>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8004534:	f000 fb1c 	bl	8004b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004538:	2300      	movs	r3, #0
 800453a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800453c:	2300      	movs	r3, #0
 800453e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800454c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004550:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004556:	2300      	movs	r3, #0
 8004558:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800455e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004568:	2300      	movs	r3, #0
 800456a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800456c:	2300      	movs	r3, #0
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004570:	1d3b      	adds	r3, r7, #4
 8004572:	4619      	mov	r1, r3
 8004574:	4807      	ldr	r0, [pc, #28]	; (8004594 <MX_TIM1_Init+0x138>)
 8004576:	f009 fa95 	bl	800daa4 <HAL_TIMEx_ConfigBreakDeadTime>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004580:	f000 faf6 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004584:	4803      	ldr	r0, [pc, #12]	; (8004594 <MX_TIM1_Init+0x138>)
 8004586:	f001 fac1 	bl	8005b0c <HAL_TIM_MspPostInit>

}
 800458a:	bf00      	nop
 800458c:	3760      	adds	r7, #96	; 0x60
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20001e64 	.word	0x20001e64
 8004598:	40012c00 	.word	0x40012c00

0800459c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08c      	sub	sp, #48	; 0x30
 80045a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	2224      	movs	r2, #36	; 0x24
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f00d fe17 	bl	80121de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045b0:	463b      	mov	r3, r7
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	605a      	str	r2, [r3, #4]
 80045b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80045ba:	4b21      	ldr	r3, [pc, #132]	; (8004640 <MX_TIM2_Init+0xa4>)
 80045bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80045c2:	4b1f      	ldr	r3, [pc, #124]	; (8004640 <MX_TIM2_Init+0xa4>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c8:	4b1d      	ldr	r3, [pc, #116]	; (8004640 <MX_TIM2_Init+0xa4>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80045ce:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <MX_TIM2_Init+0xa4>)
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
 80045d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d6:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <MX_TIM2_Init+0xa4>)
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045dc:	4b18      	ldr	r3, [pc, #96]	; (8004640 <MX_TIM2_Init+0xa4>)
 80045de:	2200      	movs	r2, #0
 80045e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80045e2:	2303      	movs	r3, #3
 80045e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80045e6:	2302      	movs	r3, #2
 80045e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80045ea:	2301      	movs	r3, #1
 80045ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80045f6:	2300      	movs	r3, #0
 80045f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80045fa:	2301      	movs	r3, #1
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80045fe:	2300      	movs	r3, #0
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004606:	f107 030c 	add.w	r3, r7, #12
 800460a:	4619      	mov	r1, r3
 800460c:	480c      	ldr	r0, [pc, #48]	; (8004640 <MX_TIM2_Init+0xa4>)
 800460e:	f008 f93b 	bl	800c888 <HAL_TIM_Encoder_Init>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004618:	f000 faaa 	bl	8004b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800461c:	2300      	movs	r3, #0
 800461e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004620:	2300      	movs	r3, #0
 8004622:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004624:	463b      	mov	r3, r7
 8004626:	4619      	mov	r1, r3
 8004628:	4805      	ldr	r0, [pc, #20]	; (8004640 <MX_TIM2_Init+0xa4>)
 800462a:	f009 f9b9 	bl	800d9a0 <HAL_TIMEx_MasterConfigSynchronization>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004634:	f000 fa9c 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004638:	bf00      	nop
 800463a:	3730      	adds	r7, #48	; 0x30
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20001eb0 	.word	0x20001eb0

08004644 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800464a:	f107 031c 	add.w	r3, r7, #28
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	605a      	str	r2, [r3, #4]
 8004654:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004656:	463b      	mov	r3, r7
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	611a      	str	r2, [r3, #16]
 8004664:	615a      	str	r2, [r3, #20]
 8004666:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004668:	4b21      	ldr	r3, [pc, #132]	; (80046f0 <MX_TIM4_Init+0xac>)
 800466a:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <MX_TIM4_Init+0xb0>)
 800466c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <MX_TIM4_Init+0xac>)
 8004670:	f242 720f 	movw	r2, #9999	; 0x270f
 8004674:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004676:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <MX_TIM4_Init+0xac>)
 8004678:	2200      	movs	r2, #0
 800467a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 800467c:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <MX_TIM4_Init+0xac>)
 800467e:	220a      	movs	r2, #10
 8004680:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004682:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <MX_TIM4_Init+0xac>)
 8004684:	2200      	movs	r2, #0
 8004686:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <MX_TIM4_Init+0xac>)
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800468e:	4818      	ldr	r0, [pc, #96]	; (80046f0 <MX_TIM4_Init+0xac>)
 8004690:	f007 fe23 	bl	800c2da <HAL_TIM_PWM_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800469a:	f000 fa69 	bl	8004b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80046a6:	f107 031c 	add.w	r3, r7, #28
 80046aa:	4619      	mov	r1, r3
 80046ac:	4810      	ldr	r0, [pc, #64]	; (80046f0 <MX_TIM4_Init+0xac>)
 80046ae:	f009 f977 	bl	800d9a0 <HAL_TIMEx_MasterConfigSynchronization>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80046b8:	f000 fa5a 	bl	8004b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046bc:	2360      	movs	r3, #96	; 0x60
 80046be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80046cc:	463b      	mov	r3, r7
 80046ce:	2204      	movs	r2, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4807      	ldr	r0, [pc, #28]	; (80046f0 <MX_TIM4_Init+0xac>)
 80046d4:	f008 fb7c 	bl	800cdd0 <HAL_TIM_PWM_ConfigChannel>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80046de:	f000 fa47 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80046e2:	4803      	ldr	r0, [pc, #12]	; (80046f0 <MX_TIM4_Init+0xac>)
 80046e4:	f001 fa12 	bl	8005b0c <HAL_TIM_MspPostInit>

}
 80046e8:	bf00      	nop
 80046ea:	3728      	adds	r7, #40	; 0x28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20001efc 	.word	0x20001efc
 80046f4:	40000800 	.word	0x40000800

080046f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046fe:	1d3b      	adds	r3, r7, #4
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <MX_TIM6_Init+0x64>)
 800470a:	4a15      	ldr	r2, [pc, #84]	; (8004760 <MX_TIM6_Init+0x68>)
 800470c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <MX_TIM6_Init+0x64>)
 8004710:	f244 2267 	movw	r2, #16999	; 0x4267
 8004714:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004716:	4b11      	ldr	r3, [pc, #68]	; (800475c <MX_TIM6_Init+0x64>)
 8004718:	2200      	movs	r2, #0
 800471a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250;
 800471c:	4b0f      	ldr	r3, [pc, #60]	; (800475c <MX_TIM6_Init+0x64>)
 800471e:	22fa      	movs	r2, #250	; 0xfa
 8004720:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004722:	4b0e      	ldr	r3, [pc, #56]	; (800475c <MX_TIM6_Init+0x64>)
 8004724:	2280      	movs	r2, #128	; 0x80
 8004726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004728:	480c      	ldr	r0, [pc, #48]	; (800475c <MX_TIM6_Init+0x64>)
 800472a:	f007 fce5 	bl	800c0f8 <HAL_TIM_Base_Init>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004734:	f000 fa1c 	bl	8004b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004738:	2300      	movs	r3, #0
 800473a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004740:	1d3b      	adds	r3, r7, #4
 8004742:	4619      	mov	r1, r3
 8004744:	4805      	ldr	r0, [pc, #20]	; (800475c <MX_TIM6_Init+0x64>)
 8004746:	f009 f92b 	bl	800d9a0 <HAL_TIMEx_MasterConfigSynchronization>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004750:	f000 fa0e 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20001f48 	.word	0x20001f48
 8004760:	40001000 	.word	0x40001000

08004764 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004774:	4b19      	ldr	r3, [pc, #100]	; (80047dc <MX_TIM7_Init+0x78>)
 8004776:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <MX_TIM7_Init+0x7c>)
 8004778:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8500-1;
 800477a:	4b18      	ldr	r3, [pc, #96]	; (80047dc <MX_TIM7_Init+0x78>)
 800477c:	f242 1233 	movw	r2, #8499	; 0x2133
 8004780:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <MX_TIM7_Init+0x78>)
 8004784:	2200      	movs	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8004788:	4b14      	ldr	r3, [pc, #80]	; (80047dc <MX_TIM7_Init+0x78>)
 800478a:	2209      	movs	r2, #9
 800478c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800478e:	4b13      	ldr	r3, [pc, #76]	; (80047dc <MX_TIM7_Init+0x78>)
 8004790:	2280      	movs	r2, #128	; 0x80
 8004792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004794:	4811      	ldr	r0, [pc, #68]	; (80047dc <MX_TIM7_Init+0x78>)
 8004796:	f007 fcaf 	bl	800c0f8 <HAL_TIM_Base_Init>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80047a0:	f000 f9e6 	bl	8004b70 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 80047a4:	2108      	movs	r1, #8
 80047a6:	480d      	ldr	r0, [pc, #52]	; (80047dc <MX_TIM7_Init+0x78>)
 80047a8:	f008 f81e 	bl	800c7e8 <HAL_TIM_OnePulse_Init>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 80047b2:	f000 f9dd 	bl	8004b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80047b6:	2320      	movs	r3, #32
 80047b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4806      	ldr	r0, [pc, #24]	; (80047dc <MX_TIM7_Init+0x78>)
 80047c4:	f009 f8ec 	bl	800d9a0 <HAL_TIMEx_MasterConfigSynchronization>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 80047ce:	f000 f9cf 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20001f94 	.word	0x20001f94
 80047e0:	40001400 	.word	0x40001400

080047e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <MX_TIM8_Init+0x78>)
 80047f6:	4a1a      	ldr	r2, [pc, #104]	; (8004860 <MX_TIM8_Init+0x7c>)
 80047f8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80047fa:	4b18      	ldr	r3, [pc, #96]	; (800485c <MX_TIM8_Init+0x78>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004800:	4b16      	ldr	r3, [pc, #88]	; (800485c <MX_TIM8_Init+0x78>)
 8004802:	2200      	movs	r2, #0
 8004804:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004806:	4b15      	ldr	r3, [pc, #84]	; (800485c <MX_TIM8_Init+0x78>)
 8004808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800480c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800480e:	4b13      	ldr	r3, [pc, #76]	; (800485c <MX_TIM8_Init+0x78>)
 8004810:	2200      	movs	r2, #0
 8004812:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004814:	4b11      	ldr	r3, [pc, #68]	; (800485c <MX_TIM8_Init+0x78>)
 8004816:	2200      	movs	r2, #0
 8004818:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <MX_TIM8_Init+0x78>)
 800481c:	2200      	movs	r2, #0
 800481e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8004820:	2108      	movs	r1, #8
 8004822:	480e      	ldr	r0, [pc, #56]	; (800485c <MX_TIM8_Init+0x78>)
 8004824:	f007 ffe0 	bl	800c7e8 <HAL_TIM_OnePulse_Init>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 800482e:	f000 f99f 	bl	8004b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004832:	2300      	movs	r3, #0
 8004834:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800483e:	1d3b      	adds	r3, r7, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4806      	ldr	r0, [pc, #24]	; (800485c <MX_TIM8_Init+0x78>)
 8004844:	f009 f8ac 	bl	800d9a0 <HAL_TIMEx_MasterConfigSynchronization>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800484e:	f000 f98f 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004852:	bf00      	nop
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20001fe0 	.word	0x20001fe0
 8004860:	40013400 	.word	0x40013400

08004864 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004868:	4b10      	ldr	r3, [pc, #64]	; (80048ac <MX_TIM16_Init+0x48>)
 800486a:	4a11      	ldr	r2, [pc, #68]	; (80048b0 <MX_TIM16_Init+0x4c>)
 800486c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <MX_TIM16_Init+0x48>)
 8004870:	f244 2267 	movw	r2, #16999	; 0x4267
 8004874:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004876:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <MX_TIM16_Init+0x48>)
 8004878:	2200      	movs	r2, #0
 800487a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <MX_TIM16_Init+0x48>)
 800487e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004882:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004884:	4b09      	ldr	r3, [pc, #36]	; (80048ac <MX_TIM16_Init+0x48>)
 8004886:	2200      	movs	r2, #0
 8004888:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800488a:	4b08      	ldr	r3, [pc, #32]	; (80048ac <MX_TIM16_Init+0x48>)
 800488c:	2200      	movs	r2, #0
 800488e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <MX_TIM16_Init+0x48>)
 8004892:	2280      	movs	r2, #128	; 0x80
 8004894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004896:	4805      	ldr	r0, [pc, #20]	; (80048ac <MX_TIM16_Init+0x48>)
 8004898:	f007 fc2e 	bl	800c0f8 <HAL_TIM_Base_Init>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80048a2:	f000 f965 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	2000202c 	.word	0x2000202c
 80048b0:	40014400 	.word	0x40014400

080048b4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80048b8:	4b14      	ldr	r3, [pc, #80]	; (800490c <MX_TIM17_Init+0x58>)
 80048ba:	4a15      	ldr	r2, [pc, #84]	; (8004910 <MX_TIM17_Init+0x5c>)
 80048bc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 80048be:	4b13      	ldr	r3, [pc, #76]	; (800490c <MX_TIM17_Init+0x58>)
 80048c0:	f244 2267 	movw	r2, #16999	; 0x4267
 80048c4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048c6:	4b11      	ldr	r3, [pc, #68]	; (800490c <MX_TIM17_Init+0x58>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <MX_TIM17_Init+0x58>)
 80048ce:	2231      	movs	r2, #49	; 0x31
 80048d0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048d2:	4b0e      	ldr	r3, [pc, #56]	; (800490c <MX_TIM17_Init+0x58>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <MX_TIM17_Init+0x58>)
 80048da:	2200      	movs	r2, #0
 80048dc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <MX_TIM17_Init+0x58>)
 80048e0:	2280      	movs	r2, #128	; 0x80
 80048e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80048e4:	4809      	ldr	r0, [pc, #36]	; (800490c <MX_TIM17_Init+0x58>)
 80048e6:	f007 fc07 	bl	800c0f8 <HAL_TIM_Base_Init>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80048f0:	f000 f93e 	bl	8004b70 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 80048f4:	2108      	movs	r1, #8
 80048f6:	4805      	ldr	r0, [pc, #20]	; (800490c <MX_TIM17_Init+0x58>)
 80048f8:	f007 ff76 	bl	800c7e8 <HAL_TIM_OnePulse_Init>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 8004902:	f000 f935 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20002078 	.word	0x20002078
 8004910:	40014800 	.word	0x40014800

08004914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004918:	4b22      	ldr	r3, [pc, #136]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 800491a:	4a23      	ldr	r2, [pc, #140]	; (80049a8 <MX_USART1_UART_Init+0x94>)
 800491c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 8004920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004926:	4b1f      	ldr	r3, [pc, #124]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 8004928:	2200      	movs	r2, #0
 800492a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800492c:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 800492e:	2200      	movs	r2, #0
 8004930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 8004934:	2200      	movs	r2, #0
 8004936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004938:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 800493a:	220c      	movs	r2, #12
 800493c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800493e:	4b19      	ldr	r3, [pc, #100]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 8004940:	2200      	movs	r2, #0
 8004942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004944:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 8004946:	2200      	movs	r2, #0
 8004948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800494a:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 800494c:	2200      	movs	r2, #0
 800494e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004950:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 8004952:	2200      	movs	r2, #0
 8004954:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 8004958:	2200      	movs	r2, #0
 800495a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800495c:	4811      	ldr	r0, [pc, #68]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 800495e:	f009 f998 	bl	800dc92 <HAL_UART_Init>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004968:	f000 f902 	bl	8004b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800496c:	2100      	movs	r1, #0
 800496e:	480d      	ldr	r0, [pc, #52]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 8004970:	f00a fcdd 	bl	800f32e <HAL_UARTEx_SetTxFifoThreshold>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800497a:	f000 f8f9 	bl	8004b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800497e:	2100      	movs	r1, #0
 8004980:	4808      	ldr	r0, [pc, #32]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 8004982:	f00a fd12 	bl	800f3aa <HAL_UARTEx_SetRxFifoThreshold>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800498c:	f000 f8f0 	bl	8004b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004990:	4804      	ldr	r0, [pc, #16]	; (80049a4 <MX_USART1_UART_Init+0x90>)
 8004992:	f00a fc93 	bl	800f2bc <HAL_UARTEx_DisableFifoMode>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800499c:	f000 f8e8 	bl	8004b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049a0:	bf00      	nop
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	200020c4 	.word	0x200020c4
 80049a8:	40013800 	.word	0x40013800

080049ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80049b2:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <MX_DMA_Init+0x60>)
 80049b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b6:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <MX_DMA_Init+0x60>)
 80049b8:	f043 0304 	orr.w	r3, r3, #4
 80049bc:	6493      	str	r3, [r2, #72]	; 0x48
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <MX_DMA_Init+0x60>)
 80049c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	607b      	str	r3, [r7, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049ca:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <MX_DMA_Init+0x60>)
 80049cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ce:	4a0f      	ldr	r2, [pc, #60]	; (8004a0c <MX_DMA_Init+0x60>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6493      	str	r3, [r2, #72]	; 0x48
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <MX_DMA_Init+0x60>)
 80049d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80049e2:	2200      	movs	r2, #0
 80049e4:	2100      	movs	r1, #0
 80049e6:	200b      	movs	r0, #11
 80049e8:	f004 fbad 	bl	8009146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80049ec:	200b      	movs	r0, #11
 80049ee:	f004 fbc4 	bl	800917a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80049f2:	2200      	movs	r2, #0
 80049f4:	2100      	movs	r1, #0
 80049f6:	200d      	movs	r0, #13
 80049f8:	f004 fba5 	bl	8009146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80049fc:	200d      	movs	r0, #13
 80049fe:	f004 fbbc 	bl	800917a <HAL_NVIC_EnableIRQ>

}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40021000 	.word	0x40021000

08004a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a16:	f107 0314 	add.w	r3, r7, #20
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	609a      	str	r2, [r3, #8]
 8004a22:	60da      	str	r2, [r3, #12]
 8004a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a26:	4b4f      	ldr	r3, [pc, #316]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2a:	4a4e      	ldr	r2, [pc, #312]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a2c:	f043 0304 	orr.w	r3, r3, #4
 8004a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a32:	4b4c      	ldr	r3, [pc, #304]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a3e:	4b49      	ldr	r3, [pc, #292]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a42:	4a48      	ldr	r2, [pc, #288]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a44:	f043 0320 	orr.w	r3, r3, #32
 8004a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a4a:	4b46      	ldr	r3, [pc, #280]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a56:	4b43      	ldr	r3, [pc, #268]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	4a42      	ldr	r2, [pc, #264]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a62:	4b40      	ldr	r3, [pc, #256]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6e:	4b3d      	ldr	r3, [pc, #244]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a72:	4a3c      	ldr	r2, [pc, #240]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a74:	f043 0302 	orr.w	r3, r3, #2
 8004a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a7a:	4b3a      	ldr	r3, [pc, #232]	; (8004b64 <MX_GPIO_Init+0x154>)
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	607b      	str	r3, [r7, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8004a86:	2200      	movs	r2, #0
 8004a88:	f645 4107 	movw	r1, #23559	; 0x5c07
 8004a8c:	4836      	ldr	r0, [pc, #216]	; (8004b68 <MX_GPIO_Init+0x158>)
 8004a8e:	f005 fceb 	bl	800a468 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8004a92:	2200      	movs	r2, #0
 8004a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a9c:	f005 fce4 	bl	800a468 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 8004aa0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aae:	f107 0314 	add.w	r3, r7, #20
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	482d      	ldr	r0, [pc, #180]	; (8004b6c <MX_GPIO_Init+0x15c>)
 8004ab6:	f005 fb3d 	bl	800a134 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 8004aba:	2370      	movs	r3, #112	; 0x70
 8004abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac6:	f107 0314 	add.w	r3, r7, #20
 8004aca:	4619      	mov	r1, r3
 8004acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ad0:	f005 fb30 	bl	800a134 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ad8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8004ae2:	f107 0314 	add.w	r3, r7, #20
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004aec:	f005 fb22 	bl	800a134 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8004af0:	f645 4307 	movw	r3, #23559	; 0x5c07
 8004af4:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004afe:	2300      	movs	r3, #0
 8004b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b02:	f107 0314 	add.w	r3, r7, #20
 8004b06:	4619      	mov	r1, r3
 8004b08:	4817      	ldr	r0, [pc, #92]	; (8004b68 <MX_GPIO_Init+0x158>)
 8004b0a:	f005 fb13 	bl	800a134 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8004b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b14:	2301      	movs	r3, #1
 8004b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8004b20:	f107 0314 	add.w	r3, r7, #20
 8004b24:	4619      	mov	r1, r3
 8004b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b2a:	f005 fb03 	bl	800a134 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 8004b2e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8004b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	4619      	mov	r1, r3
 8004b44:	4808      	ldr	r0, [pc, #32]	; (8004b68 <MX_GPIO_Init+0x158>)
 8004b46:	f005 faf5 	bl	800a134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	2017      	movs	r0, #23
 8004b50:	f004 faf9 	bl	8009146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b54:	2017      	movs	r0, #23
 8004b56:	f004 fb10 	bl	800917a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004b5a:	bf00      	nop
 8004b5c:	3728      	adds	r7, #40	; 0x28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	48000400 	.word	0x48000400
 8004b6c:	48000800 	.word	0x48000800

08004b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b74:	b672      	cpsid	i
}
 8004b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b78:	e7fe      	b.n	8004b78 <Error_Handler+0x8>

08004b7a <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e008      	b.n	8004bb4 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	2200      	movs	r2, #0
 8004bac:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	edd3 7a00 	vldr	s15, [r3]
 8004bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bcc:	d4e9      	bmi.n	8004ba2 <Moving_Average_Init+0x28>
	}
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	441a      	add	r2, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c02:	6839      	ldr	r1, [r7, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	1ad2      	subs	r2, r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c28:	ee07 3a90 	vmov	s15, r3
 8004c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	edd3 7a00 	vldr	s15, [r3]
 8004c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	d507      	bpl.n	8004c58 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8004c56:	e003      	b.n	8004c60 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	edd3 7a00 	vldr	s15, [r3]
 8004c74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c78:	ee16 0a90 	vmov	r0, s13
 8004c7c:	f7fb fc8c 	bl	8000598 <__aeabi_f2d>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	ec43 2b17 	vmov	d7, r2, r3
}
 8004c88:	eeb0 0a47 	vmov.f32	s0, s14
 8004c8c:	eef0 0a67 	vmov.f32	s1, s15
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <PID_Init>:
#include "pid.h"

/* Initialize */
void PID_Init(PID_TypeDef *uPID)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
	/* Set parameters */
	uPID->OutputSum = *uPID->MyOutput;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004cc6:	f7fb ff4f 	bl	8000b68 <__aeabi_dcmpgt>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d006      	beq.n	8004cde <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	else if (uPID->OutputSum < uPID->OutMin)
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
}
 8004cdc:	e011      	b.n	8004d02 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004cea:	f7fb ff1f 	bl	8000b2c <__aeabi_dcmplt>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d100      	bne.n	8004cf6 <PID_Init+0x60>
}
 8004cf4:	e005      	b.n	8004d02 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	0000      	movs	r0, r0
 8004d0c:	0000      	movs	r0, r0
	...

08004d10 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6278      	str	r0, [r7, #36]	; 0x24
 8004d18:	6239      	str	r1, [r7, #32]
 8004d1a:	61fa      	str	r2, [r7, #28]
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004d22:	ed87 1b02 	vstr	d1, [r7, #8]
 8004d26:	ed87 2b00 	vstr	d2, [r7]
	/* Set parameters */
	uPID->MyOutput   = Output;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	6a3a      	ldr	r2, [r7, #32]
 8004d34:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8004d42:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8004d90 <PID+0x80>
 8004d46:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8004d98 <PID+0x88>
 8004d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d4c:	f000 f991 	bl	8005072 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF;
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	2264      	movs	r2, #100	; 0x64
 8004d54:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8004d56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d5e:	f000 faa5 	bl	80052ac <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd);
 8004d62:	ed97 2b00 	vldr	d2, [r7]
 8004d66:	ed97 1b02 	vldr	d1, [r7, #8]
 8004d6a:	ed97 0b04 	vldr	d0, [r7, #16]
 8004d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d70:	f000 fa04 	bl	800517c <PID_SetTunings2>

	uPID->LastTime = HAL_GetTick() - uPID->SampleTime;
 8004d74:	f001 fdb8 	bl	80068e8 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	1ad2      	subs	r2, r2, r3
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	605a      	str	r2, [r3, #4]
}
 8004d84:	bf00      	nop
 8004d86:	3728      	adds	r7, #40	; 0x28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	f3af 8000 	nop.w
 8004d90:	00000000 	.word	0x00000000
 8004d94:	40590000 	.word	0x40590000
	...

08004da0 <PID_Compute>:
{
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, ControllerDirection);
}

/* Compute  */
uint8_t PID_Compute(PID_TypeDef *uPID){
 8004da0:	b5b0      	push	{r4, r5, r7, lr}
 8004da2:	b08c      	sub	sp, #48	; 0x30
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* Check PID mode */
	if (!uPID->InAuto)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <PID_Compute+0x14>
	{
		return _FALSE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e13c      	b.n	800502e <PID_Compute+0x28e>
	}

	/* Calculate time */
	now        = HAL_GetTick();
 8004db4:	f001 fd98 	bl	80068e8 <HAL_GetTick>
 8004db8:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	6a3a      	ldr	r2, [r7, #32]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d204      	bcs.n	8004dd8 <PID_Compute+0x38>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 812a 	beq.w	800502c <PID_Compute+0x28c>
	{
		/* Compute all the working error variables */
		input   = *uPID->MyInput;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004df0:	f7fb fa72 	bl	80002d8 <__aeabi_dsub>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004e02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e06:	f7fb fa67 	bl	80002d8 <__aeabi_dsub>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	e9c7 2302 	strd	r2, r3, [r7, #8]


		/* Calculate Proportional on Error */
		output = uPID->Kp * error;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004e18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e1c:	f7fb fc14 	bl	8000648 <__aeabi_dmul>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		uPID->DispKp_part = output;
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e2e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		/* ..... Calculate Derivative term and sum */
		output -= uPID->Kd * dInput;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e3c:	f7fb fc04 	bl	8000648 <__aeabi_dmul>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e48:	f7fb fa46 	bl	80002d8 <__aeabi_dsub>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		uPID->DispKd_part = - uPID->Kd * dInput;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004e5a:	4614      	mov	r4, r2
 8004e5c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e64:	4620      	mov	r0, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	f7fb fbee 	bl	8000648 <__aeabi_dmul>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		/* Conditional integration as anti-windup (clamping) */
		if((((output + uPID->Ki * error) > uPID->OutMax || (output + uPID->Ki * error) < uPID->OutMin)) && (error*(output + uPID->OutputSum + uPID->Ki * error) > 0)){
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004e7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e80:	f7fb fbe2 	bl	8000648 <__aeabi_dmul>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e90:	f7fb fa24 	bl	80002dc <__adddf3>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004ea2:	f7fb fe61 	bl	8000b68 <__aeabi_dcmpgt>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d11a      	bne.n	8004ee2 <PID_Compute+0x142>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004eb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004eb6:	f7fb fbc7 	bl	8000648 <__aeabi_dmul>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ec6:	f7fb fa09 	bl	80002dc <__adddf3>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004ed8:	f7fb fe28 	bl	8000b2c <__aeabi_dcmplt>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d03b      	beq.n	8004f5a <PID_Compute+0x1ba>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eec:	f7fb f9f6 	bl	80002dc <__adddf3>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f02:	f7fb fba1 	bl	8000648 <__aeabi_dmul>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	f7fb f9e5 	bl	80002dc <__adddf3>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f1e:	f7fb fb93 	bl	8000648 <__aeabi_dmul>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	f7fb fe19 	bl	8000b68 <__aeabi_dcmpgt>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00e      	beq.n	8004f5a <PID_Compute+0x1ba>
			uPID->OutputSum     += 0;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	f7fb f9c7 	bl	80002dc <__adddf3>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004f58:	e014      	b.n	8004f84 <PID_Compute+0x1e4>
		}
		else{
			uPID->OutputSum     += (uPID->Ki * error);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004f66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f6a:	f7fb fb6d 	bl	8000648 <__aeabi_dmul>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4620      	mov	r0, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	f7fb f9b1 	bl	80002dc <__adddf3>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		/* If Setpoint is set to 0, zero integral part */
		if(*uPID->MySetpoint == 0){
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	f7fb fdc0 	bl	8000b18 <__aeabi_dcmpeq>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <PID_Compute+0x20c>
			uPID->OutputSum = 0;
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		uPID->DispKi_part = uPID->OutputSum;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		/* Final summation */
		output += uPID->OutputSum;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004fbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fc2:	f7fb f98b 	bl	80002dc <__adddf3>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		/* Clamp output */
		if (output > uPID->OutMax){
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004fd4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fd8:	f7fb fdc6 	bl	8000b68 <__aeabi_dcmpgt>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <PID_Compute+0x24e>
			output = uPID->OutMax;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004fe8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004fec:	e00e      	b.n	800500c <PID_Compute+0x26c>
		}
		else if (output < uPID->OutMin){
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004ff4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ff8:	f7fb fd98 	bl	8000b2c <__aeabi_dcmplt>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <PID_Compute+0x26c>
			output = uPID->OutMin;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005008:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		*uPID->MyOutput = output;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005014:	e9c1 2300 	strd	r2, r3, [r1]


		/* Remember some variables for next time */
		uPID->LastInput = input;
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800501e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005026:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <PID_Compute+0x28e>

	}
	else
	{
		return _FALSE;
 800502c:	2300      	movs	r3, #0
	}

}
 800502e:	4618      	mov	r0, r3
 8005030:	3730      	adds	r7, #48	; 0x30
 8005032:	46bd      	mov	sp, r7
 8005034:	bdb0      	pop	{r4, r5, r7, pc}

08005036 <PID_SetMode>:

/* PID Mode */
void PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode){
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	70fb      	strb	r3, [r7, #3]
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	2b01      	cmp	r3, #1
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	73fb      	strb	r3, [r7, #15]

	/* Initialize the PID */
	if (newAuto && !uPID->InAuto){
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <PID_SetMode+0x2e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <PID_SetMode+0x2e>
		PID_Init(uPID);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff fe19 	bl	8004c96 <PID_Init>
	}
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	7bfa      	ldrb	r2, [r7, #15]
 8005068:	701a      	strb	r2, [r3, #0]
}
 800506a:	bf00      	nop
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <PID_SetOutputLimits>:
PIDMode_TypeDef PID_GetMode(PID_TypeDef *uPID){
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* PID Limits */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max){
 8005072:	b580      	push	{r7, lr}
 8005074:	b086      	sub	sp, #24
 8005076:	af00      	add	r7, sp, #0
 8005078:	6178      	str	r0, [r7, #20]
 800507a:	ed87 0b02 	vstr	d0, [r7, #8]
 800507e:	ed87 1b00 	vstr	d1, [r7]
	/* Check value */
	if (Min >= Max){
 8005082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005086:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800508a:	f7fb fd63 	bl	8000b54 <__aeabi_dcmpge>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d158      	bne.n	8005146 <PID_SetOutputLimits+0xd4>
		return;
	}

	uPID->OutMin = Min;
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800509a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 800509e:	6979      	ldr	r1, [r7, #20]
 80050a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* Check PID Mode */
	if (uPID->InAuto){
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d04b      	beq.n	8005148 <PID_SetOutputLimits+0xd6>

		/* Check value */
		if (*uPID->MyOutput > uPID->OutMax){
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80050be:	f7fb fd53 	bl	8000b68 <__aeabi_dcmpgt>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <PID_SetOutputLimits+0x66>
			*uPID->MyOutput = uPID->OutMax;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80050d2:	e9c1 2300 	strd	r2, r3, [r1]
 80050d6:	e012      	b.n	80050fe <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin){
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80050e6:	f7fb fd21 	bl	8000b2c <__aeabi_dcmplt>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d006      	beq.n	80050fe <PID_SetOutputLimits+0x8c>
			*uPID->MyOutput = uPID->OutMin;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80050fa:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* Check out value */
		if (uPID->OutputSum > uPID->OutMax){
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800510a:	f7fb fd2d 	bl	8000b68 <__aeabi_dcmpgt>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d006      	beq.n	8005122 <PID_SetOutputLimits+0xb0>
			uPID->OutputSum = uPID->OutMax;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800511a:	6979      	ldr	r1, [r7, #20]
 800511c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8005120:	e012      	b.n	8005148 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin){
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800512e:	f7fb fcfd 	bl	8000b2c <__aeabi_dcmplt>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <PID_SetOutputLimits+0xd6>
			uPID->OutputSum = uPID->OutMin;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800513e:	6979      	ldr	r1, [r7, #20]
 8005140:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8005144:	e000      	b.n	8005148 <PID_SetOutputLimits+0xd6>
		return;
 8005146:	bf00      	nop
		}
		else { }
	}
}
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <PID_SetTunings>:

/* PID Tunings */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd){
 800514e:	b580      	push	{r7, lr}
 8005150:	b088      	sub	sp, #32
 8005152:	af00      	add	r7, sp, #0
 8005154:	61f8      	str	r0, [r7, #28]
 8005156:	ed87 0b04 	vstr	d0, [r7, #16]
 800515a:	ed87 1b02 	vstr	d1, [r7, #8]
 800515e:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd);
 8005162:	ed97 2b00 	vldr	d2, [r7]
 8005166:	ed97 1b02 	vldr	d1, [r7, #8]
 800516a:	ed97 0b04 	vldr	d0, [r7, #16]
 800516e:	69f8      	ldr	r0, [r7, #28]
 8005170:	f000 f804 	bl	800517c <PID_SetTunings2>
}
 8005174:	bf00      	nop
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <PID_SetTunings2>:

void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd){
 800517c:	b580      	push	{r7, lr}
 800517e:	b08a      	sub	sp, #40	; 0x28
 8005180:	af00      	add	r7, sp, #0
 8005182:	61f8      	str	r0, [r7, #28]
 8005184:	ed87 0b04 	vstr	d0, [r7, #16]
 8005188:	ed87 1b02 	vstr	d1, [r7, #8]
 800518c:	ed87 2b00 	vstr	d2, [r7]
	double SampleTimeInSec;

	/* Check value */
	if (Kp < 0 || Ki < 0 || Kd < 0){
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800519c:	f7fb fcc6 	bl	8000b2c <__aeabi_dcmplt>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d17c      	bne.n	80052a0 <PID_SetTunings2+0x124>
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051b2:	f7fb fcbb 	bl	8000b2c <__aeabi_dcmplt>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d171      	bne.n	80052a0 <PID_SetTunings2+0x124>
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051c8:	f7fb fcb0 	bl	8000b2c <__aeabi_dcmplt>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d166      	bne.n	80052a0 <PID_SetTunings2+0x124>
		return;
	}

	uPID->DispKp = Kp;
 80051d2:	69f9      	ldr	r1, [r7, #28]
 80051d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80051dc:	69f9      	ldr	r1, [r7, #28]
 80051de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80051e6:	69f9      	ldr	r1, [r7, #28]
 80051e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ec:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* Calculate time */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb f9ad 	bl	8000554 <__aeabi_ui2d>
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	4b2a      	ldr	r3, [pc, #168]	; (80052a8 <PID_SetTunings2+0x12c>)
 8005200:	f7fb fb4c 	bl	800089c <__aeabi_ddiv>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800520c:	69f9      	ldr	r1, [r7, #28]
 800520e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005212:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8005216:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800521a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800521e:	f7fb fa13 	bl	8000648 <__aeabi_dmul>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	69f9      	ldr	r1, [r7, #28]
 8005228:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800522c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005234:	f7fb fb32 	bl	800089c <__aeabi_ddiv>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	69f9      	ldr	r1, [r7, #28]
 800523e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* Check direction */
	if (uPID->ControllerDirection == _PID_CD_REVERSE){
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d12b      	bne.n	80052a2 <PID_SetTunings2+0x126>

		uPID->Kp = (0 - uPID->Kp);
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005250:	f04f 0000 	mov.w	r0, #0
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	f7fb f83e 	bl	80002d8 <__aeabi_dsub>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	69f9      	ldr	r1, [r7, #28]
 8005262:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800526c:	f04f 0000 	mov.w	r0, #0
 8005270:	f04f 0100 	mov.w	r1, #0
 8005274:	f7fb f830 	bl	80002d8 <__aeabi_dsub>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	69f9      	ldr	r1, [r7, #28]
 800527e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005288:	f04f 0000 	mov.w	r0, #0
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	f7fb f822 	bl	80002d8 <__aeabi_dsub>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	69f9      	ldr	r1, [r7, #28]
 800529a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800529e:	e000      	b.n	80052a2 <PID_SetTunings2+0x126>
		return;
 80052a0:	bf00      	nop
	}
}
 80052a2:	3728      	adds	r7, #40	; 0x28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	408f4000 	.word	0x408f4000

080052ac <PID_SetControllerDirection>:

/* PID Direction */
void PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction){
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
	/* Check parameters */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection)){
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02e      	beq.n	800531e <PID_SetControllerDirection+0x72>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	78fa      	ldrb	r2, [r7, #3]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d029      	beq.n	800531e <PID_SetControllerDirection+0x72>
		uPID->Kp = (0 - uPID->Kp);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80052d0:	f04f 0000 	mov.w	r0, #0
 80052d4:	f04f 0100 	mov.w	r1, #0
 80052d8:	f7fa fffe 	bl	80002d8 <__aeabi_dsub>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80052ec:	f04f 0000 	mov.w	r0, #0
 80052f0:	f04f 0100 	mov.w	r1, #0
 80052f4:	f7fa fff0 	bl	80002d8 <__aeabi_dsub>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005308:	f04f 0000 	mov.w	r0, #0
 800530c:	f04f 0100 	mov.w	r1, #0
 8005310:	f7fa ffe2 	bl	80002d8 <__aeabi_dsub>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	}

	uPID->ControllerDirection = Direction;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	705a      	strb	r2, [r3, #1]
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <PID_SetSampleTime>:
PIDCD_TypeDef PID_GetDirection(PID_TypeDef *uPID){
	return uPID->ControllerDirection;
}

/* PID Sampling */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall){
 800532c:	b5b0      	push	{r4, r5, r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	dd01      	ble.n	8005342 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 800533e:	2301      	movs	r3, #1
 8005340:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	60da      	str	r2, [r3, #12]
	double ratio;

	/* Check value */
	if (NewSampleTime > 0){
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	dd2e      	ble.n	80053ac <PID_SetSampleTime+0x80>

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 800534e:	68b8      	ldr	r0, [r7, #8]
 8005350:	f7fb f910 	bl	8000574 <__aeabi_i2d>
 8005354:	4604      	mov	r4, r0
 8005356:	460d      	mov	r5, r1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4618      	mov	r0, r3
 800535e:	f7fb f8f9 	bl	8000554 <__aeabi_ui2d>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4620      	mov	r0, r4
 8005368:	4629      	mov	r1, r5
 800536a:	f7fb fa97 	bl	800089c <__aeabi_ddiv>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800537c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005380:	f7fb f962 	bl	8000648 <__aeabi_dmul>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	68f9      	ldr	r1, [r7, #12]
 800538a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005394:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005398:	f7fb fa80 	bl	800089c <__aeabi_ddiv>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	68f9      	ldr	r1, [r7, #12]
 80053a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	609a      	str	r2, [r3, #8]
	}
}
 80053ac:	bf00      	nop
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bdb0      	pop	{r4, r5, r7, pc}

080053b4 <PID_GetPpart>:
double PID_GetKd(PID_TypeDef *uPID){
	return uPID->DispKd;
}

/* Get current contributions*/
double PID_GetPpart(PID_TypeDef *uPID){
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80053c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80053c6:	eeb0 0a47 	vmov.f32	s0, s14
 80053ca:	eef0 0a67 	vmov.f32	s1, s15
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID){
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80053e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80053ea:	eeb0 0a47 	vmov.f32	s0, s14
 80053ee:	eef0 0a67 	vmov.f32	s1, s15
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID){
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800540a:	ec43 2b17 	vmov	d7, r2, r3
}
 800540e:	eeb0 0a47 	vmov.f32	s0, s14
 8005412:	eef0 0a67 	vmov.f32	s1, s15
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005426:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <HAL_MspInit+0x44>)
 8005428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542a:	4a0e      	ldr	r2, [pc, #56]	; (8005464 <HAL_MspInit+0x44>)
 800542c:	f043 0301 	orr.w	r3, r3, #1
 8005430:	6613      	str	r3, [r2, #96]	; 0x60
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <HAL_MspInit+0x44>)
 8005434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <HAL_MspInit+0x44>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005442:	4a08      	ldr	r2, [pc, #32]	; (8005464 <HAL_MspInit+0x44>)
 8005444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005448:	6593      	str	r3, [r2, #88]	; 0x58
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <HAL_MspInit+0x44>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005456:	f005 fa0d 	bl	800a874 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000

08005468 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b09e      	sub	sp, #120	; 0x78
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005470:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	605a      	str	r2, [r3, #4]
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	60da      	str	r2, [r3, #12]
 800547e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005480:	f107 0320 	add.w	r3, r7, #32
 8005484:	2244      	movs	r2, #68	; 0x44
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f00c fea8 	bl	80121de <memset>
  if(hadc->Instance==ADC1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005496:	d171      	bne.n	800557c <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800549e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80054a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054a4:	f107 0320 	add.w	r3, r7, #32
 80054a8:	4618      	mov	r0, r3
 80054aa:	f005 ff21 	bl	800b2f0 <HAL_RCCEx_PeriphCLKConfig>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80054b4:	f7ff fb5c 	bl	8004b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80054b8:	4b64      	ldr	r3, [pc, #400]	; (800564c <HAL_ADC_MspInit+0x1e4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	4a63      	ldr	r2, [pc, #396]	; (800564c <HAL_ADC_MspInit+0x1e4>)
 80054c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80054c2:	4b62      	ldr	r3, [pc, #392]	; (800564c <HAL_ADC_MspInit+0x1e4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d10b      	bne.n	80054e2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80054ca:	4b61      	ldr	r3, [pc, #388]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80054cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ce:	4a60      	ldr	r2, [pc, #384]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80054d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054d6:	4b5e      	ldr	r3, [pc, #376]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80054d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054e2:	4b5b      	ldr	r3, [pc, #364]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80054e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e6:	4a5a      	ldr	r2, [pc, #360]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054ee:	4b58      	ldr	r3, [pc, #352]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80054f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = VBUS_Pin|THERMOCOUPLE_Pin;
 80054fa:	230c      	movs	r3, #12
 80054fc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054fe:	2303      	movs	r3, #3
 8005500:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005502:	2300      	movs	r3, #0
 8005504:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005506:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800550a:	4619      	mov	r1, r3
 800550c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005510:	f004 fe10 	bl	800a134 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8005514:	4b4f      	ldr	r3, [pc, #316]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 8005516:	4a50      	ldr	r2, [pc, #320]	; (8005658 <HAL_ADC_MspInit+0x1f0>)
 8005518:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800551a:	4b4e      	ldr	r3, [pc, #312]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 800551c:	2205      	movs	r2, #5
 800551e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005520:	4b4c      	ldr	r3, [pc, #304]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 8005522:	2200      	movs	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005526:	4b4b      	ldr	r3, [pc, #300]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 8005528:	2200      	movs	r2, #0
 800552a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800552c:	4b49      	ldr	r3, [pc, #292]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 800552e:	2280      	movs	r2, #128	; 0x80
 8005530:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005532:	4b48      	ldr	r3, [pc, #288]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 8005534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005538:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800553a:	4b46      	ldr	r3, [pc, #280]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 800553c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005540:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005542:	4b44      	ldr	r3, [pc, #272]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 8005544:	2220      	movs	r2, #32
 8005546:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005548:	4b42      	ldr	r3, [pc, #264]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 800554a:	2200      	movs	r2, #0
 800554c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800554e:	4841      	ldr	r0, [pc, #260]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 8005550:	f004 f834 	bl	80095bc <HAL_DMA_Init>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800555a:	f7ff fb09 	bl	8004b70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a3c      	ldr	r2, [pc, #240]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 8005562:	655a      	str	r2, [r3, #84]	; 0x54
 8005564:	4a3b      	ldr	r2, [pc, #236]	; (8005654 <HAL_ADC_MspInit+0x1ec>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 800556a:	2200      	movs	r2, #0
 800556c:	210a      	movs	r1, #10
 800556e:	2012      	movs	r0, #18
 8005570:	f003 fde9 	bl	8009146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005574:	2012      	movs	r0, #18
 8005576:	f003 fe00 	bl	800917a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800557a:	e062      	b.n	8005642 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a36      	ldr	r2, [pc, #216]	; (800565c <HAL_ADC_MspInit+0x1f4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d15d      	bne.n	8005642 <HAL_ADC_MspInit+0x1da>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800558a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800558c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005590:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005592:	f107 0320 	add.w	r3, r7, #32
 8005596:	4618      	mov	r0, r3
 8005598:	f005 feaa 	bl	800b2f0 <HAL_RCCEx_PeriphCLKConfig>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 80055a2:	f7ff fae5 	bl	8004b70 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80055a6:	4b29      	ldr	r3, [pc, #164]	; (800564c <HAL_ADC_MspInit+0x1e4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3301      	adds	r3, #1
 80055ac:	4a27      	ldr	r2, [pc, #156]	; (800564c <HAL_ADC_MspInit+0x1e4>)
 80055ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80055b0:	4b26      	ldr	r3, [pc, #152]	; (800564c <HAL_ADC_MspInit+0x1e4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d10b      	bne.n	80055d0 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80055b8:	4b25      	ldr	r3, [pc, #148]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80055ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055bc:	4a24      	ldr	r2, [pc, #144]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80055be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055c4:	4b22      	ldr	r3, [pc, #136]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80055c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80055d0:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80055d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d4:	4a1e      	ldr	r2, [pc, #120]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80055d6:	f043 0320 	orr.w	r3, r3, #32
 80055da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055dc:	4b1c      	ldr	r3, [pc, #112]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80055de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80055ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ec:	4a18      	ldr	r2, [pc, #96]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055f4:	4b16      	ldr	r3, [pc, #88]	; (8005650 <HAL_ADC_MspInit+0x1e8>)
 80055f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_Pin;
 8005600:	2302      	movs	r3, #2
 8005602:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005604:	2303      	movs	r3, #3
 8005606:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005608:	2300      	movs	r3, #0
 800560a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 800560c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005610:	4619      	mov	r1, r3
 8005612:	4813      	ldr	r0, [pc, #76]	; (8005660 <HAL_ADC_MspInit+0x1f8>)
 8005614:	f004 fd8e 	bl	800a134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_LEAK_Pin;
 8005618:	2302      	movs	r3, #2
 800561a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800561c:	2303      	movs	r3, #3
 800561e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005620:	2300      	movs	r3, #0
 8005622:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(I_LEAK_GPIO_Port, &GPIO_InitStruct);
 8005624:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005628:	4619      	mov	r1, r3
 800562a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800562e:	f004 fd81 	bl	800a134 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8005632:	2200      	movs	r2, #0
 8005634:	210a      	movs	r1, #10
 8005636:	2012      	movs	r0, #18
 8005638:	f003 fd85 	bl	8009146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800563c:	2012      	movs	r0, #18
 800563e:	f003 fd9c 	bl	800917a <HAL_NVIC_EnableIRQ>
}
 8005642:	bf00      	nop
 8005644:	3778      	adds	r7, #120	; 0x78
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	200021e0 	.word	0x200021e0
 8005650:	40021000 	.word	0x40021000
 8005654:	20001cc8 	.word	0x20001cc8
 8005658:	40020030 	.word	0x40020030
 800565c:	50000100 	.word	0x50000100
 8005660:	48001400 	.word	0x48001400

08005664 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a0a      	ldr	r2, [pc, #40]	; (800569c <HAL_CRC_MspInit+0x38>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d10b      	bne.n	800568e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005676:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <HAL_CRC_MspInit+0x3c>)
 8005678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567a:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <HAL_CRC_MspInit+0x3c>)
 800567c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005680:	6493      	str	r3, [r2, #72]	; 0x48
 8005682:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <HAL_CRC_MspInit+0x3c>)
 8005684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40023000 	.word	0x40023000
 80056a0:	40021000 	.word	0x40021000

080056a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b09c      	sub	sp, #112	; 0x70
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	605a      	str	r2, [r3, #4]
 80056b6:	609a      	str	r2, [r3, #8]
 80056b8:	60da      	str	r2, [r3, #12]
 80056ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056bc:	f107 0318 	add.w	r3, r7, #24
 80056c0:	2244      	movs	r2, #68	; 0x44
 80056c2:	2100      	movs	r1, #0
 80056c4:	4618      	mov	r0, r3
 80056c6:	f00c fd8a 	bl	80121de <memset>
  if(hi2c->Instance==I2C1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2e      	ldr	r2, [pc, #184]	; (8005788 <HAL_I2C_MspInit+0xe4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d154      	bne.n	800577e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80056d4:	2340      	movs	r3, #64	; 0x40
 80056d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80056d8:	2300      	movs	r3, #0
 80056da:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056dc:	f107 0318 	add.w	r3, r7, #24
 80056e0:	4618      	mov	r0, r3
 80056e2:	f005 fe05 	bl	800b2f0 <HAL_RCCEx_PeriphCLKConfig>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80056ec:	f7ff fa40 	bl	8004b70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056f0:	4b26      	ldr	r3, [pc, #152]	; (800578c <HAL_I2C_MspInit+0xe8>)
 80056f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f4:	4a25      	ldr	r2, [pc, #148]	; (800578c <HAL_I2C_MspInit+0xe8>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056fc:	4b23      	ldr	r3, [pc, #140]	; (800578c <HAL_I2C_MspInit+0xe8>)
 80056fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005708:	4b20      	ldr	r3, [pc, #128]	; (800578c <HAL_I2C_MspInit+0xe8>)
 800570a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570c:	4a1f      	ldr	r2, [pc, #124]	; (800578c <HAL_I2C_MspInit+0xe8>)
 800570e:	f043 0302 	orr.w	r3, r3, #2
 8005712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005714:	4b1d      	ldr	r3, [pc, #116]	; (800578c <HAL_I2C_MspInit+0xe8>)
 8005716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005724:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005726:	2312      	movs	r3, #18
 8005728:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572a:	2300      	movs	r3, #0
 800572c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800572e:	2300      	movs	r3, #0
 8005730:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005732:	2304      	movs	r3, #4
 8005734:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005736:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800573a:	4619      	mov	r1, r3
 800573c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005740:	f004 fcf8 	bl	800a134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005748:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800574a:	2312      	movs	r3, #18
 800574c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574e:	2300      	movs	r3, #0
 8005750:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005752:	2300      	movs	r3, #0
 8005754:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005756:	2304      	movs	r3, #4
 8005758:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800575a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800575e:	4619      	mov	r1, r3
 8005760:	480b      	ldr	r0, [pc, #44]	; (8005790 <HAL_I2C_MspInit+0xec>)
 8005762:	f004 fce7 	bl	800a134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <HAL_I2C_MspInit+0xe8>)
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	4a08      	ldr	r2, [pc, #32]	; (800578c <HAL_I2C_MspInit+0xe8>)
 800576c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005770:	6593      	str	r3, [r2, #88]	; 0x58
 8005772:	4b06      	ldr	r3, [pc, #24]	; (800578c <HAL_I2C_MspInit+0xe8>)
 8005774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800577e:	bf00      	nop
 8005780:	3770      	adds	r7, #112	; 0x70
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40005400 	.word	0x40005400
 800578c:	40021000 	.word	0x40021000
 8005790:	48000400 	.word	0x48000400

08005794 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08a      	sub	sp, #40	; 0x28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800579c:	f107 0314 	add.w	r3, r7, #20
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	609a      	str	r2, [r3, #8]
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a2c      	ldr	r2, [pc, #176]	; (8005864 <HAL_SPI_MspInit+0xd0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d151      	bne.n	800585a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80057b6:	4b2c      	ldr	r3, [pc, #176]	; (8005868 <HAL_SPI_MspInit+0xd4>)
 80057b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ba:	4a2b      	ldr	r2, [pc, #172]	; (8005868 <HAL_SPI_MspInit+0xd4>)
 80057bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057c0:	6593      	str	r3, [r2, #88]	; 0x58
 80057c2:	4b29      	ldr	r3, [pc, #164]	; (8005868 <HAL_SPI_MspInit+0xd4>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ce:	4b26      	ldr	r3, [pc, #152]	; (8005868 <HAL_SPI_MspInit+0xd4>)
 80057d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d2:	4a25      	ldr	r2, [pc, #148]	; (8005868 <HAL_SPI_MspInit+0xd4>)
 80057d4:	f043 0302 	orr.w	r3, r3, #2
 80057d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057da:	4b23      	ldr	r3, [pc, #140]	; (8005868 <HAL_SPI_MspInit+0xd4>)
 80057dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80057e6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80057ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ec:	2302      	movs	r3, #2
 80057ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057f4:	2300      	movs	r3, #0
 80057f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80057f8:	2305      	movs	r3, #5
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057fc:	f107 0314 	add.w	r3, r7, #20
 8005800:	4619      	mov	r1, r3
 8005802:	481a      	ldr	r0, [pc, #104]	; (800586c <HAL_SPI_MspInit+0xd8>)
 8005804:	f004 fc96 	bl	800a134 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8005808:	4b19      	ldr	r3, [pc, #100]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 800580a:	4a1a      	ldr	r2, [pc, #104]	; (8005874 <HAL_SPI_MspInit+0xe0>)
 800580c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800580e:	4b18      	ldr	r3, [pc, #96]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 8005810:	220d      	movs	r2, #13
 8005812:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005814:	4b16      	ldr	r3, [pc, #88]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 8005816:	2210      	movs	r2, #16
 8005818:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800581a:	4b15      	ldr	r3, [pc, #84]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 800581c:	2200      	movs	r2, #0
 800581e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005820:	4b13      	ldr	r3, [pc, #76]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 8005822:	2280      	movs	r2, #128	; 0x80
 8005824:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005826:	4b12      	ldr	r3, [pc, #72]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 8005828:	2200      	movs	r2, #0
 800582a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800582c:	4b10      	ldr	r3, [pc, #64]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 800582e:	2200      	movs	r2, #0
 8005830:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005832:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 8005834:	2200      	movs	r2, #0
 8005836:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 800583a:	2200      	movs	r2, #0
 800583c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800583e:	480c      	ldr	r0, [pc, #48]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 8005840:	f003 febc 	bl	80095bc <HAL_DMA_Init>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800584a:	f7ff f991 	bl	8004b70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a07      	ldr	r2, [pc, #28]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 8005852:	655a      	str	r2, [r3, #84]	; 0x54
 8005854:	4a06      	ldr	r2, [pc, #24]	; (8005870 <HAL_SPI_MspInit+0xdc>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800585a:	bf00      	nop
 800585c:	3728      	adds	r7, #40	; 0x28
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40003800 	.word	0x40003800
 8005868:	40021000 	.word	0x40021000
 800586c:	48000400 	.word	0x48000400
 8005870:	20001e04 	.word	0x20001e04
 8005874:	40020008 	.word	0x40020008

08005878 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a22      	ldr	r2, [pc, #136]	; (8005910 <HAL_TIM_PWM_MspInit+0x98>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d12c      	bne.n	80058e4 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800588a:	4b22      	ldr	r3, [pc, #136]	; (8005914 <HAL_TIM_PWM_MspInit+0x9c>)
 800588c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588e:	4a21      	ldr	r2, [pc, #132]	; (8005914 <HAL_TIM_PWM_MspInit+0x9c>)
 8005890:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005894:	6613      	str	r3, [r2, #96]	; 0x60
 8005896:	4b1f      	ldr	r3, [pc, #124]	; (8005914 <HAL_TIM_PWM_MspInit+0x9c>)
 8005898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80058a2:	2200      	movs	r2, #0
 80058a4:	2100      	movs	r1, #0
 80058a6:	2018      	movs	r0, #24
 80058a8:	f003 fc4d 	bl	8009146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80058ac:	2018      	movs	r0, #24
 80058ae:	f003 fc64 	bl	800917a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80058b2:	2200      	movs	r2, #0
 80058b4:	2100      	movs	r1, #0
 80058b6:	2019      	movs	r0, #25
 80058b8:	f003 fc45 	bl	8009146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80058bc:	2019      	movs	r0, #25
 80058be:	f003 fc5c 	bl	800917a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2100      	movs	r1, #0
 80058c6:	201a      	movs	r0, #26
 80058c8:	f003 fc3d 	bl	8009146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80058cc:	201a      	movs	r0, #26
 80058ce:	f003 fc54 	bl	800917a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80058d2:	2200      	movs	r2, #0
 80058d4:	2100      	movs	r1, #0
 80058d6:	201b      	movs	r0, #27
 80058d8:	f003 fc35 	bl	8009146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80058dc:	201b      	movs	r0, #27
 80058de:	f003 fc4c 	bl	800917a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80058e2:	e010      	b.n	8005906 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a0b      	ldr	r2, [pc, #44]	; (8005918 <HAL_TIM_PWM_MspInit+0xa0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10b      	bne.n	8005906 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <HAL_TIM_PWM_MspInit+0x9c>)
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	4a08      	ldr	r2, [pc, #32]	; (8005914 <HAL_TIM_PWM_MspInit+0x9c>)
 80058f4:	f043 0304 	orr.w	r3, r3, #4
 80058f8:	6593      	str	r3, [r2, #88]	; 0x58
 80058fa:	4b06      	ldr	r3, [pc, #24]	; (8005914 <HAL_TIM_PWM_MspInit+0x9c>)
 80058fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40021000 	.word	0x40021000
 8005918:	40000800 	.word	0x40000800

0800591c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08a      	sub	sp, #40	; 0x28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005924:	f107 0314 	add.w	r3, r7, #20
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593c:	d144      	bne.n	80059c8 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005942:	4a23      	ldr	r2, [pc, #140]	; (80059d0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	6593      	str	r3, [r2, #88]	; 0x58
 800594a:	4b21      	ldr	r3, [pc, #132]	; (80059d0 <HAL_TIM_Encoder_MspInit+0xb4>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005956:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595a:	4a1d      	ldr	r2, [pc, #116]	; (80059d0 <HAL_TIM_Encoder_MspInit+0xb4>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005962:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800596e:	4b18      	ldr	r3, [pc, #96]	; (80059d0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005972:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005974:	f043 0302 	orr.w	r3, r3, #2
 8005978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800597a:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <HAL_TIM_Encoder_MspInit+0xb4>)
 800597c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	60bb      	str	r3, [r7, #8]
 8005984:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8005986:	2301      	movs	r3, #1
 8005988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800598a:	2302      	movs	r3, #2
 800598c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005992:	2300      	movs	r3, #0
 8005994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005996:	2301      	movs	r3, #1
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 800599a:	f107 0314 	add.w	r3, r7, #20
 800599e:	4619      	mov	r1, r3
 80059a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059a4:	f004 fbc6 	bl	800a134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 80059a8:	2308      	movs	r3, #8
 80059aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ac:	2302      	movs	r3, #2
 80059ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059b4:	2300      	movs	r3, #0
 80059b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059b8:	2301      	movs	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 80059bc:	f107 0314 	add.w	r3, r7, #20
 80059c0:	4619      	mov	r1, r3
 80059c2:	4804      	ldr	r0, [pc, #16]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xb8>)
 80059c4:	f004 fbb6 	bl	800a134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80059c8:	bf00      	nop
 80059ca:	3728      	adds	r7, #40	; 0x28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40021000 	.word	0x40021000
 80059d4:	48000400 	.word	0x48000400

080059d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a34      	ldr	r2, [pc, #208]	; (8005ab8 <HAL_TIM_Base_MspInit+0xe0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d114      	bne.n	8005a14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80059ea:	4b34      	ldr	r3, [pc, #208]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 80059ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ee:	4a33      	ldr	r2, [pc, #204]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 80059f0:	f043 0310 	orr.w	r3, r3, #16
 80059f4:	6593      	str	r3, [r2, #88]	; 0x58
 80059f6:	4b31      	ldr	r3, [pc, #196]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 80059f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005a02:	2200      	movs	r2, #0
 8005a04:	2100      	movs	r1, #0
 8005a06:	2036      	movs	r0, #54	; 0x36
 8005a08:	f003 fb9d 	bl	8009146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a0c:	2036      	movs	r0, #54	; 0x36
 8005a0e:	f003 fbb4 	bl	800917a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005a12:	e04c      	b.n	8005aae <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a29      	ldr	r2, [pc, #164]	; (8005ac0 <HAL_TIM_Base_MspInit+0xe8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d114      	bne.n	8005a48 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005a1e:	4b27      	ldr	r3, [pc, #156]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	4a26      	ldr	r2, [pc, #152]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 8005a24:	f043 0320 	orr.w	r3, r3, #32
 8005a28:	6593      	str	r3, [r2, #88]	; 0x58
 8005a2a:	4b24      	ldr	r3, [pc, #144]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005a36:	2200      	movs	r2, #0
 8005a38:	2100      	movs	r1, #0
 8005a3a:	2037      	movs	r0, #55	; 0x37
 8005a3c:	f003 fb83 	bl	8009146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005a40:	2037      	movs	r0, #55	; 0x37
 8005a42:	f003 fb9a 	bl	800917a <HAL_NVIC_EnableIRQ>
}
 8005a46:	e032      	b.n	8005aae <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_TIM_Base_MspInit+0xec>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d114      	bne.n	8005a7c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005a52:	4b1a      	ldr	r3, [pc, #104]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 8005a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a56:	4a19      	ldr	r2, [pc, #100]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 8005a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8005a5e:	4b17      	ldr	r3, [pc, #92]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 8005a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	2019      	movs	r0, #25
 8005a70:	f003 fb69 	bl	8009146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005a74:	2019      	movs	r0, #25
 8005a76:	f003 fb80 	bl	800917a <HAL_NVIC_EnableIRQ>
}
 8005a7a:	e018      	b.n	8005aae <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a11      	ldr	r2, [pc, #68]	; (8005ac8 <HAL_TIM_Base_MspInit+0xf0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d113      	bne.n	8005aae <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005a86:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 8005a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8a:	4a0c      	ldr	r2, [pc, #48]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 8005a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a90:	6613      	str	r3, [r2, #96]	; 0x60
 8005a92:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <HAL_TIM_Base_MspInit+0xe4>)
 8005a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a9a:	60bb      	str	r3, [r7, #8]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	201a      	movs	r0, #26
 8005aa4:	f003 fb4f 	bl	8009146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005aa8:	201a      	movs	r0, #26
 8005aaa:	f003 fb66 	bl	800917a <HAL_NVIC_EnableIRQ>
}
 8005aae:	bf00      	nop
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40001000 	.word	0x40001000
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	40001400 	.word	0x40001400
 8005ac4:	40014400 	.word	0x40014400
 8005ac8:	40014800 	.word	0x40014800

08005acc <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <HAL_TIM_OnePulse_MspInit+0x38>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d10b      	bne.n	8005af6 <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005ade:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae2:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005ae4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40013400 	.word	0x40013400
 8005b08:	40021000 	.word	0x40021000

08005b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08a      	sub	sp, #40	; 0x28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b14:	f107 0314 	add.w	r3, r7, #20
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <HAL_TIM_MspPostInit+0xa8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d11c      	bne.n	8005b68 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b2e:	4b22      	ldr	r3, [pc, #136]	; (8005bb8 <HAL_TIM_MspPostInit+0xac>)
 8005b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b32:	4a21      	ldr	r2, [pc, #132]	; (8005bb8 <HAL_TIM_MspPostInit+0xac>)
 8005b34:	f043 0320 	orr.w	r3, r3, #32
 8005b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b3a:	4b1f      	ldr	r3, [pc, #124]	; (8005bb8 <HAL_TIM_MspPostInit+0xac>)
 8005b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 8005b46:	2301      	movs	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b52:	2300      	movs	r3, #0
 8005b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005b56:	2306      	movs	r3, #6
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8005b5a:	f107 0314 	add.w	r3, r7, #20
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4816      	ldr	r0, [pc, #88]	; (8005bbc <HAL_TIM_MspPostInit+0xb0>)
 8005b62:	f004 fae7 	bl	800a134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005b66:	e020      	b.n	8005baa <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a14      	ldr	r2, [pc, #80]	; (8005bc0 <HAL_TIM_MspPostInit+0xb4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d11b      	bne.n	8005baa <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b72:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <HAL_TIM_MspPostInit+0xac>)
 8005b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b76:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <HAL_TIM_MspPostInit+0xac>)
 8005b78:	f043 0302 	orr.w	r3, r3, #2
 8005b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b7e:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <HAL_TIM_MspPostInit+0xac>)
 8005b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8005b8a:	2380      	movs	r3, #128	; 0x80
 8005b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b96:	2300      	movs	r3, #0
 8005b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005b9e:	f107 0314 	add.w	r3, r7, #20
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4807      	ldr	r0, [pc, #28]	; (8005bc4 <HAL_TIM_MspPostInit+0xb8>)
 8005ba6:	f004 fac5 	bl	800a134 <HAL_GPIO_Init>
}
 8005baa:	bf00      	nop
 8005bac:	3728      	adds	r7, #40	; 0x28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	48001400 	.word	0x48001400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	48000400 	.word	0x48000400

08005bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b09a      	sub	sp, #104	; 0x68
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	605a      	str	r2, [r3, #4]
 8005bda:	609a      	str	r2, [r3, #8]
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005be0:	f107 0310 	add.w	r3, r7, #16
 8005be4:	2244      	movs	r2, #68	; 0x44
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f00c faf8 	bl	80121de <memset>
  if(huart->Instance==USART1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a23      	ldr	r2, [pc, #140]	; (8005c80 <HAL_UART_MspInit+0xb8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d13f      	bne.n	8005c78 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	4618      	mov	r0, r3
 8005c06:	f005 fb73 	bl	800b2f0 <HAL_RCCEx_PeriphCLKConfig>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005c10:	f7fe ffae 	bl	8004b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c14:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <HAL_UART_MspInit+0xbc>)
 8005c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c18:	4a1a      	ldr	r2, [pc, #104]	; (8005c84 <HAL_UART_MspInit+0xbc>)
 8005c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8005c20:	4b18      	ldr	r3, [pc, #96]	; (8005c84 <HAL_UART_MspInit+0xbc>)
 8005c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c2c:	4b15      	ldr	r3, [pc, #84]	; (8005c84 <HAL_UART_MspInit+0xbc>)
 8005c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c30:	4a14      	ldr	r2, [pc, #80]	; (8005c84 <HAL_UART_MspInit+0xbc>)
 8005c32:	f043 0301 	orr.w	r3, r3, #1
 8005c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c38:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <HAL_UART_MspInit+0xbc>)
 8005c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005c44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005c48:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c52:	2300      	movs	r3, #0
 8005c54:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c56:	2307      	movs	r3, #7
 8005c58:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c5e:	4619      	mov	r1, r3
 8005c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c64:	f004 fa66 	bl	800a134 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	2025      	movs	r0, #37	; 0x25
 8005c6e:	f003 fa6a 	bl	8009146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005c72:	2025      	movs	r0, #37	; 0x25
 8005c74:	f003 fa81 	bl	800917a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005c78:	bf00      	nop
 8005c7a:	3768      	adds	r7, #104	; 0x68
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40013800 	.word	0x40013800
 8005c84:	40021000 	.word	0x40021000

08005c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005c8c:	e7fe      	b.n	8005c8c <NMI_Handler+0x4>

08005c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c92:	e7fe      	b.n	8005c92 <HardFault_Handler+0x4>

08005c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c98:	e7fe      	b.n	8005c98 <MemManage_Handler+0x4>

08005c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c9e:	e7fe      	b.n	8005c9e <BusFault_Handler+0x4>

08005ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ca4:	e7fe      	b.n	8005ca4 <UsageFault_Handler+0x4>

08005ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005caa:	bf00      	nop
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cb8:	bf00      	nop
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cc6:	bf00      	nop
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cd4:	f000 fdf6 	bl	80068c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cd8:	bf00      	nop
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005ce0:	4802      	ldr	r0, [pc, #8]	; (8005cec <DMA1_Channel1_IRQHandler+0x10>)
 8005ce2:	f003 fe4e 	bl	8009982 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005ce6:	bf00      	nop
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20001e04 	.word	0x20001e04

08005cf0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005cf4:	4802      	ldr	r0, [pc, #8]	; (8005d00 <DMA1_Channel3_IRQHandler+0x10>)
 8005cf6:	f003 fe44 	bl	8009982 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005cfa:	bf00      	nop
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20001cc8 	.word	0x20001cc8

08005d04 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005d08:	4803      	ldr	r0, [pc, #12]	; (8005d18 <ADC1_2_IRQHandler+0x14>)
 8005d0a:	f001 fd57 	bl	80077bc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005d0e:	4803      	ldr	r0, [pc, #12]	; (8005d1c <ADC1_2_IRQHandler+0x18>)
 8005d10:	f001 fd54 	bl	80077bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005d14:	bf00      	nop
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20001bf0 	.word	0x20001bf0
 8005d1c:	20001c5c 	.word	0x20001c5c

08005d20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 8005d24:	2020      	movs	r0, #32
 8005d26:	f004 fbb7 	bl	800a498 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 8005d2a:	2080      	movs	r0, #128	; 0x80
 8005d2c:	f004 fbb4 	bl	800a498 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 8005d30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d34:	f004 fbb0 	bl	800a498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005d38:	bf00      	nop
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d40:	4802      	ldr	r0, [pc, #8]	; (8005d4c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8005d42:	f006 fef5 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005d46:	bf00      	nop
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20001e64 	.word	0x20001e64

08005d50 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d54:	4803      	ldr	r0, [pc, #12]	; (8005d64 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005d56:	f006 feeb 	bl	800cb30 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005d5a:	4803      	ldr	r0, [pc, #12]	; (8005d68 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005d5c:	f006 fee8 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005d60:	bf00      	nop
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20001e64 	.word	0x20001e64
 8005d68:	2000202c 	.word	0x2000202c

08005d6c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d70:	4803      	ldr	r0, [pc, #12]	; (8005d80 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8005d72:	f006 fedd 	bl	800cb30 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8005d76:	4803      	ldr	r0, [pc, #12]	; (8005d84 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8005d78:	f006 feda 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005d7c:	bf00      	nop
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20001e64 	.word	0x20001e64
 8005d84:	20002078 	.word	0x20002078

08005d88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d8c:	4802      	ldr	r0, [pc, #8]	; (8005d98 <TIM1_CC_IRQHandler+0x10>)
 8005d8e:	f006 fecf 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20001e64 	.word	0x20001e64

08005d9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005da0:	4802      	ldr	r0, [pc, #8]	; (8005dac <USART1_IRQHandler+0x10>)
 8005da2:	f008 f85b 	bl	800de5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200020c4 	.word	0x200020c4

08005db0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005db4:	4802      	ldr	r0, [pc, #8]	; (8005dc0 <TIM6_DAC_IRQHandler+0x10>)
 8005db6:	f006 febb 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005dba:	bf00      	nop
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20001f48 	.word	0x20001f48

08005dc4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005dc8:	4802      	ldr	r0, [pc, #8]	; (8005dd4 <TIM7_IRQHandler+0x10>)
 8005dca:	f006 feb1 	bl	800cb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20001f94 	.word	0x20001f94

08005dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  return 1;
 8005ddc:	2301      	movs	r3, #1
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <_kill>:

int _kill(int pid, int sig)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005df2:	f00c fa47 	bl	8012284 <__errno>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2216      	movs	r2, #22
 8005dfa:	601a      	str	r2, [r3, #0]
  return -1;
 8005dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <_exit>:

void _exit (int status)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e10:	f04f 31ff 	mov.w	r1, #4294967295
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff ffe7 	bl	8005de8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e1a:	e7fe      	b.n	8005e1a <_exit+0x12>

08005e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	e00a      	b.n	8005e44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005e2e:	f3af 8000 	nop.w
 8005e32:	4601      	mov	r1, r0
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	60ba      	str	r2, [r7, #8]
 8005e3a:	b2ca      	uxtb	r2, r1
 8005e3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	3301      	adds	r3, #1
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	dbf0      	blt.n	8005e2e <_read+0x12>
  }

  return len;
 8005e4c:	687b      	ldr	r3, [r7, #4]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	e009      	b.n	8005e7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	60ba      	str	r2, [r7, #8]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	dbf1      	blt.n	8005e68 <_write+0x12>
  }
  return len;
 8005e84:	687b      	ldr	r3, [r7, #4]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <_close>:

int _close(int file)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005eb6:	605a      	str	r2, [r3, #4]
  return 0;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <_isatty>:

int _isatty(int file)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005ece:	2301      	movs	r3, #1
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f00:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <_sbrk+0x5c>)
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <_sbrk+0x60>)
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f0c:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <_sbrk+0x64>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f14:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <_sbrk+0x64>)
 8005f16:	4a12      	ldr	r2, [pc, #72]	; (8005f60 <_sbrk+0x68>)
 8005f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f1a:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <_sbrk+0x64>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d207      	bcs.n	8005f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f28:	f00c f9ac 	bl	8012284 <__errno>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	220c      	movs	r2, #12
 8005f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	e009      	b.n	8005f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f38:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <_sbrk+0x64>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f3e:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <_sbrk+0x64>)
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4413      	add	r3, r2
 8005f46:	4a05      	ldr	r2, [pc, #20]	; (8005f5c <_sbrk+0x64>)
 8005f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20008000 	.word	0x20008000
 8005f58:	00000400 	.word	0x00000400
 8005f5c:	200021e4 	.word	0x200021e4
 8005f60:	200023c8 	.word	0x200023c8

08005f64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005f68:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <SystemInit+0x20>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	4a05      	ldr	r2, [pc, #20]	; (8005f84 <SystemInit+0x20>)
 8005f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f78:	bf00      	nop
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	e000ed00 	.word	0xe000ed00

08005f88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f88:	480d      	ldr	r0, [pc, #52]	; (8005fc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f8c:	f7ff ffea 	bl	8005f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
                                   ldr r0, =_sdata
 8005f90:	480c      	ldr	r0, [pc, #48]	; (8005fc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f92:	490d      	ldr	r1, [pc, #52]	; (8005fc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f94:	4a0d      	ldr	r2, [pc, #52]	; (8005fcc <LoopForever+0xe>)
  movs r3, #0
 8005f96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005f98:	e002      	b.n	8005fa0 <LoopCopyDataInit>

08005f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f9e:	3304      	adds	r3, #4

08005fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fa4:	d3f9      	bcc.n	8005f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fa6:	4a0a      	ldr	r2, [pc, #40]	; (8005fd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005fa8:	4c0a      	ldr	r4, [pc, #40]	; (8005fd4 <LoopForever+0x16>)
  movs r3, #0
 8005faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fac:	e001      	b.n	8005fb2 <LoopFillZerobss>

08005fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fb0:	3204      	adds	r2, #4

08005fb2 <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
 8005fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fb4:	d3fb      	bcc.n	8005fae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005fb6:	f00c f96b 	bl	8012290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005fba:	f7fd fdb5 	bl	8003b28 <main>

08005fbe <LoopForever>:

LoopForever:
    b LoopForever
 8005fbe:	e7fe      	b.n	8005fbe <LoopForever>
  ldr   r0, =_estack
 8005fc0:	20008000 	.word	0x20008000
                                   ldr r0, =_sdata
 8005fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fc8:	200003dc 	.word	0x200003dc
  ldr r2, =_sidata
 8005fcc:	08018b70 	.word	0x08018b70
  ldr r2, =_sbss
 8005fd0:	200003e0 	.word	0x200003e0
  ldr r4, =_ebss
 8005fd4:	200023c8 	.word	0x200023c8

08005fd8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005fd8:	e7fe      	b.n	8005fd8 <COMP1_2_3_IRQHandler>
	...

08005fdc <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8005fe6:	4b12      	ldr	r3, [pc, #72]	; (8006030 <setSPI_Size+0x54>)
 8005fe8:	f993 3000 	ldrsb.w	r3, [r3]
 8005fec:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d017      	beq.n	8006024 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <setSPI_Size+0x58>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <setSPI_Size+0x58>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006002:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8006004:	4a0a      	ldr	r2, [pc, #40]	; (8006030 <setSPI_Size+0x54>)
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 800600a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d104      	bne.n	800601c <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <setSPI_Size+0x58>)
 8006014:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8006018:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 800601a:	e003      	b.n	8006024 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <setSPI_Size+0x58>)
 800601e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006022:	60da      	str	r2, [r3, #12]
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	200001dc 	.word	0x200001dc
 8006034:	20001da0 	.word	0x20001da0

08006038 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	460a      	mov	r2, r1
 8006042:	71fb      	strb	r3, [r7, #7]
 8006044:	4613      	mov	r3, r2
 8006046:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8006048:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff ffc5 	bl	8005fdc <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8006052:	4b3c      	ldr	r3, [pc, #240]	; (8006144 <setDMAMemMode+0x10c>)
 8006054:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006058:	461a      	mov	r2, r3
 800605a:	79bb      	ldrb	r3, [r7, #6]
 800605c:	429a      	cmp	r2, r3
 800605e:	d106      	bne.n	800606e <setDMAMemMode+0x36>
 8006060:	4b38      	ldr	r3, [pc, #224]	; (8006144 <setDMAMemMode+0x10c>)
 8006062:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006066:	461a      	mov	r2, r3
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	429a      	cmp	r2, r3
 800606c:	d066      	beq.n	800613c <setDMAMemMode+0x104>
    config.dma_sz =size;
 800606e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8006072:	4b34      	ldr	r3, [pc, #208]	; (8006144 <setDMAMemMode+0x10c>)
 8006074:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 8006076:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800607a:	4b32      	ldr	r3, [pc, #200]	; (8006144 <setDMAMemMode+0x10c>)
 800607c:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 800607e:	4b32      	ldr	r3, [pc, #200]	; (8006148 <setDMAMemMode+0x110>)
 8006080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4b30      	ldr	r3, [pc, #192]	; (8006148 <setDMAMemMode+0x110>)
 8006088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0201 	bic.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 8006092:	bf00      	nop
 8006094:	4b2c      	ldr	r3, [pc, #176]	; (8006148 <setDMAMemMode+0x110>)
 8006096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1f7      	bne.n	8006094 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d10e      	bne.n	80060c8 <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80060aa:	4b27      	ldr	r3, [pc, #156]	; (8006148 <setDMAMemMode+0x110>)
 80060ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ae:	2280      	movs	r2, #128	; 0x80
 80060b0:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 80060b2:	4b25      	ldr	r3, [pc, #148]	; (8006148 <setDMAMemMode+0x110>)
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b23      	ldr	r3, [pc, #140]	; (8006148 <setDMAMemMode+0x110>)
 80060bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	e00d      	b.n	80060e4 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80060c8:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <setDMAMemMode+0x110>)
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	2200      	movs	r2, #0
 80060ce:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 80060d0:	4b1d      	ldr	r3, [pc, #116]	; (8006148 <setDMAMemMode+0x110>)
 80060d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	4b1b      	ldr	r3, [pc, #108]	; (8006148 <setDMAMemMode+0x110>)
 80060da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060e2:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 80060e4:	79bb      	ldrb	r3, [r7, #6]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d116      	bne.n	8006118 <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80060ea:	4b17      	ldr	r3, [pc, #92]	; (8006148 <setDMAMemMode+0x110>)
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060f2:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80060f4:	4b14      	ldr	r3, [pc, #80]	; (8006148 <setDMAMemMode+0x110>)
 80060f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060fc:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 80060fe:	4b12      	ldr	r3, [pc, #72]	; (8006148 <setDMAMemMode+0x110>)
 8006100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800610a:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <setDMAMemMode+0x110>)
 800610c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8006114:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 8006116:	e011      	b.n	800613c <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006118:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <setDMAMemMode+0x110>)
 800611a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611c:	2200      	movs	r2, #0
 800611e:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006120:	4b09      	ldr	r3, [pc, #36]	; (8006148 <setDMAMemMode+0x110>)
 8006122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006124:	2200      	movs	r2, #0
 8006126:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 8006128:	4b07      	ldr	r3, [pc, #28]	; (8006148 <setDMAMemMode+0x110>)
 800612a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	4b05      	ldr	r3, [pc, #20]	; (8006148 <setDMAMemMode+0x110>)
 8006132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800613a:	601a      	str	r2, [r3, #0]
}
 800613c:	bf00      	nop
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	200001dc 	.word	0x200001dc
 8006148:	20001da0 	.word	0x20001da0

0800614c <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8006158:	2000      	movs	r0, #0
 800615a:	f7ff ff3f 	bl	8005fdc <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 800615e:	2200      	movs	r2, #0
 8006160:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006164:	4815      	ldr	r0, [pc, #84]	; (80061bc <LCD_WriteCommand+0x70>)
 8006166:	f004 f97f 	bl	800a468 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800616a:	2200      	movs	r2, #0
 800616c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006170:	4812      	ldr	r0, [pc, #72]	; (80061bc <LCD_WriteCommand+0x70>)
 8006172:	f004 f979 	bl	800a468 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8006176:	f04f 33ff 	mov.w	r3, #4294967295
 800617a:	2201      	movs	r2, #1
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4810      	ldr	r0, [pc, #64]	; (80061c0 <LCD_WriteCommand+0x74>)
 8006180:	f005 fb51 	bl	800b826 <HAL_SPI_Transmit>
  if(argc){
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00e      	beq.n	80061a8 <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800618a:	2201      	movs	r2, #1
 800618c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006190:	480a      	ldr	r0, [pc, #40]	; (80061bc <LCD_WriteCommand+0x70>)
 8006192:	f004 f969 	bl	800a468 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	1c59      	adds	r1, r3, #1
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	b29a      	uxth	r2, r3
 800619e:	f04f 33ff 	mov.w	r3, #4294967295
 80061a2:	4807      	ldr	r0, [pc, #28]	; (80061c0 <LCD_WriteCommand+0x74>)
 80061a4:	f005 fb3f 	bl	800b826 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80061a8:	2201      	movs	r2, #1
 80061aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061ae:	4803      	ldr	r0, [pc, #12]	; (80061bc <LCD_WriteCommand+0x70>)
 80061b0:	f004 f95a 	bl	800a468 <HAL_GPIO_WritePin>
#endif
}
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	48000400 	.word	0x48000400
 80061c0:	20001da0 	.word	0x20001da0

080061c4 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80061ce:	2201      	movs	r2, #1
 80061d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061d4:	4830      	ldr	r0, [pc, #192]	; (8006298 <LCD_WriteData+0xd4>)
 80061d6:	f004 f947 	bl	800a468 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80061da:	2200      	movs	r2, #0
 80061dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061e0:	482d      	ldr	r0, [pc, #180]	; (8006298 <LCD_WriteData+0xd4>)
 80061e2:	f004 f941 	bl	800a468 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80061e6:	e049      	b.n	800627c <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061ee:	4293      	cmp	r3, r2
 80061f0:	bf28      	it	cs
 80061f2:	4613      	movcs	r3, r2
 80061f4:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d924      	bls.n	8006246 <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 80061fc:	89fb      	ldrh	r3, [r7, #14]
 80061fe:	461a      	mov	r2, r3
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4826      	ldr	r0, [pc, #152]	; (800629c <LCD_WriteData+0xd8>)
 8006204:	f005 fc84 	bl	800bb10 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8006208:	bf00      	nop
 800620a:	4b24      	ldr	r3, [pc, #144]	; (800629c <LCD_WriteData+0xd8>)
 800620c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620e:	4618      	mov	r0, r3
 8006210:	f003 fc66 	bl	8009ae0 <HAL_DMA_GetState>
 8006214:	4603      	mov	r3, r0
 8006216:	2b01      	cmp	r3, #1
 8006218:	d1f7      	bne.n	800620a <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 800621a:	4b21      	ldr	r3, [pc, #132]	; (80062a0 <LCD_WriteData+0xdc>)
 800621c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d127      	bne.n	8006274 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 8006224:	4b1e      	ldr	r3, [pc, #120]	; (80062a0 <LCD_WriteData+0xdc>)
 8006226:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d104      	bne.n	8006238 <LCD_WriteData+0x74>
          buff += chunk_size;
 800622e:	89fb      	ldrh	r3, [r7, #14]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	4413      	add	r3, r2
 8006234:	607b      	str	r3, [r7, #4]
 8006236:	e01d      	b.n	8006274 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 8006238:	89fb      	ldrh	r3, [r7, #14]
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	461a      	mov	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4413      	add	r3, r2
 8006242:	607b      	str	r3, [r7, #4]
 8006244:	e016      	b.n	8006274 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8006246:	89fa      	ldrh	r2, [r7, #14]
 8006248:	f04f 33ff 	mov.w	r3, #4294967295
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	4813      	ldr	r0, [pc, #76]	; (800629c <LCD_WriteData+0xd8>)
 8006250:	f005 fae9 	bl	800b826 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8006254:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <LCD_WriteData+0xdc>)
 8006256:	f993 3000 	ldrsb.w	r3, [r3]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d104      	bne.n	8006268 <LCD_WriteData+0xa4>
        buff += chunk_size;
 800625e:	89fb      	ldrh	r3, [r7, #14]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	4413      	add	r3, r2
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	e005      	b.n	8006274 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 8006268:	89fb      	ldrh	r3, [r7, #14]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	461a      	mov	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4413      	add	r3, r2
 8006272:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8006274:	89fb      	ldrh	r3, [r7, #14]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1b2      	bne.n	80061e8 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8006282:	2201      	movs	r2, #1
 8006284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006288:	4803      	ldr	r0, [pc, #12]	; (8006298 <LCD_WriteData+0xd4>)
 800628a:	f004 f8ed 	bl	800a468 <HAL_GPIO_WritePin>
#endif
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	48000400 	.word	0x48000400
 800629c:	20001da0 	.word	0x20001da0
 80062a0:	200001dc 	.word	0x200001dc

080062a4 <LCD_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in ST7735.h)
 * @return none
 */
void LCD_SetRotation(uint8_t m)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { CMD_MADCTL, 0};
 80062ae:	2336      	movs	r3, #54	; 0x36
 80062b0:	81bb      	strh	r3, [r7, #12]

  m = m % 4; // can't be higher than 3
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	71fb      	strb	r3, [r7, #7]

  switch (m)
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d817      	bhi.n	80062f0 <LCD_SetRotation+0x4c>
 80062c0:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <LCD_SetRotation+0x24>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	080062df 	.word	0x080062df
 80062d0:	080062e5 	.word	0x080062e5
 80062d4:	080062eb 	.word	0x080062eb
  {
  case 0:
#if LCD_IS_160X80
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MY | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MY | CMD_MADCTL_RGB;
 80062d8:	23c0      	movs	r3, #192	; 0xc0
 80062da:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80062dc:	e008      	b.n	80062f0 <LCD_SetRotation+0x4c>
  case 1:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_MY | CMD_MADCTL_MV | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MY | CMD_MADCTL_MV | CMD_MADCTL_RGB;
 80062de:	23a0      	movs	r3, #160	; 0xa0
 80062e0:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80062e2:	e005      	b.n	80062f0 <LCD_SetRotation+0x4c>
  case 2:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_RGB;
 80062e4:	2300      	movs	r3, #0
 80062e6:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80062e8:	e002      	b.n	80062f0 <LCD_SetRotation+0x4c>
  case 3:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MV | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MV | CMD_MADCTL_RGB;
 80062ea:	2360      	movs	r3, #96	; 0x60
 80062ec:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80062ee:	bf00      	nop
  }
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80062f0:	f107 030c 	add.w	r3, r7, #12
 80062f4:	2101      	movs	r1, #1
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff ff28 	bl	800614c <LCD_WriteCommand>
}
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	b08b      	sub	sp, #44	; 0x2c
 8006308:	af00      	add	r7, sp, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	4611      	mov	r1, r2
 8006310:	461a      	mov	r2, r3
 8006312:	4623      	mov	r3, r4
 8006314:	80fb      	strh	r3, [r7, #6]
 8006316:	4603      	mov	r3, r0
 8006318:	80bb      	strh	r3, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	807b      	strh	r3, [r7, #2]
 800631e:	4613      	mov	r3, r2
 8006320:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006326:	887b      	ldrh	r3, [r7, #2]
 8006328:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800632a:	88bb      	ldrh	r3, [r7, #4]
 800632c:	847b      	strh	r3, [r7, #34]	; 0x22
 800632e:	883b      	ldrh	r3, [r7, #0]
 8006330:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8006332:	232a      	movs	r3, #42	; 0x2a
 8006334:	763b      	strb	r3, [r7, #24]
 8006336:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800633a:	121b      	asrs	r3, r3, #8
 800633c:	b21b      	sxth	r3, r3
 800633e:	b2db      	uxtb	r3, r3
 8006340:	767b      	strb	r3, [r7, #25]
 8006342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006344:	b2db      	uxtb	r3, r3
 8006346:	76bb      	strb	r3, [r7, #26]
 8006348:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800634c:	121b      	asrs	r3, r3, #8
 800634e:	b21b      	sxth	r3, r3
 8006350:	b2db      	uxtb	r3, r3
 8006352:	76fb      	strb	r3, [r7, #27]
 8006354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006356:	b2db      	uxtb	r3, r3
 8006358:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800635a:	f107 0318 	add.w	r3, r7, #24
 800635e:	2104      	movs	r1, #4
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff fef3 	bl	800614c <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8006366:	232b      	movs	r3, #43	; 0x2b
 8006368:	743b      	strb	r3, [r7, #16]
 800636a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800636e:	121b      	asrs	r3, r3, #8
 8006370:	b21b      	sxth	r3, r3
 8006372:	b2db      	uxtb	r3, r3
 8006374:	747b      	strb	r3, [r7, #17]
 8006376:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006378:	b2db      	uxtb	r3, r3
 800637a:	74bb      	strb	r3, [r7, #18]
 800637c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006380:	121b      	asrs	r3, r3, #8
 8006382:	b21b      	sxth	r3, r3
 8006384:	b2db      	uxtb	r3, r3
 8006386:	74fb      	strb	r3, [r7, #19]
 8006388:	8c3b      	ldrh	r3, [r7, #32]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800638e:	f107 0310 	add.w	r3, r7, #16
 8006392:	2104      	movs	r1, #4
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fed9 	bl	800614c <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800639a:	232c      	movs	r3, #44	; 0x2c
 800639c:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800639e:	f107 030c 	add.w	r3, r7, #12
 80063a2:	2100      	movs	r1, #0
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff fed1 	bl	800614c <LCD_WriteCommand>
  }
}
 80063aa:	bf00      	nop
 80063ac:	372c      	adds	r7, #44	; 0x2c
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd90      	pop	{r4, r7, pc}
	...

080063b4 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	80fb      	strh	r3, [r7, #6]
 80063be:	460b      	mov	r3, r1
 80063c0:	80bb      	strh	r3, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80063c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	db39      	blt.n	8006442 <LCD_DrawPixel+0x8e>
 80063ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063d2:	2bef      	cmp	r3, #239	; 0xef
 80063d4:	dc35      	bgt.n	8006442 <LCD_DrawPixel+0x8e>
 80063d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	db31      	blt.n	8006442 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 80063de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80063e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80063e6:	da2c      	bge.n	8006442 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80063e8:	887b      	ldrh	r3, [r7, #2]
 80063ea:	0a1b      	lsrs	r3, r3, #8
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	733b      	strb	r3, [r7, #12]
 80063f2:	887b      	ldrh	r3, [r7, #2]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80063f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80063fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006400:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006404:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006408:	f7ff ff7c 	bl	8006304 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800640c:	2201      	movs	r2, #1
 800640e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006412:	480e      	ldr	r0, [pc, #56]	; (800644c <LCD_DrawPixel+0x98>)
 8006414:	f004 f828 	bl	800a468 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8006418:	2200      	movs	r2, #0
 800641a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800641e:	480b      	ldr	r0, [pc, #44]	; (800644c <LCD_DrawPixel+0x98>)
 8006420:	f004 f822 	bl	800a468 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8006424:	f107 010c 	add.w	r1, r7, #12
 8006428:	f04f 33ff 	mov.w	r3, #4294967295
 800642c:	2202      	movs	r2, #2
 800642e:	4808      	ldr	r0, [pc, #32]	; (8006450 <LCD_DrawPixel+0x9c>)
 8006430:	f005 f9f9 	bl	800b826 <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8006434:	2201      	movs	r2, #1
 8006436:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800643a:	4804      	ldr	r0, [pc, #16]	; (800644c <LCD_DrawPixel+0x98>)
 800643c:	f004 f814 	bl	800a468 <HAL_GPIO_WritePin>
 8006440:	e000      	b.n	8006444 <LCD_DrawPixel+0x90>
    return;
 8006442:	bf00      	nop
#endif
}
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	48000400 	.word	0x48000400
 8006450:	20001da0 	.word	0x20001da0

08006454 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8006454:	b580      	push	{r7, lr}
 8006456:	b094      	sub	sp, #80	; 0x50
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b20      	cmp	r3, #32
 8006464:	d905      	bls.n	8006472 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8006466:	1cbb      	adds	r3, r7, #2
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff feaa 	bl	80061c4 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8006470:	e026      	b.n	80064c0 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8006472:	2300      	movs	r3, #0
 8006474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006476:	e009      	b.n	800648c <LCD_FillPixels+0x38>
      fill[t]=color;
 8006478:	887a      	ldrh	r2, [r7, #2]
 800647a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	3350      	adds	r3, #80	; 0x50
 8006480:	443b      	add	r3, r7
 8006482:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8006486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006488:	3301      	adds	r3, #1
 800648a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b20      	cmp	r3, #32
 8006490:	bf28      	it	cs
 8006492:	2320      	movcs	r3, #32
 8006494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006496:	429a      	cmp	r2, r3
 8006498:	d3ee      	bcc.n	8006478 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 800649a:	e00e      	b.n	80064ba <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b20      	cmp	r3, #32
 80064a0:	bf28      	it	cs
 80064a2:	2320      	movcs	r3, #32
 80064a4:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fe89 	bl	80061c4 <LCD_WriteData>
      pixels-=sz;
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1ed      	bne.n	800649c <LCD_FillPixels+0x48>
}
 80064c0:	bf00      	nop
 80064c2:	3750      	adds	r7, #80	; 0x50
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4604      	mov	r4, r0
 80064d0:	4608      	mov	r0, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	4623      	mov	r3, r4
 80064d8:	80fb      	strh	r3, [r7, #6]
 80064da:	4603      	mov	r3, r0
 80064dc:	80bb      	strh	r3, [r7, #4]
 80064de:	460b      	mov	r3, r1
 80064e0:	807b      	strh	r3, [r7, #2]
 80064e2:	4613      	mov	r3, r2
 80064e4:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80064e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d105      	bne.n	80064fc <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 80064f0:	2100      	movs	r1, #0
 80064f2:	2001      	movs	r0, #1
 80064f4:	f7ff fda0 	bl	8006038 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	e014      	b.n	8006526 <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80064fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006500:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006504:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006508:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800650c:	f7ff fefa 	bl	8006304 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8006510:	2101      	movs	r1, #1
 8006512:	2000      	movs	r0, #0
 8006514:	f7ff fd90 	bl	8006038 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8006518:	2201      	movs	r2, #1
 800651a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800651e:	4804      	ldr	r0, [pc, #16]	; (8006530 <LCD_FillArea+0x68>)
 8006520:	f003 ffa2 	bl	800a468 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8006524:	4b03      	ldr	r3, [pc, #12]	; (8006534 <LCD_FillArea+0x6c>)
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	bd90      	pop	{r4, r7, pc}
 800652e:	bf00      	nop
 8006530:	48000400 	.word	0x48000400
 8006534:	08006455 	.word	0x08006455

08006538 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8006538:	b590      	push	{r4, r7, lr}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	4611      	mov	r1, r2
 8006544:	461a      	mov	r2, r3
 8006546:	4623      	mov	r3, r4
 8006548:	80fb      	strh	r3, [r7, #6]
 800654a:	4603      	mov	r3, r0
 800654c:	80bb      	strh	r3, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	807b      	strh	r3, [r7, #2]
 8006552:	4613      	mov	r3, r2
 8006554:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8006556:	887a      	ldrh	r2, [r7, #2]
 8006558:	88fb      	ldrh	r3, [r7, #6]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	3301      	adds	r3, #1
 800655e:	4619      	mov	r1, r3
 8006560:	883a      	ldrh	r2, [r7, #0]
 8006562:	88bb      	ldrh	r3, [r7, #4]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	3301      	adds	r3, #1
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800656e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006572:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006576:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800657a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800657e:	f7ff fec1 	bl	8006304 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8006582:	2101      	movs	r1, #1
 8006584:	2000      	movs	r0, #0
 8006586:	f7ff fd57 	bl	8006038 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 800658a:	8c3b      	ldrh	r3, [r7, #32]
 800658c:	4619      	mov	r1, r3
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff ff60 	bl	8006454 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8006594:	2100      	movs	r1, #0
 8006596:	2001      	movs	r0, #1
 8006598:	f7ff fd4e 	bl	8006038 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd90      	pop	{r4, r7, pc}

080065a6 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80065a6:	b590      	push	{r4, r7, lr}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	4603      	mov	r3, r0
 80065ae:	603a      	str	r2, [r7, #0]
 80065b0:	80fb      	strh	r3, [r7, #6]
 80065b2:	460b      	mov	r3, r1
 80065b4:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	889b      	ldrh	r3, [r3, #4]
 80065ba:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	88db      	ldrh	r3, [r3, #6]
 80065c0:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80065c2:	88fb      	ldrh	r3, [r7, #6]
 80065c4:	2bef      	cmp	r3, #239	; 0xef
 80065c6:	d839      	bhi.n	800663c <LCD_DrawImage+0x96>
 80065c8:	88bb      	ldrh	r3, [r7, #4]
 80065ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80065ce:	d235      	bcs.n	800663c <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 80065d0:	88fa      	ldrh	r2, [r7, #6]
 80065d2:	89fb      	ldrh	r3, [r7, #14]
 80065d4:	4413      	add	r3, r2
 80065d6:	2bf0      	cmp	r3, #240	; 0xf0
 80065d8:	dc32      	bgt.n	8006640 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 80065da:	88ba      	ldrh	r2, [r7, #4]
 80065dc:	89bb      	ldrh	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80065e4:	dc2e      	bgt.n	8006644 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	7a1b      	ldrb	r3, [r3, #8]
 80065ea:	2b10      	cmp	r3, #16
 80065ec:	d12c      	bne.n	8006648 <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80065ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80065f2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80065f6:	88fa      	ldrh	r2, [r7, #6]
 80065f8:	89fb      	ldrh	r3, [r7, #14]
 80065fa:	4413      	add	r3, r2
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29b      	uxth	r3, r3
 8006602:	b21c      	sxth	r4, r3
 8006604:	88ba      	ldrh	r2, [r7, #4]
 8006606:	89bb      	ldrh	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29b      	uxth	r3, r3
 8006610:	b21b      	sxth	r3, r3
 8006612:	4622      	mov	r2, r4
 8006614:	f7ff fe76 	bl	8006304 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8006618:	2101      	movs	r1, #1
 800661a:	2001      	movs	r0, #1
 800661c:	f7ff fd0c 	bl	8006038 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	89fb      	ldrh	r3, [r7, #14]
 8006626:	89ba      	ldrh	r2, [r7, #12]
 8006628:	fb02 f303 	mul.w	r3, r2, r3
 800662c:	4619      	mov	r1, r3
 800662e:	f7ff fdc9 	bl	80061c4 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8006632:	2100      	movs	r1, #0
 8006634:	2001      	movs	r0, #1
 8006636:	f7ff fcff 	bl	8006038 <setDMAMemMode>
 800663a:	e006      	b.n	800664a <LCD_DrawImage+0xa4>
    return;
 800663c:	bf00      	nop
 800663e:	e004      	b.n	800664a <LCD_DrawImage+0xa4>
    return;
 8006640:	bf00      	nop
 8006642:	e002      	b.n	800664a <LCD_DrawImage+0xa4>
    return;
 8006644:	bf00      	nop
 8006646:	e000      	b.n	800664a <LCD_DrawImage+0xa4>
    return;
 8006648:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	bd90      	pop	{r4, r7, pc}

08006650 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b087      	sub	sp, #28
 8006654:	af02      	add	r7, sp, #8
 8006656:	4604      	mov	r4, r0
 8006658:	4608      	mov	r0, r1
 800665a:	4611      	mov	r1, r2
 800665c:	461a      	mov	r2, r3
 800665e:	4623      	mov	r3, r4
 8006660:	80fb      	strh	r3, [r7, #6]
 8006662:	4603      	mov	r3, r0
 8006664:	80bb      	strh	r3, [r7, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	807b      	strh	r3, [r7, #2]
 800666a:	4613      	mov	r3, r2
 800666c:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 800666e:	88fa      	ldrh	r2, [r7, #6]
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	429a      	cmp	r2, r3
 8006674:	d10a      	bne.n	800668c <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8006676:	88ba      	ldrh	r2, [r7, #4]
 8006678:	883b      	ldrh	r3, [r7, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d918      	bls.n	80066b0 <LCD_DrawLine+0x60>
 800667e:	88bb      	ldrh	r3, [r7, #4]
 8006680:	81bb      	strh	r3, [r7, #12]
 8006682:	883b      	ldrh	r3, [r7, #0]
 8006684:	80bb      	strh	r3, [r7, #4]
 8006686:	89bb      	ldrh	r3, [r7, #12]
 8006688:	803b      	strh	r3, [r7, #0]
 800668a:	e011      	b.n	80066b0 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 800668c:	88ba      	ldrh	r2, [r7, #4]
 800668e:	883b      	ldrh	r3, [r7, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d10a      	bne.n	80066aa <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8006694:	88fa      	ldrh	r2, [r7, #6]
 8006696:	887b      	ldrh	r3, [r7, #2]
 8006698:	429a      	cmp	r2, r3
 800669a:	d909      	bls.n	80066b0 <LCD_DrawLine+0x60>
 800669c:	88fb      	ldrh	r3, [r7, #6]
 800669e:	81fb      	strh	r3, [r7, #14]
 80066a0:	887b      	ldrh	r3, [r7, #2]
 80066a2:	80fb      	strh	r3, [r7, #6]
 80066a4:	89fb      	ldrh	r3, [r7, #14]
 80066a6:	807b      	strh	r3, [r7, #2]
 80066a8:	e002      	b.n	80066b0 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 80066aa:	f04f 33ff 	mov.w	r3, #4294967295
 80066ae:	e009      	b.n	80066c4 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 80066b0:	883c      	ldrh	r4, [r7, #0]
 80066b2:	887a      	ldrh	r2, [r7, #2]
 80066b4:	88b9      	ldrh	r1, [r7, #4]
 80066b6:	88f8      	ldrh	r0, [r7, #6]
 80066b8:	8c3b      	ldrh	r3, [r7, #32]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	4623      	mov	r3, r4
 80066be:	f7ff ff3b 	bl	8006538 <LCD_Fill>
  return UG_RESULT_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd90      	pop	{r4, r7, pc}

080066cc <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60ba      	str	r2, [r7, #8]
 80066d4:	607b      	str	r3, [r7, #4]
 80066d6:	4603      	mov	r3, r0
 80066d8:	81fb      	strh	r3, [r7, #14]
 80066da:	460b      	mov	r3, r1
 80066dc:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f008 ffa2 	bl	800f628 <UG_FontSelect>
  UG_SetForecolor(color);
 80066e4:	8b3b      	ldrh	r3, [r7, #24]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f009 faea 	bl	800fcc0 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 80066ec:	8bbb      	ldrh	r3, [r7, #28]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f009 faf8 	bl	800fce4 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 80066f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80066f8:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	4618      	mov	r0, r3
 8006700:	f009 fa46 	bl	800fb90 <UG_PutString>
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <LCD_setPower+0x14>
 800671c:	2329      	movs	r3, #41	; 0x29
 800671e:	e000      	b.n	8006722 <LCD_setPower+0x16>
 8006720:	2328      	movs	r3, #40	; 0x28
 8006722:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8006724:	f107 030c 	add.w	r3, r7, #12
 8006728:	2100      	movs	r1, #0
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff fd0e 	bl	800614c <LCD_WriteCommand>
}
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <LCD_Update>:

static void LCD_Update(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 800673c:	2100      	movs	r1, #0
 800673e:	2001      	movs	r0, #1
 8006740:	f7ff fc7a 	bl	8006038 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8006744:	bf00      	nop
 8006746:	bd80      	pop	{r7, pc}

08006748 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 800674e:	2201      	movs	r2, #1
 8006750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006754:	482a      	ldr	r0, [pc, #168]	; (8006800 <LCD_init+0xb8>)
 8006756:	f003 fe87 	bl	800a468 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 800675a:	2200      	movs	r2, #0
 800675c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006760:	4827      	ldr	r0, [pc, #156]	; (8006800 <LCD_init+0xb8>)
 8006762:	f003 fe81 	bl	800a468 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8006766:	2001      	movs	r0, #1
 8006768:	f000 f8ca 	bl	8006900 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 800676c:	2201      	movs	r2, #1
 800676e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006772:	4823      	ldr	r0, [pc, #140]	; (8006800 <LCD_init+0xb8>)
 8006774:	f003 fe78 	bl	800a468 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8006778:	20c8      	movs	r0, #200	; 0xc8
 800677a:	f000 f8c1 	bl	8006900 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 800677e:	4921      	ldr	r1, [pc, #132]	; (8006804 <LCD_init+0xbc>)
 8006780:	4821      	ldr	r0, [pc, #132]	; (8006808 <LCD_init+0xc0>)
 8006782:	f008 feb7 	bl	800f4f4 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8006786:	4921      	ldr	r1, [pc, #132]	; (800680c <LCD_init+0xc4>)
 8006788:	2000      	movs	r0, #0
 800678a:	f00a fb41 	bl	8010e10 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 800678e:	4920      	ldr	r1, [pc, #128]	; (8006810 <LCD_init+0xc8>)
 8006790:	2001      	movs	r0, #1
 8006792:	f00a fb3d 	bl	8010e10 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8006796:	491f      	ldr	r1, [pc, #124]	; (8006814 <LCD_init+0xcc>)
 8006798:	2002      	movs	r0, #2
 800679a:	f00a fb39 	bl	8010e10 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 800679e:	491e      	ldr	r1, [pc, #120]	; (8006818 <LCD_init+0xd0>)
 80067a0:	2003      	movs	r0, #3
 80067a2:	f00a fb35 	bl	8010e10 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 80067a6:	2000      	movs	r0, #0
 80067a8:	f009 faae 	bl	800fd08 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 80067ac:	2000      	movs	r0, #0
 80067ae:	f009 fabf 	bl	800fd30 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80067b2:	2300      	movs	r3, #0
 80067b4:	80fb      	strh	r3, [r7, #6]
 80067b6:	e013      	b.n	80067e0 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	3301      	adds	r3, #1
 80067bc:	4a17      	ldr	r2, [pc, #92]	; (800681c <LCD_init+0xd4>)
 80067be:	441a      	add	r2, r3
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	4916      	ldr	r1, [pc, #88]	; (800681c <LCD_init+0xd4>)
 80067c4:	5ccb      	ldrb	r3, [r1, r3]
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f7ff fcbf 	bl	800614c <LCD_WriteCommand>
    i += init_cmd[i]+2;
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	4a12      	ldr	r2, [pc, #72]	; (800681c <LCD_init+0xd4>)
 80067d2:	5cd3      	ldrb	r3, [r2, r3]
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	88fb      	ldrh	r3, [r7, #6]
 80067d8:	4413      	add	r3, r2
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3302      	adds	r3, #2
 80067de:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	2b4b      	cmp	r3, #75	; 0x4b
 80067e4:	d9e8      	bls.n	80067b8 <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 80067e6:	2000      	movs	r0, #0
 80067e8:	f008 ff2e 	bl	800f648 <UG_FillScreen>
  LCD_setPower(ENABLE);
 80067ec:	2001      	movs	r0, #1
 80067ee:	f7ff ff8d 	bl	800670c <LCD_setPower>
  UG_Update();
 80067f2:	f00a fb2f 	bl	8010e54 <UG_Update>
}
 80067f6:	bf00      	nop
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	48000400 	.word	0x48000400
 8006804:	200001e0 	.word	0x200001e0
 8006808:	200021e8 	.word	0x200021e8
 800680c:	08006651 	.word	0x08006651
 8006810:	08006539 	.word	0x08006539
 8006814:	080064c9 	.word	0x080064c9
 8006818:	080065a7 	.word	0x080065a7
 800681c:	08015f0c 	.word	0x08015f0c

08006820 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800682a:	2003      	movs	r0, #3
 800682c:	f002 fc80 	bl	8009130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006830:	200f      	movs	r0, #15
 8006832:	f000 f80d 	bl	8006850 <HAL_InitTick>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	71fb      	strb	r3, [r7, #7]
 8006840:	e001      	b.n	8006846 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006842:	f7fe fded 	bl	8005420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006846:	79fb      	ldrb	r3, [r7, #7]

}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800685c:	4b16      	ldr	r3, [pc, #88]	; (80068b8 <HAL_InitTick+0x68>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d022      	beq.n	80068aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006864:	4b15      	ldr	r3, [pc, #84]	; (80068bc <HAL_InitTick+0x6c>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	4b13      	ldr	r3, [pc, #76]	; (80068b8 <HAL_InitTick+0x68>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006870:	fbb1 f3f3 	udiv	r3, r1, r3
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	4618      	mov	r0, r3
 800687a:	f002 fc8c 	bl	8009196 <HAL_SYSTICK_Config>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10f      	bne.n	80068a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b0f      	cmp	r3, #15
 8006888:	d809      	bhi.n	800689e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800688a:	2200      	movs	r2, #0
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	f04f 30ff 	mov.w	r0, #4294967295
 8006892:	f002 fc58 	bl	8009146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006896:	4a0a      	ldr	r2, [pc, #40]	; (80068c0 <HAL_InitTick+0x70>)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	e007      	b.n	80068ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	73fb      	strb	r3, [r7, #15]
 80068a2:	e004      	b.n	80068ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	73fb      	strb	r3, [r7, #15]
 80068a8:	e001      	b.n	80068ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	200001f0 	.word	0x200001f0
 80068bc:	200001d8 	.word	0x200001d8
 80068c0:	200001ec 	.word	0x200001ec

080068c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068c8:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <HAL_IncTick+0x1c>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <HAL_IncTick+0x20>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4413      	add	r3, r2
 80068d2:	4a03      	ldr	r2, [pc, #12]	; (80068e0 <HAL_IncTick+0x1c>)
 80068d4:	6013      	str	r3, [r2, #0]
}
 80068d6:	bf00      	nop
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	2000225c 	.word	0x2000225c
 80068e4:	200001f0 	.word	0x200001f0

080068e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0
  return uwTick;
 80068ec:	4b03      	ldr	r3, [pc, #12]	; (80068fc <HAL_GetTick+0x14>)
 80068ee:	681b      	ldr	r3, [r3, #0]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	2000225c 	.word	0x2000225c

08006900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006908:	f7ff ffee 	bl	80068e8 <HAL_GetTick>
 800690c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d004      	beq.n	8006924 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800691a:	4b09      	ldr	r3, [pc, #36]	; (8006940 <HAL_Delay+0x40>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006924:	bf00      	nop
 8006926:	f7ff ffdf 	bl	80068e8 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	429a      	cmp	r2, r3
 8006934:	d8f7      	bhi.n	8006926 <HAL_Delay+0x26>
  {
  }
}
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	200001f0 	.word	0x200001f0

08006944 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	609a      	str	r2, [r3, #8]
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	609a      	str	r2, [r3, #8]
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3360      	adds	r3, #96	; 0x60
 80069be:	461a      	mov	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <LL_ADC_SetOffset+0x44>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	4313      	orrs	r3, r2
 80069dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80069e4:	bf00      	nop
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	03fff000 	.word	0x03fff000

080069f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3360      	adds	r3, #96	; 0x60
 8006a02:	461a      	mov	r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3360      	adds	r3, #96	; 0x60
 8006a30:	461a      	mov	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b087      	sub	sp, #28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3360      	adds	r3, #96	; 0x60
 8006a66:	461a      	mov	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3360      	adds	r3, #96	; 0x60
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006ab6:	bf00      	nop
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	615a      	str	r2, [r3, #20]
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b087      	sub	sp, #28
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3330      	adds	r3, #48	; 0x30
 8006b1e:	461a      	mov	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	0a1b      	lsrs	r3, r3, #8
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	f003 030c 	and.w	r3, r3, #12
 8006b2a:	4413      	add	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f003 031f 	and.w	r3, r3, #31
 8006b38:	211f      	movs	r1, #31
 8006b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	401a      	ands	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	0e9b      	lsrs	r3, r3, #26
 8006b46:	f003 011f 	and.w	r1, r3, #31
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f003 031f 	and.w	r3, r3, #31
 8006b50:	fa01 f303 	lsl.w	r3, r1, r3
 8006b54:	431a      	orrs	r2, r3
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b72:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3314      	adds	r3, #20
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	0e5b      	lsrs	r3, r3, #25
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	4413      	add	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	0d1b      	lsrs	r3, r3, #20
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	2107      	movs	r1, #7
 8006bba:	fa01 f303 	lsl.w	r3, r1, r3
 8006bbe:	43db      	mvns	r3, r3
 8006bc0:	401a      	ands	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	0d1b      	lsrs	r3, r3, #20
 8006bc6:	f003 031f 	and.w	r3, r3, #31
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	401a      	ands	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f003 0318 	and.w	r3, r3, #24
 8006c06:	4908      	ldr	r1, [pc, #32]	; (8006c28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006c08:	40d9      	lsrs	r1, r3
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	400b      	ands	r3, r1
 8006c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c12:	431a      	orrs	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	0007ffff 	.word	0x0007ffff

08006c2c <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	0d1b      	lsrs	r3, r3, #20
 8006c42:	f003 0103 	and.w	r1, r3, #3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f003 0201 	and.w	r2, r3, #1
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4403      	add	r3, r0
 8006c5a:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8006c66:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8006c6a:	43db      	mvns	r3, r3
 8006c6c:	401a      	ands	r2, r3
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	400b      	ands	r3, r1
 8006c74:	431a      	orrs	r2, r3
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8006c7a:	bf00      	nop
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b087      	sub	sp, #28
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	607a      	str	r2, [r7, #4]
 8006c92:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3320      	adds	r3, #32
 8006c98:	461a      	mov	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	0d1b      	lsrs	r3, r3, #20
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	f003 030c 	and.w	r3, r3, #12
 8006ca4:	4413      	add	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	0419      	lsls	r1, r3, #16
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8006cbe:	bf00      	nop
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 031f 	and.w	r3, r3, #31
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006d12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	6093      	str	r3, [r2, #8]
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d3a:	d101      	bne.n	8006d40 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e000      	b.n	8006d42 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006d5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d8a:	d101      	bne.n	8006d90 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006db2:	f043 0201 	orr.w	r2, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006dda:	f043 0202 	orr.w	r2, r3, #2
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d101      	bne.n	8006e06 <LL_ADC_IsEnabled+0x18>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <LL_ADC_IsEnabled+0x1a>
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d101      	bne.n	8006e2c <LL_ADC_IsDisableOngoing+0x18>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <LL_ADC_IsDisableOngoing+0x1a>
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e4e:	f043 0204 	orr.w	r2, r3, #4
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e76:	f043 0210 	orr.w	r2, r3, #16
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d101      	bne.n	8006ea2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ec4:	f043 0220 	orr.w	r2, r3, #32
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d101      	bne.n	8006ef0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2280      	movs	r2, #128	; 0x80
 8006f0a:	601a      	str	r2, [r3, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f26:	601a      	str	r2, [r3, #0]
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f42:	601a      	str	r2, [r3, #0]
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	605a      	str	r2, [r3, #4]
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	605a      	str	r2, [r3, #4]
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	605a      	str	r2, [r3, #4]
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	605a      	str	r2, [r3, #4]
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	605a      	str	r2, [r3, #4]
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	605a      	str	r2, [r3, #4]
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b089      	sub	sp, #36	; 0x24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e167      	b.n	80072fa <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fe fa15 	bl	8005468 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff fe68 	bl	8006d26 <LL_ADC_IsDeepPowerDownEnabled>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fe4e 	bl	8006d02 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff fe83 	bl	8006d76 <LL_ADC_IsInternalRegulatorEnabled>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d115      	bne.n	80070a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4618      	mov	r0, r3
 800707c:	f7ff fe67 	bl	8006d4e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007080:	4ba0      	ldr	r3, [pc, #640]	; (8007304 <HAL_ADC_Init+0x2f4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	099b      	lsrs	r3, r3, #6
 8007086:	4aa0      	ldr	r2, [pc, #640]	; (8007308 <HAL_ADC_Init+0x2f8>)
 8007088:	fba2 2303 	umull	r2, r3, r2, r3
 800708c:	099b      	lsrs	r3, r3, #6
 800708e:	3301      	adds	r3, #1
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007094:	e002      	b.n	800709c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3b01      	subs	r3, #1
 800709a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f9      	bne.n	8007096 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff fe65 	bl	8006d76 <LL_ADC_IsInternalRegulatorEnabled>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10d      	bne.n	80070ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b6:	f043 0210 	orr.w	r2, r3, #16
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c2:	f043 0201 	orr.w	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff fed9 	bl	8006e8a <LL_ADC_REG_IsConversionOngoing>
 80070d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f040 8100 	bne.w	80072e8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f040 80fc 	bne.w	80072e8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80070f8:	f043 0202 	orr.w	r2, r3, #2
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff fe72 	bl	8006dee <LL_ADC_IsEnabled>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d111      	bne.n	8007134 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007110:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007114:	f7ff fe6b 	bl	8006dee <LL_ADC_IsEnabled>
 8007118:	4604      	mov	r4, r0
 800711a:	487c      	ldr	r0, [pc, #496]	; (800730c <HAL_ADC_Init+0x2fc>)
 800711c:	f7ff fe67 	bl	8006dee <LL_ADC_IsEnabled>
 8007120:	4603      	mov	r3, r0
 8007122:	4323      	orrs	r3, r4
 8007124:	2b00      	cmp	r3, #0
 8007126:	d105      	bne.n	8007134 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4619      	mov	r1, r3
 800712e:	4878      	ldr	r0, [pc, #480]	; (8007310 <HAL_ADC_Init+0x300>)
 8007130:	f7ff fc08 	bl	8006944 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	7f5b      	ldrb	r3, [r3, #29]
 8007138:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800713e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8007144:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800714a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007152:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007154:	4313      	orrs	r3, r2
 8007156:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800715e:	2b01      	cmp	r3, #1
 8007160:	d106      	bne.n	8007170 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007166:	3b01      	subs	r3, #1
 8007168:	045b      	lsls	r3, r3, #17
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	4313      	orrs	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d009      	beq.n	800718c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	4313      	orrs	r3, r2
 800718a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	4b60      	ldr	r3, [pc, #384]	; (8007314 <HAL_ADC_Init+0x304>)
 8007194:	4013      	ands	r3, r2
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	69b9      	ldr	r1, [r7, #24]
 800719c:	430b      	orrs	r3, r1
 800719e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff fe8c 	bl	8006ed8 <LL_ADC_INJ_IsConversionOngoing>
 80071c0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d16d      	bne.n	80072a4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d16a      	bne.n	80072a4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80071d2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071da:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80071dc:	4313      	orrs	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ea:	f023 0302 	bic.w	r3, r3, #2
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	69b9      	ldr	r1, [r7, #24]
 80071f4:	430b      	orrs	r3, r1
 80071f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d017      	beq.n	8007230 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691a      	ldr	r2, [r3, #16]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800720e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007218:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800721c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6911      	ldr	r1, [r2, #16]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	430b      	orrs	r3, r1
 800722a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800722e:	e013      	b.n	8007258 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691a      	ldr	r2, [r3, #16]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800723e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007250:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007254:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800725e:	2b01      	cmp	r3, #1
 8007260:	d118      	bne.n	8007294 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800726c:	f023 0304 	bic.w	r3, r3, #4
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007278:	4311      	orrs	r1, r2
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800727e:	4311      	orrs	r1, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007284:	430a      	orrs	r2, r1
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0201 	orr.w	r2, r2, #1
 8007290:	611a      	str	r2, [r3, #16]
 8007292:	e007      	b.n	80072a4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691a      	ldr	r2, [r3, #16]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0201 	bic.w	r2, r2, #1
 80072a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d10c      	bne.n	80072c6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	f023 010f 	bic.w	r1, r3, #15
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	1e5a      	subs	r2, r3, #1
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30
 80072c4:	e007      	b.n	80072d6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 020f 	bic.w	r2, r2, #15
 80072d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072da:	f023 0303 	bic.w	r3, r3, #3
 80072de:	f043 0201 	orr.w	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80072e6:	e007      	b.n	80072f8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ec:	f043 0210 	orr.w	r2, r3, #16
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80072f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3724      	adds	r7, #36	; 0x24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd90      	pop	{r4, r7, pc}
 8007302:	bf00      	nop
 8007304:	200001d8 	.word	0x200001d8
 8007308:	053e2d63 	.word	0x053e2d63
 800730c:	50000100 	.word	0x50000100
 8007310:	50000300 	.word	0x50000300
 8007314:	fff04007 	.word	0xfff04007

08007318 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007320:	4893      	ldr	r0, [pc, #588]	; (8007570 <HAL_ADC_Start_IT+0x258>)
 8007322:	f7ff fcd2 	bl	8006cca <LL_ADC_GetMultimode>
 8007326:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f7ff fdac 	bl	8006e8a <LL_ADC_REG_IsConversionOngoing>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	f040 8113 	bne.w	8007560 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_ADC_Start_IT+0x30>
 8007344:	2302      	movs	r3, #2
 8007346:	e10e      	b.n	8007566 <HAL_ADC_Start_IT+0x24e>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 fb19 	bl	8008988 <ADC_Enable>
 8007356:	4603      	mov	r3, r0
 8007358:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f040 80fa 	bne.w	8007556 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007366:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800736a:	f023 0301 	bic.w	r3, r3, #1
 800736e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a7e      	ldr	r2, [pc, #504]	; (8007574 <HAL_ADC_Start_IT+0x25c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d002      	beq.n	8007386 <HAL_ADC_Start_IT+0x6e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	e001      	b.n	800738a <HAL_ADC_Start_IT+0x72>
 8007386:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	4293      	cmp	r3, r2
 8007390:	d002      	beq.n	8007398 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d105      	bne.n	80073a4 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d006      	beq.n	80073be <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b4:	f023 0206 	bic.w	r2, r3, #6
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	661a      	str	r2, [r3, #96]	; 0x60
 80073bc:	e002      	b.n	80073c4 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	221c      	movs	r2, #28
 80073ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 021c 	bic.w	r2, r2, #28
 80073e2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d108      	bne.n	80073fe <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0208 	orr.w	r2, r2, #8
 80073fa:	605a      	str	r2, [r3, #4]
          break;
 80073fc:	e008      	b.n	8007410 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0204 	orr.w	r2, r2, #4
 800740c:	605a      	str	r2, [r3, #4]
          break;
 800740e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007414:	2b00      	cmp	r3, #0
 8007416:	d107      	bne.n	8007428 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0210 	orr.w	r2, r2, #16
 8007426:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a51      	ldr	r2, [pc, #324]	; (8007574 <HAL_ADC_Start_IT+0x25c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d002      	beq.n	8007438 <HAL_ADC_Start_IT+0x120>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	e001      	b.n	800743c <HAL_ADC_Start_IT+0x124>
 8007438:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	4293      	cmp	r3, r2
 8007442:	d008      	beq.n	8007456 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2b05      	cmp	r3, #5
 800744e:	d002      	beq.n	8007456 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	2b09      	cmp	r3, #9
 8007454:	d13a      	bne.n	80074cc <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d02d      	beq.n	80074c0 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007468:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800746c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	2b08      	cmp	r3, #8
 800747a:	d110      	bne.n	800749e <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0220 	bic.w	r2, r2, #32
 800748a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800749a:	605a      	str	r2, [r3, #4]
              break;
 800749c:	e010      	b.n	80074c0 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0220 	orr.w	r2, r2, #32
 80074bc:	605a      	str	r2, [r3, #4]
              break;
 80074be:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff fcb8 	bl	8006e3a <LL_ADC_REG_StartConversion>
 80074ca:	e04b      	b.n	8007564 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a25      	ldr	r2, [pc, #148]	; (8007574 <HAL_ADC_Start_IT+0x25c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d002      	beq.n	80074e8 <HAL_ADC_Start_IT+0x1d0>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	e001      	b.n	80074ec <HAL_ADC_Start_IT+0x1d4>
 80074e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80074ec:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d034      	beq.n	8007564 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007502:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b08      	cmp	r3, #8
 8007510:	d110      	bne.n	8007534 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0220 	bic.w	r2, r2, #32
 8007520:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007530:	605a      	str	r2, [r3, #4]
              break;
 8007532:	e017      	b.n	8007564 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007542:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0220 	orr.w	r2, r2, #32
 8007552:	605a      	str	r2, [r3, #4]
              break;
 8007554:	e006      	b.n	8007564 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800755e:	e001      	b.n	8007564 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007560:	2302      	movs	r3, #2
 8007562:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007564:	7dfb      	ldrb	r3, [r7, #23]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	50000300 	.word	0x50000300
 8007574:	50000100 	.word	0x50000100

08007578 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007584:	4851      	ldr	r0, [pc, #324]	; (80076cc <HAL_ADC_Start_DMA+0x154>)
 8007586:	f7ff fba0 	bl	8006cca <LL_ADC_GetMultimode>
 800758a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff fc7a 	bl	8006e8a <LL_ADC_REG_IsConversionOngoing>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	f040 808f 	bne.w	80076bc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_ADC_Start_DMA+0x34>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e08a      	b.n	80076c2 <HAL_ADC_Start_DMA+0x14a>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b05      	cmp	r3, #5
 80075be:	d002      	beq.n	80075c6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d173      	bne.n	80076ae <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f001 f9de 	bl	8008988 <ADC_Enable>
 80075cc:	4603      	mov	r3, r0
 80075ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d166      	bne.n	80076a4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80075de:	f023 0301 	bic.w	r3, r3, #1
 80075e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a38      	ldr	r2, [pc, #224]	; (80076d0 <HAL_ADC_Start_DMA+0x158>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d002      	beq.n	80075fa <HAL_ADC_Start_DMA+0x82>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	e001      	b.n	80075fe <HAL_ADC_Start_DMA+0x86>
 80075fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	4293      	cmp	r3, r2
 8007604:	d002      	beq.n	800760c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d105      	bne.n	8007618 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007610:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d006      	beq.n	8007632 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007628:	f023 0206 	bic.w	r2, r3, #6
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	661a      	str	r2, [r3, #96]	; 0x60
 8007630:	e002      	b.n	8007638 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763c:	4a25      	ldr	r2, [pc, #148]	; (80076d4 <HAL_ADC_Start_DMA+0x15c>)
 800763e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007644:	4a24      	ldr	r2, [pc, #144]	; (80076d8 <HAL_ADC_Start_DMA+0x160>)
 8007646:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764c:	4a23      	ldr	r2, [pc, #140]	; (80076dc <HAL_ADC_Start_DMA+0x164>)
 800764e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	221c      	movs	r2, #28
 8007656:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0210 	orr.w	r2, r2, #16
 800766e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3340      	adds	r3, #64	; 0x40
 800768a:	4619      	mov	r1, r3
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f002 f83c 	bl	800970c <HAL_DMA_Start_IT>
 8007694:	4603      	mov	r3, r0
 8007696:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff fbcc 	bl	8006e3a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80076a2:	e00d      	b.n	80076c0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80076ac:	e008      	b.n	80076c0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80076ba:	e001      	b.n	80076c0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80076bc:	2302      	movs	r3, #2
 80076be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	50000300 	.word	0x50000300
 80076d0:	50000100 	.word	0x50000100
 80076d4:	08008b53 	.word	0x08008b53
 80076d8:	08008c2b 	.word	0x08008c2b
 80076dc:	08008c47 	.word	0x08008c47

080076e0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <HAL_ADC_Stop_DMA+0x16>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e051      	b.n	800779a <HAL_ADC_Stop_DMA+0xba>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80076fe:	2103      	movs	r1, #3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 f885 	bl	8008810 <ADC_ConversionStop>
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d13f      	bne.n	8007790 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68da      	ldr	r2, [r3, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0201 	bic.w	r2, r2, #1
 800771e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007724:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d10f      	bne.n	800774e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007732:	4618      	mov	r0, r3
 8007734:	f002 f865 	bl	8009802 <HAL_DMA_Abort>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d005      	beq.n	800774e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007746:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0210 	bic.w	r2, r2, #16
 800775c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d105      	bne.n	8007770 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 f995 	bl	8008a94 <ADC_Disable>
 800776a:	4603      	mov	r3, r0
 800776c:	73fb      	strb	r3, [r7, #15]
 800776e:	e002      	b.n	8007776 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f98f 	bl	8008a94 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d109      	bne.n	8007790 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007780:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007784:	f023 0301 	bic.w	r3, r3, #1
 8007788:	f043 0201 	orr.w	r2, r3, #1
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08a      	sub	sp, #40	; 0x28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80077c4:	2300      	movs	r3, #0
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80077d8:	4883      	ldr	r0, [pc, #524]	; (80079e8 <HAL_ADC_IRQHandler+0x22c>)
 80077da:	f7ff fa76 	bl	8006cca <LL_ADC_GetMultimode>
 80077de:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d017      	beq.n	800781a <HAL_ADC_IRQHandler+0x5e>
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d012      	beq.n	800781a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f8:	f003 0310 	and.w	r3, r3, #16
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d105      	bne.n	800780c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007804:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 fb11 	bl	8008e34 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2202      	movs	r2, #2
 8007818:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <HAL_ADC_IRQHandler+0x72>
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10a      	bne.n	8007844 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8085 	beq.w	8007944 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	f003 0308 	and.w	r3, r3, #8
 8007840:	2b00      	cmp	r3, #0
 8007842:	d07f      	beq.n	8007944 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	2b00      	cmp	r3, #0
 800784e:	d105      	bne.n	800785c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007854:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff f941 	bl	8006ae8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d064      	beq.n	8007936 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a5e      	ldr	r2, [pc, #376]	; (80079ec <HAL_ADC_IRQHandler+0x230>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d002      	beq.n	800787c <HAL_ADC_IRQHandler+0xc0>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	e001      	b.n	8007880 <HAL_ADC_IRQHandler+0xc4>
 800787c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6812      	ldr	r2, [r2, #0]
 8007884:	4293      	cmp	r3, r2
 8007886:	d008      	beq.n	800789a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d005      	beq.n	800789a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2b05      	cmp	r3, #5
 8007892:	d002      	beq.n	800789a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b09      	cmp	r3, #9
 8007898:	d104      	bne.n	80078a4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	623b      	str	r3, [r7, #32]
 80078a2:	e00d      	b.n	80078c0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a50      	ldr	r2, [pc, #320]	; (80079ec <HAL_ADC_IRQHandler+0x230>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d002      	beq.n	80078b4 <HAL_ADC_IRQHandler+0xf8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	e001      	b.n	80078b8 <HAL_ADC_IRQHandler+0xfc>
 80078b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80078b8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d135      	bne.n	8007936 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d12e      	bne.n	8007936 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff fad4 	bl	8006e8a <LL_ADC_REG_IsConversionOngoing>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d11a      	bne.n	800791e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 020c 	bic.w	r2, r2, #12
 80078f6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d112      	bne.n	8007936 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007914:	f043 0201 	orr.w	r2, r3, #1
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	65da      	str	r2, [r3, #92]	; 0x5c
 800791c:	e00b      	b.n	8007936 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007922:	f043 0210 	orr.w	r2, r3, #16
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800792e:	f043 0201 	orr.w	r2, r3, #1
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7fc f8a0 	bl	8003a7c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	220c      	movs	r2, #12
 8007942:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <HAL_ADC_IRQHandler+0x19c>
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	f003 0320 	and.w	r3, r3, #32
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10b      	bne.n	8007970 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 809e 	beq.w	8007aa0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 8098 	beq.w	8007aa0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007974:	f003 0310 	and.w	r3, r3, #16
 8007978:	2b00      	cmp	r3, #0
 800797a:	d105      	bne.n	8007988 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007980:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff f8ea 	bl	8006b66 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007992:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff f8a5 	bl	8006ae8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800799e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a11      	ldr	r2, [pc, #68]	; (80079ec <HAL_ADC_IRQHandler+0x230>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d002      	beq.n	80079b0 <HAL_ADC_IRQHandler+0x1f4>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	e001      	b.n	80079b4 <HAL_ADC_IRQHandler+0x1f8>
 80079b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d008      	beq.n	80079ce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b06      	cmp	r3, #6
 80079c6:	d002      	beq.n	80079ce <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2b07      	cmp	r3, #7
 80079cc:	d104      	bne.n	80079d8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	623b      	str	r3, [r7, #32]
 80079d6:	e011      	b.n	80079fc <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a03      	ldr	r2, [pc, #12]	; (80079ec <HAL_ADC_IRQHandler+0x230>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d006      	beq.n	80079f0 <HAL_ADC_IRQHandler+0x234>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	e005      	b.n	80079f4 <HAL_ADC_IRQHandler+0x238>
 80079e8:	50000300 	.word	0x50000300
 80079ec:	50000100 	.word	0x50000100
 80079f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80079f4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d047      	beq.n	8007a92 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d007      	beq.n	8007a1c <HAL_ADC_IRQHandler+0x260>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d03f      	beq.n	8007a92 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d13a      	bne.n	8007a92 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a26:	2b40      	cmp	r3, #64	; 0x40
 8007a28:	d133      	bne.n	8007a92 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d12e      	bne.n	8007a92 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff fa4d 	bl	8006ed8 <LL_ADC_INJ_IsConversionOngoing>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11a      	bne.n	8007a7a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a52:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d112      	bne.n	8007a92 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a70:	f043 0201 	orr.w	r2, r3, #1
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a78:	e00b      	b.n	8007a92 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a7e:	f043 0210 	orr.w	r2, r3, #16
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a8a:	f043 0201 	orr.w	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 f9a6 	bl	8008de4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2260      	movs	r2, #96	; 0x60
 8007a9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d011      	beq.n	8007ace <HAL_ADC_IRQHandler+0x312>
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00c      	beq.n	8007ace <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7fc f825 	bl	8003b10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2280      	movs	r2, #128	; 0x80
 8007acc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d012      	beq.n	8007afe <HAL_ADC_IRQHandler+0x342>
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00d      	beq.n	8007afe <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 f98c 	bl	8008e0c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007afc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d012      	beq.n	8007b2e <HAL_ADC_IRQHandler+0x372>
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00d      	beq.n	8007b2e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 f97e 	bl	8008e20 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d036      	beq.n	8007ba6 <HAL_ADC_IRQHandler+0x3ea>
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d031      	beq.n	8007ba6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b4e:	e014      	b.n	8007b7a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d008      	beq.n	8007b68 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007b56:	4825      	ldr	r0, [pc, #148]	; (8007bec <HAL_ADC_IRQHandler+0x430>)
 8007b58:	f7ff f8c5 	bl	8006ce6 <LL_ADC_GetMultiDMATransfer>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00b      	beq.n	8007b7a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007b62:	2301      	movs	r3, #1
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
 8007b66:	e008      	b.n	8007b7a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007b76:	2301      	movs	r3, #1
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10e      	bne.n	8007b9e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b90:	f043 0202 	orr.w	r2, r3, #2
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f833 	bl	8007c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2210      	movs	r2, #16
 8007ba4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d018      	beq.n	8007be2 <HAL_ADC_IRQHandler+0x426>
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d013      	beq.n	8007be2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bbe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bca:	f043 0208 	orr.w	r2, r3, #8
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007bda:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f90b 	bl	8008df8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007be2:	bf00      	nop
 8007be4:	3728      	adds	r7, #40	; 0x28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	50000300 	.word	0x50000300

08007bf0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b0b6      	sub	sp, #216	; 0xd8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d101      	bne.n	8007c3a <HAL_ADC_ConfigChannel+0x22>
 8007c36:	2302      	movs	r3, #2
 8007c38:	e3c8      	b.n	80083cc <HAL_ADC_ConfigChannel+0x7b4>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff f91f 	bl	8006e8a <LL_ADC_REG_IsConversionOngoing>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f040 83ad 	bne.w	80083ae <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6859      	ldr	r1, [r3, #4]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	461a      	mov	r2, r3
 8007c62:	f7fe ff54 	bl	8006b0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff f90d 	bl	8006e8a <LL_ADC_REG_IsConversionOngoing>
 8007c70:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff f92d 	bl	8006ed8 <LL_ADC_INJ_IsConversionOngoing>
 8007c7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007c82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f040 81d9 	bne.w	800803e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f040 81d4 	bne.w	800803e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c9e:	d10f      	bne.n	8007cc0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	4619      	mov	r1, r3
 8007cac:	f7fe ff6e 	bl	8006b8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fe ff02 	bl	8006ac2 <LL_ADC_SetSamplingTimeCommonConfig>
 8007cbe:	e00e      	b.n	8007cde <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6818      	ldr	r0, [r3, #0]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	6819      	ldr	r1, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	f7fe ff5d 	bl	8006b8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fe fef2 	bl	8006ac2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	695a      	ldr	r2, [r3, #20]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	08db      	lsrs	r3, r3, #3
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d022      	beq.n	8007d46 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6818      	ldr	r0, [r3, #0]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	6919      	ldr	r1, [r3, #16]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d10:	f7fe fe4c 	bl	80069ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6818      	ldr	r0, [r3, #0]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	6919      	ldr	r1, [r3, #16]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	461a      	mov	r2, r3
 8007d22:	f7fe fe98 	bl	8006a56 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d102      	bne.n	8007d3c <HAL_ADC_ConfigChannel+0x124>
 8007d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d3a:	e000      	b.n	8007d3e <HAL_ADC_ConfigChannel+0x126>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f7fe fea4 	bl	8006a8c <LL_ADC_SetOffsetSaturation>
 8007d44:	e17b      	b.n	800803e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe fe51 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <HAL_ADC_ConfigChannel+0x15a>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2100      	movs	r1, #0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe fe46 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	0e9b      	lsrs	r3, r3, #26
 8007d6c:	f003 021f 	and.w	r2, r3, #31
 8007d70:	e01e      	b.n	8007db0 <HAL_ADC_ConfigChannel+0x198>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fe3b 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d88:	fa93 f3a3 	rbit	r3, r3
 8007d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007d90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007d98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8007da0:	2320      	movs	r3, #32
 8007da2:	e004      	b.n	8007dae <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8007da4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007da8:	fab3 f383 	clz	r3, r3
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d105      	bne.n	8007dc8 <HAL_ADC_ConfigChannel+0x1b0>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	0e9b      	lsrs	r3, r3, #26
 8007dc2:	f003 031f 	and.w	r3, r3, #31
 8007dc6:	e018      	b.n	8007dfa <HAL_ADC_ConfigChannel+0x1e2>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007dd4:	fa93 f3a3 	rbit	r3, r3
 8007dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8007dec:	2320      	movs	r3, #32
 8007dee:	e004      	b.n	8007dfa <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007df0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007df4:	fab3 f383 	clz	r3, r3
 8007df8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d106      	bne.n	8007e0c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2200      	movs	r2, #0
 8007e04:	2100      	movs	r1, #0
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe fe0a 	bl	8006a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2101      	movs	r1, #1
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe fdee 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10a      	bne.n	8007e38 <HAL_ADC_ConfigChannel+0x220>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2101      	movs	r1, #1
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe fde3 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	0e9b      	lsrs	r3, r3, #26
 8007e32:	f003 021f 	and.w	r2, r3, #31
 8007e36:	e01e      	b.n	8007e76 <HAL_ADC_ConfigChannel+0x25e>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fdd8 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e4e:	fa93 f3a3 	rbit	r3, r3
 8007e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8007e66:	2320      	movs	r3, #32
 8007e68:	e004      	b.n	8007e74 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8007e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e6e:	fab3 f383 	clz	r3, r3
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d105      	bne.n	8007e8e <HAL_ADC_ConfigChannel+0x276>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	0e9b      	lsrs	r3, r3, #26
 8007e88:	f003 031f 	and.w	r3, r3, #31
 8007e8c:	e018      	b.n	8007ec0 <HAL_ADC_ConfigChannel+0x2a8>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e9a:	fa93 f3a3 	rbit	r3, r3
 8007e9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007ea2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007eaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8007eb2:	2320      	movs	r3, #32
 8007eb4:	e004      	b.n	8007ec0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8007eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eba:	fab3 f383 	clz	r3, r3
 8007ebe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d106      	bne.n	8007ed2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2101      	movs	r1, #1
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fe fda7 	bl	8006a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2102      	movs	r1, #2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe fd8b 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10a      	bne.n	8007efe <HAL_ADC_ConfigChannel+0x2e6>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2102      	movs	r1, #2
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe fd80 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	0e9b      	lsrs	r3, r3, #26
 8007ef8:	f003 021f 	and.w	r2, r3, #31
 8007efc:	e01e      	b.n	8007f3c <HAL_ADC_ConfigChannel+0x324>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2102      	movs	r1, #2
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fd75 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f14:	fa93 f3a3 	rbit	r3, r3
 8007f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8007f2c:	2320      	movs	r3, #32
 8007f2e:	e004      	b.n	8007f3a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f34:	fab3 f383 	clz	r3, r3
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d105      	bne.n	8007f54 <HAL_ADC_ConfigChannel+0x33c>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	0e9b      	lsrs	r3, r3, #26
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	e016      	b.n	8007f82 <HAL_ADC_ConfigChannel+0x36a>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f60:	fa93 f3a3 	rbit	r3, r3
 8007f64:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007f66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007f74:	2320      	movs	r3, #32
 8007f76:	e004      	b.n	8007f82 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f7c:	fab3 f383 	clz	r3, r3
 8007f80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d106      	bne.n	8007f94 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2102      	movs	r1, #2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe fd46 	bl	8006a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2103      	movs	r1, #3
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe fd2a 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <HAL_ADC_ConfigChannel+0x3a8>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2103      	movs	r1, #3
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe fd1f 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	0e9b      	lsrs	r3, r3, #26
 8007fba:	f003 021f 	and.w	r2, r3, #31
 8007fbe:	e017      	b.n	8007ff0 <HAL_ADC_ConfigChannel+0x3d8>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2103      	movs	r1, #3
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fe fd14 	bl	80069f4 <LL_ADC_GetOffsetChannel>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fd2:	fa93 f3a3 	rbit	r3, r3
 8007fd6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fda:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8007fe2:	2320      	movs	r3, #32
 8007fe4:	e003      	b.n	8007fee <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8007fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fe8:	fab3 f383 	clz	r3, r3
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d105      	bne.n	8008008 <HAL_ADC_ConfigChannel+0x3f0>
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	0e9b      	lsrs	r3, r3, #26
 8008002:	f003 031f 	and.w	r3, r3, #31
 8008006:	e011      	b.n	800802c <HAL_ADC_ConfigChannel+0x414>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800800e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008010:	fa93 f3a3 	rbit	r3, r3
 8008014:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008018:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800801a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8008020:	2320      	movs	r3, #32
 8008022:	e003      	b.n	800802c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8008024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008026:	fab3 f383 	clz	r3, r3
 800802a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800802c:	429a      	cmp	r2, r3
 800802e:	d106      	bne.n	800803e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2200      	movs	r2, #0
 8008036:	2103      	movs	r1, #3
 8008038:	4618      	mov	r0, r3
 800803a:	f7fe fcf1 	bl	8006a20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe fed3 	bl	8006dee <LL_ADC_IsEnabled>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	f040 8140 	bne.w	80082d0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	6819      	ldr	r1, [r3, #0]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	461a      	mov	r2, r3
 800805e:	f7fe fdc1 	bl	8006be4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	4a8f      	ldr	r2, [pc, #572]	; (80082a4 <HAL_ADC_ConfigChannel+0x68c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	f040 8131 	bne.w	80082d0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10b      	bne.n	8008096 <HAL_ADC_ConfigChannel+0x47e>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	0e9b      	lsrs	r3, r3, #26
 8008084:	3301      	adds	r3, #1
 8008086:	f003 031f 	and.w	r3, r3, #31
 800808a:	2b09      	cmp	r3, #9
 800808c:	bf94      	ite	ls
 800808e:	2301      	movls	r3, #1
 8008090:	2300      	movhi	r3, #0
 8008092:	b2db      	uxtb	r3, r3
 8008094:	e019      	b.n	80080ca <HAL_ADC_ConfigChannel+0x4b2>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800809c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800809e:	fa93 f3a3 	rbit	r3, r3
 80080a2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80080a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080a6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80080a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80080ae:	2320      	movs	r3, #32
 80080b0:	e003      	b.n	80080ba <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80080b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080b4:	fab3 f383 	clz	r3, r3
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	3301      	adds	r3, #1
 80080bc:	f003 031f 	and.w	r3, r3, #31
 80080c0:	2b09      	cmp	r3, #9
 80080c2:	bf94      	ite	ls
 80080c4:	2301      	movls	r3, #1
 80080c6:	2300      	movhi	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d079      	beq.n	80081c2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d107      	bne.n	80080ea <HAL_ADC_ConfigChannel+0x4d2>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	0e9b      	lsrs	r3, r3, #26
 80080e0:	3301      	adds	r3, #1
 80080e2:	069b      	lsls	r3, r3, #26
 80080e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80080e8:	e015      	b.n	8008116 <HAL_ADC_ConfigChannel+0x4fe>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f2:	fa93 f3a3 	rbit	r3, r3
 80080f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80080f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80080fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8008102:	2320      	movs	r3, #32
 8008104:	e003      	b.n	800810e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8008106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008108:	fab3 f383 	clz	r3, r3
 800810c:	b2db      	uxtb	r3, r3
 800810e:	3301      	adds	r3, #1
 8008110:	069b      	lsls	r3, r3, #26
 8008112:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <HAL_ADC_ConfigChannel+0x51e>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	0e9b      	lsrs	r3, r3, #26
 8008128:	3301      	adds	r3, #1
 800812a:	f003 031f 	and.w	r3, r3, #31
 800812e:	2101      	movs	r1, #1
 8008130:	fa01 f303 	lsl.w	r3, r1, r3
 8008134:	e017      	b.n	8008166 <HAL_ADC_ConfigChannel+0x54e>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800813c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800813e:	fa93 f3a3 	rbit	r3, r3
 8008142:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008146:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800814e:	2320      	movs	r3, #32
 8008150:	e003      	b.n	800815a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8008152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008154:	fab3 f383 	clz	r3, r3
 8008158:	b2db      	uxtb	r3, r3
 800815a:	3301      	adds	r3, #1
 800815c:	f003 031f 	and.w	r3, r3, #31
 8008160:	2101      	movs	r1, #1
 8008162:	fa01 f303 	lsl.w	r3, r1, r3
 8008166:	ea42 0103 	orr.w	r1, r2, r3
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10a      	bne.n	800818c <HAL_ADC_ConfigChannel+0x574>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	0e9b      	lsrs	r3, r3, #26
 800817c:	3301      	adds	r3, #1
 800817e:	f003 021f 	and.w	r2, r3, #31
 8008182:	4613      	mov	r3, r2
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	4413      	add	r3, r2
 8008188:	051b      	lsls	r3, r3, #20
 800818a:	e018      	b.n	80081be <HAL_ADC_ConfigChannel+0x5a6>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	fa93 f3a3 	rbit	r3, r3
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800819a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800819e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80081a4:	2320      	movs	r3, #32
 80081a6:	e003      	b.n	80081b0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80081a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081aa:	fab3 f383 	clz	r3, r3
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	3301      	adds	r3, #1
 80081b2:	f003 021f 	and.w	r2, r3, #31
 80081b6:	4613      	mov	r3, r2
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	4413      	add	r3, r2
 80081bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081be:	430b      	orrs	r3, r1
 80081c0:	e081      	b.n	80082c6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d107      	bne.n	80081de <HAL_ADC_ConfigChannel+0x5c6>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	0e9b      	lsrs	r3, r3, #26
 80081d4:	3301      	adds	r3, #1
 80081d6:	069b      	lsls	r3, r3, #26
 80081d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80081dc:	e015      	b.n	800820a <HAL_ADC_ConfigChannel+0x5f2>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e6:	fa93 f3a3 	rbit	r3, r3
 80081ea:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80081f6:	2320      	movs	r3, #32
 80081f8:	e003      	b.n	8008202 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	fab3 f383 	clz	r3, r3
 8008200:	b2db      	uxtb	r3, r3
 8008202:	3301      	adds	r3, #1
 8008204:	069b      	lsls	r3, r3, #26
 8008206:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008212:	2b00      	cmp	r3, #0
 8008214:	d109      	bne.n	800822a <HAL_ADC_ConfigChannel+0x612>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	0e9b      	lsrs	r3, r3, #26
 800821c:	3301      	adds	r3, #1
 800821e:	f003 031f 	and.w	r3, r3, #31
 8008222:	2101      	movs	r1, #1
 8008224:	fa01 f303 	lsl.w	r3, r1, r3
 8008228:	e017      	b.n	800825a <HAL_ADC_ConfigChannel+0x642>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	fa93 f3a3 	rbit	r3, r3
 8008236:	61fb      	str	r3, [r7, #28]
  return result;
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8008242:	2320      	movs	r3, #32
 8008244:	e003      	b.n	800824e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	fab3 f383 	clz	r3, r3
 800824c:	b2db      	uxtb	r3, r3
 800824e:	3301      	adds	r3, #1
 8008250:	f003 031f 	and.w	r3, r3, #31
 8008254:	2101      	movs	r1, #1
 8008256:	fa01 f303 	lsl.w	r3, r1, r3
 800825a:	ea42 0103 	orr.w	r1, r2, r3
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10d      	bne.n	8008286 <HAL_ADC_ConfigChannel+0x66e>
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	0e9b      	lsrs	r3, r3, #26
 8008270:	3301      	adds	r3, #1
 8008272:	f003 021f 	and.w	r2, r3, #31
 8008276:	4613      	mov	r3, r2
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	4413      	add	r3, r2
 800827c:	3b1e      	subs	r3, #30
 800827e:	051b      	lsls	r3, r3, #20
 8008280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008284:	e01e      	b.n	80082c4 <HAL_ADC_ConfigChannel+0x6ac>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	fa93 f3a3 	rbit	r3, r3
 8008292:	613b      	str	r3, [r7, #16]
  return result;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800829e:	2320      	movs	r3, #32
 80082a0:	e006      	b.n	80082b0 <HAL_ADC_ConfigChannel+0x698>
 80082a2:	bf00      	nop
 80082a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	fab3 f383 	clz	r3, r3
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	3301      	adds	r3, #1
 80082b2:	f003 021f 	and.w	r2, r3, #31
 80082b6:	4613      	mov	r3, r2
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	4413      	add	r3, r2
 80082bc:	3b1e      	subs	r3, #30
 80082be:	051b      	lsls	r3, r3, #20
 80082c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082ca:	4619      	mov	r1, r3
 80082cc:	f7fe fc5e 	bl	8006b8c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4b3f      	ldr	r3, [pc, #252]	; (80083d4 <HAL_ADC_ConfigChannel+0x7bc>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d071      	beq.n	80083c0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80082dc:	483e      	ldr	r0, [pc, #248]	; (80083d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80082de:	f7fe fb57 	bl	8006990 <LL_ADC_GetCommonPathInternalCh>
 80082e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a3c      	ldr	r2, [pc, #240]	; (80083dc <HAL_ADC_ConfigChannel+0x7c4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d004      	beq.n	80082fa <HAL_ADC_ConfigChannel+0x6e2>
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a3a      	ldr	r2, [pc, #232]	; (80083e0 <HAL_ADC_ConfigChannel+0x7c8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d127      	bne.n	800834a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80082fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d121      	bne.n	800834a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800830e:	d157      	bne.n	80083c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008310:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008314:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008318:	4619      	mov	r1, r3
 800831a:	482f      	ldr	r0, [pc, #188]	; (80083d8 <HAL_ADC_ConfigChannel+0x7c0>)
 800831c:	f7fe fb25 	bl	800696a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008320:	4b30      	ldr	r3, [pc, #192]	; (80083e4 <HAL_ADC_ConfigChannel+0x7cc>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	099b      	lsrs	r3, r3, #6
 8008326:	4a30      	ldr	r2, [pc, #192]	; (80083e8 <HAL_ADC_ConfigChannel+0x7d0>)
 8008328:	fba2 2303 	umull	r2, r3, r2, r3
 800832c:	099b      	lsrs	r3, r3, #6
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	4613      	mov	r3, r2
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800833a:	e002      	b.n	8008342 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3b01      	subs	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1f9      	bne.n	800833c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008348:	e03a      	b.n	80083c0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a27      	ldr	r2, [pc, #156]	; (80083ec <HAL_ADC_ConfigChannel+0x7d4>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d113      	bne.n	800837c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10d      	bne.n	800837c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a22      	ldr	r2, [pc, #136]	; (80083f0 <HAL_ADC_ConfigChannel+0x7d8>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d02a      	beq.n	80083c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800836a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800836e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008372:	4619      	mov	r1, r3
 8008374:	4818      	ldr	r0, [pc, #96]	; (80083d8 <HAL_ADC_ConfigChannel+0x7c0>)
 8008376:	f7fe faf8 	bl	800696a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800837a:	e021      	b.n	80083c0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a1c      	ldr	r2, [pc, #112]	; (80083f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d11c      	bne.n	80083c0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800838a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d116      	bne.n	80083c0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a16      	ldr	r2, [pc, #88]	; (80083f0 <HAL_ADC_ConfigChannel+0x7d8>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d011      	beq.n	80083c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800839c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083a4:	4619      	mov	r1, r3
 80083a6:	480c      	ldr	r0, [pc, #48]	; (80083d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80083a8:	f7fe fadf 	bl	800696a <LL_ADC_SetCommonPathInternalCh>
 80083ac:	e008      	b.n	80083c0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b2:	f043 0220 	orr.w	r2, r3, #32
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80083c8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	37d8      	adds	r7, #216	; 0xd8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	80080000 	.word	0x80080000
 80083d8:	50000300 	.word	0x50000300
 80083dc:	c3210000 	.word	0xc3210000
 80083e0:	90c00010 	.word	0x90c00010
 80083e4:	200001d8 	.word	0x200001d8
 80083e8:	053e2d63 	.word	0x053e2d63
 80083ec:	c7520000 	.word	0xc7520000
 80083f0:	50000100 	.word	0x50000100
 80083f4:	cb840000 	.word	0xcb840000

080083f8 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08e      	sub	sp, #56	; 0x38
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008410:	d003      	beq.n	800841a <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008416:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_ADC_AnalogWDGConfig+0x30>
 8008424:	2302      	movs	r3, #2
 8008426:	e1ea      	b.n	80087fe <HAL_ADC_AnalogWDGConfig+0x406>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fd28 	bl	8006e8a <LL_ADC_REG_IsConversionOngoing>
 800843a:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe fd49 	bl	8006ed8 <LL_ADC_INJ_IsConversionOngoing>
 8008446:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	2b00      	cmp	r3, #0
 800844c:	f040 8175 	bne.w	800873a <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	2b00      	cmp	r3, #0
 8008454:	f040 8171 	bne.w	800873a <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a90      	ldr	r2, [pc, #576]	; (80086a0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800845e:	4293      	cmp	r3, r2
 8008460:	f040 808d 	bne.w	800857e <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800846c:	d034      	beq.n	80084d8 <HAL_ADC_AnalogWDGConfig+0xe0>
 800846e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8008472:	d856      	bhi.n	8008522 <HAL_ADC_AnalogWDGConfig+0x12a>
 8008474:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008478:	d04b      	beq.n	8008512 <HAL_ADC_AnalogWDGConfig+0x11a>
 800847a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800847e:	d850      	bhi.n	8008522 <HAL_ADC_AnalogWDGConfig+0x12a>
 8008480:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008484:	d01b      	beq.n	80084be <HAL_ADC_AnalogWDGConfig+0xc6>
 8008486:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800848a:	d84a      	bhi.n	8008522 <HAL_ADC_AnalogWDGConfig+0x12a>
 800848c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008490:	d037      	beq.n	8008502 <HAL_ADC_AnalogWDGConfig+0x10a>
 8008492:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008496:	d844      	bhi.n	8008522 <HAL_ADC_AnalogWDGConfig+0x12a>
 8008498:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800849c:	d029      	beq.n	80084f2 <HAL_ADC_AnalogWDGConfig+0xfa>
 800849e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084a2:	d13e      	bne.n	8008522 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084b0:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80084b4:	461a      	mov	r2, r3
 80084b6:	497a      	ldr	r1, [pc, #488]	; (80086a0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80084b8:	f7fe fbb8 	bl	8006c2c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 80084bc:	e039      	b.n	8008532 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084ca:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 80084ce:	461a      	mov	r2, r3
 80084d0:	4973      	ldr	r1, [pc, #460]	; (80086a0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80084d2:	f7fe fbab 	bl	8006c2c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 80084d6:	e02c      	b.n	8008532 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084e4:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 80084e8:	461a      	mov	r2, r3
 80084ea:	496d      	ldr	r1, [pc, #436]	; (80086a0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80084ec:	f7fe fb9e 	bl	8006c2c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80084f0:	e01f      	b.n	8008532 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a6b      	ldr	r2, [pc, #428]	; (80086a4 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 80084f8:	4969      	ldr	r1, [pc, #420]	; (80086a0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe fb96 	bl	8006c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008500:	e017      	b.n	8008532 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a68      	ldr	r2, [pc, #416]	; (80086a8 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8008508:	4965      	ldr	r1, [pc, #404]	; (80086a0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800850a:	4618      	mov	r0, r3
 800850c:	f7fe fb8e 	bl	8006c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008510:	e00f      	b.n	8008532 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a65      	ldr	r2, [pc, #404]	; (80086ac <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8008518:	4961      	ldr	r1, [pc, #388]	; (80086a0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fb86 	bl	8006c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008520:	e007      	b.n	8008532 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2200      	movs	r2, #0
 8008528:	495d      	ldr	r1, [pc, #372]	; (80086a0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800852a:	4618      	mov	r0, r3
 800852c:	f7fe fb7e 	bl	8006c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008530:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	699a      	ldr	r2, [r3, #24]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800854c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fcd0 	bl	8006efe <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	7b1b      	ldrb	r3, [r3, #12]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d105      	bne.n	8008572 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fcf0 	bl	8006f50 <LL_ADC_EnableIT_AWD1>
 8008570:	e0e3      	b.n	800873a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe fd1a 	bl	8006fb0 <LL_ADC_DisableIT_AWD1>
 800857c:	e0dd      	b.n	800873a <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8008586:	d01d      	beq.n	80085c4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8008588:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800858c:	f200 8092 	bhi.w	80086b4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8008590:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008594:	d07b      	beq.n	800868e <HAL_ADC_AnalogWDGConfig+0x296>
 8008596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800859a:	f200 808b 	bhi.w	80086b4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800859e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80085a2:	d00f      	beq.n	80085c4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80085a4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80085a8:	f200 8084 	bhi.w	80086b4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80085ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085b0:	d06d      	beq.n	800868e <HAL_ADC_AnalogWDGConfig+0x296>
 80085b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085b6:	d87d      	bhi.n	80086b4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80085b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085bc:	d067      	beq.n	800868e <HAL_ADC_AnalogWDGConfig+0x296>
 80085be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80085c2:	d177      	bne.n	80086b4 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a39      	ldr	r2, [pc, #228]	; (80086b0 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d12f      	bne.n	800862e <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d108      	bne.n	80085ec <HAL_ADC_AnalogWDGConfig+0x1f4>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	0e9b      	lsrs	r3, r3, #26
 80085e0:	f003 031f 	and.w	r3, r3, #31
 80085e4:	2201      	movs	r2, #1
 80085e6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ea:	e016      	b.n	800861a <HAL_ADC_AnalogWDGConfig+0x222>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	fa93 f3a3 	rbit	r3, r3
 80085f8:	61bb      	str	r3, [r7, #24]
  return result;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8008604:	2320      	movs	r3, #32
 8008606:	e003      	b.n	8008610 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	fab3 f383 	clz	r3, r3
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 031f 	and.w	r3, r3, #31
 8008614:	2201      	movs	r2, #1
 8008616:	fa02 f303 	lsl.w	r3, r2, r3
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6812      	ldr	r2, [r2, #0]
 800861e:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	430b      	orrs	r3, r1
 8008628:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 800862c:	e04b      	b.n	80086c6 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008636:	2b00      	cmp	r3, #0
 8008638:	d108      	bne.n	800864c <HAL_ADC_AnalogWDGConfig+0x254>
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	0e9b      	lsrs	r3, r3, #26
 8008640:	f003 031f 	and.w	r3, r3, #31
 8008644:	2201      	movs	r2, #1
 8008646:	fa02 f303 	lsl.w	r3, r2, r3
 800864a:	e016      	b.n	800867a <HAL_ADC_AnalogWDGConfig+0x282>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	fa93 f3a3 	rbit	r3, r3
 8008658:	60fb      	str	r3, [r7, #12]
  return result;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8008664:	2320      	movs	r3, #32
 8008666:	e003      	b.n	8008670 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	fab3 f383 	clz	r3, r3
 800866e:	b2db      	uxtb	r3, r3
 8008670:	f003 031f 	and.w	r3, r3, #31
 8008674:	2201      	movs	r2, #1
 8008676:	fa02 f303 	lsl.w	r3, r2, r3
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	430b      	orrs	r3, r1
 8008688:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 800868c:	e01b      	b.n	80086c6 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8008696:	4a05      	ldr	r2, [pc, #20]	; (80086ac <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8008698:	4619      	mov	r1, r3
 800869a:	f7fe fac7 	bl	8006c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800869e:	e012      	b.n	80086c6 <HAL_ADC_AnalogWDGConfig+0x2ce>
 80086a0:	7dc00000 	.word	0x7dc00000
 80086a4:	0087ffff 	.word	0x0087ffff
 80086a8:	0107ffff 	.word	0x0107ffff
 80086ac:	0187ffff 	.word	0x0187ffff
 80086b0:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6818      	ldr	r0, [r3, #0]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2200      	movs	r2, #0
 80086be:	4619      	mov	r1, r3
 80086c0:	f7fe fab4 	bl	8006c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80086c4:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a4f      	ldr	r2, [pc, #316]	; (8008808 <HAL_ADC_AnalogWDGConfig+0x410>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d11a      	bne.n	8008706 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fe fc19 	bl	8006f18 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	7b1b      	ldrb	r3, [r3, #12]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d105      	bne.n	80086fa <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe fc3c 	bl	8006f70 <LL_ADC_EnableIT_AWD2>
 80086f8:	e01f      	b.n	800873a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fc66 	bl	8006fd0 <LL_ADC_DisableIT_AWD2>
 8008704:	e019      	b.n	800873a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fc0c 	bl	8006f34 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	7b1b      	ldrb	r3, [r3, #12]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d105      	bne.n	8008730 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe fc31 	bl	8006f90 <LL_ADC_EnableIT_AWD3>
 800872e:	e004      	b.n	800873a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4618      	mov	r0, r3
 8008736:	f7fe fc5b 	bl	8006ff0 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a33      	ldr	r2, [pc, #204]	; (800880c <HAL_ADC_AnalogWDGConfig+0x414>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d118      	bne.n	8008776 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	691a      	ldr	r2, [r3, #16]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	08db      	lsrs	r3, r3, #3
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	fa02 f303 	lsl.w	r3, r2, r3
 800875a:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	695a      	ldr	r2, [r3, #20]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	08db      	lsrs	r3, r3, #3
 8008768:	f003 0303 	and.w	r3, r3, #3
 800876c:	005b      	lsls	r3, r3, #1
 800876e:	fa02 f303 	lsl.w	r3, r2, r3
 8008772:	633b      	str	r3, [r7, #48]	; 0x30
 8008774:	e035      	b.n	80087e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f003 0318 	and.w	r3, r3, #24
 8008780:	2b18      	cmp	r3, #24
 8008782:	d00f      	beq.n	80087a4 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	691a      	ldr	r2, [r3, #16]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	08db      	lsrs	r3, r3, #3
 8008790:	f003 0303 	and.w	r3, r3, #3
 8008794:	f1c3 0302 	rsb	r3, r3, #2
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	f003 031e 	and.w	r3, r3, #30
 800879e:	fa22 f303 	lsr.w	r3, r2, r3
 80087a2:	e002      	b.n	80087aa <HAL_ADC_AnalogWDGConfig+0x3b2>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	f003 0318 	and.w	r3, r3, #24
 80087b6:	2b18      	cmp	r3, #24
 80087b8:	d00f      	beq.n	80087da <HAL_ADC_AnalogWDGConfig+0x3e2>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	08db      	lsrs	r3, r3, #3
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	f1c3 0302 	rsb	r3, r3, #2
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	f003 031e 	and.w	r3, r3, #30
 80087d4:	fa22 f303 	lsr.w	r3, r2, r3
 80087d8:	e002      	b.n	80087e0 <HAL_ADC_AnalogWDGConfig+0x3e8>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	6819      	ldr	r1, [r3, #0]
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087ee:	f7fe fa4a 	bl	8006c86 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80087fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3738      	adds	r7, #56	; 0x38
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	0017ffff 	.word	0x0017ffff
 800880c:	7dc00000 	.word	0x7dc00000

08008810 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800881a:	2300      	movs	r3, #0
 800881c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fb2f 	bl	8006e8a <LL_ADC_REG_IsConversionOngoing>
 800882c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe fb50 	bl	8006ed8 <LL_ADC_INJ_IsConversionOngoing>
 8008838:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d103      	bne.n	8008848 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	f000 8098 	beq.w	8008978 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d02a      	beq.n	80088ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	7f5b      	ldrb	r3, [r3, #29]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d126      	bne.n	80088ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	7f1b      	ldrb	r3, [r3, #28]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d122      	bne.n	80088ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008866:	2301      	movs	r3, #1
 8008868:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800886a:	e014      	b.n	8008896 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	4a45      	ldr	r2, [pc, #276]	; (8008984 <ADC_ConversionStop+0x174>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d90d      	bls.n	8008890 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008878:	f043 0210 	orr.w	r2, r3, #16
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008884:	f043 0201 	orr.w	r2, r3, #1
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e074      	b.n	800897a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	3301      	adds	r3, #1
 8008894:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a0:	2b40      	cmp	r3, #64	; 0x40
 80088a2:	d1e3      	bne.n	800886c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2240      	movs	r2, #64	; 0x40
 80088aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d014      	beq.n	80088dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fae7 	bl	8006e8a <LL_ADC_REG_IsConversionOngoing>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00c      	beq.n	80088dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe faa4 	bl	8006e14 <LL_ADC_IsDisableOngoing>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d104      	bne.n	80088dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fac3 	bl	8006e62 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d014      	beq.n	800890c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe faf6 	bl	8006ed8 <LL_ADC_INJ_IsConversionOngoing>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00c      	beq.n	800890c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fa8c 	bl	8006e14 <LL_ADC_IsDisableOngoing>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d104      	bne.n	800890c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fad2 	bl	8006eb0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b02      	cmp	r3, #2
 8008910:	d005      	beq.n	800891e <ADC_ConversionStop+0x10e>
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	2b03      	cmp	r3, #3
 8008916:	d105      	bne.n	8008924 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008918:	230c      	movs	r3, #12
 800891a:	617b      	str	r3, [r7, #20]
        break;
 800891c:	e005      	b.n	800892a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800891e:	2308      	movs	r3, #8
 8008920:	617b      	str	r3, [r7, #20]
        break;
 8008922:	e002      	b.n	800892a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008924:	2304      	movs	r3, #4
 8008926:	617b      	str	r3, [r7, #20]
        break;
 8008928:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800892a:	f7fd ffdd 	bl	80068e8 <HAL_GetTick>
 800892e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008930:	e01b      	b.n	800896a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008932:	f7fd ffd9 	bl	80068e8 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b05      	cmp	r3, #5
 800893e:	d914      	bls.n	800896a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689a      	ldr	r2, [r3, #8]
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	4013      	ands	r3, r2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00d      	beq.n	800896a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008952:	f043 0210 	orr.w	r2, r3, #16
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800895e:	f043 0201 	orr.w	r2, r3, #1
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e007      	b.n	800897a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	4013      	ands	r3, r2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1dc      	bne.n	8008932 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3720      	adds	r7, #32
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	a33fffff 	.word	0xa33fffff

08008988 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008990:	2300      	movs	r3, #0
 8008992:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f7fe fa28 	bl	8006dee <LL_ADC_IsEnabled>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d169      	bne.n	8008a78 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689a      	ldr	r2, [r3, #8]
 80089aa:	4b36      	ldr	r3, [pc, #216]	; (8008a84 <ADC_Enable+0xfc>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00d      	beq.n	80089ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b6:	f043 0210 	orr.w	r2, r3, #16
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c2:	f043 0201 	orr.w	r2, r3, #1
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e055      	b.n	8008a7a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe f9e3 	bl	8006d9e <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80089d8:	482b      	ldr	r0, [pc, #172]	; (8008a88 <ADC_Enable+0x100>)
 80089da:	f7fd ffd9 	bl	8006990 <LL_ADC_GetCommonPathInternalCh>
 80089de:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80089e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d013      	beq.n	8008a10 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80089e8:	4b28      	ldr	r3, [pc, #160]	; (8008a8c <ADC_Enable+0x104>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	099b      	lsrs	r3, r3, #6
 80089ee:	4a28      	ldr	r2, [pc, #160]	; (8008a90 <ADC_Enable+0x108>)
 80089f0:	fba2 2303 	umull	r2, r3, r2, r3
 80089f4:	099b      	lsrs	r3, r3, #6
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	4613      	mov	r3, r2
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008a02:	e002      	b.n	8008a0a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1f9      	bne.n	8008a04 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008a10:	f7fd ff6a 	bl	80068e8 <HAL_GetTick>
 8008a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008a16:	e028      	b.n	8008a6a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fe f9e6 	bl	8006dee <LL_ADC_IsEnabled>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d104      	bne.n	8008a32 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fe f9b6 	bl	8006d9e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008a32:	f7fd ff59 	bl	80068e8 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d914      	bls.n	8008a6a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d00d      	beq.n	8008a6a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a52:	f043 0210 	orr.w	r2, r3, #16
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a5e:	f043 0201 	orr.w	r2, r3, #1
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e007      	b.n	8008a7a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d1cf      	bne.n	8008a18 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	8000003f 	.word	0x8000003f
 8008a88:	50000300 	.word	0x50000300
 8008a8c:	200001d8 	.word	0x200001d8
 8008a90:	053e2d63 	.word	0x053e2d63

08008a94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe f9b7 	bl	8006e14 <LL_ADC_IsDisableOngoing>
 8008aa6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe f99e 	bl	8006dee <LL_ADC_IsEnabled>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d047      	beq.n	8008b48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d144      	bne.n	8008b48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f003 030d 	and.w	r3, r3, #13
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d10c      	bne.n	8008ae6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fe f978 	bl	8006dc6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2203      	movs	r2, #3
 8008adc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008ade:	f7fd ff03 	bl	80068e8 <HAL_GetTick>
 8008ae2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008ae4:	e029      	b.n	8008b3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aea:	f043 0210 	orr.w	r2, r3, #16
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008af6:	f043 0201 	orr.w	r2, r3, #1
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e023      	b.n	8008b4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008b02:	f7fd fef1 	bl	80068e8 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d914      	bls.n	8008b3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b22:	f043 0210 	orr.w	r2, r3, #16
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b2e:	f043 0201 	orr.w	r2, r3, #1
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e007      	b.n	8008b4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f003 0301 	and.w	r3, r3, #1
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1dc      	bne.n	8008b02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d14b      	bne.n	8008c04 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0308 	and.w	r3, r3, #8
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d021      	beq.n	8008bca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fd ffac 	bl	8006ae8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d032      	beq.n	8008bfc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d12b      	bne.n	8008bfc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ba8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d11f      	bne.n	8008bfc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bc0:	f043 0201 	orr.w	r2, r3, #1
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bc8:	e018      	b.n	8008bfc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d111      	bne.n	8008bfc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d105      	bne.n	8008bfc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf4:	f043 0201 	orr.w	r2, r3, #1
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f7fa ff3d 	bl	8003a7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008c02:	e00e      	b.n	8008c22 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c08:	f003 0310 	and.w	r3, r3, #16
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f7fe fff7 	bl	8007c04 <HAL_ADC_ErrorCallback>
}
 8008c16:	e004      	b.n	8008c22 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	4798      	blx	r3
}
 8008c22:	bf00      	nop
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f7fe ffd9 	bl	8007bf0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c64:	f043 0204 	orr.w	r2, r3, #4
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f7fe ffc9 	bl	8007c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008c72:	bf00      	nop
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <LL_ADC_IsEnabled>:
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d101      	bne.n	8008c92 <LL_ADC_IsEnabled+0x18>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e000      	b.n	8008c94 <LL_ADC_IsEnabled+0x1a>
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <LL_ADC_StartCalibration>:
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008cb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	609a      	str	r2, [r3, #8]
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <LL_ADC_IsCalibrationOnGoing>:
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ce6:	d101      	bne.n	8008cec <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <LL_ADC_REG_IsConversionOngoing>:
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b083      	sub	sp, #12
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f003 0304 	and.w	r3, r3, #4
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	d101      	bne.n	8008d12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e000      	b.n	8008d14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d101      	bne.n	8008d3c <HAL_ADCEx_Calibration_Start+0x1c>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e04d      	b.n	8008dd8 <HAL_ADCEx_Calibration_Start+0xb8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7ff fea5 	bl	8008a94 <ADC_Disable>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d136      	bne.n	8008dc2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008d5c:	f023 0302 	bic.w	r3, r3, #2
 8008d60:	f043 0202 	orr.w	r2, r3, #2
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff ff96 	bl	8008ca0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008d74:	e014      	b.n	8008da0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	4a18      	ldr	r2, [pc, #96]	; (8008de0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d90d      	bls.n	8008da0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d88:	f023 0312 	bic.w	r3, r3, #18
 8008d8c:	f043 0210 	orr.w	r2, r3, #16
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e01b      	b.n	8008dd8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff ff94 	bl	8008cd2 <LL_ADC_IsCalibrationOnGoing>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e2      	bne.n	8008d76 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db4:	f023 0303 	bic.w	r3, r3, #3
 8008db8:	f043 0201 	orr.w	r2, r3, #1
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8008dc0:	e005      	b.n	8008dce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc6:	f043 0210 	orr.w	r2, r3, #16
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	0004de01 	.word	0x0004de01

08008de4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008e48:	b590      	push	{r4, r7, lr}
 8008e4a:	b0a1      	sub	sp, #132	; 0x84
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d101      	bne.n	8008e66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008e62:	2302      	movs	r3, #2
 8008e64:	e08b      	b.n	8008f7e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008e6e:	2300      	movs	r3, #0
 8008e70:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008e72:	2300      	movs	r3, #0
 8008e74:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e7e:	d102      	bne.n	8008e86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008e80:	4b41      	ldr	r3, [pc, #260]	; (8008f88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008e82:	60bb      	str	r3, [r7, #8]
 8008e84:	e001      	b.n	8008e8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008e86:	2300      	movs	r3, #0
 8008e88:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10b      	bne.n	8008ea8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e94:	f043 0220 	orr.w	r2, r3, #32
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e06a      	b.n	8008f7e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7ff ff25 	bl	8008cfa <LL_ADC_REG_IsConversionOngoing>
 8008eb0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff ff1f 	bl	8008cfa <LL_ADC_REG_IsConversionOngoing>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d14c      	bne.n	8008f5c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d149      	bne.n	8008f5c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008ec8:	4b30      	ldr	r3, [pc, #192]	; (8008f8c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8008eca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d028      	beq.n	8008f26 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	6859      	ldr	r1, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ee6:	035b      	lsls	r3, r3, #13
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	431a      	orrs	r2, r3
 8008eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008ef0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008ef4:	f7ff fec1 	bl	8008c7a <LL_ADC_IsEnabled>
 8008ef8:	4604      	mov	r4, r0
 8008efa:	4823      	ldr	r0, [pc, #140]	; (8008f88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008efc:	f7ff febd 	bl	8008c7a <LL_ADC_IsEnabled>
 8008f00:	4603      	mov	r3, r0
 8008f02:	4323      	orrs	r3, r4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d133      	bne.n	8008f70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008f10:	f023 030f 	bic.w	r3, r3, #15
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	6811      	ldr	r1, [r2, #0]
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	6892      	ldr	r2, [r2, #8]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f22:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f24:	e024      	b.n	8008f70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f30:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008f36:	f7ff fea0 	bl	8008c7a <LL_ADC_IsEnabled>
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4812      	ldr	r0, [pc, #72]	; (8008f88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008f3e:	f7ff fe9c 	bl	8008c7a <LL_ADC_IsEnabled>
 8008f42:	4603      	mov	r3, r0
 8008f44:	4323      	orrs	r3, r4
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d112      	bne.n	8008f70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008f52:	f023 030f 	bic.w	r3, r3, #15
 8008f56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f58:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f5a:	e009      	b.n	8008f70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f60:	f043 0220 	orr.w	r2, r3, #32
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008f6e:	e000      	b.n	8008f72 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008f7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3784      	adds	r7, #132	; 0x84
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd90      	pop	{r4, r7, pc}
 8008f86:	bf00      	nop
 8008f88:	50000100 	.word	0x50000100
 8008f8c:	50000300 	.word	0x50000300

08008f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f003 0307 	and.w	r3, r3, #7
 8008f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fa0:	4b0c      	ldr	r3, [pc, #48]	; (8008fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008fac:	4013      	ands	r3, r2
 8008fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008fc2:	4a04      	ldr	r2, [pc, #16]	; (8008fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	60d3      	str	r3, [r2, #12]
}
 8008fc8:	bf00      	nop
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	e000ed00 	.word	0xe000ed00

08008fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	0a1b      	lsrs	r3, r3, #8
 8008fe2:	f003 0307 	and.w	r3, r3, #7
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	e000ed00 	.word	0xe000ed00

08008ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009002:	2b00      	cmp	r3, #0
 8009004:	db0b      	blt.n	800901e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	f003 021f 	and.w	r2, r3, #31
 800900c:	4907      	ldr	r1, [pc, #28]	; (800902c <__NVIC_EnableIRQ+0x38>)
 800900e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009012:	095b      	lsrs	r3, r3, #5
 8009014:	2001      	movs	r0, #1
 8009016:	fa00 f202 	lsl.w	r2, r0, r2
 800901a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800901e:	bf00      	nop
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	e000e100 	.word	0xe000e100

08009030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	6039      	str	r1, [r7, #0]
 800903a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800903c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009040:	2b00      	cmp	r3, #0
 8009042:	db0a      	blt.n	800905a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	b2da      	uxtb	r2, r3
 8009048:	490c      	ldr	r1, [pc, #48]	; (800907c <__NVIC_SetPriority+0x4c>)
 800904a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800904e:	0112      	lsls	r2, r2, #4
 8009050:	b2d2      	uxtb	r2, r2
 8009052:	440b      	add	r3, r1
 8009054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009058:	e00a      	b.n	8009070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	b2da      	uxtb	r2, r3
 800905e:	4908      	ldr	r1, [pc, #32]	; (8009080 <__NVIC_SetPriority+0x50>)
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	f003 030f 	and.w	r3, r3, #15
 8009066:	3b04      	subs	r3, #4
 8009068:	0112      	lsls	r2, r2, #4
 800906a:	b2d2      	uxtb	r2, r2
 800906c:	440b      	add	r3, r1
 800906e:	761a      	strb	r2, [r3, #24]
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	e000e100 	.word	0xe000e100
 8009080:	e000ed00 	.word	0xe000ed00

08009084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009084:	b480      	push	{r7}
 8009086:	b089      	sub	sp, #36	; 0x24
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	f1c3 0307 	rsb	r3, r3, #7
 800909e:	2b04      	cmp	r3, #4
 80090a0:	bf28      	it	cs
 80090a2:	2304      	movcs	r3, #4
 80090a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	3304      	adds	r3, #4
 80090aa:	2b06      	cmp	r3, #6
 80090ac:	d902      	bls.n	80090b4 <NVIC_EncodePriority+0x30>
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	3b03      	subs	r3, #3
 80090b2:	e000      	b.n	80090b6 <NVIC_EncodePriority+0x32>
 80090b4:	2300      	movs	r3, #0
 80090b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090b8:	f04f 32ff 	mov.w	r2, #4294967295
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	fa02 f303 	lsl.w	r3, r2, r3
 80090c2:	43da      	mvns	r2, r3
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	401a      	ands	r2, r3
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090cc:	f04f 31ff 	mov.w	r1, #4294967295
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	fa01 f303 	lsl.w	r3, r1, r3
 80090d6:	43d9      	mvns	r1, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090dc:	4313      	orrs	r3, r2
         );
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3724      	adds	r7, #36	; 0x24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
	...

080090ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090fc:	d301      	bcc.n	8009102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090fe:	2301      	movs	r3, #1
 8009100:	e00f      	b.n	8009122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009102:	4a0a      	ldr	r2, [pc, #40]	; (800912c <SysTick_Config+0x40>)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3b01      	subs	r3, #1
 8009108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800910a:	210f      	movs	r1, #15
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	f7ff ff8e 	bl	8009030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <SysTick_Config+0x40>)
 8009116:	2200      	movs	r2, #0
 8009118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800911a:	4b04      	ldr	r3, [pc, #16]	; (800912c <SysTick_Config+0x40>)
 800911c:	2207      	movs	r2, #7
 800911e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	e000e010 	.word	0xe000e010

08009130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff ff29 	bl	8008f90 <__NVIC_SetPriorityGrouping>
}
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b086      	sub	sp, #24
 800914a:	af00      	add	r7, sp, #0
 800914c:	4603      	mov	r3, r0
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	607a      	str	r2, [r7, #4]
 8009152:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009154:	f7ff ff40 	bl	8008fd8 <__NVIC_GetPriorityGrouping>
 8009158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	68b9      	ldr	r1, [r7, #8]
 800915e:	6978      	ldr	r0, [r7, #20]
 8009160:	f7ff ff90 	bl	8009084 <NVIC_EncodePriority>
 8009164:	4602      	mov	r2, r0
 8009166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f7ff ff5f 	bl	8009030 <__NVIC_SetPriority>
}
 8009172:	bf00      	nop
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	4603      	mov	r3, r0
 8009182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff ff33 	bl	8008ff4 <__NVIC_EnableIRQ>
}
 800918e:	bf00      	nop
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff ffa4 	bl	80090ec <SysTick_Config>
 80091a4:	4603      	mov	r3, r0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d101      	bne.n	80091c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e054      	b.n	800926c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	7f5b      	ldrb	r3, [r3, #29]
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d105      	bne.n	80091d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7fc fa46 	bl	8005664 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2202      	movs	r2, #2
 80091dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	791b      	ldrb	r3, [r3, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10c      	bne.n	8009200 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a22      	ldr	r2, [pc, #136]	; (8009274 <HAL_CRC_Init+0xc4>)
 80091ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689a      	ldr	r2, [r3, #8]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 0218 	bic.w	r2, r2, #24
 80091fc:	609a      	str	r2, [r3, #8]
 80091fe:	e00c      	b.n	800921a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6899      	ldr	r1, [r3, #8]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	461a      	mov	r2, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f948 	bl	80094a0 <HAL_CRCEx_Polynomial_Set>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e028      	b.n	800926c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	795b      	ldrb	r3, [r3, #5]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d105      	bne.n	800922e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f04f 32ff 	mov.w	r2, #4294967295
 800922a:	611a      	str	r2, [r3, #16]
 800922c:	e004      	b.n	8009238 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6912      	ldr	r2, [r2, #16]
 8009236:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	695a      	ldr	r2, [r3, #20]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	699a      	ldr	r2, [r3, #24]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	04c11db7 	.word	0x04c11db7

08009278 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8009284:	2300      	movs	r3, #0
 8009286:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2202      	movs	r2, #2
 800928c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f042 0201 	orr.w	r2, r2, #1
 800929c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d006      	beq.n	80092b4 <HAL_CRC_Calculate+0x3c>
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d829      	bhi.n	80092fe <HAL_CRC_Calculate+0x86>
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d019      	beq.n	80092e2 <HAL_CRC_Calculate+0x6a>
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d01e      	beq.n	80092f0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80092b2:	e024      	b.n	80092fe <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80092b4:	2300      	movs	r3, #0
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	e00a      	b.n	80092d0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	441a      	add	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6812      	ldr	r2, [r2, #0]
 80092c8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	3301      	adds	r3, #1
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d3f0      	bcc.n	80092ba <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	613b      	str	r3, [r7, #16]
      break;
 80092e0:	e00e      	b.n	8009300 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	68b9      	ldr	r1, [r7, #8]
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 f812 	bl	8009310 <CRC_Handle_8>
 80092ec:	6138      	str	r0, [r7, #16]
      break;
 80092ee:	e007      	b.n	8009300 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	68b9      	ldr	r1, [r7, #8]
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 f899 	bl	800942c <CRC_Handle_16>
 80092fa:	6138      	str	r0, [r7, #16]
      break;
 80092fc:	e000      	b.n	8009300 <HAL_CRC_Calculate+0x88>
      break;
 80092fe:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2201      	movs	r2, #1
 8009304:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8009306:	693b      	ldr	r3, [r7, #16]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3718      	adds	r7, #24
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8009310:	b480      	push	{r7}
 8009312:	b089      	sub	sp, #36	; 0x24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800931c:	2300      	movs	r3, #0
 800931e:	61fb      	str	r3, [r7, #28]
 8009320:	e023      	b.n	800936a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	4413      	add	r3, r2
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	3301      	adds	r3, #1
 8009334:	68b9      	ldr	r1, [r7, #8]
 8009336:	440b      	add	r3, r1
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800933c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	3302      	adds	r3, #2
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	440b      	add	r3, r1
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800934c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	3303      	adds	r3, #3
 8009354:	68b9      	ldr	r1, [r7, #8]
 8009356:	440b      	add	r3, r1
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009360:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009362:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	3301      	adds	r3, #1
 8009368:	61fb      	str	r3, [r7, #28]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	089b      	lsrs	r3, r3, #2
 800936e:	69fa      	ldr	r2, [r7, #28]
 8009370:	429a      	cmp	r2, r3
 8009372:	d3d6      	bcc.n	8009322 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d04d      	beq.n	800941a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f003 0303 	and.w	r3, r3, #3
 8009384:	2b01      	cmp	r3, #1
 8009386:	d107      	bne.n	8009398 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	4413      	add	r3, r2
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	6812      	ldr	r2, [r2, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d116      	bne.n	80093d0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	4413      	add	r3, r2
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	021b      	lsls	r3, r3, #8
 80093ae:	b21a      	sxth	r2, r3
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	3301      	adds	r3, #1
 80093b6:	68b9      	ldr	r1, [r7, #8]
 80093b8:	440b      	add	r3, r1
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	b21b      	sxth	r3, r3
 80093be:	4313      	orrs	r3, r2
 80093c0:	b21b      	sxth	r3, r3
 80093c2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	8b7a      	ldrh	r2, [r7, #26]
 80093ce:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f003 0303 	and.w	r3, r3, #3
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d11f      	bne.n	800941a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	4413      	add	r3, r2
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	021b      	lsls	r3, r3, #8
 80093e6:	b21a      	sxth	r2, r3
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	3301      	adds	r3, #1
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	440b      	add	r3, r1
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	b21b      	sxth	r3, r3
 80093f6:	4313      	orrs	r3, r2
 80093f8:	b21b      	sxth	r3, r3
 80093fa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	8b7a      	ldrh	r2, [r7, #26]
 8009406:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	3302      	adds	r3, #2
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	4413      	add	r3, r2
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3724      	adds	r7, #36	; 0x24
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]
 800943c:	e013      	b.n	8009466 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	4413      	add	r3, r2
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	041a      	lsls	r2, r3, #16
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	3302      	adds	r3, #2
 8009450:	68b9      	ldr	r1, [r7, #8]
 8009452:	440b      	add	r3, r1
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	4619      	mov	r1, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	3301      	adds	r3, #1
 8009464:	617b      	str	r3, [r7, #20]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	085b      	lsrs	r3, r3, #1
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	429a      	cmp	r2, r3
 800946e:	d3e6      	bcc.n	800943e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d009      	beq.n	800948e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	4413      	add	r3, r2
 8009488:	881a      	ldrh	r2, [r3, #0]
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
}
 8009494:	4618      	mov	r0, r3
 8009496:	371c      	adds	r7, #28
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b087      	sub	sp, #28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80094b0:	231f      	movs	r3, #31
 80094b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d102      	bne.n	80094c4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	75fb      	strb	r3, [r7, #23]
 80094c2:	e063      	b.n	800958c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80094c4:	bf00      	nop
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	1e5a      	subs	r2, r3, #1
 80094ca:	613a      	str	r2, [r7, #16]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d009      	beq.n	80094e4 <HAL_CRCEx_Polynomial_Set+0x44>
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f003 031f 	and.w	r3, r3, #31
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	fa22 f303 	lsr.w	r3, r2, r3
 80094dc:	f003 0301 	and.w	r3, r3, #1
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d0f0      	beq.n	80094c6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b18      	cmp	r3, #24
 80094e8:	d846      	bhi.n	8009578 <HAL_CRCEx_Polynomial_Set+0xd8>
 80094ea:	a201      	add	r2, pc, #4	; (adr r2, 80094f0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80094ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f0:	0800957f 	.word	0x0800957f
 80094f4:	08009579 	.word	0x08009579
 80094f8:	08009579 	.word	0x08009579
 80094fc:	08009579 	.word	0x08009579
 8009500:	08009579 	.word	0x08009579
 8009504:	08009579 	.word	0x08009579
 8009508:	08009579 	.word	0x08009579
 800950c:	08009579 	.word	0x08009579
 8009510:	0800956d 	.word	0x0800956d
 8009514:	08009579 	.word	0x08009579
 8009518:	08009579 	.word	0x08009579
 800951c:	08009579 	.word	0x08009579
 8009520:	08009579 	.word	0x08009579
 8009524:	08009579 	.word	0x08009579
 8009528:	08009579 	.word	0x08009579
 800952c:	08009579 	.word	0x08009579
 8009530:	08009561 	.word	0x08009561
 8009534:	08009579 	.word	0x08009579
 8009538:	08009579 	.word	0x08009579
 800953c:	08009579 	.word	0x08009579
 8009540:	08009579 	.word	0x08009579
 8009544:	08009579 	.word	0x08009579
 8009548:	08009579 	.word	0x08009579
 800954c:	08009579 	.word	0x08009579
 8009550:	08009555 	.word	0x08009555
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	2b06      	cmp	r3, #6
 8009558:	d913      	bls.n	8009582 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800955e:	e010      	b.n	8009582 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	2b07      	cmp	r3, #7
 8009564:	d90f      	bls.n	8009586 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800956a:	e00c      	b.n	8009586 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	2b0f      	cmp	r3, #15
 8009570:	d90b      	bls.n	800958a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009576:	e008      	b.n	800958a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	75fb      	strb	r3, [r7, #23]
        break;
 800957c:	e006      	b.n	800958c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800957e:	bf00      	nop
 8009580:	e004      	b.n	800958c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009582:	bf00      	nop
 8009584:	e002      	b.n	800958c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009586:	bf00      	nop
 8009588:	e000      	b.n	800958c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800958a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10d      	bne.n	80095ae <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f023 0118 	bic.w	r1, r3, #24
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	430a      	orrs	r2, r1
 80095ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80095ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	371c      	adds	r7, #28
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e08d      	b.n	80096ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	4b47      	ldr	r3, [pc, #284]	; (80096f4 <HAL_DMA_Init+0x138>)
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d80f      	bhi.n	80095fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <HAL_DMA_Init+0x13c>)
 80095e2:	4413      	add	r3, r2
 80095e4:	4a45      	ldr	r2, [pc, #276]	; (80096fc <HAL_DMA_Init+0x140>)
 80095e6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ea:	091b      	lsrs	r3, r3, #4
 80095ec:	009a      	lsls	r2, r3, #2
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a42      	ldr	r2, [pc, #264]	; (8009700 <HAL_DMA_Init+0x144>)
 80095f6:	641a      	str	r2, [r3, #64]	; 0x40
 80095f8:	e00e      	b.n	8009618 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	461a      	mov	r2, r3
 8009600:	4b40      	ldr	r3, [pc, #256]	; (8009704 <HAL_DMA_Init+0x148>)
 8009602:	4413      	add	r3, r2
 8009604:	4a3d      	ldr	r2, [pc, #244]	; (80096fc <HAL_DMA_Init+0x140>)
 8009606:	fba2 2303 	umull	r2, r3, r2, r3
 800960a:	091b      	lsrs	r3, r3, #4
 800960c:	009a      	lsls	r2, r3, #2
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a3c      	ldr	r2, [pc, #240]	; (8009708 <HAL_DMA_Init+0x14c>)
 8009616:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2202      	movs	r2, #2
 800961c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800962e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009632:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800963c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	4313      	orrs	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fa84 	bl	8009b78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009678:	d102      	bne.n	8009680 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009688:	b2d2      	uxtb	r2, r2
 800968a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009694:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d010      	beq.n	80096c0 <HAL_DMA_Init+0x104>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	2b04      	cmp	r3, #4
 80096a4:	d80c      	bhi.n	80096c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 faa4 	bl	8009bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80096bc:	605a      	str	r2, [r3, #4]
 80096be:	e008      	b.n	80096d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	40020407 	.word	0x40020407
 80096f8:	bffdfff8 	.word	0xbffdfff8
 80096fc:	cccccccd 	.word	0xcccccccd
 8009700:	40020000 	.word	0x40020000
 8009704:	bffdfbf8 	.word	0xbffdfbf8
 8009708:	40020400 	.word	0x40020400

0800970c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009724:	2b01      	cmp	r3, #1
 8009726:	d101      	bne.n	800972c <HAL_DMA_Start_IT+0x20>
 8009728:	2302      	movs	r3, #2
 800972a:	e066      	b.n	80097fa <HAL_DMA_Start_IT+0xee>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b01      	cmp	r3, #1
 800973e:	d155      	bne.n	80097ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f022 0201 	bic.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 f9c9 	bl	8009afc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976e:	2b00      	cmp	r3, #0
 8009770:	d008      	beq.n	8009784 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f042 020e 	orr.w	r2, r2, #14
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	e00f      	b.n	80097a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f022 0204 	bic.w	r2, r2, #4
 8009792:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 020a 	orr.w	r2, r2, #10
 80097a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d007      	beq.n	80097c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d007      	beq.n	80097da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f042 0201 	orr.w	r2, r2, #1
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	e005      	b.n	80097f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80097f4:	2302      	movs	r3, #2
 80097f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009802:	b480      	push	{r7}
 8009804:	b085      	sub	sp, #20
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b02      	cmp	r3, #2
 8009818:	d005      	beq.n	8009826 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2204      	movs	r2, #4
 800981e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	73fb      	strb	r3, [r7, #15]
 8009824:	e037      	b.n	8009896 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 020e 	bic.w	r2, r2, #14
 8009834:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009844:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0201 	bic.w	r2, r2, #1
 8009854:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800985a:	f003 021f 	and.w	r2, r3, #31
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009862:	2101      	movs	r1, #1
 8009864:	fa01 f202 	lsl.w	r2, r1, r2
 8009868:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009872:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00c      	beq.n	8009896 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009886:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800988a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009894:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d00d      	beq.n	80098e8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2204      	movs	r2, #4
 80098d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	73fb      	strb	r3, [r7, #15]
 80098e6:	e047      	b.n	8009978 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 020e 	bic.w	r2, r2, #14
 80098f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0201 	bic.w	r2, r2, #1
 8009906:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991c:	f003 021f 	and.w	r2, r3, #31
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009924:	2101      	movs	r1, #1
 8009926:	fa01 f202 	lsl.w	r2, r1, r2
 800992a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009934:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00c      	beq.n	8009958 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800994c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009956:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	4798      	blx	r3
    }
  }
  return status;
 8009978:	7bfb      	ldrb	r3, [r7, #15]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b084      	sub	sp, #16
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800999e:	f003 031f 	and.w	r3, r3, #31
 80099a2:	2204      	movs	r2, #4
 80099a4:	409a      	lsls	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4013      	ands	r3, r2
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d026      	beq.n	80099fc <HAL_DMA_IRQHandler+0x7a>
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d021      	beq.n	80099fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0320 	and.w	r3, r3, #32
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d107      	bne.n	80099d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f022 0204 	bic.w	r2, r2, #4
 80099d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099da:	f003 021f 	and.w	r2, r3, #31
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	2104      	movs	r1, #4
 80099e4:	fa01 f202 	lsl.w	r2, r1, r2
 80099e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d071      	beq.n	8009ad6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80099fa:	e06c      	b.n	8009ad6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a00:	f003 031f 	and.w	r3, r3, #31
 8009a04:	2202      	movs	r2, #2
 8009a06:	409a      	lsls	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d02e      	beq.n	8009a6e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d029      	beq.n	8009a6e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0320 	and.w	r3, r3, #32
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10b      	bne.n	8009a40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 020a 	bic.w	r2, r2, #10
 8009a36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a44:	f003 021f 	and.w	r2, r3, #31
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4c:	2102      	movs	r1, #2
 8009a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8009a52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d038      	beq.n	8009ad6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009a6c:	e033      	b.n	8009ad6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a72:	f003 031f 	and.w	r3, r3, #31
 8009a76:	2208      	movs	r2, #8
 8009a78:	409a      	lsls	r2, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d02a      	beq.n	8009ad8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	f003 0308 	and.w	r3, r3, #8
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d025      	beq.n	8009ad8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f022 020e 	bic.w	r2, r2, #14
 8009a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa0:	f003 021f 	and.w	r2, r3, #31
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8009aae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d004      	beq.n	8009ad8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
}
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009aee:	b2db      	uxtb	r3, r3
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009b12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d004      	beq.n	8009b26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009b24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2a:	f003 021f 	and.w	r2, r3, #31
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	2101      	movs	r1, #1
 8009b34:	fa01 f202 	lsl.w	r2, r1, r2
 8009b38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	2b10      	cmp	r3, #16
 8009b48:	d108      	bne.n	8009b5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009b5a:	e007      	b.n	8009b6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	60da      	str	r2, [r3, #12]
}
 8009b6c:	bf00      	nop
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	461a      	mov	r2, r3
 8009b86:	4b16      	ldr	r3, [pc, #88]	; (8009be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d802      	bhi.n	8009b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009b8c:	4b15      	ldr	r3, [pc, #84]	; (8009be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	e001      	b.n	8009b96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8009b92:	4b15      	ldr	r3, [pc, #84]	; (8009be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009b94:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	3b08      	subs	r3, #8
 8009ba2:	4a12      	ldr	r2, [pc, #72]	; (8009bec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba8:	091b      	lsrs	r3, r3, #4
 8009baa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb0:	089b      	lsrs	r3, r3, #2
 8009bb2:	009a      	lsls	r2, r3, #2
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	461a      	mov	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a0b      	ldr	r2, [pc, #44]	; (8009bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009bc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f003 031f 	and.w	r3, r3, #31
 8009bca:	2201      	movs	r2, #1
 8009bcc:	409a      	lsls	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009bd2:	bf00      	nop
 8009bd4:	371c      	adds	r7, #28
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	40020407 	.word	0x40020407
 8009be4:	40020800 	.word	0x40020800
 8009be8:	40020820 	.word	0x40020820
 8009bec:	cccccccd 	.word	0xcccccccd
 8009bf0:	40020880 	.word	0x40020880

08009bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009c08:	4413      	add	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a08      	ldr	r2, [pc, #32]	; (8009c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009c16:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	f003 031f 	and.w	r3, r3, #31
 8009c20:	2201      	movs	r2, #1
 8009c22:	409a      	lsls	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009c28:	bf00      	nop
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	1000823f 	.word	0x1000823f
 8009c38:	40020940 	.word	0x40020940

08009c3c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009c4e:	4b2f      	ldr	r3, [pc, #188]	; (8009d0c <HAL_FLASH_Program+0xd0>)
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d101      	bne.n	8009c5a <HAL_FLASH_Program+0x1e>
 8009c56:	2302      	movs	r3, #2
 8009c58:	e053      	b.n	8009d02 <HAL_FLASH_Program+0xc6>
 8009c5a:	4b2c      	ldr	r3, [pc, #176]	; (8009d0c <HAL_FLASH_Program+0xd0>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009c64:	f000 f892 	bl	8009d8c <FLASH_WaitForLastOperation>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d143      	bne.n	8009cfa <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009c72:	4b26      	ldr	r3, [pc, #152]	; (8009d0c <HAL_FLASH_Program+0xd0>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009c78:	4b25      	ldr	r3, [pc, #148]	; (8009d10 <HAL_FLASH_Program+0xd4>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d009      	beq.n	8009c98 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009c84:	4b22      	ldr	r3, [pc, #136]	; (8009d10 <HAL_FLASH_Program+0xd4>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a21      	ldr	r2, [pc, #132]	; (8009d10 <HAL_FLASH_Program+0xd4>)
 8009c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c8e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009c90:	4b1e      	ldr	r3, [pc, #120]	; (8009d0c <HAL_FLASH_Program+0xd0>)
 8009c92:	2202      	movs	r2, #2
 8009c94:	771a      	strb	r2, [r3, #28]
 8009c96:	e002      	b.n	8009c9e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009c98:	4b1c      	ldr	r3, [pc, #112]	; (8009d0c <HAL_FLASH_Program+0xd0>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d107      	bne.n	8009cb4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8009ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ca8:	68b8      	ldr	r0, [r7, #8]
 8009caa:	f000 f8c3 	bl	8009e34 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	613b      	str	r3, [r7, #16]
 8009cb2:	e010      	b.n	8009cd6 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d002      	beq.n	8009cc0 <HAL_FLASH_Program+0x84>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d10a      	bne.n	8009cd6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68b8      	ldr	r0, [r7, #8]
 8009cc6:	f000 f8db 	bl	8009e80 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d102      	bne.n	8009cd6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8009cd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009cd4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009cda:	f000 f857 	bl	8009d8c <FLASH_WaitForLastOperation>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d006      	beq.n	8009cf6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8009ce8:	4b09      	ldr	r3, [pc, #36]	; (8009d10 <HAL_FLASH_Program+0xd4>)
 8009cea:	695a      	ldr	r2, [r3, #20]
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	43db      	mvns	r3, r3
 8009cf0:	4907      	ldr	r1, [pc, #28]	; (8009d10 <HAL_FLASH_Program+0xd4>)
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009cf6:	f000 f9d3 	bl	800a0a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009cfa:	4b04      	ldr	r3, [pc, #16]	; (8009d0c <HAL_FLASH_Program+0xd0>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	200001f4 	.word	0x200001f4
 8009d10:	40022000 	.word	0x40022000

08009d14 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009d1e:	4b0b      	ldr	r3, [pc, #44]	; (8009d4c <HAL_FLASH_Unlock+0x38>)
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	da0b      	bge.n	8009d3e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009d26:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <HAL_FLASH_Unlock+0x38>)
 8009d28:	4a09      	ldr	r2, [pc, #36]	; (8009d50 <HAL_FLASH_Unlock+0x3c>)
 8009d2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009d2c:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <HAL_FLASH_Unlock+0x38>)
 8009d2e:	4a09      	ldr	r2, [pc, #36]	; (8009d54 <HAL_FLASH_Unlock+0x40>)
 8009d30:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009d32:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <HAL_FLASH_Unlock+0x38>)
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	da01      	bge.n	8009d3e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr
 8009d4c:	40022000 	.word	0x40022000
 8009d50:	45670123 	.word	0x45670123
 8009d54:	cdef89ab 	.word	0xcdef89ab

08009d58 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009d62:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <HAL_FLASH_Lock+0x30>)
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	4a08      	ldr	r2, [pc, #32]	; (8009d88 <HAL_FLASH_Lock+0x30>)
 8009d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d6c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009d6e:	4b06      	ldr	r3, [pc, #24]	; (8009d88 <HAL_FLASH_Lock+0x30>)
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	da01      	bge.n	8009d7a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	40022000 	.word	0x40022000

08009d8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8009d94:	f7fc fda8 	bl	80068e8 <HAL_GetTick>
 8009d98:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009d9a:	e009      	b.n	8009db0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8009d9c:	f7fc fda4 	bl	80068e8 <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d201      	bcs.n	8009db0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e038      	b.n	8009e22 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009db0:	4b1e      	ldr	r3, [pc, #120]	; (8009e2c <FLASH_WaitForLastOperation+0xa0>)
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dbc:	d0ee      	beq.n	8009d9c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009dbe:	4b1b      	ldr	r3, [pc, #108]	; (8009e2c <FLASH_WaitForLastOperation+0xa0>)
 8009dc0:	691a      	ldr	r2, [r3, #16]
 8009dc2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d01e      	beq.n	8009e0e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8009dd0:	4b17      	ldr	r3, [pc, #92]	; (8009e30 <FLASH_WaitForLastOperation+0xa4>)
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	4a15      	ldr	r2, [pc, #84]	; (8009e30 <FLASH_WaitForLastOperation+0xa4>)
 8009dda:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d007      	beq.n	8009df6 <FLASH_WaitForLastOperation+0x6a>
 8009de6:	4b11      	ldr	r3, [pc, #68]	; (8009e2c <FLASH_WaitForLastOperation+0xa0>)
 8009de8:	699a      	ldr	r2, [r3, #24]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009df0:	490e      	ldr	r1, [pc, #56]	; (8009e2c <FLASH_WaitForLastOperation+0xa0>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	618b      	str	r3, [r1, #24]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <FLASH_WaitForLastOperation+0x7e>
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <FLASH_WaitForLastOperation+0xa0>)
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009e08:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e009      	b.n	8009e22 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009e0e:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <FLASH_WaitForLastOperation+0xa0>)
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d102      	bne.n	8009e20 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009e1a:	4b04      	ldr	r3, [pc, #16]	; (8009e2c <FLASH_WaitForLastOperation+0xa0>)
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	40022000 	.word	0x40022000
 8009e30:	200001f4 	.word	0x200001f4

08009e34 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009e40:	4b0e      	ldr	r3, [pc, #56]	; (8009e7c <FLASH_Program_DoubleWord+0x48>)
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	4a0d      	ldr	r2, [pc, #52]	; (8009e7c <FLASH_Program_DoubleWord+0x48>)
 8009e46:	f043 0301 	orr.w	r3, r3, #1
 8009e4a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009e52:	f3bf 8f6f 	isb	sy
}
 8009e56:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e5c:	f04f 0200 	mov.w	r2, #0
 8009e60:	f04f 0300 	mov.w	r3, #0
 8009e64:	000a      	movs	r2, r1
 8009e66:	2300      	movs	r3, #0
 8009e68:	68f9      	ldr	r1, [r7, #12]
 8009e6a:	3104      	adds	r1, #4
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	600b      	str	r3, [r1, #0]
}
 8009e70:	bf00      	nop
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	40022000 	.word	0x40022000

08009e80 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b089      	sub	sp, #36	; 0x24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8009e8a:	2340      	movs	r3, #64	; 0x40
 8009e8c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8009e96:	4b14      	ldr	r3, [pc, #80]	; (8009ee8 <FLASH_Program_Fast+0x68>)
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	4a13      	ldr	r2, [pc, #76]	; (8009ee8 <FLASH_Program_Fast+0x68>)
 8009e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ea0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ea6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ea8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8009eaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eac:	b672      	cpsid	i
}
 8009eae:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	617b      	str	r3, [r7, #20]
    row_index--;
 8009ec4:	7ffb      	ldrb	r3, [r7, #31]
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8009eca:	7ffb      	ldrb	r3, [r7, #31]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1ef      	bne.n	8009eb0 <FLASH_Program_Fast+0x30>
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f383 8810 	msr	PRIMASK, r3
}
 8009eda:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009edc:	bf00      	nop
 8009ede:	3724      	adds	r7, #36	; 0x24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	40022000 	.word	0x40022000

08009eec <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009ef6:	4b47      	ldr	r3, [pc, #284]	; (800a014 <HAL_FLASHEx_Erase+0x128>)
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d101      	bne.n	8009f02 <HAL_FLASHEx_Erase+0x16>
 8009efe:	2302      	movs	r3, #2
 8009f00:	e083      	b.n	800a00a <HAL_FLASHEx_Erase+0x11e>
 8009f02:	4b44      	ldr	r3, [pc, #272]	; (800a014 <HAL_FLASHEx_Erase+0x128>)
 8009f04:	2201      	movs	r2, #1
 8009f06:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f0c:	f7ff ff3e 	bl	8009d8c <FLASH_WaitForLastOperation>
 8009f10:	4603      	mov	r3, r0
 8009f12:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d173      	bne.n	800a002 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009f1a:	4b3e      	ldr	r3, [pc, #248]	; (800a014 <HAL_FLASHEx_Erase+0x128>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009f20:	4b3d      	ldr	r3, [pc, #244]	; (800a018 <HAL_FLASHEx_Erase+0x12c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d013      	beq.n	8009f54 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009f2c:	4b3a      	ldr	r3, [pc, #232]	; (800a018 <HAL_FLASHEx_Erase+0x12c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d009      	beq.n	8009f4c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009f38:	4b37      	ldr	r3, [pc, #220]	; (800a018 <HAL_FLASHEx_Erase+0x12c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a36      	ldr	r2, [pc, #216]	; (800a018 <HAL_FLASHEx_Erase+0x12c>)
 8009f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f42:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009f44:	4b33      	ldr	r3, [pc, #204]	; (800a014 <HAL_FLASHEx_Erase+0x128>)
 8009f46:	2203      	movs	r2, #3
 8009f48:	771a      	strb	r2, [r3, #28]
 8009f4a:	e016      	b.n	8009f7a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009f4c:	4b31      	ldr	r3, [pc, #196]	; (800a014 <HAL_FLASHEx_Erase+0x128>)
 8009f4e:	2201      	movs	r2, #1
 8009f50:	771a      	strb	r2, [r3, #28]
 8009f52:	e012      	b.n	8009f7a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009f54:	4b30      	ldr	r3, [pc, #192]	; (800a018 <HAL_FLASHEx_Erase+0x12c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d009      	beq.n	8009f74 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009f60:	4b2d      	ldr	r3, [pc, #180]	; (800a018 <HAL_FLASHEx_Erase+0x12c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a2c      	ldr	r2, [pc, #176]	; (800a018 <HAL_FLASHEx_Erase+0x12c>)
 8009f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f6a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009f6c:	4b29      	ldr	r3, [pc, #164]	; (800a014 <HAL_FLASHEx_Erase+0x128>)
 8009f6e:	2202      	movs	r2, #2
 8009f70:	771a      	strb	r2, [r3, #28]
 8009f72:	e002      	b.n	8009f7a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009f74:	4b27      	ldr	r3, [pc, #156]	; (800a014 <HAL_FLASHEx_Erase+0x128>)
 8009f76:	2200      	movs	r2, #0
 8009f78:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d111      	bne.n	8009fa6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 f848 	bl	800a01c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f90:	f7ff fefc 	bl	8009d8c <FLASH_WaitForLastOperation>
 8009f94:	4603      	mov	r3, r0
 8009f96:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8009f98:	4b1f      	ldr	r3, [pc, #124]	; (800a018 <HAL_FLASHEx_Erase+0x12c>)
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	4a1e      	ldr	r2, [pc, #120]	; (800a018 <HAL_FLASHEx_Erase+0x12c>)
 8009f9e:	f023 0304 	bic.w	r3, r3, #4
 8009fa2:	6153      	str	r3, [r2, #20]
 8009fa4:	e02b      	b.n	8009ffe <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fac:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	60bb      	str	r3, [r7, #8]
 8009fb4:	e01b      	b.n	8009fee <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	68b8      	ldr	r0, [r7, #8]
 8009fbe:	f000 f84b 	bl	800a058 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fc6:	f7ff fee1 	bl	8009d8c <FLASH_WaitForLastOperation>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009fce:	4b12      	ldr	r3, [pc, #72]	; (800a018 <HAL_FLASHEx_Erase+0x12c>)
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	4a11      	ldr	r2, [pc, #68]	; (800a018 <HAL_FLASHEx_Erase+0x12c>)
 8009fd4:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8009fd8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d003      	beq.n	8009fe8 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	601a      	str	r2, [r3, #0]
          break;
 8009fe6:	e00a      	b.n	8009ffe <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	3301      	adds	r3, #1
 8009fec:	60bb      	str	r3, [r7, #8]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	689a      	ldr	r2, [r3, #8]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d3db      	bcc.n	8009fb6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009ffe:	f000 f84f 	bl	800a0a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a002:	4b04      	ldr	r3, [pc, #16]	; (800a014 <HAL_FLASHEx_Erase+0x128>)
 800a004:	2200      	movs	r2, #0
 800a006:	701a      	strb	r2, [r3, #0]

  return status;
 800a008:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	200001f4 	.word	0x200001f4
 800a018:	40022000 	.word	0x40022000

0800a01c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d005      	beq.n	800a03a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800a02e:	4b09      	ldr	r3, [pc, #36]	; (800a054 <FLASH_MassErase+0x38>)
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	4a08      	ldr	r2, [pc, #32]	; (800a054 <FLASH_MassErase+0x38>)
 800a034:	f043 0304 	orr.w	r3, r3, #4
 800a038:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a03a:	4b06      	ldr	r3, [pc, #24]	; (800a054 <FLASH_MassErase+0x38>)
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	4a05      	ldr	r2, [pc, #20]	; (800a054 <FLASH_MassErase+0x38>)
 800a040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a044:	6153      	str	r3, [r2, #20]
}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	40022000 	.word	0x40022000

0800a058 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800a062:	4b0e      	ldr	r3, [pc, #56]	; (800a09c <FLASH_PageErase+0x44>)
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	00db      	lsls	r3, r3, #3
 800a06e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800a072:	490a      	ldr	r1, [pc, #40]	; (800a09c <FLASH_PageErase+0x44>)
 800a074:	4313      	orrs	r3, r2
 800a076:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a078:	4b08      	ldr	r3, [pc, #32]	; (800a09c <FLASH_PageErase+0x44>)
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	4a07      	ldr	r2, [pc, #28]	; (800a09c <FLASH_PageErase+0x44>)
 800a07e:	f043 0302 	orr.w	r3, r3, #2
 800a082:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a084:	4b05      	ldr	r3, [pc, #20]	; (800a09c <FLASH_PageErase+0x44>)
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	4a04      	ldr	r2, [pc, #16]	; (800a09c <FLASH_PageErase+0x44>)
 800a08a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a08e:	6153      	str	r3, [r2, #20]
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	40022000 	.word	0x40022000

0800a0a0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800a0a6:	4b21      	ldr	r3, [pc, #132]	; (800a12c <FLASH_FlushCaches+0x8c>)
 800a0a8:	7f1b      	ldrb	r3, [r3, #28]
 800a0aa:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d002      	beq.n	800a0b8 <FLASH_FlushCaches+0x18>
 800a0b2:	79fb      	ldrb	r3, [r7, #7]
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d117      	bne.n	800a0e8 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a0b8:	4b1d      	ldr	r3, [pc, #116]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a1c      	ldr	r2, [pc, #112]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a0be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0c2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a0c4:	4b1a      	ldr	r3, [pc, #104]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a19      	ldr	r2, [pc, #100]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a0ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	4b17      	ldr	r3, [pc, #92]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a16      	ldr	r2, [pc, #88]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a0d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a0dc:	4b14      	ldr	r3, [pc, #80]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a13      	ldr	r2, [pc, #76]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a0e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0e6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800a0e8:	79fb      	ldrb	r3, [r7, #7]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d002      	beq.n	800a0f4 <FLASH_FlushCaches+0x54>
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d111      	bne.n	800a118 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a0f4:	4b0e      	ldr	r3, [pc, #56]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a0d      	ldr	r2, [pc, #52]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a0fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	4b0b      	ldr	r3, [pc, #44]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a0a      	ldr	r2, [pc, #40]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a10a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a10c:	4b08      	ldr	r3, [pc, #32]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a07      	ldr	r2, [pc, #28]	; (800a130 <FLASH_FlushCaches+0x90>)
 800a112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a116:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a118:	4b04      	ldr	r3, [pc, #16]	; (800a12c <FLASH_FlushCaches+0x8c>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	771a      	strb	r2, [r3, #28]
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	200001f4 	.word	0x200001f4
 800a130:	40022000 	.word	0x40022000

0800a134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a13e:	2300      	movs	r3, #0
 800a140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a142:	e15a      	b.n	800a3fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	2101      	movs	r1, #1
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	fa01 f303 	lsl.w	r3, r1, r3
 800a150:	4013      	ands	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 814c 	beq.w	800a3f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	f003 0303 	and.w	r3, r3, #3
 800a164:	2b01      	cmp	r3, #1
 800a166:	d005      	beq.n	800a174 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a170:	2b02      	cmp	r3, #2
 800a172:	d130      	bne.n	800a1d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	2203      	movs	r2, #3
 800a180:	fa02 f303 	lsl.w	r3, r2, r3
 800a184:	43db      	mvns	r3, r3
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	4013      	ands	r3, r2
 800a18a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	68da      	ldr	r2, [r3, #12]
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	fa02 f303 	lsl.w	r3, r2, r3
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b2:	43db      	mvns	r3, r3
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	091b      	lsrs	r3, r3, #4
 800a1c0:	f003 0201 	and.w	r2, r3, #1
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d017      	beq.n	800a212 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	2203      	movs	r2, #3
 800a1ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f2:	43db      	mvns	r3, r3
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	689a      	ldr	r2, [r3, #8]
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	fa02 f303 	lsl.w	r3, r2, r3
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	4313      	orrs	r3, r2
 800a20a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d123      	bne.n	800a266 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	08da      	lsrs	r2, r3, #3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3208      	adds	r2, #8
 800a226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a22a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f003 0307 	and.w	r3, r3, #7
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	220f      	movs	r2, #15
 800a236:	fa02 f303 	lsl.w	r3, r2, r3
 800a23a:	43db      	mvns	r3, r3
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	4013      	ands	r3, r2
 800a240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	691a      	ldr	r2, [r3, #16]
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f003 0307 	and.w	r3, r3, #7
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	fa02 f303 	lsl.w	r3, r2, r3
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	4313      	orrs	r3, r2
 800a256:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	08da      	lsrs	r2, r3, #3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3208      	adds	r2, #8
 800a260:	6939      	ldr	r1, [r7, #16]
 800a262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	2203      	movs	r2, #3
 800a272:	fa02 f303 	lsl.w	r3, r2, r3
 800a276:	43db      	mvns	r3, r3
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4013      	ands	r3, r2
 800a27c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f003 0203 	and.w	r2, r3, #3
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	fa02 f303 	lsl.w	r3, r2, r3
 800a28e:	693a      	ldr	r2, [r7, #16]
 800a290:	4313      	orrs	r3, r2
 800a292:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 80a6 	beq.w	800a3f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2a8:	4b5b      	ldr	r3, [pc, #364]	; (800a418 <HAL_GPIO_Init+0x2e4>)
 800a2aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ac:	4a5a      	ldr	r2, [pc, #360]	; (800a418 <HAL_GPIO_Init+0x2e4>)
 800a2ae:	f043 0301 	orr.w	r3, r3, #1
 800a2b2:	6613      	str	r3, [r2, #96]	; 0x60
 800a2b4:	4b58      	ldr	r3, [pc, #352]	; (800a418 <HAL_GPIO_Init+0x2e4>)
 800a2b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	60bb      	str	r3, [r7, #8]
 800a2be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a2c0:	4a56      	ldr	r2, [pc, #344]	; (800a41c <HAL_GPIO_Init+0x2e8>)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	089b      	lsrs	r3, r3, #2
 800a2c6:	3302      	adds	r3, #2
 800a2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f003 0303 	and.w	r3, r3, #3
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	220f      	movs	r2, #15
 800a2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2dc:	43db      	mvns	r3, r3
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a2ea:	d01f      	beq.n	800a32c <HAL_GPIO_Init+0x1f8>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a4c      	ldr	r2, [pc, #304]	; (800a420 <HAL_GPIO_Init+0x2ec>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d019      	beq.n	800a328 <HAL_GPIO_Init+0x1f4>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a4b      	ldr	r2, [pc, #300]	; (800a424 <HAL_GPIO_Init+0x2f0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d013      	beq.n	800a324 <HAL_GPIO_Init+0x1f0>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a4a      	ldr	r2, [pc, #296]	; (800a428 <HAL_GPIO_Init+0x2f4>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d00d      	beq.n	800a320 <HAL_GPIO_Init+0x1ec>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a49      	ldr	r2, [pc, #292]	; (800a42c <HAL_GPIO_Init+0x2f8>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d007      	beq.n	800a31c <HAL_GPIO_Init+0x1e8>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a48      	ldr	r2, [pc, #288]	; (800a430 <HAL_GPIO_Init+0x2fc>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d101      	bne.n	800a318 <HAL_GPIO_Init+0x1e4>
 800a314:	2305      	movs	r3, #5
 800a316:	e00a      	b.n	800a32e <HAL_GPIO_Init+0x1fa>
 800a318:	2306      	movs	r3, #6
 800a31a:	e008      	b.n	800a32e <HAL_GPIO_Init+0x1fa>
 800a31c:	2304      	movs	r3, #4
 800a31e:	e006      	b.n	800a32e <HAL_GPIO_Init+0x1fa>
 800a320:	2303      	movs	r3, #3
 800a322:	e004      	b.n	800a32e <HAL_GPIO_Init+0x1fa>
 800a324:	2302      	movs	r3, #2
 800a326:	e002      	b.n	800a32e <HAL_GPIO_Init+0x1fa>
 800a328:	2301      	movs	r3, #1
 800a32a:	e000      	b.n	800a32e <HAL_GPIO_Init+0x1fa>
 800a32c:	2300      	movs	r3, #0
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	f002 0203 	and.w	r2, r2, #3
 800a334:	0092      	lsls	r2, r2, #2
 800a336:	4093      	lsls	r3, r2
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a33e:	4937      	ldr	r1, [pc, #220]	; (800a41c <HAL_GPIO_Init+0x2e8>)
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	089b      	lsrs	r3, r3, #2
 800a344:	3302      	adds	r3, #2
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a34c:	4b39      	ldr	r3, [pc, #228]	; (800a434 <HAL_GPIO_Init+0x300>)
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	43db      	mvns	r3, r3
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	4013      	ands	r3, r2
 800a35a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a370:	4a30      	ldr	r2, [pc, #192]	; (800a434 <HAL_GPIO_Init+0x300>)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a376:	4b2f      	ldr	r3, [pc, #188]	; (800a434 <HAL_GPIO_Init+0x300>)
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	43db      	mvns	r3, r3
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	4013      	ands	r3, r2
 800a384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4313      	orrs	r3, r2
 800a398:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a39a:	4a26      	ldr	r2, [pc, #152]	; (800a434 <HAL_GPIO_Init+0x300>)
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a3a0:	4b24      	ldr	r3, [pc, #144]	; (800a434 <HAL_GPIO_Init+0x300>)
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	43db      	mvns	r3, r3
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d003      	beq.n	800a3c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a3c4:	4a1b      	ldr	r2, [pc, #108]	; (800a434 <HAL_GPIO_Init+0x300>)
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a3ca:	4b1a      	ldr	r3, [pc, #104]	; (800a434 <HAL_GPIO_Init+0x300>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	43db      	mvns	r3, r3
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d003      	beq.n	800a3ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a3ee:	4a11      	ldr	r2, [pc, #68]	; (800a434 <HAL_GPIO_Init+0x300>)
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	fa22 f303 	lsr.w	r3, r2, r3
 800a404:	2b00      	cmp	r3, #0
 800a406:	f47f ae9d 	bne.w	800a144 <HAL_GPIO_Init+0x10>
  }
}
 800a40a:	bf00      	nop
 800a40c:	bf00      	nop
 800a40e:	371c      	adds	r7, #28
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	40021000 	.word	0x40021000
 800a41c:	40010000 	.word	0x40010000
 800a420:	48000400 	.word	0x48000400
 800a424:	48000800 	.word	0x48000800
 800a428:	48000c00 	.word	0x48000c00
 800a42c:	48001000 	.word	0x48001000
 800a430:	48001400 	.word	0x48001400
 800a434:	40010400 	.word	0x40010400

0800a438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691a      	ldr	r2, [r3, #16]
 800a448:	887b      	ldrh	r3, [r7, #2]
 800a44a:	4013      	ands	r3, r2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a450:	2301      	movs	r3, #1
 800a452:	73fb      	strb	r3, [r7, #15]
 800a454:	e001      	b.n	800a45a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a456:	2300      	movs	r3, #0
 800a458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	460b      	mov	r3, r1
 800a472:	807b      	strh	r3, [r7, #2]
 800a474:	4613      	mov	r3, r2
 800a476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a478:	787b      	ldrb	r3, [r7, #1]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a47e:	887a      	ldrh	r2, [r7, #2]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a484:	e002      	b.n	800a48c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a486:	887a      	ldrh	r2, [r7, #2]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	4603      	mov	r3, r0
 800a4a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a4a2:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a4a4:	695a      	ldr	r2, [r3, #20]
 800a4a6:	88fb      	ldrh	r3, [r7, #6]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d006      	beq.n	800a4bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a4ae:	4a05      	ldr	r2, [pc, #20]	; (800a4c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a4b0:	88fb      	ldrh	r3, [r7, #6]
 800a4b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a4b4:	88fb      	ldrh	r3, [r7, #6]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7f9 f9fc 	bl	80038b4 <HAL_GPIO_EXTI_Callback>
  }
}
 800a4bc:	bf00      	nop
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	40010400 	.word	0x40010400

0800a4c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d101      	bne.n	800a4da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e08d      	b.n	800a5f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d106      	bne.n	800a4f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7fb f8d8 	bl	80056a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2224      	movs	r2, #36	; 0x24
 800a4f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f022 0201 	bic.w	r2, r2, #1
 800a50a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a518:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689a      	ldr	r2, [r3, #8]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a528:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d107      	bne.n	800a542 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	689a      	ldr	r2, [r3, #8]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a53e:	609a      	str	r2, [r3, #8]
 800a540:	e006      	b.n	800a550 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	689a      	ldr	r2, [r3, #8]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a54e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	2b02      	cmp	r3, #2
 800a556:	d108      	bne.n	800a56a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a566:	605a      	str	r2, [r3, #4]
 800a568:	e007      	b.n	800a57a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a578:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	6812      	ldr	r2, [r2, #0]
 800a584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a58c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68da      	ldr	r2, [r3, #12]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a59c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	691a      	ldr	r2, [r3, #16]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	69d9      	ldr	r1, [r3, #28]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a1a      	ldr	r2, [r3, #32]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f042 0201 	orr.w	r2, r2, #1
 800a5d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2220      	movs	r2, #32
 800a5e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b083      	sub	sp, #12
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b20      	cmp	r3, #32
 800a612:	d138      	bne.n	800a686 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d101      	bne.n	800a622 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a61e:	2302      	movs	r3, #2
 800a620:	e032      	b.n	800a688 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2224      	movs	r2, #36	; 0x24
 800a62e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f022 0201 	bic.w	r2, r2, #1
 800a640:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a650:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	6819      	ldr	r1, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	430a      	orrs	r2, r1
 800a660:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f042 0201 	orr.w	r2, r2, #1
 800a670:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2220      	movs	r2, #32
 800a676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	e000      	b.n	800a688 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a686:	2302      	movs	r3, #2
  }
}
 800a688:	4618      	mov	r0, r3
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b20      	cmp	r3, #32
 800a6a8:	d139      	bne.n	800a71e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d101      	bne.n	800a6b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	e033      	b.n	800a720 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2224      	movs	r2, #36	; 0x24
 800a6c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f022 0201 	bic.w	r2, r2, #1
 800a6d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a6e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	021b      	lsls	r3, r3, #8
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f042 0201 	orr.w	r2, r2, #1
 800a708:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	e000      	b.n	800a720 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a71e:	2302      	movs	r3, #2
  }
}
 800a720:	4618      	mov	r0, r3
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d141      	bne.n	800a7be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a73a:	4b4b      	ldr	r3, [pc, #300]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a746:	d131      	bne.n	800a7ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a748:	4b47      	ldr	r3, [pc, #284]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a74e:	4a46      	ldr	r2, [pc, #280]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a758:	4b43      	ldr	r3, [pc, #268]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a760:	4a41      	ldr	r2, [pc, #260]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a766:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a768:	4b40      	ldr	r3, [pc, #256]	; (800a86c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2232      	movs	r2, #50	; 0x32
 800a76e:	fb02 f303 	mul.w	r3, r2, r3
 800a772:	4a3f      	ldr	r2, [pc, #252]	; (800a870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a774:	fba2 2303 	umull	r2, r3, r2, r3
 800a778:	0c9b      	lsrs	r3, r3, #18
 800a77a:	3301      	adds	r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a77e:	e002      	b.n	800a786 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	3b01      	subs	r3, #1
 800a784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a786:	4b38      	ldr	r3, [pc, #224]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a78e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a792:	d102      	bne.n	800a79a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1f2      	bne.n	800a780 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a79a:	4b33      	ldr	r3, [pc, #204]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7a6:	d158      	bne.n	800a85a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	e057      	b.n	800a85c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a7ac:	4b2e      	ldr	r3, [pc, #184]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7b2:	4a2d      	ldr	r2, [pc, #180]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a7bc:	e04d      	b.n	800a85a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7c4:	d141      	bne.n	800a84a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a7c6:	4b28      	ldr	r3, [pc, #160]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7d2:	d131      	bne.n	800a838 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a7d4:	4b24      	ldr	r3, [pc, #144]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7da:	4a23      	ldr	r2, [pc, #140]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a7e4:	4b20      	ldr	r3, [pc, #128]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a7ec:	4a1e      	ldr	r2, [pc, #120]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a7f4:	4b1d      	ldr	r3, [pc, #116]	; (800a86c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2232      	movs	r2, #50	; 0x32
 800a7fa:	fb02 f303 	mul.w	r3, r2, r3
 800a7fe:	4a1c      	ldr	r2, [pc, #112]	; (800a870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a800:	fba2 2303 	umull	r2, r3, r2, r3
 800a804:	0c9b      	lsrs	r3, r3, #18
 800a806:	3301      	adds	r3, #1
 800a808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a80a:	e002      	b.n	800a812 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	3b01      	subs	r3, #1
 800a810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a812:	4b15      	ldr	r3, [pc, #84]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a81a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a81e:	d102      	bne.n	800a826 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1f2      	bne.n	800a80c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a826:	4b10      	ldr	r3, [pc, #64]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a82e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a832:	d112      	bne.n	800a85a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e011      	b.n	800a85c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a838:	4b0b      	ldr	r3, [pc, #44]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a83e:	4a0a      	ldr	r2, [pc, #40]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a844:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a848:	e007      	b.n	800a85a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a84a:	4b07      	ldr	r3, [pc, #28]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a852:	4a05      	ldr	r2, [pc, #20]	; (800a868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a858:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	40007000 	.word	0x40007000
 800a86c:	200001d8 	.word	0x200001d8
 800a870:	431bde83 	.word	0x431bde83

0800a874 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a874:	b480      	push	{r7}
 800a876:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	4a04      	ldr	r2, [pc, #16]	; (800a890 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a87e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a882:	6093      	str	r3, [r2, #8]
}
 800a884:	bf00      	nop
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	40007000 	.word	0x40007000

0800a894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e2fe      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d075      	beq.n	800a99e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8b2:	4b97      	ldr	r3, [pc, #604]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	f003 030c 	and.w	r3, r3, #12
 800a8ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a8bc:	4b94      	ldr	r3, [pc, #592]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	f003 0303 	and.w	r3, r3, #3
 800a8c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	2b0c      	cmp	r3, #12
 800a8ca:	d102      	bne.n	800a8d2 <HAL_RCC_OscConfig+0x3e>
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d002      	beq.n	800a8d8 <HAL_RCC_OscConfig+0x44>
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	2b08      	cmp	r3, #8
 800a8d6:	d10b      	bne.n	800a8f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8d8:	4b8d      	ldr	r3, [pc, #564]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d05b      	beq.n	800a99c <HAL_RCC_OscConfig+0x108>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d157      	bne.n	800a99c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e2d9      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8f8:	d106      	bne.n	800a908 <HAL_RCC_OscConfig+0x74>
 800a8fa:	4b85      	ldr	r3, [pc, #532]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a84      	ldr	r2, [pc, #528]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	e01d      	b.n	800a944 <HAL_RCC_OscConfig+0xb0>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a910:	d10c      	bne.n	800a92c <HAL_RCC_OscConfig+0x98>
 800a912:	4b7f      	ldr	r3, [pc, #508]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a7e      	ldr	r2, [pc, #504]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a91c:	6013      	str	r3, [r2, #0]
 800a91e:	4b7c      	ldr	r3, [pc, #496]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a7b      	ldr	r2, [pc, #492]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	e00b      	b.n	800a944 <HAL_RCC_OscConfig+0xb0>
 800a92c:	4b78      	ldr	r3, [pc, #480]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a77      	ldr	r2, [pc, #476]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	4b75      	ldr	r3, [pc, #468]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a74      	ldr	r2, [pc, #464]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a93e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d013      	beq.n	800a974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a94c:	f7fb ffcc 	bl	80068e8 <HAL_GetTick>
 800a950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a952:	e008      	b.n	800a966 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a954:	f7fb ffc8 	bl	80068e8 <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b64      	cmp	r3, #100	; 0x64
 800a960:	d901      	bls.n	800a966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e29e      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a966:	4b6a      	ldr	r3, [pc, #424]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0f0      	beq.n	800a954 <HAL_RCC_OscConfig+0xc0>
 800a972:	e014      	b.n	800a99e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a974:	f7fb ffb8 	bl	80068e8 <HAL_GetTick>
 800a978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a97a:	e008      	b.n	800a98e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a97c:	f7fb ffb4 	bl	80068e8 <HAL_GetTick>
 800a980:	4602      	mov	r2, r0
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	2b64      	cmp	r3, #100	; 0x64
 800a988:	d901      	bls.n	800a98e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e28a      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a98e:	4b60      	ldr	r3, [pc, #384]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1f0      	bne.n	800a97c <HAL_RCC_OscConfig+0xe8>
 800a99a:	e000      	b.n	800a99e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a99c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d075      	beq.n	800aa96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9aa:	4b59      	ldr	r3, [pc, #356]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f003 030c 	and.w	r3, r3, #12
 800a9b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a9b4:	4b56      	ldr	r3, [pc, #344]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	f003 0303 	and.w	r3, r3, #3
 800a9bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	2b0c      	cmp	r3, #12
 800a9c2:	d102      	bne.n	800a9ca <HAL_RCC_OscConfig+0x136>
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d002      	beq.n	800a9d0 <HAL_RCC_OscConfig+0x13c>
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	2b04      	cmp	r3, #4
 800a9ce:	d11f      	bne.n	800aa10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9d0:	4b4f      	ldr	r3, [pc, #316]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d005      	beq.n	800a9e8 <HAL_RCC_OscConfig+0x154>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e25d      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9e8:	4b49      	ldr	r3, [pc, #292]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	061b      	lsls	r3, r3, #24
 800a9f6:	4946      	ldr	r1, [pc, #280]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a9fc:	4b45      	ldr	r3, [pc, #276]	; (800ab14 <HAL_RCC_OscConfig+0x280>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7fb ff25 	bl	8006850 <HAL_InitTick>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d043      	beq.n	800aa94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e249      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d023      	beq.n	800aa60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa18:	4b3d      	ldr	r3, [pc, #244]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a3c      	ldr	r2, [pc, #240]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aa1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa24:	f7fb ff60 	bl	80068e8 <HAL_GetTick>
 800aa28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa2a:	e008      	b.n	800aa3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa2c:	f7fb ff5c 	bl	80068e8 <HAL_GetTick>
 800aa30:	4602      	mov	r2, r0
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d901      	bls.n	800aa3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e232      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa3e:	4b34      	ldr	r3, [pc, #208]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d0f0      	beq.n	800aa2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa4a:	4b31      	ldr	r3, [pc, #196]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	061b      	lsls	r3, r3, #24
 800aa58:	492d      	ldr	r1, [pc, #180]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	604b      	str	r3, [r1, #4]
 800aa5e:	e01a      	b.n	800aa96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa60:	4b2b      	ldr	r3, [pc, #172]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a2a      	ldr	r2, [pc, #168]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aa66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa6c:	f7fb ff3c 	bl	80068e8 <HAL_GetTick>
 800aa70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aa72:	e008      	b.n	800aa86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa74:	f7fb ff38 	bl	80068e8 <HAL_GetTick>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d901      	bls.n	800aa86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800aa82:	2303      	movs	r3, #3
 800aa84:	e20e      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aa86:	4b22      	ldr	r3, [pc, #136]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1f0      	bne.n	800aa74 <HAL_RCC_OscConfig+0x1e0>
 800aa92:	e000      	b.n	800aa96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 0308 	and.w	r3, r3, #8
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d041      	beq.n	800ab26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d01c      	beq.n	800aae4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aaaa:	4b19      	ldr	r3, [pc, #100]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aaac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aab0:	4a17      	ldr	r2, [pc, #92]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aab2:	f043 0301 	orr.w	r3, r3, #1
 800aab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaba:	f7fb ff15 	bl	80068e8 <HAL_GetTick>
 800aabe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aac0:	e008      	b.n	800aad4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aac2:	f7fb ff11 	bl	80068e8 <HAL_GetTick>
 800aac6:	4602      	mov	r2, r0
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d901      	bls.n	800aad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800aad0:	2303      	movs	r3, #3
 800aad2:	e1e7      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aad4:	4b0e      	ldr	r3, [pc, #56]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aada:	f003 0302 	and.w	r3, r3, #2
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d0ef      	beq.n	800aac2 <HAL_RCC_OscConfig+0x22e>
 800aae2:	e020      	b.n	800ab26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aae4:	4b0a      	ldr	r3, [pc, #40]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aaea:	4a09      	ldr	r2, [pc, #36]	; (800ab10 <HAL_RCC_OscConfig+0x27c>)
 800aaec:	f023 0301 	bic.w	r3, r3, #1
 800aaf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaf4:	f7fb fef8 	bl	80068e8 <HAL_GetTick>
 800aaf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aafa:	e00d      	b.n	800ab18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aafc:	f7fb fef4 	bl	80068e8 <HAL_GetTick>
 800ab00:	4602      	mov	r2, r0
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d906      	bls.n	800ab18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e1ca      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
 800ab0e:	bf00      	nop
 800ab10:	40021000 	.word	0x40021000
 800ab14:	200001ec 	.word	0x200001ec
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ab18:	4b8c      	ldr	r3, [pc, #560]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ab1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab1e:	f003 0302 	and.w	r3, r3, #2
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1ea      	bne.n	800aafc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0304 	and.w	r3, r3, #4
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f000 80a6 	beq.w	800ac80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab34:	2300      	movs	r3, #0
 800ab36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ab38:	4b84      	ldr	r3, [pc, #528]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ab3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <HAL_RCC_OscConfig+0x2b4>
 800ab44:	2301      	movs	r3, #1
 800ab46:	e000      	b.n	800ab4a <HAL_RCC_OscConfig+0x2b6>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00d      	beq.n	800ab6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab4e:	4b7f      	ldr	r3, [pc, #508]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ab50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab52:	4a7e      	ldr	r2, [pc, #504]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ab54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab58:	6593      	str	r3, [r2, #88]	; 0x58
 800ab5a:	4b7c      	ldr	r3, [pc, #496]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ab5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ab66:	2301      	movs	r3, #1
 800ab68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab6a:	4b79      	ldr	r3, [pc, #484]	; (800ad50 <HAL_RCC_OscConfig+0x4bc>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d118      	bne.n	800aba8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab76:	4b76      	ldr	r3, [pc, #472]	; (800ad50 <HAL_RCC_OscConfig+0x4bc>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a75      	ldr	r2, [pc, #468]	; (800ad50 <HAL_RCC_OscConfig+0x4bc>)
 800ab7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab82:	f7fb feb1 	bl	80068e8 <HAL_GetTick>
 800ab86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab88:	e008      	b.n	800ab9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab8a:	f7fb fead 	bl	80068e8 <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d901      	bls.n	800ab9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e183      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab9c:	4b6c      	ldr	r3, [pc, #432]	; (800ad50 <HAL_RCC_OscConfig+0x4bc>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0f0      	beq.n	800ab8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d108      	bne.n	800abc2 <HAL_RCC_OscConfig+0x32e>
 800abb0:	4b66      	ldr	r3, [pc, #408]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800abb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abb6:	4a65      	ldr	r2, [pc, #404]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800abb8:	f043 0301 	orr.w	r3, r3, #1
 800abbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800abc0:	e024      	b.n	800ac0c <HAL_RCC_OscConfig+0x378>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	2b05      	cmp	r3, #5
 800abc8:	d110      	bne.n	800abec <HAL_RCC_OscConfig+0x358>
 800abca:	4b60      	ldr	r3, [pc, #384]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800abcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abd0:	4a5e      	ldr	r2, [pc, #376]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800abd2:	f043 0304 	orr.w	r3, r3, #4
 800abd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800abda:	4b5c      	ldr	r3, [pc, #368]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800abdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abe0:	4a5a      	ldr	r2, [pc, #360]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800abe2:	f043 0301 	orr.w	r3, r3, #1
 800abe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800abea:	e00f      	b.n	800ac0c <HAL_RCC_OscConfig+0x378>
 800abec:	4b57      	ldr	r3, [pc, #348]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800abee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abf2:	4a56      	ldr	r2, [pc, #344]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800abf4:	f023 0301 	bic.w	r3, r3, #1
 800abf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800abfc:	4b53      	ldr	r3, [pc, #332]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800abfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac02:	4a52      	ldr	r2, [pc, #328]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ac04:	f023 0304 	bic.w	r3, r3, #4
 800ac08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d016      	beq.n	800ac42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac14:	f7fb fe68 	bl	80068e8 <HAL_GetTick>
 800ac18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ac1a:	e00a      	b.n	800ac32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac1c:	f7fb fe64 	bl	80068e8 <HAL_GetTick>
 800ac20:	4602      	mov	r2, r0
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d901      	bls.n	800ac32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e138      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ac32:	4b46      	ldr	r3, [pc, #280]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ac34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0ed      	beq.n	800ac1c <HAL_RCC_OscConfig+0x388>
 800ac40:	e015      	b.n	800ac6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac42:	f7fb fe51 	bl	80068e8 <HAL_GetTick>
 800ac46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ac48:	e00a      	b.n	800ac60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac4a:	f7fb fe4d 	bl	80068e8 <HAL_GetTick>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d901      	bls.n	800ac60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e121      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ac60:	4b3a      	ldr	r3, [pc, #232]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ac62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1ed      	bne.n	800ac4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ac6e:	7ffb      	ldrb	r3, [r7, #31]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d105      	bne.n	800ac80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac74:	4b35      	ldr	r3, [pc, #212]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ac76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac78:	4a34      	ldr	r2, [pc, #208]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ac7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 0320 	and.w	r3, r3, #32
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d03c      	beq.n	800ad06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d01c      	beq.n	800acce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac94:	4b2d      	ldr	r3, [pc, #180]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ac96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac9a:	4a2c      	ldr	r2, [pc, #176]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ac9c:	f043 0301 	orr.w	r3, r3, #1
 800aca0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aca4:	f7fb fe20 	bl	80068e8 <HAL_GetTick>
 800aca8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800acaa:	e008      	b.n	800acbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800acac:	f7fb fe1c 	bl	80068e8 <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e0f2      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800acbe:	4b23      	ldr	r3, [pc, #140]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800acc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acc4:	f003 0302 	and.w	r3, r3, #2
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d0ef      	beq.n	800acac <HAL_RCC_OscConfig+0x418>
 800accc:	e01b      	b.n	800ad06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800acce:	4b1f      	ldr	r3, [pc, #124]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800acd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acd4:	4a1d      	ldr	r2, [pc, #116]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800acd6:	f023 0301 	bic.w	r3, r3, #1
 800acda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acde:	f7fb fe03 	bl	80068e8 <HAL_GetTick>
 800ace2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ace4:	e008      	b.n	800acf8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ace6:	f7fb fdff 	bl	80068e8 <HAL_GetTick>
 800acea:	4602      	mov	r2, r0
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d901      	bls.n	800acf8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800acf4:	2303      	movs	r3, #3
 800acf6:	e0d5      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800acf8:	4b14      	ldr	r3, [pc, #80]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800acfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acfe:	f003 0302 	and.w	r3, r3, #2
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1ef      	bne.n	800ace6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	69db      	ldr	r3, [r3, #28]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f000 80c9 	beq.w	800aea2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ad10:	4b0e      	ldr	r3, [pc, #56]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	f003 030c 	and.w	r3, r3, #12
 800ad18:	2b0c      	cmp	r3, #12
 800ad1a:	f000 8083 	beq.w	800ae24 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	69db      	ldr	r3, [r3, #28]
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d15e      	bne.n	800ade4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad26:	4b09      	ldr	r3, [pc, #36]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a08      	ldr	r2, [pc, #32]	; (800ad4c <HAL_RCC_OscConfig+0x4b8>)
 800ad2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad32:	f7fb fdd9 	bl	80068e8 <HAL_GetTick>
 800ad36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad38:	e00c      	b.n	800ad54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad3a:	f7fb fdd5 	bl	80068e8 <HAL_GetTick>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d905      	bls.n	800ad54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e0ab      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
 800ad4c:	40021000 	.word	0x40021000
 800ad50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad54:	4b55      	ldr	r3, [pc, #340]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1ec      	bne.n	800ad3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad60:	4b52      	ldr	r3, [pc, #328]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800ad62:	68da      	ldr	r2, [r3, #12]
 800ad64:	4b52      	ldr	r3, [pc, #328]	; (800aeb0 <HAL_RCC_OscConfig+0x61c>)
 800ad66:	4013      	ands	r3, r2
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	6a11      	ldr	r1, [r2, #32]
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ad70:	3a01      	subs	r2, #1
 800ad72:	0112      	lsls	r2, r2, #4
 800ad74:	4311      	orrs	r1, r2
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ad7a:	0212      	lsls	r2, r2, #8
 800ad7c:	4311      	orrs	r1, r2
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ad82:	0852      	lsrs	r2, r2, #1
 800ad84:	3a01      	subs	r2, #1
 800ad86:	0552      	lsls	r2, r2, #21
 800ad88:	4311      	orrs	r1, r2
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ad8e:	0852      	lsrs	r2, r2, #1
 800ad90:	3a01      	subs	r2, #1
 800ad92:	0652      	lsls	r2, r2, #25
 800ad94:	4311      	orrs	r1, r2
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ad9a:	06d2      	lsls	r2, r2, #27
 800ad9c:	430a      	orrs	r2, r1
 800ad9e:	4943      	ldr	r1, [pc, #268]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ada4:	4b41      	ldr	r3, [pc, #260]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a40      	ldr	r2, [pc, #256]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800adaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800adb0:	4b3e      	ldr	r3, [pc, #248]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	4a3d      	ldr	r2, [pc, #244]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800adb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adbc:	f7fb fd94 	bl	80068e8 <HAL_GetTick>
 800adc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adc2:	e008      	b.n	800add6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adc4:	f7fb fd90 	bl	80068e8 <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	2b02      	cmp	r3, #2
 800add0:	d901      	bls.n	800add6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e066      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800add6:	4b35      	ldr	r3, [pc, #212]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0f0      	beq.n	800adc4 <HAL_RCC_OscConfig+0x530>
 800ade2:	e05e      	b.n	800aea2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ade4:	4b31      	ldr	r3, [pc, #196]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a30      	ldr	r2, [pc, #192]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800adea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800adee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adf0:	f7fb fd7a 	bl	80068e8 <HAL_GetTick>
 800adf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800adf6:	e008      	b.n	800ae0a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adf8:	f7fb fd76 	bl	80068e8 <HAL_GetTick>
 800adfc:	4602      	mov	r2, r0
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d901      	bls.n	800ae0a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e04c      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae0a:	4b28      	ldr	r3, [pc, #160]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1f0      	bne.n	800adf8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ae16:	4b25      	ldr	r3, [pc, #148]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800ae18:	68da      	ldr	r2, [r3, #12]
 800ae1a:	4924      	ldr	r1, [pc, #144]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800ae1c:	4b25      	ldr	r3, [pc, #148]	; (800aeb4 <HAL_RCC_OscConfig+0x620>)
 800ae1e:	4013      	ands	r3, r2
 800ae20:	60cb      	str	r3, [r1, #12]
 800ae22:	e03e      	b.n	800aea2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	69db      	ldr	r3, [r3, #28]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d101      	bne.n	800ae30 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e039      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800ae30:	4b1e      	ldr	r3, [pc, #120]	; (800aeac <HAL_RCC_OscConfig+0x618>)
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f003 0203 	and.w	r2, r3, #3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a1b      	ldr	r3, [r3, #32]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d12c      	bne.n	800ae9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d123      	bne.n	800ae9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d11b      	bne.n	800ae9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d113      	bne.n	800ae9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae80:	085b      	lsrs	r3, r3, #1
 800ae82:	3b01      	subs	r3, #1
 800ae84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d109      	bne.n	800ae9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae94:	085b      	lsrs	r3, r3, #1
 800ae96:	3b01      	subs	r3, #1
 800ae98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d001      	beq.n	800aea2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3720      	adds	r7, #32
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	40021000 	.word	0x40021000
 800aeb0:	019f800c 	.word	0x019f800c
 800aeb4:	feeefffc 	.word	0xfeeefffc

0800aeb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800aec2:	2300      	movs	r3, #0
 800aec4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e11e      	b.n	800b10e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aed0:	4b91      	ldr	r3, [pc, #580]	; (800b118 <HAL_RCC_ClockConfig+0x260>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 030f 	and.w	r3, r3, #15
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d910      	bls.n	800af00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aede:	4b8e      	ldr	r3, [pc, #568]	; (800b118 <HAL_RCC_ClockConfig+0x260>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f023 020f 	bic.w	r2, r3, #15
 800aee6:	498c      	ldr	r1, [pc, #560]	; (800b118 <HAL_RCC_ClockConfig+0x260>)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeee:	4b8a      	ldr	r3, [pc, #552]	; (800b118 <HAL_RCC_ClockConfig+0x260>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 030f 	and.w	r3, r3, #15
 800aef6:	683a      	ldr	r2, [r7, #0]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d001      	beq.n	800af00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e106      	b.n	800b10e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0301 	and.w	r3, r3, #1
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d073      	beq.n	800aff4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	2b03      	cmp	r3, #3
 800af12:	d129      	bne.n	800af68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af14:	4b81      	ldr	r3, [pc, #516]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e0f4      	b.n	800b10e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800af24:	f000 f99e 	bl	800b264 <RCC_GetSysClockFreqFromPLLSource>
 800af28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	4a7c      	ldr	r2, [pc, #496]	; (800b120 <HAL_RCC_ClockConfig+0x268>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d93f      	bls.n	800afb2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800af32:	4b7a      	ldr	r3, [pc, #488]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d009      	beq.n	800af52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800af46:	2b00      	cmp	r3, #0
 800af48:	d033      	beq.n	800afb2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d12f      	bne.n	800afb2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800af52:	4b72      	ldr	r3, [pc, #456]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af5a:	4a70      	ldr	r2, [pc, #448]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800af5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800af62:	2380      	movs	r3, #128	; 0x80
 800af64:	617b      	str	r3, [r7, #20]
 800af66:	e024      	b.n	800afb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d107      	bne.n	800af80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af70:	4b6a      	ldr	r3, [pc, #424]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d109      	bne.n	800af90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e0c6      	b.n	800b10e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800af80:	4b66      	ldr	r3, [pc, #408]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e0be      	b.n	800b10e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800af90:	f000 f8ce 	bl	800b130 <HAL_RCC_GetSysClockFreq>
 800af94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	4a61      	ldr	r2, [pc, #388]	; (800b120 <HAL_RCC_ClockConfig+0x268>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d909      	bls.n	800afb2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800af9e:	4b5f      	ldr	r3, [pc, #380]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afa6:	4a5d      	ldr	r2, [pc, #372]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800afa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800afae:	2380      	movs	r3, #128	; 0x80
 800afb0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800afb2:	4b5a      	ldr	r3, [pc, #360]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f023 0203 	bic.w	r2, r3, #3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	4957      	ldr	r1, [pc, #348]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800afc0:	4313      	orrs	r3, r2
 800afc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afc4:	f7fb fc90 	bl	80068e8 <HAL_GetTick>
 800afc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afca:	e00a      	b.n	800afe2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afcc:	f7fb fc8c 	bl	80068e8 <HAL_GetTick>
 800afd0:	4602      	mov	r2, r0
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800afda:	4293      	cmp	r3, r2
 800afdc:	d901      	bls.n	800afe2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800afde:	2303      	movs	r3, #3
 800afe0:	e095      	b.n	800b10e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afe2:	4b4e      	ldr	r3, [pc, #312]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	f003 020c 	and.w	r2, r3, #12
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d1eb      	bne.n	800afcc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 0302 	and.w	r3, r3, #2
 800affc:	2b00      	cmp	r3, #0
 800affe:	d023      	beq.n	800b048 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0304 	and.w	r3, r3, #4
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d005      	beq.n	800b018 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b00c:	4b43      	ldr	r3, [pc, #268]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	4a42      	ldr	r2, [pc, #264]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b012:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b016:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0308 	and.w	r3, r3, #8
 800b020:	2b00      	cmp	r3, #0
 800b022:	d007      	beq.n	800b034 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b024:	4b3d      	ldr	r3, [pc, #244]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b02c:	4a3b      	ldr	r2, [pc, #236]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b02e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b032:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b034:	4b39      	ldr	r3, [pc, #228]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	4936      	ldr	r1, [pc, #216]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b042:	4313      	orrs	r3, r2
 800b044:	608b      	str	r3, [r1, #8]
 800b046:	e008      	b.n	800b05a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	2b80      	cmp	r3, #128	; 0x80
 800b04c:	d105      	bne.n	800b05a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b04e:	4b33      	ldr	r3, [pc, #204]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	4a32      	ldr	r2, [pc, #200]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b058:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b05a:	4b2f      	ldr	r3, [pc, #188]	; (800b118 <HAL_RCC_ClockConfig+0x260>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 030f 	and.w	r3, r3, #15
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	429a      	cmp	r2, r3
 800b066:	d21d      	bcs.n	800b0a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b068:	4b2b      	ldr	r3, [pc, #172]	; (800b118 <HAL_RCC_ClockConfig+0x260>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f023 020f 	bic.w	r2, r3, #15
 800b070:	4929      	ldr	r1, [pc, #164]	; (800b118 <HAL_RCC_ClockConfig+0x260>)
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	4313      	orrs	r3, r2
 800b076:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b078:	f7fb fc36 	bl	80068e8 <HAL_GetTick>
 800b07c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b07e:	e00a      	b.n	800b096 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b080:	f7fb fc32 	bl	80068e8 <HAL_GetTick>
 800b084:	4602      	mov	r2, r0
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b08e:	4293      	cmp	r3, r2
 800b090:	d901      	bls.n	800b096 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b092:	2303      	movs	r3, #3
 800b094:	e03b      	b.n	800b10e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b096:	4b20      	ldr	r3, [pc, #128]	; (800b118 <HAL_RCC_ClockConfig+0x260>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 030f 	and.w	r3, r3, #15
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d1ed      	bne.n	800b080 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 0304 	and.w	r3, r3, #4
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d008      	beq.n	800b0c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b0b0:	4b1a      	ldr	r3, [pc, #104]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	4917      	ldr	r1, [pc, #92]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 0308 	and.w	r3, r3, #8
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d009      	beq.n	800b0e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b0ce:	4b13      	ldr	r3, [pc, #76]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	00db      	lsls	r3, r3, #3
 800b0dc:	490f      	ldr	r1, [pc, #60]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b0e2:	f000 f825 	bl	800b130 <HAL_RCC_GetSysClockFreq>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	4b0c      	ldr	r3, [pc, #48]	; (800b11c <HAL_RCC_ClockConfig+0x264>)
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	091b      	lsrs	r3, r3, #4
 800b0ee:	f003 030f 	and.w	r3, r3, #15
 800b0f2:	490c      	ldr	r1, [pc, #48]	; (800b124 <HAL_RCC_ClockConfig+0x26c>)
 800b0f4:	5ccb      	ldrb	r3, [r1, r3]
 800b0f6:	f003 031f 	and.w	r3, r3, #31
 800b0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fe:	4a0a      	ldr	r2, [pc, #40]	; (800b128 <HAL_RCC_ClockConfig+0x270>)
 800b100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b102:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <HAL_RCC_ClockConfig+0x274>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4618      	mov	r0, r3
 800b108:	f7fb fba2 	bl	8006850 <HAL_InitTick>
 800b10c:	4603      	mov	r3, r0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3718      	adds	r7, #24
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	40022000 	.word	0x40022000
 800b11c:	40021000 	.word	0x40021000
 800b120:	04c4b400 	.word	0x04c4b400
 800b124:	08015ef4 	.word	0x08015ef4
 800b128:	200001d8 	.word	0x200001d8
 800b12c:	200001ec 	.word	0x200001ec

0800b130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b130:	b480      	push	{r7}
 800b132:	b087      	sub	sp, #28
 800b134:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b136:	4b2c      	ldr	r3, [pc, #176]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	f003 030c 	and.w	r3, r3, #12
 800b13e:	2b04      	cmp	r3, #4
 800b140:	d102      	bne.n	800b148 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b142:	4b2a      	ldr	r3, [pc, #168]	; (800b1ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800b144:	613b      	str	r3, [r7, #16]
 800b146:	e047      	b.n	800b1d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b148:	4b27      	ldr	r3, [pc, #156]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	f003 030c 	and.w	r3, r3, #12
 800b150:	2b08      	cmp	r3, #8
 800b152:	d102      	bne.n	800b15a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b154:	4b26      	ldr	r3, [pc, #152]	; (800b1f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b156:	613b      	str	r3, [r7, #16]
 800b158:	e03e      	b.n	800b1d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b15a:	4b23      	ldr	r3, [pc, #140]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	f003 030c 	and.w	r3, r3, #12
 800b162:	2b0c      	cmp	r3, #12
 800b164:	d136      	bne.n	800b1d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b166:	4b20      	ldr	r3, [pc, #128]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b170:	4b1d      	ldr	r3, [pc, #116]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	091b      	lsrs	r3, r3, #4
 800b176:	f003 030f 	and.w	r3, r3, #15
 800b17a:	3301      	adds	r3, #1
 800b17c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b03      	cmp	r3, #3
 800b182:	d10c      	bne.n	800b19e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b184:	4a1a      	ldr	r2, [pc, #104]	; (800b1f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	fbb2 f3f3 	udiv	r3, r2, r3
 800b18c:	4a16      	ldr	r2, [pc, #88]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b18e:	68d2      	ldr	r2, [r2, #12]
 800b190:	0a12      	lsrs	r2, r2, #8
 800b192:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b196:	fb02 f303 	mul.w	r3, r2, r3
 800b19a:	617b      	str	r3, [r7, #20]
      break;
 800b19c:	e00c      	b.n	800b1b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b19e:	4a13      	ldr	r2, [pc, #76]	; (800b1ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a6:	4a10      	ldr	r2, [pc, #64]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1a8:	68d2      	ldr	r2, [r2, #12]
 800b1aa:	0a12      	lsrs	r2, r2, #8
 800b1ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b1b0:	fb02 f303 	mul.w	r3, r2, r3
 800b1b4:	617b      	str	r3, [r7, #20]
      break;
 800b1b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b1b8:	4b0b      	ldr	r3, [pc, #44]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	0e5b      	lsrs	r3, r3, #25
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	005b      	lsls	r3, r3, #1
 800b1c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1d0:	613b      	str	r3, [r7, #16]
 800b1d2:	e001      	b.n	800b1d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b1d8:	693b      	ldr	r3, [r7, #16]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	371c      	adds	r7, #28
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	40021000 	.word	0x40021000
 800b1ec:	00f42400 	.word	0x00f42400
 800b1f0:	007a1200 	.word	0x007a1200

0800b1f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b1f8:	4b03      	ldr	r3, [pc, #12]	; (800b208 <HAL_RCC_GetHCLKFreq+0x14>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	200001d8 	.word	0x200001d8

0800b20c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b210:	f7ff fff0 	bl	800b1f4 <HAL_RCC_GetHCLKFreq>
 800b214:	4602      	mov	r2, r0
 800b216:	4b06      	ldr	r3, [pc, #24]	; (800b230 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	0a1b      	lsrs	r3, r3, #8
 800b21c:	f003 0307 	and.w	r3, r3, #7
 800b220:	4904      	ldr	r1, [pc, #16]	; (800b234 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b222:	5ccb      	ldrb	r3, [r1, r3]
 800b224:	f003 031f 	and.w	r3, r3, #31
 800b228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	40021000 	.word	0x40021000
 800b234:	08015f04 	.word	0x08015f04

0800b238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b23c:	f7ff ffda 	bl	800b1f4 <HAL_RCC_GetHCLKFreq>
 800b240:	4602      	mov	r2, r0
 800b242:	4b06      	ldr	r3, [pc, #24]	; (800b25c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	0adb      	lsrs	r3, r3, #11
 800b248:	f003 0307 	and.w	r3, r3, #7
 800b24c:	4904      	ldr	r1, [pc, #16]	; (800b260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b24e:	5ccb      	ldrb	r3, [r1, r3]
 800b250:	f003 031f 	and.w	r3, r3, #31
 800b254:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b258:	4618      	mov	r0, r3
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	40021000 	.word	0x40021000
 800b260:	08015f04 	.word	0x08015f04

0800b264 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b264:	b480      	push	{r7}
 800b266:	b087      	sub	sp, #28
 800b268:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b26a:	4b1e      	ldr	r3, [pc, #120]	; (800b2e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	f003 0303 	and.w	r3, r3, #3
 800b272:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b274:	4b1b      	ldr	r3, [pc, #108]	; (800b2e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	091b      	lsrs	r3, r3, #4
 800b27a:	f003 030f 	and.w	r3, r3, #15
 800b27e:	3301      	adds	r3, #1
 800b280:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b03      	cmp	r3, #3
 800b286:	d10c      	bne.n	800b2a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b288:	4a17      	ldr	r2, [pc, #92]	; (800b2e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b290:	4a14      	ldr	r2, [pc, #80]	; (800b2e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b292:	68d2      	ldr	r2, [r2, #12]
 800b294:	0a12      	lsrs	r2, r2, #8
 800b296:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b29a:	fb02 f303 	mul.w	r3, r2, r3
 800b29e:	617b      	str	r3, [r7, #20]
    break;
 800b2a0:	e00c      	b.n	800b2bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b2a2:	4a12      	ldr	r2, [pc, #72]	; (800b2ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2aa:	4a0e      	ldr	r2, [pc, #56]	; (800b2e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b2ac:	68d2      	ldr	r2, [r2, #12]
 800b2ae:	0a12      	lsrs	r2, r2, #8
 800b2b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b2b4:	fb02 f303 	mul.w	r3, r2, r3
 800b2b8:	617b      	str	r3, [r7, #20]
    break;
 800b2ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b2bc:	4b09      	ldr	r3, [pc, #36]	; (800b2e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	0e5b      	lsrs	r3, r3, #25
 800b2c2:	f003 0303 	and.w	r3, r3, #3
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b2cc:	697a      	ldr	r2, [r7, #20]
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b2d6:	687b      	ldr	r3, [r7, #4]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	371c      	adds	r7, #28
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	40021000 	.word	0x40021000
 800b2e8:	007a1200 	.word	0x007a1200
 800b2ec:	00f42400 	.word	0x00f42400

0800b2f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f000 8098 	beq.w	800b43e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b30e:	2300      	movs	r3, #0
 800b310:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b312:	4b43      	ldr	r3, [pc, #268]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10d      	bne.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b31e:	4b40      	ldr	r3, [pc, #256]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b322:	4a3f      	ldr	r2, [pc, #252]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b328:	6593      	str	r3, [r2, #88]	; 0x58
 800b32a:	4b3d      	ldr	r3, [pc, #244]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b32e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b332:	60bb      	str	r3, [r7, #8]
 800b334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b336:	2301      	movs	r3, #1
 800b338:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b33a:	4b3a      	ldr	r3, [pc, #232]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a39      	ldr	r2, [pc, #228]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b344:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b346:	f7fb facf 	bl	80068e8 <HAL_GetTick>
 800b34a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b34c:	e009      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b34e:	f7fb facb 	bl	80068e8 <HAL_GetTick>
 800b352:	4602      	mov	r2, r0
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d902      	bls.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b35c:	2303      	movs	r3, #3
 800b35e:	74fb      	strb	r3, [r7, #19]
        break;
 800b360:	e005      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b362:	4b30      	ldr	r3, [pc, #192]	; (800b424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0ef      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b36e:	7cfb      	ldrb	r3, [r7, #19]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d159      	bne.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b374:	4b2a      	ldr	r3, [pc, #168]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b37a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b37e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d01e      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d019      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b390:	4b23      	ldr	r3, [pc, #140]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b39a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b39c:	4b20      	ldr	r3, [pc, #128]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b39e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3a2:	4a1f      	ldr	r2, [pc, #124]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b3ac:	4b1c      	ldr	r3, [pc, #112]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b2:	4a1b      	ldr	r2, [pc, #108]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b3bc:	4a18      	ldr	r2, [pc, #96]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	f003 0301 	and.w	r3, r3, #1
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d016      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3ce:	f7fb fa8b 	bl	80068e8 <HAL_GetTick>
 800b3d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b3d4:	e00b      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3d6:	f7fb fa87 	bl	80068e8 <HAL_GetTick>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d902      	bls.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	74fb      	strb	r3, [r7, #19]
            break;
 800b3ec:	e006      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d0ec      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b3fc:	7cfb      	ldrb	r3, [r7, #19]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10b      	bne.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b402:	4b07      	ldr	r3, [pc, #28]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b410:	4903      	ldr	r1, [pc, #12]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b412:	4313      	orrs	r3, r2
 800b414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b418:	e008      	b.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b41a:	7cfb      	ldrb	r3, [r7, #19]
 800b41c:	74bb      	strb	r3, [r7, #18]
 800b41e:	e005      	b.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b420:	40021000 	.word	0x40021000
 800b424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b428:	7cfb      	ldrb	r3, [r7, #19]
 800b42a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b42c:	7c7b      	ldrb	r3, [r7, #17]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d105      	bne.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b432:	4ba6      	ldr	r3, [pc, #664]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b436:	4aa5      	ldr	r2, [pc, #660]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b43c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0301 	and.w	r3, r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00a      	beq.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b44a:	4ba0      	ldr	r3, [pc, #640]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b450:	f023 0203 	bic.w	r2, r3, #3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	499c      	ldr	r1, [pc, #624]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b45a:	4313      	orrs	r3, r2
 800b45c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 0302 	and.w	r3, r3, #2
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00a      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b46c:	4b97      	ldr	r3, [pc, #604]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b472:	f023 020c 	bic.w	r2, r3, #12
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	4994      	ldr	r1, [pc, #592]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b47c:	4313      	orrs	r3, r2
 800b47e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 0304 	and.w	r3, r3, #4
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b48e:	4b8f      	ldr	r3, [pc, #572]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b494:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	498b      	ldr	r1, [pc, #556]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0308 	and.w	r3, r3, #8
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00a      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b4b0:	4b86      	ldr	r3, [pc, #536]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	4983      	ldr	r1, [pc, #524]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f003 0320 	and.w	r3, r3, #32
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00a      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b4d2:	4b7e      	ldr	r3, [pc, #504]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	497a      	ldr	r1, [pc, #488]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00a      	beq.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b4f4:	4b75      	ldr	r3, [pc, #468]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	699b      	ldr	r3, [r3, #24]
 800b502:	4972      	ldr	r1, [pc, #456]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b504:	4313      	orrs	r3, r2
 800b506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00a      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b516:	4b6d      	ldr	r3, [pc, #436]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b51c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	69db      	ldr	r3, [r3, #28]
 800b524:	4969      	ldr	r1, [pc, #420]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b526:	4313      	orrs	r3, r2
 800b528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00a      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b538:	4b64      	ldr	r3, [pc, #400]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b53e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	4961      	ldr	r1, [pc, #388]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b548:	4313      	orrs	r3, r2
 800b54a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00a      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b55a:	4b5c      	ldr	r3, [pc, #368]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b560:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b568:	4958      	ldr	r1, [pc, #352]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d015      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b57c:	4b53      	ldr	r3, [pc, #332]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58a:	4950      	ldr	r1, [pc, #320]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b59a:	d105      	bne.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b59c:	4b4b      	ldr	r3, [pc, #300]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	4a4a      	ldr	r2, [pc, #296]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d015      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b5b4:	4b45      	ldr	r3, [pc, #276]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c2:	4942      	ldr	r1, [pc, #264]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5d2:	d105      	bne.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b5d4:	4b3d      	ldr	r3, [pc, #244]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	4a3c      	ldr	r2, [pc, #240]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d015      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b5ec:	4b37      	ldr	r3, [pc, #220]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fa:	4934      	ldr	r1, [pc, #208]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b606:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b60a:	d105      	bne.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b60c:	4b2f      	ldr	r3, [pc, #188]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	4a2e      	ldr	r2, [pc, #184]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b616:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d015      	beq.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b624:	4b29      	ldr	r3, [pc, #164]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b62a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b632:	4926      	ldr	r1, [pc, #152]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b634:	4313      	orrs	r3, r2
 800b636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b63e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b642:	d105      	bne.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b644:	4b21      	ldr	r3, [pc, #132]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	4a20      	ldr	r2, [pc, #128]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b64a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b64e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d015      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b65c:	4b1b      	ldr	r3, [pc, #108]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66a:	4918      	ldr	r1, [pc, #96]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b66c:	4313      	orrs	r3, r2
 800b66e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b67a:	d105      	bne.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b67c:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	4a12      	ldr	r2, [pc, #72]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b686:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d015      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b694:	4b0d      	ldr	r3, [pc, #52]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b69a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a2:	490a      	ldr	r1, [pc, #40]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6b2:	d105      	bne.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b6b4:	4b05      	ldr	r3, [pc, #20]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	4a04      	ldr	r2, [pc, #16]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b6c0:	7cbb      	ldrb	r3, [r7, #18]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3718      	adds	r7, #24
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	40021000 	.word	0x40021000

0800b6d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e09d      	b.n	800b81e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d108      	bne.n	800b6fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6f2:	d009      	beq.n	800b708 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	61da      	str	r2, [r3, #28]
 800b6fa:	e005      	b.n	800b708 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d106      	bne.n	800b728 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7fa f836 	bl	8005794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2202      	movs	r2, #2
 800b72c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b73e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b748:	d902      	bls.n	800b750 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b74a:	2300      	movs	r3, #0
 800b74c:	60fb      	str	r3, [r7, #12]
 800b74e:	e002      	b.n	800b756 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b754:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b75e:	d007      	beq.n	800b770 <HAL_SPI_Init+0xa0>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b768:	d002      	beq.n	800b770 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b780:	431a      	orrs	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	f003 0302 	and.w	r3, r3, #2
 800b78a:	431a      	orrs	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	f003 0301 	and.w	r3, r3, #1
 800b794:	431a      	orrs	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b79e:	431a      	orrs	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	69db      	ldr	r3, [r3, #28]
 800b7a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7a8:	431a      	orrs	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7b2:	ea42 0103 	orr.w	r1, r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	430a      	orrs	r2, r1
 800b7c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	0c1b      	lsrs	r3, r3, #16
 800b7cc:	f003 0204 	and.w	r2, r3, #4
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d4:	f003 0310 	and.w	r3, r3, #16
 800b7d8:	431a      	orrs	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7de:	f003 0308 	and.w	r3, r3, #8
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b7ec:	ea42 0103 	orr.w	r1, r2, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	69da      	ldr	r2, [r3, #28]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b80c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b81c:	2300      	movs	r3, #0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b088      	sub	sp, #32
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	60f8      	str	r0, [r7, #12]
 800b82e:	60b9      	str	r1, [r7, #8]
 800b830:	603b      	str	r3, [r7, #0]
 800b832:	4613      	mov	r3, r2
 800b834:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b840:	2b01      	cmp	r3, #1
 800b842:	d101      	bne.n	800b848 <HAL_SPI_Transmit+0x22>
 800b844:	2302      	movs	r3, #2
 800b846:	e15f      	b.n	800bb08 <HAL_SPI_Transmit+0x2e2>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b850:	f7fb f84a 	bl	80068e8 <HAL_GetTick>
 800b854:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b856:	88fb      	ldrh	r3, [r7, #6]
 800b858:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b01      	cmp	r3, #1
 800b864:	d002      	beq.n	800b86c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b866:	2302      	movs	r3, #2
 800b868:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b86a:	e148      	b.n	800bafe <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d002      	beq.n	800b878 <HAL_SPI_Transmit+0x52>
 800b872:	88fb      	ldrh	r3, [r7, #6]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d102      	bne.n	800b87e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b87c:	e13f      	b.n	800bafe <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2203      	movs	r2, #3
 800b882:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	88fa      	ldrh	r2, [r7, #6]
 800b896:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	88fa      	ldrh	r2, [r7, #6]
 800b89c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8c8:	d10f      	bne.n	800b8ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f4:	2b40      	cmp	r3, #64	; 0x40
 800b8f6:	d007      	beq.n	800b908 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b906:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b910:	d94f      	bls.n	800b9b2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <HAL_SPI_Transmit+0xfa>
 800b91a:	8afb      	ldrh	r3, [r7, #22]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d142      	bne.n	800b9a6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b924:	881a      	ldrh	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b930:	1c9a      	adds	r2, r3, #2
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	3b01      	subs	r3, #1
 800b93e:	b29a      	uxth	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b944:	e02f      	b.n	800b9a6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f003 0302 	and.w	r3, r3, #2
 800b950:	2b02      	cmp	r3, #2
 800b952:	d112      	bne.n	800b97a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b958:	881a      	ldrh	r2, [r3, #0]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b964:	1c9a      	adds	r2, r3, #2
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b96e:	b29b      	uxth	r3, r3
 800b970:	3b01      	subs	r3, #1
 800b972:	b29a      	uxth	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b978:	e015      	b.n	800b9a6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b97a:	f7fa ffb5 	bl	80068e8 <HAL_GetTick>
 800b97e:	4602      	mov	r2, r0
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d803      	bhi.n	800b992 <HAL_SPI_Transmit+0x16c>
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b990:	d102      	bne.n	800b998 <HAL_SPI_Transmit+0x172>
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d106      	bne.n	800b9a6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800b998:	2303      	movs	r3, #3
 800b99a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b9a4:	e0ab      	b.n	800bafe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1ca      	bne.n	800b946 <HAL_SPI_Transmit+0x120>
 800b9b0:	e080      	b.n	800bab4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d002      	beq.n	800b9c0 <HAL_SPI_Transmit+0x19a>
 800b9ba:	8afb      	ldrh	r3, [r7, #22]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d174      	bne.n	800baaa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d912      	bls.n	800b9f0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ce:	881a      	ldrh	r2, [r3, #0]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9da:	1c9a      	adds	r2, r3, #2
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	3b02      	subs	r3, #2
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b9ee:	e05c      	b.n	800baaa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	330c      	adds	r3, #12
 800b9fa:	7812      	ldrb	r2, [r2, #0]
 800b9fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ba16:	e048      	b.n	800baaa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	f003 0302 	and.w	r3, r3, #2
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d12b      	bne.n	800ba7e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d912      	bls.n	800ba56 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba34:	881a      	ldrh	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba40:	1c9a      	adds	r2, r3, #2
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	3b02      	subs	r3, #2
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba54:	e029      	b.n	800baaa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	330c      	adds	r3, #12
 800ba60:	7812      	ldrb	r2, [r2, #0]
 800ba62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba68:	1c5a      	adds	r2, r3, #1
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	3b01      	subs	r3, #1
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba7c:	e015      	b.n	800baaa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba7e:	f7fa ff33 	bl	80068e8 <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d803      	bhi.n	800ba96 <HAL_SPI_Transmit+0x270>
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba94:	d102      	bne.n	800ba9c <HAL_SPI_Transmit+0x276>
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d106      	bne.n	800baaa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800baa8:	e029      	b.n	800bafe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baae:	b29b      	uxth	r3, r3
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1b1      	bne.n	800ba18 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bab4:	69ba      	ldr	r2, [r7, #24]
 800bab6:	6839      	ldr	r1, [r7, #0]
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f000 fad7 	bl	800c06c <SPI_EndRxTxTransaction>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2220      	movs	r2, #32
 800bac8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10a      	bne.n	800bae8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bad2:	2300      	movs	r3, #0
 800bad4:	613b      	str	r3, [r7, #16]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	613b      	str	r3, [r7, #16]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	613b      	str	r3, [r7, #16]
 800bae6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	77fb      	strb	r3, [r7, #31]
 800baf4:	e003      	b.n	800bafe <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2201      	movs	r2, #1
 800bafa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bb06:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3720      	adds	r7, #32
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d101      	bne.n	800bb30 <HAL_SPI_Transmit_DMA+0x20>
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	e0d4      	b.n	800bcda <HAL_SPI_Transmit_DMA+0x1ca>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d002      	beq.n	800bb4a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800bb44:	2302      	movs	r3, #2
 800bb46:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bb48:	e0c2      	b.n	800bcd0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <HAL_SPI_Transmit_DMA+0x46>
 800bb50:	88fb      	ldrh	r3, [r7, #6]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d102      	bne.n	800bb5c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800bb56:	2301      	movs	r3, #1
 800bb58:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bb5a:	e0b9      	b.n	800bcd0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2203      	movs	r2, #3
 800bb60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	88fa      	ldrh	r2, [r7, #6]
 800bb74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	88fa      	ldrh	r2, [r7, #6]
 800bb7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bba6:	d10f      	bne.n	800bbc8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bbc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbcc:	4a45      	ldr	r2, [pc, #276]	; (800bce4 <HAL_SPI_Transmit_DMA+0x1d4>)
 800bbce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd4:	4a44      	ldr	r2, [pc, #272]	; (800bce8 <HAL_SPI_Transmit_DMA+0x1d8>)
 800bbd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbdc:	4a43      	ldr	r2, [pc, #268]	; (800bcec <HAL_SPI_Transmit_DMA+0x1dc>)
 800bbde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bbf6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc00:	d82d      	bhi.n	800bc5e <HAL_SPI_Transmit_DMA+0x14e>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc06:	699b      	ldr	r3, [r3, #24]
 800bc08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc0c:	d127      	bne.n	800bc5e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	f003 0301 	and.w	r3, r3, #1
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10f      	bne.n	800bc3c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc2a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	085b      	lsrs	r3, r3, #1
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc3a:	e010      	b.n	800bc5e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	685a      	ldr	r2, [r3, #4]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc4a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	085b      	lsrs	r3, r3, #1
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	3301      	adds	r3, #1
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc66:	4619      	mov	r1, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	330c      	adds	r3, #12
 800bc6e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc74:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bc76:	f7fd fd49 	bl	800970c <HAL_DMA_Start_IT>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d008      	beq.n	800bc92 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc84:	f043 0210 	orr.w	r2, r3, #16
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	75fb      	strb	r3, [r7, #23]

    goto error;
 800bc90:	e01e      	b.n	800bcd0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc9c:	2b40      	cmp	r3, #64	; 0x40
 800bc9e:	d007      	beq.n	800bcb0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcae:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f042 0220 	orr.w	r2, r2, #32
 800bcbe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f042 0202 	orr.w	r2, r2, #2
 800bcce:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bcd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	0800bdd3 	.word	0x0800bdd3
 800bce8:	0800bd2d 	.word	0x0800bd2d
 800bcec:	0800bdef 	.word	0x0800bdef

0800bcf0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd3a:	f7fa fdd5 	bl	80068e8 <HAL_GetTick>
 800bd3e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0320 	and.w	r3, r3, #32
 800bd4a:	2b20      	cmp	r3, #32
 800bd4c:	d03b      	beq.n	800bdc6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f022 0220 	bic.w	r2, r2, #32
 800bd5c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	685a      	ldr	r2, [r3, #4]
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f022 0202 	bic.w	r2, r2, #2
 800bd6c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bd6e:	693a      	ldr	r2, [r7, #16]
 800bd70:	2164      	movs	r1, #100	; 0x64
 800bd72:	6978      	ldr	r0, [r7, #20]
 800bd74:	f000 f97a 	bl	800c06c <SPI_EndRxTxTransaction>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d005      	beq.n	800bd8a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd82:	f043 0220 	orr.w	r2, r3, #32
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10a      	bne.n	800bda8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd92:	2300      	movs	r3, #0
 800bd94:	60fb      	str	r3, [r7, #12]
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	60fb      	str	r3, [r7, #12]
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	60fb      	str	r3, [r7, #12]
 800bda6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bdbe:	6978      	ldr	r0, [r7, #20]
 800bdc0:	f7ff ffaa 	bl	800bd18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bdc4:	e002      	b.n	800bdcc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800bdc6:	6978      	ldr	r0, [r7, #20]
 800bdc8:	f7ff ff92 	bl	800bcf0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bdcc:	3718      	adds	r7, #24
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b084      	sub	sp, #16
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdde:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f7ff ff8f 	bl	800bd04 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bde6:	bf00      	nop
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b084      	sub	sp, #16
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f022 0203 	bic.w	r2, r2, #3
 800be0a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be10:	f043 0210 	orr.w	r2, r3, #16
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7ff ff79 	bl	800bd18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be26:	bf00      	nop
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
	...

0800be30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b088      	sub	sp, #32
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	603b      	str	r3, [r7, #0]
 800be3c:	4613      	mov	r3, r2
 800be3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800be40:	f7fa fd52 	bl	80068e8 <HAL_GetTick>
 800be44:	4602      	mov	r2, r0
 800be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be48:	1a9b      	subs	r3, r3, r2
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	4413      	add	r3, r2
 800be4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800be50:	f7fa fd4a 	bl	80068e8 <HAL_GetTick>
 800be54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800be56:	4b39      	ldr	r3, [pc, #228]	; (800bf3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	015b      	lsls	r3, r3, #5
 800be5c:	0d1b      	lsrs	r3, r3, #20
 800be5e:	69fa      	ldr	r2, [r7, #28]
 800be60:	fb02 f303 	mul.w	r3, r2, r3
 800be64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be66:	e054      	b.n	800bf12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6e:	d050      	beq.n	800bf12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800be70:	f7fa fd3a 	bl	80068e8 <HAL_GetTick>
 800be74:	4602      	mov	r2, r0
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	1ad3      	subs	r3, r2, r3
 800be7a:	69fa      	ldr	r2, [r7, #28]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d902      	bls.n	800be86 <SPI_WaitFlagStateUntilTimeout+0x56>
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d13d      	bne.n	800bf02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800be94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be9e:	d111      	bne.n	800bec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bea8:	d004      	beq.n	800beb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beb2:	d107      	bne.n	800bec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800becc:	d10f      	bne.n	800beee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bedc:	601a      	str	r2, [r3, #0]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800beec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2201      	movs	r2, #1
 800bef2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800befe:	2303      	movs	r3, #3
 800bf00:	e017      	b.n	800bf32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d101      	bne.n	800bf0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	689a      	ldr	r2, [r3, #8]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	bf0c      	ite	eq
 800bf22:	2301      	moveq	r3, #1
 800bf24:	2300      	movne	r3, #0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	461a      	mov	r2, r3
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d19b      	bne.n	800be68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3720      	adds	r7, #32
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	200001d8 	.word	0x200001d8

0800bf40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08a      	sub	sp, #40	; 0x28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
 800bf4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bf52:	f7fa fcc9 	bl	80068e8 <HAL_GetTick>
 800bf56:	4602      	mov	r2, r0
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	1a9b      	subs	r3, r3, r2
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	4413      	add	r3, r2
 800bf60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bf62:	f7fa fcc1 	bl	80068e8 <HAL_GetTick>
 800bf66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	330c      	adds	r3, #12
 800bf6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bf70:	4b3d      	ldr	r3, [pc, #244]	; (800c068 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	4613      	mov	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	00da      	lsls	r2, r3, #3
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	0d1b      	lsrs	r3, r3, #20
 800bf80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf82:	fb02 f303 	mul.w	r3, r2, r3
 800bf86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bf88:	e060      	b.n	800c04c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bf90:	d107      	bne.n	800bfa2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d104      	bne.n	800bfa2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa8:	d050      	beq.n	800c04c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bfaa:	f7fa fc9d 	bl	80068e8 <HAL_GetTick>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	6a3b      	ldr	r3, [r7, #32]
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d902      	bls.n	800bfc0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d13d      	bne.n	800c03c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bfce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bfd8:	d111      	bne.n	800bffe <SPI_WaitFifoStateUntilTimeout+0xbe>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfe2:	d004      	beq.n	800bfee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfec:	d107      	bne.n	800bffe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bffc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c006:	d10f      	bne.n	800c028 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c026:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	e010      	b.n	800c05e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c042:	2300      	movs	r3, #0
 800c044:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	3b01      	subs	r3, #1
 800c04a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	689a      	ldr	r2, [r3, #8]
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	4013      	ands	r3, r2
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d196      	bne.n	800bf8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3728      	adds	r7, #40	; 0x28
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	200001d8 	.word	0x200001d8

0800c06c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af02      	add	r7, sp, #8
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	2200      	movs	r2, #0
 800c080:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f7ff ff5b 	bl	800bf40 <SPI_WaitFifoStateUntilTimeout>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d007      	beq.n	800c0a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c094:	f043 0220 	orr.w	r2, r3, #32
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c09c:	2303      	movs	r3, #3
 800c09e:	e027      	b.n	800c0f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	2180      	movs	r1, #128	; 0x80
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f7ff fec0 	bl	800be30 <SPI_WaitFlagStateUntilTimeout>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d007      	beq.n	800c0c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0ba:	f043 0220 	orr.w	r2, r3, #32
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	e014      	b.n	800c0f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f7ff ff34 	bl	800bf40 <SPI_WaitFifoStateUntilTimeout>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d007      	beq.n	800c0ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0e2:	f043 0220 	orr.w	r2, r3, #32
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	e000      	b.n	800c0f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d101      	bne.n	800c10a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c106:	2301      	movs	r3, #1
 800c108:	e049      	b.n	800c19e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c110:	b2db      	uxtb	r3, r3
 800c112:	2b00      	cmp	r3, #0
 800c114:	d106      	bne.n	800c124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7f9 fc5a 	bl	80059d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2202      	movs	r2, #2
 800c128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	3304      	adds	r3, #4
 800c134:	4619      	mov	r1, r3
 800c136:	4610      	mov	r0, r2
 800c138:	f000 ff72 	bl	800d020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d001      	beq.n	800c1c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e04a      	b.n	800c256 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	68da      	ldr	r2, [r3, #12]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f042 0201 	orr.w	r2, r2, #1
 800c1d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a21      	ldr	r2, [pc, #132]	; (800c264 <HAL_TIM_Base_Start_IT+0xbc>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d018      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x6c>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1ea:	d013      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x6c>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a1d      	ldr	r2, [pc, #116]	; (800c268 <HAL_TIM_Base_Start_IT+0xc0>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d00e      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x6c>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a1c      	ldr	r2, [pc, #112]	; (800c26c <HAL_TIM_Base_Start_IT+0xc4>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d009      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x6c>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a1a      	ldr	r2, [pc, #104]	; (800c270 <HAL_TIM_Base_Start_IT+0xc8>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d004      	beq.n	800c214 <HAL_TIM_Base_Start_IT+0x6c>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a19      	ldr	r2, [pc, #100]	; (800c274 <HAL_TIM_Base_Start_IT+0xcc>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d115      	bne.n	800c240 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	689a      	ldr	r2, [r3, #8]
 800c21a:	4b17      	ldr	r3, [pc, #92]	; (800c278 <HAL_TIM_Base_Start_IT+0xd0>)
 800c21c:	4013      	ands	r3, r2
 800c21e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2b06      	cmp	r3, #6
 800c224:	d015      	beq.n	800c252 <HAL_TIM_Base_Start_IT+0xaa>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c22c:	d011      	beq.n	800c252 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f042 0201 	orr.w	r2, r2, #1
 800c23c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c23e:	e008      	b.n	800c252 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f042 0201 	orr.w	r2, r2, #1
 800c24e:	601a      	str	r2, [r3, #0]
 800c250:	e000      	b.n	800c254 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c252:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	40012c00 	.word	0x40012c00
 800c268:	40000400 	.word	0x40000400
 800c26c:	40000800 	.word	0x40000800
 800c270:	40013400 	.word	0x40013400
 800c274:	40014000 	.word	0x40014000
 800c278:	00010007 	.word	0x00010007

0800c27c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	68da      	ldr	r2, [r3, #12]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f022 0201 	bic.w	r2, r2, #1
 800c292:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	6a1a      	ldr	r2, [r3, #32]
 800c29a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c29e:	4013      	ands	r3, r2
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d10f      	bne.n	800c2c4 <HAL_TIM_Base_Stop_IT+0x48>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	6a1a      	ldr	r2, [r3, #32]
 800c2aa:	f244 4344 	movw	r3, #17476	; 0x4444
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d107      	bne.n	800c2c4 <HAL_TIM_Base_Stop_IT+0x48>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f022 0201 	bic.w	r2, r2, #1
 800c2c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	370c      	adds	r7, #12
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr

0800c2da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b082      	sub	sp, #8
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d101      	bne.n	800c2ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e049      	b.n	800c380 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d106      	bne.n	800c306 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7f9 fab9 	bl	8005878 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2202      	movs	r2, #2
 800c30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	3304      	adds	r3, #4
 800c316:	4619      	mov	r1, r3
 800c318:	4610      	mov	r0, r2
 800c31a:	f000 fe81 	bl	800d020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2201      	movs	r2, #1
 800c322:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2201      	movs	r2, #1
 800c32a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2201      	movs	r2, #1
 800c332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2201      	movs	r2, #1
 800c33a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2201      	movs	r2, #1
 800c342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2201      	movs	r2, #1
 800c352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2201      	movs	r2, #1
 800c35a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2201      	movs	r2, #1
 800c362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2201      	movs	r2, #1
 800c372:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d109      	bne.n	800c3b0 <HAL_TIM_PWM_Start_IT+0x28>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	bf14      	ite	ne
 800c3a8:	2301      	movne	r3, #1
 800c3aa:	2300      	moveq	r3, #0
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	e03c      	b.n	800c42a <HAL_TIM_PWM_Start_IT+0xa2>
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	d109      	bne.n	800c3ca <HAL_TIM_PWM_Start_IT+0x42>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	bf14      	ite	ne
 800c3c2:	2301      	movne	r3, #1
 800c3c4:	2300      	moveq	r3, #0
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	e02f      	b.n	800c42a <HAL_TIM_PWM_Start_IT+0xa2>
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	2b08      	cmp	r3, #8
 800c3ce:	d109      	bne.n	800c3e4 <HAL_TIM_PWM_Start_IT+0x5c>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	bf14      	ite	ne
 800c3dc:	2301      	movne	r3, #1
 800c3de:	2300      	moveq	r3, #0
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	e022      	b.n	800c42a <HAL_TIM_PWM_Start_IT+0xa2>
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	2b0c      	cmp	r3, #12
 800c3e8:	d109      	bne.n	800c3fe <HAL_TIM_PWM_Start_IT+0x76>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	bf14      	ite	ne
 800c3f6:	2301      	movne	r3, #1
 800c3f8:	2300      	moveq	r3, #0
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	e015      	b.n	800c42a <HAL_TIM_PWM_Start_IT+0xa2>
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	2b10      	cmp	r3, #16
 800c402:	d109      	bne.n	800c418 <HAL_TIM_PWM_Start_IT+0x90>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	bf14      	ite	ne
 800c410:	2301      	movne	r3, #1
 800c412:	2300      	moveq	r3, #0
 800c414:	b2db      	uxtb	r3, r3
 800c416:	e008      	b.n	800c42a <HAL_TIM_PWM_Start_IT+0xa2>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	2b01      	cmp	r3, #1
 800c422:	bf14      	ite	ne
 800c424:	2301      	movne	r3, #1
 800c426:	2300      	moveq	r3, #0
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c42e:	2301      	movs	r3, #1
 800c430:	e0e2      	b.n	800c5f8 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d104      	bne.n	800c442 <HAL_TIM_PWM_Start_IT+0xba>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2202      	movs	r2, #2
 800c43c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c440:	e023      	b.n	800c48a <HAL_TIM_PWM_Start_IT+0x102>
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	2b04      	cmp	r3, #4
 800c446:	d104      	bne.n	800c452 <HAL_TIM_PWM_Start_IT+0xca>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2202      	movs	r2, #2
 800c44c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c450:	e01b      	b.n	800c48a <HAL_TIM_PWM_Start_IT+0x102>
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	2b08      	cmp	r3, #8
 800c456:	d104      	bne.n	800c462 <HAL_TIM_PWM_Start_IT+0xda>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2202      	movs	r2, #2
 800c45c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c460:	e013      	b.n	800c48a <HAL_TIM_PWM_Start_IT+0x102>
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	2b0c      	cmp	r3, #12
 800c466:	d104      	bne.n	800c472 <HAL_TIM_PWM_Start_IT+0xea>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2202      	movs	r2, #2
 800c46c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c470:	e00b      	b.n	800c48a <HAL_TIM_PWM_Start_IT+0x102>
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	2b10      	cmp	r3, #16
 800c476:	d104      	bne.n	800c482 <HAL_TIM_PWM_Start_IT+0xfa>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2202      	movs	r2, #2
 800c47c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c480:	e003      	b.n	800c48a <HAL_TIM_PWM_Start_IT+0x102>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2202      	movs	r2, #2
 800c486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b0c      	cmp	r3, #12
 800c48e:	d841      	bhi.n	800c514 <HAL_TIM_PWM_Start_IT+0x18c>
 800c490:	a201      	add	r2, pc, #4	; (adr r2, 800c498 <HAL_TIM_PWM_Start_IT+0x110>)
 800c492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c496:	bf00      	nop
 800c498:	0800c4cd 	.word	0x0800c4cd
 800c49c:	0800c515 	.word	0x0800c515
 800c4a0:	0800c515 	.word	0x0800c515
 800c4a4:	0800c515 	.word	0x0800c515
 800c4a8:	0800c4df 	.word	0x0800c4df
 800c4ac:	0800c515 	.word	0x0800c515
 800c4b0:	0800c515 	.word	0x0800c515
 800c4b4:	0800c515 	.word	0x0800c515
 800c4b8:	0800c4f1 	.word	0x0800c4f1
 800c4bc:	0800c515 	.word	0x0800c515
 800c4c0:	0800c515 	.word	0x0800c515
 800c4c4:	0800c515 	.word	0x0800c515
 800c4c8:	0800c503 	.word	0x0800c503
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68da      	ldr	r2, [r3, #12]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f042 0202 	orr.w	r2, r2, #2
 800c4da:	60da      	str	r2, [r3, #12]
      break;
 800c4dc:	e01d      	b.n	800c51a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68da      	ldr	r2, [r3, #12]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f042 0204 	orr.w	r2, r2, #4
 800c4ec:	60da      	str	r2, [r3, #12]
      break;
 800c4ee:	e014      	b.n	800c51a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68da      	ldr	r2, [r3, #12]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f042 0208 	orr.w	r2, r2, #8
 800c4fe:	60da      	str	r2, [r3, #12]
      break;
 800c500:	e00b      	b.n	800c51a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68da      	ldr	r2, [r3, #12]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f042 0210 	orr.w	r2, r2, #16
 800c510:	60da      	str	r2, [r3, #12]
      break;
 800c512:	e002      	b.n	800c51a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	73fb      	strb	r3, [r7, #15]
      break;
 800c518:	bf00      	nop
  }

  if (status == HAL_OK)
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d16a      	bne.n	800c5f6 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2201      	movs	r2, #1
 800c526:	6839      	ldr	r1, [r7, #0]
 800c528:	4618      	mov	r0, r3
 800c52a:	f001 f90b 	bl	800d744 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a33      	ldr	r2, [pc, #204]	; (800c600 <HAL_TIM_PWM_Start_IT+0x278>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d013      	beq.n	800c560 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a31      	ldr	r2, [pc, #196]	; (800c604 <HAL_TIM_PWM_Start_IT+0x27c>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d00e      	beq.n	800c560 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a30      	ldr	r2, [pc, #192]	; (800c608 <HAL_TIM_PWM_Start_IT+0x280>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d009      	beq.n	800c560 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a2e      	ldr	r2, [pc, #184]	; (800c60c <HAL_TIM_PWM_Start_IT+0x284>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d004      	beq.n	800c560 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a2d      	ldr	r2, [pc, #180]	; (800c610 <HAL_TIM_PWM_Start_IT+0x288>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d101      	bne.n	800c564 <HAL_TIM_PWM_Start_IT+0x1dc>
 800c560:	2301      	movs	r3, #1
 800c562:	e000      	b.n	800c566 <HAL_TIM_PWM_Start_IT+0x1de>
 800c564:	2300      	movs	r3, #0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d007      	beq.n	800c57a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c578:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a20      	ldr	r2, [pc, #128]	; (800c600 <HAL_TIM_PWM_Start_IT+0x278>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d018      	beq.n	800c5b6 <HAL_TIM_PWM_Start_IT+0x22e>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c58c:	d013      	beq.n	800c5b6 <HAL_TIM_PWM_Start_IT+0x22e>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a20      	ldr	r2, [pc, #128]	; (800c614 <HAL_TIM_PWM_Start_IT+0x28c>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d00e      	beq.n	800c5b6 <HAL_TIM_PWM_Start_IT+0x22e>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a1e      	ldr	r2, [pc, #120]	; (800c618 <HAL_TIM_PWM_Start_IT+0x290>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d009      	beq.n	800c5b6 <HAL_TIM_PWM_Start_IT+0x22e>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a17      	ldr	r2, [pc, #92]	; (800c604 <HAL_TIM_PWM_Start_IT+0x27c>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d004      	beq.n	800c5b6 <HAL_TIM_PWM_Start_IT+0x22e>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a15      	ldr	r2, [pc, #84]	; (800c608 <HAL_TIM_PWM_Start_IT+0x280>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d115      	bne.n	800c5e2 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	689a      	ldr	r2, [r3, #8]
 800c5bc:	4b17      	ldr	r3, [pc, #92]	; (800c61c <HAL_TIM_PWM_Start_IT+0x294>)
 800c5be:	4013      	ands	r3, r2
 800c5c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	2b06      	cmp	r3, #6
 800c5c6:	d015      	beq.n	800c5f4 <HAL_TIM_PWM_Start_IT+0x26c>
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5ce:	d011      	beq.n	800c5f4 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f042 0201 	orr.w	r2, r2, #1
 800c5de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5e0:	e008      	b.n	800c5f4 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f042 0201 	orr.w	r2, r2, #1
 800c5f0:	601a      	str	r2, [r3, #0]
 800c5f2:	e000      	b.n	800c5f6 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	40012c00 	.word	0x40012c00
 800c604:	40013400 	.word	0x40013400
 800c608:	40014000 	.word	0x40014000
 800c60c:	40014400 	.word	0x40014400
 800c610:	40014800 	.word	0x40014800
 800c614:	40000400 	.word	0x40000400
 800c618:	40000800 	.word	0x40000800
 800c61c:	00010007 	.word	0x00010007

0800c620 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c62a:	2300      	movs	r3, #0
 800c62c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2b0c      	cmp	r3, #12
 800c632:	d841      	bhi.n	800c6b8 <HAL_TIM_PWM_Stop_IT+0x98>
 800c634:	a201      	add	r2, pc, #4	; (adr r2, 800c63c <HAL_TIM_PWM_Stop_IT+0x1c>)
 800c636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c63a:	bf00      	nop
 800c63c:	0800c671 	.word	0x0800c671
 800c640:	0800c6b9 	.word	0x0800c6b9
 800c644:	0800c6b9 	.word	0x0800c6b9
 800c648:	0800c6b9 	.word	0x0800c6b9
 800c64c:	0800c683 	.word	0x0800c683
 800c650:	0800c6b9 	.word	0x0800c6b9
 800c654:	0800c6b9 	.word	0x0800c6b9
 800c658:	0800c6b9 	.word	0x0800c6b9
 800c65c:	0800c695 	.word	0x0800c695
 800c660:	0800c6b9 	.word	0x0800c6b9
 800c664:	0800c6b9 	.word	0x0800c6b9
 800c668:	0800c6b9 	.word	0x0800c6b9
 800c66c:	0800c6a7 	.word	0x0800c6a7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68da      	ldr	r2, [r3, #12]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f022 0202 	bic.w	r2, r2, #2
 800c67e:	60da      	str	r2, [r3, #12]
      break;
 800c680:	e01d      	b.n	800c6be <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68da      	ldr	r2, [r3, #12]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f022 0204 	bic.w	r2, r2, #4
 800c690:	60da      	str	r2, [r3, #12]
      break;
 800c692:	e014      	b.n	800c6be <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	68da      	ldr	r2, [r3, #12]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f022 0208 	bic.w	r2, r2, #8
 800c6a2:	60da      	str	r2, [r3, #12]
      break;
 800c6a4:	e00b      	b.n	800c6be <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68da      	ldr	r2, [r3, #12]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f022 0210 	bic.w	r2, r2, #16
 800c6b4:	60da      	str	r2, [r3, #12]
      break;
 800c6b6:	e002      	b.n	800c6be <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c6bc:	bf00      	nop
  }

  if (status == HAL_OK)
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f040 8081 	bne.w	800c7c8 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	6839      	ldr	r1, [r7, #0]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f001 f838 	bl	800d744 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a3e      	ldr	r2, [pc, #248]	; (800c7d4 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d013      	beq.n	800c706 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a3d      	ldr	r2, [pc, #244]	; (800c7d8 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d00e      	beq.n	800c706 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a3b      	ldr	r2, [pc, #236]	; (800c7dc <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d009      	beq.n	800c706 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a3a      	ldr	r2, [pc, #232]	; (800c7e0 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d004      	beq.n	800c706 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a38      	ldr	r2, [pc, #224]	; (800c7e4 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d101      	bne.n	800c70a <HAL_TIM_PWM_Stop_IT+0xea>
 800c706:	2301      	movs	r3, #1
 800c708:	e000      	b.n	800c70c <HAL_TIM_PWM_Stop_IT+0xec>
 800c70a:	2300      	movs	r3, #0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d017      	beq.n	800c740 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	6a1a      	ldr	r2, [r3, #32]
 800c716:	f241 1311 	movw	r3, #4369	; 0x1111
 800c71a:	4013      	ands	r3, r2
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10f      	bne.n	800c740 <HAL_TIM_PWM_Stop_IT+0x120>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6a1a      	ldr	r2, [r3, #32]
 800c726:	f244 4344 	movw	r3, #17476	; 0x4444
 800c72a:	4013      	ands	r3, r2
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d107      	bne.n	800c740 <HAL_TIM_PWM_Stop_IT+0x120>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c73e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6a1a      	ldr	r2, [r3, #32]
 800c746:	f241 1311 	movw	r3, #4369	; 0x1111
 800c74a:	4013      	ands	r3, r2
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d10f      	bne.n	800c770 <HAL_TIM_PWM_Stop_IT+0x150>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6a1a      	ldr	r2, [r3, #32]
 800c756:	f244 4344 	movw	r3, #17476	; 0x4444
 800c75a:	4013      	ands	r3, r2
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d107      	bne.n	800c770 <HAL_TIM_PWM_Stop_IT+0x150>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f022 0201 	bic.w	r2, r2, #1
 800c76e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d104      	bne.n	800c780 <HAL_TIM_PWM_Stop_IT+0x160>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2201      	movs	r2, #1
 800c77a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c77e:	e023      	b.n	800c7c8 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	2b04      	cmp	r3, #4
 800c784:	d104      	bne.n	800c790 <HAL_TIM_PWM_Stop_IT+0x170>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2201      	movs	r2, #1
 800c78a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c78e:	e01b      	b.n	800c7c8 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	2b08      	cmp	r3, #8
 800c794:	d104      	bne.n	800c7a0 <HAL_TIM_PWM_Stop_IT+0x180>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c79e:	e013      	b.n	800c7c8 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	2b0c      	cmp	r3, #12
 800c7a4:	d104      	bne.n	800c7b0 <HAL_TIM_PWM_Stop_IT+0x190>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c7ae:	e00b      	b.n	800c7c8 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	2b10      	cmp	r3, #16
 800c7b4:	d104      	bne.n	800c7c0 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c7be:	e003      	b.n	800c7c8 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	40012c00 	.word	0x40012c00
 800c7d8:	40013400 	.word	0x40013400
 800c7dc:	40014000 	.word	0x40014000
 800c7e0:	40014400 	.word	0x40014400
 800c7e4:	40014800 	.word	0x40014800

0800c7e8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d101      	bne.n	800c7fc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e041      	b.n	800c880 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c802:	b2db      	uxtb	r3, r3
 800c804:	2b00      	cmp	r3, #0
 800c806:	d106      	bne.n	800c816 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7f9 f95b 	bl	8005acc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2202      	movs	r2, #2
 800c81a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	3304      	adds	r3, #4
 800c826:	4619      	mov	r1, r3
 800c828:	4610      	mov	r0, r2
 800c82a:	f000 fbf9 	bl	800d020 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f022 0208 	bic.w	r2, r2, #8
 800c83c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	6819      	ldr	r1, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	430a      	orrs	r2, r1
 800c84c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c87e:	2300      	movs	r3, #0
}
 800c880:	4618      	mov	r0, r3
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	e097      	b.n	800c9cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d106      	bne.n	800c8b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7f9 f833 	bl	800591c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2202      	movs	r2, #2
 800c8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	6812      	ldr	r2, [r2, #0]
 800c8c8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c8cc:	f023 0307 	bic.w	r3, r3, #7
 800c8d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	3304      	adds	r3, #4
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4610      	mov	r0, r2
 800c8de:	f000 fb9f 	bl	800d020 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	699b      	ldr	r3, [r3, #24]
 800c8f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6a1b      	ldr	r3, [r3, #32]
 800c8f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	4313      	orrs	r3, r2
 800c902:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c90a:	f023 0303 	bic.w	r3, r3, #3
 800c90e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	689a      	ldr	r2, [r3, #8]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	021b      	lsls	r3, r3, #8
 800c91a:	4313      	orrs	r3, r2
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	4313      	orrs	r3, r2
 800c920:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c928:	f023 030c 	bic.w	r3, r3, #12
 800c92c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	68da      	ldr	r2, [r3, #12]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	021b      	lsls	r3, r3, #8
 800c944:	4313      	orrs	r3, r2
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	4313      	orrs	r3, r2
 800c94a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	011a      	lsls	r2, r3, #4
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	031b      	lsls	r3, r3, #12
 800c958:	4313      	orrs	r3, r2
 800c95a:	693a      	ldr	r2, [r7, #16]
 800c95c:	4313      	orrs	r3, r2
 800c95e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c966:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c96e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	685a      	ldr	r2, [r3, #4]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	695b      	ldr	r3, [r3, #20]
 800c978:	011b      	lsls	r3, r3, #4
 800c97a:	4313      	orrs	r3, r2
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	4313      	orrs	r3, r2
 800c980:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	697a      	ldr	r2, [r7, #20]
 800c988:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	693a      	ldr	r2, [r7, #16]
 800c990:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2201      	movs	r2, #1
 800c99e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c9ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d110      	bne.n	800ca26 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d102      	bne.n	800ca10 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ca0a:	7b7b      	ldrb	r3, [r7, #13]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d001      	beq.n	800ca14 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	e089      	b.n	800cb28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2202      	movs	r2, #2
 800ca18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2202      	movs	r2, #2
 800ca20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca24:	e031      	b.n	800ca8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b04      	cmp	r3, #4
 800ca2a:	d110      	bne.n	800ca4e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca2c:	7bbb      	ldrb	r3, [r7, #14]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d102      	bne.n	800ca38 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ca32:	7b3b      	ldrb	r3, [r7, #12]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d001      	beq.n	800ca3c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e075      	b.n	800cb28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2202      	movs	r2, #2
 800ca40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2202      	movs	r2, #2
 800ca48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca4c:	e01d      	b.n	800ca8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca4e:	7bfb      	ldrb	r3, [r7, #15]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d108      	bne.n	800ca66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca54:	7bbb      	ldrb	r3, [r7, #14]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d105      	bne.n	800ca66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca5a:	7b7b      	ldrb	r3, [r7, #13]
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d102      	bne.n	800ca66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ca60:	7b3b      	ldrb	r3, [r7, #12]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d001      	beq.n	800ca6a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e05e      	b.n	800cb28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2202      	movs	r2, #2
 800ca76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2202      	movs	r2, #2
 800ca86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d003      	beq.n	800ca98 <HAL_TIM_Encoder_Start_IT+0xc4>
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2b04      	cmp	r3, #4
 800ca94:	d010      	beq.n	800cab8 <HAL_TIM_Encoder_Start_IT+0xe4>
 800ca96:	e01f      	b.n	800cad8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	2100      	movs	r1, #0
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 fe4f 	bl	800d744 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68da      	ldr	r2, [r3, #12]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f042 0202 	orr.w	r2, r2, #2
 800cab4:	60da      	str	r2, [r3, #12]
      break;
 800cab6:	e02e      	b.n	800cb16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2201      	movs	r2, #1
 800cabe:	2104      	movs	r1, #4
 800cac0:	4618      	mov	r0, r3
 800cac2:	f000 fe3f 	bl	800d744 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68da      	ldr	r2, [r3, #12]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f042 0204 	orr.w	r2, r2, #4
 800cad4:	60da      	str	r2, [r3, #12]
      break;
 800cad6:	e01e      	b.n	800cb16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2201      	movs	r2, #1
 800cade:	2100      	movs	r1, #0
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 fe2f 	bl	800d744 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2201      	movs	r2, #1
 800caec:	2104      	movs	r1, #4
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fe28 	bl	800d744 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f042 0202 	orr.w	r2, r2, #2
 800cb02:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68da      	ldr	r2, [r3, #12]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f042 0204 	orr.w	r2, r2, #4
 800cb12:	60da      	str	r2, [r3, #12]
      break;
 800cb14:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f042 0201 	orr.w	r2, r2, #1
 800cb24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	f003 0302 	and.w	r3, r3, #2
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d020      	beq.n	800cb94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f003 0302 	and.w	r3, r3, #2
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d01b      	beq.n	800cb94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f06f 0202 	mvn.w	r2, #2
 800cb64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	699b      	ldr	r3, [r3, #24]
 800cb72:	f003 0303 	and.w	r3, r3, #3
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d003      	beq.n	800cb82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7f6 febc 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 800cb80:	e005      	b.n	800cb8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fa38 	bl	800cff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7f6 fec7 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	f003 0304 	and.w	r3, r3, #4
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d020      	beq.n	800cbe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d01b      	beq.n	800cbe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f06f 0204 	mvn.w	r2, #4
 800cbb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2202      	movs	r2, #2
 800cbb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	699b      	ldr	r3, [r3, #24]
 800cbbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d003      	beq.n	800cbce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7f6 fe96 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 800cbcc:	e005      	b.n	800cbda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fa12 	bl	800cff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7f6 fea1 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	f003 0308 	and.w	r3, r3, #8
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d020      	beq.n	800cc2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f003 0308 	and.w	r3, r3, #8
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d01b      	beq.n	800cc2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f06f 0208 	mvn.w	r2, #8
 800cbfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2204      	movs	r2, #4
 800cc02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	69db      	ldr	r3, [r3, #28]
 800cc0a:	f003 0303 	and.w	r3, r3, #3
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d003      	beq.n	800cc1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f7f6 fe70 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 800cc18:	e005      	b.n	800cc26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 f9ec 	bl	800cff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7f6 fe7b 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	f003 0310 	and.w	r3, r3, #16
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d020      	beq.n	800cc78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f003 0310 	and.w	r3, r3, #16
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d01b      	beq.n	800cc78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f06f 0210 	mvn.w	r2, #16
 800cc48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2208      	movs	r2, #8
 800cc4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	69db      	ldr	r3, [r3, #28]
 800cc56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d003      	beq.n	800cc66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7f6 fe4a 	bl	80038f8 <HAL_TIM_IC_CaptureCallback>
 800cc64:	e005      	b.n	800cc72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f9c6 	bl	800cff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7f6 fe55 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00c      	beq.n	800cc9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d007      	beq.n	800cc9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f06f 0201 	mvn.w	r2, #1
 800cc94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7f6 fe66 	bl	8003968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d104      	bne.n	800ccb0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00c      	beq.n	800ccca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d007      	beq.n	800ccca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ccc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 ff83 	bl	800dbd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00c      	beq.n	800ccee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d007      	beq.n	800ccee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 ff7b 	bl	800dbe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d00c      	beq.n	800cd12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d007      	beq.n	800cd12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f97d 	bl	800d00c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	f003 0320 	and.w	r3, r3, #32
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00c      	beq.n	800cd36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f003 0320 	and.w	r3, r3, #32
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d007      	beq.n	800cd36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f06f 0220 	mvn.w	r2, #32
 800cd2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 ff43 	bl	800dbbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00c      	beq.n	800cd5a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d007      	beq.n	800cd5a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cd52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 ff4f 	bl	800dbf8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00c      	beq.n	800cd7e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d007      	beq.n	800cd7e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cd76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 ff47 	bl	800dc0c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d00c      	beq.n	800cda2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d007      	beq.n	800cda2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cd9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 ff3f 	bl	800dc20 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00c      	beq.n	800cdc6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d007      	beq.n	800cdc6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cdbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 ff37 	bl	800dc34 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cdc6:	bf00      	nop
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b086      	sub	sp, #24
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d101      	bne.n	800cdee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cdea:	2302      	movs	r3, #2
 800cdec:	e0ff      	b.n	800cfee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b14      	cmp	r3, #20
 800cdfa:	f200 80f0 	bhi.w	800cfde <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cdfe:	a201      	add	r2, pc, #4	; (adr r2, 800ce04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ce00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce04:	0800ce59 	.word	0x0800ce59
 800ce08:	0800cfdf 	.word	0x0800cfdf
 800ce0c:	0800cfdf 	.word	0x0800cfdf
 800ce10:	0800cfdf 	.word	0x0800cfdf
 800ce14:	0800ce99 	.word	0x0800ce99
 800ce18:	0800cfdf 	.word	0x0800cfdf
 800ce1c:	0800cfdf 	.word	0x0800cfdf
 800ce20:	0800cfdf 	.word	0x0800cfdf
 800ce24:	0800cedb 	.word	0x0800cedb
 800ce28:	0800cfdf 	.word	0x0800cfdf
 800ce2c:	0800cfdf 	.word	0x0800cfdf
 800ce30:	0800cfdf 	.word	0x0800cfdf
 800ce34:	0800cf1b 	.word	0x0800cf1b
 800ce38:	0800cfdf 	.word	0x0800cfdf
 800ce3c:	0800cfdf 	.word	0x0800cfdf
 800ce40:	0800cfdf 	.word	0x0800cfdf
 800ce44:	0800cf5d 	.word	0x0800cf5d
 800ce48:	0800cfdf 	.word	0x0800cfdf
 800ce4c:	0800cfdf 	.word	0x0800cfdf
 800ce50:	0800cfdf 	.word	0x0800cfdf
 800ce54:	0800cf9d 	.word	0x0800cf9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	68b9      	ldr	r1, [r7, #8]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 f97a 	bl	800d158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	699a      	ldr	r2, [r3, #24]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f042 0208 	orr.w	r2, r2, #8
 800ce72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	699a      	ldr	r2, [r3, #24]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f022 0204 	bic.w	r2, r2, #4
 800ce82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	6999      	ldr	r1, [r3, #24]
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	691a      	ldr	r2, [r3, #16]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	430a      	orrs	r2, r1
 800ce94:	619a      	str	r2, [r3, #24]
      break;
 800ce96:	e0a5      	b.n	800cfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	68b9      	ldr	r1, [r7, #8]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f000 f9ea 	bl	800d278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	699a      	ldr	r2, [r3, #24]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ceb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	699a      	ldr	r2, [r3, #24]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	6999      	ldr	r1, [r3, #24]
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	021a      	lsls	r2, r3, #8
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	430a      	orrs	r2, r1
 800ced6:	619a      	str	r2, [r3, #24]
      break;
 800ced8:	e084      	b.n	800cfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	68b9      	ldr	r1, [r7, #8]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f000 fa53 	bl	800d38c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	69da      	ldr	r2, [r3, #28]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f042 0208 	orr.w	r2, r2, #8
 800cef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	69da      	ldr	r2, [r3, #28]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f022 0204 	bic.w	r2, r2, #4
 800cf04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	69d9      	ldr	r1, [r3, #28]
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	691a      	ldr	r2, [r3, #16]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	430a      	orrs	r2, r1
 800cf16:	61da      	str	r2, [r3, #28]
      break;
 800cf18:	e064      	b.n	800cfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	68b9      	ldr	r1, [r7, #8]
 800cf20:	4618      	mov	r0, r3
 800cf22:	f000 fabb 	bl	800d49c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	69da      	ldr	r2, [r3, #28]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	69da      	ldr	r2, [r3, #28]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	69d9      	ldr	r1, [r3, #28]
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	691b      	ldr	r3, [r3, #16]
 800cf50:	021a      	lsls	r2, r3, #8
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	430a      	orrs	r2, r1
 800cf58:	61da      	str	r2, [r3, #28]
      break;
 800cf5a:	e043      	b.n	800cfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	68b9      	ldr	r1, [r7, #8]
 800cf62:	4618      	mov	r0, r3
 800cf64:	f000 fb24 	bl	800d5b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f042 0208 	orr.w	r2, r2, #8
 800cf76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f022 0204 	bic.w	r2, r2, #4
 800cf86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	691a      	ldr	r2, [r3, #16]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	430a      	orrs	r2, r1
 800cf98:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800cf9a:	e023      	b.n	800cfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	68b9      	ldr	r1, [r7, #8]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f000 fb68 	bl	800d678 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfc6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	021a      	lsls	r2, r3, #8
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	430a      	orrs	r2, r1
 800cfda:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800cfdc:	e002      	b.n	800cfe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	75fb      	strb	r3, [r7, #23]
      break;
 800cfe2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cfec:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop

0800cff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a42      	ldr	r2, [pc, #264]	; (800d13c <TIM_Base_SetConfig+0x11c>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d00f      	beq.n	800d058 <TIM_Base_SetConfig+0x38>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d03e:	d00b      	beq.n	800d058 <TIM_Base_SetConfig+0x38>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a3f      	ldr	r2, [pc, #252]	; (800d140 <TIM_Base_SetConfig+0x120>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d007      	beq.n	800d058 <TIM_Base_SetConfig+0x38>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a3e      	ldr	r2, [pc, #248]	; (800d144 <TIM_Base_SetConfig+0x124>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d003      	beq.n	800d058 <TIM_Base_SetConfig+0x38>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a3d      	ldr	r2, [pc, #244]	; (800d148 <TIM_Base_SetConfig+0x128>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d108      	bne.n	800d06a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d05e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	4313      	orrs	r3, r2
 800d068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a33      	ldr	r2, [pc, #204]	; (800d13c <TIM_Base_SetConfig+0x11c>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d01b      	beq.n	800d0aa <TIM_Base_SetConfig+0x8a>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d078:	d017      	beq.n	800d0aa <TIM_Base_SetConfig+0x8a>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4a30      	ldr	r2, [pc, #192]	; (800d140 <TIM_Base_SetConfig+0x120>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d013      	beq.n	800d0aa <TIM_Base_SetConfig+0x8a>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4a2f      	ldr	r2, [pc, #188]	; (800d144 <TIM_Base_SetConfig+0x124>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d00f      	beq.n	800d0aa <TIM_Base_SetConfig+0x8a>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4a2e      	ldr	r2, [pc, #184]	; (800d148 <TIM_Base_SetConfig+0x128>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d00b      	beq.n	800d0aa <TIM_Base_SetConfig+0x8a>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a2d      	ldr	r2, [pc, #180]	; (800d14c <TIM_Base_SetConfig+0x12c>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d007      	beq.n	800d0aa <TIM_Base_SetConfig+0x8a>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4a2c      	ldr	r2, [pc, #176]	; (800d150 <TIM_Base_SetConfig+0x130>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d003      	beq.n	800d0aa <TIM_Base_SetConfig+0x8a>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a2b      	ldr	r2, [pc, #172]	; (800d154 <TIM_Base_SetConfig+0x134>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d108      	bne.n	800d0bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	68fa      	ldr	r2, [r7, #12]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	695b      	ldr	r3, [r3, #20]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	689a      	ldr	r2, [r3, #8]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	4a16      	ldr	r2, [pc, #88]	; (800d13c <TIM_Base_SetConfig+0x11c>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d00f      	beq.n	800d108 <TIM_Base_SetConfig+0xe8>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	4a17      	ldr	r2, [pc, #92]	; (800d148 <TIM_Base_SetConfig+0x128>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d00b      	beq.n	800d108 <TIM_Base_SetConfig+0xe8>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4a16      	ldr	r2, [pc, #88]	; (800d14c <TIM_Base_SetConfig+0x12c>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d007      	beq.n	800d108 <TIM_Base_SetConfig+0xe8>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	4a15      	ldr	r2, [pc, #84]	; (800d150 <TIM_Base_SetConfig+0x130>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d003      	beq.n	800d108 <TIM_Base_SetConfig+0xe8>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4a14      	ldr	r2, [pc, #80]	; (800d154 <TIM_Base_SetConfig+0x134>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d103      	bne.n	800d110 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	691a      	ldr	r2, [r3, #16]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	f003 0301 	and.w	r3, r3, #1
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d105      	bne.n	800d12e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	f023 0201 	bic.w	r2, r3, #1
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	611a      	str	r2, [r3, #16]
  }
}
 800d12e:	bf00      	nop
 800d130:	3714      	adds	r7, #20
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	40012c00 	.word	0x40012c00
 800d140:	40000400 	.word	0x40000400
 800d144:	40000800 	.word	0x40000800
 800d148:	40013400 	.word	0x40013400
 800d14c:	40014000 	.word	0x40014000
 800d150:	40014400 	.word	0x40014400
 800d154:	40014800 	.word	0x40014800

0800d158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d158:	b480      	push	{r7}
 800d15a:	b087      	sub	sp, #28
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6a1b      	ldr	r3, [r3, #32]
 800d16c:	f023 0201 	bic.w	r2, r3, #1
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f023 0303 	bic.w	r3, r3, #3
 800d192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	f023 0302 	bic.w	r3, r3, #2
 800d1a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	697a      	ldr	r2, [r7, #20]
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a2c      	ldr	r2, [pc, #176]	; (800d264 <TIM_OC1_SetConfig+0x10c>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d00f      	beq.n	800d1d8 <TIM_OC1_SetConfig+0x80>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4a2b      	ldr	r2, [pc, #172]	; (800d268 <TIM_OC1_SetConfig+0x110>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d00b      	beq.n	800d1d8 <TIM_OC1_SetConfig+0x80>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4a2a      	ldr	r2, [pc, #168]	; (800d26c <TIM_OC1_SetConfig+0x114>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d007      	beq.n	800d1d8 <TIM_OC1_SetConfig+0x80>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	4a29      	ldr	r2, [pc, #164]	; (800d270 <TIM_OC1_SetConfig+0x118>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d003      	beq.n	800d1d8 <TIM_OC1_SetConfig+0x80>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4a28      	ldr	r2, [pc, #160]	; (800d274 <TIM_OC1_SetConfig+0x11c>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d10c      	bne.n	800d1f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	f023 0308 	bic.w	r3, r3, #8
 800d1de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	697a      	ldr	r2, [r7, #20]
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	f023 0304 	bic.w	r3, r3, #4
 800d1f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	4a1b      	ldr	r2, [pc, #108]	; (800d264 <TIM_OC1_SetConfig+0x10c>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d00f      	beq.n	800d21a <TIM_OC1_SetConfig+0xc2>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	4a1a      	ldr	r2, [pc, #104]	; (800d268 <TIM_OC1_SetConfig+0x110>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d00b      	beq.n	800d21a <TIM_OC1_SetConfig+0xc2>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	4a19      	ldr	r2, [pc, #100]	; (800d26c <TIM_OC1_SetConfig+0x114>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d007      	beq.n	800d21a <TIM_OC1_SetConfig+0xc2>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4a18      	ldr	r2, [pc, #96]	; (800d270 <TIM_OC1_SetConfig+0x118>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d003      	beq.n	800d21a <TIM_OC1_SetConfig+0xc2>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	4a17      	ldr	r2, [pc, #92]	; (800d274 <TIM_OC1_SetConfig+0x11c>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d111      	bne.n	800d23e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	695b      	ldr	r3, [r3, #20]
 800d22e:	693a      	ldr	r2, [r7, #16]
 800d230:	4313      	orrs	r3, r2
 800d232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	699b      	ldr	r3, [r3, #24]
 800d238:	693a      	ldr	r2, [r7, #16]
 800d23a:	4313      	orrs	r3, r2
 800d23c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	693a      	ldr	r2, [r7, #16]
 800d242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	685a      	ldr	r2, [r3, #4]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	697a      	ldr	r2, [r7, #20]
 800d256:	621a      	str	r2, [r3, #32]
}
 800d258:	bf00      	nop
 800d25a:	371c      	adds	r7, #28
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr
 800d264:	40012c00 	.word	0x40012c00
 800d268:	40013400 	.word	0x40013400
 800d26c:	40014000 	.word	0x40014000
 800d270:	40014400 	.word	0x40014400
 800d274:	40014800 	.word	0x40014800

0800d278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d278:	b480      	push	{r7}
 800d27a:	b087      	sub	sp, #28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a1b      	ldr	r3, [r3, #32]
 800d286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a1b      	ldr	r3, [r3, #32]
 800d28c:	f023 0210 	bic.w	r2, r3, #16
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d2a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	021b      	lsls	r3, r3, #8
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	f023 0320 	bic.w	r3, r3, #32
 800d2c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	011b      	lsls	r3, r3, #4
 800d2ce:	697a      	ldr	r2, [r7, #20]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a28      	ldr	r2, [pc, #160]	; (800d378 <TIM_OC2_SetConfig+0x100>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d003      	beq.n	800d2e4 <TIM_OC2_SetConfig+0x6c>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a27      	ldr	r2, [pc, #156]	; (800d37c <TIM_OC2_SetConfig+0x104>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d10d      	bne.n	800d300 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	011b      	lsls	r3, r3, #4
 800d2f2:	697a      	ldr	r2, [r7, #20]
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a1d      	ldr	r2, [pc, #116]	; (800d378 <TIM_OC2_SetConfig+0x100>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d00f      	beq.n	800d328 <TIM_OC2_SetConfig+0xb0>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a1c      	ldr	r2, [pc, #112]	; (800d37c <TIM_OC2_SetConfig+0x104>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d00b      	beq.n	800d328 <TIM_OC2_SetConfig+0xb0>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4a1b      	ldr	r2, [pc, #108]	; (800d380 <TIM_OC2_SetConfig+0x108>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d007      	beq.n	800d328 <TIM_OC2_SetConfig+0xb0>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	4a1a      	ldr	r2, [pc, #104]	; (800d384 <TIM_OC2_SetConfig+0x10c>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d003      	beq.n	800d328 <TIM_OC2_SetConfig+0xb0>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4a19      	ldr	r2, [pc, #100]	; (800d388 <TIM_OC2_SetConfig+0x110>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d113      	bne.n	800d350 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d32e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	695b      	ldr	r3, [r3, #20]
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	693a      	ldr	r2, [r7, #16]
 800d340:	4313      	orrs	r3, r2
 800d342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	699b      	ldr	r3, [r3, #24]
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	693a      	ldr	r2, [r7, #16]
 800d34c:	4313      	orrs	r3, r2
 800d34e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	693a      	ldr	r2, [r7, #16]
 800d354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	685a      	ldr	r2, [r3, #4]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	621a      	str	r2, [r3, #32]
}
 800d36a:	bf00      	nop
 800d36c:	371c      	adds	r7, #28
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	40012c00 	.word	0x40012c00
 800d37c:	40013400 	.word	0x40013400
 800d380:	40014000 	.word	0x40014000
 800d384:	40014400 	.word	0x40014400
 800d388:	40014800 	.word	0x40014800

0800d38c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a1b      	ldr	r3, [r3, #32]
 800d39a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a1b      	ldr	r3, [r3, #32]
 800d3a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	69db      	ldr	r3, [r3, #28]
 800d3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f023 0303 	bic.w	r3, r3, #3
 800d3c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	021b      	lsls	r3, r3, #8
 800d3e0:	697a      	ldr	r2, [r7, #20]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4a27      	ldr	r2, [pc, #156]	; (800d488 <TIM_OC3_SetConfig+0xfc>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d003      	beq.n	800d3f6 <TIM_OC3_SetConfig+0x6a>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	4a26      	ldr	r2, [pc, #152]	; (800d48c <TIM_OC3_SetConfig+0x100>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d10d      	bne.n	800d412 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	021b      	lsls	r3, r3, #8
 800d404:	697a      	ldr	r2, [r7, #20]
 800d406:	4313      	orrs	r3, r2
 800d408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a1c      	ldr	r2, [pc, #112]	; (800d488 <TIM_OC3_SetConfig+0xfc>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d00f      	beq.n	800d43a <TIM_OC3_SetConfig+0xae>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4a1b      	ldr	r2, [pc, #108]	; (800d48c <TIM_OC3_SetConfig+0x100>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d00b      	beq.n	800d43a <TIM_OC3_SetConfig+0xae>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	4a1a      	ldr	r2, [pc, #104]	; (800d490 <TIM_OC3_SetConfig+0x104>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d007      	beq.n	800d43a <TIM_OC3_SetConfig+0xae>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4a19      	ldr	r2, [pc, #100]	; (800d494 <TIM_OC3_SetConfig+0x108>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d003      	beq.n	800d43a <TIM_OC3_SetConfig+0xae>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4a18      	ldr	r2, [pc, #96]	; (800d498 <TIM_OC3_SetConfig+0x10c>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d113      	bne.n	800d462 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	695b      	ldr	r3, [r3, #20]
 800d44e:	011b      	lsls	r3, r3, #4
 800d450:	693a      	ldr	r2, [r7, #16]
 800d452:	4313      	orrs	r3, r2
 800d454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	011b      	lsls	r3, r3, #4
 800d45c:	693a      	ldr	r2, [r7, #16]
 800d45e:	4313      	orrs	r3, r2
 800d460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	693a      	ldr	r2, [r7, #16]
 800d466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	685a      	ldr	r2, [r3, #4]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	697a      	ldr	r2, [r7, #20]
 800d47a:	621a      	str	r2, [r3, #32]
}
 800d47c:	bf00      	nop
 800d47e:	371c      	adds	r7, #28
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr
 800d488:	40012c00 	.word	0x40012c00
 800d48c:	40013400 	.word	0x40013400
 800d490:	40014000 	.word	0x40014000
 800d494:	40014400 	.word	0x40014400
 800d498:	40014800 	.word	0x40014800

0800d49c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b087      	sub	sp, #28
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6a1b      	ldr	r3, [r3, #32]
 800d4aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6a1b      	ldr	r3, [r3, #32]
 800d4b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	69db      	ldr	r3, [r3, #28]
 800d4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d4ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	021b      	lsls	r3, r3, #8
 800d4de:	68fa      	ldr	r2, [r7, #12]
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	031b      	lsls	r3, r3, #12
 800d4f2:	697a      	ldr	r2, [r7, #20]
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	4a28      	ldr	r2, [pc, #160]	; (800d59c <TIM_OC4_SetConfig+0x100>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d003      	beq.n	800d508 <TIM_OC4_SetConfig+0x6c>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	4a27      	ldr	r2, [pc, #156]	; (800d5a0 <TIM_OC4_SetConfig+0x104>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d10d      	bne.n	800d524 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d50e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	031b      	lsls	r3, r3, #12
 800d516:	697a      	ldr	r2, [r7, #20]
 800d518:	4313      	orrs	r3, r2
 800d51a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a1d      	ldr	r2, [pc, #116]	; (800d59c <TIM_OC4_SetConfig+0x100>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d00f      	beq.n	800d54c <TIM_OC4_SetConfig+0xb0>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	4a1c      	ldr	r2, [pc, #112]	; (800d5a0 <TIM_OC4_SetConfig+0x104>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d00b      	beq.n	800d54c <TIM_OC4_SetConfig+0xb0>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4a1b      	ldr	r2, [pc, #108]	; (800d5a4 <TIM_OC4_SetConfig+0x108>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d007      	beq.n	800d54c <TIM_OC4_SetConfig+0xb0>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	4a1a      	ldr	r2, [pc, #104]	; (800d5a8 <TIM_OC4_SetConfig+0x10c>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d003      	beq.n	800d54c <TIM_OC4_SetConfig+0xb0>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	4a19      	ldr	r2, [pc, #100]	; (800d5ac <TIM_OC4_SetConfig+0x110>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d113      	bne.n	800d574 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d552:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d55a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	695b      	ldr	r3, [r3, #20]
 800d560:	019b      	lsls	r3, r3, #6
 800d562:	693a      	ldr	r2, [r7, #16]
 800d564:	4313      	orrs	r3, r2
 800d566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	699b      	ldr	r3, [r3, #24]
 800d56c:	019b      	lsls	r3, r3, #6
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	4313      	orrs	r3, r2
 800d572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	693a      	ldr	r2, [r7, #16]
 800d578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	685a      	ldr	r2, [r3, #4]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	621a      	str	r2, [r3, #32]
}
 800d58e:	bf00      	nop
 800d590:	371c      	adds	r7, #28
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	40012c00 	.word	0x40012c00
 800d5a0:	40013400 	.word	0x40013400
 800d5a4:	40014000 	.word	0x40014000
 800d5a8:	40014400 	.word	0x40014400
 800d5ac:	40014800 	.word	0x40014800

0800d5b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b087      	sub	sp, #28
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6a1b      	ldr	r3, [r3, #32]
 800d5be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6a1b      	ldr	r3, [r3, #32]
 800d5c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d5f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	041b      	lsls	r3, r3, #16
 800d5fc:	693a      	ldr	r2, [r7, #16]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4a17      	ldr	r2, [pc, #92]	; (800d664 <TIM_OC5_SetConfig+0xb4>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d00f      	beq.n	800d62a <TIM_OC5_SetConfig+0x7a>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4a16      	ldr	r2, [pc, #88]	; (800d668 <TIM_OC5_SetConfig+0xb8>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d00b      	beq.n	800d62a <TIM_OC5_SetConfig+0x7a>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	4a15      	ldr	r2, [pc, #84]	; (800d66c <TIM_OC5_SetConfig+0xbc>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d007      	beq.n	800d62a <TIM_OC5_SetConfig+0x7a>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4a14      	ldr	r2, [pc, #80]	; (800d670 <TIM_OC5_SetConfig+0xc0>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d003      	beq.n	800d62a <TIM_OC5_SetConfig+0x7a>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4a13      	ldr	r2, [pc, #76]	; (800d674 <TIM_OC5_SetConfig+0xc4>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d109      	bne.n	800d63e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d630:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	695b      	ldr	r3, [r3, #20]
 800d636:	021b      	lsls	r3, r3, #8
 800d638:	697a      	ldr	r2, [r7, #20]
 800d63a:	4313      	orrs	r3, r2
 800d63c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	685a      	ldr	r2, [r3, #4]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	693a      	ldr	r2, [r7, #16]
 800d656:	621a      	str	r2, [r3, #32]
}
 800d658:	bf00      	nop
 800d65a:	371c      	adds	r7, #28
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr
 800d664:	40012c00 	.word	0x40012c00
 800d668:	40013400 	.word	0x40013400
 800d66c:	40014000 	.word	0x40014000
 800d670:	40014400 	.word	0x40014400
 800d674:	40014800 	.word	0x40014800

0800d678 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d678:	b480      	push	{r7}
 800d67a:	b087      	sub	sp, #28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6a1b      	ldr	r3, [r3, #32]
 800d686:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a1b      	ldr	r3, [r3, #32]
 800d68c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d6a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	021b      	lsls	r3, r3, #8
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d6be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	051b      	lsls	r3, r3, #20
 800d6c6:	693a      	ldr	r2, [r7, #16]
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a18      	ldr	r2, [pc, #96]	; (800d730 <TIM_OC6_SetConfig+0xb8>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d00f      	beq.n	800d6f4 <TIM_OC6_SetConfig+0x7c>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4a17      	ldr	r2, [pc, #92]	; (800d734 <TIM_OC6_SetConfig+0xbc>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d00b      	beq.n	800d6f4 <TIM_OC6_SetConfig+0x7c>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4a16      	ldr	r2, [pc, #88]	; (800d738 <TIM_OC6_SetConfig+0xc0>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d007      	beq.n	800d6f4 <TIM_OC6_SetConfig+0x7c>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	4a15      	ldr	r2, [pc, #84]	; (800d73c <TIM_OC6_SetConfig+0xc4>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d003      	beq.n	800d6f4 <TIM_OC6_SetConfig+0x7c>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4a14      	ldr	r2, [pc, #80]	; (800d740 <TIM_OC6_SetConfig+0xc8>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d109      	bne.n	800d708 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d6fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	695b      	ldr	r3, [r3, #20]
 800d700:	029b      	lsls	r3, r3, #10
 800d702:	697a      	ldr	r2, [r7, #20]
 800d704:	4313      	orrs	r3, r2
 800d706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	697a      	ldr	r2, [r7, #20]
 800d70c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	685a      	ldr	r2, [r3, #4]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	621a      	str	r2, [r3, #32]
}
 800d722:	bf00      	nop
 800d724:	371c      	adds	r7, #28
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	40012c00 	.word	0x40012c00
 800d734:	40013400 	.word	0x40013400
 800d738:	40014000 	.word	0x40014000
 800d73c:	40014400 	.word	0x40014400
 800d740:	40014800 	.word	0x40014800

0800d744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d744:	b480      	push	{r7}
 800d746:	b087      	sub	sp, #28
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	f003 031f 	and.w	r3, r3, #31
 800d756:	2201      	movs	r2, #1
 800d758:	fa02 f303 	lsl.w	r3, r2, r3
 800d75c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6a1a      	ldr	r2, [r3, #32]
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	43db      	mvns	r3, r3
 800d766:	401a      	ands	r2, r3
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6a1a      	ldr	r2, [r3, #32]
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	f003 031f 	and.w	r3, r3, #31
 800d776:	6879      	ldr	r1, [r7, #4]
 800d778:	fa01 f303 	lsl.w	r3, r1, r3
 800d77c:	431a      	orrs	r2, r3
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	621a      	str	r2, [r3, #32]
}
 800d782:	bf00      	nop
 800d784:	371c      	adds	r7, #28
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr
	...

0800d790 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d79a:	2300      	movs	r3, #0
 800d79c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d109      	bne.n	800d7b8 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	bf14      	ite	ne
 800d7b0:	2301      	movne	r3, #1
 800d7b2:	2300      	moveq	r3, #0
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	e022      	b.n	800d7fe <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	2b04      	cmp	r3, #4
 800d7bc:	d109      	bne.n	800d7d2 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	bf14      	ite	ne
 800d7ca:	2301      	movne	r3, #1
 800d7cc:	2300      	moveq	r3, #0
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	e015      	b.n	800d7fe <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	2b08      	cmp	r3, #8
 800d7d6:	d109      	bne.n	800d7ec <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	bf14      	ite	ne
 800d7e4:	2301      	movne	r3, #1
 800d7e6:	2300      	moveq	r3, #0
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	e008      	b.n	800d7fe <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	bf14      	ite	ne
 800d7f8:	2301      	movne	r3, #1
 800d7fa:	2300      	moveq	r3, #0
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d001      	beq.n	800d806 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800d802:	2301      	movs	r3, #1
 800d804:	e0bc      	b.n	800d980 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d104      	bne.n	800d816 <HAL_TIMEx_PWMN_Start_IT+0x86>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2202      	movs	r2, #2
 800d810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d814:	e013      	b.n	800d83e <HAL_TIMEx_PWMN_Start_IT+0xae>
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	2b04      	cmp	r3, #4
 800d81a:	d104      	bne.n	800d826 <HAL_TIMEx_PWMN_Start_IT+0x96>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2202      	movs	r2, #2
 800d820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d824:	e00b      	b.n	800d83e <HAL_TIMEx_PWMN_Start_IT+0xae>
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	2b08      	cmp	r3, #8
 800d82a:	d104      	bne.n	800d836 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2202      	movs	r2, #2
 800d830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d834:	e003      	b.n	800d83e <HAL_TIMEx_PWMN_Start_IT+0xae>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2202      	movs	r2, #2
 800d83a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	2b0c      	cmp	r3, #12
 800d842:	d841      	bhi.n	800d8c8 <HAL_TIMEx_PWMN_Start_IT+0x138>
 800d844:	a201      	add	r2, pc, #4	; (adr r2, 800d84c <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800d846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84a:	bf00      	nop
 800d84c:	0800d881 	.word	0x0800d881
 800d850:	0800d8c9 	.word	0x0800d8c9
 800d854:	0800d8c9 	.word	0x0800d8c9
 800d858:	0800d8c9 	.word	0x0800d8c9
 800d85c:	0800d893 	.word	0x0800d893
 800d860:	0800d8c9 	.word	0x0800d8c9
 800d864:	0800d8c9 	.word	0x0800d8c9
 800d868:	0800d8c9 	.word	0x0800d8c9
 800d86c:	0800d8a5 	.word	0x0800d8a5
 800d870:	0800d8c9 	.word	0x0800d8c9
 800d874:	0800d8c9 	.word	0x0800d8c9
 800d878:	0800d8c9 	.word	0x0800d8c9
 800d87c:	0800d8b7 	.word	0x0800d8b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	68da      	ldr	r2, [r3, #12]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f042 0202 	orr.w	r2, r2, #2
 800d88e:	60da      	str	r2, [r3, #12]
      break;
 800d890:	e01d      	b.n	800d8ce <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	68da      	ldr	r2, [r3, #12]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f042 0204 	orr.w	r2, r2, #4
 800d8a0:	60da      	str	r2, [r3, #12]
      break;
 800d8a2:	e014      	b.n	800d8ce <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68da      	ldr	r2, [r3, #12]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f042 0208 	orr.w	r2, r2, #8
 800d8b2:	60da      	str	r2, [r3, #12]
      break;
 800d8b4:	e00b      	b.n	800d8ce <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	68da      	ldr	r2, [r3, #12]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f042 0210 	orr.w	r2, r2, #16
 800d8c4:	60da      	str	r2, [r3, #12]
      break;
 800d8c6:	e002      	b.n	800d8ce <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d8cc:	bf00      	nop
  }

  if (status == HAL_OK)
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d154      	bne.n	800d97e <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	68da      	ldr	r2, [r3, #12]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d8e2:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2204      	movs	r2, #4
 800d8ea:	6839      	ldr	r1, [r7, #0]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 f9ab 	bl	800dc48 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d900:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4a20      	ldr	r2, [pc, #128]	; (800d988 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d018      	beq.n	800d93e <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d914:	d013      	beq.n	800d93e <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a1c      	ldr	r2, [pc, #112]	; (800d98c <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d00e      	beq.n	800d93e <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a1a      	ldr	r2, [pc, #104]	; (800d990 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d009      	beq.n	800d93e <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4a19      	ldr	r2, [pc, #100]	; (800d994 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d004      	beq.n	800d93e <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a17      	ldr	r2, [pc, #92]	; (800d998 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d115      	bne.n	800d96a <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	689a      	ldr	r2, [r3, #8]
 800d944:	4b15      	ldr	r3, [pc, #84]	; (800d99c <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800d946:	4013      	ands	r3, r2
 800d948:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	2b06      	cmp	r3, #6
 800d94e:	d015      	beq.n	800d97c <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d956:	d011      	beq.n	800d97c <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f042 0201 	orr.w	r2, r2, #1
 800d966:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d968:	e008      	b.n	800d97c <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f042 0201 	orr.w	r2, r2, #1
 800d978:	601a      	str	r2, [r3, #0]
 800d97a:	e000      	b.n	800d97e <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d97c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3710      	adds	r7, #16
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	40012c00 	.word	0x40012c00
 800d98c:	40000400 	.word	0x40000400
 800d990:	40000800 	.word	0x40000800
 800d994:	40013400 	.word	0x40013400
 800d998:	40014000 	.word	0x40014000
 800d99c:	00010007 	.word	0x00010007

0800d9a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d101      	bne.n	800d9b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d9b4:	2302      	movs	r3, #2
 800d9b6:	e065      	b.n	800da84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2202      	movs	r2, #2
 800d9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a2c      	ldr	r2, [pc, #176]	; (800da90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d004      	beq.n	800d9ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a2b      	ldr	r2, [pc, #172]	; (800da94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d108      	bne.n	800d9fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d9f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800da04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	4313      	orrs	r3, r2
 800da12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a1b      	ldr	r2, [pc, #108]	; (800da90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d018      	beq.n	800da58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da2e:	d013      	beq.n	800da58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a18      	ldr	r2, [pc, #96]	; (800da98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d00e      	beq.n	800da58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a17      	ldr	r2, [pc, #92]	; (800da9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d009      	beq.n	800da58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a12      	ldr	r2, [pc, #72]	; (800da94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d004      	beq.n	800da58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	4a13      	ldr	r2, [pc, #76]	; (800daa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d10c      	bne.n	800da72 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	4313      	orrs	r3, r2
 800da68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2201      	movs	r2, #1
 800da76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	40012c00 	.word	0x40012c00
 800da94:	40013400 	.word	0x40013400
 800da98:	40000400 	.word	0x40000400
 800da9c:	40000800 	.word	0x40000800
 800daa0:	40014000 	.word	0x40014000

0800daa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b085      	sub	sp, #20
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800daae:	2300      	movs	r3, #0
 800dab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d101      	bne.n	800dac0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dabc:	2302      	movs	r3, #2
 800dabe:	e073      	b.n	800dba8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2201      	movs	r2, #1
 800dac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	4313      	orrs	r3, r2
 800dae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	4313      	orrs	r3, r2
 800daf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4313      	orrs	r3, r2
 800dafe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	691b      	ldr	r3, [r3, #16]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	695b      	ldr	r3, [r3, #20]
 800db18:	4313      	orrs	r3, r2
 800db1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db26:	4313      	orrs	r3, r2
 800db28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	699b      	ldr	r3, [r3, #24]
 800db34:	041b      	lsls	r3, r3, #16
 800db36:	4313      	orrs	r3, r2
 800db38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	69db      	ldr	r3, [r3, #28]
 800db44:	4313      	orrs	r3, r2
 800db46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a19      	ldr	r2, [pc, #100]	; (800dbb4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d004      	beq.n	800db5c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a18      	ldr	r2, [pc, #96]	; (800dbb8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d11c      	bne.n	800db96 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db66:	051b      	lsls	r3, r3, #20
 800db68:	4313      	orrs	r3, r2
 800db6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	6a1b      	ldr	r3, [r3, #32]
 800db76:	4313      	orrs	r3, r2
 800db78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db84:	4313      	orrs	r3, r2
 800db86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db92:	4313      	orrs	r3, r2
 800db94:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3714      	adds	r7, #20
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr
 800dbb4:	40012c00 	.word	0x40012c00
 800dbb8:	40013400 	.word	0x40013400

0800dbbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dbc4:	bf00      	nop
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dbd8:	bf00      	nop
 800dbda:	370c      	adds	r7, #12
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dbec:	bf00      	nop
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800dc00:	bf00      	nop
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dc14:	bf00      	nop
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800dc28:	bf00      	nop
 800dc2a:	370c      	adds	r7, #12
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800dc3c:	bf00      	nop
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b087      	sub	sp, #28
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	f003 030f 	and.w	r3, r3, #15
 800dc5a:	2204      	movs	r2, #4
 800dc5c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6a1a      	ldr	r2, [r3, #32]
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	43db      	mvns	r3, r3
 800dc6a:	401a      	ands	r2, r3
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6a1a      	ldr	r2, [r3, #32]
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	f003 030f 	and.w	r3, r3, #15
 800dc7a:	6879      	ldr	r1, [r7, #4]
 800dc7c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc80:	431a      	orrs	r2, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	621a      	str	r2, [r3, #32]
}
 800dc86:	bf00      	nop
 800dc88:	371c      	adds	r7, #28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b082      	sub	sp, #8
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e042      	b.n	800dd2a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d106      	bne.n	800dcbc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7f7 ff86 	bl	8005bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2224      	movs	r2, #36	; 0x24
 800dcc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f022 0201 	bic.w	r2, r2, #1
 800dcd2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 fecd 	bl	800ea7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 fbfe 	bl	800e4e4 <UART_SetConfig>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d101      	bne.n	800dcf2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e01b      	b.n	800dd2a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	685a      	ldr	r2, [r3, #4]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	689a      	ldr	r2, [r3, #8]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f042 0201 	orr.w	r2, r2, #1
 800dd20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 ff4c 	bl	800ebc0 <UART_CheckIdleState>
 800dd28:	4603      	mov	r3, r0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3708      	adds	r7, #8
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
	...

0800dd34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b091      	sub	sp, #68	; 0x44
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	4613      	mov	r3, r2
 800dd40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd48:	2b20      	cmp	r3, #32
 800dd4a:	d178      	bne.n	800de3e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d002      	beq.n	800dd58 <HAL_UART_Transmit_IT+0x24>
 800dd52:	88fb      	ldrh	r3, [r7, #6]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e071      	b.n	800de40 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	88fa      	ldrh	r2, [r7, #6]
 800dd66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	88fa      	ldrh	r2, [r7, #6]
 800dd6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2200      	movs	r2, #0
 800dd76:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2221      	movs	r2, #33	; 0x21
 800dd84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd90:	d12a      	bne.n	800dde8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd9a:	d107      	bne.n	800ddac <HAL_UART_Transmit_IT+0x78>
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	691b      	ldr	r3, [r3, #16]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d103      	bne.n	800ddac <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	4a29      	ldr	r2, [pc, #164]	; (800de4c <HAL_UART_Transmit_IT+0x118>)
 800dda8:	679a      	str	r2, [r3, #120]	; 0x78
 800ddaa:	e002      	b.n	800ddb2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	4a28      	ldr	r2, [pc, #160]	; (800de50 <HAL_UART_Transmit_IT+0x11c>)
 800ddb0:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	3308      	adds	r3, #8
 800ddb8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbc:	e853 3f00 	ldrex	r3, [r3]
 800ddc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ddc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ddc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3308      	adds	r3, #8
 800ddd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddd2:	637a      	str	r2, [r7, #52]	; 0x34
 800ddd4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ddd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddda:	e841 2300 	strex	r3, r2, [r1]
 800ddde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d1e5      	bne.n	800ddb2 <HAL_UART_Transmit_IT+0x7e>
 800dde6:	e028      	b.n	800de3a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddf0:	d107      	bne.n	800de02 <HAL_UART_Transmit_IT+0xce>
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	691b      	ldr	r3, [r3, #16]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d103      	bne.n	800de02 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	4a15      	ldr	r2, [pc, #84]	; (800de54 <HAL_UART_Transmit_IT+0x120>)
 800ddfe:	679a      	str	r2, [r3, #120]	; 0x78
 800de00:	e002      	b.n	800de08 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	4a14      	ldr	r2, [pc, #80]	; (800de58 <HAL_UART_Transmit_IT+0x124>)
 800de06:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	e853 3f00 	ldrex	r3, [r3]
 800de14:	613b      	str	r3, [r7, #16]
   return(result);
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de26:	623b      	str	r3, [r7, #32]
 800de28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de2a:	69f9      	ldr	r1, [r7, #28]
 800de2c:	6a3a      	ldr	r2, [r7, #32]
 800de2e:	e841 2300 	strex	r3, r2, [r1]
 800de32:	61bb      	str	r3, [r7, #24]
   return(result);
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1e6      	bne.n	800de08 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800de3a:	2300      	movs	r3, #0
 800de3c:	e000      	b.n	800de40 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800de3e:	2302      	movs	r3, #2
  }
}
 800de40:	4618      	mov	r0, r3
 800de42:	3744      	adds	r7, #68	; 0x44
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	0800f141 	.word	0x0800f141
 800de50:	0800f061 	.word	0x0800f061
 800de54:	0800ef9f 	.word	0x0800ef9f
 800de58:	0800eee7 	.word	0x0800eee7

0800de5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b0ba      	sub	sp, #232	; 0xe8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	69db      	ldr	r3, [r3, #28]
 800de6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800de82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800de86:	f640 030f 	movw	r3, #2063	; 0x80f
 800de8a:	4013      	ands	r3, r2
 800de8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800de90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de94:	2b00      	cmp	r3, #0
 800de96:	d11b      	bne.n	800ded0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800de98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de9c:	f003 0320 	and.w	r3, r3, #32
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d015      	beq.n	800ded0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dea8:	f003 0320 	and.w	r3, r3, #32
 800deac:	2b00      	cmp	r3, #0
 800deae:	d105      	bne.n	800debc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800deb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800deb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d009      	beq.n	800ded0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f000 82e3 	beq.w	800e48c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	4798      	blx	r3
      }
      return;
 800dece:	e2dd      	b.n	800e48c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ded0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f000 8123 	beq.w	800e120 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800deda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dede:	4b8d      	ldr	r3, [pc, #564]	; (800e114 <HAL_UART_IRQHandler+0x2b8>)
 800dee0:	4013      	ands	r3, r2
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d106      	bne.n	800def4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dee6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800deea:	4b8b      	ldr	r3, [pc, #556]	; (800e118 <HAL_UART_IRQHandler+0x2bc>)
 800deec:	4013      	ands	r3, r2
 800deee:	2b00      	cmp	r3, #0
 800def0:	f000 8116 	beq.w	800e120 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800def4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800def8:	f003 0301 	and.w	r3, r3, #1
 800defc:	2b00      	cmp	r3, #0
 800defe:	d011      	beq.n	800df24 <HAL_UART_IRQHandler+0xc8>
 800df00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d00b      	beq.n	800df24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	2201      	movs	r2, #1
 800df12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df1a:	f043 0201 	orr.w	r2, r3, #1
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df28:	f003 0302 	and.w	r3, r3, #2
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d011      	beq.n	800df54 <HAL_UART_IRQHandler+0xf8>
 800df30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df34:	f003 0301 	and.w	r3, r3, #1
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00b      	beq.n	800df54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2202      	movs	r2, #2
 800df42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df4a:	f043 0204 	orr.w	r2, r3, #4
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df58:	f003 0304 	and.w	r3, r3, #4
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d011      	beq.n	800df84 <HAL_UART_IRQHandler+0x128>
 800df60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df64:	f003 0301 	and.w	r3, r3, #1
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d00b      	beq.n	800df84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2204      	movs	r2, #4
 800df72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df7a:	f043 0202 	orr.w	r2, r3, #2
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800df84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df88:	f003 0308 	and.w	r3, r3, #8
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d017      	beq.n	800dfc0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800df90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df94:	f003 0320 	and.w	r3, r3, #32
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d105      	bne.n	800dfa8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800df9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dfa0:	4b5c      	ldr	r3, [pc, #368]	; (800e114 <HAL_UART_IRQHandler+0x2b8>)
 800dfa2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d00b      	beq.n	800dfc0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2208      	movs	r2, #8
 800dfae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfb6:	f043 0208 	orr.w	r2, r3, #8
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dfc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d012      	beq.n	800dff2 <HAL_UART_IRQHandler+0x196>
 800dfcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00c      	beq.n	800dff2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfe8:	f043 0220 	orr.w	r2, r3, #32
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f000 8249 	beq.w	800e490 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e002:	f003 0320 	and.w	r3, r3, #32
 800e006:	2b00      	cmp	r3, #0
 800e008:	d013      	beq.n	800e032 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e00a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e00e:	f003 0320 	and.w	r3, r3, #32
 800e012:	2b00      	cmp	r3, #0
 800e014:	d105      	bne.n	800e022 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e01a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d007      	beq.n	800e032 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e026:	2b00      	cmp	r3, #0
 800e028:	d003      	beq.n	800e032 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e038:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e046:	2b40      	cmp	r3, #64	; 0x40
 800e048:	d005      	beq.n	800e056 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e04a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e04e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e052:	2b00      	cmp	r3, #0
 800e054:	d054      	beq.n	800e100 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 fec9 	bl	800edee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e066:	2b40      	cmp	r3, #64	; 0x40
 800e068:	d146      	bne.n	800e0f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	3308      	adds	r3, #8
 800e070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e078:	e853 3f00 	ldrex	r3, [r3]
 800e07c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e080:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	3308      	adds	r3, #8
 800e092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e096:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e09a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e09e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e0a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e0a6:	e841 2300 	strex	r3, r2, [r1]
 800e0aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e0ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1d9      	bne.n	800e06a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d017      	beq.n	800e0f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0c6:	4a15      	ldr	r2, [pc, #84]	; (800e11c <HAL_UART_IRQHandler+0x2c0>)
 800e0c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fb fbef 	bl	80098b4 <HAL_DMA_Abort_IT>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d019      	beq.n	800e110 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0ee:	e00f      	b.n	800e110 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 f9e1 	bl	800e4b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0f6:	e00b      	b.n	800e110 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 f9dd 	bl	800e4b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0fe:	e007      	b.n	800e110 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f000 f9d9 	bl	800e4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2200      	movs	r2, #0
 800e10a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e10e:	e1bf      	b.n	800e490 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e110:	bf00      	nop
    return;
 800e112:	e1bd      	b.n	800e490 <HAL_UART_IRQHandler+0x634>
 800e114:	10000001 	.word	0x10000001
 800e118:	04000120 	.word	0x04000120
 800e11c:	0800eebb 	.word	0x0800eebb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e124:	2b01      	cmp	r3, #1
 800e126:	f040 8153 	bne.w	800e3d0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e12e:	f003 0310 	and.w	r3, r3, #16
 800e132:	2b00      	cmp	r3, #0
 800e134:	f000 814c 	beq.w	800e3d0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e13c:	f003 0310 	and.w	r3, r3, #16
 800e140:	2b00      	cmp	r3, #0
 800e142:	f000 8145 	beq.w	800e3d0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2210      	movs	r2, #16
 800e14c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e158:	2b40      	cmp	r3, #64	; 0x40
 800e15a:	f040 80bb 	bne.w	800e2d4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e16c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e170:	2b00      	cmp	r3, #0
 800e172:	f000 818f 	beq.w	800e494 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e17c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e180:	429a      	cmp	r2, r3
 800e182:	f080 8187 	bcs.w	800e494 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e18c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f003 0320 	and.w	r3, r3, #32
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f040 8087 	bne.w	800e2b2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1b0:	e853 3f00 	ldrex	r3, [r3]
 800e1b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e1b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e1ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e1d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e1da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e1de:	e841 2300 	strex	r3, r2, [r1]
 800e1e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e1e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1da      	bne.n	800e1a4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3308      	adds	r3, #8
 800e1f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1f8:	e853 3f00 	ldrex	r3, [r3]
 800e1fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e1fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e200:	f023 0301 	bic.w	r3, r3, #1
 800e204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3308      	adds	r3, #8
 800e20e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e212:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e216:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e218:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e21a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e21e:	e841 2300 	strex	r3, r2, [r1]
 800e222:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e226:	2b00      	cmp	r3, #0
 800e228:	d1e1      	bne.n	800e1ee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	3308      	adds	r3, #8
 800e230:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e234:	e853 3f00 	ldrex	r3, [r3]
 800e238:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e23a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e23c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	3308      	adds	r3, #8
 800e24a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e24e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e250:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e252:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e254:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e256:	e841 2300 	strex	r3, r2, [r1]
 800e25a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e25c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d1e3      	bne.n	800e22a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2220      	movs	r2, #32
 800e266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2200      	movs	r2, #0
 800e26e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e278:	e853 3f00 	ldrex	r3, [r3]
 800e27c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e27e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e280:	f023 0310 	bic.w	r3, r3, #16
 800e284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	461a      	mov	r2, r3
 800e28e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e292:	65bb      	str	r3, [r7, #88]	; 0x58
 800e294:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e296:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e29a:	e841 2300 	strex	r3, r2, [r1]
 800e29e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d1e4      	bne.n	800e270 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7fb faa8 	bl	8009802 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 f8fd 	bl	800e4cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e2d2:	e0df      	b.n	800e494 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	1ad3      	subs	r3, r2, r3
 800e2e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f000 80d1 	beq.w	800e498 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800e2f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f000 80cc 	beq.w	800e498 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e308:	e853 3f00 	ldrex	r3, [r3]
 800e30c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e310:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e314:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	461a      	mov	r2, r3
 800e31e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e322:	647b      	str	r3, [r7, #68]	; 0x44
 800e324:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e326:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e32a:	e841 2300 	strex	r3, r2, [r1]
 800e32e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1e4      	bne.n	800e300 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	3308      	adds	r3, #8
 800e33c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e340:	e853 3f00 	ldrex	r3, [r3]
 800e344:	623b      	str	r3, [r7, #32]
   return(result);
 800e346:	6a3b      	ldr	r3, [r7, #32]
 800e348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e34c:	f023 0301 	bic.w	r3, r3, #1
 800e350:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	3308      	adds	r3, #8
 800e35a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e35e:	633a      	str	r2, [r7, #48]	; 0x30
 800e360:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e366:	e841 2300 	strex	r3, r2, [r1]
 800e36a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1e1      	bne.n	800e336 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2220      	movs	r2, #32
 800e376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2200      	movs	r2, #0
 800e384:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	e853 3f00 	ldrex	r3, [r3]
 800e392:	60fb      	str	r3, [r7, #12]
   return(result);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f023 0310 	bic.w	r3, r3, #16
 800e39a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e3a8:	61fb      	str	r3, [r7, #28]
 800e3aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ac:	69b9      	ldr	r1, [r7, #24]
 800e3ae:	69fa      	ldr	r2, [r7, #28]
 800e3b0:	e841 2300 	strex	r3, r2, [r1]
 800e3b4:	617b      	str	r3, [r7, #20]
   return(result);
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d1e4      	bne.n	800e386 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2202      	movs	r2, #2
 800e3c0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e3c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 f87f 	bl	800e4cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e3ce:	e063      	b.n	800e498 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00e      	beq.n	800e3fa <HAL_UART_IRQHandler+0x59e>
 800e3dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d008      	beq.n	800e3fa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e3f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 ff44 	bl	800f280 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e3f8:	e051      	b.n	800e49e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e3fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e402:	2b00      	cmp	r3, #0
 800e404:	d014      	beq.n	800e430 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e40a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d105      	bne.n	800e41e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d008      	beq.n	800e430 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e422:	2b00      	cmp	r3, #0
 800e424:	d03a      	beq.n	800e49c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	4798      	blx	r3
    }
    return;
 800e42e:	e035      	b.n	800e49c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d009      	beq.n	800e450 <HAL_UART_IRQHandler+0x5f4>
 800e43c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e444:	2b00      	cmp	r3, #0
 800e446:	d003      	beq.n	800e450 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 feee 	bl	800f22a <UART_EndTransmit_IT>
    return;
 800e44e:	e026      	b.n	800e49e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d009      	beq.n	800e470 <HAL_UART_IRQHandler+0x614>
 800e45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e460:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e464:	2b00      	cmp	r3, #0
 800e466:	d003      	beq.n	800e470 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 ff1d 	bl	800f2a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e46e:	e016      	b.n	800e49e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d010      	beq.n	800e49e <HAL_UART_IRQHandler+0x642>
 800e47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e480:	2b00      	cmp	r3, #0
 800e482:	da0c      	bge.n	800e49e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f000 ff05 	bl	800f294 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e48a:	e008      	b.n	800e49e <HAL_UART_IRQHandler+0x642>
      return;
 800e48c:	bf00      	nop
 800e48e:	e006      	b.n	800e49e <HAL_UART_IRQHandler+0x642>
    return;
 800e490:	bf00      	nop
 800e492:	e004      	b.n	800e49e <HAL_UART_IRQHandler+0x642>
      return;
 800e494:	bf00      	nop
 800e496:	e002      	b.n	800e49e <HAL_UART_IRQHandler+0x642>
      return;
 800e498:	bf00      	nop
 800e49a:	e000      	b.n	800e49e <HAL_UART_IRQHandler+0x642>
    return;
 800e49c:	bf00      	nop
  }
}
 800e49e:	37e8      	adds	r7, #232	; 0xe8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e4ac:	bf00      	nop
 800e4ae:	370c      	adds	r7, #12
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr

0800e4b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e4c0:	bf00      	nop
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e4d8:	bf00      	nop
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e4e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e4e8:	b08c      	sub	sp, #48	; 0x30
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	689a      	ldr	r2, [r3, #8]
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	431a      	orrs	r2, r3
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	695b      	ldr	r3, [r3, #20]
 800e502:	431a      	orrs	r2, r3
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	69db      	ldr	r3, [r3, #28]
 800e508:	4313      	orrs	r3, r2
 800e50a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	4bab      	ldr	r3, [pc, #684]	; (800e7c0 <UART_SetConfig+0x2dc>)
 800e514:	4013      	ands	r3, r2
 800e516:	697a      	ldr	r2, [r7, #20]
 800e518:	6812      	ldr	r2, [r2, #0]
 800e51a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e51c:	430b      	orrs	r3, r1
 800e51e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	68da      	ldr	r2, [r3, #12]
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	430a      	orrs	r2, r1
 800e534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4aa0      	ldr	r2, [pc, #640]	; (800e7c4 <UART_SetConfig+0x2e0>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d004      	beq.n	800e550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	6a1b      	ldr	r3, [r3, #32]
 800e54a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e54c:	4313      	orrs	r3, r2
 800e54e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800e55a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	6812      	ldr	r2, [r2, #0]
 800e562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e564:	430b      	orrs	r3, r1
 800e566:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e56e:	f023 010f 	bic.w	r1, r3, #15
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	430a      	orrs	r2, r1
 800e57c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	4a91      	ldr	r2, [pc, #580]	; (800e7c8 <UART_SetConfig+0x2e4>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d125      	bne.n	800e5d4 <UART_SetConfig+0xf0>
 800e588:	4b90      	ldr	r3, [pc, #576]	; (800e7cc <UART_SetConfig+0x2e8>)
 800e58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e58e:	f003 0303 	and.w	r3, r3, #3
 800e592:	2b03      	cmp	r3, #3
 800e594:	d81a      	bhi.n	800e5cc <UART_SetConfig+0xe8>
 800e596:	a201      	add	r2, pc, #4	; (adr r2, 800e59c <UART_SetConfig+0xb8>)
 800e598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e59c:	0800e5ad 	.word	0x0800e5ad
 800e5a0:	0800e5bd 	.word	0x0800e5bd
 800e5a4:	0800e5b5 	.word	0x0800e5b5
 800e5a8:	0800e5c5 	.word	0x0800e5c5
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5b2:	e0d6      	b.n	800e762 <UART_SetConfig+0x27e>
 800e5b4:	2302      	movs	r3, #2
 800e5b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5ba:	e0d2      	b.n	800e762 <UART_SetConfig+0x27e>
 800e5bc:	2304      	movs	r3, #4
 800e5be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5c2:	e0ce      	b.n	800e762 <UART_SetConfig+0x27e>
 800e5c4:	2308      	movs	r3, #8
 800e5c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5ca:	e0ca      	b.n	800e762 <UART_SetConfig+0x27e>
 800e5cc:	2310      	movs	r3, #16
 800e5ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5d2:	e0c6      	b.n	800e762 <UART_SetConfig+0x27e>
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a7d      	ldr	r2, [pc, #500]	; (800e7d0 <UART_SetConfig+0x2ec>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d138      	bne.n	800e650 <UART_SetConfig+0x16c>
 800e5de:	4b7b      	ldr	r3, [pc, #492]	; (800e7cc <UART_SetConfig+0x2e8>)
 800e5e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5e4:	f003 030c 	and.w	r3, r3, #12
 800e5e8:	2b0c      	cmp	r3, #12
 800e5ea:	d82d      	bhi.n	800e648 <UART_SetConfig+0x164>
 800e5ec:	a201      	add	r2, pc, #4	; (adr r2, 800e5f4 <UART_SetConfig+0x110>)
 800e5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f2:	bf00      	nop
 800e5f4:	0800e629 	.word	0x0800e629
 800e5f8:	0800e649 	.word	0x0800e649
 800e5fc:	0800e649 	.word	0x0800e649
 800e600:	0800e649 	.word	0x0800e649
 800e604:	0800e639 	.word	0x0800e639
 800e608:	0800e649 	.word	0x0800e649
 800e60c:	0800e649 	.word	0x0800e649
 800e610:	0800e649 	.word	0x0800e649
 800e614:	0800e631 	.word	0x0800e631
 800e618:	0800e649 	.word	0x0800e649
 800e61c:	0800e649 	.word	0x0800e649
 800e620:	0800e649 	.word	0x0800e649
 800e624:	0800e641 	.word	0x0800e641
 800e628:	2300      	movs	r3, #0
 800e62a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e62e:	e098      	b.n	800e762 <UART_SetConfig+0x27e>
 800e630:	2302      	movs	r3, #2
 800e632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e636:	e094      	b.n	800e762 <UART_SetConfig+0x27e>
 800e638:	2304      	movs	r3, #4
 800e63a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e63e:	e090      	b.n	800e762 <UART_SetConfig+0x27e>
 800e640:	2308      	movs	r3, #8
 800e642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e646:	e08c      	b.n	800e762 <UART_SetConfig+0x27e>
 800e648:	2310      	movs	r3, #16
 800e64a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e64e:	e088      	b.n	800e762 <UART_SetConfig+0x27e>
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a5f      	ldr	r2, [pc, #380]	; (800e7d4 <UART_SetConfig+0x2f0>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d125      	bne.n	800e6a6 <UART_SetConfig+0x1c2>
 800e65a:	4b5c      	ldr	r3, [pc, #368]	; (800e7cc <UART_SetConfig+0x2e8>)
 800e65c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e660:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e664:	2b30      	cmp	r3, #48	; 0x30
 800e666:	d016      	beq.n	800e696 <UART_SetConfig+0x1b2>
 800e668:	2b30      	cmp	r3, #48	; 0x30
 800e66a:	d818      	bhi.n	800e69e <UART_SetConfig+0x1ba>
 800e66c:	2b20      	cmp	r3, #32
 800e66e:	d00a      	beq.n	800e686 <UART_SetConfig+0x1a2>
 800e670:	2b20      	cmp	r3, #32
 800e672:	d814      	bhi.n	800e69e <UART_SetConfig+0x1ba>
 800e674:	2b00      	cmp	r3, #0
 800e676:	d002      	beq.n	800e67e <UART_SetConfig+0x19a>
 800e678:	2b10      	cmp	r3, #16
 800e67a:	d008      	beq.n	800e68e <UART_SetConfig+0x1aa>
 800e67c:	e00f      	b.n	800e69e <UART_SetConfig+0x1ba>
 800e67e:	2300      	movs	r3, #0
 800e680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e684:	e06d      	b.n	800e762 <UART_SetConfig+0x27e>
 800e686:	2302      	movs	r3, #2
 800e688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e68c:	e069      	b.n	800e762 <UART_SetConfig+0x27e>
 800e68e:	2304      	movs	r3, #4
 800e690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e694:	e065      	b.n	800e762 <UART_SetConfig+0x27e>
 800e696:	2308      	movs	r3, #8
 800e698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e69c:	e061      	b.n	800e762 <UART_SetConfig+0x27e>
 800e69e:	2310      	movs	r3, #16
 800e6a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6a4:	e05d      	b.n	800e762 <UART_SetConfig+0x27e>
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a4b      	ldr	r2, [pc, #300]	; (800e7d8 <UART_SetConfig+0x2f4>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d125      	bne.n	800e6fc <UART_SetConfig+0x218>
 800e6b0:	4b46      	ldr	r3, [pc, #280]	; (800e7cc <UART_SetConfig+0x2e8>)
 800e6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e6ba:	2bc0      	cmp	r3, #192	; 0xc0
 800e6bc:	d016      	beq.n	800e6ec <UART_SetConfig+0x208>
 800e6be:	2bc0      	cmp	r3, #192	; 0xc0
 800e6c0:	d818      	bhi.n	800e6f4 <UART_SetConfig+0x210>
 800e6c2:	2b80      	cmp	r3, #128	; 0x80
 800e6c4:	d00a      	beq.n	800e6dc <UART_SetConfig+0x1f8>
 800e6c6:	2b80      	cmp	r3, #128	; 0x80
 800e6c8:	d814      	bhi.n	800e6f4 <UART_SetConfig+0x210>
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d002      	beq.n	800e6d4 <UART_SetConfig+0x1f0>
 800e6ce:	2b40      	cmp	r3, #64	; 0x40
 800e6d0:	d008      	beq.n	800e6e4 <UART_SetConfig+0x200>
 800e6d2:	e00f      	b.n	800e6f4 <UART_SetConfig+0x210>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6da:	e042      	b.n	800e762 <UART_SetConfig+0x27e>
 800e6dc:	2302      	movs	r3, #2
 800e6de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6e2:	e03e      	b.n	800e762 <UART_SetConfig+0x27e>
 800e6e4:	2304      	movs	r3, #4
 800e6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6ea:	e03a      	b.n	800e762 <UART_SetConfig+0x27e>
 800e6ec:	2308      	movs	r3, #8
 800e6ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6f2:	e036      	b.n	800e762 <UART_SetConfig+0x27e>
 800e6f4:	2310      	movs	r3, #16
 800e6f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e6fa:	e032      	b.n	800e762 <UART_SetConfig+0x27e>
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a30      	ldr	r2, [pc, #192]	; (800e7c4 <UART_SetConfig+0x2e0>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d12a      	bne.n	800e75c <UART_SetConfig+0x278>
 800e706:	4b31      	ldr	r3, [pc, #196]	; (800e7cc <UART_SetConfig+0x2e8>)
 800e708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e70c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e714:	d01a      	beq.n	800e74c <UART_SetConfig+0x268>
 800e716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e71a:	d81b      	bhi.n	800e754 <UART_SetConfig+0x270>
 800e71c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e720:	d00c      	beq.n	800e73c <UART_SetConfig+0x258>
 800e722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e726:	d815      	bhi.n	800e754 <UART_SetConfig+0x270>
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d003      	beq.n	800e734 <UART_SetConfig+0x250>
 800e72c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e730:	d008      	beq.n	800e744 <UART_SetConfig+0x260>
 800e732:	e00f      	b.n	800e754 <UART_SetConfig+0x270>
 800e734:	2300      	movs	r3, #0
 800e736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e73a:	e012      	b.n	800e762 <UART_SetConfig+0x27e>
 800e73c:	2302      	movs	r3, #2
 800e73e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e742:	e00e      	b.n	800e762 <UART_SetConfig+0x27e>
 800e744:	2304      	movs	r3, #4
 800e746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e74a:	e00a      	b.n	800e762 <UART_SetConfig+0x27e>
 800e74c:	2308      	movs	r3, #8
 800e74e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e752:	e006      	b.n	800e762 <UART_SetConfig+0x27e>
 800e754:	2310      	movs	r3, #16
 800e756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e75a:	e002      	b.n	800e762 <UART_SetConfig+0x27e>
 800e75c:	2310      	movs	r3, #16
 800e75e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4a17      	ldr	r2, [pc, #92]	; (800e7c4 <UART_SetConfig+0x2e0>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	f040 80a8 	bne.w	800e8be <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e76e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e772:	2b08      	cmp	r3, #8
 800e774:	d834      	bhi.n	800e7e0 <UART_SetConfig+0x2fc>
 800e776:	a201      	add	r2, pc, #4	; (adr r2, 800e77c <UART_SetConfig+0x298>)
 800e778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77c:	0800e7a1 	.word	0x0800e7a1
 800e780:	0800e7e1 	.word	0x0800e7e1
 800e784:	0800e7a9 	.word	0x0800e7a9
 800e788:	0800e7e1 	.word	0x0800e7e1
 800e78c:	0800e7af 	.word	0x0800e7af
 800e790:	0800e7e1 	.word	0x0800e7e1
 800e794:	0800e7e1 	.word	0x0800e7e1
 800e798:	0800e7e1 	.word	0x0800e7e1
 800e79c:	0800e7b7 	.word	0x0800e7b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7a0:	f7fc fd34 	bl	800b20c <HAL_RCC_GetPCLK1Freq>
 800e7a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e7a6:	e021      	b.n	800e7ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e7a8:	4b0c      	ldr	r3, [pc, #48]	; (800e7dc <UART_SetConfig+0x2f8>)
 800e7aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e7ac:	e01e      	b.n	800e7ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7ae:	f7fc fcbf 	bl	800b130 <HAL_RCC_GetSysClockFreq>
 800e7b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e7b4:	e01a      	b.n	800e7ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e7bc:	e016      	b.n	800e7ec <UART_SetConfig+0x308>
 800e7be:	bf00      	nop
 800e7c0:	cfff69f3 	.word	0xcfff69f3
 800e7c4:	40008000 	.word	0x40008000
 800e7c8:	40013800 	.word	0x40013800
 800e7cc:	40021000 	.word	0x40021000
 800e7d0:	40004400 	.word	0x40004400
 800e7d4:	40004800 	.word	0x40004800
 800e7d8:	40004c00 	.word	0x40004c00
 800e7dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e7ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f000 812a 	beq.w	800ea48 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f8:	4a9e      	ldr	r2, [pc, #632]	; (800ea74 <UART_SetConfig+0x590>)
 800e7fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7fe:	461a      	mov	r2, r3
 800e800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e802:	fbb3 f3f2 	udiv	r3, r3, r2
 800e806:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	685a      	ldr	r2, [r3, #4]
 800e80c:	4613      	mov	r3, r2
 800e80e:	005b      	lsls	r3, r3, #1
 800e810:	4413      	add	r3, r2
 800e812:	69ba      	ldr	r2, [r7, #24]
 800e814:	429a      	cmp	r2, r3
 800e816:	d305      	bcc.n	800e824 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e81e:	69ba      	ldr	r2, [r7, #24]
 800e820:	429a      	cmp	r2, r3
 800e822:	d903      	bls.n	800e82c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800e824:	2301      	movs	r3, #1
 800e826:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e82a:	e10d      	b.n	800ea48 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	2200      	movs	r2, #0
 800e830:	60bb      	str	r3, [r7, #8]
 800e832:	60fa      	str	r2, [r7, #12]
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e838:	4a8e      	ldr	r2, [pc, #568]	; (800ea74 <UART_SetConfig+0x590>)
 800e83a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e83e:	b29b      	uxth	r3, r3
 800e840:	2200      	movs	r2, #0
 800e842:	603b      	str	r3, [r7, #0]
 800e844:	607a      	str	r2, [r7, #4]
 800e846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e84a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e84e:	f7f2 fa43 	bl	8000cd8 <__aeabi_uldivmod>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	4610      	mov	r0, r2
 800e858:	4619      	mov	r1, r3
 800e85a:	f04f 0200 	mov.w	r2, #0
 800e85e:	f04f 0300 	mov.w	r3, #0
 800e862:	020b      	lsls	r3, r1, #8
 800e864:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e868:	0202      	lsls	r2, r0, #8
 800e86a:	6979      	ldr	r1, [r7, #20]
 800e86c:	6849      	ldr	r1, [r1, #4]
 800e86e:	0849      	lsrs	r1, r1, #1
 800e870:	2000      	movs	r0, #0
 800e872:	460c      	mov	r4, r1
 800e874:	4605      	mov	r5, r0
 800e876:	eb12 0804 	adds.w	r8, r2, r4
 800e87a:	eb43 0905 	adc.w	r9, r3, r5
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	2200      	movs	r2, #0
 800e884:	469a      	mov	sl, r3
 800e886:	4693      	mov	fp, r2
 800e888:	4652      	mov	r2, sl
 800e88a:	465b      	mov	r3, fp
 800e88c:	4640      	mov	r0, r8
 800e88e:	4649      	mov	r1, r9
 800e890:	f7f2 fa22 	bl	8000cd8 <__aeabi_uldivmod>
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	4613      	mov	r3, r2
 800e89a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e8a2:	d308      	bcc.n	800e8b6 <UART_SetConfig+0x3d2>
 800e8a4:	6a3b      	ldr	r3, [r7, #32]
 800e8a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8aa:	d204      	bcs.n	800e8b6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	6a3a      	ldr	r2, [r7, #32]
 800e8b2:	60da      	str	r2, [r3, #12]
 800e8b4:	e0c8      	b.n	800ea48 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e8bc:	e0c4      	b.n	800ea48 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	69db      	ldr	r3, [r3, #28]
 800e8c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8c6:	d167      	bne.n	800e998 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800e8c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e8cc:	2b08      	cmp	r3, #8
 800e8ce:	d828      	bhi.n	800e922 <UART_SetConfig+0x43e>
 800e8d0:	a201      	add	r2, pc, #4	; (adr r2, 800e8d8 <UART_SetConfig+0x3f4>)
 800e8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d6:	bf00      	nop
 800e8d8:	0800e8fd 	.word	0x0800e8fd
 800e8dc:	0800e905 	.word	0x0800e905
 800e8e0:	0800e90d 	.word	0x0800e90d
 800e8e4:	0800e923 	.word	0x0800e923
 800e8e8:	0800e913 	.word	0x0800e913
 800e8ec:	0800e923 	.word	0x0800e923
 800e8f0:	0800e923 	.word	0x0800e923
 800e8f4:	0800e923 	.word	0x0800e923
 800e8f8:	0800e91b 	.word	0x0800e91b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8fc:	f7fc fc86 	bl	800b20c <HAL_RCC_GetPCLK1Freq>
 800e900:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e902:	e014      	b.n	800e92e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e904:	f7fc fc98 	bl	800b238 <HAL_RCC_GetPCLK2Freq>
 800e908:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e90a:	e010      	b.n	800e92e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e90c:	4b5a      	ldr	r3, [pc, #360]	; (800ea78 <UART_SetConfig+0x594>)
 800e90e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e910:	e00d      	b.n	800e92e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e912:	f7fc fc0d 	bl	800b130 <HAL_RCC_GetSysClockFreq>
 800e916:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e918:	e009      	b.n	800e92e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e91a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e920:	e005      	b.n	800e92e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800e922:	2300      	movs	r3, #0
 800e924:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e926:	2301      	movs	r3, #1
 800e928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e92c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	2b00      	cmp	r3, #0
 800e932:	f000 8089 	beq.w	800ea48 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93a:	4a4e      	ldr	r2, [pc, #312]	; (800ea74 <UART_SetConfig+0x590>)
 800e93c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e940:	461a      	mov	r2, r3
 800e942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e944:	fbb3 f3f2 	udiv	r3, r3, r2
 800e948:	005a      	lsls	r2, r3, #1
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	085b      	lsrs	r3, r3, #1
 800e950:	441a      	add	r2, r3
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	fbb2 f3f3 	udiv	r3, r2, r3
 800e95a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e95c:	6a3b      	ldr	r3, [r7, #32]
 800e95e:	2b0f      	cmp	r3, #15
 800e960:	d916      	bls.n	800e990 <UART_SetConfig+0x4ac>
 800e962:	6a3b      	ldr	r3, [r7, #32]
 800e964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e968:	d212      	bcs.n	800e990 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e96a:	6a3b      	ldr	r3, [r7, #32]
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	f023 030f 	bic.w	r3, r3, #15
 800e972:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e974:	6a3b      	ldr	r3, [r7, #32]
 800e976:	085b      	lsrs	r3, r3, #1
 800e978:	b29b      	uxth	r3, r3
 800e97a:	f003 0307 	and.w	r3, r3, #7
 800e97e:	b29a      	uxth	r2, r3
 800e980:	8bfb      	ldrh	r3, [r7, #30]
 800e982:	4313      	orrs	r3, r2
 800e984:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	8bfa      	ldrh	r2, [r7, #30]
 800e98c:	60da      	str	r2, [r3, #12]
 800e98e:	e05b      	b.n	800ea48 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800e990:	2301      	movs	r3, #1
 800e992:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e996:	e057      	b.n	800ea48 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e998:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e99c:	2b08      	cmp	r3, #8
 800e99e:	d828      	bhi.n	800e9f2 <UART_SetConfig+0x50e>
 800e9a0:	a201      	add	r2, pc, #4	; (adr r2, 800e9a8 <UART_SetConfig+0x4c4>)
 800e9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a6:	bf00      	nop
 800e9a8:	0800e9cd 	.word	0x0800e9cd
 800e9ac:	0800e9d5 	.word	0x0800e9d5
 800e9b0:	0800e9dd 	.word	0x0800e9dd
 800e9b4:	0800e9f3 	.word	0x0800e9f3
 800e9b8:	0800e9e3 	.word	0x0800e9e3
 800e9bc:	0800e9f3 	.word	0x0800e9f3
 800e9c0:	0800e9f3 	.word	0x0800e9f3
 800e9c4:	0800e9f3 	.word	0x0800e9f3
 800e9c8:	0800e9eb 	.word	0x0800e9eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9cc:	f7fc fc1e 	bl	800b20c <HAL_RCC_GetPCLK1Freq>
 800e9d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e9d2:	e014      	b.n	800e9fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9d4:	f7fc fc30 	bl	800b238 <HAL_RCC_GetPCLK2Freq>
 800e9d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e9da:	e010      	b.n	800e9fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e9dc:	4b26      	ldr	r3, [pc, #152]	; (800ea78 <UART_SetConfig+0x594>)
 800e9de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e9e0:	e00d      	b.n	800e9fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e9e2:	f7fc fba5 	bl	800b130 <HAL_RCC_GetSysClockFreq>
 800e9e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e9e8:	e009      	b.n	800e9fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e9f0:	e005      	b.n	800e9fe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e9fc:	bf00      	nop
    }

    if (pclk != 0U)
 800e9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d021      	beq.n	800ea48 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea08:	4a1a      	ldr	r2, [pc, #104]	; (800ea74 <UART_SetConfig+0x590>)
 800ea0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea0e:	461a      	mov	r2, r3
 800ea10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea12:	fbb3 f2f2 	udiv	r2, r3, r2
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	085b      	lsrs	r3, r3, #1
 800ea1c:	441a      	add	r2, r3
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	685b      	ldr	r3, [r3, #4]
 800ea22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea28:	6a3b      	ldr	r3, [r7, #32]
 800ea2a:	2b0f      	cmp	r3, #15
 800ea2c:	d909      	bls.n	800ea42 <UART_SetConfig+0x55e>
 800ea2e:	6a3b      	ldr	r3, [r7, #32]
 800ea30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea34:	d205      	bcs.n	800ea42 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ea36:	6a3b      	ldr	r3, [r7, #32]
 800ea38:	b29a      	uxth	r2, r3
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	60da      	str	r2, [r3, #12]
 800ea40:	e002      	b.n	800ea48 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ea42:	2301      	movs	r3, #1
 800ea44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	2201      	movs	r2, #1
 800ea54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	2200      	movs	r2, #0
 800ea62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ea64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3730      	adds	r7, #48	; 0x30
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ea72:	bf00      	nop
 800ea74:	08015f58 	.word	0x08015f58
 800ea78:	00f42400 	.word	0x00f42400

0800ea7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea88:	f003 0308 	and.w	r3, r3, #8
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00a      	beq.n	800eaa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	430a      	orrs	r2, r1
 800eaa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaaa:	f003 0301 	and.w	r3, r3, #1
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00a      	beq.n	800eac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	430a      	orrs	r2, r1
 800eac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eacc:	f003 0302 	and.w	r3, r3, #2
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d00a      	beq.n	800eaea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	430a      	orrs	r2, r1
 800eae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaee:	f003 0304 	and.w	r3, r3, #4
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00a      	beq.n	800eb0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	430a      	orrs	r2, r1
 800eb0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb10:	f003 0310 	and.w	r3, r3, #16
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d00a      	beq.n	800eb2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	430a      	orrs	r2, r1
 800eb2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb32:	f003 0320 	and.w	r3, r3, #32
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d00a      	beq.n	800eb50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	689b      	ldr	r3, [r3, #8]
 800eb40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	430a      	orrs	r2, r1
 800eb4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d01a      	beq.n	800eb92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	430a      	orrs	r2, r1
 800eb70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb7a:	d10a      	bne.n	800eb92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	430a      	orrs	r2, r1
 800eb90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d00a      	beq.n	800ebb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	430a      	orrs	r2, r1
 800ebb2:	605a      	str	r2, [r3, #4]
  }
}
 800ebb4:	bf00      	nop
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b098      	sub	sp, #96	; 0x60
 800ebc4:	af02      	add	r7, sp, #8
 800ebc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ebd0:	f7f7 fe8a 	bl	80068e8 <HAL_GetTick>
 800ebd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f003 0308 	and.w	r3, r3, #8
 800ebe0:	2b08      	cmp	r3, #8
 800ebe2:	d12f      	bne.n	800ec44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ebe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ebe8:	9300      	str	r3, [sp, #0]
 800ebea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebec:	2200      	movs	r2, #0
 800ebee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 f88e 	bl	800ed14 <UART_WaitOnFlagUntilTimeout>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d022      	beq.n	800ec44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec06:	e853 3f00 	ldrex	r3, [r3]
 800ec0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec12:	653b      	str	r3, [r7, #80]	; 0x50
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	461a      	mov	r2, r3
 800ec1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec1c:	647b      	str	r3, [r7, #68]	; 0x44
 800ec1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec24:	e841 2300 	strex	r3, r2, [r1]
 800ec28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d1e6      	bne.n	800ebfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2220      	movs	r2, #32
 800ec34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec40:	2303      	movs	r3, #3
 800ec42:	e063      	b.n	800ed0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f003 0304 	and.w	r3, r3, #4
 800ec4e:	2b04      	cmp	r3, #4
 800ec50:	d149      	bne.n	800ece6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f857 	bl	800ed14 <UART_WaitOnFlagUntilTimeout>
 800ec66:	4603      	mov	r3, r0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d03c      	beq.n	800ece6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec74:	e853 3f00 	ldrex	r3, [r3]
 800ec78:	623b      	str	r3, [r7, #32]
   return(result);
 800ec7a:	6a3b      	ldr	r3, [r7, #32]
 800ec7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	461a      	mov	r2, r3
 800ec88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec8a:	633b      	str	r3, [r7, #48]	; 0x30
 800ec8c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec92:	e841 2300 	strex	r3, r2, [r1]
 800ec96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d1e6      	bne.n	800ec6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	3308      	adds	r3, #8
 800eca4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	e853 3f00 	ldrex	r3, [r3]
 800ecac:	60fb      	str	r3, [r7, #12]
   return(result);
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f023 0301 	bic.w	r3, r3, #1
 800ecb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	3308      	adds	r3, #8
 800ecbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecbe:	61fa      	str	r2, [r7, #28]
 800ecc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecc2:	69b9      	ldr	r1, [r7, #24]
 800ecc4:	69fa      	ldr	r2, [r7, #28]
 800ecc6:	e841 2300 	strex	r3, r2, [r1]
 800ecca:	617b      	str	r3, [r7, #20]
   return(result);
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d1e5      	bne.n	800ec9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2220      	movs	r2, #32
 800ecd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ece2:	2303      	movs	r3, #3
 800ece4:	e012      	b.n	800ed0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2220      	movs	r2, #32
 800ecea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2220      	movs	r2, #32
 800ecf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ed0a:	2300      	movs	r3, #0
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3758      	adds	r7, #88	; 0x58
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	603b      	str	r3, [r7, #0]
 800ed20:	4613      	mov	r3, r2
 800ed22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed24:	e04f      	b.n	800edc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed2c:	d04b      	beq.n	800edc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed2e:	f7f7 fddb 	bl	80068e8 <HAL_GetTick>
 800ed32:	4602      	mov	r2, r0
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	1ad3      	subs	r3, r2, r3
 800ed38:	69ba      	ldr	r2, [r7, #24]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d302      	bcc.n	800ed44 <UART_WaitOnFlagUntilTimeout+0x30>
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d101      	bne.n	800ed48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ed44:	2303      	movs	r3, #3
 800ed46:	e04e      	b.n	800ede6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f003 0304 	and.w	r3, r3, #4
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d037      	beq.n	800edc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	2b80      	cmp	r3, #128	; 0x80
 800ed5a:	d034      	beq.n	800edc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	2b40      	cmp	r3, #64	; 0x40
 800ed60:	d031      	beq.n	800edc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	69db      	ldr	r3, [r3, #28]
 800ed68:	f003 0308 	and.w	r3, r3, #8
 800ed6c:	2b08      	cmp	r3, #8
 800ed6e:	d110      	bne.n	800ed92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2208      	movs	r2, #8
 800ed76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ed78:	68f8      	ldr	r0, [r7, #12]
 800ed7a:	f000 f838 	bl	800edee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	2208      	movs	r2, #8
 800ed82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e029      	b.n	800ede6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	69db      	ldr	r3, [r3, #28]
 800ed98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eda0:	d111      	bne.n	800edc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800edaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f000 f81e 	bl	800edee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2220      	movs	r2, #32
 800edb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2200      	movs	r2, #0
 800edbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800edc2:	2303      	movs	r3, #3
 800edc4:	e00f      	b.n	800ede6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	69da      	ldr	r2, [r3, #28]
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	4013      	ands	r3, r2
 800edd0:	68ba      	ldr	r2, [r7, #8]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	bf0c      	ite	eq
 800edd6:	2301      	moveq	r3, #1
 800edd8:	2300      	movne	r3, #0
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	461a      	mov	r2, r3
 800edde:	79fb      	ldrb	r3, [r7, #7]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d0a0      	beq.n	800ed26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ede4:	2300      	movs	r3, #0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800edee:	b480      	push	{r7}
 800edf0:	b095      	sub	sp, #84	; 0x54
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edfe:	e853 3f00 	ldrex	r3, [r3]
 800ee02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ee04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	461a      	mov	r2, r3
 800ee12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee14:	643b      	str	r3, [r7, #64]	; 0x40
 800ee16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee1c:	e841 2300 	strex	r3, r2, [r1]
 800ee20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d1e6      	bne.n	800edf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	3308      	adds	r3, #8
 800ee2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee30:	6a3b      	ldr	r3, [r7, #32]
 800ee32:	e853 3f00 	ldrex	r3, [r3]
 800ee36:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee3e:	f023 0301 	bic.w	r3, r3, #1
 800ee42:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	3308      	adds	r3, #8
 800ee4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ee4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee54:	e841 2300 	strex	r3, r2, [r1]
 800ee58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d1e3      	bne.n	800ee28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d118      	bne.n	800ee9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	e853 3f00 	ldrex	r3, [r3]
 800ee74:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	f023 0310 	bic.w	r3, r3, #16
 800ee7c:	647b      	str	r3, [r7, #68]	; 0x44
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	461a      	mov	r2, r3
 800ee84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee86:	61bb      	str	r3, [r7, #24]
 800ee88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8a:	6979      	ldr	r1, [r7, #20]
 800ee8c:	69ba      	ldr	r2, [r7, #24]
 800ee8e:	e841 2300 	strex	r3, r2, [r1]
 800ee92:	613b      	str	r3, [r7, #16]
   return(result);
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d1e6      	bne.n	800ee68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2220      	movs	r2, #32
 800ee9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	675a      	str	r2, [r3, #116]	; 0x74
}
 800eeae:	bf00      	nop
 800eeb0:	3754      	adds	r7, #84	; 0x54
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb8:	4770      	bx	lr

0800eeba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eeba:	b580      	push	{r7, lr}
 800eebc:	b084      	sub	sp, #16
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eec6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2200      	movs	r2, #0
 800eed4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f7ff faed 	bl	800e4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eede:	bf00      	nop
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eee6:	b480      	push	{r7}
 800eee8:	b08f      	sub	sp, #60	; 0x3c
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eef4:	2b21      	cmp	r3, #33	; 0x21
 800eef6:	d14c      	bne.n	800ef92 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d132      	bne.n	800ef6a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef0a:	6a3b      	ldr	r3, [r7, #32]
 800ef0c:	e853 3f00 	ldrex	r3, [r3]
 800ef10:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef18:	637b      	str	r3, [r7, #52]	; 0x34
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	461a      	mov	r2, r3
 800ef20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef24:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef2a:	e841 2300 	strex	r3, r2, [r1]
 800ef2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d1e6      	bne.n	800ef04 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	e853 3f00 	ldrex	r3, [r3]
 800ef42:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef4a:	633b      	str	r3, [r7, #48]	; 0x30
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	461a      	mov	r2, r3
 800ef52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef54:	61bb      	str	r3, [r7, #24]
 800ef56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef58:	6979      	ldr	r1, [r7, #20]
 800ef5a:	69ba      	ldr	r2, [r7, #24]
 800ef5c:	e841 2300 	strex	r3, r2, [r1]
 800ef60:	613b      	str	r3, [r7, #16]
   return(result);
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d1e6      	bne.n	800ef36 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ef68:	e013      	b.n	800ef92 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef6e:	781a      	ldrb	r2, [r3, #0]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef7a:	1c5a      	adds	r2, r3, #1
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ef92:	bf00      	nop
 800ef94:	373c      	adds	r7, #60	; 0x3c
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr

0800ef9e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ef9e:	b480      	push	{r7}
 800efa0:	b091      	sub	sp, #68	; 0x44
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800efac:	2b21      	cmp	r3, #33	; 0x21
 800efae:	d151      	bne.n	800f054 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d132      	bne.n	800f022 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc4:	e853 3f00 	ldrex	r3, [r3]
 800efc8:	623b      	str	r3, [r7, #32]
   return(result);
 800efca:	6a3b      	ldr	r3, [r7, #32]
 800efcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800efd0:	63bb      	str	r3, [r7, #56]	; 0x38
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	461a      	mov	r2, r3
 800efd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efda:	633b      	str	r3, [r7, #48]	; 0x30
 800efdc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800efe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efe2:	e841 2300 	strex	r3, r2, [r1]
 800efe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800efe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1e6      	bne.n	800efbc <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	e853 3f00 	ldrex	r3, [r3]
 800effa:	60fb      	str	r3, [r7, #12]
   return(result);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f002:	637b      	str	r3, [r7, #52]	; 0x34
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	461a      	mov	r2, r3
 800f00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f00c:	61fb      	str	r3, [r7, #28]
 800f00e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f010:	69b9      	ldr	r1, [r7, #24]
 800f012:	69fa      	ldr	r2, [r7, #28]
 800f014:	e841 2300 	strex	r3, r2, [r1]
 800f018:	617b      	str	r3, [r7, #20]
   return(result);
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1e6      	bne.n	800efee <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800f020:	e018      	b.n	800f054 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f026:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f02a:	881b      	ldrh	r3, [r3, #0]
 800f02c:	461a      	mov	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f036:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f03c:	1c9a      	adds	r2, r3, #2
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f048:	b29b      	uxth	r3, r3
 800f04a:	3b01      	subs	r3, #1
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800f054:	bf00      	nop
 800f056:	3744      	adds	r7, #68	; 0x44
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f060:	b480      	push	{r7}
 800f062:	b091      	sub	sp, #68	; 0x44
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f06e:	2b21      	cmp	r3, #33	; 0x21
 800f070:	d160      	bne.n	800f134 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f078:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f07a:	e057      	b.n	800f12c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f082:	b29b      	uxth	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d133      	bne.n	800f0f0 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	3308      	adds	r3, #8
 800f08e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f092:	e853 3f00 	ldrex	r3, [r3]
 800f096:	623b      	str	r3, [r7, #32]
   return(result);
 800f098:	6a3b      	ldr	r3, [r7, #32]
 800f09a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f09e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	3308      	adds	r3, #8
 800f0a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0a8:	633a      	str	r2, [r7, #48]	; 0x30
 800f0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0b0:	e841 2300 	strex	r3, r2, [r1]
 800f0b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d1e5      	bne.n	800f088 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	e853 3f00 	ldrex	r3, [r3]
 800f0c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0d0:	637b      	str	r3, [r7, #52]	; 0x34
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0da:	61fb      	str	r3, [r7, #28]
 800f0dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0de:	69b9      	ldr	r1, [r7, #24]
 800f0e0:	69fa      	ldr	r2, [r7, #28]
 800f0e2:	e841 2300 	strex	r3, r2, [r1]
 800f0e6:	617b      	str	r3, [r7, #20]
   return(result);
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1e6      	bne.n	800f0bc <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800f0ee:	e021      	b.n	800f134 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	69db      	ldr	r3, [r3, #28]
 800f0f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d013      	beq.n	800f126 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f102:	781a      	ldrb	r2, [r3, #0]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f10e:	1c5a      	adds	r2, r3, #1
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	3b01      	subs	r3, #1
 800f11e:	b29a      	uxth	r2, r3
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f126:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f128:	3b01      	subs	r3, #1
 800f12a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f12c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1a4      	bne.n	800f07c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800f132:	e7ff      	b.n	800f134 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800f134:	bf00      	nop
 800f136:	3744      	adds	r7, #68	; 0x44
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr

0800f140 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f140:	b480      	push	{r7}
 800f142:	b091      	sub	sp, #68	; 0x44
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f14e:	2b21      	cmp	r3, #33	; 0x21
 800f150:	d165      	bne.n	800f21e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f158:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f15a:	e05c      	b.n	800f216 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f162:	b29b      	uxth	r3, r3
 800f164:	2b00      	cmp	r3, #0
 800f166:	d133      	bne.n	800f1d0 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	3308      	adds	r3, #8
 800f16e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f170:	6a3b      	ldr	r3, [r7, #32]
 800f172:	e853 3f00 	ldrex	r3, [r3]
 800f176:	61fb      	str	r3, [r7, #28]
   return(result);
 800f178:	69fb      	ldr	r3, [r7, #28]
 800f17a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f17e:	637b      	str	r3, [r7, #52]	; 0x34
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	3308      	adds	r3, #8
 800f186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f188:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f18a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f18c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f18e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f190:	e841 2300 	strex	r3, r2, [r1]
 800f194:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d1e5      	bne.n	800f168 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	e853 3f00 	ldrex	r3, [r3]
 800f1a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1b0:	633b      	str	r3, [r7, #48]	; 0x30
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ba:	61bb      	str	r3, [r7, #24]
 800f1bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1be:	6979      	ldr	r1, [r7, #20]
 800f1c0:	69ba      	ldr	r2, [r7, #24]
 800f1c2:	e841 2300 	strex	r3, r2, [r1]
 800f1c6:	613b      	str	r3, [r7, #16]
   return(result);
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d1e6      	bne.n	800f19c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800f1ce:	e026      	b.n	800f21e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	69db      	ldr	r3, [r3, #28]
 800f1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d018      	beq.n	800f210 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1e2:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e6:	881b      	ldrh	r3, [r3, #0]
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f1f2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1f8:	1c9a      	adds	r2, r3, #2
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f204:	b29b      	uxth	r3, r3
 800f206:	3b01      	subs	r3, #1
 800f208:	b29a      	uxth	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f210:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f212:	3b01      	subs	r3, #1
 800f214:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f216:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d19f      	bne.n	800f15c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800f21c:	e7ff      	b.n	800f21e <UART_TxISR_16BIT_FIFOEN+0xde>
 800f21e:	bf00      	nop
 800f220:	3744      	adds	r7, #68	; 0x44
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr

0800f22a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b088      	sub	sp, #32
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	e853 3f00 	ldrex	r3, [r3]
 800f23e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f246:	61fb      	str	r3, [r7, #28]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	461a      	mov	r2, r3
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	61bb      	str	r3, [r7, #24]
 800f252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f254:	6979      	ldr	r1, [r7, #20]
 800f256:	69ba      	ldr	r2, [r7, #24]
 800f258:	e841 2300 	strex	r3, r2, [r1]
 800f25c:	613b      	str	r3, [r7, #16]
   return(result);
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d1e6      	bne.n	800f232 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2220      	movs	r2, #32
 800f268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7ff f916 	bl	800e4a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f278:	bf00      	nop
 800f27a:	3720      	adds	r7, #32
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f288:	bf00      	nop
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f29c:	bf00      	nop
 800f29e:	370c      	adds	r7, #12
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr

0800f2a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f2b0:	bf00      	nop
 800f2b2:	370c      	adds	r7, #12
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b085      	sub	sp, #20
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d101      	bne.n	800f2d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800f2ce:	2302      	movs	r3, #2
 800f2d0:	e027      	b.n	800f322 <HAL_UARTEx_DisableFifoMode+0x66>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2224      	movs	r2, #36	; 0x24
 800f2de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	681a      	ldr	r2, [r3, #0]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f022 0201 	bic.w	r2, r2, #1
 800f2f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f300:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2220      	movs	r2, #32
 800f314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2200      	movs	r2, #0
 800f31c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f320:	2300      	movs	r3, #0
}
 800f322:	4618      	mov	r0, r3
 800f324:	3714      	adds	r7, #20
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr

0800f32e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f32e:	b580      	push	{r7, lr}
 800f330:	b084      	sub	sp, #16
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
 800f336:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d101      	bne.n	800f346 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f342:	2302      	movs	r3, #2
 800f344:	e02d      	b.n	800f3a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2201      	movs	r2, #1
 800f34a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2224      	movs	r2, #36	; 0x24
 800f352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f022 0201 	bic.w	r2, r2, #1
 800f36c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	683a      	ldr	r2, [r7, #0]
 800f37e:	430a      	orrs	r2, r1
 800f380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f850 	bl	800f428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68fa      	ldr	r2, [r7, #12]
 800f38e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2220      	movs	r2, #32
 800f394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2200      	movs	r2, #0
 800f39c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f3a0:	2300      	movs	r3, #0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3710      	adds	r7, #16
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b084      	sub	sp, #16
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d101      	bne.n	800f3c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f3be:	2302      	movs	r3, #2
 800f3c0:	e02d      	b.n	800f41e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2224      	movs	r2, #36	; 0x24
 800f3ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f022 0201 	bic.w	r2, r2, #1
 800f3e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	689b      	ldr	r3, [r3, #8]
 800f3f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	683a      	ldr	r2, [r7, #0]
 800f3fa:	430a      	orrs	r2, r1
 800f3fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 f812 	bl	800f428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2220      	movs	r2, #32
 800f410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2200      	movs	r2, #0
 800f418:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3710      	adds	r7, #16
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
	...

0800f428 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f428:	b480      	push	{r7}
 800f42a:	b085      	sub	sp, #20
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f434:	2b00      	cmp	r3, #0
 800f436:	d108      	bne.n	800f44a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2201      	movs	r2, #1
 800f444:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f448:	e031      	b.n	800f4ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f44a:	2308      	movs	r3, #8
 800f44c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f44e:	2308      	movs	r3, #8
 800f450:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	0e5b      	lsrs	r3, r3, #25
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	f003 0307 	and.w	r3, r3, #7
 800f460:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	689b      	ldr	r3, [r3, #8]
 800f468:	0f5b      	lsrs	r3, r3, #29
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	f003 0307 	and.w	r3, r3, #7
 800f470:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f472:	7bbb      	ldrb	r3, [r7, #14]
 800f474:	7b3a      	ldrb	r2, [r7, #12]
 800f476:	4911      	ldr	r1, [pc, #68]	; (800f4bc <UARTEx_SetNbDataToProcess+0x94>)
 800f478:	5c8a      	ldrb	r2, [r1, r2]
 800f47a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f47e:	7b3a      	ldrb	r2, [r7, #12]
 800f480:	490f      	ldr	r1, [pc, #60]	; (800f4c0 <UARTEx_SetNbDataToProcess+0x98>)
 800f482:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f484:	fb93 f3f2 	sdiv	r3, r3, r2
 800f488:	b29a      	uxth	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f490:	7bfb      	ldrb	r3, [r7, #15]
 800f492:	7b7a      	ldrb	r2, [r7, #13]
 800f494:	4909      	ldr	r1, [pc, #36]	; (800f4bc <UARTEx_SetNbDataToProcess+0x94>)
 800f496:	5c8a      	ldrb	r2, [r1, r2]
 800f498:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f49c:	7b7a      	ldrb	r2, [r7, #13]
 800f49e:	4908      	ldr	r1, [pc, #32]	; (800f4c0 <UARTEx_SetNbDataToProcess+0x98>)
 800f4a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f4a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f4ae:	bf00      	nop
 800f4b0:	3714      	adds	r7, #20
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr
 800f4ba:	bf00      	nop
 800f4bc:	08015f70 	.word	0x08015f70
 800f4c0:	08015f78 	.word	0x08015f78

0800f4c4 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800f4c4:	b480      	push	{r7}
 800f4c6:	b085      	sub	sp, #20
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	1c5a      	adds	r2, r3, #1
 800f4d0:	607a      	str	r2, [r7, #4]
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800f4d6:	89fb      	ldrh	r3, [r7, #14]
 800f4d8:	021b      	lsls	r3, r3, #8
 800f4da:	b21a      	sxth	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	b21b      	sxth	r3, r3
 800f4e2:	4313      	orrs	r3, r2
 800f4e4:	b21b      	sxth	r3, r3
 800f4e6:	b29b      	uxth	r3, r3
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3714      	adds	r7, #20
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f2:	4770      	bx	lr

0800f4f4 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b085      	sub	sp, #20
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2204      	movs	r2, #4
 800f508:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2204      	movs	r2, #4
 800f50e:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f518:	b29a      	uxth	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f520:	b29b      	uxth	r3, r3
 800f522:	1ad3      	subs	r3, r2, r3
 800f524:	b29b      	uxth	r3, r3
 800f526:	3b01      	subs	r3, #1
 800f528:	b29b      	uxth	r3, r3
 800f52a:	b21a      	sxth	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f538:	b29a      	uxth	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f540:	b29b      	uxth	r3, r3
 800f542:	1ad3      	subs	r3, r2, r3
 800f544:	b29b      	uxth	r3, r3
 800f546:	3b01      	subs	r3, #1
 800f548:	b29b      	uxth	r3, r3
 800f54a:	b21a      	sxth	r2, r3
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2201      	movs	r2, #1
 800f570:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2200      	movs	r2, #0
 800f57e:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2200      	movs	r2, #0
 800f59a:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800f5ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	73fb      	strb	r3, [r7, #15]
 800f5e6:	e010      	b.n	800f60a <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 800f5e8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	330a      	adds	r3, #10
 800f5ee:	00db      	lsls	r3, r3, #3
 800f5f0:	4413      	add	r3, r2
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800f5f6:	7bfb      	ldrb	r3, [r7, #15]
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	330a      	adds	r3, #10
 800f5fc:	00db      	lsls	r3, r3, #3
 800f5fe:	4413      	add	r3, r2
 800f600:	2200      	movs	r2, #0
 800f602:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800f604:	7bfb      	ldrb	r3, [r7, #15]
 800f606:	3301      	adds	r3, #1
 800f608:	73fb      	strb	r3, [r7, #15]
 800f60a:	7bfb      	ldrb	r3, [r7, #15]
 800f60c:	2b03      	cmp	r3, #3
 800f60e:	d9eb      	bls.n	800f5e8 <UG_Init+0xf4>
   }

   gui = g;
 800f610:	4a04      	ldr	r2, [pc, #16]	; (800f624 <UG_Init+0x130>)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6013      	str	r3, [r2, #0]
   return 1;
 800f616:	2301      	movs	r3, #1
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3714      	adds	r7, #20
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr
 800f624:	20002260 	.word	0x20002260

0800f628 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800f630:	4b04      	ldr	r3, [pc, #16]	; (800f644 <UG_FontSelect+0x1c>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f638:	bf00      	nop
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr
 800f644:	20002260 	.word	0x20002260

0800f648 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af02      	add	r7, sp, #8
 800f64e:	4603      	mov	r3, r0
 800f650:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800f652:	4b0e      	ldr	r3, [pc, #56]	; (800f68c <UG_FillScreen+0x44>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	3b01      	subs	r3, #1
 800f660:	b29b      	uxth	r3, r3
 800f662:	b21a      	sxth	r2, r3
 800f664:	4b09      	ldr	r3, [pc, #36]	; (800f68c <UG_FillScreen+0x44>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f66e:	b29b      	uxth	r3, r3
 800f670:	3b01      	subs	r3, #1
 800f672:	b29b      	uxth	r3, r3
 800f674:	b219      	sxth	r1, r3
 800f676:	88fb      	ldrh	r3, [r7, #6]
 800f678:	9300      	str	r3, [sp, #0]
 800f67a:	460b      	mov	r3, r1
 800f67c:	2100      	movs	r1, #0
 800f67e:	2000      	movs	r0, #0
 800f680:	f000 f806 	bl	800f690 <UG_FillFrame>
}
 800f684:	bf00      	nop
 800f686:	3708      	adds	r7, #8
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	20002260 	.word	0x20002260

0800f690 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800f690:	b5b0      	push	{r4, r5, r7, lr}
 800f692:	b086      	sub	sp, #24
 800f694:	af02      	add	r7, sp, #8
 800f696:	4604      	mov	r4, r0
 800f698:	4608      	mov	r0, r1
 800f69a:	4611      	mov	r1, r2
 800f69c:	461a      	mov	r2, r3
 800f69e:	4623      	mov	r3, r4
 800f6a0:	80fb      	strh	r3, [r7, #6]
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	80bb      	strh	r3, [r7, #4]
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	807b      	strh	r3, [r7, #2]
 800f6aa:	4613      	mov	r3, r2
 800f6ac:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800f6ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f6b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	da05      	bge.n	800f6c6 <UG_FillFrame+0x36>
     swap(x1,x2);
 800f6ba:	88fb      	ldrh	r3, [r7, #6]
 800f6bc:	817b      	strh	r3, [r7, #10]
 800f6be:	887b      	ldrh	r3, [r7, #2]
 800f6c0:	80fb      	strh	r3, [r7, #6]
 800f6c2:	897b      	ldrh	r3, [r7, #10]
 800f6c4:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800f6c6:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f6ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	da05      	bge.n	800f6de <UG_FillFrame+0x4e>
     swap(y1,y2);
 800f6d2:	88bb      	ldrh	r3, [r7, #4]
 800f6d4:	813b      	strh	r3, [r7, #8]
 800f6d6:	883b      	ldrh	r3, [r7, #0]
 800f6d8:	80bb      	strh	r3, [r7, #4]
 800f6da:	893b      	ldrh	r3, [r7, #8]
 800f6dc:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800f6de:	4b24      	ldr	r3, [pc, #144]	; (800f770 <UG_FillFrame+0xe0>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f6e6:	f003 0302 	and.w	r3, r3, #2
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d012      	beq.n	800f714 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f6ee:	4b20      	ldr	r3, [pc, #128]	; (800f770 <UG_FillFrame+0xe0>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6f4:	461d      	mov	r5, r3
 800f6f6:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f6fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f6fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f702:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f706:	8c3b      	ldrh	r3, [r7, #32]
 800f708:	9300      	str	r3, [sp, #0]
 800f70a:	4623      	mov	r3, r4
 800f70c:	47a8      	blx	r5
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d028      	beq.n	800f766 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 800f714:	88bb      	ldrh	r3, [r7, #4]
 800f716:	81bb      	strh	r3, [r7, #12]
 800f718:	e01e      	b.n	800f758 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 800f71a:	88fb      	ldrh	r3, [r7, #6]
 800f71c:	81fb      	strh	r3, [r7, #14]
 800f71e:	e00f      	b.n	800f740 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 800f720:	4b13      	ldr	r3, [pc, #76]	; (800f770 <UG_FillFrame+0xe0>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	8c3a      	ldrh	r2, [r7, #32]
 800f72a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800f72e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800f732:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800f734:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f738:	b29b      	uxth	r3, r3
 800f73a:	3301      	adds	r3, #1
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	81fb      	strh	r3, [r7, #14]
 800f740:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f744:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f748:	429a      	cmp	r2, r3
 800f74a:	dde9      	ble.n	800f720 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800f74c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f750:	b29b      	uxth	r3, r3
 800f752:	3301      	adds	r3, #1
 800f754:	b29b      	uxth	r3, r3
 800f756:	81bb      	strh	r3, [r7, #12]
 800f758:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f75c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f760:	429a      	cmp	r2, r3
 800f762:	ddda      	ble.n	800f71a <UG_FillFrame+0x8a>
 800f764:	e000      	b.n	800f768 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f766:	bf00      	nop
      }
   }
}
 800f768:	3710      	adds	r7, #16
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bdb0      	pop	{r4, r5, r7, pc}
 800f76e:	bf00      	nop
 800f770:	20002260 	.word	0x20002260

0800f774 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800f774:	b590      	push	{r4, r7, lr}
 800f776:	b085      	sub	sp, #20
 800f778:	af02      	add	r7, sp, #8
 800f77a:	4604      	mov	r4, r0
 800f77c:	4608      	mov	r0, r1
 800f77e:	4611      	mov	r1, r2
 800f780:	461a      	mov	r2, r3
 800f782:	4623      	mov	r3, r4
 800f784:	80fb      	strh	r3, [r7, #6]
 800f786:	4603      	mov	r3, r0
 800f788:	80bb      	strh	r3, [r7, #4]
 800f78a:	460b      	mov	r3, r1
 800f78c:	807b      	strh	r3, [r7, #2]
 800f78e:	4613      	mov	r3, r2
 800f790:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 800f792:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800f796:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f79a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f79e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f7a2:	8b3b      	ldrh	r3, [r7, #24]
 800f7a4:	9300      	str	r3, [sp, #0]
 800f7a6:	4623      	mov	r3, r4
 800f7a8:	f000 f912 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 800f7ac:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f7b0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f7b4:	f9b7 1000 	ldrsh.w	r1, [r7]
 800f7b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f7bc:	8b3b      	ldrh	r3, [r7, #24]
 800f7be:	9300      	str	r3, [sp, #0]
 800f7c0:	4623      	mov	r3, r4
 800f7c2:	f000 f905 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 800f7c6:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f7ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f7ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f7d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f7d6:	8b3b      	ldrh	r3, [r7, #24]
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	4623      	mov	r3, r4
 800f7dc:	f000 f8f8 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 800f7e0:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f7e4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f7e8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f7ec:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800f7f0:	8b3b      	ldrh	r3, [r7, #24]
 800f7f2:	9300      	str	r3, [sp, #0]
 800f7f4:	4623      	mov	r3, r4
 800f7f6:	f000 f8eb 	bl	800f9d0 <UG_DrawLine>
}
 800f7fa:	bf00      	nop
 800f7fc:	370c      	adds	r7, #12
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd90      	pop	{r4, r7, pc}
	...

0800f804 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 800f804:	b590      	push	{r4, r7, lr}
 800f806:	b087      	sub	sp, #28
 800f808:	af00      	add	r7, sp, #0
 800f80a:	4604      	mov	r4, r0
 800f80c:	4608      	mov	r0, r1
 800f80e:	4611      	mov	r1, r2
 800f810:	461a      	mov	r2, r3
 800f812:	4623      	mov	r3, r4
 800f814:	80fb      	strh	r3, [r7, #6]
 800f816:	4603      	mov	r3, r0
 800f818:	80bb      	strh	r3, [r7, #4]
 800f81a:	460b      	mov	r3, r1
 800f81c:	807b      	strh	r3, [r7, #2]
 800f81e:	4613      	mov	r3, r2
 800f820:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 800f822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f826:	2b00      	cmp	r3, #0
 800f828:	f2c0 80c8 	blt.w	800f9bc <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 800f82c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f830:	2b00      	cmp	r3, #0
 800f832:	f2c0 80c5 	blt.w	800f9c0 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 800f836:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f340 80c2 	ble.w	800f9c4 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 800f840:	887b      	ldrh	r3, [r7, #2]
 800f842:	005b      	lsls	r3, r3, #1
 800f844:	b29b      	uxth	r3, r3
 800f846:	f1c3 0301 	rsb	r3, r3, #1
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	827b      	strh	r3, [r7, #18]
   yd = 0;
 800f84e:	2300      	movs	r3, #0
 800f850:	823b      	strh	r3, [r7, #16]
   e = 0;
 800f852:	2300      	movs	r3, #0
 800f854:	81fb      	strh	r3, [r7, #14]
   x = r;
 800f856:	887b      	ldrh	r3, [r7, #2]
 800f858:	82fb      	strh	r3, [r7, #22]
   y = 0;
 800f85a:	2300      	movs	r3, #0
 800f85c:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 800f85e:	e0a5      	b.n	800f9ac <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 800f860:	4b5a      	ldr	r3, [pc, #360]	; (800f9cc <UG_DrawCircle+0x1c8>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	88f9      	ldrh	r1, [r7, #6]
 800f86a:	8afa      	ldrh	r2, [r7, #22]
 800f86c:	1a8a      	subs	r2, r1, r2
 800f86e:	b292      	uxth	r2, r2
 800f870:	b210      	sxth	r0, r2
 800f872:	88b9      	ldrh	r1, [r7, #4]
 800f874:	8aba      	ldrh	r2, [r7, #20]
 800f876:	440a      	add	r2, r1
 800f878:	b292      	uxth	r2, r2
 800f87a:	b211      	sxth	r1, r2
 800f87c:	883a      	ldrh	r2, [r7, #0]
 800f87e:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 800f880:	4b52      	ldr	r3, [pc, #328]	; (800f9cc <UG_DrawCircle+0x1c8>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	88f9      	ldrh	r1, [r7, #6]
 800f88a:	8afa      	ldrh	r2, [r7, #22]
 800f88c:	1a8a      	subs	r2, r1, r2
 800f88e:	b292      	uxth	r2, r2
 800f890:	b210      	sxth	r0, r2
 800f892:	88b9      	ldrh	r1, [r7, #4]
 800f894:	8aba      	ldrh	r2, [r7, #20]
 800f896:	1a8a      	subs	r2, r1, r2
 800f898:	b292      	uxth	r2, r2
 800f89a:	b211      	sxth	r1, r2
 800f89c:	883a      	ldrh	r2, [r7, #0]
 800f89e:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 800f8a0:	4b4a      	ldr	r3, [pc, #296]	; (800f9cc <UG_DrawCircle+0x1c8>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	88f9      	ldrh	r1, [r7, #6]
 800f8aa:	8afa      	ldrh	r2, [r7, #22]
 800f8ac:	440a      	add	r2, r1
 800f8ae:	b292      	uxth	r2, r2
 800f8b0:	b210      	sxth	r0, r2
 800f8b2:	88b9      	ldrh	r1, [r7, #4]
 800f8b4:	8aba      	ldrh	r2, [r7, #20]
 800f8b6:	440a      	add	r2, r1
 800f8b8:	b292      	uxth	r2, r2
 800f8ba:	b211      	sxth	r1, r2
 800f8bc:	883a      	ldrh	r2, [r7, #0]
 800f8be:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 800f8c0:	4b42      	ldr	r3, [pc, #264]	; (800f9cc <UG_DrawCircle+0x1c8>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	88f9      	ldrh	r1, [r7, #6]
 800f8ca:	8afa      	ldrh	r2, [r7, #22]
 800f8cc:	440a      	add	r2, r1
 800f8ce:	b292      	uxth	r2, r2
 800f8d0:	b210      	sxth	r0, r2
 800f8d2:	88b9      	ldrh	r1, [r7, #4]
 800f8d4:	8aba      	ldrh	r2, [r7, #20]
 800f8d6:	1a8a      	subs	r2, r1, r2
 800f8d8:	b292      	uxth	r2, r2
 800f8da:	b211      	sxth	r1, r2
 800f8dc:	883a      	ldrh	r2, [r7, #0]
 800f8de:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 800f8e0:	4b3a      	ldr	r3, [pc, #232]	; (800f9cc <UG_DrawCircle+0x1c8>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	88f9      	ldrh	r1, [r7, #6]
 800f8ea:	8aba      	ldrh	r2, [r7, #20]
 800f8ec:	1a8a      	subs	r2, r1, r2
 800f8ee:	b292      	uxth	r2, r2
 800f8f0:	b210      	sxth	r0, r2
 800f8f2:	88b9      	ldrh	r1, [r7, #4]
 800f8f4:	8afa      	ldrh	r2, [r7, #22]
 800f8f6:	440a      	add	r2, r1
 800f8f8:	b292      	uxth	r2, r2
 800f8fa:	b211      	sxth	r1, r2
 800f8fc:	883a      	ldrh	r2, [r7, #0]
 800f8fe:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 800f900:	4b32      	ldr	r3, [pc, #200]	; (800f9cc <UG_DrawCircle+0x1c8>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	88f9      	ldrh	r1, [r7, #6]
 800f90a:	8aba      	ldrh	r2, [r7, #20]
 800f90c:	1a8a      	subs	r2, r1, r2
 800f90e:	b292      	uxth	r2, r2
 800f910:	b210      	sxth	r0, r2
 800f912:	88b9      	ldrh	r1, [r7, #4]
 800f914:	8afa      	ldrh	r2, [r7, #22]
 800f916:	1a8a      	subs	r2, r1, r2
 800f918:	b292      	uxth	r2, r2
 800f91a:	b211      	sxth	r1, r2
 800f91c:	883a      	ldrh	r2, [r7, #0]
 800f91e:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 800f920:	4b2a      	ldr	r3, [pc, #168]	; (800f9cc <UG_DrawCircle+0x1c8>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	88f9      	ldrh	r1, [r7, #6]
 800f92a:	8aba      	ldrh	r2, [r7, #20]
 800f92c:	440a      	add	r2, r1
 800f92e:	b292      	uxth	r2, r2
 800f930:	b210      	sxth	r0, r2
 800f932:	88b9      	ldrh	r1, [r7, #4]
 800f934:	8afa      	ldrh	r2, [r7, #22]
 800f936:	440a      	add	r2, r1
 800f938:	b292      	uxth	r2, r2
 800f93a:	b211      	sxth	r1, r2
 800f93c:	883a      	ldrh	r2, [r7, #0]
 800f93e:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 800f940:	4b22      	ldr	r3, [pc, #136]	; (800f9cc <UG_DrawCircle+0x1c8>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	88f9      	ldrh	r1, [r7, #6]
 800f94a:	8aba      	ldrh	r2, [r7, #20]
 800f94c:	440a      	add	r2, r1
 800f94e:	b292      	uxth	r2, r2
 800f950:	b210      	sxth	r0, r2
 800f952:	88b9      	ldrh	r1, [r7, #4]
 800f954:	8afa      	ldrh	r2, [r7, #22]
 800f956:	1a8a      	subs	r2, r1, r2
 800f958:	b292      	uxth	r2, r2
 800f95a:	b211      	sxth	r1, r2
 800f95c:	883a      	ldrh	r2, [r7, #0]
 800f95e:	4798      	blx	r3

      y++;
 800f960:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f964:	b29b      	uxth	r3, r3
 800f966:	3301      	adds	r3, #1
 800f968:	b29b      	uxth	r3, r3
 800f96a:	82bb      	strh	r3, [r7, #20]
      e += yd;
 800f96c:	89fa      	ldrh	r2, [r7, #14]
 800f96e:	8a3b      	ldrh	r3, [r7, #16]
 800f970:	4413      	add	r3, r2
 800f972:	b29b      	uxth	r3, r3
 800f974:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 800f976:	8a3b      	ldrh	r3, [r7, #16]
 800f978:	3302      	adds	r3, #2
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 800f97e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f982:	005a      	lsls	r2, r3, #1
 800f984:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f988:	4413      	add	r3, r2
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	dd0e      	ble.n	800f9ac <UG_DrawCircle+0x1a8>
      {
         x--;
 800f98e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f992:	b29b      	uxth	r3, r3
 800f994:	3b01      	subs	r3, #1
 800f996:	b29b      	uxth	r3, r3
 800f998:	82fb      	strh	r3, [r7, #22]
         e += xd;
 800f99a:	89fa      	ldrh	r2, [r7, #14]
 800f99c:	8a7b      	ldrh	r3, [r7, #18]
 800f99e:	4413      	add	r3, r2
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 800f9a4:	8a7b      	ldrh	r3, [r7, #18]
 800f9a6:	3302      	adds	r3, #2
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 800f9ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f9b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	f6bf af53 	bge.w	800f860 <UG_DrawCircle+0x5c>
 800f9ba:	e004      	b.n	800f9c6 <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 800f9bc:	bf00      	nop
 800f9be:	e002      	b.n	800f9c6 <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 800f9c0:	bf00      	nop
 800f9c2:	e000      	b.n	800f9c6 <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 800f9c4:	bf00      	nop
      }
   }
}
 800f9c6:	371c      	adds	r7, #28
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd90      	pop	{r4, r7, pc}
 800f9cc:	20002260 	.word	0x20002260

0800f9d0 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800f9d0:	b5b0      	push	{r4, r5, r7, lr}
 800f9d2:	b08a      	sub	sp, #40	; 0x28
 800f9d4:	af02      	add	r7, sp, #8
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	4608      	mov	r0, r1
 800f9da:	4611      	mov	r1, r2
 800f9dc:	461a      	mov	r2, r3
 800f9de:	4623      	mov	r3, r4
 800f9e0:	80fb      	strh	r3, [r7, #6]
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	80bb      	strh	r3, [r7, #4]
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	807b      	strh	r3, [r7, #2]
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800f9ee:	4b67      	ldr	r3, [pc, #412]	; (800fb8c <UG_DrawLine+0x1bc>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f9f6:	f003 0302 	and.w	r3, r3, #2
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d013      	beq.n	800fa26 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f9fe:	4b63      	ldr	r3, [pc, #396]	; (800fb8c <UG_DrawLine+0x1bc>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa04:	461d      	mov	r5, r3
 800fa06:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fa0a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fa0e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fa12:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fa16:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	4623      	mov	r3, r4
 800fa1c:	47a8      	blx	r5
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f000 80ae 	beq.w	800fb82 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800fa26:	887a      	ldrh	r2, [r7, #2]
 800fa28:	88fb      	ldrh	r3, [r7, #6]
 800fa2a:	1ad3      	subs	r3, r2, r3
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 800fa30:	883a      	ldrh	r2, [r7, #0]
 800fa32:	88bb      	ldrh	r3, [r7, #4]
 800fa34:	1ad3      	subs	r3, r2, r3
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 800fa3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	bfb8      	it	lt
 800fa42:	425b      	neglt	r3, r3
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 800fa48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	bfb8      	it	lt
 800fa50:	425b      	neglt	r3, r3
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 800fa56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	dd01      	ble.n	800fa62 <UG_DrawLine+0x92>
 800fa5e:	2301      	movs	r3, #1
 800fa60:	e001      	b.n	800fa66 <UG_DrawLine+0x96>
 800fa62:	f04f 33ff 	mov.w	r3, #4294967295
 800fa66:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 800fa68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	dd01      	ble.n	800fa74 <UG_DrawLine+0xa4>
 800fa70:	2301      	movs	r3, #1
 800fa72:	e001      	b.n	800fa78 <UG_DrawLine+0xa8>
 800fa74:	f04f 33ff 	mov.w	r3, #4294967295
 800fa78:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 800fa7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fa7e:	105b      	asrs	r3, r3, #1
 800fa80:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800fa82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fa86:	105b      	asrs	r3, r3, #1
 800fa88:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 800fa8a:	88fb      	ldrh	r3, [r7, #6]
 800fa8c:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800fa8e:	88bb      	ldrh	r3, [r7, #4]
 800fa90:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 800fa92:	4b3e      	ldr	r3, [pc, #248]	; (800fb8c <UG_DrawLine+0x1bc>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fa9c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800faa0:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800faa4:	4798      	blx	r3

   if( dxabs >= dyabs )
 800faa6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800faaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800faae:	429a      	cmp	r2, r3
 800fab0:	db33      	blt.n	800fb1a <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 800fab2:	2300      	movs	r3, #0
 800fab4:	83fb      	strh	r3, [r7, #30]
 800fab6:	e029      	b.n	800fb0c <UG_DrawLine+0x13c>
      {
         y += dyabs;
 800fab8:	8b7a      	ldrh	r2, [r7, #26]
 800faba:	89fb      	ldrh	r3, [r7, #14]
 800fabc:	4413      	add	r3, r2
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 800fac2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800fac6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800faca:	429a      	cmp	r2, r3
 800facc:	db09      	blt.n	800fae2 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 800face:	8b7a      	ldrh	r2, [r7, #26]
 800fad0:	8a3b      	ldrh	r3, [r7, #16]
 800fad2:	1ad3      	subs	r3, r2, r3
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 800fad8:	8afa      	ldrh	r2, [r7, #22]
 800fada:	897b      	ldrh	r3, [r7, #10]
 800fadc:	4413      	add	r3, r2
 800fade:	b29b      	uxth	r3, r3
 800fae0:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 800fae2:	8b3a      	ldrh	r2, [r7, #24]
 800fae4:	89bb      	ldrh	r3, [r7, #12]
 800fae6:	4413      	add	r3, r2
 800fae8:	b29b      	uxth	r3, r3
 800faea:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 800faec:	4b27      	ldr	r3, [pc, #156]	; (800fb8c <UG_DrawLine+0x1bc>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800faf6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800fafa:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800fafe:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 800fb00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	3301      	adds	r3, #1
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	83fb      	strh	r3, [r7, #30]
 800fb0c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800fb10:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800fb14:	429a      	cmp	r2, r3
 800fb16:	dbcf      	blt.n	800fab8 <UG_DrawLine+0xe8>
 800fb18:	e034      	b.n	800fb84 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	83fb      	strh	r3, [r7, #30]
 800fb1e:	e029      	b.n	800fb74 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 800fb20:	8bba      	ldrh	r2, [r7, #28]
 800fb22:	8a3b      	ldrh	r3, [r7, #16]
 800fb24:	4413      	add	r3, r2
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 800fb2a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800fb2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	db09      	blt.n	800fb4a <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 800fb36:	8bba      	ldrh	r2, [r7, #28]
 800fb38:	89fb      	ldrh	r3, [r7, #14]
 800fb3a:	1ad3      	subs	r3, r2, r3
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800fb40:	8b3a      	ldrh	r2, [r7, #24]
 800fb42:	89bb      	ldrh	r3, [r7, #12]
 800fb44:	4413      	add	r3, r2
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 800fb4a:	8afa      	ldrh	r2, [r7, #22]
 800fb4c:	897b      	ldrh	r3, [r7, #10]
 800fb4e:	4413      	add	r3, r2
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 800fb54:	4b0d      	ldr	r3, [pc, #52]	; (800fb8c <UG_DrawLine+0x1bc>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fb5e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800fb62:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800fb66:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 800fb68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	3301      	adds	r3, #1
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	83fb      	strh	r3, [r7, #30]
 800fb74:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800fb78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	dbcf      	blt.n	800fb20 <UG_DrawLine+0x150>
 800fb80:	e000      	b.n	800fb84 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fb82:	bf00      	nop
      }
   }  
}
 800fb84:	3720      	adds	r7, #32
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bdb0      	pop	{r4, r5, r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	20002260 	.word	0x20002260

0800fb90 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800fb90:	b590      	push	{r4, r7, lr}
 800fb92:	b087      	sub	sp, #28
 800fb94:	af02      	add	r7, sp, #8
 800fb96:	4603      	mov	r3, r0
 800fb98:	603a      	str	r2, [r7, #0]
 800fb9a:	80fb      	strh	r3, [r7, #6]
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 800fba0:	88fb      	ldrh	r3, [r7, #6]
 800fba2:	81fb      	strh	r3, [r7, #14]
   yp=y;
 800fba4:	88bb      	ldrh	r3, [r7, #4]
 800fba6:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 800fba8:	4b44      	ldr	r3, [pc, #272]	; (800fcbc <UG_PutString+0x12c>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f000 fa96 	bl	80100e0 <_UG_FontSelect>
   while ( *str != 0 )
 800fbb4:	e064      	b.n	800fc80 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800fbb6:	4b41      	ldr	r3, [pc, #260]	; (800fcbc <UG_PutString+0x12c>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d106      	bne.n	800fbd0 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 800fbc2:	463b      	mov	r3, r7
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f000 f8c7 	bl	800fd58 <_UG_DecodeUTF8>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	817b      	strh	r3, [r7, #10]
 800fbce:	e004      	b.n	800fbda <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	1c5a      	adds	r2, r3, #1
 800fbd4:	603a      	str	r2, [r7, #0]
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 800fbda:	897b      	ldrh	r3, [r7, #10]
 800fbdc:	2b0a      	cmp	r3, #10
 800fbde:	d105      	bne.n	800fbec <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 800fbe0:	4b36      	ldr	r3, [pc, #216]	; (800fcbc <UG_PutString+0x12c>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	881b      	ldrh	r3, [r3, #0]
 800fbe8:	81fb      	strh	r3, [r7, #14]
         continue;
 800fbea:	e049      	b.n	800fc80 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 800fbec:	897b      	ldrh	r3, [r7, #10]
 800fbee:	2100      	movs	r1, #0
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f000 f929 	bl	800fe48 <_UG_GetCharData>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 800fbfa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fbfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc02:	d100      	bne.n	800fc06 <UG_PutString+0x76>
 800fc04:	e03c      	b.n	800fc80 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 800fc06:	4b2d      	ldr	r3, [pc, #180]	; (800fcbc <UG_PutString+0x12c>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc10:	4619      	mov	r1, r3
 800fc12:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fc16:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	4299      	cmp	r1, r3
 800fc1e:	dc12      	bgt.n	800fc46 <UG_PutString+0xb6>
      {
         xp = x;
 800fc20:	88fb      	ldrh	r3, [r7, #6]
 800fc22:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800fc24:	4b25      	ldr	r3, [pc, #148]	; (800fcbc <UG_PutString+0x12c>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fc2c:	b21a      	sxth	r2, r3
 800fc2e:	4b23      	ldr	r3, [pc, #140]	; (800fcbc <UG_PutString+0x12c>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 800fc36:	b21b      	sxth	r3, r3
 800fc38:	4413      	add	r3, r2
 800fc3a:	b21b      	sxth	r3, r3
 800fc3c:	b29a      	uxth	r2, r3
 800fc3e:	89bb      	ldrh	r3, [r7, #12]
 800fc40:	4413      	add	r3, r2
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800fc46:	4b1d      	ldr	r3, [pc, #116]	; (800fcbc <UG_PutString+0x12c>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 800fc4e:	4b1b      	ldr	r3, [pc, #108]	; (800fcbc <UG_PutString+0x12c>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800fc56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fc5a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800fc5e:	8978      	ldrh	r0, [r7, #10]
 800fc60:	9300      	str	r3, [sp, #0]
 800fc62:	4623      	mov	r3, r4
 800fc64:	f000 fabe 	bl	80101e4 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 800fc68:	4b14      	ldr	r3, [pc, #80]	; (800fcbc <UG_PutString+0x12c>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 800fc70:	b29a      	uxth	r2, r3
 800fc72:	893b      	ldrh	r3, [r7, #8]
 800fc74:	4413      	add	r3, r2
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	89fb      	ldrh	r3, [r7, #14]
 800fc7a:	4413      	add	r3, r2
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d196      	bne.n	800fbb6 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 800fc88:	4b0c      	ldr	r3, [pc, #48]	; (800fcbc <UG_PutString+0x12c>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fc90:	f003 0302 	and.w	r3, r3, #2
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d00c      	beq.n	800fcb2 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800fc98:	4b08      	ldr	r3, [pc, #32]	; (800fcbc <UG_PutString+0x12c>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc9e:	461c      	mov	r4, r3
 800fca0:	f04f 33ff 	mov.w	r3, #4294967295
 800fca4:	f04f 32ff 	mov.w	r2, #4294967295
 800fca8:	f04f 31ff 	mov.w	r1, #4294967295
 800fcac:	f04f 30ff 	mov.w	r0, #4294967295
 800fcb0:	47a0      	blx	r4
}
 800fcb2:	bf00      	nop
 800fcb4:	3714      	adds	r7, #20
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd90      	pop	{r4, r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	20002260 	.word	0x20002260

0800fcc0 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	b083      	sub	sp, #12
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800fcca:	4b05      	ldr	r3, [pc, #20]	; (800fce0 <UG_SetForecolor+0x20>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	88fa      	ldrh	r2, [r7, #6]
 800fcd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800fcd4:	bf00      	nop
 800fcd6:	370c      	adds	r7, #12
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr
 800fce0:	20002260 	.word	0x20002260

0800fce4 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	4603      	mov	r3, r0
 800fcec:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 800fcee:	4b05      	ldr	r3, [pc, #20]	; (800fd04 <UG_SetBackcolor+0x20>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	88fa      	ldrh	r2, [r7, #6]
 800fcf4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr
 800fd04:	20002260 	.word	0x20002260

0800fd08 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	4603      	mov	r3, r0
 800fd10:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800fd12:	4b06      	ldr	r3, [pc, #24]	; (800fd2c <UG_FontSetHSpace+0x24>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	88fa      	ldrh	r2, [r7, #6]
 800fd18:	b252      	sxtb	r2, r2
 800fd1a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 800fd1e:	bf00      	nop
 800fd20:	370c      	adds	r7, #12
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr
 800fd2a:	bf00      	nop
 800fd2c:	20002260 	.word	0x20002260

0800fd30 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800fd30:	b480      	push	{r7}
 800fd32:	b083      	sub	sp, #12
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	4603      	mov	r3, r0
 800fd38:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 800fd3a:	4b06      	ldr	r3, [pc, #24]	; (800fd54 <UG_FontSetVSpace+0x24>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	88fa      	ldrh	r2, [r7, #6]
 800fd40:	b252      	sxtb	r2, r2
 800fd42:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 800fd46:	bf00      	nop
 800fd48:	370c      	adds	r7, #12
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop
 800fd54:	20002260 	.word	0x20002260

0800fd58 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 800fd58:	b480      	push	{r7}
 800fd5a:	b085      	sub	sp, #20
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]

  char c=**str;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 800fd68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	db07      	blt.n	800fd80 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	1c5a      	adds	r2, r3, #1
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	601a      	str	r2, [r3, #0]
    return c;
 800fd7a:	7bfb      	ldrb	r3, [r7, #15]
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	e05c      	b.n	800fe3a <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 800fd80:	2300      	movs	r3, #0
 800fd82:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 800fd84:	2300      	movs	r3, #0
 800fd86:	81bb      	strh	r3, [r7, #12]

  while(**str)
 800fd88:	e04f      	b.n	800fe2a <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	1c5a      	adds	r2, r3, #1
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 800fd9c:	7bbb      	ldrb	r3, [r7, #14]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d130      	bne.n	800fe04 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 800fda2:	7bfb      	ldrb	r3, [r7, #15]
 800fda4:	2bdf      	cmp	r3, #223	; 0xdf
 800fda6:	d806      	bhi.n	800fdb6 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 800fda8:	2301      	movs	r3, #1
 800fdaa:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 800fdac:	7bfb      	ldrb	r3, [r7, #15]
 800fdae:	f003 031f 	and.w	r3, r3, #31
 800fdb2:	73fb      	strb	r3, [r7, #15]
 800fdb4:	e023      	b.n	800fdfe <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800fdb6:	7bfb      	ldrb	r3, [r7, #15]
 800fdb8:	2bef      	cmp	r3, #239	; 0xef
 800fdba:	d806      	bhi.n	800fdca <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 800fdbc:	2302      	movs	r3, #2
 800fdbe:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 800fdc0:	7bfb      	ldrb	r3, [r7, #15]
 800fdc2:	f003 030f 	and.w	r3, r3, #15
 800fdc6:	73fb      	strb	r3, [r7, #15]
 800fdc8:	e019      	b.n	800fdfe <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800fdca:	7bfb      	ldrb	r3, [r7, #15]
 800fdcc:	2bf7      	cmp	r3, #247	; 0xf7
 800fdce:	d806      	bhi.n	800fdde <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 800fdd0:	2303      	movs	r3, #3
 800fdd2:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 800fdd4:	7bfb      	ldrb	r3, [r7, #15]
 800fdd6:	f003 0307 	and.w	r3, r3, #7
 800fdda:	73fb      	strb	r3, [r7, #15]
 800fddc:	e00f      	b.n	800fdfe <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 800fdde:	7bfb      	ldrb	r3, [r7, #15]
 800fde0:	2bfb      	cmp	r3, #251	; 0xfb
 800fde2:	d806      	bhi.n	800fdf2 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 800fde4:	2304      	movs	r3, #4
 800fde6:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
 800fdea:	f003 0303 	and.w	r3, r3, #3
 800fdee:	73fb      	strb	r3, [r7, #15]
 800fdf0:	e005      	b.n	800fdfe <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 800fdf2:	2305      	movs	r3, #5
 800fdf4:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 800fdf6:	7bfb      	ldrb	r3, [r7, #15]
 800fdf8:	f003 0301 	and.w	r3, r3, #1
 800fdfc:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 800fdfe:	7bfb      	ldrb	r3, [r7, #15]
 800fe00:	81bb      	strh	r3, [r7, #12]
 800fe02:	e012      	b.n	800fe2a <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 800fe04:	89bb      	ldrh	r3, [r7, #12]
 800fe06:	019b      	lsls	r3, r3, #6
 800fe08:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 800fe0a:	7bfb      	ldrb	r3, [r7, #15]
 800fe0c:	b21b      	sxth	r3, r3
 800fe0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe12:	b21a      	sxth	r2, r3
 800fe14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fe18:	4313      	orrs	r3, r2
 800fe1a:	b21b      	sxth	r3, r3
 800fe1c:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 800fe1e:	7bbb      	ldrb	r3, [r7, #14]
 800fe20:	3b01      	subs	r3, #1
 800fe22:	73bb      	strb	r3, [r7, #14]
 800fe24:	7bbb      	ldrb	r3, [r7, #14]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d005      	beq.n	800fe36 <_UG_DecodeUTF8+0xde>
  while(**str)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1aa      	bne.n	800fd8a <_UG_DecodeUTF8+0x32>
 800fe34:	e000      	b.n	800fe38 <_UG_DecodeUTF8+0xe0>
        break;
 800fe36:	bf00      	nop
    }
  }
  return encoding;
 800fe38:	89bb      	ldrh	r3, [r7, #12]
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3714      	adds	r7, #20
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr
	...

0800fe48 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b086      	sub	sp, #24
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	4603      	mov	r3, r0
 800fe50:	6039      	str	r1, [r7, #0]
 800fe52:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 800fe54:	2300      	movs	r3, #0
 800fe56:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 800fe64:	2300      	movs	r3, #0
 800fe66:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800fe68:	4b98      	ldr	r3, [pc, #608]	; (80100cc <_UG_GetCharData+0x284>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe6e:	4b98      	ldr	r3, [pc, #608]	; (80100d0 <_UG_GetCharData+0x288>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d10f      	bne.n	800fe96 <_UG_GetCharData+0x4e>
 800fe76:	4b97      	ldr	r3, [pc, #604]	; (80100d4 <_UG_GetCharData+0x28c>)
 800fe78:	881b      	ldrh	r3, [r3, #0]
 800fe7a:	88fa      	ldrh	r2, [r7, #6]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d10a      	bne.n	800fe96 <_UG_GetCharData+0x4e>
    if(p){
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d003      	beq.n	800fe8e <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 800fe86:	4b94      	ldr	r3, [pc, #592]	; (80100d8 <_UG_GetCharData+0x290>)
 800fe88:	681a      	ldr	r2, [r3, #0]
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 800fe8e:	4b93      	ldr	r3, [pc, #588]	; (80100dc <_UG_GetCharData+0x294>)
 800fe90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe94:	e116      	b.n	80100c4 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800fe96:	4b8d      	ldr	r3, [pc, #564]	; (80100cc <_UG_GetCharData+0x284>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f000 80cc 	beq.w	801003c <_UG_GetCharData+0x1f4>
    switch ( encoding )
 800fea4:	88fb      	ldrh	r3, [r7, #6]
 800fea6:	2bfc      	cmp	r3, #252	; 0xfc
 800fea8:	f300 80c8 	bgt.w	801003c <_UG_GetCharData+0x1f4>
 800feac:	2bd6      	cmp	r3, #214	; 0xd6
 800feae:	da09      	bge.n	800fec4 <_UG_GetCharData+0x7c>
 800feb0:	2bc4      	cmp	r3, #196	; 0xc4
 800feb2:	d06c      	beq.n	800ff8e <_UG_GetCharData+0x146>
 800feb4:	2bc4      	cmp	r3, #196	; 0xc4
 800feb6:	f300 80c1 	bgt.w	801003c <_UG_GetCharData+0x1f4>
 800feba:	2bb0      	cmp	r3, #176	; 0xb0
 800febc:	d06d      	beq.n	800ff9a <_UG_GetCharData+0x152>
 800febe:	2bb5      	cmp	r3, #181	; 0xb5
 800fec0:	d068      	beq.n	800ff94 <_UG_GetCharData+0x14c>
 800fec2:	e06e      	b.n	800ffa2 <_UG_GetCharData+0x15a>
 800fec4:	3bd6      	subs	r3, #214	; 0xd6
 800fec6:	2b26      	cmp	r3, #38	; 0x26
 800fec8:	f200 80b8 	bhi.w	801003c <_UG_GetCharData+0x1f4>
 800fecc:	a201      	add	r2, pc, #4	; (adr r2, 800fed4 <_UG_GetCharData+0x8c>)
 800fece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed2:	bf00      	nop
 800fed4:	0800ff77 	.word	0x0800ff77
 800fed8:	0801003d 	.word	0x0801003d
 800fedc:	0801003d 	.word	0x0801003d
 800fee0:	0801003d 	.word	0x0801003d
 800fee4:	0801003d 	.word	0x0801003d
 800fee8:	0801003d 	.word	0x0801003d
 800feec:	0800ff83 	.word	0x0800ff83
 800fef0:	0801003d 	.word	0x0801003d
 800fef4:	0801003d 	.word	0x0801003d
 800fef8:	0801003d 	.word	0x0801003d
 800fefc:	0801003d 	.word	0x0801003d
 800ff00:	0801003d 	.word	0x0801003d
 800ff04:	0801003d 	.word	0x0801003d
 800ff08:	0801003d 	.word	0x0801003d
 800ff0c:	0800ff89 	.word	0x0800ff89
 800ff10:	0801003d 	.word	0x0801003d
 800ff14:	0801003d 	.word	0x0801003d
 800ff18:	0801003d 	.word	0x0801003d
 800ff1c:	0801003d 	.word	0x0801003d
 800ff20:	0801003d 	.word	0x0801003d
 800ff24:	0801003d 	.word	0x0801003d
 800ff28:	0801003d 	.word	0x0801003d
 800ff2c:	0801003d 	.word	0x0801003d
 800ff30:	0801003d 	.word	0x0801003d
 800ff34:	0801003d 	.word	0x0801003d
 800ff38:	0801003d 	.word	0x0801003d
 800ff3c:	0801003d 	.word	0x0801003d
 800ff40:	0801003d 	.word	0x0801003d
 800ff44:	0801003d 	.word	0x0801003d
 800ff48:	0801003d 	.word	0x0801003d
 800ff4c:	0801003d 	.word	0x0801003d
 800ff50:	0801003d 	.word	0x0801003d
 800ff54:	0800ff71 	.word	0x0800ff71
 800ff58:	0801003d 	.word	0x0801003d
 800ff5c:	0801003d 	.word	0x0801003d
 800ff60:	0801003d 	.word	0x0801003d
 800ff64:	0801003d 	.word	0x0801003d
 800ff68:	0801003d 	.word	0x0801003d
 800ff6c:	0800ff7d 	.word	0x0800ff7d
    {
       case 0xF6: encoding = 0x94; break; // ö
 800ff70:	2394      	movs	r3, #148	; 0x94
 800ff72:	80fb      	strh	r3, [r7, #6]
 800ff74:	e015      	b.n	800ffa2 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 800ff76:	2399      	movs	r3, #153	; 0x99
 800ff78:	80fb      	strh	r3, [r7, #6]
 800ff7a:	e012      	b.n	800ffa2 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 800ff7c:	2381      	movs	r3, #129	; 0x81
 800ff7e:	80fb      	strh	r3, [r7, #6]
 800ff80:	e00f      	b.n	800ffa2 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 800ff82:	239a      	movs	r3, #154	; 0x9a
 800ff84:	80fb      	strh	r3, [r7, #6]
 800ff86:	e00c      	b.n	800ffa2 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 800ff88:	2384      	movs	r3, #132	; 0x84
 800ff8a:	80fb      	strh	r3, [r7, #6]
 800ff8c:	e009      	b.n	800ffa2 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 800ff8e:	238e      	movs	r3, #142	; 0x8e
 800ff90:	80fb      	strh	r3, [r7, #6]
 800ff92:	e006      	b.n	800ffa2 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 800ff94:	23e6      	movs	r3, #230	; 0xe6
 800ff96:	80fb      	strh	r3, [r7, #6]
 800ff98:	e003      	b.n	800ffa2 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 800ff9a:	23f8      	movs	r3, #248	; 0xf8
 800ff9c:	80fb      	strh	r3, [r7, #6]
 800ff9e:	bf00      	nop
 800ffa0:	e04c      	b.n	801003c <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800ffa2:	e04b      	b.n	801003c <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 800ffa4:	4b49      	ldr	r3, [pc, #292]	; (80100cc <_UG_GetCharData+0x284>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffaa:	8a7a      	ldrh	r2, [r7, #18]
 800ffac:	0052      	lsls	r2, r2, #1
 800ffae:	4413      	add	r3, r2
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7ff fa87 	bl	800f4c4 <ptr_8to16>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800ffba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	da06      	bge.n	800ffd0 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 800ffc2:	89fb      	ldrh	r3, [r7, #14]
 800ffc4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ffc8:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 800ffca:	2301      	movs	r3, #1
 800ffcc:	747b      	strb	r3, [r7, #17]
 800ffce:	e032      	b.n	8010036 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 800ffd0:	7c7b      	ldrb	r3, [r7, #17]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d021      	beq.n	801001a <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 800ffd6:	88fa      	ldrh	r2, [r7, #6]
 800ffd8:	8afb      	ldrh	r3, [r7, #22]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d30d      	bcc.n	800fffa <_UG_GetCharData+0x1b2>
 800ffde:	88fa      	ldrh	r2, [r7, #6]
 800ffe0:	89fb      	ldrh	r3, [r7, #14]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d809      	bhi.n	800fffa <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 800ffe6:	88fa      	ldrh	r2, [r7, #6]
 800ffe8:	8afb      	ldrh	r3, [r7, #22]
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	8abb      	ldrh	r3, [r7, #20]
 800fff0:	4413      	add	r3, r2
 800fff2:	82bb      	strh	r3, [r7, #20]
        found=1;
 800fff4:	2301      	movs	r3, #1
 800fff6:	743b      	strb	r3, [r7, #16]
        break;
 800fff8:	e02a      	b.n	8010050 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 800fffa:	88fa      	ldrh	r2, [r7, #6]
 800fffc:	8afb      	ldrh	r3, [r7, #22]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d323      	bcc.n	801004a <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8010002:	89fa      	ldrh	r2, [r7, #14]
 8010004:	8afb      	ldrh	r3, [r7, #22]
 8010006:	1ad3      	subs	r3, r2, r3
 8010008:	b29a      	uxth	r2, r3
 801000a:	8abb      	ldrh	r3, [r7, #20]
 801000c:	4413      	add	r3, r2
 801000e:	b29b      	uxth	r3, r3
 8010010:	3301      	adds	r3, #1
 8010012:	82bb      	strh	r3, [r7, #20]
      range=0;
 8010014:	2300      	movs	r3, #0
 8010016:	747b      	strb	r3, [r7, #17]
 8010018:	e00d      	b.n	8010036 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 801001a:	88fa      	ldrh	r2, [r7, #6]
 801001c:	89fb      	ldrh	r3, [r7, #14]
 801001e:	429a      	cmp	r2, r3
 8010020:	d102      	bne.n	8010028 <_UG_GetCharData+0x1e0>
      {
        found=1;
 8010022:	2301      	movs	r3, #1
 8010024:	743b      	strb	r3, [r7, #16]
        break;
 8010026:	e013      	b.n	8010050 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8010028:	88fa      	ldrh	r2, [r7, #6]
 801002a:	89fb      	ldrh	r3, [r7, #14]
 801002c:	429a      	cmp	r2, r3
 801002e:	d30e      	bcc.n	801004e <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8010030:	8abb      	ldrh	r3, [r7, #20]
 8010032:	3301      	adds	r3, #1
 8010034:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8010036:	8a7b      	ldrh	r3, [r7, #18]
 8010038:	3301      	adds	r3, #1
 801003a:	827b      	strh	r3, [r7, #18]
 801003c:	4b23      	ldr	r3, [pc, #140]	; (80100cc <_UG_GetCharData+0x284>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8010042:	8a7a      	ldrh	r2, [r7, #18]
 8010044:	429a      	cmp	r2, r3
 8010046:	d3ad      	bcc.n	800ffa4 <_UG_GetCharData+0x15c>
 8010048:	e002      	b.n	8010050 <_UG_GetCharData+0x208>
        break;
 801004a:	bf00      	nop
 801004c:	e000      	b.n	8010050 <_UG_GetCharData+0x208>
        break;
 801004e:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8010050:	7c3b      	ldrb	r3, [r7, #16]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d034      	beq.n	80100c0 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8010056:	4b1d      	ldr	r3, [pc, #116]	; (80100cc <_UG_GetCharData+0x284>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801005c:	4a1c      	ldr	r2, [pc, #112]	; (80100d0 <_UG_GetCharData+0x288>)
 801005e:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8010060:	4a1c      	ldr	r2, [pc, #112]	; (80100d4 <_UG_GetCharData+0x28c>)
 8010062:	88fb      	ldrh	r3, [r7, #6]
 8010064:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8010066:	4b19      	ldr	r3, [pc, #100]	; (80100cc <_UG_GetCharData+0x284>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801006c:	8aba      	ldrh	r2, [r7, #20]
 801006e:	4917      	ldr	r1, [pc, #92]	; (80100cc <_UG_GetCharData+0x284>)
 8010070:	6809      	ldr	r1, [r1, #0]
 8010072:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8010074:	fb01 f202 	mul.w	r2, r1, r2
 8010078:	4413      	add	r3, r2
 801007a:	4a17      	ldr	r2, [pc, #92]	; (80100d8 <_UG_GetCharData+0x290>)
 801007c:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 801007e:	4b13      	ldr	r3, [pc, #76]	; (80100cc <_UG_GetCharData+0x284>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010084:	2b00      	cmp	r3, #0
 8010086:	d009      	beq.n	801009c <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8010088:	4b10      	ldr	r3, [pc, #64]	; (80100cc <_UG_GetCharData+0x284>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801008e:	8abb      	ldrh	r3, [r7, #20]
 8010090:	4413      	add	r3, r2
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	b21a      	sxth	r2, r3
 8010096:	4b11      	ldr	r3, [pc, #68]	; (80100dc <_UG_GetCharData+0x294>)
 8010098:	801a      	strh	r2, [r3, #0]
 801009a:	e006      	b.n	80100aa <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 801009c:	4b0b      	ldr	r3, [pc, #44]	; (80100cc <_UG_GetCharData+0x284>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80100a4:	b21a      	sxth	r2, r3
 80100a6:	4b0d      	ldr	r3, [pc, #52]	; (80100dc <_UG_GetCharData+0x294>)
 80100a8:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d003      	beq.n	80100b8 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 80100b0:	4b09      	ldr	r3, [pc, #36]	; (80100d8 <_UG_GetCharData+0x290>)
 80100b2:	681a      	ldr	r2, [r3, #0]
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 80100b8:	4b08      	ldr	r3, [pc, #32]	; (80100dc <_UG_GetCharData+0x294>)
 80100ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100be:	e001      	b.n	80100c4 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 80100c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3718      	adds	r7, #24
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	20002260 	.word	0x20002260
 80100d0:	20002264 	.word	0x20002264
 80100d4:	20002268 	.word	0x20002268
 80100d8:	2000226c 	.word	0x2000226c
 80100dc:	20002270 	.word	0x20002270

080100e0 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 80100e0:	b590      	push	{r4, r7, lr}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80100e8:	4b3d      	ldr	r3, [pc, #244]	; (80101e0 <_UG_FontSelect+0x100>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d070      	beq.n	80101d6 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 80100f4:	4b3a      	ldr	r3, [pc, #232]	; (80101e0 <_UG_FontSelect+0x100>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	687a      	ldr	r2, [r7, #4]
 80100fa:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	781a      	ldrb	r2, [r3, #0]
 8010100:	4b37      	ldr	r3, [pc, #220]	; (80101e0 <_UG_FontSelect+0x100>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010108:	b2d2      	uxtb	r2, r2
 801010a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	1c5a      	adds	r2, r3, #1
 8010112:	607a      	str	r2, [r7, #4]
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	b25b      	sxtb	r3, r3
 8010118:	2b00      	cmp	r3, #0
 801011a:	da01      	bge.n	8010120 <_UG_FontSelect+0x40>
 801011c:	2201      	movs	r2, #1
 801011e:	e000      	b.n	8010122 <_UG_FontSelect+0x42>
 8010120:	2200      	movs	r2, #0
 8010122:	4b2f      	ldr	r3, [pc, #188]	; (80101e0 <_UG_FontSelect+0x100>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	b2d2      	uxtb	r2, r2
 8010128:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	1c5a      	adds	r2, r3, #1
 8010130:	607a      	str	r2, [r7, #4]
 8010132:	4a2b      	ldr	r2, [pc, #172]	; (80101e0 <_UG_FontSelect+0x100>)
 8010134:	6812      	ldr	r2, [r2, #0]
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	1c5a      	adds	r2, r3, #1
 8010140:	607a      	str	r2, [r7, #4]
 8010142:	4a27      	ldr	r2, [pc, #156]	; (80101e0 <_UG_FontSelect+0x100>)
 8010144:	6812      	ldr	r2, [r2, #0]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 801014c:	4b24      	ldr	r3, [pc, #144]	; (80101e0 <_UG_FontSelect+0x100>)
 801014e:	681c      	ldr	r4, [r3, #0]
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7ff f9b7 	bl	800f4c4 <ptr_8to16>
 8010156:	4603      	mov	r3, r0
 8010158:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	3302      	adds	r3, #2
 801015e:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8010160:	4b1f      	ldr	r3, [pc, #124]	; (80101e0 <_UG_FontSelect+0x100>)
 8010162:	681c      	ldr	r4, [r3, #0]
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7ff f9ad 	bl	800f4c4 <ptr_8to16>
 801016a:	4603      	mov	r3, r0
 801016c:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	3302      	adds	r3, #2
 8010172:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8010174:	4b1a      	ldr	r3, [pc, #104]	; (80101e0 <_UG_FontSelect+0x100>)
 8010176:	681c      	ldr	r4, [r3, #0]
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f7ff f9a3 	bl	800f4c4 <ptr_8to16>
 801017e:	4603      	mov	r3, r0
 8010180:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	3302      	adds	r3, #2
 8010186:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	1c5a      	adds	r2, r3, #1
 801018c:	607a      	str	r2, [r7, #4]
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d00b      	beq.n	80101ac <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8010194:	4b12      	ldr	r3, [pc, #72]	; (80101e0 <_UG_FontSelect+0x100>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 801019c:	4b10      	ldr	r3, [pc, #64]	; (80101e0 <_UG_FontSelect+0x100>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101a2:	461a      	mov	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	4413      	add	r3, r2
 80101a8:	607b      	str	r3, [r7, #4]
 80101aa:	e003      	b.n	80101b4 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 80101ac:	4b0c      	ldr	r3, [pc, #48]	; (80101e0 <_UG_FontSelect+0x100>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2200      	movs	r2, #0
 80101b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 80101b4:	4b0a      	ldr	r3, [pc, #40]	; (80101e0 <_UG_FontSelect+0x100>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 80101bc:	4b08      	ldr	r3, [pc, #32]	; (80101e0 <_UG_FontSelect+0x100>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80101c2:	005b      	lsls	r3, r3, #1
 80101c4:	461a      	mov	r2, r3
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4413      	add	r3, r2
 80101ca:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 80101cc:	4b04      	ldr	r3, [pc, #16]	; (80101e0 <_UG_FontSelect+0x100>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	641a      	str	r2, [r3, #64]	; 0x40
 80101d4:	e000      	b.n	80101d8 <_UG_FontSelect+0xf8>
    return;
 80101d6:	bf00      	nop
}
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd90      	pop	{r4, r7, pc}
 80101de:	bf00      	nop
 80101e0:	20002260 	.word	0x20002260

080101e4 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 80101e4:	b5b0      	push	{r4, r5, r7, lr}
 80101e6:	b08c      	sub	sp, #48	; 0x30
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	4604      	mov	r4, r0
 80101ec:	4608      	mov	r0, r1
 80101ee:	4611      	mov	r1, r2
 80101f0:	461a      	mov	r2, r3
 80101f2:	4623      	mov	r3, r4
 80101f4:	80fb      	strh	r3, [r7, #6]
 80101f6:	4603      	mov	r3, r0
 80101f8:	80bb      	strh	r3, [r7, #4]
 80101fa:	460b      	mov	r3, r1
 80101fc:	807b      	strh	r3, [r7, #2]
 80101fe:	4613      	mov	r3, r2
 8010200:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8010202:	2300      	movs	r3, #0
 8010204:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010206:	2300      	movs	r3, #0
 8010208:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801020a:	2300      	movs	r3, #0
 801020c:	847b      	strh	r3, [r7, #34]	; 0x22
 801020e:	2300      	movs	r3, #0
 8010210:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8010212:	4b8c      	ldr	r3, [pc, #560]	; (8010444 <_UG_PutChar+0x260>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801021a:	75fb      	strb	r3, [r7, #23]
 801021c:	4b89      	ldr	r3, [pc, #548]	; (8010444 <_UG_PutChar+0x260>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010224:	f003 0302 	and.w	r3, r3, #2
 8010228:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 801022a:	2300      	movs	r3, #0
 801022c:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 801022e:	f107 0208 	add.w	r2, r7, #8
 8010232:	88fb      	ldrh	r3, [r7, #6]
 8010234:	4611      	mov	r1, r2
 8010236:	4618      	mov	r0, r3
 8010238:	f7ff fe06 	bl	800fe48 <_UG_GetCharData>
 801023c:	4603      	mov	r3, r0
 801023e:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8010240:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010248:	d102      	bne.n	8010250 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 801024a:	f04f 33ff 	mov.w	r3, #4294967295
 801024e:	e226      	b.n	801069e <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8010250:	4b7c      	ldr	r3, [pc, #496]	; (8010444 <_UG_PutChar+0x260>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010258:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 801025a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801025c:	2b00      	cmp	r3, #0
 801025e:	d101      	bne.n	8010264 <_UG_PutChar+0x80>
     return 0;
 8010260:	2300      	movs	r3, #0
 8010262:	e21c      	b.n	801069e <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8010264:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010266:	08db      	lsrs	r3, r3, #3
 8010268:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 801026a:	4b76      	ldr	r3, [pc, #472]	; (8010444 <_UG_PutChar+0x260>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010272:	f003 0307 	and.w	r3, r3, #7
 8010276:	b2db      	uxtb	r3, r3
 8010278:	2b00      	cmp	r3, #0
 801027a:	d002      	beq.n	8010282 <_UG_PutChar+0x9e>
 801027c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801027e:	3301      	adds	r3, #1
 8010280:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8010282:	7dbb      	ldrb	r3, [r7, #22]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d01d      	beq.n	80102c4 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8010288:	4b6e      	ldr	r3, [pc, #440]	; (8010444 <_UG_PutChar+0x260>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801028e:	461d      	mov	r5, r3
 8010290:	88ba      	ldrh	r2, [r7, #4]
 8010292:	8abb      	ldrh	r3, [r7, #20]
 8010294:	4413      	add	r3, r2
 8010296:	b29b      	uxth	r3, r3
 8010298:	3b01      	subs	r3, #1
 801029a:	b29b      	uxth	r3, r3
 801029c:	b21c      	sxth	r4, r3
 801029e:	4b69      	ldr	r3, [pc, #420]	; (8010444 <_UG_PutChar+0x260>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	887b      	ldrh	r3, [r7, #2]
 80102aa:	4413      	add	r3, r2
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	3b01      	subs	r3, #1
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	b21b      	sxth	r3, r3
 80102b4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80102b8:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80102bc:	4622      	mov	r2, r4
 80102be:	47a8      	blx	r5
 80102c0:	4603      	mov	r3, r0
 80102c2:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 80102c4:	4b5f      	ldr	r3, [pc, #380]	; (8010444 <_UG_PutChar+0x260>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	f040 8172 	bne.w	80105b6 <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80102d2:	2300      	movs	r3, #0
 80102d4:	853b      	strh	r3, [r7, #40]	; 0x28
 80102d6:	e0ec      	b.n	80104b2 <_UG_PutChar+0x2ce>
     {
       c=0;
 80102d8:	2300      	movs	r3, #0
 80102da:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 80102dc:	2300      	movs	r3, #0
 80102de:	857b      	strh	r3, [r7, #42]	; 0x2a
 80102e0:	e0df      	b.n	80104a2 <_UG_PutChar+0x2be>
       {
         b = *data++;
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	1c5a      	adds	r2, r3, #1
 80102e6:	60ba      	str	r2, [r7, #8]
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80102ec:	2300      	movs	r3, #0
 80102ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80102f0:	e0ca      	b.n	8010488 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 80102f2:	7f7b      	ldrb	r3, [r7, #29]
 80102f4:	f003 0301 	and.w	r3, r3, #1
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d033      	beq.n	8010364 <_UG_PutChar+0x180>
           {
             if(driver)
 80102fc:	7dbb      	ldrb	r3, [r7, #22]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d01f      	beq.n	8010342 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8010302:	8c3b      	ldrh	r3, [r7, #32]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00a      	beq.n	801031e <_UG_PutChar+0x13a>
 8010308:	7dfb      	ldrb	r3, [r7, #23]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d107      	bne.n	801031e <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 801030e:	8c3a      	ldrh	r2, [r7, #32]
 8010310:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8010314:	69bb      	ldr	r3, [r7, #24]
 8010316:	4610      	mov	r0, r2
 8010318:	4798      	blx	r3
                 bpixels=0;
 801031a:	2300      	movs	r3, #0
 801031c:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 801031e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010320:	2b00      	cmp	r3, #0
 8010322:	d10a      	bne.n	801033a <_UG_PutChar+0x156>
 8010324:	7dfb      	ldrb	r3, [r7, #23]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d007      	beq.n	801033a <_UG_PutChar+0x156>
               {
                 x0=x+c;
 801032a:	88ba      	ldrh	r2, [r7, #4]
 801032c:	8bfb      	ldrh	r3, [r7, #30]
 801032e:	4413      	add	r3, r2
 8010330:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8010332:	887a      	ldrh	r2, [r7, #2]
 8010334:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010336:	4413      	add	r3, r2
 8010338:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 801033a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801033c:	3301      	adds	r3, #1
 801033e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010340:	e096      	b.n	8010470 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8010342:	4b40      	ldr	r3, [pc, #256]	; (8010444 <_UG_PutChar+0x260>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	88b9      	ldrh	r1, [r7, #4]
 801034c:	8bfa      	ldrh	r2, [r7, #30]
 801034e:	440a      	add	r2, r1
 8010350:	b292      	uxth	r2, r2
 8010352:	b210      	sxth	r0, r2
 8010354:	8879      	ldrh	r1, [r7, #2]
 8010356:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010358:	440a      	add	r2, r1
 801035a:	b292      	uxth	r2, r2
 801035c:	b211      	sxth	r1, r2
 801035e:	883a      	ldrh	r2, [r7, #0]
 8010360:	4798      	blx	r3
 8010362:	e085      	b.n	8010470 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8010364:	7dbb      	ldrb	r3, [r7, #22]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d06e      	beq.n	8010448 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 801036a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801036c:	2b00      	cmp	r3, #0
 801036e:	d064      	beq.n	801043a <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8010370:	7dfb      	ldrb	r3, [r7, #23]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d15e      	bne.n	8010434 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8010376:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010378:	8839      	ldrh	r1, [r7, #0]
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	4610      	mov	r0, r2
 801037e:	4798      	blx	r3
                   fpixels=0;
 8010380:	2300      	movs	r3, #0
 8010382:	847b      	strh	r3, [r7, #34]	; 0x22
 8010384:	e059      	b.n	801043a <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8010386:	88ba      	ldrh	r2, [r7, #4]
 8010388:	8abb      	ldrh	r3, [r7, #20]
 801038a:	4413      	add	r3, r2
 801038c:	b29a      	uxth	r2, r3
 801038e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010390:	1ad3      	subs	r3, r2, r3
 8010392:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8010394:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010396:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801039a:	429a      	cmp	r2, r3
 801039c:	d003      	beq.n	80103a6 <_UG_PutChar+0x1c2>
 801039e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80103a0:	89fb      	ldrh	r3, [r7, #14]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d224      	bcs.n	80103f0 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80103a6:	4b27      	ldr	r3, [pc, #156]	; (8010444 <_UG_PutChar+0x260>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103ac:	461d      	mov	r5, r3
 80103ae:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80103b2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80103b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80103b8:	89fb      	ldrh	r3, [r7, #14]
 80103ba:	4413      	add	r3, r2
 80103bc:	b29b      	uxth	r3, r3
 80103be:	3b01      	subs	r3, #1
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	b21c      	sxth	r4, r3
 80103c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80103c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80103ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80103d2:	4413      	add	r3, r2
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	b21b      	sxth	r3, r3
 80103d8:	4622      	mov	r2, r4
 80103da:	47a8      	blx	r5
 80103dc:	4603      	mov	r3, r0
 80103de:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80103e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80103e2:	8839      	ldrh	r1, [r7, #0]
 80103e4:	69bb      	ldr	r3, [r7, #24]
 80103e6:	4610      	mov	r0, r2
 80103e8:	4798      	blx	r3
                       fpixels=0;
 80103ea:	2300      	movs	r3, #0
 80103ec:	847b      	strh	r3, [r7, #34]	; 0x22
 80103ee:	e021      	b.n	8010434 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80103f0:	4b14      	ldr	r3, [pc, #80]	; (8010444 <_UG_PutChar+0x260>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103f6:	461c      	mov	r4, r3
 80103f8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80103fc:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010400:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010402:	89fb      	ldrh	r3, [r7, #14]
 8010404:	4413      	add	r3, r2
 8010406:	b29b      	uxth	r3, r3
 8010408:	3b01      	subs	r3, #1
 801040a:	b29b      	uxth	r3, r3
 801040c:	b21a      	sxth	r2, r3
 801040e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010412:	47a0      	blx	r4
 8010414:	4603      	mov	r3, r0
 8010416:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8010418:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801041a:	8839      	ldrh	r1, [r7, #0]
 801041c:	69bb      	ldr	r3, [r7, #24]
 801041e:	4610      	mov	r0, r2
 8010420:	4798      	blx	r3
                       fpixels -= width;
 8010422:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010424:	89fb      	ldrh	r3, [r7, #14]
 8010426:	1ad3      	subs	r3, r2, r3
 8010428:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 801042a:	88bb      	ldrh	r3, [r7, #4]
 801042c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 801042e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010430:	3301      	adds	r3, #1
 8010432:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8010434:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1a5      	bne.n	8010386 <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 801043a:	8c3b      	ldrh	r3, [r7, #32]
 801043c:	3301      	adds	r3, #1
 801043e:	843b      	strh	r3, [r7, #32]
 8010440:	e016      	b.n	8010470 <_UG_PutChar+0x28c>
 8010442:	bf00      	nop
 8010444:	20002260 	.word	0x20002260
             }
             else if(!trans)                           // Not accelerated output
 8010448:	7dfb      	ldrb	r3, [r7, #23]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d110      	bne.n	8010470 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 801044e:	4b96      	ldr	r3, [pc, #600]	; (80106a8 <_UG_PutChar+0x4c4>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	88b9      	ldrh	r1, [r7, #4]
 8010458:	8bfa      	ldrh	r2, [r7, #30]
 801045a:	440a      	add	r2, r1
 801045c:	b292      	uxth	r2, r2
 801045e:	b210      	sxth	r0, r2
 8010460:	8879      	ldrh	r1, [r7, #2]
 8010462:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010464:	440a      	add	r2, r1
 8010466:	b292      	uxth	r2, r2
 8010468:	b211      	sxth	r1, r2
 801046a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801046e:	4798      	blx	r3
             }
           }
           b >>= 1;
 8010470:	7f7b      	ldrb	r3, [r7, #29]
 8010472:	085b      	lsrs	r3, r3, #1
 8010474:	777b      	strb	r3, [r7, #29]
           c++;
 8010476:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801047a:	b29b      	uxth	r3, r3
 801047c:	3301      	adds	r3, #1
 801047e:	b29b      	uxth	r3, r3
 8010480:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8010482:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010484:	3301      	adds	r3, #1
 8010486:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801048a:	2b07      	cmp	r3, #7
 801048c:	d806      	bhi.n	801049c <_UG_PutChar+0x2b8>
 801048e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8010492:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010496:	429a      	cmp	r2, r3
 8010498:	f6ff af2b 	blt.w	80102f2 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 801049c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801049e:	3301      	adds	r3, #1
 80104a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80104a2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80104a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80104a6:	429a      	cmp	r2, r3
 80104a8:	f4ff af1b 	bcc.w	80102e2 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80104ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80104ae:	3301      	adds	r3, #1
 80104b0:	853b      	strh	r3, [r7, #40]	; 0x28
 80104b2:	4b7d      	ldr	r3, [pc, #500]	; (80106a8 <_UG_PutChar+0x4c4>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80104be:	429a      	cmp	r2, r3
 80104c0:	f4ff af0a 	bcc.w	80102d8 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 80104c4:	7dbb      	ldrb	r3, [r7, #22]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	f000 80e7 	beq.w	801069a <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 80104cc:	8c3b      	ldrh	r3, [r7, #32]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d009      	beq.n	80104e6 <_UG_PutChar+0x302>
 80104d2:	7dfb      	ldrb	r3, [r7, #23]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d106      	bne.n	80104e6 <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 80104d8:	8c3a      	ldrh	r2, [r7, #32]
 80104da:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	4610      	mov	r0, r2
 80104e2:	4798      	blx	r3
 80104e4:	e0d9      	b.n	801069a <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 80104e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	f000 80d6 	beq.w	801069a <_UG_PutChar+0x4b6>
       {
         if(!trans)
 80104ee:	7dfb      	ldrb	r3, [r7, #23]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d15c      	bne.n	80105ae <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 80104f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80104f6:	8839      	ldrh	r1, [r7, #0]
 80104f8:	69bb      	ldr	r3, [r7, #24]
 80104fa:	4610      	mov	r0, r2
 80104fc:	4798      	blx	r3
 80104fe:	e0cc      	b.n	801069a <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8010500:	88ba      	ldrh	r2, [r7, #4]
 8010502:	8abb      	ldrh	r3, [r7, #20]
 8010504:	4413      	add	r3, r2
 8010506:	b29a      	uxth	r2, r3
 8010508:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801050a:	1ad3      	subs	r3, r2, r3
 801050c:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 801050e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010510:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010514:	429a      	cmp	r2, r3
 8010516:	d003      	beq.n	8010520 <_UG_PutChar+0x33c>
 8010518:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801051a:	8a3b      	ldrh	r3, [r7, #16]
 801051c:	429a      	cmp	r2, r3
 801051e:	d224      	bcs.n	801056a <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8010520:	4b61      	ldr	r3, [pc, #388]	; (80106a8 <_UG_PutChar+0x4c4>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010526:	461d      	mov	r5, r3
 8010528:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801052c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010530:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010532:	8a3b      	ldrh	r3, [r7, #16]
 8010534:	4413      	add	r3, r2
 8010536:	b29b      	uxth	r3, r3
 8010538:	3b01      	subs	r3, #1
 801053a:	b29b      	uxth	r3, r3
 801053c:	b21c      	sxth	r4, r3
 801053e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010540:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010544:	fb92 f3f3 	sdiv	r3, r2, r3
 8010548:	b29a      	uxth	r2, r3
 801054a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801054c:	4413      	add	r3, r2
 801054e:	b29b      	uxth	r3, r3
 8010550:	b21b      	sxth	r3, r3
 8010552:	4622      	mov	r2, r4
 8010554:	47a8      	blx	r5
 8010556:	4603      	mov	r3, r0
 8010558:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 801055a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801055c:	8839      	ldrh	r1, [r7, #0]
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	4610      	mov	r0, r2
 8010562:	4798      	blx	r3
               fpixels=0;
 8010564:	2300      	movs	r3, #0
 8010566:	847b      	strh	r3, [r7, #34]	; 0x22
 8010568:	e021      	b.n	80105ae <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 801056a:	4b4f      	ldr	r3, [pc, #316]	; (80106a8 <_UG_PutChar+0x4c4>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010570:	461c      	mov	r4, r3
 8010572:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8010576:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801057a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801057c:	8a3b      	ldrh	r3, [r7, #16]
 801057e:	4413      	add	r3, r2
 8010580:	b29b      	uxth	r3, r3
 8010582:	3b01      	subs	r3, #1
 8010584:	b29b      	uxth	r3, r3
 8010586:	b21a      	sxth	r2, r3
 8010588:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801058c:	47a0      	blx	r4
 801058e:	4603      	mov	r3, r0
 8010590:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8010592:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010594:	8839      	ldrh	r1, [r7, #0]
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	4610      	mov	r0, r2
 801059a:	4798      	blx	r3
               fpixels -= width;
 801059c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801059e:	8a3b      	ldrh	r3, [r7, #16]
 80105a0:	1ad3      	subs	r3, r2, r3
 80105a2:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 80105a4:	88bb      	ldrh	r3, [r7, #4]
 80105a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 80105a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80105aa:	3301      	adds	r3, #1
 80105ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 80105ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d1a5      	bne.n	8010500 <_UG_PutChar+0x31c>
 80105b4:	e071      	b.n	801069a <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 80105b6:	4b3c      	ldr	r3, [pc, #240]	; (80106a8 <_UG_PutChar+0x4c4>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80105be:	2b01      	cmp	r3, #1
 80105c0:	d16b      	bne.n	801069a <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80105c2:	2300      	movs	r3, #0
 80105c4:	853b      	strh	r3, [r7, #40]	; 0x28
 80105c6:	e060      	b.n	801068a <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 80105c8:	2300      	movs	r3, #0
 80105ca:	857b      	strh	r3, [r7, #42]	; 0x2a
 80105cc:	e04a      	b.n	8010664 <_UG_PutChar+0x480>
       {
         b = *data++;
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	1c5a      	adds	r2, r3, #1
 80105d2:	60ba      	str	r2, [r7, #8]
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80105d8:	883b      	ldrh	r3, [r7, #0]
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	7f7a      	ldrb	r2, [r7, #29]
 80105de:	fb03 f202 	mul.w	r2, r3, r2
 80105e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	7f79      	ldrb	r1, [r7, #29]
 80105ea:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80105ee:	fb01 f303 	mul.w	r3, r1, r3
 80105f2:	4413      	add	r3, r2
 80105f4:	121b      	asrs	r3, r3, #8
 80105f6:	b21b      	sxth	r3, r3
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80105fc:	883b      	ldrh	r3, [r7, #0]
 80105fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010602:	7f79      	ldrb	r1, [r7, #29]
 8010604:	fb03 f101 	mul.w	r1, r3, r1
 8010608:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801060c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010610:	7f78      	ldrb	r0, [r7, #29]
 8010612:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8010616:	fb00 f303 	mul.w	r3, r0, r3
 801061a:	440b      	add	r3, r1
 801061c:	121b      	asrs	r3, r3, #8
 801061e:	b21b      	sxth	r3, r3
 8010620:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010624:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8010626:	4313      	orrs	r3, r2
 8010628:	b21b      	sxth	r3, r3
 801062a:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 801062c:	7dbb      	ldrb	r3, [r7, #22]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d005      	beq.n	801063e <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8010632:	8a7a      	ldrh	r2, [r7, #18]
 8010634:	69bb      	ldr	r3, [r7, #24]
 8010636:	4611      	mov	r1, r2
 8010638:	2001      	movs	r0, #1
 801063a:	4798      	blx	r3
 801063c:	e00f      	b.n	801065e <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 801063e:	4b1a      	ldr	r3, [pc, #104]	; (80106a8 <_UG_PutChar+0x4c4>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	88b9      	ldrh	r1, [r7, #4]
 8010648:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801064a:	440a      	add	r2, r1
 801064c:	b292      	uxth	r2, r2
 801064e:	b210      	sxth	r0, r2
 8010650:	8879      	ldrh	r1, [r7, #2]
 8010652:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010654:	440a      	add	r2, r1
 8010656:	b292      	uxth	r2, r2
 8010658:	b211      	sxth	r1, r2
 801065a:	8a7a      	ldrh	r2, [r7, #18]
 801065c:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 801065e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010660:	3301      	adds	r3, #1
 8010662:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010664:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010666:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801066a:	429a      	cmp	r2, r3
 801066c:	dbaf      	blt.n	80105ce <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	4a0d      	ldr	r2, [pc, #52]	; (80106a8 <_UG_PutChar+0x4c4>)
 8010672:	6812      	ldr	r2, [r2, #0]
 8010674:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8010678:	4611      	mov	r1, r2
 801067a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801067e:	1a8a      	subs	r2, r1, r2
 8010680:	4413      	add	r3, r2
 8010682:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010684:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010686:	3301      	adds	r3, #1
 8010688:	853b      	strh	r3, [r7, #40]	; 0x28
 801068a:	4b07      	ldr	r3, [pc, #28]	; (80106a8 <_UG_PutChar+0x4c4>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010692:	b29b      	uxth	r3, r3
 8010694:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010696:	429a      	cmp	r2, r3
 8010698:	d396      	bcc.n	80105c8 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 801069a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3730      	adds	r7, #48	; 0x30
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bdb0      	pop	{r4, r5, r7, pc}
 80106a6:	bf00      	nop
 80106a8:	20002260 	.word	0x20002260

080106ac <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 80106ac:	b480      	push	{r7}
 80106ae:	b089      	sub	sp, #36	; 0x24
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 80106b4:	4b57      	ldr	r3, [pc, #348]	; (8010814 <_UG_ProcessTouchData+0x168>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	88db      	ldrh	r3, [r3, #6]
 80106ba:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 80106bc:	4b55      	ldr	r3, [pc, #340]	; (8010814 <_UG_ProcessTouchData+0x168>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	891b      	ldrh	r3, [r3, #8]
 80106c2:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 80106c4:	4b53      	ldr	r3, [pc, #332]	; (8010814 <_UG_ProcessTouchData+0x168>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	791b      	ldrb	r3, [r3, #4]
 80106ca:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80106d2:	2300      	movs	r3, #0
 80106d4:	83fb      	strh	r3, [r7, #30]
 80106d6:	e090      	b.n	80107fa <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	685a      	ldr	r2, [r3, #4]
 80106dc:	8bfb      	ldrh	r3, [r7, #30]
 80106de:	015b      	lsls	r3, r3, #5
 80106e0:	4413      	add	r3, r2
 80106e2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	785b      	ldrb	r3, [r3, #1]
 80106ee:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80106f0:	7bfb      	ldrb	r3, [r7, #15]
 80106f2:	f003 0301 	and.w	r3, r3, #1
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d179      	bne.n	80107ee <_UG_ProcessTouchData+0x142>
 80106fa:	7bfb      	ldrb	r3, [r7, #15]
 80106fc:	f003 0302 	and.w	r3, r3, #2
 8010700:	2b00      	cmp	r3, #0
 8010702:	d074      	beq.n	80107ee <_UG_ProcessTouchData+0x142>
 8010704:	7bfb      	ldrb	r3, [r7, #15]
 8010706:	f003 0308 	and.w	r3, r3, #8
 801070a:	2b00      	cmp	r3, #0
 801070c:	d06f      	beq.n	80107ee <_UG_ProcessTouchData+0x142>
 801070e:	7bfb      	ldrb	r3, [r7, #15]
 8010710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010714:	2b00      	cmp	r3, #0
 8010716:	d16a      	bne.n	80107ee <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8010718:	7dfb      	ldrb	r3, [r7, #23]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d047      	beq.n	80107ae <_UG_ProcessTouchData+0x102>
 801071e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010726:	d042      	beq.n	80107ae <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8010728:	7f7b      	ldrb	r3, [r7, #29]
 801072a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801072e:	2b00      	cmp	r3, #0
 8010730:	d107      	bne.n	8010742 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8010732:	7f7b      	ldrb	r3, [r7, #29]
 8010734:	f043 0305 	orr.w	r3, r3, #5
 8010738:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 801073a:	7f7b      	ldrb	r3, [r7, #29]
 801073c:	f023 0318 	bic.w	r3, r3, #24
 8010740:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010742:	7f7b      	ldrb	r3, [r7, #29]
 8010744:	f023 0320 	bic.w	r3, r3, #32
 8010748:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010750:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010754:	429a      	cmp	r2, r3
 8010756:	db25      	blt.n	80107a4 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801075e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010762:	429a      	cmp	r2, r3
 8010764:	dc1e      	bgt.n	80107a4 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801076c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010770:	429a      	cmp	r2, r3
 8010772:	db17      	blt.n	80107a4 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801077a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801077e:	429a      	cmp	r2, r3
 8010780:	dc10      	bgt.n	80107a4 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010782:	7f7b      	ldrb	r3, [r7, #29]
 8010784:	f043 0320 	orr.w	r3, r3, #32
 8010788:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 801078a:	7f7b      	ldrb	r3, [r7, #29]
 801078c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010790:	2b00      	cmp	r3, #0
 8010792:	d107      	bne.n	80107a4 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8010794:	7f7b      	ldrb	r3, [r7, #29]
 8010796:	f023 0304 	bic.w	r3, r3, #4
 801079a:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 801079c:	7f7b      	ldrb	r3, [r7, #29]
 801079e:	f043 0302 	orr.w	r3, r3, #2
 80107a2:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 80107a4:	7f7b      	ldrb	r3, [r7, #29]
 80107a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107aa:	777b      	strb	r3, [r7, #29]
 80107ac:	e01f      	b.n	80107ee <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80107ae:	7f7b      	ldrb	r3, [r7, #29]
 80107b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d01a      	beq.n	80107ee <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 80107b8:	7f7b      	ldrb	r3, [r7, #29]
 80107ba:	f003 0320 	and.w	r3, r3, #32
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d004      	beq.n	80107cc <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 80107c2:	7f7b      	ldrb	r3, [r7, #29]
 80107c4:	f043 0308 	orr.w	r3, r3, #8
 80107c8:	777b      	strb	r3, [r7, #29]
 80107ca:	e003      	b.n	80107d4 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 80107cc:	7f7b      	ldrb	r3, [r7, #29]
 80107ce:	f043 0310 	orr.w	r3, r3, #16
 80107d2:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80107d4:	7f7b      	ldrb	r3, [r7, #29]
 80107d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d003      	beq.n	80107e6 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 80107de:	7f7b      	ldrb	r3, [r7, #29]
 80107e0:	f043 0301 	orr.w	r3, r3, #1
 80107e4:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 80107e6:	7f7b      	ldrb	r3, [r7, #29]
 80107e8:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 80107ec:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	7f7a      	ldrb	r2, [r7, #29]
 80107f2:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 80107f4:	8bfb      	ldrh	r3, [r7, #30]
 80107f6:	3301      	adds	r3, #1
 80107f8:	83fb      	strh	r3, [r7, #30]
 80107fa:	8bfa      	ldrh	r2, [r7, #30]
 80107fc:	8abb      	ldrh	r3, [r7, #20]
 80107fe:	429a      	cmp	r2, r3
 8010800:	f4ff af6a 	bcc.w	80106d8 <_UG_ProcessTouchData+0x2c>
   }
}
 8010804:	bf00      	nop
 8010806:	bf00      	nop
 8010808:	3724      	adds	r7, #36	; 0x24
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr
 8010812:	bf00      	nop
 8010814:	20002260 	.word	0x20002260

08010818 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b086      	sub	sp, #24
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010826:	2300      	movs	r3, #0
 8010828:	82fb      	strh	r3, [r7, #22]
 801082a:	e035      	b.n	8010898 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	685a      	ldr	r2, [r3, #4]
 8010830:	8afb      	ldrh	r3, [r7, #22]
 8010832:	015b      	lsls	r3, r3, #5
 8010834:	4413      	add	r3, r2
 8010836:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	785b      	ldrb	r3, [r3, #1]
 8010842:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8010844:	7bfb      	ldrb	r3, [r7, #15]
 8010846:	f003 0301 	and.w	r3, r3, #1
 801084a:	2b00      	cmp	r3, #0
 801084c:	d121      	bne.n	8010892 <_UG_UpdateObjects+0x7a>
 801084e:	7bfb      	ldrb	r3, [r7, #15]
 8010850:	f003 0302 	and.w	r3, r3, #2
 8010854:	2b00      	cmp	r3, #0
 8010856:	d01c      	beq.n	8010892 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8010858:	7bfb      	ldrb	r3, [r7, #15]
 801085a:	f003 0320 	and.w	r3, r3, #32
 801085e:	2b00      	cmp	r3, #0
 8010860:	d004      	beq.n	801086c <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	6939      	ldr	r1, [r7, #16]
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 801086c:	7bfb      	ldrb	r3, [r7, #15]
 801086e:	f003 0308 	and.w	r3, r3, #8
 8010872:	2b00      	cmp	r3, #0
 8010874:	d00d      	beq.n	8010892 <_UG_UpdateObjects+0x7a>
 8010876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801087a:	2b00      	cmp	r3, #0
 801087c:	da09      	bge.n	8010892 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 801087e:	7bbb      	ldrb	r3, [r7, #14]
 8010880:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8010884:	2b00      	cmp	r3, #0
 8010886:	d004      	beq.n	8010892 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	6939      	ldr	r1, [r7, #16]
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8010892:	8afb      	ldrh	r3, [r7, #22]
 8010894:	3301      	adds	r3, #1
 8010896:	82fb      	strh	r3, [r7, #22]
 8010898:	8afa      	ldrh	r2, [r7, #22]
 801089a:	8abb      	ldrh	r3, [r7, #20]
 801089c:	429a      	cmp	r2, r3
 801089e:	d3c5      	bcc.n	801082c <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 80108a0:	bf00      	nop
 80108a2:	bf00      	nop
 80108a4:	3718      	adds	r7, #24
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
	...

080108ac <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b086      	sub	sp, #24
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 80108b4:	4b22      	ldr	r3, [pc, #136]	; (8010940 <_UG_HandleEvents+0x94>)
 80108b6:	2200      	movs	r2, #0
 80108b8:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 80108ba:	4b21      	ldr	r3, [pc, #132]	; (8010940 <_UG_HandleEvents+0x94>)
 80108bc:	2202      	movs	r2, #2
 80108be:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80108c6:	2300      	movs	r3, #0
 80108c8:	82fb      	strh	r3, [r7, #22]
 80108ca:	e02f      	b.n	801092c <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	685a      	ldr	r2, [r3, #4]
 80108d0:	8afb      	ldrh	r3, [r7, #22]
 80108d2:	015b      	lsls	r3, r3, #5
 80108d4:	4413      	add	r3, r2
 80108d6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80108de:	7bfb      	ldrb	r3, [r7, #15]
 80108e0:	f003 0301 	and.w	r3, r3, #1
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d11e      	bne.n	8010926 <_UG_HandleEvents+0x7a>
 80108e8:	7bfb      	ldrb	r3, [r7, #15]
 80108ea:	f003 0302 	and.w	r3, r3, #2
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d019      	beq.n	8010926 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	7e9b      	ldrb	r3, [r3, #26]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d015      	beq.n	8010926 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80108fa:	4a11      	ldr	r2, [pc, #68]	; (8010940 <_UG_HandleEvents+0x94>)
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	7e1a      	ldrb	r2, [r3, #24]
 8010904:	4b0e      	ldr	r3, [pc, #56]	; (8010940 <_UG_HandleEvents+0x94>)
 8010906:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	7e5a      	ldrb	r2, [r3, #25]
 801090c:	4b0c      	ldr	r3, [pc, #48]	; (8010940 <_UG_HandleEvents+0x94>)
 801090e:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	7e9a      	ldrb	r2, [r3, #26]
 8010914:	4b0a      	ldr	r3, [pc, #40]	; (8010940 <_UG_HandleEvents+0x94>)
 8010916:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801091c:	4808      	ldr	r0, [pc, #32]	; (8010940 <_UG_HandleEvents+0x94>)
 801091e:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	2200      	movs	r2, #0
 8010924:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8010926:	8afb      	ldrh	r3, [r7, #22]
 8010928:	3301      	adds	r3, #1
 801092a:	82fb      	strh	r3, [r7, #22]
 801092c:	8afa      	ldrh	r2, [r7, #22]
 801092e:	8abb      	ldrh	r3, [r7, #20]
 8010930:	429a      	cmp	r2, r3
 8010932:	d3cb      	bcc.n	80108cc <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8010934:	bf00      	nop
 8010936:	bf00      	nop
 8010938:	3718      	adds	r7, #24
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	20002274 	.word	0x20002274

08010944 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8010944:	b590      	push	{r4, r7, lr}
 8010946:	b08f      	sub	sp, #60	; 0x3c
 8010948:	af02      	add	r7, sp, #8
 801094a:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	2b00      	cmp	r3, #0
 8010952:	f000 812c 	beq.w	8010bae <_UG_PutText+0x26a>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	2b00      	cmp	r3, #0
 801095c:	f000 8127 	beq.w	8010bae <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	89db      	ldrh	r3, [r3, #14]
 8010964:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	895b      	ldrh	r3, [r3, #10]
 801096a:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	3302      	adds	r3, #2
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8010976:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801097a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801097e:	1ad2      	subs	r2, r2, r3
 8010980:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010984:	429a      	cmp	r2, r3
 8010986:	f2c0 8114 	blt.w	8010bb2 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	891b      	ldrh	r3, [r3, #8]
 801098e:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	899b      	ldrh	r3, [r3, #12]
 8010994:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	7d1b      	ldrb	r3, [r3, #20]
 801099a:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	8adb      	ldrh	r3, [r3, #22]
 80109a0:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	8b1b      	ldrh	r3, [r3, #24]
 80109a6:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	60fb      	str	r3, [r7, #12]
   char* c = str;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7ff fb92 	bl	80100e0 <_UG_FontSelect>

   rc=1;
 80109bc:	2301      	movs	r3, #1
 80109be:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80109c4:	4b80      	ldr	r3, [pc, #512]	; (8010bc8 <_UG_PutText+0x284>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d107      	bne.n	80109e0 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 80109d0:	f107 0308 	add.w	r3, r7, #8
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7ff f9bf 	bl	800fd58 <_UG_DecodeUTF8>
 80109da:	4603      	mov	r3, r0
 80109dc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80109de:	e004      	b.n	80109ea <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	1c5a      	adds	r2, r3, #1
 80109e4:	60ba      	str	r2, [r7, #8]
 80109e6:	781b      	ldrb	r3, [r3, #0]
 80109e8:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 80109ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d006      	beq.n	80109fe <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 80109f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109f2:	2b0a      	cmp	r3, #10
 80109f4:	d1e6      	bne.n	80109c4 <_UG_PutText+0x80>
 80109f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80109f8:	3301      	adds	r3, #1
 80109fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80109fc:	e7e2      	b.n	80109c4 <_UG_PutText+0x80>
     if(!chr) break;
 80109fe:	bf00      	nop
   }

   yp = 0;
 8010a00:	2300      	movs	r3, #0
 8010a02:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8010a04:	7e7b      	ldrb	r3, [r7, #25]
 8010a06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d01f      	beq.n	8010a4e <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8010a0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a10:	8c3b      	ldrh	r3, [r7, #32]
 8010a12:	1ad3      	subs	r3, r2, r3
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	3301      	adds	r3, #1
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8010a1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010a1e:	8bfb      	ldrh	r3, [r7, #30]
 8010a20:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8010a22:	fb11 f303 	smulbb	r3, r1, r3
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	1ad3      	subs	r3, r2, r3
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8010a2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010a30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010a32:	3b01      	subs	r3, #1
 8010a34:	b299      	uxth	r1, r3
 8010a36:	8abb      	ldrh	r3, [r7, #20]
 8010a38:	fb11 f303 	smulbb	r3, r1, r3
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	1ad3      	subs	r3, r2, r3
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8010a44:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	f2c0 80b4 	blt.w	8010bb6 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8010a4e:	7e7b      	ldrb	r3, [r7, #25]
 8010a50:	f003 0310 	and.w	r3, r3, #16
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d003      	beq.n	8010a60 <_UG_PutText+0x11c>
 8010a58:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010a5c:	105b      	asrs	r3, r3, #1
 8010a5e:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8010a60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010a62:	8c3b      	ldrh	r3, [r7, #32]
 8010a64:	4413      	add	r3, r2
 8010a66:	b29b      	uxth	r3, r3
 8010a68:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8010a72:	2300      	movs	r3, #0
 8010a74:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010a76:	4b54      	ldr	r3, [pc, #336]	; (8010bc8 <_UG_PutText+0x284>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d107      	bne.n	8010a92 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8010a82:	f107 0308 	add.w	r3, r7, #8
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7ff f966 	bl	800fd58 <_UG_DecodeUTF8>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010a90:	e004      	b.n	8010a9c <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	1c5a      	adds	r2, r3, #1
 8010a96:	60ba      	str	r2, [r7, #8]
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8010a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d01b      	beq.n	8010ada <_UG_PutText+0x196>
 8010aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010aa4:	2b0a      	cmp	r3, #10
 8010aa6:	d018      	beq.n	8010ada <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8010aa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010aaa:	2100      	movs	r1, #0
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7ff f9cb 	bl	800fe48 <_UG_GetCharData>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8010ab6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010abe:	d00a      	beq.n	8010ad6 <_UG_PutText+0x192>
         sl++;
 8010ac0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8010ac6:	8a7a      	ldrh	r2, [r7, #18]
 8010ac8:	8afb      	ldrh	r3, [r7, #22]
 8010aca:	4413      	add	r3, r2
 8010acc:	b29a      	uxth	r2, r3
 8010ace:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ad0:	4413      	add	r3, r2
 8010ad2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010ad4:	e7cf      	b.n	8010a76 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8010ad6:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010ad8:	e7cd      	b.n	8010a76 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8010ada:	8afb      	ldrh	r3, [r7, #22]
 8010adc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010ade:	1ad3      	subs	r3, r2, r3
 8010ae0:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8010ae2:	8b7a      	ldrh	r2, [r7, #26]
 8010ae4:	8bbb      	ldrh	r3, [r7, #28]
 8010ae6:	1ad3      	subs	r3, r2, r3
 8010ae8:	b29b      	uxth	r3, r3
 8010aea:	3301      	adds	r3, #1
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8010af0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010af2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010af4:	1ad3      	subs	r3, r2, r3
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8010afa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	db5b      	blt.n	8010bba <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8010b02:	7e7b      	ldrb	r3, [r7, #25]
 8010b04:	f003 0301 	and.w	r3, r3, #1
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d002      	beq.n	8010b12 <_UG_PutText+0x1ce>
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	853b      	strh	r3, [r7, #40]	; 0x28
 8010b10:	e008      	b.n	8010b24 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8010b12:	7e7b      	ldrb	r3, [r7, #25]
 8010b14:	f003 0302 	and.w	r3, r3, #2
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d003      	beq.n	8010b24 <_UG_PutText+0x1e0>
 8010b1c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010b20:	105b      	asrs	r3, r3, #1
 8010b22:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8010b24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010b26:	8bbb      	ldrh	r3, [r7, #28]
 8010b28:	4413      	add	r3, r2
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010b2e:	4b26      	ldr	r3, [pc, #152]	; (8010bc8 <_UG_PutText+0x284>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d107      	bne.n	8010b4a <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8010b3a:	f107 030c 	add.w	r3, r7, #12
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7ff f90a 	bl	800fd58 <_UG_DecodeUTF8>
 8010b44:	4603      	mov	r3, r0
 8010b46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010b48:	e004      	b.n	8010b54 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	1c5a      	adds	r2, r3, #1
 8010b4e:	60fa      	str	r2, [r7, #12]
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8010b54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d031      	beq.n	8010bbe <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8010b5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b5c:	2b0a      	cmp	r3, #10
 8010b5e:	d01c      	beq.n	8010b9a <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	8a1c      	ldrh	r4, [r3, #16]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	8a5b      	ldrh	r3, [r3, #18]
 8010b68:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8010b6c:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8010b70:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8010b72:	9300      	str	r3, [sp, #0]
 8010b74:	4623      	mov	r3, r4
 8010b76:	f7ff fb35 	bl	80101e4 <_UG_PutChar>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8010b7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b86:	d0d2      	beq.n	8010b2e <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8010b88:	8a7a      	ldrh	r2, [r7, #18]
 8010b8a:	8afb      	ldrh	r3, [r7, #22]
 8010b8c:	4413      	add	r3, r2
 8010b8e:	b29a      	uxth	r2, r3
 8010b90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010b92:	4413      	add	r3, r2
 8010b94:	b29b      	uxth	r3, r3
 8010b96:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010b98:	e7c9      	b.n	8010b2e <_UG_PutText+0x1ea>
           break;
 8010b9a:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8010b9c:	8bfa      	ldrh	r2, [r7, #30]
 8010b9e:	8abb      	ldrh	r3, [r7, #20]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	b29a      	uxth	r2, r3
 8010ba4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ba6:	4413      	add	r3, r2
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8010bac:	e75d      	b.n	8010a6a <_UG_PutText+0x126>
     return;
 8010bae:	bf00      	nop
 8010bb0:	e006      	b.n	8010bc0 <_UG_PutText+0x27c>
     return;
 8010bb2:	bf00      	nop
 8010bb4:	e004      	b.n	8010bc0 <_UG_PutText+0x27c>
        return;
 8010bb6:	bf00      	nop
 8010bb8:	e002      	b.n	8010bc0 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8010bba:	bf00      	nop
 8010bbc:	e000      	b.n	8010bc0 <_UG_PutText+0x27c>
           return;
 8010bbe:	bf00      	nop
   }
}
 8010bc0:	3734      	adds	r7, #52	; 0x34
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd90      	pop	{r4, r7, pc}
 8010bc6:	bf00      	nop
 8010bc8:	20002260 	.word	0x20002260

08010bcc <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8010bcc:	b5b0      	push	{r4, r5, r7, lr}
 8010bce:	b084      	sub	sp, #16
 8010bd0:	af02      	add	r7, sp, #8
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	4608      	mov	r0, r1
 8010bd6:	4611      	mov	r1, r2
 8010bd8:	461a      	mov	r2, r3
 8010bda:	4623      	mov	r3, r4
 8010bdc:	80fb      	strh	r3, [r7, #6]
 8010bde:	4603      	mov	r3, r0
 8010be0:	80bb      	strh	r3, [r7, #4]
 8010be2:	460b      	mov	r3, r1
 8010be4:	807b      	strh	r3, [r7, #2]
 8010be6:	4613      	mov	r3, r2
 8010be8:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8010bea:	887b      	ldrh	r3, [r7, #2]
 8010bec:	3b01      	subs	r3, #1
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	b21c      	sxth	r4, r3
 8010bf2:	69bb      	ldr	r3, [r7, #24]
 8010bf4:	1c9a      	adds	r2, r3, #2
 8010bf6:	61ba      	str	r2, [r7, #24]
 8010bf8:	881b      	ldrh	r3, [r3, #0]
 8010bfa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010bfe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8010c02:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010c06:	9300      	str	r3, [sp, #0]
 8010c08:	4613      	mov	r3, r2
 8010c0a:	4622      	mov	r2, r4
 8010c0c:	f7fe fee0 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8010c10:	88bb      	ldrh	r3, [r7, #4]
 8010c12:	3301      	adds	r3, #1
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	b219      	sxth	r1, r3
 8010c18:	883b      	ldrh	r3, [r7, #0]
 8010c1a:	3b01      	subs	r3, #1
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	b21c      	sxth	r4, r3
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	1c9a      	adds	r2, r3, #2
 8010c24:	61ba      	str	r2, [r7, #24]
 8010c26:	881b      	ldrh	r3, [r3, #0]
 8010c28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010c2c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010c30:	9300      	str	r3, [sp, #0]
 8010c32:	4623      	mov	r3, r4
 8010c34:	f7fe fecc 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8010c38:	69bb      	ldr	r3, [r7, #24]
 8010c3a:	1c9a      	adds	r2, r3, #2
 8010c3c:	61ba      	str	r2, [r7, #24]
 8010c3e:	881b      	ldrh	r3, [r3, #0]
 8010c40:	f9b7 4000 	ldrsh.w	r4, [r7]
 8010c44:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010c48:	f9b7 1000 	ldrsh.w	r1, [r7]
 8010c4c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010c50:	9300      	str	r3, [sp, #0]
 8010c52:	4623      	mov	r3, r4
 8010c54:	f7fe febc 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8010c58:	883b      	ldrh	r3, [r7, #0]
 8010c5a:	3b01      	subs	r3, #1
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	b21c      	sxth	r4, r3
 8010c60:	69bb      	ldr	r3, [r7, #24]
 8010c62:	1c9a      	adds	r2, r3, #2
 8010c64:	61ba      	str	r2, [r7, #24]
 8010c66:	881b      	ldrh	r3, [r3, #0]
 8010c68:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010c6c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8010c70:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8010c74:	9300      	str	r3, [sp, #0]
 8010c76:	4623      	mov	r3, r4
 8010c78:	f7fe feaa 	bl	800f9d0 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8010c7c:	88fb      	ldrh	r3, [r7, #6]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	b218      	sxth	r0, r3
 8010c84:	88bb      	ldrh	r3, [r7, #4]
 8010c86:	3301      	adds	r3, #1
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	b219      	sxth	r1, r3
 8010c8c:	887b      	ldrh	r3, [r7, #2]
 8010c8e:	3b02      	subs	r3, #2
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	b21c      	sxth	r4, r3
 8010c94:	88bb      	ldrh	r3, [r7, #4]
 8010c96:	3301      	adds	r3, #1
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	b21d      	sxth	r5, r3
 8010c9c:	69bb      	ldr	r3, [r7, #24]
 8010c9e:	1c9a      	adds	r2, r3, #2
 8010ca0:	61ba      	str	r2, [r7, #24]
 8010ca2:	881b      	ldrh	r3, [r3, #0]
 8010ca4:	9300      	str	r3, [sp, #0]
 8010ca6:	462b      	mov	r3, r5
 8010ca8:	4622      	mov	r2, r4
 8010caa:	f7fe fe91 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8010cae:	88fb      	ldrh	r3, [r7, #6]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	b218      	sxth	r0, r3
 8010cb6:	88bb      	ldrh	r3, [r7, #4]
 8010cb8:	3302      	adds	r3, #2
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	b219      	sxth	r1, r3
 8010cbe:	88fb      	ldrh	r3, [r7, #6]
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	b21c      	sxth	r4, r3
 8010cc6:	883b      	ldrh	r3, [r7, #0]
 8010cc8:	3b02      	subs	r3, #2
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	b21d      	sxth	r5, r3
 8010cce:	69bb      	ldr	r3, [r7, #24]
 8010cd0:	1c9a      	adds	r2, r3, #2
 8010cd2:	61ba      	str	r2, [r7, #24]
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	9300      	str	r3, [sp, #0]
 8010cd8:	462b      	mov	r3, r5
 8010cda:	4622      	mov	r2, r4
 8010cdc:	f7fe fe78 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8010ce0:	88fb      	ldrh	r3, [r7, #6]
 8010ce2:	3301      	adds	r3, #1
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	b218      	sxth	r0, r3
 8010ce8:	883b      	ldrh	r3, [r7, #0]
 8010cea:	3b01      	subs	r3, #1
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	b219      	sxth	r1, r3
 8010cf0:	887b      	ldrh	r3, [r7, #2]
 8010cf2:	3b01      	subs	r3, #1
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	b21c      	sxth	r4, r3
 8010cf8:	883b      	ldrh	r3, [r7, #0]
 8010cfa:	3b01      	subs	r3, #1
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	b21d      	sxth	r5, r3
 8010d00:	69bb      	ldr	r3, [r7, #24]
 8010d02:	1c9a      	adds	r2, r3, #2
 8010d04:	61ba      	str	r2, [r7, #24]
 8010d06:	881b      	ldrh	r3, [r3, #0]
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	462b      	mov	r3, r5
 8010d0c:	4622      	mov	r2, r4
 8010d0e:	f7fe fe5f 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8010d12:	887b      	ldrh	r3, [r7, #2]
 8010d14:	3b01      	subs	r3, #1
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	b218      	sxth	r0, r3
 8010d1a:	88bb      	ldrh	r3, [r7, #4]
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	b219      	sxth	r1, r3
 8010d22:	887b      	ldrh	r3, [r7, #2]
 8010d24:	3b01      	subs	r3, #1
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	b21c      	sxth	r4, r3
 8010d2a:	883b      	ldrh	r3, [r7, #0]
 8010d2c:	3b02      	subs	r3, #2
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	b21d      	sxth	r5, r3
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	1c9a      	adds	r2, r3, #2
 8010d36:	61ba      	str	r2, [r7, #24]
 8010d38:	881b      	ldrh	r3, [r3, #0]
 8010d3a:	9300      	str	r3, [sp, #0]
 8010d3c:	462b      	mov	r3, r5
 8010d3e:	4622      	mov	r2, r4
 8010d40:	f7fe fe46 	bl	800f9d0 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8010d44:	88fb      	ldrh	r3, [r7, #6]
 8010d46:	3302      	adds	r3, #2
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	b218      	sxth	r0, r3
 8010d4c:	88bb      	ldrh	r3, [r7, #4]
 8010d4e:	3302      	adds	r3, #2
 8010d50:	b29b      	uxth	r3, r3
 8010d52:	b219      	sxth	r1, r3
 8010d54:	887b      	ldrh	r3, [r7, #2]
 8010d56:	3b03      	subs	r3, #3
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	b21c      	sxth	r4, r3
 8010d5c:	88bb      	ldrh	r3, [r7, #4]
 8010d5e:	3302      	adds	r3, #2
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	b21d      	sxth	r5, r3
 8010d64:	69bb      	ldr	r3, [r7, #24]
 8010d66:	1c9a      	adds	r2, r3, #2
 8010d68:	61ba      	str	r2, [r7, #24]
 8010d6a:	881b      	ldrh	r3, [r3, #0]
 8010d6c:	9300      	str	r3, [sp, #0]
 8010d6e:	462b      	mov	r3, r5
 8010d70:	4622      	mov	r2, r4
 8010d72:	f7fe fe2d 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8010d76:	88fb      	ldrh	r3, [r7, #6]
 8010d78:	3302      	adds	r3, #2
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	b218      	sxth	r0, r3
 8010d7e:	88bb      	ldrh	r3, [r7, #4]
 8010d80:	3303      	adds	r3, #3
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	b219      	sxth	r1, r3
 8010d86:	88fb      	ldrh	r3, [r7, #6]
 8010d88:	3302      	adds	r3, #2
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	b21c      	sxth	r4, r3
 8010d8e:	883b      	ldrh	r3, [r7, #0]
 8010d90:	3b03      	subs	r3, #3
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	b21d      	sxth	r5, r3
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	1c9a      	adds	r2, r3, #2
 8010d9a:	61ba      	str	r2, [r7, #24]
 8010d9c:	881b      	ldrh	r3, [r3, #0]
 8010d9e:	9300      	str	r3, [sp, #0]
 8010da0:	462b      	mov	r3, r5
 8010da2:	4622      	mov	r2, r4
 8010da4:	f7fe fe14 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8010da8:	88fb      	ldrh	r3, [r7, #6]
 8010daa:	3302      	adds	r3, #2
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	b218      	sxth	r0, r3
 8010db0:	883b      	ldrh	r3, [r7, #0]
 8010db2:	3b02      	subs	r3, #2
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	b219      	sxth	r1, r3
 8010db8:	887b      	ldrh	r3, [r7, #2]
 8010dba:	3b02      	subs	r3, #2
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	b21c      	sxth	r4, r3
 8010dc0:	883b      	ldrh	r3, [r7, #0]
 8010dc2:	3b02      	subs	r3, #2
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	b21d      	sxth	r5, r3
 8010dc8:	69bb      	ldr	r3, [r7, #24]
 8010dca:	1c9a      	adds	r2, r3, #2
 8010dcc:	61ba      	str	r2, [r7, #24]
 8010dce:	881b      	ldrh	r3, [r3, #0]
 8010dd0:	9300      	str	r3, [sp, #0]
 8010dd2:	462b      	mov	r3, r5
 8010dd4:	4622      	mov	r2, r4
 8010dd6:	f7fe fdfb 	bl	800f9d0 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8010dda:	887b      	ldrh	r3, [r7, #2]
 8010ddc:	3b02      	subs	r3, #2
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	b218      	sxth	r0, r3
 8010de2:	88bb      	ldrh	r3, [r7, #4]
 8010de4:	3302      	adds	r3, #2
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	b219      	sxth	r1, r3
 8010dea:	887b      	ldrh	r3, [r7, #2]
 8010dec:	3b02      	subs	r3, #2
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	b21a      	sxth	r2, r3
 8010df2:	883b      	ldrh	r3, [r7, #0]
 8010df4:	3b03      	subs	r3, #3
 8010df6:	b29b      	uxth	r3, r3
 8010df8:	b21c      	sxth	r4, r3
 8010dfa:	69bb      	ldr	r3, [r7, #24]
 8010dfc:	881b      	ldrh	r3, [r3, #0]
 8010dfe:	9300      	str	r3, [sp, #0]
 8010e00:	4623      	mov	r3, r4
 8010e02:	f7fe fde5 	bl	800f9d0 <UG_DrawLine>
}
 8010e06:	bf00      	nop
 8010e08:	3708      	adds	r7, #8
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010e10 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8010e10:	b480      	push	{r7}
 8010e12:	b083      	sub	sp, #12
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	4603      	mov	r3, r0
 8010e18:	6039      	str	r1, [r7, #0]
 8010e1a:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8010e1c:	79fb      	ldrb	r3, [r7, #7]
 8010e1e:	2b03      	cmp	r3, #3
 8010e20:	d810      	bhi.n	8010e44 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8010e22:	4b0b      	ldr	r3, [pc, #44]	; (8010e50 <UG_DriverRegister+0x40>)
 8010e24:	681a      	ldr	r2, [r3, #0]
 8010e26:	79fb      	ldrb	r3, [r7, #7]
 8010e28:	330a      	adds	r3, #10
 8010e2a:	00db      	lsls	r3, r3, #3
 8010e2c:	4413      	add	r3, r2
 8010e2e:	683a      	ldr	r2, [r7, #0]
 8010e30:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8010e32:	4b07      	ldr	r3, [pc, #28]	; (8010e50 <UG_DriverRegister+0x40>)
 8010e34:	681a      	ldr	r2, [r3, #0]
 8010e36:	79fb      	ldrb	r3, [r7, #7]
 8010e38:	330a      	adds	r3, #10
 8010e3a:	00db      	lsls	r3, r3, #3
 8010e3c:	4413      	add	r3, r2
 8010e3e:	2203      	movs	r2, #3
 8010e40:	721a      	strb	r2, [r3, #8]
 8010e42:	e000      	b.n	8010e46 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8010e44:	bf00      	nop
}
 8010e46:	370c      	adds	r7, #12
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr
 8010e50:	20002260 	.word	0x20002260

08010e54 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8010e5a:	4b5e      	ldr	r3, [pc, #376]	; (8010fd4 <UG_Update+0x180>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010e62:	f003 0301 	and.w	r3, r3, #1
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d00a      	beq.n	8010e80 <UG_Update+0x2c>
 8010e6a:	4b5a      	ldr	r3, [pc, #360]	; (8010fd4 <UG_Update+0x180>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8010e72:	4b58      	ldr	r3, [pc, #352]	; (8010fd4 <UG_Update+0x180>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f022 0201 	bic.w	r2, r2, #1
 8010e7a:	b2d2      	uxtb	r2, r2
 8010e7c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8010e80:	4b54      	ldr	r3, [pc, #336]	; (8010fd4 <UG_Update+0x180>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	68da      	ldr	r2, [r3, #12]
 8010e86:	4b53      	ldr	r3, [pc, #332]	; (8010fd4 <UG_Update+0x180>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	691b      	ldr	r3, [r3, #16]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d071      	beq.n	8010f74 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8010e90:	4b50      	ldr	r3, [pc, #320]	; (8010fd4 <UG_Update+0x180>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	68db      	ldr	r3, [r3, #12]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d06c      	beq.n	8010f74 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8010e9a:	4b4e      	ldr	r3, [pc, #312]	; (8010fd4 <UG_Update+0x180>)
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	4b4d      	ldr	r3, [pc, #308]	; (8010fd4 <UG_Update+0x180>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	6912      	ldr	r2, [r2, #16]
 8010ea4:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8010ea6:	4b4b      	ldr	r3, [pc, #300]	; (8010fd4 <UG_Update+0x180>)
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	4b4a      	ldr	r3, [pc, #296]	; (8010fd4 <UG_Update+0x180>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	68d2      	ldr	r2, [r2, #12]
 8010eb0:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8010eb2:	4b48      	ldr	r3, [pc, #288]	; (8010fd4 <UG_Update+0x180>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	695b      	ldr	r3, [r3, #20]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d045      	beq.n	8010f48 <UG_Update+0xf4>
 8010ebc:	4b45      	ldr	r3, [pc, #276]	; (8010fd4 <UG_Update+0x180>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	695b      	ldr	r3, [r3, #20]
 8010ec2:	7d9b      	ldrb	r3, [r3, #22]
 8010ec4:	f003 0302 	and.w	r3, r3, #2
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d03d      	beq.n	8010f48 <UG_Update+0xf4>
 8010ecc:	4b41      	ldr	r3, [pc, #260]	; (8010fd4 <UG_Update+0x180>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	695b      	ldr	r3, [r3, #20]
 8010ed2:	7a1b      	ldrb	r3, [r3, #8]
 8010ed4:	f003 0308 	and.w	r3, r3, #8
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d035      	beq.n	8010f48 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8010edc:	4b3d      	ldr	r3, [pc, #244]	; (8010fd4 <UG_Update+0x180>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	695b      	ldr	r3, [r3, #20]
 8010ee2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8010ee6:	4b3b      	ldr	r3, [pc, #236]	; (8010fd4 <UG_Update+0x180>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	691b      	ldr	r3, [r3, #16]
 8010eec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d123      	bne.n	8010f3c <UG_Update+0xe8>
 8010ef4:	4b37      	ldr	r3, [pc, #220]	; (8010fd4 <UG_Update+0x180>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	695b      	ldr	r3, [r3, #20]
 8010efa:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010efe:	4b35      	ldr	r3, [pc, #212]	; (8010fd4 <UG_Update+0x180>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	691b      	ldr	r3, [r3, #16]
 8010f04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d117      	bne.n	8010f3c <UG_Update+0xe8>
 8010f0c:	4b31      	ldr	r3, [pc, #196]	; (8010fd4 <UG_Update+0x180>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	695b      	ldr	r3, [r3, #20]
 8010f12:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8010f16:	4b2f      	ldr	r3, [pc, #188]	; (8010fd4 <UG_Update+0x180>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	691b      	ldr	r3, [r3, #16]
 8010f1c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d10b      	bne.n	8010f3c <UG_Update+0xe8>
 8010f24:	4b2b      	ldr	r3, [pc, #172]	; (8010fd4 <UG_Update+0x180>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	695b      	ldr	r3, [r3, #20]
 8010f2a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8010f2e:	4b29      	ldr	r3, [pc, #164]	; (8010fd4 <UG_Update+0x180>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	691b      	ldr	r3, [r3, #16]
 8010f34:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d005      	beq.n	8010f48 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8010f3c:	4b25      	ldr	r3, [pc, #148]	; (8010fd4 <UG_Update+0x180>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	4618      	mov	r0, r3
 8010f44:	f000 f848 	bl	8010fd8 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8010f48:	4b22      	ldr	r3, [pc, #136]	; (8010fd4 <UG_Update+0x180>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	691b      	ldr	r3, [r3, #16]
 8010f4e:	7a1a      	ldrb	r2, [r3, #8]
 8010f50:	4b20      	ldr	r3, [pc, #128]	; (8010fd4 <UG_Update+0x180>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	691b      	ldr	r3, [r3, #16]
 8010f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f5a:	b2d2      	uxtb	r2, r2
 8010f5c:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8010f5e:	4b1d      	ldr	r3, [pc, #116]	; (8010fd4 <UG_Update+0x180>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	691b      	ldr	r3, [r3, #16]
 8010f64:	7a1a      	ldrb	r2, [r3, #8]
 8010f66:	4b1b      	ldr	r3, [pc, #108]	; (8010fd4 <UG_Update+0x180>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	691b      	ldr	r3, [r3, #16]
 8010f6c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8010f70:	b2d2      	uxtb	r2, r2
 8010f72:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8010f74:	4b17      	ldr	r3, [pc, #92]	; (8010fd4 <UG_Update+0x180>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d01b      	beq.n	8010fb6 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8010f7e:	4b15      	ldr	r3, [pc, #84]	; (8010fd4 <UG_Update+0x180>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	691b      	ldr	r3, [r3, #16]
 8010f84:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	7a1b      	ldrb	r3, [r3, #8]
 8010f8a:	f003 0320 	and.w	r3, r3, #32
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d002      	beq.n	8010f98 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 f8ca 	bl	801112c <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	7a1b      	ldrb	r3, [r3, #8]
 8010f9c:	f003 0308 	and.w	r3, r3, #8
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d008      	beq.n	8010fb6 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f7ff fb81 	bl	80106ac <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f7ff fc34 	bl	8010818 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f7ff fc7b 	bl	80108ac <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8010fb6:	4b07      	ldr	r3, [pc, #28]	; (8010fd4 <UG_Update+0x180>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	689b      	ldr	r3, [r3, #8]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d004      	beq.n	8010fcc <UG_Update+0x178>
     gui->device->flush();
 8010fc2:	4b04      	ldr	r3, [pc, #16]	; (8010fd4 <UG_Update+0x180>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	689b      	ldr	r3, [r3, #8]
 8010fca:	4798      	blx	r3
   }
}
 8010fcc:	bf00      	nop
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}
 8010fd4:	20002260 	.word	0x20002260

08010fd8 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8010fd8:	b590      	push	{r4, r7, lr}
 8010fda:	b08f      	sub	sp, #60	; 0x3c
 8010fdc:	af02      	add	r7, sp, #8
 8010fde:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	f000 809a 	beq.w	801111c <_UG_WindowDrawTitle+0x144>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	7a1b      	ldrb	r3, [r3, #8]
 8010fec:	f003 0302 	and.w	r3, r3, #2
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f000 8093 	beq.w	801111c <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	89db      	ldrh	r3, [r3, #14]
 8010ffa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	8a1b      	ldrh	r3, [r3, #16]
 8011000:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	8a5b      	ldrh	r3, [r3, #18]
 8011006:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	8a9b      	ldrh	r3, [r3, #20]
 801100c:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	7d9b      	ldrb	r3, [r3, #22]
 8011012:	f003 0301 	and.w	r3, r3, #1
 8011016:	2b00      	cmp	r3, #0
 8011018:	d00f      	beq.n	801103a <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 801101a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801101c:	3303      	adds	r3, #3
 801101e:	b29b      	uxth	r3, r3
 8011020:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8011022:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011024:	3303      	adds	r3, #3
 8011026:	b29b      	uxth	r3, r3
 8011028:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 801102a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801102c:	3b03      	subs	r3, #3
 801102e:	b29b      	uxth	r3, r3
 8011030:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8011032:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011034:	3b03      	subs	r3, #3
 8011036:	b29b      	uxth	r3, r3
 8011038:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 801103a:	4b3b      	ldr	r3, [pc, #236]	; (8011128 <_UG_WindowDrawTitle+0x150>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	691b      	ldr	r3, [r3, #16]
 8011040:	687a      	ldr	r2, [r7, #4]
 8011042:	429a      	cmp	r2, r3
 8011044:	d106      	bne.n	8011054 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801104a:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011050:	83bb      	strh	r3, [r7, #28]
 8011052:	e005      	b.n	8011060 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011058:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801105e:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011066:	b29a      	uxth	r2, r3
 8011068:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801106a:	4413      	add	r3, r2
 801106c:	b29b      	uxth	r3, r3
 801106e:	3b01      	subs	r3, #1
 8011070:	b29b      	uxth	r3, r3
 8011072:	b21c      	sxth	r4, r3
 8011074:	8bfb      	ldrh	r3, [r7, #30]
 8011076:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801107a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801107e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8011082:	9300      	str	r3, [sp, #0]
 8011084:	4623      	mov	r3, r4
 8011086:	f7fe fb03 	bl	800f690 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	699b      	ldr	r3, [r3, #24]
 801108e:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	69db      	ldr	r3, [r3, #28]
 8011094:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8011096:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011098:	3303      	adds	r3, #3
 801109a:	b29b      	uxth	r3, r3
 801109c:	b21b      	sxth	r3, r3
 801109e:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 80110a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80110a2:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 80110a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80110a6:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80110ae:	b29a      	uxth	r2, r3
 80110b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80110b2:	4413      	add	r3, r2
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	3b01      	subs	r3, #1
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	b21b      	sxth	r3, r3
 80110bc:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80110c4:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80110ce:	b21b      	sxth	r3, r3
 80110d0:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 80110d8:	b21b      	sxth	r3, r3
 80110da:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 80110dc:	f107 030c 	add.w	r3, r7, #12
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7ff fc2f 	bl	8010944 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80110ec:	b29a      	uxth	r2, r3
 80110ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80110f0:	4413      	add	r3, r2
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	b219      	sxth	r1, r3
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80110fc:	b29a      	uxth	r2, r3
 80110fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011100:	4413      	add	r3, r2
 8011102:	b29b      	uxth	r3, r3
 8011104:	b21b      	sxth	r3, r3
 8011106:	f649 5413 	movw	r4, #40211	; 0x9d13
 801110a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801110e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8011112:	9400      	str	r4, [sp, #0]
 8011114:	f7fe fc5c 	bl	800f9d0 <UG_DrawLine>
      return UG_RESULT_OK;
 8011118:	2300      	movs	r3, #0
 801111a:	e001      	b.n	8011120 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 801111c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011120:	4618      	mov	r0, r3
 8011122:	3734      	adds	r7, #52	; 0x34
 8011124:	46bd      	mov	sp, r7
 8011126:	bd90      	pop	{r4, r7, pc}
 8011128:	20002260 	.word	0x20002260

0801112c <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 801112c:	b590      	push	{r4, r7, lr}
 801112e:	b089      	sub	sp, #36	; 0x24
 8011130:	af02      	add	r7, sp, #8
 8011132:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	89db      	ldrh	r3, [r3, #14]
 8011138:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	8a1b      	ldrh	r3, [r3, #16]
 801113e:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	8a5b      	ldrh	r3, [r3, #18]
 8011144:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	8a9b      	ldrh	r3, [r3, #20]
 801114a:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	7a1b      	ldrb	r3, [r3, #8]
 8011150:	f023 0320 	bic.w	r3, r3, #32
 8011154:	b2da      	uxtb	r2, r3
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	7a1b      	ldrb	r3, [r3, #8]
 801115e:	f003 0308 	and.w	r3, r3, #8
 8011162:	2b00      	cmp	r3, #0
 8011164:	f000 8084 	beq.w	8011270 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	7d9b      	ldrb	r3, [r3, #22]
 801116c:	f003 0301 	and.w	r3, r3, #1
 8011170:	2b00      	cmp	r3, #0
 8011172:	d021      	beq.n	80111b8 <_UG_WindowUpdate+0x8c>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	7a1b      	ldrb	r3, [r3, #8]
 8011178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801117c:	2b00      	cmp	r3, #0
 801117e:	d11b      	bne.n	80111b8 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8011180:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011184:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011188:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 801118c:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8011190:	4c43      	ldr	r4, [pc, #268]	; (80112a0 <_UG_WindowUpdate+0x174>)
 8011192:	9400      	str	r4, [sp, #0]
 8011194:	f7ff fd1a 	bl	8010bcc <_UG_DrawObjectFrame>
         xs+=3;
 8011198:	8abb      	ldrh	r3, [r7, #20]
 801119a:	3303      	adds	r3, #3
 801119c:	b29b      	uxth	r3, r3
 801119e:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 80111a0:	8a7b      	ldrh	r3, [r7, #18]
 80111a2:	3303      	adds	r3, #3
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	827b      	strh	r3, [r7, #18]
         xe-=3;
 80111a8:	8a3b      	ldrh	r3, [r7, #16]
 80111aa:	3b03      	subs	r3, #3
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	823b      	strh	r3, [r7, #16]
         ye-=3;
 80111b0:	89fb      	ldrh	r3, [r7, #14]
 80111b2:	3b03      	subs	r3, #3
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	7d9b      	ldrb	r3, [r3, #22]
 80111bc:	f003 0302 	and.w	r3, r3, #2
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d01a      	beq.n	80111fa <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f7ff ff07 	bl	8010fd8 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	8a7b      	ldrh	r3, [r7, #18]
 80111d4:	4413      	add	r3, r2
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	3301      	adds	r3, #1
 80111da:	b29b      	uxth	r3, r3
 80111dc:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	7a1b      	ldrb	r3, [r3, #8]
 80111e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d007      	beq.n	80111fa <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	7a1b      	ldrb	r3, [r3, #8]
 80111ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111f2:	b2da      	uxtb	r2, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	721a      	strb	r2, [r3, #8]
            return;
 80111f8:	e04e      	b.n	8011298 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	899b      	ldrh	r3, [r3, #12]
 80111fe:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8011202:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011206:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 801120a:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 801120e:	9300      	str	r3, [sp, #0]
 8011210:	4623      	mov	r3, r4
 8011212:	f7fe fa3d 	bl	800f690 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 801121c:	2300      	movs	r3, #0
 801121e:	82fb      	strh	r3, [r7, #22]
 8011220:	e021      	b.n	8011266 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	685a      	ldr	r2, [r3, #4]
 8011226:	8afb      	ldrh	r3, [r7, #22]
 8011228:	015b      	lsls	r3, r3, #5
 801122a:	4413      	add	r3, r2
 801122c:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	f003 0301 	and.w	r3, r3, #1
 8011236:	2b00      	cmp	r3, #0
 8011238:	d112      	bne.n	8011260 <_UG_WindowUpdate+0x134>
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	f003 0302 	and.w	r3, r3, #2
 8011242:	2b00      	cmp	r3, #0
 8011244:	d00c      	beq.n	8011260 <_UG_WindowUpdate+0x134>
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	f003 0308 	and.w	r3, r3, #8
 801124e:	2b00      	cmp	r3, #0
 8011250:	d006      	beq.n	8011260 <_UG_WindowUpdate+0x134>
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801125a:	b2da      	uxtb	r2, r3
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8011260:	8afb      	ldrh	r3, [r7, #22]
 8011262:	3301      	adds	r3, #1
 8011264:	82fb      	strh	r3, [r7, #22]
 8011266:	8afa      	ldrh	r2, [r7, #22]
 8011268:	89bb      	ldrh	r3, [r7, #12]
 801126a:	429a      	cmp	r2, r3
 801126c:	d3d9      	bcc.n	8011222 <_UG_WindowUpdate+0xf6>
 801126e:	e013      	b.n	8011298 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8011288:	4b06      	ldr	r3, [pc, #24]	; (80112a4 <_UG_WindowUpdate+0x178>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011290:	9300      	str	r3, [sp, #0]
 8011292:	4623      	mov	r3, r4
 8011294:	f7fe f9fc 	bl	800f690 <UG_FillFrame>
   }
}
 8011298:	371c      	adds	r7, #28
 801129a:	46bd      	mov	sp, r7
 801129c:	bd90      	pop	{r4, r7, pc}
 801129e:	bf00      	nop
 80112a0:	08018710 	.word	0x08018710
 80112a4:	20002260 	.word	0x20002260

080112a8 <__cvt>:
 80112a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112ac:	ec55 4b10 	vmov	r4, r5, d0
 80112b0:	2d00      	cmp	r5, #0
 80112b2:	460e      	mov	r6, r1
 80112b4:	4619      	mov	r1, r3
 80112b6:	462b      	mov	r3, r5
 80112b8:	bfbb      	ittet	lt
 80112ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80112be:	461d      	movlt	r5, r3
 80112c0:	2300      	movge	r3, #0
 80112c2:	232d      	movlt	r3, #45	; 0x2d
 80112c4:	700b      	strb	r3, [r1, #0]
 80112c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80112cc:	4691      	mov	r9, r2
 80112ce:	f023 0820 	bic.w	r8, r3, #32
 80112d2:	bfbc      	itt	lt
 80112d4:	4622      	movlt	r2, r4
 80112d6:	4614      	movlt	r4, r2
 80112d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80112dc:	d005      	beq.n	80112ea <__cvt+0x42>
 80112de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80112e2:	d100      	bne.n	80112e6 <__cvt+0x3e>
 80112e4:	3601      	adds	r6, #1
 80112e6:	2102      	movs	r1, #2
 80112e8:	e000      	b.n	80112ec <__cvt+0x44>
 80112ea:	2103      	movs	r1, #3
 80112ec:	ab03      	add	r3, sp, #12
 80112ee:	9301      	str	r3, [sp, #4]
 80112f0:	ab02      	add	r3, sp, #8
 80112f2:	9300      	str	r3, [sp, #0]
 80112f4:	ec45 4b10 	vmov	d0, r4, r5
 80112f8:	4653      	mov	r3, sl
 80112fa:	4632      	mov	r2, r6
 80112fc:	f001 f88c 	bl	8012418 <_dtoa_r>
 8011300:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011304:	4607      	mov	r7, r0
 8011306:	d102      	bne.n	801130e <__cvt+0x66>
 8011308:	f019 0f01 	tst.w	r9, #1
 801130c:	d022      	beq.n	8011354 <__cvt+0xac>
 801130e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011312:	eb07 0906 	add.w	r9, r7, r6
 8011316:	d110      	bne.n	801133a <__cvt+0x92>
 8011318:	783b      	ldrb	r3, [r7, #0]
 801131a:	2b30      	cmp	r3, #48	; 0x30
 801131c:	d10a      	bne.n	8011334 <__cvt+0x8c>
 801131e:	2200      	movs	r2, #0
 8011320:	2300      	movs	r3, #0
 8011322:	4620      	mov	r0, r4
 8011324:	4629      	mov	r1, r5
 8011326:	f7ef fbf7 	bl	8000b18 <__aeabi_dcmpeq>
 801132a:	b918      	cbnz	r0, 8011334 <__cvt+0x8c>
 801132c:	f1c6 0601 	rsb	r6, r6, #1
 8011330:	f8ca 6000 	str.w	r6, [sl]
 8011334:	f8da 3000 	ldr.w	r3, [sl]
 8011338:	4499      	add	r9, r3
 801133a:	2200      	movs	r2, #0
 801133c:	2300      	movs	r3, #0
 801133e:	4620      	mov	r0, r4
 8011340:	4629      	mov	r1, r5
 8011342:	f7ef fbe9 	bl	8000b18 <__aeabi_dcmpeq>
 8011346:	b108      	cbz	r0, 801134c <__cvt+0xa4>
 8011348:	f8cd 900c 	str.w	r9, [sp, #12]
 801134c:	2230      	movs	r2, #48	; 0x30
 801134e:	9b03      	ldr	r3, [sp, #12]
 8011350:	454b      	cmp	r3, r9
 8011352:	d307      	bcc.n	8011364 <__cvt+0xbc>
 8011354:	9b03      	ldr	r3, [sp, #12]
 8011356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011358:	1bdb      	subs	r3, r3, r7
 801135a:	4638      	mov	r0, r7
 801135c:	6013      	str	r3, [r2, #0]
 801135e:	b004      	add	sp, #16
 8011360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011364:	1c59      	adds	r1, r3, #1
 8011366:	9103      	str	r1, [sp, #12]
 8011368:	701a      	strb	r2, [r3, #0]
 801136a:	e7f0      	b.n	801134e <__cvt+0xa6>

0801136c <__exponent>:
 801136c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801136e:	4603      	mov	r3, r0
 8011370:	2900      	cmp	r1, #0
 8011372:	bfb8      	it	lt
 8011374:	4249      	neglt	r1, r1
 8011376:	f803 2b02 	strb.w	r2, [r3], #2
 801137a:	bfb4      	ite	lt
 801137c:	222d      	movlt	r2, #45	; 0x2d
 801137e:	222b      	movge	r2, #43	; 0x2b
 8011380:	2909      	cmp	r1, #9
 8011382:	7042      	strb	r2, [r0, #1]
 8011384:	dd2a      	ble.n	80113dc <__exponent+0x70>
 8011386:	f10d 0207 	add.w	r2, sp, #7
 801138a:	4617      	mov	r7, r2
 801138c:	260a      	movs	r6, #10
 801138e:	4694      	mov	ip, r2
 8011390:	fb91 f5f6 	sdiv	r5, r1, r6
 8011394:	fb06 1415 	mls	r4, r6, r5, r1
 8011398:	3430      	adds	r4, #48	; 0x30
 801139a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801139e:	460c      	mov	r4, r1
 80113a0:	2c63      	cmp	r4, #99	; 0x63
 80113a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80113a6:	4629      	mov	r1, r5
 80113a8:	dcf1      	bgt.n	801138e <__exponent+0x22>
 80113aa:	3130      	adds	r1, #48	; 0x30
 80113ac:	f1ac 0402 	sub.w	r4, ip, #2
 80113b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80113b4:	1c41      	adds	r1, r0, #1
 80113b6:	4622      	mov	r2, r4
 80113b8:	42ba      	cmp	r2, r7
 80113ba:	d30a      	bcc.n	80113d2 <__exponent+0x66>
 80113bc:	f10d 0209 	add.w	r2, sp, #9
 80113c0:	eba2 020c 	sub.w	r2, r2, ip
 80113c4:	42bc      	cmp	r4, r7
 80113c6:	bf88      	it	hi
 80113c8:	2200      	movhi	r2, #0
 80113ca:	4413      	add	r3, r2
 80113cc:	1a18      	subs	r0, r3, r0
 80113ce:	b003      	add	sp, #12
 80113d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80113d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80113da:	e7ed      	b.n	80113b8 <__exponent+0x4c>
 80113dc:	2330      	movs	r3, #48	; 0x30
 80113de:	3130      	adds	r1, #48	; 0x30
 80113e0:	7083      	strb	r3, [r0, #2]
 80113e2:	70c1      	strb	r1, [r0, #3]
 80113e4:	1d03      	adds	r3, r0, #4
 80113e6:	e7f1      	b.n	80113cc <__exponent+0x60>

080113e8 <_printf_float>:
 80113e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ec:	ed2d 8b02 	vpush	{d8}
 80113f0:	b08d      	sub	sp, #52	; 0x34
 80113f2:	460c      	mov	r4, r1
 80113f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80113f8:	4616      	mov	r6, r2
 80113fa:	461f      	mov	r7, r3
 80113fc:	4605      	mov	r5, r0
 80113fe:	f000 fef7 	bl	80121f0 <_localeconv_r>
 8011402:	f8d0 a000 	ldr.w	sl, [r0]
 8011406:	4650      	mov	r0, sl
 8011408:	f7ee ff5a 	bl	80002c0 <strlen>
 801140c:	2300      	movs	r3, #0
 801140e:	930a      	str	r3, [sp, #40]	; 0x28
 8011410:	6823      	ldr	r3, [r4, #0]
 8011412:	9305      	str	r3, [sp, #20]
 8011414:	f8d8 3000 	ldr.w	r3, [r8]
 8011418:	f894 b018 	ldrb.w	fp, [r4, #24]
 801141c:	3307      	adds	r3, #7
 801141e:	f023 0307 	bic.w	r3, r3, #7
 8011422:	f103 0208 	add.w	r2, r3, #8
 8011426:	f8c8 2000 	str.w	r2, [r8]
 801142a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801142e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011432:	9307      	str	r3, [sp, #28]
 8011434:	f8cd 8018 	str.w	r8, [sp, #24]
 8011438:	ee08 0a10 	vmov	s16, r0
 801143c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011440:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011444:	4b9e      	ldr	r3, [pc, #632]	; (80116c0 <_printf_float+0x2d8>)
 8011446:	f04f 32ff 	mov.w	r2, #4294967295
 801144a:	f7ef fb97 	bl	8000b7c <__aeabi_dcmpun>
 801144e:	bb88      	cbnz	r0, 80114b4 <_printf_float+0xcc>
 8011450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011454:	4b9a      	ldr	r3, [pc, #616]	; (80116c0 <_printf_float+0x2d8>)
 8011456:	f04f 32ff 	mov.w	r2, #4294967295
 801145a:	f7ef fb71 	bl	8000b40 <__aeabi_dcmple>
 801145e:	bb48      	cbnz	r0, 80114b4 <_printf_float+0xcc>
 8011460:	2200      	movs	r2, #0
 8011462:	2300      	movs	r3, #0
 8011464:	4640      	mov	r0, r8
 8011466:	4649      	mov	r1, r9
 8011468:	f7ef fb60 	bl	8000b2c <__aeabi_dcmplt>
 801146c:	b110      	cbz	r0, 8011474 <_printf_float+0x8c>
 801146e:	232d      	movs	r3, #45	; 0x2d
 8011470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011474:	4a93      	ldr	r2, [pc, #588]	; (80116c4 <_printf_float+0x2dc>)
 8011476:	4b94      	ldr	r3, [pc, #592]	; (80116c8 <_printf_float+0x2e0>)
 8011478:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801147c:	bf94      	ite	ls
 801147e:	4690      	movls	r8, r2
 8011480:	4698      	movhi	r8, r3
 8011482:	2303      	movs	r3, #3
 8011484:	6123      	str	r3, [r4, #16]
 8011486:	9b05      	ldr	r3, [sp, #20]
 8011488:	f023 0304 	bic.w	r3, r3, #4
 801148c:	6023      	str	r3, [r4, #0]
 801148e:	f04f 0900 	mov.w	r9, #0
 8011492:	9700      	str	r7, [sp, #0]
 8011494:	4633      	mov	r3, r6
 8011496:	aa0b      	add	r2, sp, #44	; 0x2c
 8011498:	4621      	mov	r1, r4
 801149a:	4628      	mov	r0, r5
 801149c:	f000 f9da 	bl	8011854 <_printf_common>
 80114a0:	3001      	adds	r0, #1
 80114a2:	f040 8090 	bne.w	80115c6 <_printf_float+0x1de>
 80114a6:	f04f 30ff 	mov.w	r0, #4294967295
 80114aa:	b00d      	add	sp, #52	; 0x34
 80114ac:	ecbd 8b02 	vpop	{d8}
 80114b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b4:	4642      	mov	r2, r8
 80114b6:	464b      	mov	r3, r9
 80114b8:	4640      	mov	r0, r8
 80114ba:	4649      	mov	r1, r9
 80114bc:	f7ef fb5e 	bl	8000b7c <__aeabi_dcmpun>
 80114c0:	b140      	cbz	r0, 80114d4 <_printf_float+0xec>
 80114c2:	464b      	mov	r3, r9
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	bfbc      	itt	lt
 80114c8:	232d      	movlt	r3, #45	; 0x2d
 80114ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80114ce:	4a7f      	ldr	r2, [pc, #508]	; (80116cc <_printf_float+0x2e4>)
 80114d0:	4b7f      	ldr	r3, [pc, #508]	; (80116d0 <_printf_float+0x2e8>)
 80114d2:	e7d1      	b.n	8011478 <_printf_float+0x90>
 80114d4:	6863      	ldr	r3, [r4, #4]
 80114d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80114da:	9206      	str	r2, [sp, #24]
 80114dc:	1c5a      	adds	r2, r3, #1
 80114de:	d13f      	bne.n	8011560 <_printf_float+0x178>
 80114e0:	2306      	movs	r3, #6
 80114e2:	6063      	str	r3, [r4, #4]
 80114e4:	9b05      	ldr	r3, [sp, #20]
 80114e6:	6861      	ldr	r1, [r4, #4]
 80114e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80114ec:	2300      	movs	r3, #0
 80114ee:	9303      	str	r3, [sp, #12]
 80114f0:	ab0a      	add	r3, sp, #40	; 0x28
 80114f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80114f6:	ab09      	add	r3, sp, #36	; 0x24
 80114f8:	ec49 8b10 	vmov	d0, r8, r9
 80114fc:	9300      	str	r3, [sp, #0]
 80114fe:	6022      	str	r2, [r4, #0]
 8011500:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011504:	4628      	mov	r0, r5
 8011506:	f7ff fecf 	bl	80112a8 <__cvt>
 801150a:	9b06      	ldr	r3, [sp, #24]
 801150c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801150e:	2b47      	cmp	r3, #71	; 0x47
 8011510:	4680      	mov	r8, r0
 8011512:	d108      	bne.n	8011526 <_printf_float+0x13e>
 8011514:	1cc8      	adds	r0, r1, #3
 8011516:	db02      	blt.n	801151e <_printf_float+0x136>
 8011518:	6863      	ldr	r3, [r4, #4]
 801151a:	4299      	cmp	r1, r3
 801151c:	dd41      	ble.n	80115a2 <_printf_float+0x1ba>
 801151e:	f1ab 0302 	sub.w	r3, fp, #2
 8011522:	fa5f fb83 	uxtb.w	fp, r3
 8011526:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801152a:	d820      	bhi.n	801156e <_printf_float+0x186>
 801152c:	3901      	subs	r1, #1
 801152e:	465a      	mov	r2, fp
 8011530:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011534:	9109      	str	r1, [sp, #36]	; 0x24
 8011536:	f7ff ff19 	bl	801136c <__exponent>
 801153a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801153c:	1813      	adds	r3, r2, r0
 801153e:	2a01      	cmp	r2, #1
 8011540:	4681      	mov	r9, r0
 8011542:	6123      	str	r3, [r4, #16]
 8011544:	dc02      	bgt.n	801154c <_printf_float+0x164>
 8011546:	6822      	ldr	r2, [r4, #0]
 8011548:	07d2      	lsls	r2, r2, #31
 801154a:	d501      	bpl.n	8011550 <_printf_float+0x168>
 801154c:	3301      	adds	r3, #1
 801154e:	6123      	str	r3, [r4, #16]
 8011550:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011554:	2b00      	cmp	r3, #0
 8011556:	d09c      	beq.n	8011492 <_printf_float+0xaa>
 8011558:	232d      	movs	r3, #45	; 0x2d
 801155a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801155e:	e798      	b.n	8011492 <_printf_float+0xaa>
 8011560:	9a06      	ldr	r2, [sp, #24]
 8011562:	2a47      	cmp	r2, #71	; 0x47
 8011564:	d1be      	bne.n	80114e4 <_printf_float+0xfc>
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1bc      	bne.n	80114e4 <_printf_float+0xfc>
 801156a:	2301      	movs	r3, #1
 801156c:	e7b9      	b.n	80114e2 <_printf_float+0xfa>
 801156e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011572:	d118      	bne.n	80115a6 <_printf_float+0x1be>
 8011574:	2900      	cmp	r1, #0
 8011576:	6863      	ldr	r3, [r4, #4]
 8011578:	dd0b      	ble.n	8011592 <_printf_float+0x1aa>
 801157a:	6121      	str	r1, [r4, #16]
 801157c:	b913      	cbnz	r3, 8011584 <_printf_float+0x19c>
 801157e:	6822      	ldr	r2, [r4, #0]
 8011580:	07d0      	lsls	r0, r2, #31
 8011582:	d502      	bpl.n	801158a <_printf_float+0x1a2>
 8011584:	3301      	adds	r3, #1
 8011586:	440b      	add	r3, r1
 8011588:	6123      	str	r3, [r4, #16]
 801158a:	65a1      	str	r1, [r4, #88]	; 0x58
 801158c:	f04f 0900 	mov.w	r9, #0
 8011590:	e7de      	b.n	8011550 <_printf_float+0x168>
 8011592:	b913      	cbnz	r3, 801159a <_printf_float+0x1b2>
 8011594:	6822      	ldr	r2, [r4, #0]
 8011596:	07d2      	lsls	r2, r2, #31
 8011598:	d501      	bpl.n	801159e <_printf_float+0x1b6>
 801159a:	3302      	adds	r3, #2
 801159c:	e7f4      	b.n	8011588 <_printf_float+0x1a0>
 801159e:	2301      	movs	r3, #1
 80115a0:	e7f2      	b.n	8011588 <_printf_float+0x1a0>
 80115a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80115a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115a8:	4299      	cmp	r1, r3
 80115aa:	db05      	blt.n	80115b8 <_printf_float+0x1d0>
 80115ac:	6823      	ldr	r3, [r4, #0]
 80115ae:	6121      	str	r1, [r4, #16]
 80115b0:	07d8      	lsls	r0, r3, #31
 80115b2:	d5ea      	bpl.n	801158a <_printf_float+0x1a2>
 80115b4:	1c4b      	adds	r3, r1, #1
 80115b6:	e7e7      	b.n	8011588 <_printf_float+0x1a0>
 80115b8:	2900      	cmp	r1, #0
 80115ba:	bfd4      	ite	le
 80115bc:	f1c1 0202 	rsble	r2, r1, #2
 80115c0:	2201      	movgt	r2, #1
 80115c2:	4413      	add	r3, r2
 80115c4:	e7e0      	b.n	8011588 <_printf_float+0x1a0>
 80115c6:	6823      	ldr	r3, [r4, #0]
 80115c8:	055a      	lsls	r2, r3, #21
 80115ca:	d407      	bmi.n	80115dc <_printf_float+0x1f4>
 80115cc:	6923      	ldr	r3, [r4, #16]
 80115ce:	4642      	mov	r2, r8
 80115d0:	4631      	mov	r1, r6
 80115d2:	4628      	mov	r0, r5
 80115d4:	47b8      	blx	r7
 80115d6:	3001      	adds	r0, #1
 80115d8:	d12c      	bne.n	8011634 <_printf_float+0x24c>
 80115da:	e764      	b.n	80114a6 <_printf_float+0xbe>
 80115dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80115e0:	f240 80e0 	bls.w	80117a4 <_printf_float+0x3bc>
 80115e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80115e8:	2200      	movs	r2, #0
 80115ea:	2300      	movs	r3, #0
 80115ec:	f7ef fa94 	bl	8000b18 <__aeabi_dcmpeq>
 80115f0:	2800      	cmp	r0, #0
 80115f2:	d034      	beq.n	801165e <_printf_float+0x276>
 80115f4:	4a37      	ldr	r2, [pc, #220]	; (80116d4 <_printf_float+0x2ec>)
 80115f6:	2301      	movs	r3, #1
 80115f8:	4631      	mov	r1, r6
 80115fa:	4628      	mov	r0, r5
 80115fc:	47b8      	blx	r7
 80115fe:	3001      	adds	r0, #1
 8011600:	f43f af51 	beq.w	80114a6 <_printf_float+0xbe>
 8011604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011608:	429a      	cmp	r2, r3
 801160a:	db02      	blt.n	8011612 <_printf_float+0x22a>
 801160c:	6823      	ldr	r3, [r4, #0]
 801160e:	07d8      	lsls	r0, r3, #31
 8011610:	d510      	bpl.n	8011634 <_printf_float+0x24c>
 8011612:	ee18 3a10 	vmov	r3, s16
 8011616:	4652      	mov	r2, sl
 8011618:	4631      	mov	r1, r6
 801161a:	4628      	mov	r0, r5
 801161c:	47b8      	blx	r7
 801161e:	3001      	adds	r0, #1
 8011620:	f43f af41 	beq.w	80114a6 <_printf_float+0xbe>
 8011624:	f04f 0800 	mov.w	r8, #0
 8011628:	f104 091a 	add.w	r9, r4, #26
 801162c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801162e:	3b01      	subs	r3, #1
 8011630:	4543      	cmp	r3, r8
 8011632:	dc09      	bgt.n	8011648 <_printf_float+0x260>
 8011634:	6823      	ldr	r3, [r4, #0]
 8011636:	079b      	lsls	r3, r3, #30
 8011638:	f100 8107 	bmi.w	801184a <_printf_float+0x462>
 801163c:	68e0      	ldr	r0, [r4, #12]
 801163e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011640:	4298      	cmp	r0, r3
 8011642:	bfb8      	it	lt
 8011644:	4618      	movlt	r0, r3
 8011646:	e730      	b.n	80114aa <_printf_float+0xc2>
 8011648:	2301      	movs	r3, #1
 801164a:	464a      	mov	r2, r9
 801164c:	4631      	mov	r1, r6
 801164e:	4628      	mov	r0, r5
 8011650:	47b8      	blx	r7
 8011652:	3001      	adds	r0, #1
 8011654:	f43f af27 	beq.w	80114a6 <_printf_float+0xbe>
 8011658:	f108 0801 	add.w	r8, r8, #1
 801165c:	e7e6      	b.n	801162c <_printf_float+0x244>
 801165e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011660:	2b00      	cmp	r3, #0
 8011662:	dc39      	bgt.n	80116d8 <_printf_float+0x2f0>
 8011664:	4a1b      	ldr	r2, [pc, #108]	; (80116d4 <_printf_float+0x2ec>)
 8011666:	2301      	movs	r3, #1
 8011668:	4631      	mov	r1, r6
 801166a:	4628      	mov	r0, r5
 801166c:	47b8      	blx	r7
 801166e:	3001      	adds	r0, #1
 8011670:	f43f af19 	beq.w	80114a6 <_printf_float+0xbe>
 8011674:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011678:	4313      	orrs	r3, r2
 801167a:	d102      	bne.n	8011682 <_printf_float+0x29a>
 801167c:	6823      	ldr	r3, [r4, #0]
 801167e:	07d9      	lsls	r1, r3, #31
 8011680:	d5d8      	bpl.n	8011634 <_printf_float+0x24c>
 8011682:	ee18 3a10 	vmov	r3, s16
 8011686:	4652      	mov	r2, sl
 8011688:	4631      	mov	r1, r6
 801168a:	4628      	mov	r0, r5
 801168c:	47b8      	blx	r7
 801168e:	3001      	adds	r0, #1
 8011690:	f43f af09 	beq.w	80114a6 <_printf_float+0xbe>
 8011694:	f04f 0900 	mov.w	r9, #0
 8011698:	f104 0a1a 	add.w	sl, r4, #26
 801169c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801169e:	425b      	negs	r3, r3
 80116a0:	454b      	cmp	r3, r9
 80116a2:	dc01      	bgt.n	80116a8 <_printf_float+0x2c0>
 80116a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116a6:	e792      	b.n	80115ce <_printf_float+0x1e6>
 80116a8:	2301      	movs	r3, #1
 80116aa:	4652      	mov	r2, sl
 80116ac:	4631      	mov	r1, r6
 80116ae:	4628      	mov	r0, r5
 80116b0:	47b8      	blx	r7
 80116b2:	3001      	adds	r0, #1
 80116b4:	f43f aef7 	beq.w	80114a6 <_printf_float+0xbe>
 80116b8:	f109 0901 	add.w	r9, r9, #1
 80116bc:	e7ee      	b.n	801169c <_printf_float+0x2b4>
 80116be:	bf00      	nop
 80116c0:	7fefffff 	.word	0x7fefffff
 80116c4:	08018728 	.word	0x08018728
 80116c8:	0801872c 	.word	0x0801872c
 80116cc:	08018730 	.word	0x08018730
 80116d0:	08018734 	.word	0x08018734
 80116d4:	08018738 	.word	0x08018738
 80116d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80116dc:	429a      	cmp	r2, r3
 80116de:	bfa8      	it	ge
 80116e0:	461a      	movge	r2, r3
 80116e2:	2a00      	cmp	r2, #0
 80116e4:	4691      	mov	r9, r2
 80116e6:	dc37      	bgt.n	8011758 <_printf_float+0x370>
 80116e8:	f04f 0b00 	mov.w	fp, #0
 80116ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80116f0:	f104 021a 	add.w	r2, r4, #26
 80116f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80116f6:	9305      	str	r3, [sp, #20]
 80116f8:	eba3 0309 	sub.w	r3, r3, r9
 80116fc:	455b      	cmp	r3, fp
 80116fe:	dc33      	bgt.n	8011768 <_printf_float+0x380>
 8011700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011704:	429a      	cmp	r2, r3
 8011706:	db3b      	blt.n	8011780 <_printf_float+0x398>
 8011708:	6823      	ldr	r3, [r4, #0]
 801170a:	07da      	lsls	r2, r3, #31
 801170c:	d438      	bmi.n	8011780 <_printf_float+0x398>
 801170e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011712:	eba2 0903 	sub.w	r9, r2, r3
 8011716:	9b05      	ldr	r3, [sp, #20]
 8011718:	1ad2      	subs	r2, r2, r3
 801171a:	4591      	cmp	r9, r2
 801171c:	bfa8      	it	ge
 801171e:	4691      	movge	r9, r2
 8011720:	f1b9 0f00 	cmp.w	r9, #0
 8011724:	dc35      	bgt.n	8011792 <_printf_float+0x3aa>
 8011726:	f04f 0800 	mov.w	r8, #0
 801172a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801172e:	f104 0a1a 	add.w	sl, r4, #26
 8011732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011736:	1a9b      	subs	r3, r3, r2
 8011738:	eba3 0309 	sub.w	r3, r3, r9
 801173c:	4543      	cmp	r3, r8
 801173e:	f77f af79 	ble.w	8011634 <_printf_float+0x24c>
 8011742:	2301      	movs	r3, #1
 8011744:	4652      	mov	r2, sl
 8011746:	4631      	mov	r1, r6
 8011748:	4628      	mov	r0, r5
 801174a:	47b8      	blx	r7
 801174c:	3001      	adds	r0, #1
 801174e:	f43f aeaa 	beq.w	80114a6 <_printf_float+0xbe>
 8011752:	f108 0801 	add.w	r8, r8, #1
 8011756:	e7ec      	b.n	8011732 <_printf_float+0x34a>
 8011758:	4613      	mov	r3, r2
 801175a:	4631      	mov	r1, r6
 801175c:	4642      	mov	r2, r8
 801175e:	4628      	mov	r0, r5
 8011760:	47b8      	blx	r7
 8011762:	3001      	adds	r0, #1
 8011764:	d1c0      	bne.n	80116e8 <_printf_float+0x300>
 8011766:	e69e      	b.n	80114a6 <_printf_float+0xbe>
 8011768:	2301      	movs	r3, #1
 801176a:	4631      	mov	r1, r6
 801176c:	4628      	mov	r0, r5
 801176e:	9205      	str	r2, [sp, #20]
 8011770:	47b8      	blx	r7
 8011772:	3001      	adds	r0, #1
 8011774:	f43f ae97 	beq.w	80114a6 <_printf_float+0xbe>
 8011778:	9a05      	ldr	r2, [sp, #20]
 801177a:	f10b 0b01 	add.w	fp, fp, #1
 801177e:	e7b9      	b.n	80116f4 <_printf_float+0x30c>
 8011780:	ee18 3a10 	vmov	r3, s16
 8011784:	4652      	mov	r2, sl
 8011786:	4631      	mov	r1, r6
 8011788:	4628      	mov	r0, r5
 801178a:	47b8      	blx	r7
 801178c:	3001      	adds	r0, #1
 801178e:	d1be      	bne.n	801170e <_printf_float+0x326>
 8011790:	e689      	b.n	80114a6 <_printf_float+0xbe>
 8011792:	9a05      	ldr	r2, [sp, #20]
 8011794:	464b      	mov	r3, r9
 8011796:	4442      	add	r2, r8
 8011798:	4631      	mov	r1, r6
 801179a:	4628      	mov	r0, r5
 801179c:	47b8      	blx	r7
 801179e:	3001      	adds	r0, #1
 80117a0:	d1c1      	bne.n	8011726 <_printf_float+0x33e>
 80117a2:	e680      	b.n	80114a6 <_printf_float+0xbe>
 80117a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117a6:	2a01      	cmp	r2, #1
 80117a8:	dc01      	bgt.n	80117ae <_printf_float+0x3c6>
 80117aa:	07db      	lsls	r3, r3, #31
 80117ac:	d53a      	bpl.n	8011824 <_printf_float+0x43c>
 80117ae:	2301      	movs	r3, #1
 80117b0:	4642      	mov	r2, r8
 80117b2:	4631      	mov	r1, r6
 80117b4:	4628      	mov	r0, r5
 80117b6:	47b8      	blx	r7
 80117b8:	3001      	adds	r0, #1
 80117ba:	f43f ae74 	beq.w	80114a6 <_printf_float+0xbe>
 80117be:	ee18 3a10 	vmov	r3, s16
 80117c2:	4652      	mov	r2, sl
 80117c4:	4631      	mov	r1, r6
 80117c6:	4628      	mov	r0, r5
 80117c8:	47b8      	blx	r7
 80117ca:	3001      	adds	r0, #1
 80117cc:	f43f ae6b 	beq.w	80114a6 <_printf_float+0xbe>
 80117d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80117d4:	2200      	movs	r2, #0
 80117d6:	2300      	movs	r3, #0
 80117d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80117dc:	f7ef f99c 	bl	8000b18 <__aeabi_dcmpeq>
 80117e0:	b9d8      	cbnz	r0, 801181a <_printf_float+0x432>
 80117e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80117e6:	f108 0201 	add.w	r2, r8, #1
 80117ea:	4631      	mov	r1, r6
 80117ec:	4628      	mov	r0, r5
 80117ee:	47b8      	blx	r7
 80117f0:	3001      	adds	r0, #1
 80117f2:	d10e      	bne.n	8011812 <_printf_float+0x42a>
 80117f4:	e657      	b.n	80114a6 <_printf_float+0xbe>
 80117f6:	2301      	movs	r3, #1
 80117f8:	4652      	mov	r2, sl
 80117fa:	4631      	mov	r1, r6
 80117fc:	4628      	mov	r0, r5
 80117fe:	47b8      	blx	r7
 8011800:	3001      	adds	r0, #1
 8011802:	f43f ae50 	beq.w	80114a6 <_printf_float+0xbe>
 8011806:	f108 0801 	add.w	r8, r8, #1
 801180a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801180c:	3b01      	subs	r3, #1
 801180e:	4543      	cmp	r3, r8
 8011810:	dcf1      	bgt.n	80117f6 <_printf_float+0x40e>
 8011812:	464b      	mov	r3, r9
 8011814:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011818:	e6da      	b.n	80115d0 <_printf_float+0x1e8>
 801181a:	f04f 0800 	mov.w	r8, #0
 801181e:	f104 0a1a 	add.w	sl, r4, #26
 8011822:	e7f2      	b.n	801180a <_printf_float+0x422>
 8011824:	2301      	movs	r3, #1
 8011826:	4642      	mov	r2, r8
 8011828:	e7df      	b.n	80117ea <_printf_float+0x402>
 801182a:	2301      	movs	r3, #1
 801182c:	464a      	mov	r2, r9
 801182e:	4631      	mov	r1, r6
 8011830:	4628      	mov	r0, r5
 8011832:	47b8      	blx	r7
 8011834:	3001      	adds	r0, #1
 8011836:	f43f ae36 	beq.w	80114a6 <_printf_float+0xbe>
 801183a:	f108 0801 	add.w	r8, r8, #1
 801183e:	68e3      	ldr	r3, [r4, #12]
 8011840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011842:	1a5b      	subs	r3, r3, r1
 8011844:	4543      	cmp	r3, r8
 8011846:	dcf0      	bgt.n	801182a <_printf_float+0x442>
 8011848:	e6f8      	b.n	801163c <_printf_float+0x254>
 801184a:	f04f 0800 	mov.w	r8, #0
 801184e:	f104 0919 	add.w	r9, r4, #25
 8011852:	e7f4      	b.n	801183e <_printf_float+0x456>

08011854 <_printf_common>:
 8011854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011858:	4616      	mov	r6, r2
 801185a:	4699      	mov	r9, r3
 801185c:	688a      	ldr	r2, [r1, #8]
 801185e:	690b      	ldr	r3, [r1, #16]
 8011860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011864:	4293      	cmp	r3, r2
 8011866:	bfb8      	it	lt
 8011868:	4613      	movlt	r3, r2
 801186a:	6033      	str	r3, [r6, #0]
 801186c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011870:	4607      	mov	r7, r0
 8011872:	460c      	mov	r4, r1
 8011874:	b10a      	cbz	r2, 801187a <_printf_common+0x26>
 8011876:	3301      	adds	r3, #1
 8011878:	6033      	str	r3, [r6, #0]
 801187a:	6823      	ldr	r3, [r4, #0]
 801187c:	0699      	lsls	r1, r3, #26
 801187e:	bf42      	ittt	mi
 8011880:	6833      	ldrmi	r3, [r6, #0]
 8011882:	3302      	addmi	r3, #2
 8011884:	6033      	strmi	r3, [r6, #0]
 8011886:	6825      	ldr	r5, [r4, #0]
 8011888:	f015 0506 	ands.w	r5, r5, #6
 801188c:	d106      	bne.n	801189c <_printf_common+0x48>
 801188e:	f104 0a19 	add.w	sl, r4, #25
 8011892:	68e3      	ldr	r3, [r4, #12]
 8011894:	6832      	ldr	r2, [r6, #0]
 8011896:	1a9b      	subs	r3, r3, r2
 8011898:	42ab      	cmp	r3, r5
 801189a:	dc26      	bgt.n	80118ea <_printf_common+0x96>
 801189c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80118a0:	1e13      	subs	r3, r2, #0
 80118a2:	6822      	ldr	r2, [r4, #0]
 80118a4:	bf18      	it	ne
 80118a6:	2301      	movne	r3, #1
 80118a8:	0692      	lsls	r2, r2, #26
 80118aa:	d42b      	bmi.n	8011904 <_printf_common+0xb0>
 80118ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80118b0:	4649      	mov	r1, r9
 80118b2:	4638      	mov	r0, r7
 80118b4:	47c0      	blx	r8
 80118b6:	3001      	adds	r0, #1
 80118b8:	d01e      	beq.n	80118f8 <_printf_common+0xa4>
 80118ba:	6823      	ldr	r3, [r4, #0]
 80118bc:	6922      	ldr	r2, [r4, #16]
 80118be:	f003 0306 	and.w	r3, r3, #6
 80118c2:	2b04      	cmp	r3, #4
 80118c4:	bf02      	ittt	eq
 80118c6:	68e5      	ldreq	r5, [r4, #12]
 80118c8:	6833      	ldreq	r3, [r6, #0]
 80118ca:	1aed      	subeq	r5, r5, r3
 80118cc:	68a3      	ldr	r3, [r4, #8]
 80118ce:	bf0c      	ite	eq
 80118d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118d4:	2500      	movne	r5, #0
 80118d6:	4293      	cmp	r3, r2
 80118d8:	bfc4      	itt	gt
 80118da:	1a9b      	subgt	r3, r3, r2
 80118dc:	18ed      	addgt	r5, r5, r3
 80118de:	2600      	movs	r6, #0
 80118e0:	341a      	adds	r4, #26
 80118e2:	42b5      	cmp	r5, r6
 80118e4:	d11a      	bne.n	801191c <_printf_common+0xc8>
 80118e6:	2000      	movs	r0, #0
 80118e8:	e008      	b.n	80118fc <_printf_common+0xa8>
 80118ea:	2301      	movs	r3, #1
 80118ec:	4652      	mov	r2, sl
 80118ee:	4649      	mov	r1, r9
 80118f0:	4638      	mov	r0, r7
 80118f2:	47c0      	blx	r8
 80118f4:	3001      	adds	r0, #1
 80118f6:	d103      	bne.n	8011900 <_printf_common+0xac>
 80118f8:	f04f 30ff 	mov.w	r0, #4294967295
 80118fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011900:	3501      	adds	r5, #1
 8011902:	e7c6      	b.n	8011892 <_printf_common+0x3e>
 8011904:	18e1      	adds	r1, r4, r3
 8011906:	1c5a      	adds	r2, r3, #1
 8011908:	2030      	movs	r0, #48	; 0x30
 801190a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801190e:	4422      	add	r2, r4
 8011910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011918:	3302      	adds	r3, #2
 801191a:	e7c7      	b.n	80118ac <_printf_common+0x58>
 801191c:	2301      	movs	r3, #1
 801191e:	4622      	mov	r2, r4
 8011920:	4649      	mov	r1, r9
 8011922:	4638      	mov	r0, r7
 8011924:	47c0      	blx	r8
 8011926:	3001      	adds	r0, #1
 8011928:	d0e6      	beq.n	80118f8 <_printf_common+0xa4>
 801192a:	3601      	adds	r6, #1
 801192c:	e7d9      	b.n	80118e2 <_printf_common+0x8e>
	...

08011930 <_printf_i>:
 8011930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011934:	7e0f      	ldrb	r7, [r1, #24]
 8011936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011938:	2f78      	cmp	r7, #120	; 0x78
 801193a:	4691      	mov	r9, r2
 801193c:	4680      	mov	r8, r0
 801193e:	460c      	mov	r4, r1
 8011940:	469a      	mov	sl, r3
 8011942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011946:	d807      	bhi.n	8011958 <_printf_i+0x28>
 8011948:	2f62      	cmp	r7, #98	; 0x62
 801194a:	d80a      	bhi.n	8011962 <_printf_i+0x32>
 801194c:	2f00      	cmp	r7, #0
 801194e:	f000 80d4 	beq.w	8011afa <_printf_i+0x1ca>
 8011952:	2f58      	cmp	r7, #88	; 0x58
 8011954:	f000 80c0 	beq.w	8011ad8 <_printf_i+0x1a8>
 8011958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801195c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011960:	e03a      	b.n	80119d8 <_printf_i+0xa8>
 8011962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011966:	2b15      	cmp	r3, #21
 8011968:	d8f6      	bhi.n	8011958 <_printf_i+0x28>
 801196a:	a101      	add	r1, pc, #4	; (adr r1, 8011970 <_printf_i+0x40>)
 801196c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011970:	080119c9 	.word	0x080119c9
 8011974:	080119dd 	.word	0x080119dd
 8011978:	08011959 	.word	0x08011959
 801197c:	08011959 	.word	0x08011959
 8011980:	08011959 	.word	0x08011959
 8011984:	08011959 	.word	0x08011959
 8011988:	080119dd 	.word	0x080119dd
 801198c:	08011959 	.word	0x08011959
 8011990:	08011959 	.word	0x08011959
 8011994:	08011959 	.word	0x08011959
 8011998:	08011959 	.word	0x08011959
 801199c:	08011ae1 	.word	0x08011ae1
 80119a0:	08011a09 	.word	0x08011a09
 80119a4:	08011a9b 	.word	0x08011a9b
 80119a8:	08011959 	.word	0x08011959
 80119ac:	08011959 	.word	0x08011959
 80119b0:	08011b03 	.word	0x08011b03
 80119b4:	08011959 	.word	0x08011959
 80119b8:	08011a09 	.word	0x08011a09
 80119bc:	08011959 	.word	0x08011959
 80119c0:	08011959 	.word	0x08011959
 80119c4:	08011aa3 	.word	0x08011aa3
 80119c8:	682b      	ldr	r3, [r5, #0]
 80119ca:	1d1a      	adds	r2, r3, #4
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	602a      	str	r2, [r5, #0]
 80119d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119d8:	2301      	movs	r3, #1
 80119da:	e09f      	b.n	8011b1c <_printf_i+0x1ec>
 80119dc:	6820      	ldr	r0, [r4, #0]
 80119de:	682b      	ldr	r3, [r5, #0]
 80119e0:	0607      	lsls	r7, r0, #24
 80119e2:	f103 0104 	add.w	r1, r3, #4
 80119e6:	6029      	str	r1, [r5, #0]
 80119e8:	d501      	bpl.n	80119ee <_printf_i+0xbe>
 80119ea:	681e      	ldr	r6, [r3, #0]
 80119ec:	e003      	b.n	80119f6 <_printf_i+0xc6>
 80119ee:	0646      	lsls	r6, r0, #25
 80119f0:	d5fb      	bpl.n	80119ea <_printf_i+0xba>
 80119f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80119f6:	2e00      	cmp	r6, #0
 80119f8:	da03      	bge.n	8011a02 <_printf_i+0xd2>
 80119fa:	232d      	movs	r3, #45	; 0x2d
 80119fc:	4276      	negs	r6, r6
 80119fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a02:	485a      	ldr	r0, [pc, #360]	; (8011b6c <_printf_i+0x23c>)
 8011a04:	230a      	movs	r3, #10
 8011a06:	e012      	b.n	8011a2e <_printf_i+0xfe>
 8011a08:	682b      	ldr	r3, [r5, #0]
 8011a0a:	6820      	ldr	r0, [r4, #0]
 8011a0c:	1d19      	adds	r1, r3, #4
 8011a0e:	6029      	str	r1, [r5, #0]
 8011a10:	0605      	lsls	r5, r0, #24
 8011a12:	d501      	bpl.n	8011a18 <_printf_i+0xe8>
 8011a14:	681e      	ldr	r6, [r3, #0]
 8011a16:	e002      	b.n	8011a1e <_printf_i+0xee>
 8011a18:	0641      	lsls	r1, r0, #25
 8011a1a:	d5fb      	bpl.n	8011a14 <_printf_i+0xe4>
 8011a1c:	881e      	ldrh	r6, [r3, #0]
 8011a1e:	4853      	ldr	r0, [pc, #332]	; (8011b6c <_printf_i+0x23c>)
 8011a20:	2f6f      	cmp	r7, #111	; 0x6f
 8011a22:	bf0c      	ite	eq
 8011a24:	2308      	moveq	r3, #8
 8011a26:	230a      	movne	r3, #10
 8011a28:	2100      	movs	r1, #0
 8011a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a2e:	6865      	ldr	r5, [r4, #4]
 8011a30:	60a5      	str	r5, [r4, #8]
 8011a32:	2d00      	cmp	r5, #0
 8011a34:	bfa2      	ittt	ge
 8011a36:	6821      	ldrge	r1, [r4, #0]
 8011a38:	f021 0104 	bicge.w	r1, r1, #4
 8011a3c:	6021      	strge	r1, [r4, #0]
 8011a3e:	b90e      	cbnz	r6, 8011a44 <_printf_i+0x114>
 8011a40:	2d00      	cmp	r5, #0
 8011a42:	d04b      	beq.n	8011adc <_printf_i+0x1ac>
 8011a44:	4615      	mov	r5, r2
 8011a46:	fbb6 f1f3 	udiv	r1, r6, r3
 8011a4a:	fb03 6711 	mls	r7, r3, r1, r6
 8011a4e:	5dc7      	ldrb	r7, [r0, r7]
 8011a50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011a54:	4637      	mov	r7, r6
 8011a56:	42bb      	cmp	r3, r7
 8011a58:	460e      	mov	r6, r1
 8011a5a:	d9f4      	bls.n	8011a46 <_printf_i+0x116>
 8011a5c:	2b08      	cmp	r3, #8
 8011a5e:	d10b      	bne.n	8011a78 <_printf_i+0x148>
 8011a60:	6823      	ldr	r3, [r4, #0]
 8011a62:	07de      	lsls	r6, r3, #31
 8011a64:	d508      	bpl.n	8011a78 <_printf_i+0x148>
 8011a66:	6923      	ldr	r3, [r4, #16]
 8011a68:	6861      	ldr	r1, [r4, #4]
 8011a6a:	4299      	cmp	r1, r3
 8011a6c:	bfde      	ittt	le
 8011a6e:	2330      	movle	r3, #48	; 0x30
 8011a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011a74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011a78:	1b52      	subs	r2, r2, r5
 8011a7a:	6122      	str	r2, [r4, #16]
 8011a7c:	f8cd a000 	str.w	sl, [sp]
 8011a80:	464b      	mov	r3, r9
 8011a82:	aa03      	add	r2, sp, #12
 8011a84:	4621      	mov	r1, r4
 8011a86:	4640      	mov	r0, r8
 8011a88:	f7ff fee4 	bl	8011854 <_printf_common>
 8011a8c:	3001      	adds	r0, #1
 8011a8e:	d14a      	bne.n	8011b26 <_printf_i+0x1f6>
 8011a90:	f04f 30ff 	mov.w	r0, #4294967295
 8011a94:	b004      	add	sp, #16
 8011a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a9a:	6823      	ldr	r3, [r4, #0]
 8011a9c:	f043 0320 	orr.w	r3, r3, #32
 8011aa0:	6023      	str	r3, [r4, #0]
 8011aa2:	4833      	ldr	r0, [pc, #204]	; (8011b70 <_printf_i+0x240>)
 8011aa4:	2778      	movs	r7, #120	; 0x78
 8011aa6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011aaa:	6823      	ldr	r3, [r4, #0]
 8011aac:	6829      	ldr	r1, [r5, #0]
 8011aae:	061f      	lsls	r7, r3, #24
 8011ab0:	f851 6b04 	ldr.w	r6, [r1], #4
 8011ab4:	d402      	bmi.n	8011abc <_printf_i+0x18c>
 8011ab6:	065f      	lsls	r7, r3, #25
 8011ab8:	bf48      	it	mi
 8011aba:	b2b6      	uxthmi	r6, r6
 8011abc:	07df      	lsls	r7, r3, #31
 8011abe:	bf48      	it	mi
 8011ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8011ac4:	6029      	str	r1, [r5, #0]
 8011ac6:	bf48      	it	mi
 8011ac8:	6023      	strmi	r3, [r4, #0]
 8011aca:	b91e      	cbnz	r6, 8011ad4 <_printf_i+0x1a4>
 8011acc:	6823      	ldr	r3, [r4, #0]
 8011ace:	f023 0320 	bic.w	r3, r3, #32
 8011ad2:	6023      	str	r3, [r4, #0]
 8011ad4:	2310      	movs	r3, #16
 8011ad6:	e7a7      	b.n	8011a28 <_printf_i+0xf8>
 8011ad8:	4824      	ldr	r0, [pc, #144]	; (8011b6c <_printf_i+0x23c>)
 8011ada:	e7e4      	b.n	8011aa6 <_printf_i+0x176>
 8011adc:	4615      	mov	r5, r2
 8011ade:	e7bd      	b.n	8011a5c <_printf_i+0x12c>
 8011ae0:	682b      	ldr	r3, [r5, #0]
 8011ae2:	6826      	ldr	r6, [r4, #0]
 8011ae4:	6961      	ldr	r1, [r4, #20]
 8011ae6:	1d18      	adds	r0, r3, #4
 8011ae8:	6028      	str	r0, [r5, #0]
 8011aea:	0635      	lsls	r5, r6, #24
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	d501      	bpl.n	8011af4 <_printf_i+0x1c4>
 8011af0:	6019      	str	r1, [r3, #0]
 8011af2:	e002      	b.n	8011afa <_printf_i+0x1ca>
 8011af4:	0670      	lsls	r0, r6, #25
 8011af6:	d5fb      	bpl.n	8011af0 <_printf_i+0x1c0>
 8011af8:	8019      	strh	r1, [r3, #0]
 8011afa:	2300      	movs	r3, #0
 8011afc:	6123      	str	r3, [r4, #16]
 8011afe:	4615      	mov	r5, r2
 8011b00:	e7bc      	b.n	8011a7c <_printf_i+0x14c>
 8011b02:	682b      	ldr	r3, [r5, #0]
 8011b04:	1d1a      	adds	r2, r3, #4
 8011b06:	602a      	str	r2, [r5, #0]
 8011b08:	681d      	ldr	r5, [r3, #0]
 8011b0a:	6862      	ldr	r2, [r4, #4]
 8011b0c:	2100      	movs	r1, #0
 8011b0e:	4628      	mov	r0, r5
 8011b10:	f7ee fb86 	bl	8000220 <memchr>
 8011b14:	b108      	cbz	r0, 8011b1a <_printf_i+0x1ea>
 8011b16:	1b40      	subs	r0, r0, r5
 8011b18:	6060      	str	r0, [r4, #4]
 8011b1a:	6863      	ldr	r3, [r4, #4]
 8011b1c:	6123      	str	r3, [r4, #16]
 8011b1e:	2300      	movs	r3, #0
 8011b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b24:	e7aa      	b.n	8011a7c <_printf_i+0x14c>
 8011b26:	6923      	ldr	r3, [r4, #16]
 8011b28:	462a      	mov	r2, r5
 8011b2a:	4649      	mov	r1, r9
 8011b2c:	4640      	mov	r0, r8
 8011b2e:	47d0      	blx	sl
 8011b30:	3001      	adds	r0, #1
 8011b32:	d0ad      	beq.n	8011a90 <_printf_i+0x160>
 8011b34:	6823      	ldr	r3, [r4, #0]
 8011b36:	079b      	lsls	r3, r3, #30
 8011b38:	d413      	bmi.n	8011b62 <_printf_i+0x232>
 8011b3a:	68e0      	ldr	r0, [r4, #12]
 8011b3c:	9b03      	ldr	r3, [sp, #12]
 8011b3e:	4298      	cmp	r0, r3
 8011b40:	bfb8      	it	lt
 8011b42:	4618      	movlt	r0, r3
 8011b44:	e7a6      	b.n	8011a94 <_printf_i+0x164>
 8011b46:	2301      	movs	r3, #1
 8011b48:	4632      	mov	r2, r6
 8011b4a:	4649      	mov	r1, r9
 8011b4c:	4640      	mov	r0, r8
 8011b4e:	47d0      	blx	sl
 8011b50:	3001      	adds	r0, #1
 8011b52:	d09d      	beq.n	8011a90 <_printf_i+0x160>
 8011b54:	3501      	adds	r5, #1
 8011b56:	68e3      	ldr	r3, [r4, #12]
 8011b58:	9903      	ldr	r1, [sp, #12]
 8011b5a:	1a5b      	subs	r3, r3, r1
 8011b5c:	42ab      	cmp	r3, r5
 8011b5e:	dcf2      	bgt.n	8011b46 <_printf_i+0x216>
 8011b60:	e7eb      	b.n	8011b3a <_printf_i+0x20a>
 8011b62:	2500      	movs	r5, #0
 8011b64:	f104 0619 	add.w	r6, r4, #25
 8011b68:	e7f5      	b.n	8011b56 <_printf_i+0x226>
 8011b6a:	bf00      	nop
 8011b6c:	0801873a 	.word	0x0801873a
 8011b70:	0801874b 	.word	0x0801874b

08011b74 <_scanf_float>:
 8011b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b78:	b087      	sub	sp, #28
 8011b7a:	4617      	mov	r7, r2
 8011b7c:	9303      	str	r3, [sp, #12]
 8011b7e:	688b      	ldr	r3, [r1, #8]
 8011b80:	1e5a      	subs	r2, r3, #1
 8011b82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011b86:	bf83      	ittte	hi
 8011b88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011b8c:	195b      	addhi	r3, r3, r5
 8011b8e:	9302      	strhi	r3, [sp, #8]
 8011b90:	2300      	movls	r3, #0
 8011b92:	bf86      	itte	hi
 8011b94:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011b98:	608b      	strhi	r3, [r1, #8]
 8011b9a:	9302      	strls	r3, [sp, #8]
 8011b9c:	680b      	ldr	r3, [r1, #0]
 8011b9e:	468b      	mov	fp, r1
 8011ba0:	2500      	movs	r5, #0
 8011ba2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011ba6:	f84b 3b1c 	str.w	r3, [fp], #28
 8011baa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011bae:	4680      	mov	r8, r0
 8011bb0:	460c      	mov	r4, r1
 8011bb2:	465e      	mov	r6, fp
 8011bb4:	46aa      	mov	sl, r5
 8011bb6:	46a9      	mov	r9, r5
 8011bb8:	9501      	str	r5, [sp, #4]
 8011bba:	68a2      	ldr	r2, [r4, #8]
 8011bbc:	b152      	cbz	r2, 8011bd4 <_scanf_float+0x60>
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	2b4e      	cmp	r3, #78	; 0x4e
 8011bc4:	d864      	bhi.n	8011c90 <_scanf_float+0x11c>
 8011bc6:	2b40      	cmp	r3, #64	; 0x40
 8011bc8:	d83c      	bhi.n	8011c44 <_scanf_float+0xd0>
 8011bca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011bce:	b2c8      	uxtb	r0, r1
 8011bd0:	280e      	cmp	r0, #14
 8011bd2:	d93a      	bls.n	8011c4a <_scanf_float+0xd6>
 8011bd4:	f1b9 0f00 	cmp.w	r9, #0
 8011bd8:	d003      	beq.n	8011be2 <_scanf_float+0x6e>
 8011bda:	6823      	ldr	r3, [r4, #0]
 8011bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011be0:	6023      	str	r3, [r4, #0]
 8011be2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011be6:	f1ba 0f01 	cmp.w	sl, #1
 8011bea:	f200 8113 	bhi.w	8011e14 <_scanf_float+0x2a0>
 8011bee:	455e      	cmp	r6, fp
 8011bf0:	f200 8105 	bhi.w	8011dfe <_scanf_float+0x28a>
 8011bf4:	2501      	movs	r5, #1
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	b007      	add	sp, #28
 8011bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bfe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011c02:	2a0d      	cmp	r2, #13
 8011c04:	d8e6      	bhi.n	8011bd4 <_scanf_float+0x60>
 8011c06:	a101      	add	r1, pc, #4	; (adr r1, 8011c0c <_scanf_float+0x98>)
 8011c08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011c0c:	08011d4b 	.word	0x08011d4b
 8011c10:	08011bd5 	.word	0x08011bd5
 8011c14:	08011bd5 	.word	0x08011bd5
 8011c18:	08011bd5 	.word	0x08011bd5
 8011c1c:	08011dab 	.word	0x08011dab
 8011c20:	08011d83 	.word	0x08011d83
 8011c24:	08011bd5 	.word	0x08011bd5
 8011c28:	08011bd5 	.word	0x08011bd5
 8011c2c:	08011d59 	.word	0x08011d59
 8011c30:	08011bd5 	.word	0x08011bd5
 8011c34:	08011bd5 	.word	0x08011bd5
 8011c38:	08011bd5 	.word	0x08011bd5
 8011c3c:	08011bd5 	.word	0x08011bd5
 8011c40:	08011d11 	.word	0x08011d11
 8011c44:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011c48:	e7db      	b.n	8011c02 <_scanf_float+0x8e>
 8011c4a:	290e      	cmp	r1, #14
 8011c4c:	d8c2      	bhi.n	8011bd4 <_scanf_float+0x60>
 8011c4e:	a001      	add	r0, pc, #4	; (adr r0, 8011c54 <_scanf_float+0xe0>)
 8011c50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011c54:	08011d03 	.word	0x08011d03
 8011c58:	08011bd5 	.word	0x08011bd5
 8011c5c:	08011d03 	.word	0x08011d03
 8011c60:	08011d97 	.word	0x08011d97
 8011c64:	08011bd5 	.word	0x08011bd5
 8011c68:	08011cb1 	.word	0x08011cb1
 8011c6c:	08011ced 	.word	0x08011ced
 8011c70:	08011ced 	.word	0x08011ced
 8011c74:	08011ced 	.word	0x08011ced
 8011c78:	08011ced 	.word	0x08011ced
 8011c7c:	08011ced 	.word	0x08011ced
 8011c80:	08011ced 	.word	0x08011ced
 8011c84:	08011ced 	.word	0x08011ced
 8011c88:	08011ced 	.word	0x08011ced
 8011c8c:	08011ced 	.word	0x08011ced
 8011c90:	2b6e      	cmp	r3, #110	; 0x6e
 8011c92:	d809      	bhi.n	8011ca8 <_scanf_float+0x134>
 8011c94:	2b60      	cmp	r3, #96	; 0x60
 8011c96:	d8b2      	bhi.n	8011bfe <_scanf_float+0x8a>
 8011c98:	2b54      	cmp	r3, #84	; 0x54
 8011c9a:	d077      	beq.n	8011d8c <_scanf_float+0x218>
 8011c9c:	2b59      	cmp	r3, #89	; 0x59
 8011c9e:	d199      	bne.n	8011bd4 <_scanf_float+0x60>
 8011ca0:	2d07      	cmp	r5, #7
 8011ca2:	d197      	bne.n	8011bd4 <_scanf_float+0x60>
 8011ca4:	2508      	movs	r5, #8
 8011ca6:	e029      	b.n	8011cfc <_scanf_float+0x188>
 8011ca8:	2b74      	cmp	r3, #116	; 0x74
 8011caa:	d06f      	beq.n	8011d8c <_scanf_float+0x218>
 8011cac:	2b79      	cmp	r3, #121	; 0x79
 8011cae:	e7f6      	b.n	8011c9e <_scanf_float+0x12a>
 8011cb0:	6821      	ldr	r1, [r4, #0]
 8011cb2:	05c8      	lsls	r0, r1, #23
 8011cb4:	d51a      	bpl.n	8011cec <_scanf_float+0x178>
 8011cb6:	9b02      	ldr	r3, [sp, #8]
 8011cb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011cbc:	6021      	str	r1, [r4, #0]
 8011cbe:	f109 0901 	add.w	r9, r9, #1
 8011cc2:	b11b      	cbz	r3, 8011ccc <_scanf_float+0x158>
 8011cc4:	3b01      	subs	r3, #1
 8011cc6:	3201      	adds	r2, #1
 8011cc8:	9302      	str	r3, [sp, #8]
 8011cca:	60a2      	str	r2, [r4, #8]
 8011ccc:	68a3      	ldr	r3, [r4, #8]
 8011cce:	3b01      	subs	r3, #1
 8011cd0:	60a3      	str	r3, [r4, #8]
 8011cd2:	6923      	ldr	r3, [r4, #16]
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	6123      	str	r3, [r4, #16]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	3b01      	subs	r3, #1
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	607b      	str	r3, [r7, #4]
 8011ce0:	f340 8084 	ble.w	8011dec <_scanf_float+0x278>
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	603b      	str	r3, [r7, #0]
 8011cea:	e766      	b.n	8011bba <_scanf_float+0x46>
 8011cec:	eb1a 0f05 	cmn.w	sl, r5
 8011cf0:	f47f af70 	bne.w	8011bd4 <_scanf_float+0x60>
 8011cf4:	6822      	ldr	r2, [r4, #0]
 8011cf6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011cfa:	6022      	str	r2, [r4, #0]
 8011cfc:	f806 3b01 	strb.w	r3, [r6], #1
 8011d00:	e7e4      	b.n	8011ccc <_scanf_float+0x158>
 8011d02:	6822      	ldr	r2, [r4, #0]
 8011d04:	0610      	lsls	r0, r2, #24
 8011d06:	f57f af65 	bpl.w	8011bd4 <_scanf_float+0x60>
 8011d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011d0e:	e7f4      	b.n	8011cfa <_scanf_float+0x186>
 8011d10:	f1ba 0f00 	cmp.w	sl, #0
 8011d14:	d10e      	bne.n	8011d34 <_scanf_float+0x1c0>
 8011d16:	f1b9 0f00 	cmp.w	r9, #0
 8011d1a:	d10e      	bne.n	8011d3a <_scanf_float+0x1c6>
 8011d1c:	6822      	ldr	r2, [r4, #0]
 8011d1e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011d22:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011d26:	d108      	bne.n	8011d3a <_scanf_float+0x1c6>
 8011d28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011d2c:	6022      	str	r2, [r4, #0]
 8011d2e:	f04f 0a01 	mov.w	sl, #1
 8011d32:	e7e3      	b.n	8011cfc <_scanf_float+0x188>
 8011d34:	f1ba 0f02 	cmp.w	sl, #2
 8011d38:	d055      	beq.n	8011de6 <_scanf_float+0x272>
 8011d3a:	2d01      	cmp	r5, #1
 8011d3c:	d002      	beq.n	8011d44 <_scanf_float+0x1d0>
 8011d3e:	2d04      	cmp	r5, #4
 8011d40:	f47f af48 	bne.w	8011bd4 <_scanf_float+0x60>
 8011d44:	3501      	adds	r5, #1
 8011d46:	b2ed      	uxtb	r5, r5
 8011d48:	e7d8      	b.n	8011cfc <_scanf_float+0x188>
 8011d4a:	f1ba 0f01 	cmp.w	sl, #1
 8011d4e:	f47f af41 	bne.w	8011bd4 <_scanf_float+0x60>
 8011d52:	f04f 0a02 	mov.w	sl, #2
 8011d56:	e7d1      	b.n	8011cfc <_scanf_float+0x188>
 8011d58:	b97d      	cbnz	r5, 8011d7a <_scanf_float+0x206>
 8011d5a:	f1b9 0f00 	cmp.w	r9, #0
 8011d5e:	f47f af3c 	bne.w	8011bda <_scanf_float+0x66>
 8011d62:	6822      	ldr	r2, [r4, #0]
 8011d64:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011d68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011d6c:	f47f af39 	bne.w	8011be2 <_scanf_float+0x6e>
 8011d70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011d74:	6022      	str	r2, [r4, #0]
 8011d76:	2501      	movs	r5, #1
 8011d78:	e7c0      	b.n	8011cfc <_scanf_float+0x188>
 8011d7a:	2d03      	cmp	r5, #3
 8011d7c:	d0e2      	beq.n	8011d44 <_scanf_float+0x1d0>
 8011d7e:	2d05      	cmp	r5, #5
 8011d80:	e7de      	b.n	8011d40 <_scanf_float+0x1cc>
 8011d82:	2d02      	cmp	r5, #2
 8011d84:	f47f af26 	bne.w	8011bd4 <_scanf_float+0x60>
 8011d88:	2503      	movs	r5, #3
 8011d8a:	e7b7      	b.n	8011cfc <_scanf_float+0x188>
 8011d8c:	2d06      	cmp	r5, #6
 8011d8e:	f47f af21 	bne.w	8011bd4 <_scanf_float+0x60>
 8011d92:	2507      	movs	r5, #7
 8011d94:	e7b2      	b.n	8011cfc <_scanf_float+0x188>
 8011d96:	6822      	ldr	r2, [r4, #0]
 8011d98:	0591      	lsls	r1, r2, #22
 8011d9a:	f57f af1b 	bpl.w	8011bd4 <_scanf_float+0x60>
 8011d9e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011da2:	6022      	str	r2, [r4, #0]
 8011da4:	f8cd 9004 	str.w	r9, [sp, #4]
 8011da8:	e7a8      	b.n	8011cfc <_scanf_float+0x188>
 8011daa:	6822      	ldr	r2, [r4, #0]
 8011dac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011db0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011db4:	d006      	beq.n	8011dc4 <_scanf_float+0x250>
 8011db6:	0550      	lsls	r0, r2, #21
 8011db8:	f57f af0c 	bpl.w	8011bd4 <_scanf_float+0x60>
 8011dbc:	f1b9 0f00 	cmp.w	r9, #0
 8011dc0:	f43f af0f 	beq.w	8011be2 <_scanf_float+0x6e>
 8011dc4:	0591      	lsls	r1, r2, #22
 8011dc6:	bf58      	it	pl
 8011dc8:	9901      	ldrpl	r1, [sp, #4]
 8011dca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011dce:	bf58      	it	pl
 8011dd0:	eba9 0101 	subpl.w	r1, r9, r1
 8011dd4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011dd8:	bf58      	it	pl
 8011dda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011dde:	6022      	str	r2, [r4, #0]
 8011de0:	f04f 0900 	mov.w	r9, #0
 8011de4:	e78a      	b.n	8011cfc <_scanf_float+0x188>
 8011de6:	f04f 0a03 	mov.w	sl, #3
 8011dea:	e787      	b.n	8011cfc <_scanf_float+0x188>
 8011dec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011df0:	4639      	mov	r1, r7
 8011df2:	4640      	mov	r0, r8
 8011df4:	4798      	blx	r3
 8011df6:	2800      	cmp	r0, #0
 8011df8:	f43f aedf 	beq.w	8011bba <_scanf_float+0x46>
 8011dfc:	e6ea      	b.n	8011bd4 <_scanf_float+0x60>
 8011dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011e02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011e06:	463a      	mov	r2, r7
 8011e08:	4640      	mov	r0, r8
 8011e0a:	4798      	blx	r3
 8011e0c:	6923      	ldr	r3, [r4, #16]
 8011e0e:	3b01      	subs	r3, #1
 8011e10:	6123      	str	r3, [r4, #16]
 8011e12:	e6ec      	b.n	8011bee <_scanf_float+0x7a>
 8011e14:	1e6b      	subs	r3, r5, #1
 8011e16:	2b06      	cmp	r3, #6
 8011e18:	d825      	bhi.n	8011e66 <_scanf_float+0x2f2>
 8011e1a:	2d02      	cmp	r5, #2
 8011e1c:	d836      	bhi.n	8011e8c <_scanf_float+0x318>
 8011e1e:	455e      	cmp	r6, fp
 8011e20:	f67f aee8 	bls.w	8011bf4 <_scanf_float+0x80>
 8011e24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011e28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011e2c:	463a      	mov	r2, r7
 8011e2e:	4640      	mov	r0, r8
 8011e30:	4798      	blx	r3
 8011e32:	6923      	ldr	r3, [r4, #16]
 8011e34:	3b01      	subs	r3, #1
 8011e36:	6123      	str	r3, [r4, #16]
 8011e38:	e7f1      	b.n	8011e1e <_scanf_float+0x2aa>
 8011e3a:	9802      	ldr	r0, [sp, #8]
 8011e3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011e40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011e44:	9002      	str	r0, [sp, #8]
 8011e46:	463a      	mov	r2, r7
 8011e48:	4640      	mov	r0, r8
 8011e4a:	4798      	blx	r3
 8011e4c:	6923      	ldr	r3, [r4, #16]
 8011e4e:	3b01      	subs	r3, #1
 8011e50:	6123      	str	r3, [r4, #16]
 8011e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011e56:	fa5f fa8a 	uxtb.w	sl, sl
 8011e5a:	f1ba 0f02 	cmp.w	sl, #2
 8011e5e:	d1ec      	bne.n	8011e3a <_scanf_float+0x2c6>
 8011e60:	3d03      	subs	r5, #3
 8011e62:	b2ed      	uxtb	r5, r5
 8011e64:	1b76      	subs	r6, r6, r5
 8011e66:	6823      	ldr	r3, [r4, #0]
 8011e68:	05da      	lsls	r2, r3, #23
 8011e6a:	d52f      	bpl.n	8011ecc <_scanf_float+0x358>
 8011e6c:	055b      	lsls	r3, r3, #21
 8011e6e:	d510      	bpl.n	8011e92 <_scanf_float+0x31e>
 8011e70:	455e      	cmp	r6, fp
 8011e72:	f67f aebf 	bls.w	8011bf4 <_scanf_float+0x80>
 8011e76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011e7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011e7e:	463a      	mov	r2, r7
 8011e80:	4640      	mov	r0, r8
 8011e82:	4798      	blx	r3
 8011e84:	6923      	ldr	r3, [r4, #16]
 8011e86:	3b01      	subs	r3, #1
 8011e88:	6123      	str	r3, [r4, #16]
 8011e8a:	e7f1      	b.n	8011e70 <_scanf_float+0x2fc>
 8011e8c:	46aa      	mov	sl, r5
 8011e8e:	9602      	str	r6, [sp, #8]
 8011e90:	e7df      	b.n	8011e52 <_scanf_float+0x2de>
 8011e92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011e96:	6923      	ldr	r3, [r4, #16]
 8011e98:	2965      	cmp	r1, #101	; 0x65
 8011e9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011e9e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011ea2:	6123      	str	r3, [r4, #16]
 8011ea4:	d00c      	beq.n	8011ec0 <_scanf_float+0x34c>
 8011ea6:	2945      	cmp	r1, #69	; 0x45
 8011ea8:	d00a      	beq.n	8011ec0 <_scanf_float+0x34c>
 8011eaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011eae:	463a      	mov	r2, r7
 8011eb0:	4640      	mov	r0, r8
 8011eb2:	4798      	blx	r3
 8011eb4:	6923      	ldr	r3, [r4, #16]
 8011eb6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011eba:	3b01      	subs	r3, #1
 8011ebc:	1eb5      	subs	r5, r6, #2
 8011ebe:	6123      	str	r3, [r4, #16]
 8011ec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011ec4:	463a      	mov	r2, r7
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	4798      	blx	r3
 8011eca:	462e      	mov	r6, r5
 8011ecc:	6825      	ldr	r5, [r4, #0]
 8011ece:	f015 0510 	ands.w	r5, r5, #16
 8011ed2:	d158      	bne.n	8011f86 <_scanf_float+0x412>
 8011ed4:	7035      	strb	r5, [r6, #0]
 8011ed6:	6823      	ldr	r3, [r4, #0]
 8011ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ee0:	d11c      	bne.n	8011f1c <_scanf_float+0x3a8>
 8011ee2:	9b01      	ldr	r3, [sp, #4]
 8011ee4:	454b      	cmp	r3, r9
 8011ee6:	eba3 0209 	sub.w	r2, r3, r9
 8011eea:	d124      	bne.n	8011f36 <_scanf_float+0x3c2>
 8011eec:	2200      	movs	r2, #0
 8011eee:	4659      	mov	r1, fp
 8011ef0:	4640      	mov	r0, r8
 8011ef2:	f002 fc3d 	bl	8014770 <_strtod_r>
 8011ef6:	9b03      	ldr	r3, [sp, #12]
 8011ef8:	6821      	ldr	r1, [r4, #0]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	f011 0f02 	tst.w	r1, #2
 8011f00:	ec57 6b10 	vmov	r6, r7, d0
 8011f04:	f103 0204 	add.w	r2, r3, #4
 8011f08:	d020      	beq.n	8011f4c <_scanf_float+0x3d8>
 8011f0a:	9903      	ldr	r1, [sp, #12]
 8011f0c:	600a      	str	r2, [r1, #0]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	e9c3 6700 	strd	r6, r7, [r3]
 8011f14:	68e3      	ldr	r3, [r4, #12]
 8011f16:	3301      	adds	r3, #1
 8011f18:	60e3      	str	r3, [r4, #12]
 8011f1a:	e66c      	b.n	8011bf6 <_scanf_float+0x82>
 8011f1c:	9b04      	ldr	r3, [sp, #16]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d0e4      	beq.n	8011eec <_scanf_float+0x378>
 8011f22:	9905      	ldr	r1, [sp, #20]
 8011f24:	230a      	movs	r3, #10
 8011f26:	462a      	mov	r2, r5
 8011f28:	3101      	adds	r1, #1
 8011f2a:	4640      	mov	r0, r8
 8011f2c:	f002 fca8 	bl	8014880 <_strtol_r>
 8011f30:	9b04      	ldr	r3, [sp, #16]
 8011f32:	9e05      	ldr	r6, [sp, #20]
 8011f34:	1ac2      	subs	r2, r0, r3
 8011f36:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011f3a:	429e      	cmp	r6, r3
 8011f3c:	bf28      	it	cs
 8011f3e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011f42:	4912      	ldr	r1, [pc, #72]	; (8011f8c <_scanf_float+0x418>)
 8011f44:	4630      	mov	r0, r6
 8011f46:	f000 f8e7 	bl	8012118 <siprintf>
 8011f4a:	e7cf      	b.n	8011eec <_scanf_float+0x378>
 8011f4c:	f011 0f04 	tst.w	r1, #4
 8011f50:	9903      	ldr	r1, [sp, #12]
 8011f52:	600a      	str	r2, [r1, #0]
 8011f54:	d1db      	bne.n	8011f0e <_scanf_float+0x39a>
 8011f56:	f8d3 8000 	ldr.w	r8, [r3]
 8011f5a:	ee10 2a10 	vmov	r2, s0
 8011f5e:	ee10 0a10 	vmov	r0, s0
 8011f62:	463b      	mov	r3, r7
 8011f64:	4639      	mov	r1, r7
 8011f66:	f7ee fe09 	bl	8000b7c <__aeabi_dcmpun>
 8011f6a:	b128      	cbz	r0, 8011f78 <_scanf_float+0x404>
 8011f6c:	4808      	ldr	r0, [pc, #32]	; (8011f90 <_scanf_float+0x41c>)
 8011f6e:	f000 f9c5 	bl	80122fc <nanf>
 8011f72:	ed88 0a00 	vstr	s0, [r8]
 8011f76:	e7cd      	b.n	8011f14 <_scanf_float+0x3a0>
 8011f78:	4630      	mov	r0, r6
 8011f7a:	4639      	mov	r1, r7
 8011f7c:	f7ee fe5c 	bl	8000c38 <__aeabi_d2f>
 8011f80:	f8c8 0000 	str.w	r0, [r8]
 8011f84:	e7c6      	b.n	8011f14 <_scanf_float+0x3a0>
 8011f86:	2500      	movs	r5, #0
 8011f88:	e635      	b.n	8011bf6 <_scanf_float+0x82>
 8011f8a:	bf00      	nop
 8011f8c:	0801875c 	.word	0x0801875c
 8011f90:	08018aed 	.word	0x08018aed

08011f94 <std>:
 8011f94:	2300      	movs	r3, #0
 8011f96:	b510      	push	{r4, lr}
 8011f98:	4604      	mov	r4, r0
 8011f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8011f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011fa2:	6083      	str	r3, [r0, #8]
 8011fa4:	8181      	strh	r1, [r0, #12]
 8011fa6:	6643      	str	r3, [r0, #100]	; 0x64
 8011fa8:	81c2      	strh	r2, [r0, #14]
 8011faa:	6183      	str	r3, [r0, #24]
 8011fac:	4619      	mov	r1, r3
 8011fae:	2208      	movs	r2, #8
 8011fb0:	305c      	adds	r0, #92	; 0x5c
 8011fb2:	f000 f914 	bl	80121de <memset>
 8011fb6:	4b0d      	ldr	r3, [pc, #52]	; (8011fec <std+0x58>)
 8011fb8:	6263      	str	r3, [r4, #36]	; 0x24
 8011fba:	4b0d      	ldr	r3, [pc, #52]	; (8011ff0 <std+0x5c>)
 8011fbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8011fbe:	4b0d      	ldr	r3, [pc, #52]	; (8011ff4 <std+0x60>)
 8011fc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011fc2:	4b0d      	ldr	r3, [pc, #52]	; (8011ff8 <std+0x64>)
 8011fc4:	6323      	str	r3, [r4, #48]	; 0x30
 8011fc6:	4b0d      	ldr	r3, [pc, #52]	; (8011ffc <std+0x68>)
 8011fc8:	6224      	str	r4, [r4, #32]
 8011fca:	429c      	cmp	r4, r3
 8011fcc:	d006      	beq.n	8011fdc <std+0x48>
 8011fce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011fd2:	4294      	cmp	r4, r2
 8011fd4:	d002      	beq.n	8011fdc <std+0x48>
 8011fd6:	33d0      	adds	r3, #208	; 0xd0
 8011fd8:	429c      	cmp	r4, r3
 8011fda:	d105      	bne.n	8011fe8 <std+0x54>
 8011fdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fe4:	f000 b978 	b.w	80122d8 <__retarget_lock_init_recursive>
 8011fe8:	bd10      	pop	{r4, pc}
 8011fea:	bf00      	nop
 8011fec:	08012159 	.word	0x08012159
 8011ff0:	0801217b 	.word	0x0801217b
 8011ff4:	080121b3 	.word	0x080121b3
 8011ff8:	080121d7 	.word	0x080121d7
 8011ffc:	2000227c 	.word	0x2000227c

08012000 <stdio_exit_handler>:
 8012000:	4a02      	ldr	r2, [pc, #8]	; (801200c <stdio_exit_handler+0xc>)
 8012002:	4903      	ldr	r1, [pc, #12]	; (8012010 <stdio_exit_handler+0x10>)
 8012004:	4803      	ldr	r0, [pc, #12]	; (8012014 <stdio_exit_handler+0x14>)
 8012006:	f000 b869 	b.w	80120dc <_fwalk_sglue>
 801200a:	bf00      	nop
 801200c:	20000214 	.word	0x20000214
 8012010:	08014c41 	.word	0x08014c41
 8012014:	20000220 	.word	0x20000220

08012018 <cleanup_stdio>:
 8012018:	6841      	ldr	r1, [r0, #4]
 801201a:	4b0c      	ldr	r3, [pc, #48]	; (801204c <cleanup_stdio+0x34>)
 801201c:	4299      	cmp	r1, r3
 801201e:	b510      	push	{r4, lr}
 8012020:	4604      	mov	r4, r0
 8012022:	d001      	beq.n	8012028 <cleanup_stdio+0x10>
 8012024:	f002 fe0c 	bl	8014c40 <_fflush_r>
 8012028:	68a1      	ldr	r1, [r4, #8]
 801202a:	4b09      	ldr	r3, [pc, #36]	; (8012050 <cleanup_stdio+0x38>)
 801202c:	4299      	cmp	r1, r3
 801202e:	d002      	beq.n	8012036 <cleanup_stdio+0x1e>
 8012030:	4620      	mov	r0, r4
 8012032:	f002 fe05 	bl	8014c40 <_fflush_r>
 8012036:	68e1      	ldr	r1, [r4, #12]
 8012038:	4b06      	ldr	r3, [pc, #24]	; (8012054 <cleanup_stdio+0x3c>)
 801203a:	4299      	cmp	r1, r3
 801203c:	d004      	beq.n	8012048 <cleanup_stdio+0x30>
 801203e:	4620      	mov	r0, r4
 8012040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012044:	f002 bdfc 	b.w	8014c40 <_fflush_r>
 8012048:	bd10      	pop	{r4, pc}
 801204a:	bf00      	nop
 801204c:	2000227c 	.word	0x2000227c
 8012050:	200022e4 	.word	0x200022e4
 8012054:	2000234c 	.word	0x2000234c

08012058 <global_stdio_init.part.0>:
 8012058:	b510      	push	{r4, lr}
 801205a:	4b0b      	ldr	r3, [pc, #44]	; (8012088 <global_stdio_init.part.0+0x30>)
 801205c:	4c0b      	ldr	r4, [pc, #44]	; (801208c <global_stdio_init.part.0+0x34>)
 801205e:	4a0c      	ldr	r2, [pc, #48]	; (8012090 <global_stdio_init.part.0+0x38>)
 8012060:	601a      	str	r2, [r3, #0]
 8012062:	4620      	mov	r0, r4
 8012064:	2200      	movs	r2, #0
 8012066:	2104      	movs	r1, #4
 8012068:	f7ff ff94 	bl	8011f94 <std>
 801206c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012070:	2201      	movs	r2, #1
 8012072:	2109      	movs	r1, #9
 8012074:	f7ff ff8e 	bl	8011f94 <std>
 8012078:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801207c:	2202      	movs	r2, #2
 801207e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012082:	2112      	movs	r1, #18
 8012084:	f7ff bf86 	b.w	8011f94 <std>
 8012088:	200023b4 	.word	0x200023b4
 801208c:	2000227c 	.word	0x2000227c
 8012090:	08012001 	.word	0x08012001

08012094 <__sfp_lock_acquire>:
 8012094:	4801      	ldr	r0, [pc, #4]	; (801209c <__sfp_lock_acquire+0x8>)
 8012096:	f000 b920 	b.w	80122da <__retarget_lock_acquire_recursive>
 801209a:	bf00      	nop
 801209c:	200023bd 	.word	0x200023bd

080120a0 <__sfp_lock_release>:
 80120a0:	4801      	ldr	r0, [pc, #4]	; (80120a8 <__sfp_lock_release+0x8>)
 80120a2:	f000 b91b 	b.w	80122dc <__retarget_lock_release_recursive>
 80120a6:	bf00      	nop
 80120a8:	200023bd 	.word	0x200023bd

080120ac <__sinit>:
 80120ac:	b510      	push	{r4, lr}
 80120ae:	4604      	mov	r4, r0
 80120b0:	f7ff fff0 	bl	8012094 <__sfp_lock_acquire>
 80120b4:	6a23      	ldr	r3, [r4, #32]
 80120b6:	b11b      	cbz	r3, 80120c0 <__sinit+0x14>
 80120b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120bc:	f7ff bff0 	b.w	80120a0 <__sfp_lock_release>
 80120c0:	4b04      	ldr	r3, [pc, #16]	; (80120d4 <__sinit+0x28>)
 80120c2:	6223      	str	r3, [r4, #32]
 80120c4:	4b04      	ldr	r3, [pc, #16]	; (80120d8 <__sinit+0x2c>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d1f5      	bne.n	80120b8 <__sinit+0xc>
 80120cc:	f7ff ffc4 	bl	8012058 <global_stdio_init.part.0>
 80120d0:	e7f2      	b.n	80120b8 <__sinit+0xc>
 80120d2:	bf00      	nop
 80120d4:	08012019 	.word	0x08012019
 80120d8:	200023b4 	.word	0x200023b4

080120dc <_fwalk_sglue>:
 80120dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120e0:	4607      	mov	r7, r0
 80120e2:	4688      	mov	r8, r1
 80120e4:	4614      	mov	r4, r2
 80120e6:	2600      	movs	r6, #0
 80120e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80120ec:	f1b9 0901 	subs.w	r9, r9, #1
 80120f0:	d505      	bpl.n	80120fe <_fwalk_sglue+0x22>
 80120f2:	6824      	ldr	r4, [r4, #0]
 80120f4:	2c00      	cmp	r4, #0
 80120f6:	d1f7      	bne.n	80120e8 <_fwalk_sglue+0xc>
 80120f8:	4630      	mov	r0, r6
 80120fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120fe:	89ab      	ldrh	r3, [r5, #12]
 8012100:	2b01      	cmp	r3, #1
 8012102:	d907      	bls.n	8012114 <_fwalk_sglue+0x38>
 8012104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012108:	3301      	adds	r3, #1
 801210a:	d003      	beq.n	8012114 <_fwalk_sglue+0x38>
 801210c:	4629      	mov	r1, r5
 801210e:	4638      	mov	r0, r7
 8012110:	47c0      	blx	r8
 8012112:	4306      	orrs	r6, r0
 8012114:	3568      	adds	r5, #104	; 0x68
 8012116:	e7e9      	b.n	80120ec <_fwalk_sglue+0x10>

08012118 <siprintf>:
 8012118:	b40e      	push	{r1, r2, r3}
 801211a:	b500      	push	{lr}
 801211c:	b09c      	sub	sp, #112	; 0x70
 801211e:	ab1d      	add	r3, sp, #116	; 0x74
 8012120:	9002      	str	r0, [sp, #8]
 8012122:	9006      	str	r0, [sp, #24]
 8012124:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012128:	4809      	ldr	r0, [pc, #36]	; (8012150 <siprintf+0x38>)
 801212a:	9107      	str	r1, [sp, #28]
 801212c:	9104      	str	r1, [sp, #16]
 801212e:	4909      	ldr	r1, [pc, #36]	; (8012154 <siprintf+0x3c>)
 8012130:	f853 2b04 	ldr.w	r2, [r3], #4
 8012134:	9105      	str	r1, [sp, #20]
 8012136:	6800      	ldr	r0, [r0, #0]
 8012138:	9301      	str	r3, [sp, #4]
 801213a:	a902      	add	r1, sp, #8
 801213c:	f002 fbfc 	bl	8014938 <_svfiprintf_r>
 8012140:	9b02      	ldr	r3, [sp, #8]
 8012142:	2200      	movs	r2, #0
 8012144:	701a      	strb	r2, [r3, #0]
 8012146:	b01c      	add	sp, #112	; 0x70
 8012148:	f85d eb04 	ldr.w	lr, [sp], #4
 801214c:	b003      	add	sp, #12
 801214e:	4770      	bx	lr
 8012150:	2000026c 	.word	0x2000026c
 8012154:	ffff0208 	.word	0xffff0208

08012158 <__sread>:
 8012158:	b510      	push	{r4, lr}
 801215a:	460c      	mov	r4, r1
 801215c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012160:	f000 f86c 	bl	801223c <_read_r>
 8012164:	2800      	cmp	r0, #0
 8012166:	bfab      	itete	ge
 8012168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801216a:	89a3      	ldrhlt	r3, [r4, #12]
 801216c:	181b      	addge	r3, r3, r0
 801216e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012172:	bfac      	ite	ge
 8012174:	6563      	strge	r3, [r4, #84]	; 0x54
 8012176:	81a3      	strhlt	r3, [r4, #12]
 8012178:	bd10      	pop	{r4, pc}

0801217a <__swrite>:
 801217a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801217e:	461f      	mov	r7, r3
 8012180:	898b      	ldrh	r3, [r1, #12]
 8012182:	05db      	lsls	r3, r3, #23
 8012184:	4605      	mov	r5, r0
 8012186:	460c      	mov	r4, r1
 8012188:	4616      	mov	r6, r2
 801218a:	d505      	bpl.n	8012198 <__swrite+0x1e>
 801218c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012190:	2302      	movs	r3, #2
 8012192:	2200      	movs	r2, #0
 8012194:	f000 f840 	bl	8012218 <_lseek_r>
 8012198:	89a3      	ldrh	r3, [r4, #12]
 801219a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801219e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80121a2:	81a3      	strh	r3, [r4, #12]
 80121a4:	4632      	mov	r2, r6
 80121a6:	463b      	mov	r3, r7
 80121a8:	4628      	mov	r0, r5
 80121aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121ae:	f000 b857 	b.w	8012260 <_write_r>

080121b2 <__sseek>:
 80121b2:	b510      	push	{r4, lr}
 80121b4:	460c      	mov	r4, r1
 80121b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121ba:	f000 f82d 	bl	8012218 <_lseek_r>
 80121be:	1c43      	adds	r3, r0, #1
 80121c0:	89a3      	ldrh	r3, [r4, #12]
 80121c2:	bf15      	itete	ne
 80121c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80121c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80121ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80121ce:	81a3      	strheq	r3, [r4, #12]
 80121d0:	bf18      	it	ne
 80121d2:	81a3      	strhne	r3, [r4, #12]
 80121d4:	bd10      	pop	{r4, pc}

080121d6 <__sclose>:
 80121d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121da:	f000 b80d 	b.w	80121f8 <_close_r>

080121de <memset>:
 80121de:	4402      	add	r2, r0
 80121e0:	4603      	mov	r3, r0
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d100      	bne.n	80121e8 <memset+0xa>
 80121e6:	4770      	bx	lr
 80121e8:	f803 1b01 	strb.w	r1, [r3], #1
 80121ec:	e7f9      	b.n	80121e2 <memset+0x4>
	...

080121f0 <_localeconv_r>:
 80121f0:	4800      	ldr	r0, [pc, #0]	; (80121f4 <_localeconv_r+0x4>)
 80121f2:	4770      	bx	lr
 80121f4:	20000360 	.word	0x20000360

080121f8 <_close_r>:
 80121f8:	b538      	push	{r3, r4, r5, lr}
 80121fa:	4d06      	ldr	r5, [pc, #24]	; (8012214 <_close_r+0x1c>)
 80121fc:	2300      	movs	r3, #0
 80121fe:	4604      	mov	r4, r0
 8012200:	4608      	mov	r0, r1
 8012202:	602b      	str	r3, [r5, #0]
 8012204:	f7f3 fe43 	bl	8005e8e <_close>
 8012208:	1c43      	adds	r3, r0, #1
 801220a:	d102      	bne.n	8012212 <_close_r+0x1a>
 801220c:	682b      	ldr	r3, [r5, #0]
 801220e:	b103      	cbz	r3, 8012212 <_close_r+0x1a>
 8012210:	6023      	str	r3, [r4, #0]
 8012212:	bd38      	pop	{r3, r4, r5, pc}
 8012214:	200023b8 	.word	0x200023b8

08012218 <_lseek_r>:
 8012218:	b538      	push	{r3, r4, r5, lr}
 801221a:	4d07      	ldr	r5, [pc, #28]	; (8012238 <_lseek_r+0x20>)
 801221c:	4604      	mov	r4, r0
 801221e:	4608      	mov	r0, r1
 8012220:	4611      	mov	r1, r2
 8012222:	2200      	movs	r2, #0
 8012224:	602a      	str	r2, [r5, #0]
 8012226:	461a      	mov	r2, r3
 8012228:	f7f3 fe58 	bl	8005edc <_lseek>
 801222c:	1c43      	adds	r3, r0, #1
 801222e:	d102      	bne.n	8012236 <_lseek_r+0x1e>
 8012230:	682b      	ldr	r3, [r5, #0]
 8012232:	b103      	cbz	r3, 8012236 <_lseek_r+0x1e>
 8012234:	6023      	str	r3, [r4, #0]
 8012236:	bd38      	pop	{r3, r4, r5, pc}
 8012238:	200023b8 	.word	0x200023b8

0801223c <_read_r>:
 801223c:	b538      	push	{r3, r4, r5, lr}
 801223e:	4d07      	ldr	r5, [pc, #28]	; (801225c <_read_r+0x20>)
 8012240:	4604      	mov	r4, r0
 8012242:	4608      	mov	r0, r1
 8012244:	4611      	mov	r1, r2
 8012246:	2200      	movs	r2, #0
 8012248:	602a      	str	r2, [r5, #0]
 801224a:	461a      	mov	r2, r3
 801224c:	f7f3 fde6 	bl	8005e1c <_read>
 8012250:	1c43      	adds	r3, r0, #1
 8012252:	d102      	bne.n	801225a <_read_r+0x1e>
 8012254:	682b      	ldr	r3, [r5, #0]
 8012256:	b103      	cbz	r3, 801225a <_read_r+0x1e>
 8012258:	6023      	str	r3, [r4, #0]
 801225a:	bd38      	pop	{r3, r4, r5, pc}
 801225c:	200023b8 	.word	0x200023b8

08012260 <_write_r>:
 8012260:	b538      	push	{r3, r4, r5, lr}
 8012262:	4d07      	ldr	r5, [pc, #28]	; (8012280 <_write_r+0x20>)
 8012264:	4604      	mov	r4, r0
 8012266:	4608      	mov	r0, r1
 8012268:	4611      	mov	r1, r2
 801226a:	2200      	movs	r2, #0
 801226c:	602a      	str	r2, [r5, #0]
 801226e:	461a      	mov	r2, r3
 8012270:	f7f3 fdf1 	bl	8005e56 <_write>
 8012274:	1c43      	adds	r3, r0, #1
 8012276:	d102      	bne.n	801227e <_write_r+0x1e>
 8012278:	682b      	ldr	r3, [r5, #0]
 801227a:	b103      	cbz	r3, 801227e <_write_r+0x1e>
 801227c:	6023      	str	r3, [r4, #0]
 801227e:	bd38      	pop	{r3, r4, r5, pc}
 8012280:	200023b8 	.word	0x200023b8

08012284 <__errno>:
 8012284:	4b01      	ldr	r3, [pc, #4]	; (801228c <__errno+0x8>)
 8012286:	6818      	ldr	r0, [r3, #0]
 8012288:	4770      	bx	lr
 801228a:	bf00      	nop
 801228c:	2000026c 	.word	0x2000026c

08012290 <__libc_init_array>:
 8012290:	b570      	push	{r4, r5, r6, lr}
 8012292:	4d0d      	ldr	r5, [pc, #52]	; (80122c8 <__libc_init_array+0x38>)
 8012294:	4c0d      	ldr	r4, [pc, #52]	; (80122cc <__libc_init_array+0x3c>)
 8012296:	1b64      	subs	r4, r4, r5
 8012298:	10a4      	asrs	r4, r4, #2
 801229a:	2600      	movs	r6, #0
 801229c:	42a6      	cmp	r6, r4
 801229e:	d109      	bne.n	80122b4 <__libc_init_array+0x24>
 80122a0:	4d0b      	ldr	r5, [pc, #44]	; (80122d0 <__libc_init_array+0x40>)
 80122a2:	4c0c      	ldr	r4, [pc, #48]	; (80122d4 <__libc_init_array+0x44>)
 80122a4:	f003 fd58 	bl	8015d58 <_init>
 80122a8:	1b64      	subs	r4, r4, r5
 80122aa:	10a4      	asrs	r4, r4, #2
 80122ac:	2600      	movs	r6, #0
 80122ae:	42a6      	cmp	r6, r4
 80122b0:	d105      	bne.n	80122be <__libc_init_array+0x2e>
 80122b2:	bd70      	pop	{r4, r5, r6, pc}
 80122b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80122b8:	4798      	blx	r3
 80122ba:	3601      	adds	r6, #1
 80122bc:	e7ee      	b.n	801229c <__libc_init_array+0xc>
 80122be:	f855 3b04 	ldr.w	r3, [r5], #4
 80122c2:	4798      	blx	r3
 80122c4:	3601      	adds	r6, #1
 80122c6:	e7f2      	b.n	80122ae <__libc_init_array+0x1e>
 80122c8:	08018b68 	.word	0x08018b68
 80122cc:	08018b68 	.word	0x08018b68
 80122d0:	08018b68 	.word	0x08018b68
 80122d4:	08018b6c 	.word	0x08018b6c

080122d8 <__retarget_lock_init_recursive>:
 80122d8:	4770      	bx	lr

080122da <__retarget_lock_acquire_recursive>:
 80122da:	4770      	bx	lr

080122dc <__retarget_lock_release_recursive>:
 80122dc:	4770      	bx	lr

080122de <memcpy>:
 80122de:	440a      	add	r2, r1
 80122e0:	4291      	cmp	r1, r2
 80122e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80122e6:	d100      	bne.n	80122ea <memcpy+0xc>
 80122e8:	4770      	bx	lr
 80122ea:	b510      	push	{r4, lr}
 80122ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80122f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80122f4:	4291      	cmp	r1, r2
 80122f6:	d1f9      	bne.n	80122ec <memcpy+0xe>
 80122f8:	bd10      	pop	{r4, pc}
	...

080122fc <nanf>:
 80122fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012304 <nanf+0x8>
 8012300:	4770      	bx	lr
 8012302:	bf00      	nop
 8012304:	7fc00000 	.word	0x7fc00000

08012308 <quorem>:
 8012308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801230c:	6903      	ldr	r3, [r0, #16]
 801230e:	690c      	ldr	r4, [r1, #16]
 8012310:	42a3      	cmp	r3, r4
 8012312:	4607      	mov	r7, r0
 8012314:	db7e      	blt.n	8012414 <quorem+0x10c>
 8012316:	3c01      	subs	r4, #1
 8012318:	f101 0814 	add.w	r8, r1, #20
 801231c:	f100 0514 	add.w	r5, r0, #20
 8012320:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012324:	9301      	str	r3, [sp, #4]
 8012326:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801232a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801232e:	3301      	adds	r3, #1
 8012330:	429a      	cmp	r2, r3
 8012332:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012336:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801233a:	fbb2 f6f3 	udiv	r6, r2, r3
 801233e:	d331      	bcc.n	80123a4 <quorem+0x9c>
 8012340:	f04f 0e00 	mov.w	lr, #0
 8012344:	4640      	mov	r0, r8
 8012346:	46ac      	mov	ip, r5
 8012348:	46f2      	mov	sl, lr
 801234a:	f850 2b04 	ldr.w	r2, [r0], #4
 801234e:	b293      	uxth	r3, r2
 8012350:	fb06 e303 	mla	r3, r6, r3, lr
 8012354:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012358:	0c1a      	lsrs	r2, r3, #16
 801235a:	b29b      	uxth	r3, r3
 801235c:	ebaa 0303 	sub.w	r3, sl, r3
 8012360:	f8dc a000 	ldr.w	sl, [ip]
 8012364:	fa13 f38a 	uxtah	r3, r3, sl
 8012368:	fb06 220e 	mla	r2, r6, lr, r2
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	9b00      	ldr	r3, [sp, #0]
 8012370:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012374:	b292      	uxth	r2, r2
 8012376:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801237a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801237e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012382:	4581      	cmp	r9, r0
 8012384:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012388:	f84c 3b04 	str.w	r3, [ip], #4
 801238c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012390:	d2db      	bcs.n	801234a <quorem+0x42>
 8012392:	f855 300b 	ldr.w	r3, [r5, fp]
 8012396:	b92b      	cbnz	r3, 80123a4 <quorem+0x9c>
 8012398:	9b01      	ldr	r3, [sp, #4]
 801239a:	3b04      	subs	r3, #4
 801239c:	429d      	cmp	r5, r3
 801239e:	461a      	mov	r2, r3
 80123a0:	d32c      	bcc.n	80123fc <quorem+0xf4>
 80123a2:	613c      	str	r4, [r7, #16]
 80123a4:	4638      	mov	r0, r7
 80123a6:	f001 f9ef 	bl	8013788 <__mcmp>
 80123aa:	2800      	cmp	r0, #0
 80123ac:	db22      	blt.n	80123f4 <quorem+0xec>
 80123ae:	3601      	adds	r6, #1
 80123b0:	4629      	mov	r1, r5
 80123b2:	2000      	movs	r0, #0
 80123b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80123b8:	f8d1 c000 	ldr.w	ip, [r1]
 80123bc:	b293      	uxth	r3, r2
 80123be:	1ac3      	subs	r3, r0, r3
 80123c0:	0c12      	lsrs	r2, r2, #16
 80123c2:	fa13 f38c 	uxtah	r3, r3, ip
 80123c6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80123ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123d4:	45c1      	cmp	r9, r8
 80123d6:	f841 3b04 	str.w	r3, [r1], #4
 80123da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80123de:	d2e9      	bcs.n	80123b4 <quorem+0xac>
 80123e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80123e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80123e8:	b922      	cbnz	r2, 80123f4 <quorem+0xec>
 80123ea:	3b04      	subs	r3, #4
 80123ec:	429d      	cmp	r5, r3
 80123ee:	461a      	mov	r2, r3
 80123f0:	d30a      	bcc.n	8012408 <quorem+0x100>
 80123f2:	613c      	str	r4, [r7, #16]
 80123f4:	4630      	mov	r0, r6
 80123f6:	b003      	add	sp, #12
 80123f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123fc:	6812      	ldr	r2, [r2, #0]
 80123fe:	3b04      	subs	r3, #4
 8012400:	2a00      	cmp	r2, #0
 8012402:	d1ce      	bne.n	80123a2 <quorem+0x9a>
 8012404:	3c01      	subs	r4, #1
 8012406:	e7c9      	b.n	801239c <quorem+0x94>
 8012408:	6812      	ldr	r2, [r2, #0]
 801240a:	3b04      	subs	r3, #4
 801240c:	2a00      	cmp	r2, #0
 801240e:	d1f0      	bne.n	80123f2 <quorem+0xea>
 8012410:	3c01      	subs	r4, #1
 8012412:	e7eb      	b.n	80123ec <quorem+0xe4>
 8012414:	2000      	movs	r0, #0
 8012416:	e7ee      	b.n	80123f6 <quorem+0xee>

08012418 <_dtoa_r>:
 8012418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801241c:	ed2d 8b04 	vpush	{d8-d9}
 8012420:	69c5      	ldr	r5, [r0, #28]
 8012422:	b093      	sub	sp, #76	; 0x4c
 8012424:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012428:	ec57 6b10 	vmov	r6, r7, d0
 801242c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012430:	9107      	str	r1, [sp, #28]
 8012432:	4604      	mov	r4, r0
 8012434:	920a      	str	r2, [sp, #40]	; 0x28
 8012436:	930d      	str	r3, [sp, #52]	; 0x34
 8012438:	b975      	cbnz	r5, 8012458 <_dtoa_r+0x40>
 801243a:	2010      	movs	r0, #16
 801243c:	f000 fe2a 	bl	8013094 <malloc>
 8012440:	4602      	mov	r2, r0
 8012442:	61e0      	str	r0, [r4, #28]
 8012444:	b920      	cbnz	r0, 8012450 <_dtoa_r+0x38>
 8012446:	4bae      	ldr	r3, [pc, #696]	; (8012700 <_dtoa_r+0x2e8>)
 8012448:	21ef      	movs	r1, #239	; 0xef
 801244a:	48ae      	ldr	r0, [pc, #696]	; (8012704 <_dtoa_r+0x2ec>)
 801244c:	f002 fc64 	bl	8014d18 <__assert_func>
 8012450:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012454:	6005      	str	r5, [r0, #0]
 8012456:	60c5      	str	r5, [r0, #12]
 8012458:	69e3      	ldr	r3, [r4, #28]
 801245a:	6819      	ldr	r1, [r3, #0]
 801245c:	b151      	cbz	r1, 8012474 <_dtoa_r+0x5c>
 801245e:	685a      	ldr	r2, [r3, #4]
 8012460:	604a      	str	r2, [r1, #4]
 8012462:	2301      	movs	r3, #1
 8012464:	4093      	lsls	r3, r2
 8012466:	608b      	str	r3, [r1, #8]
 8012468:	4620      	mov	r0, r4
 801246a:	f000 ff07 	bl	801327c <_Bfree>
 801246e:	69e3      	ldr	r3, [r4, #28]
 8012470:	2200      	movs	r2, #0
 8012472:	601a      	str	r2, [r3, #0]
 8012474:	1e3b      	subs	r3, r7, #0
 8012476:	bfbb      	ittet	lt
 8012478:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801247c:	9303      	strlt	r3, [sp, #12]
 801247e:	2300      	movge	r3, #0
 8012480:	2201      	movlt	r2, #1
 8012482:	bfac      	ite	ge
 8012484:	f8c8 3000 	strge.w	r3, [r8]
 8012488:	f8c8 2000 	strlt.w	r2, [r8]
 801248c:	4b9e      	ldr	r3, [pc, #632]	; (8012708 <_dtoa_r+0x2f0>)
 801248e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012492:	ea33 0308 	bics.w	r3, r3, r8
 8012496:	d11b      	bne.n	80124d0 <_dtoa_r+0xb8>
 8012498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801249a:	f242 730f 	movw	r3, #9999	; 0x270f
 801249e:	6013      	str	r3, [r2, #0]
 80124a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80124a4:	4333      	orrs	r3, r6
 80124a6:	f000 8593 	beq.w	8012fd0 <_dtoa_r+0xbb8>
 80124aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124ac:	b963      	cbnz	r3, 80124c8 <_dtoa_r+0xb0>
 80124ae:	4b97      	ldr	r3, [pc, #604]	; (801270c <_dtoa_r+0x2f4>)
 80124b0:	e027      	b.n	8012502 <_dtoa_r+0xea>
 80124b2:	4b97      	ldr	r3, [pc, #604]	; (8012710 <_dtoa_r+0x2f8>)
 80124b4:	9300      	str	r3, [sp, #0]
 80124b6:	3308      	adds	r3, #8
 80124b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80124ba:	6013      	str	r3, [r2, #0]
 80124bc:	9800      	ldr	r0, [sp, #0]
 80124be:	b013      	add	sp, #76	; 0x4c
 80124c0:	ecbd 8b04 	vpop	{d8-d9}
 80124c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c8:	4b90      	ldr	r3, [pc, #576]	; (801270c <_dtoa_r+0x2f4>)
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	3303      	adds	r3, #3
 80124ce:	e7f3      	b.n	80124b8 <_dtoa_r+0xa0>
 80124d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124d4:	2200      	movs	r2, #0
 80124d6:	ec51 0b17 	vmov	r0, r1, d7
 80124da:	eeb0 8a47 	vmov.f32	s16, s14
 80124de:	eef0 8a67 	vmov.f32	s17, s15
 80124e2:	2300      	movs	r3, #0
 80124e4:	f7ee fb18 	bl	8000b18 <__aeabi_dcmpeq>
 80124e8:	4681      	mov	r9, r0
 80124ea:	b160      	cbz	r0, 8012506 <_dtoa_r+0xee>
 80124ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124ee:	2301      	movs	r3, #1
 80124f0:	6013      	str	r3, [r2, #0]
 80124f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	f000 8568 	beq.w	8012fca <_dtoa_r+0xbb2>
 80124fa:	4b86      	ldr	r3, [pc, #536]	; (8012714 <_dtoa_r+0x2fc>)
 80124fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80124fe:	6013      	str	r3, [r2, #0]
 8012500:	3b01      	subs	r3, #1
 8012502:	9300      	str	r3, [sp, #0]
 8012504:	e7da      	b.n	80124bc <_dtoa_r+0xa4>
 8012506:	aa10      	add	r2, sp, #64	; 0x40
 8012508:	a911      	add	r1, sp, #68	; 0x44
 801250a:	4620      	mov	r0, r4
 801250c:	eeb0 0a48 	vmov.f32	s0, s16
 8012510:	eef0 0a68 	vmov.f32	s1, s17
 8012514:	f001 fa4e 	bl	80139b4 <__d2b>
 8012518:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801251c:	4682      	mov	sl, r0
 801251e:	2d00      	cmp	r5, #0
 8012520:	d07f      	beq.n	8012622 <_dtoa_r+0x20a>
 8012522:	ee18 3a90 	vmov	r3, s17
 8012526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801252a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801252e:	ec51 0b18 	vmov	r0, r1, d8
 8012532:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801253a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801253e:	4619      	mov	r1, r3
 8012540:	2200      	movs	r2, #0
 8012542:	4b75      	ldr	r3, [pc, #468]	; (8012718 <_dtoa_r+0x300>)
 8012544:	f7ed fec8 	bl	80002d8 <__aeabi_dsub>
 8012548:	a367      	add	r3, pc, #412	; (adr r3, 80126e8 <_dtoa_r+0x2d0>)
 801254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801254e:	f7ee f87b 	bl	8000648 <__aeabi_dmul>
 8012552:	a367      	add	r3, pc, #412	; (adr r3, 80126f0 <_dtoa_r+0x2d8>)
 8012554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012558:	f7ed fec0 	bl	80002dc <__adddf3>
 801255c:	4606      	mov	r6, r0
 801255e:	4628      	mov	r0, r5
 8012560:	460f      	mov	r7, r1
 8012562:	f7ee f807 	bl	8000574 <__aeabi_i2d>
 8012566:	a364      	add	r3, pc, #400	; (adr r3, 80126f8 <_dtoa_r+0x2e0>)
 8012568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256c:	f7ee f86c 	bl	8000648 <__aeabi_dmul>
 8012570:	4602      	mov	r2, r0
 8012572:	460b      	mov	r3, r1
 8012574:	4630      	mov	r0, r6
 8012576:	4639      	mov	r1, r7
 8012578:	f7ed feb0 	bl	80002dc <__adddf3>
 801257c:	4606      	mov	r6, r0
 801257e:	460f      	mov	r7, r1
 8012580:	f7ee fb12 	bl	8000ba8 <__aeabi_d2iz>
 8012584:	2200      	movs	r2, #0
 8012586:	4683      	mov	fp, r0
 8012588:	2300      	movs	r3, #0
 801258a:	4630      	mov	r0, r6
 801258c:	4639      	mov	r1, r7
 801258e:	f7ee facd 	bl	8000b2c <__aeabi_dcmplt>
 8012592:	b148      	cbz	r0, 80125a8 <_dtoa_r+0x190>
 8012594:	4658      	mov	r0, fp
 8012596:	f7ed ffed 	bl	8000574 <__aeabi_i2d>
 801259a:	4632      	mov	r2, r6
 801259c:	463b      	mov	r3, r7
 801259e:	f7ee fabb 	bl	8000b18 <__aeabi_dcmpeq>
 80125a2:	b908      	cbnz	r0, 80125a8 <_dtoa_r+0x190>
 80125a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80125a8:	f1bb 0f16 	cmp.w	fp, #22
 80125ac:	d857      	bhi.n	801265e <_dtoa_r+0x246>
 80125ae:	4b5b      	ldr	r3, [pc, #364]	; (801271c <_dtoa_r+0x304>)
 80125b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80125b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b8:	ec51 0b18 	vmov	r0, r1, d8
 80125bc:	f7ee fab6 	bl	8000b2c <__aeabi_dcmplt>
 80125c0:	2800      	cmp	r0, #0
 80125c2:	d04e      	beq.n	8012662 <_dtoa_r+0x24a>
 80125c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80125c8:	2300      	movs	r3, #0
 80125ca:	930c      	str	r3, [sp, #48]	; 0x30
 80125cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125ce:	1b5b      	subs	r3, r3, r5
 80125d0:	1e5a      	subs	r2, r3, #1
 80125d2:	bf45      	ittet	mi
 80125d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80125d8:	9305      	strmi	r3, [sp, #20]
 80125da:	2300      	movpl	r3, #0
 80125dc:	2300      	movmi	r3, #0
 80125de:	9206      	str	r2, [sp, #24]
 80125e0:	bf54      	ite	pl
 80125e2:	9305      	strpl	r3, [sp, #20]
 80125e4:	9306      	strmi	r3, [sp, #24]
 80125e6:	f1bb 0f00 	cmp.w	fp, #0
 80125ea:	db3c      	blt.n	8012666 <_dtoa_r+0x24e>
 80125ec:	9b06      	ldr	r3, [sp, #24]
 80125ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80125f2:	445b      	add	r3, fp
 80125f4:	9306      	str	r3, [sp, #24]
 80125f6:	2300      	movs	r3, #0
 80125f8:	9308      	str	r3, [sp, #32]
 80125fa:	9b07      	ldr	r3, [sp, #28]
 80125fc:	2b09      	cmp	r3, #9
 80125fe:	d868      	bhi.n	80126d2 <_dtoa_r+0x2ba>
 8012600:	2b05      	cmp	r3, #5
 8012602:	bfc4      	itt	gt
 8012604:	3b04      	subgt	r3, #4
 8012606:	9307      	strgt	r3, [sp, #28]
 8012608:	9b07      	ldr	r3, [sp, #28]
 801260a:	f1a3 0302 	sub.w	r3, r3, #2
 801260e:	bfcc      	ite	gt
 8012610:	2500      	movgt	r5, #0
 8012612:	2501      	movle	r5, #1
 8012614:	2b03      	cmp	r3, #3
 8012616:	f200 8085 	bhi.w	8012724 <_dtoa_r+0x30c>
 801261a:	e8df f003 	tbb	[pc, r3]
 801261e:	3b2e      	.short	0x3b2e
 8012620:	5839      	.short	0x5839
 8012622:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012626:	441d      	add	r5, r3
 8012628:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801262c:	2b20      	cmp	r3, #32
 801262e:	bfc1      	itttt	gt
 8012630:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012634:	fa08 f803 	lslgt.w	r8, r8, r3
 8012638:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801263c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012640:	bfd6      	itet	le
 8012642:	f1c3 0320 	rsble	r3, r3, #32
 8012646:	ea48 0003 	orrgt.w	r0, r8, r3
 801264a:	fa06 f003 	lslle.w	r0, r6, r3
 801264e:	f7ed ff81 	bl	8000554 <__aeabi_ui2d>
 8012652:	2201      	movs	r2, #1
 8012654:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012658:	3d01      	subs	r5, #1
 801265a:	920e      	str	r2, [sp, #56]	; 0x38
 801265c:	e76f      	b.n	801253e <_dtoa_r+0x126>
 801265e:	2301      	movs	r3, #1
 8012660:	e7b3      	b.n	80125ca <_dtoa_r+0x1b2>
 8012662:	900c      	str	r0, [sp, #48]	; 0x30
 8012664:	e7b2      	b.n	80125cc <_dtoa_r+0x1b4>
 8012666:	9b05      	ldr	r3, [sp, #20]
 8012668:	eba3 030b 	sub.w	r3, r3, fp
 801266c:	9305      	str	r3, [sp, #20]
 801266e:	f1cb 0300 	rsb	r3, fp, #0
 8012672:	9308      	str	r3, [sp, #32]
 8012674:	2300      	movs	r3, #0
 8012676:	930b      	str	r3, [sp, #44]	; 0x2c
 8012678:	e7bf      	b.n	80125fa <_dtoa_r+0x1e2>
 801267a:	2300      	movs	r3, #0
 801267c:	9309      	str	r3, [sp, #36]	; 0x24
 801267e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012680:	2b00      	cmp	r3, #0
 8012682:	dc52      	bgt.n	801272a <_dtoa_r+0x312>
 8012684:	2301      	movs	r3, #1
 8012686:	9301      	str	r3, [sp, #4]
 8012688:	9304      	str	r3, [sp, #16]
 801268a:	461a      	mov	r2, r3
 801268c:	920a      	str	r2, [sp, #40]	; 0x28
 801268e:	e00b      	b.n	80126a8 <_dtoa_r+0x290>
 8012690:	2301      	movs	r3, #1
 8012692:	e7f3      	b.n	801267c <_dtoa_r+0x264>
 8012694:	2300      	movs	r3, #0
 8012696:	9309      	str	r3, [sp, #36]	; 0x24
 8012698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801269a:	445b      	add	r3, fp
 801269c:	9301      	str	r3, [sp, #4]
 801269e:	3301      	adds	r3, #1
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	9304      	str	r3, [sp, #16]
 80126a4:	bfb8      	it	lt
 80126a6:	2301      	movlt	r3, #1
 80126a8:	69e0      	ldr	r0, [r4, #28]
 80126aa:	2100      	movs	r1, #0
 80126ac:	2204      	movs	r2, #4
 80126ae:	f102 0614 	add.w	r6, r2, #20
 80126b2:	429e      	cmp	r6, r3
 80126b4:	d93d      	bls.n	8012732 <_dtoa_r+0x31a>
 80126b6:	6041      	str	r1, [r0, #4]
 80126b8:	4620      	mov	r0, r4
 80126ba:	f000 fd9f 	bl	80131fc <_Balloc>
 80126be:	9000      	str	r0, [sp, #0]
 80126c0:	2800      	cmp	r0, #0
 80126c2:	d139      	bne.n	8012738 <_dtoa_r+0x320>
 80126c4:	4b16      	ldr	r3, [pc, #88]	; (8012720 <_dtoa_r+0x308>)
 80126c6:	4602      	mov	r2, r0
 80126c8:	f240 11af 	movw	r1, #431	; 0x1af
 80126cc:	e6bd      	b.n	801244a <_dtoa_r+0x32>
 80126ce:	2301      	movs	r3, #1
 80126d0:	e7e1      	b.n	8012696 <_dtoa_r+0x27e>
 80126d2:	2501      	movs	r5, #1
 80126d4:	2300      	movs	r3, #0
 80126d6:	9307      	str	r3, [sp, #28]
 80126d8:	9509      	str	r5, [sp, #36]	; 0x24
 80126da:	f04f 33ff 	mov.w	r3, #4294967295
 80126de:	9301      	str	r3, [sp, #4]
 80126e0:	9304      	str	r3, [sp, #16]
 80126e2:	2200      	movs	r2, #0
 80126e4:	2312      	movs	r3, #18
 80126e6:	e7d1      	b.n	801268c <_dtoa_r+0x274>
 80126e8:	636f4361 	.word	0x636f4361
 80126ec:	3fd287a7 	.word	0x3fd287a7
 80126f0:	8b60c8b3 	.word	0x8b60c8b3
 80126f4:	3fc68a28 	.word	0x3fc68a28
 80126f8:	509f79fb 	.word	0x509f79fb
 80126fc:	3fd34413 	.word	0x3fd34413
 8012700:	0801876e 	.word	0x0801876e
 8012704:	08018785 	.word	0x08018785
 8012708:	7ff00000 	.word	0x7ff00000
 801270c:	0801876a 	.word	0x0801876a
 8012710:	08018761 	.word	0x08018761
 8012714:	08018739 	.word	0x08018739
 8012718:	3ff80000 	.word	0x3ff80000
 801271c:	08018870 	.word	0x08018870
 8012720:	080187dd 	.word	0x080187dd
 8012724:	2301      	movs	r3, #1
 8012726:	9309      	str	r3, [sp, #36]	; 0x24
 8012728:	e7d7      	b.n	80126da <_dtoa_r+0x2c2>
 801272a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801272c:	9301      	str	r3, [sp, #4]
 801272e:	9304      	str	r3, [sp, #16]
 8012730:	e7ba      	b.n	80126a8 <_dtoa_r+0x290>
 8012732:	3101      	adds	r1, #1
 8012734:	0052      	lsls	r2, r2, #1
 8012736:	e7ba      	b.n	80126ae <_dtoa_r+0x296>
 8012738:	69e3      	ldr	r3, [r4, #28]
 801273a:	9a00      	ldr	r2, [sp, #0]
 801273c:	601a      	str	r2, [r3, #0]
 801273e:	9b04      	ldr	r3, [sp, #16]
 8012740:	2b0e      	cmp	r3, #14
 8012742:	f200 80a8 	bhi.w	8012896 <_dtoa_r+0x47e>
 8012746:	2d00      	cmp	r5, #0
 8012748:	f000 80a5 	beq.w	8012896 <_dtoa_r+0x47e>
 801274c:	f1bb 0f00 	cmp.w	fp, #0
 8012750:	dd38      	ble.n	80127c4 <_dtoa_r+0x3ac>
 8012752:	4bc0      	ldr	r3, [pc, #768]	; (8012a54 <_dtoa_r+0x63c>)
 8012754:	f00b 020f 	and.w	r2, fp, #15
 8012758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801275c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012760:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012764:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012768:	d019      	beq.n	801279e <_dtoa_r+0x386>
 801276a:	4bbb      	ldr	r3, [pc, #748]	; (8012a58 <_dtoa_r+0x640>)
 801276c:	ec51 0b18 	vmov	r0, r1, d8
 8012770:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012774:	f7ee f892 	bl	800089c <__aeabi_ddiv>
 8012778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801277c:	f008 080f 	and.w	r8, r8, #15
 8012780:	2503      	movs	r5, #3
 8012782:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012a58 <_dtoa_r+0x640>
 8012786:	f1b8 0f00 	cmp.w	r8, #0
 801278a:	d10a      	bne.n	80127a2 <_dtoa_r+0x38a>
 801278c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012790:	4632      	mov	r2, r6
 8012792:	463b      	mov	r3, r7
 8012794:	f7ee f882 	bl	800089c <__aeabi_ddiv>
 8012798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801279c:	e02b      	b.n	80127f6 <_dtoa_r+0x3de>
 801279e:	2502      	movs	r5, #2
 80127a0:	e7ef      	b.n	8012782 <_dtoa_r+0x36a>
 80127a2:	f018 0f01 	tst.w	r8, #1
 80127a6:	d008      	beq.n	80127ba <_dtoa_r+0x3a2>
 80127a8:	4630      	mov	r0, r6
 80127aa:	4639      	mov	r1, r7
 80127ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80127b0:	f7ed ff4a 	bl	8000648 <__aeabi_dmul>
 80127b4:	3501      	adds	r5, #1
 80127b6:	4606      	mov	r6, r0
 80127b8:	460f      	mov	r7, r1
 80127ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80127be:	f109 0908 	add.w	r9, r9, #8
 80127c2:	e7e0      	b.n	8012786 <_dtoa_r+0x36e>
 80127c4:	f000 809f 	beq.w	8012906 <_dtoa_r+0x4ee>
 80127c8:	f1cb 0600 	rsb	r6, fp, #0
 80127cc:	4ba1      	ldr	r3, [pc, #644]	; (8012a54 <_dtoa_r+0x63c>)
 80127ce:	4fa2      	ldr	r7, [pc, #648]	; (8012a58 <_dtoa_r+0x640>)
 80127d0:	f006 020f 	and.w	r2, r6, #15
 80127d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80127d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127dc:	ec51 0b18 	vmov	r0, r1, d8
 80127e0:	f7ed ff32 	bl	8000648 <__aeabi_dmul>
 80127e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127e8:	1136      	asrs	r6, r6, #4
 80127ea:	2300      	movs	r3, #0
 80127ec:	2502      	movs	r5, #2
 80127ee:	2e00      	cmp	r6, #0
 80127f0:	d17e      	bne.n	80128f0 <_dtoa_r+0x4d8>
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d1d0      	bne.n	8012798 <_dtoa_r+0x380>
 80127f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	f000 8084 	beq.w	801290a <_dtoa_r+0x4f2>
 8012802:	4b96      	ldr	r3, [pc, #600]	; (8012a5c <_dtoa_r+0x644>)
 8012804:	2200      	movs	r2, #0
 8012806:	4640      	mov	r0, r8
 8012808:	4649      	mov	r1, r9
 801280a:	f7ee f98f 	bl	8000b2c <__aeabi_dcmplt>
 801280e:	2800      	cmp	r0, #0
 8012810:	d07b      	beq.n	801290a <_dtoa_r+0x4f2>
 8012812:	9b04      	ldr	r3, [sp, #16]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d078      	beq.n	801290a <_dtoa_r+0x4f2>
 8012818:	9b01      	ldr	r3, [sp, #4]
 801281a:	2b00      	cmp	r3, #0
 801281c:	dd39      	ble.n	8012892 <_dtoa_r+0x47a>
 801281e:	4b90      	ldr	r3, [pc, #576]	; (8012a60 <_dtoa_r+0x648>)
 8012820:	2200      	movs	r2, #0
 8012822:	4640      	mov	r0, r8
 8012824:	4649      	mov	r1, r9
 8012826:	f7ed ff0f 	bl	8000648 <__aeabi_dmul>
 801282a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801282e:	9e01      	ldr	r6, [sp, #4]
 8012830:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012834:	3501      	adds	r5, #1
 8012836:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801283a:	4628      	mov	r0, r5
 801283c:	f7ed fe9a 	bl	8000574 <__aeabi_i2d>
 8012840:	4642      	mov	r2, r8
 8012842:	464b      	mov	r3, r9
 8012844:	f7ed ff00 	bl	8000648 <__aeabi_dmul>
 8012848:	4b86      	ldr	r3, [pc, #536]	; (8012a64 <_dtoa_r+0x64c>)
 801284a:	2200      	movs	r2, #0
 801284c:	f7ed fd46 	bl	80002dc <__adddf3>
 8012850:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012858:	9303      	str	r3, [sp, #12]
 801285a:	2e00      	cmp	r6, #0
 801285c:	d158      	bne.n	8012910 <_dtoa_r+0x4f8>
 801285e:	4b82      	ldr	r3, [pc, #520]	; (8012a68 <_dtoa_r+0x650>)
 8012860:	2200      	movs	r2, #0
 8012862:	4640      	mov	r0, r8
 8012864:	4649      	mov	r1, r9
 8012866:	f7ed fd37 	bl	80002d8 <__aeabi_dsub>
 801286a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801286e:	4680      	mov	r8, r0
 8012870:	4689      	mov	r9, r1
 8012872:	f7ee f979 	bl	8000b68 <__aeabi_dcmpgt>
 8012876:	2800      	cmp	r0, #0
 8012878:	f040 8296 	bne.w	8012da8 <_dtoa_r+0x990>
 801287c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012880:	4640      	mov	r0, r8
 8012882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012886:	4649      	mov	r1, r9
 8012888:	f7ee f950 	bl	8000b2c <__aeabi_dcmplt>
 801288c:	2800      	cmp	r0, #0
 801288e:	f040 8289 	bne.w	8012da4 <_dtoa_r+0x98c>
 8012892:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012896:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012898:	2b00      	cmp	r3, #0
 801289a:	f2c0 814e 	blt.w	8012b3a <_dtoa_r+0x722>
 801289e:	f1bb 0f0e 	cmp.w	fp, #14
 80128a2:	f300 814a 	bgt.w	8012b3a <_dtoa_r+0x722>
 80128a6:	4b6b      	ldr	r3, [pc, #428]	; (8012a54 <_dtoa_r+0x63c>)
 80128a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80128ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80128b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f280 80dc 	bge.w	8012a70 <_dtoa_r+0x658>
 80128b8:	9b04      	ldr	r3, [sp, #16]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	f300 80d8 	bgt.w	8012a70 <_dtoa_r+0x658>
 80128c0:	f040 826f 	bne.w	8012da2 <_dtoa_r+0x98a>
 80128c4:	4b68      	ldr	r3, [pc, #416]	; (8012a68 <_dtoa_r+0x650>)
 80128c6:	2200      	movs	r2, #0
 80128c8:	4640      	mov	r0, r8
 80128ca:	4649      	mov	r1, r9
 80128cc:	f7ed febc 	bl	8000648 <__aeabi_dmul>
 80128d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80128d4:	f7ee f93e 	bl	8000b54 <__aeabi_dcmpge>
 80128d8:	9e04      	ldr	r6, [sp, #16]
 80128da:	4637      	mov	r7, r6
 80128dc:	2800      	cmp	r0, #0
 80128de:	f040 8245 	bne.w	8012d6c <_dtoa_r+0x954>
 80128e2:	9d00      	ldr	r5, [sp, #0]
 80128e4:	2331      	movs	r3, #49	; 0x31
 80128e6:	f805 3b01 	strb.w	r3, [r5], #1
 80128ea:	f10b 0b01 	add.w	fp, fp, #1
 80128ee:	e241      	b.n	8012d74 <_dtoa_r+0x95c>
 80128f0:	07f2      	lsls	r2, r6, #31
 80128f2:	d505      	bpl.n	8012900 <_dtoa_r+0x4e8>
 80128f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128f8:	f7ed fea6 	bl	8000648 <__aeabi_dmul>
 80128fc:	3501      	adds	r5, #1
 80128fe:	2301      	movs	r3, #1
 8012900:	1076      	asrs	r6, r6, #1
 8012902:	3708      	adds	r7, #8
 8012904:	e773      	b.n	80127ee <_dtoa_r+0x3d6>
 8012906:	2502      	movs	r5, #2
 8012908:	e775      	b.n	80127f6 <_dtoa_r+0x3de>
 801290a:	9e04      	ldr	r6, [sp, #16]
 801290c:	465f      	mov	r7, fp
 801290e:	e792      	b.n	8012836 <_dtoa_r+0x41e>
 8012910:	9900      	ldr	r1, [sp, #0]
 8012912:	4b50      	ldr	r3, [pc, #320]	; (8012a54 <_dtoa_r+0x63c>)
 8012914:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012918:	4431      	add	r1, r6
 801291a:	9102      	str	r1, [sp, #8]
 801291c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801291e:	eeb0 9a47 	vmov.f32	s18, s14
 8012922:	eef0 9a67 	vmov.f32	s19, s15
 8012926:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801292a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801292e:	2900      	cmp	r1, #0
 8012930:	d044      	beq.n	80129bc <_dtoa_r+0x5a4>
 8012932:	494e      	ldr	r1, [pc, #312]	; (8012a6c <_dtoa_r+0x654>)
 8012934:	2000      	movs	r0, #0
 8012936:	f7ed ffb1 	bl	800089c <__aeabi_ddiv>
 801293a:	ec53 2b19 	vmov	r2, r3, d9
 801293e:	f7ed fccb 	bl	80002d8 <__aeabi_dsub>
 8012942:	9d00      	ldr	r5, [sp, #0]
 8012944:	ec41 0b19 	vmov	d9, r0, r1
 8012948:	4649      	mov	r1, r9
 801294a:	4640      	mov	r0, r8
 801294c:	f7ee f92c 	bl	8000ba8 <__aeabi_d2iz>
 8012950:	4606      	mov	r6, r0
 8012952:	f7ed fe0f 	bl	8000574 <__aeabi_i2d>
 8012956:	4602      	mov	r2, r0
 8012958:	460b      	mov	r3, r1
 801295a:	4640      	mov	r0, r8
 801295c:	4649      	mov	r1, r9
 801295e:	f7ed fcbb 	bl	80002d8 <__aeabi_dsub>
 8012962:	3630      	adds	r6, #48	; 0x30
 8012964:	f805 6b01 	strb.w	r6, [r5], #1
 8012968:	ec53 2b19 	vmov	r2, r3, d9
 801296c:	4680      	mov	r8, r0
 801296e:	4689      	mov	r9, r1
 8012970:	f7ee f8dc 	bl	8000b2c <__aeabi_dcmplt>
 8012974:	2800      	cmp	r0, #0
 8012976:	d164      	bne.n	8012a42 <_dtoa_r+0x62a>
 8012978:	4642      	mov	r2, r8
 801297a:	464b      	mov	r3, r9
 801297c:	4937      	ldr	r1, [pc, #220]	; (8012a5c <_dtoa_r+0x644>)
 801297e:	2000      	movs	r0, #0
 8012980:	f7ed fcaa 	bl	80002d8 <__aeabi_dsub>
 8012984:	ec53 2b19 	vmov	r2, r3, d9
 8012988:	f7ee f8d0 	bl	8000b2c <__aeabi_dcmplt>
 801298c:	2800      	cmp	r0, #0
 801298e:	f040 80b6 	bne.w	8012afe <_dtoa_r+0x6e6>
 8012992:	9b02      	ldr	r3, [sp, #8]
 8012994:	429d      	cmp	r5, r3
 8012996:	f43f af7c 	beq.w	8012892 <_dtoa_r+0x47a>
 801299a:	4b31      	ldr	r3, [pc, #196]	; (8012a60 <_dtoa_r+0x648>)
 801299c:	ec51 0b19 	vmov	r0, r1, d9
 80129a0:	2200      	movs	r2, #0
 80129a2:	f7ed fe51 	bl	8000648 <__aeabi_dmul>
 80129a6:	4b2e      	ldr	r3, [pc, #184]	; (8012a60 <_dtoa_r+0x648>)
 80129a8:	ec41 0b19 	vmov	d9, r0, r1
 80129ac:	2200      	movs	r2, #0
 80129ae:	4640      	mov	r0, r8
 80129b0:	4649      	mov	r1, r9
 80129b2:	f7ed fe49 	bl	8000648 <__aeabi_dmul>
 80129b6:	4680      	mov	r8, r0
 80129b8:	4689      	mov	r9, r1
 80129ba:	e7c5      	b.n	8012948 <_dtoa_r+0x530>
 80129bc:	ec51 0b17 	vmov	r0, r1, d7
 80129c0:	f7ed fe42 	bl	8000648 <__aeabi_dmul>
 80129c4:	9b02      	ldr	r3, [sp, #8]
 80129c6:	9d00      	ldr	r5, [sp, #0]
 80129c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80129ca:	ec41 0b19 	vmov	d9, r0, r1
 80129ce:	4649      	mov	r1, r9
 80129d0:	4640      	mov	r0, r8
 80129d2:	f7ee f8e9 	bl	8000ba8 <__aeabi_d2iz>
 80129d6:	4606      	mov	r6, r0
 80129d8:	f7ed fdcc 	bl	8000574 <__aeabi_i2d>
 80129dc:	3630      	adds	r6, #48	; 0x30
 80129de:	4602      	mov	r2, r0
 80129e0:	460b      	mov	r3, r1
 80129e2:	4640      	mov	r0, r8
 80129e4:	4649      	mov	r1, r9
 80129e6:	f7ed fc77 	bl	80002d8 <__aeabi_dsub>
 80129ea:	f805 6b01 	strb.w	r6, [r5], #1
 80129ee:	9b02      	ldr	r3, [sp, #8]
 80129f0:	429d      	cmp	r5, r3
 80129f2:	4680      	mov	r8, r0
 80129f4:	4689      	mov	r9, r1
 80129f6:	f04f 0200 	mov.w	r2, #0
 80129fa:	d124      	bne.n	8012a46 <_dtoa_r+0x62e>
 80129fc:	4b1b      	ldr	r3, [pc, #108]	; (8012a6c <_dtoa_r+0x654>)
 80129fe:	ec51 0b19 	vmov	r0, r1, d9
 8012a02:	f7ed fc6b 	bl	80002dc <__adddf3>
 8012a06:	4602      	mov	r2, r0
 8012a08:	460b      	mov	r3, r1
 8012a0a:	4640      	mov	r0, r8
 8012a0c:	4649      	mov	r1, r9
 8012a0e:	f7ee f8ab 	bl	8000b68 <__aeabi_dcmpgt>
 8012a12:	2800      	cmp	r0, #0
 8012a14:	d173      	bne.n	8012afe <_dtoa_r+0x6e6>
 8012a16:	ec53 2b19 	vmov	r2, r3, d9
 8012a1a:	4914      	ldr	r1, [pc, #80]	; (8012a6c <_dtoa_r+0x654>)
 8012a1c:	2000      	movs	r0, #0
 8012a1e:	f7ed fc5b 	bl	80002d8 <__aeabi_dsub>
 8012a22:	4602      	mov	r2, r0
 8012a24:	460b      	mov	r3, r1
 8012a26:	4640      	mov	r0, r8
 8012a28:	4649      	mov	r1, r9
 8012a2a:	f7ee f87f 	bl	8000b2c <__aeabi_dcmplt>
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	f43f af2f 	beq.w	8012892 <_dtoa_r+0x47a>
 8012a34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012a36:	1e6b      	subs	r3, r5, #1
 8012a38:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012a3e:	2b30      	cmp	r3, #48	; 0x30
 8012a40:	d0f8      	beq.n	8012a34 <_dtoa_r+0x61c>
 8012a42:	46bb      	mov	fp, r7
 8012a44:	e04a      	b.n	8012adc <_dtoa_r+0x6c4>
 8012a46:	4b06      	ldr	r3, [pc, #24]	; (8012a60 <_dtoa_r+0x648>)
 8012a48:	f7ed fdfe 	bl	8000648 <__aeabi_dmul>
 8012a4c:	4680      	mov	r8, r0
 8012a4e:	4689      	mov	r9, r1
 8012a50:	e7bd      	b.n	80129ce <_dtoa_r+0x5b6>
 8012a52:	bf00      	nop
 8012a54:	08018870 	.word	0x08018870
 8012a58:	08018848 	.word	0x08018848
 8012a5c:	3ff00000 	.word	0x3ff00000
 8012a60:	40240000 	.word	0x40240000
 8012a64:	401c0000 	.word	0x401c0000
 8012a68:	40140000 	.word	0x40140000
 8012a6c:	3fe00000 	.word	0x3fe00000
 8012a70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012a74:	9d00      	ldr	r5, [sp, #0]
 8012a76:	4642      	mov	r2, r8
 8012a78:	464b      	mov	r3, r9
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	4639      	mov	r1, r7
 8012a7e:	f7ed ff0d 	bl	800089c <__aeabi_ddiv>
 8012a82:	f7ee f891 	bl	8000ba8 <__aeabi_d2iz>
 8012a86:	9001      	str	r0, [sp, #4]
 8012a88:	f7ed fd74 	bl	8000574 <__aeabi_i2d>
 8012a8c:	4642      	mov	r2, r8
 8012a8e:	464b      	mov	r3, r9
 8012a90:	f7ed fdda 	bl	8000648 <__aeabi_dmul>
 8012a94:	4602      	mov	r2, r0
 8012a96:	460b      	mov	r3, r1
 8012a98:	4630      	mov	r0, r6
 8012a9a:	4639      	mov	r1, r7
 8012a9c:	f7ed fc1c 	bl	80002d8 <__aeabi_dsub>
 8012aa0:	9e01      	ldr	r6, [sp, #4]
 8012aa2:	9f04      	ldr	r7, [sp, #16]
 8012aa4:	3630      	adds	r6, #48	; 0x30
 8012aa6:	f805 6b01 	strb.w	r6, [r5], #1
 8012aaa:	9e00      	ldr	r6, [sp, #0]
 8012aac:	1bae      	subs	r6, r5, r6
 8012aae:	42b7      	cmp	r7, r6
 8012ab0:	4602      	mov	r2, r0
 8012ab2:	460b      	mov	r3, r1
 8012ab4:	d134      	bne.n	8012b20 <_dtoa_r+0x708>
 8012ab6:	f7ed fc11 	bl	80002dc <__adddf3>
 8012aba:	4642      	mov	r2, r8
 8012abc:	464b      	mov	r3, r9
 8012abe:	4606      	mov	r6, r0
 8012ac0:	460f      	mov	r7, r1
 8012ac2:	f7ee f851 	bl	8000b68 <__aeabi_dcmpgt>
 8012ac6:	b9c8      	cbnz	r0, 8012afc <_dtoa_r+0x6e4>
 8012ac8:	4642      	mov	r2, r8
 8012aca:	464b      	mov	r3, r9
 8012acc:	4630      	mov	r0, r6
 8012ace:	4639      	mov	r1, r7
 8012ad0:	f7ee f822 	bl	8000b18 <__aeabi_dcmpeq>
 8012ad4:	b110      	cbz	r0, 8012adc <_dtoa_r+0x6c4>
 8012ad6:	9b01      	ldr	r3, [sp, #4]
 8012ad8:	07db      	lsls	r3, r3, #31
 8012ada:	d40f      	bmi.n	8012afc <_dtoa_r+0x6e4>
 8012adc:	4651      	mov	r1, sl
 8012ade:	4620      	mov	r0, r4
 8012ae0:	f000 fbcc 	bl	801327c <_Bfree>
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ae8:	702b      	strb	r3, [r5, #0]
 8012aea:	f10b 0301 	add.w	r3, fp, #1
 8012aee:	6013      	str	r3, [r2, #0]
 8012af0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	f43f ace2 	beq.w	80124bc <_dtoa_r+0xa4>
 8012af8:	601d      	str	r5, [r3, #0]
 8012afa:	e4df      	b.n	80124bc <_dtoa_r+0xa4>
 8012afc:	465f      	mov	r7, fp
 8012afe:	462b      	mov	r3, r5
 8012b00:	461d      	mov	r5, r3
 8012b02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b06:	2a39      	cmp	r2, #57	; 0x39
 8012b08:	d106      	bne.n	8012b18 <_dtoa_r+0x700>
 8012b0a:	9a00      	ldr	r2, [sp, #0]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d1f7      	bne.n	8012b00 <_dtoa_r+0x6e8>
 8012b10:	9900      	ldr	r1, [sp, #0]
 8012b12:	2230      	movs	r2, #48	; 0x30
 8012b14:	3701      	adds	r7, #1
 8012b16:	700a      	strb	r2, [r1, #0]
 8012b18:	781a      	ldrb	r2, [r3, #0]
 8012b1a:	3201      	adds	r2, #1
 8012b1c:	701a      	strb	r2, [r3, #0]
 8012b1e:	e790      	b.n	8012a42 <_dtoa_r+0x62a>
 8012b20:	4ba3      	ldr	r3, [pc, #652]	; (8012db0 <_dtoa_r+0x998>)
 8012b22:	2200      	movs	r2, #0
 8012b24:	f7ed fd90 	bl	8000648 <__aeabi_dmul>
 8012b28:	2200      	movs	r2, #0
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	4606      	mov	r6, r0
 8012b2e:	460f      	mov	r7, r1
 8012b30:	f7ed fff2 	bl	8000b18 <__aeabi_dcmpeq>
 8012b34:	2800      	cmp	r0, #0
 8012b36:	d09e      	beq.n	8012a76 <_dtoa_r+0x65e>
 8012b38:	e7d0      	b.n	8012adc <_dtoa_r+0x6c4>
 8012b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b3c:	2a00      	cmp	r2, #0
 8012b3e:	f000 80ca 	beq.w	8012cd6 <_dtoa_r+0x8be>
 8012b42:	9a07      	ldr	r2, [sp, #28]
 8012b44:	2a01      	cmp	r2, #1
 8012b46:	f300 80ad 	bgt.w	8012ca4 <_dtoa_r+0x88c>
 8012b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b4c:	2a00      	cmp	r2, #0
 8012b4e:	f000 80a5 	beq.w	8012c9c <_dtoa_r+0x884>
 8012b52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012b56:	9e08      	ldr	r6, [sp, #32]
 8012b58:	9d05      	ldr	r5, [sp, #20]
 8012b5a:	9a05      	ldr	r2, [sp, #20]
 8012b5c:	441a      	add	r2, r3
 8012b5e:	9205      	str	r2, [sp, #20]
 8012b60:	9a06      	ldr	r2, [sp, #24]
 8012b62:	2101      	movs	r1, #1
 8012b64:	441a      	add	r2, r3
 8012b66:	4620      	mov	r0, r4
 8012b68:	9206      	str	r2, [sp, #24]
 8012b6a:	f000 fc87 	bl	801347c <__i2b>
 8012b6e:	4607      	mov	r7, r0
 8012b70:	b165      	cbz	r5, 8012b8c <_dtoa_r+0x774>
 8012b72:	9b06      	ldr	r3, [sp, #24]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	dd09      	ble.n	8012b8c <_dtoa_r+0x774>
 8012b78:	42ab      	cmp	r3, r5
 8012b7a:	9a05      	ldr	r2, [sp, #20]
 8012b7c:	bfa8      	it	ge
 8012b7e:	462b      	movge	r3, r5
 8012b80:	1ad2      	subs	r2, r2, r3
 8012b82:	9205      	str	r2, [sp, #20]
 8012b84:	9a06      	ldr	r2, [sp, #24]
 8012b86:	1aed      	subs	r5, r5, r3
 8012b88:	1ad3      	subs	r3, r2, r3
 8012b8a:	9306      	str	r3, [sp, #24]
 8012b8c:	9b08      	ldr	r3, [sp, #32]
 8012b8e:	b1f3      	cbz	r3, 8012bce <_dtoa_r+0x7b6>
 8012b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	f000 80a3 	beq.w	8012cde <_dtoa_r+0x8c6>
 8012b98:	2e00      	cmp	r6, #0
 8012b9a:	dd10      	ble.n	8012bbe <_dtoa_r+0x7a6>
 8012b9c:	4639      	mov	r1, r7
 8012b9e:	4632      	mov	r2, r6
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f000 fd2b 	bl	80135fc <__pow5mult>
 8012ba6:	4652      	mov	r2, sl
 8012ba8:	4601      	mov	r1, r0
 8012baa:	4607      	mov	r7, r0
 8012bac:	4620      	mov	r0, r4
 8012bae:	f000 fc7b 	bl	80134a8 <__multiply>
 8012bb2:	4651      	mov	r1, sl
 8012bb4:	4680      	mov	r8, r0
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	f000 fb60 	bl	801327c <_Bfree>
 8012bbc:	46c2      	mov	sl, r8
 8012bbe:	9b08      	ldr	r3, [sp, #32]
 8012bc0:	1b9a      	subs	r2, r3, r6
 8012bc2:	d004      	beq.n	8012bce <_dtoa_r+0x7b6>
 8012bc4:	4651      	mov	r1, sl
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	f000 fd18 	bl	80135fc <__pow5mult>
 8012bcc:	4682      	mov	sl, r0
 8012bce:	2101      	movs	r1, #1
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	f000 fc53 	bl	801347c <__i2b>
 8012bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	4606      	mov	r6, r0
 8012bdc:	f340 8081 	ble.w	8012ce2 <_dtoa_r+0x8ca>
 8012be0:	461a      	mov	r2, r3
 8012be2:	4601      	mov	r1, r0
 8012be4:	4620      	mov	r0, r4
 8012be6:	f000 fd09 	bl	80135fc <__pow5mult>
 8012bea:	9b07      	ldr	r3, [sp, #28]
 8012bec:	2b01      	cmp	r3, #1
 8012bee:	4606      	mov	r6, r0
 8012bf0:	dd7a      	ble.n	8012ce8 <_dtoa_r+0x8d0>
 8012bf2:	f04f 0800 	mov.w	r8, #0
 8012bf6:	6933      	ldr	r3, [r6, #16]
 8012bf8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012bfc:	6918      	ldr	r0, [r3, #16]
 8012bfe:	f000 fbef 	bl	80133e0 <__hi0bits>
 8012c02:	f1c0 0020 	rsb	r0, r0, #32
 8012c06:	9b06      	ldr	r3, [sp, #24]
 8012c08:	4418      	add	r0, r3
 8012c0a:	f010 001f 	ands.w	r0, r0, #31
 8012c0e:	f000 8094 	beq.w	8012d3a <_dtoa_r+0x922>
 8012c12:	f1c0 0320 	rsb	r3, r0, #32
 8012c16:	2b04      	cmp	r3, #4
 8012c18:	f340 8085 	ble.w	8012d26 <_dtoa_r+0x90e>
 8012c1c:	9b05      	ldr	r3, [sp, #20]
 8012c1e:	f1c0 001c 	rsb	r0, r0, #28
 8012c22:	4403      	add	r3, r0
 8012c24:	9305      	str	r3, [sp, #20]
 8012c26:	9b06      	ldr	r3, [sp, #24]
 8012c28:	4403      	add	r3, r0
 8012c2a:	4405      	add	r5, r0
 8012c2c:	9306      	str	r3, [sp, #24]
 8012c2e:	9b05      	ldr	r3, [sp, #20]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	dd05      	ble.n	8012c40 <_dtoa_r+0x828>
 8012c34:	4651      	mov	r1, sl
 8012c36:	461a      	mov	r2, r3
 8012c38:	4620      	mov	r0, r4
 8012c3a:	f000 fd39 	bl	80136b0 <__lshift>
 8012c3e:	4682      	mov	sl, r0
 8012c40:	9b06      	ldr	r3, [sp, #24]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	dd05      	ble.n	8012c52 <_dtoa_r+0x83a>
 8012c46:	4631      	mov	r1, r6
 8012c48:	461a      	mov	r2, r3
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f000 fd30 	bl	80136b0 <__lshift>
 8012c50:	4606      	mov	r6, r0
 8012c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d072      	beq.n	8012d3e <_dtoa_r+0x926>
 8012c58:	4631      	mov	r1, r6
 8012c5a:	4650      	mov	r0, sl
 8012c5c:	f000 fd94 	bl	8013788 <__mcmp>
 8012c60:	2800      	cmp	r0, #0
 8012c62:	da6c      	bge.n	8012d3e <_dtoa_r+0x926>
 8012c64:	2300      	movs	r3, #0
 8012c66:	4651      	mov	r1, sl
 8012c68:	220a      	movs	r2, #10
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f000 fb28 	bl	80132c0 <__multadd>
 8012c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c76:	4682      	mov	sl, r0
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	f000 81b0 	beq.w	8012fde <_dtoa_r+0xbc6>
 8012c7e:	2300      	movs	r3, #0
 8012c80:	4639      	mov	r1, r7
 8012c82:	220a      	movs	r2, #10
 8012c84:	4620      	mov	r0, r4
 8012c86:	f000 fb1b 	bl	80132c0 <__multadd>
 8012c8a:	9b01      	ldr	r3, [sp, #4]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	4607      	mov	r7, r0
 8012c90:	f300 8096 	bgt.w	8012dc0 <_dtoa_r+0x9a8>
 8012c94:	9b07      	ldr	r3, [sp, #28]
 8012c96:	2b02      	cmp	r3, #2
 8012c98:	dc59      	bgt.n	8012d4e <_dtoa_r+0x936>
 8012c9a:	e091      	b.n	8012dc0 <_dtoa_r+0x9a8>
 8012c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012c9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012ca2:	e758      	b.n	8012b56 <_dtoa_r+0x73e>
 8012ca4:	9b04      	ldr	r3, [sp, #16]
 8012ca6:	1e5e      	subs	r6, r3, #1
 8012ca8:	9b08      	ldr	r3, [sp, #32]
 8012caa:	42b3      	cmp	r3, r6
 8012cac:	bfbf      	itttt	lt
 8012cae:	9b08      	ldrlt	r3, [sp, #32]
 8012cb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012cb2:	9608      	strlt	r6, [sp, #32]
 8012cb4:	1af3      	sublt	r3, r6, r3
 8012cb6:	bfb4      	ite	lt
 8012cb8:	18d2      	addlt	r2, r2, r3
 8012cba:	1b9e      	subge	r6, r3, r6
 8012cbc:	9b04      	ldr	r3, [sp, #16]
 8012cbe:	bfbc      	itt	lt
 8012cc0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012cc2:	2600      	movlt	r6, #0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	bfb7      	itett	lt
 8012cc8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012ccc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012cd0:	1a9d      	sublt	r5, r3, r2
 8012cd2:	2300      	movlt	r3, #0
 8012cd4:	e741      	b.n	8012b5a <_dtoa_r+0x742>
 8012cd6:	9e08      	ldr	r6, [sp, #32]
 8012cd8:	9d05      	ldr	r5, [sp, #20]
 8012cda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012cdc:	e748      	b.n	8012b70 <_dtoa_r+0x758>
 8012cde:	9a08      	ldr	r2, [sp, #32]
 8012ce0:	e770      	b.n	8012bc4 <_dtoa_r+0x7ac>
 8012ce2:	9b07      	ldr	r3, [sp, #28]
 8012ce4:	2b01      	cmp	r3, #1
 8012ce6:	dc19      	bgt.n	8012d1c <_dtoa_r+0x904>
 8012ce8:	9b02      	ldr	r3, [sp, #8]
 8012cea:	b9bb      	cbnz	r3, 8012d1c <_dtoa_r+0x904>
 8012cec:	9b03      	ldr	r3, [sp, #12]
 8012cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012cf2:	b99b      	cbnz	r3, 8012d1c <_dtoa_r+0x904>
 8012cf4:	9b03      	ldr	r3, [sp, #12]
 8012cf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cfa:	0d1b      	lsrs	r3, r3, #20
 8012cfc:	051b      	lsls	r3, r3, #20
 8012cfe:	b183      	cbz	r3, 8012d22 <_dtoa_r+0x90a>
 8012d00:	9b05      	ldr	r3, [sp, #20]
 8012d02:	3301      	adds	r3, #1
 8012d04:	9305      	str	r3, [sp, #20]
 8012d06:	9b06      	ldr	r3, [sp, #24]
 8012d08:	3301      	adds	r3, #1
 8012d0a:	9306      	str	r3, [sp, #24]
 8012d0c:	f04f 0801 	mov.w	r8, #1
 8012d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	f47f af6f 	bne.w	8012bf6 <_dtoa_r+0x7de>
 8012d18:	2001      	movs	r0, #1
 8012d1a:	e774      	b.n	8012c06 <_dtoa_r+0x7ee>
 8012d1c:	f04f 0800 	mov.w	r8, #0
 8012d20:	e7f6      	b.n	8012d10 <_dtoa_r+0x8f8>
 8012d22:	4698      	mov	r8, r3
 8012d24:	e7f4      	b.n	8012d10 <_dtoa_r+0x8f8>
 8012d26:	d082      	beq.n	8012c2e <_dtoa_r+0x816>
 8012d28:	9a05      	ldr	r2, [sp, #20]
 8012d2a:	331c      	adds	r3, #28
 8012d2c:	441a      	add	r2, r3
 8012d2e:	9205      	str	r2, [sp, #20]
 8012d30:	9a06      	ldr	r2, [sp, #24]
 8012d32:	441a      	add	r2, r3
 8012d34:	441d      	add	r5, r3
 8012d36:	9206      	str	r2, [sp, #24]
 8012d38:	e779      	b.n	8012c2e <_dtoa_r+0x816>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	e7f4      	b.n	8012d28 <_dtoa_r+0x910>
 8012d3e:	9b04      	ldr	r3, [sp, #16]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	dc37      	bgt.n	8012db4 <_dtoa_r+0x99c>
 8012d44:	9b07      	ldr	r3, [sp, #28]
 8012d46:	2b02      	cmp	r3, #2
 8012d48:	dd34      	ble.n	8012db4 <_dtoa_r+0x99c>
 8012d4a:	9b04      	ldr	r3, [sp, #16]
 8012d4c:	9301      	str	r3, [sp, #4]
 8012d4e:	9b01      	ldr	r3, [sp, #4]
 8012d50:	b963      	cbnz	r3, 8012d6c <_dtoa_r+0x954>
 8012d52:	4631      	mov	r1, r6
 8012d54:	2205      	movs	r2, #5
 8012d56:	4620      	mov	r0, r4
 8012d58:	f000 fab2 	bl	80132c0 <__multadd>
 8012d5c:	4601      	mov	r1, r0
 8012d5e:	4606      	mov	r6, r0
 8012d60:	4650      	mov	r0, sl
 8012d62:	f000 fd11 	bl	8013788 <__mcmp>
 8012d66:	2800      	cmp	r0, #0
 8012d68:	f73f adbb 	bgt.w	80128e2 <_dtoa_r+0x4ca>
 8012d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d6e:	9d00      	ldr	r5, [sp, #0]
 8012d70:	ea6f 0b03 	mvn.w	fp, r3
 8012d74:	f04f 0800 	mov.w	r8, #0
 8012d78:	4631      	mov	r1, r6
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	f000 fa7e 	bl	801327c <_Bfree>
 8012d80:	2f00      	cmp	r7, #0
 8012d82:	f43f aeab 	beq.w	8012adc <_dtoa_r+0x6c4>
 8012d86:	f1b8 0f00 	cmp.w	r8, #0
 8012d8a:	d005      	beq.n	8012d98 <_dtoa_r+0x980>
 8012d8c:	45b8      	cmp	r8, r7
 8012d8e:	d003      	beq.n	8012d98 <_dtoa_r+0x980>
 8012d90:	4641      	mov	r1, r8
 8012d92:	4620      	mov	r0, r4
 8012d94:	f000 fa72 	bl	801327c <_Bfree>
 8012d98:	4639      	mov	r1, r7
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f000 fa6e 	bl	801327c <_Bfree>
 8012da0:	e69c      	b.n	8012adc <_dtoa_r+0x6c4>
 8012da2:	2600      	movs	r6, #0
 8012da4:	4637      	mov	r7, r6
 8012da6:	e7e1      	b.n	8012d6c <_dtoa_r+0x954>
 8012da8:	46bb      	mov	fp, r7
 8012daa:	4637      	mov	r7, r6
 8012dac:	e599      	b.n	80128e2 <_dtoa_r+0x4ca>
 8012dae:	bf00      	nop
 8012db0:	40240000 	.word	0x40240000
 8012db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	f000 80c8 	beq.w	8012f4c <_dtoa_r+0xb34>
 8012dbc:	9b04      	ldr	r3, [sp, #16]
 8012dbe:	9301      	str	r3, [sp, #4]
 8012dc0:	2d00      	cmp	r5, #0
 8012dc2:	dd05      	ble.n	8012dd0 <_dtoa_r+0x9b8>
 8012dc4:	4639      	mov	r1, r7
 8012dc6:	462a      	mov	r2, r5
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f000 fc71 	bl	80136b0 <__lshift>
 8012dce:	4607      	mov	r7, r0
 8012dd0:	f1b8 0f00 	cmp.w	r8, #0
 8012dd4:	d05b      	beq.n	8012e8e <_dtoa_r+0xa76>
 8012dd6:	6879      	ldr	r1, [r7, #4]
 8012dd8:	4620      	mov	r0, r4
 8012dda:	f000 fa0f 	bl	80131fc <_Balloc>
 8012dde:	4605      	mov	r5, r0
 8012de0:	b928      	cbnz	r0, 8012dee <_dtoa_r+0x9d6>
 8012de2:	4b83      	ldr	r3, [pc, #524]	; (8012ff0 <_dtoa_r+0xbd8>)
 8012de4:	4602      	mov	r2, r0
 8012de6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012dea:	f7ff bb2e 	b.w	801244a <_dtoa_r+0x32>
 8012dee:	693a      	ldr	r2, [r7, #16]
 8012df0:	3202      	adds	r2, #2
 8012df2:	0092      	lsls	r2, r2, #2
 8012df4:	f107 010c 	add.w	r1, r7, #12
 8012df8:	300c      	adds	r0, #12
 8012dfa:	f7ff fa70 	bl	80122de <memcpy>
 8012dfe:	2201      	movs	r2, #1
 8012e00:	4629      	mov	r1, r5
 8012e02:	4620      	mov	r0, r4
 8012e04:	f000 fc54 	bl	80136b0 <__lshift>
 8012e08:	9b00      	ldr	r3, [sp, #0]
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	9304      	str	r3, [sp, #16]
 8012e0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e12:	4413      	add	r3, r2
 8012e14:	9308      	str	r3, [sp, #32]
 8012e16:	9b02      	ldr	r3, [sp, #8]
 8012e18:	f003 0301 	and.w	r3, r3, #1
 8012e1c:	46b8      	mov	r8, r7
 8012e1e:	9306      	str	r3, [sp, #24]
 8012e20:	4607      	mov	r7, r0
 8012e22:	9b04      	ldr	r3, [sp, #16]
 8012e24:	4631      	mov	r1, r6
 8012e26:	3b01      	subs	r3, #1
 8012e28:	4650      	mov	r0, sl
 8012e2a:	9301      	str	r3, [sp, #4]
 8012e2c:	f7ff fa6c 	bl	8012308 <quorem>
 8012e30:	4641      	mov	r1, r8
 8012e32:	9002      	str	r0, [sp, #8]
 8012e34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012e38:	4650      	mov	r0, sl
 8012e3a:	f000 fca5 	bl	8013788 <__mcmp>
 8012e3e:	463a      	mov	r2, r7
 8012e40:	9005      	str	r0, [sp, #20]
 8012e42:	4631      	mov	r1, r6
 8012e44:	4620      	mov	r0, r4
 8012e46:	f000 fcbb 	bl	80137c0 <__mdiff>
 8012e4a:	68c2      	ldr	r2, [r0, #12]
 8012e4c:	4605      	mov	r5, r0
 8012e4e:	bb02      	cbnz	r2, 8012e92 <_dtoa_r+0xa7a>
 8012e50:	4601      	mov	r1, r0
 8012e52:	4650      	mov	r0, sl
 8012e54:	f000 fc98 	bl	8013788 <__mcmp>
 8012e58:	4602      	mov	r2, r0
 8012e5a:	4629      	mov	r1, r5
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8012e60:	f000 fa0c 	bl	801327c <_Bfree>
 8012e64:	9b07      	ldr	r3, [sp, #28]
 8012e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e68:	9d04      	ldr	r5, [sp, #16]
 8012e6a:	ea43 0102 	orr.w	r1, r3, r2
 8012e6e:	9b06      	ldr	r3, [sp, #24]
 8012e70:	4319      	orrs	r1, r3
 8012e72:	d110      	bne.n	8012e96 <_dtoa_r+0xa7e>
 8012e74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012e78:	d029      	beq.n	8012ece <_dtoa_r+0xab6>
 8012e7a:	9b05      	ldr	r3, [sp, #20]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	dd02      	ble.n	8012e86 <_dtoa_r+0xa6e>
 8012e80:	9b02      	ldr	r3, [sp, #8]
 8012e82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012e86:	9b01      	ldr	r3, [sp, #4]
 8012e88:	f883 9000 	strb.w	r9, [r3]
 8012e8c:	e774      	b.n	8012d78 <_dtoa_r+0x960>
 8012e8e:	4638      	mov	r0, r7
 8012e90:	e7ba      	b.n	8012e08 <_dtoa_r+0x9f0>
 8012e92:	2201      	movs	r2, #1
 8012e94:	e7e1      	b.n	8012e5a <_dtoa_r+0xa42>
 8012e96:	9b05      	ldr	r3, [sp, #20]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	db04      	blt.n	8012ea6 <_dtoa_r+0xa8e>
 8012e9c:	9907      	ldr	r1, [sp, #28]
 8012e9e:	430b      	orrs	r3, r1
 8012ea0:	9906      	ldr	r1, [sp, #24]
 8012ea2:	430b      	orrs	r3, r1
 8012ea4:	d120      	bne.n	8012ee8 <_dtoa_r+0xad0>
 8012ea6:	2a00      	cmp	r2, #0
 8012ea8:	dded      	ble.n	8012e86 <_dtoa_r+0xa6e>
 8012eaa:	4651      	mov	r1, sl
 8012eac:	2201      	movs	r2, #1
 8012eae:	4620      	mov	r0, r4
 8012eb0:	f000 fbfe 	bl	80136b0 <__lshift>
 8012eb4:	4631      	mov	r1, r6
 8012eb6:	4682      	mov	sl, r0
 8012eb8:	f000 fc66 	bl	8013788 <__mcmp>
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	dc03      	bgt.n	8012ec8 <_dtoa_r+0xab0>
 8012ec0:	d1e1      	bne.n	8012e86 <_dtoa_r+0xa6e>
 8012ec2:	f019 0f01 	tst.w	r9, #1
 8012ec6:	d0de      	beq.n	8012e86 <_dtoa_r+0xa6e>
 8012ec8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012ecc:	d1d8      	bne.n	8012e80 <_dtoa_r+0xa68>
 8012ece:	9a01      	ldr	r2, [sp, #4]
 8012ed0:	2339      	movs	r3, #57	; 0x39
 8012ed2:	7013      	strb	r3, [r2, #0]
 8012ed4:	462b      	mov	r3, r5
 8012ed6:	461d      	mov	r5, r3
 8012ed8:	3b01      	subs	r3, #1
 8012eda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012ede:	2a39      	cmp	r2, #57	; 0x39
 8012ee0:	d06c      	beq.n	8012fbc <_dtoa_r+0xba4>
 8012ee2:	3201      	adds	r2, #1
 8012ee4:	701a      	strb	r2, [r3, #0]
 8012ee6:	e747      	b.n	8012d78 <_dtoa_r+0x960>
 8012ee8:	2a00      	cmp	r2, #0
 8012eea:	dd07      	ble.n	8012efc <_dtoa_r+0xae4>
 8012eec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012ef0:	d0ed      	beq.n	8012ece <_dtoa_r+0xab6>
 8012ef2:	9a01      	ldr	r2, [sp, #4]
 8012ef4:	f109 0301 	add.w	r3, r9, #1
 8012ef8:	7013      	strb	r3, [r2, #0]
 8012efa:	e73d      	b.n	8012d78 <_dtoa_r+0x960>
 8012efc:	9b04      	ldr	r3, [sp, #16]
 8012efe:	9a08      	ldr	r2, [sp, #32]
 8012f00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012f04:	4293      	cmp	r3, r2
 8012f06:	d043      	beq.n	8012f90 <_dtoa_r+0xb78>
 8012f08:	4651      	mov	r1, sl
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	220a      	movs	r2, #10
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f000 f9d6 	bl	80132c0 <__multadd>
 8012f14:	45b8      	cmp	r8, r7
 8012f16:	4682      	mov	sl, r0
 8012f18:	f04f 0300 	mov.w	r3, #0
 8012f1c:	f04f 020a 	mov.w	r2, #10
 8012f20:	4641      	mov	r1, r8
 8012f22:	4620      	mov	r0, r4
 8012f24:	d107      	bne.n	8012f36 <_dtoa_r+0xb1e>
 8012f26:	f000 f9cb 	bl	80132c0 <__multadd>
 8012f2a:	4680      	mov	r8, r0
 8012f2c:	4607      	mov	r7, r0
 8012f2e:	9b04      	ldr	r3, [sp, #16]
 8012f30:	3301      	adds	r3, #1
 8012f32:	9304      	str	r3, [sp, #16]
 8012f34:	e775      	b.n	8012e22 <_dtoa_r+0xa0a>
 8012f36:	f000 f9c3 	bl	80132c0 <__multadd>
 8012f3a:	4639      	mov	r1, r7
 8012f3c:	4680      	mov	r8, r0
 8012f3e:	2300      	movs	r3, #0
 8012f40:	220a      	movs	r2, #10
 8012f42:	4620      	mov	r0, r4
 8012f44:	f000 f9bc 	bl	80132c0 <__multadd>
 8012f48:	4607      	mov	r7, r0
 8012f4a:	e7f0      	b.n	8012f2e <_dtoa_r+0xb16>
 8012f4c:	9b04      	ldr	r3, [sp, #16]
 8012f4e:	9301      	str	r3, [sp, #4]
 8012f50:	9d00      	ldr	r5, [sp, #0]
 8012f52:	4631      	mov	r1, r6
 8012f54:	4650      	mov	r0, sl
 8012f56:	f7ff f9d7 	bl	8012308 <quorem>
 8012f5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012f5e:	9b00      	ldr	r3, [sp, #0]
 8012f60:	f805 9b01 	strb.w	r9, [r5], #1
 8012f64:	1aea      	subs	r2, r5, r3
 8012f66:	9b01      	ldr	r3, [sp, #4]
 8012f68:	4293      	cmp	r3, r2
 8012f6a:	dd07      	ble.n	8012f7c <_dtoa_r+0xb64>
 8012f6c:	4651      	mov	r1, sl
 8012f6e:	2300      	movs	r3, #0
 8012f70:	220a      	movs	r2, #10
 8012f72:	4620      	mov	r0, r4
 8012f74:	f000 f9a4 	bl	80132c0 <__multadd>
 8012f78:	4682      	mov	sl, r0
 8012f7a:	e7ea      	b.n	8012f52 <_dtoa_r+0xb3a>
 8012f7c:	9b01      	ldr	r3, [sp, #4]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	bfc8      	it	gt
 8012f82:	461d      	movgt	r5, r3
 8012f84:	9b00      	ldr	r3, [sp, #0]
 8012f86:	bfd8      	it	le
 8012f88:	2501      	movle	r5, #1
 8012f8a:	441d      	add	r5, r3
 8012f8c:	f04f 0800 	mov.w	r8, #0
 8012f90:	4651      	mov	r1, sl
 8012f92:	2201      	movs	r2, #1
 8012f94:	4620      	mov	r0, r4
 8012f96:	f000 fb8b 	bl	80136b0 <__lshift>
 8012f9a:	4631      	mov	r1, r6
 8012f9c:	4682      	mov	sl, r0
 8012f9e:	f000 fbf3 	bl	8013788 <__mcmp>
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	dc96      	bgt.n	8012ed4 <_dtoa_r+0xabc>
 8012fa6:	d102      	bne.n	8012fae <_dtoa_r+0xb96>
 8012fa8:	f019 0f01 	tst.w	r9, #1
 8012fac:	d192      	bne.n	8012ed4 <_dtoa_r+0xabc>
 8012fae:	462b      	mov	r3, r5
 8012fb0:	461d      	mov	r5, r3
 8012fb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fb6:	2a30      	cmp	r2, #48	; 0x30
 8012fb8:	d0fa      	beq.n	8012fb0 <_dtoa_r+0xb98>
 8012fba:	e6dd      	b.n	8012d78 <_dtoa_r+0x960>
 8012fbc:	9a00      	ldr	r2, [sp, #0]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d189      	bne.n	8012ed6 <_dtoa_r+0xabe>
 8012fc2:	f10b 0b01 	add.w	fp, fp, #1
 8012fc6:	2331      	movs	r3, #49	; 0x31
 8012fc8:	e796      	b.n	8012ef8 <_dtoa_r+0xae0>
 8012fca:	4b0a      	ldr	r3, [pc, #40]	; (8012ff4 <_dtoa_r+0xbdc>)
 8012fcc:	f7ff ba99 	b.w	8012502 <_dtoa_r+0xea>
 8012fd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	f47f aa6d 	bne.w	80124b2 <_dtoa_r+0x9a>
 8012fd8:	4b07      	ldr	r3, [pc, #28]	; (8012ff8 <_dtoa_r+0xbe0>)
 8012fda:	f7ff ba92 	b.w	8012502 <_dtoa_r+0xea>
 8012fde:	9b01      	ldr	r3, [sp, #4]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	dcb5      	bgt.n	8012f50 <_dtoa_r+0xb38>
 8012fe4:	9b07      	ldr	r3, [sp, #28]
 8012fe6:	2b02      	cmp	r3, #2
 8012fe8:	f73f aeb1 	bgt.w	8012d4e <_dtoa_r+0x936>
 8012fec:	e7b0      	b.n	8012f50 <_dtoa_r+0xb38>
 8012fee:	bf00      	nop
 8012ff0:	080187dd 	.word	0x080187dd
 8012ff4:	08018738 	.word	0x08018738
 8012ff8:	08018761 	.word	0x08018761

08012ffc <_free_r>:
 8012ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ffe:	2900      	cmp	r1, #0
 8013000:	d044      	beq.n	801308c <_free_r+0x90>
 8013002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013006:	9001      	str	r0, [sp, #4]
 8013008:	2b00      	cmp	r3, #0
 801300a:	f1a1 0404 	sub.w	r4, r1, #4
 801300e:	bfb8      	it	lt
 8013010:	18e4      	addlt	r4, r4, r3
 8013012:	f000 f8e7 	bl	80131e4 <__malloc_lock>
 8013016:	4a1e      	ldr	r2, [pc, #120]	; (8013090 <_free_r+0x94>)
 8013018:	9801      	ldr	r0, [sp, #4]
 801301a:	6813      	ldr	r3, [r2, #0]
 801301c:	b933      	cbnz	r3, 801302c <_free_r+0x30>
 801301e:	6063      	str	r3, [r4, #4]
 8013020:	6014      	str	r4, [r2, #0]
 8013022:	b003      	add	sp, #12
 8013024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013028:	f000 b8e2 	b.w	80131f0 <__malloc_unlock>
 801302c:	42a3      	cmp	r3, r4
 801302e:	d908      	bls.n	8013042 <_free_r+0x46>
 8013030:	6825      	ldr	r5, [r4, #0]
 8013032:	1961      	adds	r1, r4, r5
 8013034:	428b      	cmp	r3, r1
 8013036:	bf01      	itttt	eq
 8013038:	6819      	ldreq	r1, [r3, #0]
 801303a:	685b      	ldreq	r3, [r3, #4]
 801303c:	1949      	addeq	r1, r1, r5
 801303e:	6021      	streq	r1, [r4, #0]
 8013040:	e7ed      	b.n	801301e <_free_r+0x22>
 8013042:	461a      	mov	r2, r3
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	b10b      	cbz	r3, 801304c <_free_r+0x50>
 8013048:	42a3      	cmp	r3, r4
 801304a:	d9fa      	bls.n	8013042 <_free_r+0x46>
 801304c:	6811      	ldr	r1, [r2, #0]
 801304e:	1855      	adds	r5, r2, r1
 8013050:	42a5      	cmp	r5, r4
 8013052:	d10b      	bne.n	801306c <_free_r+0x70>
 8013054:	6824      	ldr	r4, [r4, #0]
 8013056:	4421      	add	r1, r4
 8013058:	1854      	adds	r4, r2, r1
 801305a:	42a3      	cmp	r3, r4
 801305c:	6011      	str	r1, [r2, #0]
 801305e:	d1e0      	bne.n	8013022 <_free_r+0x26>
 8013060:	681c      	ldr	r4, [r3, #0]
 8013062:	685b      	ldr	r3, [r3, #4]
 8013064:	6053      	str	r3, [r2, #4]
 8013066:	440c      	add	r4, r1
 8013068:	6014      	str	r4, [r2, #0]
 801306a:	e7da      	b.n	8013022 <_free_r+0x26>
 801306c:	d902      	bls.n	8013074 <_free_r+0x78>
 801306e:	230c      	movs	r3, #12
 8013070:	6003      	str	r3, [r0, #0]
 8013072:	e7d6      	b.n	8013022 <_free_r+0x26>
 8013074:	6825      	ldr	r5, [r4, #0]
 8013076:	1961      	adds	r1, r4, r5
 8013078:	428b      	cmp	r3, r1
 801307a:	bf04      	itt	eq
 801307c:	6819      	ldreq	r1, [r3, #0]
 801307e:	685b      	ldreq	r3, [r3, #4]
 8013080:	6063      	str	r3, [r4, #4]
 8013082:	bf04      	itt	eq
 8013084:	1949      	addeq	r1, r1, r5
 8013086:	6021      	streq	r1, [r4, #0]
 8013088:	6054      	str	r4, [r2, #4]
 801308a:	e7ca      	b.n	8013022 <_free_r+0x26>
 801308c:	b003      	add	sp, #12
 801308e:	bd30      	pop	{r4, r5, pc}
 8013090:	200023c0 	.word	0x200023c0

08013094 <malloc>:
 8013094:	4b02      	ldr	r3, [pc, #8]	; (80130a0 <malloc+0xc>)
 8013096:	4601      	mov	r1, r0
 8013098:	6818      	ldr	r0, [r3, #0]
 801309a:	f000 b823 	b.w	80130e4 <_malloc_r>
 801309e:	bf00      	nop
 80130a0:	2000026c 	.word	0x2000026c

080130a4 <sbrk_aligned>:
 80130a4:	b570      	push	{r4, r5, r6, lr}
 80130a6:	4e0e      	ldr	r6, [pc, #56]	; (80130e0 <sbrk_aligned+0x3c>)
 80130a8:	460c      	mov	r4, r1
 80130aa:	6831      	ldr	r1, [r6, #0]
 80130ac:	4605      	mov	r5, r0
 80130ae:	b911      	cbnz	r1, 80130b6 <sbrk_aligned+0x12>
 80130b0:	f001 fe1a 	bl	8014ce8 <_sbrk_r>
 80130b4:	6030      	str	r0, [r6, #0]
 80130b6:	4621      	mov	r1, r4
 80130b8:	4628      	mov	r0, r5
 80130ba:	f001 fe15 	bl	8014ce8 <_sbrk_r>
 80130be:	1c43      	adds	r3, r0, #1
 80130c0:	d00a      	beq.n	80130d8 <sbrk_aligned+0x34>
 80130c2:	1cc4      	adds	r4, r0, #3
 80130c4:	f024 0403 	bic.w	r4, r4, #3
 80130c8:	42a0      	cmp	r0, r4
 80130ca:	d007      	beq.n	80130dc <sbrk_aligned+0x38>
 80130cc:	1a21      	subs	r1, r4, r0
 80130ce:	4628      	mov	r0, r5
 80130d0:	f001 fe0a 	bl	8014ce8 <_sbrk_r>
 80130d4:	3001      	adds	r0, #1
 80130d6:	d101      	bne.n	80130dc <sbrk_aligned+0x38>
 80130d8:	f04f 34ff 	mov.w	r4, #4294967295
 80130dc:	4620      	mov	r0, r4
 80130de:	bd70      	pop	{r4, r5, r6, pc}
 80130e0:	200023c4 	.word	0x200023c4

080130e4 <_malloc_r>:
 80130e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130e8:	1ccd      	adds	r5, r1, #3
 80130ea:	f025 0503 	bic.w	r5, r5, #3
 80130ee:	3508      	adds	r5, #8
 80130f0:	2d0c      	cmp	r5, #12
 80130f2:	bf38      	it	cc
 80130f4:	250c      	movcc	r5, #12
 80130f6:	2d00      	cmp	r5, #0
 80130f8:	4607      	mov	r7, r0
 80130fa:	db01      	blt.n	8013100 <_malloc_r+0x1c>
 80130fc:	42a9      	cmp	r1, r5
 80130fe:	d905      	bls.n	801310c <_malloc_r+0x28>
 8013100:	230c      	movs	r3, #12
 8013102:	603b      	str	r3, [r7, #0]
 8013104:	2600      	movs	r6, #0
 8013106:	4630      	mov	r0, r6
 8013108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801310c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80131e0 <_malloc_r+0xfc>
 8013110:	f000 f868 	bl	80131e4 <__malloc_lock>
 8013114:	f8d8 3000 	ldr.w	r3, [r8]
 8013118:	461c      	mov	r4, r3
 801311a:	bb5c      	cbnz	r4, 8013174 <_malloc_r+0x90>
 801311c:	4629      	mov	r1, r5
 801311e:	4638      	mov	r0, r7
 8013120:	f7ff ffc0 	bl	80130a4 <sbrk_aligned>
 8013124:	1c43      	adds	r3, r0, #1
 8013126:	4604      	mov	r4, r0
 8013128:	d155      	bne.n	80131d6 <_malloc_r+0xf2>
 801312a:	f8d8 4000 	ldr.w	r4, [r8]
 801312e:	4626      	mov	r6, r4
 8013130:	2e00      	cmp	r6, #0
 8013132:	d145      	bne.n	80131c0 <_malloc_r+0xdc>
 8013134:	2c00      	cmp	r4, #0
 8013136:	d048      	beq.n	80131ca <_malloc_r+0xe6>
 8013138:	6823      	ldr	r3, [r4, #0]
 801313a:	4631      	mov	r1, r6
 801313c:	4638      	mov	r0, r7
 801313e:	eb04 0903 	add.w	r9, r4, r3
 8013142:	f001 fdd1 	bl	8014ce8 <_sbrk_r>
 8013146:	4581      	cmp	r9, r0
 8013148:	d13f      	bne.n	80131ca <_malloc_r+0xe6>
 801314a:	6821      	ldr	r1, [r4, #0]
 801314c:	1a6d      	subs	r5, r5, r1
 801314e:	4629      	mov	r1, r5
 8013150:	4638      	mov	r0, r7
 8013152:	f7ff ffa7 	bl	80130a4 <sbrk_aligned>
 8013156:	3001      	adds	r0, #1
 8013158:	d037      	beq.n	80131ca <_malloc_r+0xe6>
 801315a:	6823      	ldr	r3, [r4, #0]
 801315c:	442b      	add	r3, r5
 801315e:	6023      	str	r3, [r4, #0]
 8013160:	f8d8 3000 	ldr.w	r3, [r8]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d038      	beq.n	80131da <_malloc_r+0xf6>
 8013168:	685a      	ldr	r2, [r3, #4]
 801316a:	42a2      	cmp	r2, r4
 801316c:	d12b      	bne.n	80131c6 <_malloc_r+0xe2>
 801316e:	2200      	movs	r2, #0
 8013170:	605a      	str	r2, [r3, #4]
 8013172:	e00f      	b.n	8013194 <_malloc_r+0xb0>
 8013174:	6822      	ldr	r2, [r4, #0]
 8013176:	1b52      	subs	r2, r2, r5
 8013178:	d41f      	bmi.n	80131ba <_malloc_r+0xd6>
 801317a:	2a0b      	cmp	r2, #11
 801317c:	d917      	bls.n	80131ae <_malloc_r+0xca>
 801317e:	1961      	adds	r1, r4, r5
 8013180:	42a3      	cmp	r3, r4
 8013182:	6025      	str	r5, [r4, #0]
 8013184:	bf18      	it	ne
 8013186:	6059      	strne	r1, [r3, #4]
 8013188:	6863      	ldr	r3, [r4, #4]
 801318a:	bf08      	it	eq
 801318c:	f8c8 1000 	streq.w	r1, [r8]
 8013190:	5162      	str	r2, [r4, r5]
 8013192:	604b      	str	r3, [r1, #4]
 8013194:	4638      	mov	r0, r7
 8013196:	f104 060b 	add.w	r6, r4, #11
 801319a:	f000 f829 	bl	80131f0 <__malloc_unlock>
 801319e:	f026 0607 	bic.w	r6, r6, #7
 80131a2:	1d23      	adds	r3, r4, #4
 80131a4:	1af2      	subs	r2, r6, r3
 80131a6:	d0ae      	beq.n	8013106 <_malloc_r+0x22>
 80131a8:	1b9b      	subs	r3, r3, r6
 80131aa:	50a3      	str	r3, [r4, r2]
 80131ac:	e7ab      	b.n	8013106 <_malloc_r+0x22>
 80131ae:	42a3      	cmp	r3, r4
 80131b0:	6862      	ldr	r2, [r4, #4]
 80131b2:	d1dd      	bne.n	8013170 <_malloc_r+0x8c>
 80131b4:	f8c8 2000 	str.w	r2, [r8]
 80131b8:	e7ec      	b.n	8013194 <_malloc_r+0xb0>
 80131ba:	4623      	mov	r3, r4
 80131bc:	6864      	ldr	r4, [r4, #4]
 80131be:	e7ac      	b.n	801311a <_malloc_r+0x36>
 80131c0:	4634      	mov	r4, r6
 80131c2:	6876      	ldr	r6, [r6, #4]
 80131c4:	e7b4      	b.n	8013130 <_malloc_r+0x4c>
 80131c6:	4613      	mov	r3, r2
 80131c8:	e7cc      	b.n	8013164 <_malloc_r+0x80>
 80131ca:	230c      	movs	r3, #12
 80131cc:	603b      	str	r3, [r7, #0]
 80131ce:	4638      	mov	r0, r7
 80131d0:	f000 f80e 	bl	80131f0 <__malloc_unlock>
 80131d4:	e797      	b.n	8013106 <_malloc_r+0x22>
 80131d6:	6025      	str	r5, [r4, #0]
 80131d8:	e7dc      	b.n	8013194 <_malloc_r+0xb0>
 80131da:	605b      	str	r3, [r3, #4]
 80131dc:	deff      	udf	#255	; 0xff
 80131de:	bf00      	nop
 80131e0:	200023c0 	.word	0x200023c0

080131e4 <__malloc_lock>:
 80131e4:	4801      	ldr	r0, [pc, #4]	; (80131ec <__malloc_lock+0x8>)
 80131e6:	f7ff b878 	b.w	80122da <__retarget_lock_acquire_recursive>
 80131ea:	bf00      	nop
 80131ec:	200023bc 	.word	0x200023bc

080131f0 <__malloc_unlock>:
 80131f0:	4801      	ldr	r0, [pc, #4]	; (80131f8 <__malloc_unlock+0x8>)
 80131f2:	f7ff b873 	b.w	80122dc <__retarget_lock_release_recursive>
 80131f6:	bf00      	nop
 80131f8:	200023bc 	.word	0x200023bc

080131fc <_Balloc>:
 80131fc:	b570      	push	{r4, r5, r6, lr}
 80131fe:	69c6      	ldr	r6, [r0, #28]
 8013200:	4604      	mov	r4, r0
 8013202:	460d      	mov	r5, r1
 8013204:	b976      	cbnz	r6, 8013224 <_Balloc+0x28>
 8013206:	2010      	movs	r0, #16
 8013208:	f7ff ff44 	bl	8013094 <malloc>
 801320c:	4602      	mov	r2, r0
 801320e:	61e0      	str	r0, [r4, #28]
 8013210:	b920      	cbnz	r0, 801321c <_Balloc+0x20>
 8013212:	4b18      	ldr	r3, [pc, #96]	; (8013274 <_Balloc+0x78>)
 8013214:	4818      	ldr	r0, [pc, #96]	; (8013278 <_Balloc+0x7c>)
 8013216:	216b      	movs	r1, #107	; 0x6b
 8013218:	f001 fd7e 	bl	8014d18 <__assert_func>
 801321c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013220:	6006      	str	r6, [r0, #0]
 8013222:	60c6      	str	r6, [r0, #12]
 8013224:	69e6      	ldr	r6, [r4, #28]
 8013226:	68f3      	ldr	r3, [r6, #12]
 8013228:	b183      	cbz	r3, 801324c <_Balloc+0x50>
 801322a:	69e3      	ldr	r3, [r4, #28]
 801322c:	68db      	ldr	r3, [r3, #12]
 801322e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013232:	b9b8      	cbnz	r0, 8013264 <_Balloc+0x68>
 8013234:	2101      	movs	r1, #1
 8013236:	fa01 f605 	lsl.w	r6, r1, r5
 801323a:	1d72      	adds	r2, r6, #5
 801323c:	0092      	lsls	r2, r2, #2
 801323e:	4620      	mov	r0, r4
 8013240:	f001 fd88 	bl	8014d54 <_calloc_r>
 8013244:	b160      	cbz	r0, 8013260 <_Balloc+0x64>
 8013246:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801324a:	e00e      	b.n	801326a <_Balloc+0x6e>
 801324c:	2221      	movs	r2, #33	; 0x21
 801324e:	2104      	movs	r1, #4
 8013250:	4620      	mov	r0, r4
 8013252:	f001 fd7f 	bl	8014d54 <_calloc_r>
 8013256:	69e3      	ldr	r3, [r4, #28]
 8013258:	60f0      	str	r0, [r6, #12]
 801325a:	68db      	ldr	r3, [r3, #12]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d1e4      	bne.n	801322a <_Balloc+0x2e>
 8013260:	2000      	movs	r0, #0
 8013262:	bd70      	pop	{r4, r5, r6, pc}
 8013264:	6802      	ldr	r2, [r0, #0]
 8013266:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801326a:	2300      	movs	r3, #0
 801326c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013270:	e7f7      	b.n	8013262 <_Balloc+0x66>
 8013272:	bf00      	nop
 8013274:	0801876e 	.word	0x0801876e
 8013278:	080187ee 	.word	0x080187ee

0801327c <_Bfree>:
 801327c:	b570      	push	{r4, r5, r6, lr}
 801327e:	69c6      	ldr	r6, [r0, #28]
 8013280:	4605      	mov	r5, r0
 8013282:	460c      	mov	r4, r1
 8013284:	b976      	cbnz	r6, 80132a4 <_Bfree+0x28>
 8013286:	2010      	movs	r0, #16
 8013288:	f7ff ff04 	bl	8013094 <malloc>
 801328c:	4602      	mov	r2, r0
 801328e:	61e8      	str	r0, [r5, #28]
 8013290:	b920      	cbnz	r0, 801329c <_Bfree+0x20>
 8013292:	4b09      	ldr	r3, [pc, #36]	; (80132b8 <_Bfree+0x3c>)
 8013294:	4809      	ldr	r0, [pc, #36]	; (80132bc <_Bfree+0x40>)
 8013296:	218f      	movs	r1, #143	; 0x8f
 8013298:	f001 fd3e 	bl	8014d18 <__assert_func>
 801329c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132a0:	6006      	str	r6, [r0, #0]
 80132a2:	60c6      	str	r6, [r0, #12]
 80132a4:	b13c      	cbz	r4, 80132b6 <_Bfree+0x3a>
 80132a6:	69eb      	ldr	r3, [r5, #28]
 80132a8:	6862      	ldr	r2, [r4, #4]
 80132aa:	68db      	ldr	r3, [r3, #12]
 80132ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80132b0:	6021      	str	r1, [r4, #0]
 80132b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80132b6:	bd70      	pop	{r4, r5, r6, pc}
 80132b8:	0801876e 	.word	0x0801876e
 80132bc:	080187ee 	.word	0x080187ee

080132c0 <__multadd>:
 80132c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132c4:	690d      	ldr	r5, [r1, #16]
 80132c6:	4607      	mov	r7, r0
 80132c8:	460c      	mov	r4, r1
 80132ca:	461e      	mov	r6, r3
 80132cc:	f101 0c14 	add.w	ip, r1, #20
 80132d0:	2000      	movs	r0, #0
 80132d2:	f8dc 3000 	ldr.w	r3, [ip]
 80132d6:	b299      	uxth	r1, r3
 80132d8:	fb02 6101 	mla	r1, r2, r1, r6
 80132dc:	0c1e      	lsrs	r6, r3, #16
 80132de:	0c0b      	lsrs	r3, r1, #16
 80132e0:	fb02 3306 	mla	r3, r2, r6, r3
 80132e4:	b289      	uxth	r1, r1
 80132e6:	3001      	adds	r0, #1
 80132e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80132ec:	4285      	cmp	r5, r0
 80132ee:	f84c 1b04 	str.w	r1, [ip], #4
 80132f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80132f6:	dcec      	bgt.n	80132d2 <__multadd+0x12>
 80132f8:	b30e      	cbz	r6, 801333e <__multadd+0x7e>
 80132fa:	68a3      	ldr	r3, [r4, #8]
 80132fc:	42ab      	cmp	r3, r5
 80132fe:	dc19      	bgt.n	8013334 <__multadd+0x74>
 8013300:	6861      	ldr	r1, [r4, #4]
 8013302:	4638      	mov	r0, r7
 8013304:	3101      	adds	r1, #1
 8013306:	f7ff ff79 	bl	80131fc <_Balloc>
 801330a:	4680      	mov	r8, r0
 801330c:	b928      	cbnz	r0, 801331a <__multadd+0x5a>
 801330e:	4602      	mov	r2, r0
 8013310:	4b0c      	ldr	r3, [pc, #48]	; (8013344 <__multadd+0x84>)
 8013312:	480d      	ldr	r0, [pc, #52]	; (8013348 <__multadd+0x88>)
 8013314:	21ba      	movs	r1, #186	; 0xba
 8013316:	f001 fcff 	bl	8014d18 <__assert_func>
 801331a:	6922      	ldr	r2, [r4, #16]
 801331c:	3202      	adds	r2, #2
 801331e:	f104 010c 	add.w	r1, r4, #12
 8013322:	0092      	lsls	r2, r2, #2
 8013324:	300c      	adds	r0, #12
 8013326:	f7fe ffda 	bl	80122de <memcpy>
 801332a:	4621      	mov	r1, r4
 801332c:	4638      	mov	r0, r7
 801332e:	f7ff ffa5 	bl	801327c <_Bfree>
 8013332:	4644      	mov	r4, r8
 8013334:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013338:	3501      	adds	r5, #1
 801333a:	615e      	str	r6, [r3, #20]
 801333c:	6125      	str	r5, [r4, #16]
 801333e:	4620      	mov	r0, r4
 8013340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013344:	080187dd 	.word	0x080187dd
 8013348:	080187ee 	.word	0x080187ee

0801334c <__s2b>:
 801334c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013350:	460c      	mov	r4, r1
 8013352:	4615      	mov	r5, r2
 8013354:	461f      	mov	r7, r3
 8013356:	2209      	movs	r2, #9
 8013358:	3308      	adds	r3, #8
 801335a:	4606      	mov	r6, r0
 801335c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013360:	2100      	movs	r1, #0
 8013362:	2201      	movs	r2, #1
 8013364:	429a      	cmp	r2, r3
 8013366:	db09      	blt.n	801337c <__s2b+0x30>
 8013368:	4630      	mov	r0, r6
 801336a:	f7ff ff47 	bl	80131fc <_Balloc>
 801336e:	b940      	cbnz	r0, 8013382 <__s2b+0x36>
 8013370:	4602      	mov	r2, r0
 8013372:	4b19      	ldr	r3, [pc, #100]	; (80133d8 <__s2b+0x8c>)
 8013374:	4819      	ldr	r0, [pc, #100]	; (80133dc <__s2b+0x90>)
 8013376:	21d3      	movs	r1, #211	; 0xd3
 8013378:	f001 fcce 	bl	8014d18 <__assert_func>
 801337c:	0052      	lsls	r2, r2, #1
 801337e:	3101      	adds	r1, #1
 8013380:	e7f0      	b.n	8013364 <__s2b+0x18>
 8013382:	9b08      	ldr	r3, [sp, #32]
 8013384:	6143      	str	r3, [r0, #20]
 8013386:	2d09      	cmp	r5, #9
 8013388:	f04f 0301 	mov.w	r3, #1
 801338c:	6103      	str	r3, [r0, #16]
 801338e:	dd16      	ble.n	80133be <__s2b+0x72>
 8013390:	f104 0909 	add.w	r9, r4, #9
 8013394:	46c8      	mov	r8, r9
 8013396:	442c      	add	r4, r5
 8013398:	f818 3b01 	ldrb.w	r3, [r8], #1
 801339c:	4601      	mov	r1, r0
 801339e:	3b30      	subs	r3, #48	; 0x30
 80133a0:	220a      	movs	r2, #10
 80133a2:	4630      	mov	r0, r6
 80133a4:	f7ff ff8c 	bl	80132c0 <__multadd>
 80133a8:	45a0      	cmp	r8, r4
 80133aa:	d1f5      	bne.n	8013398 <__s2b+0x4c>
 80133ac:	f1a5 0408 	sub.w	r4, r5, #8
 80133b0:	444c      	add	r4, r9
 80133b2:	1b2d      	subs	r5, r5, r4
 80133b4:	1963      	adds	r3, r4, r5
 80133b6:	42bb      	cmp	r3, r7
 80133b8:	db04      	blt.n	80133c4 <__s2b+0x78>
 80133ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133be:	340a      	adds	r4, #10
 80133c0:	2509      	movs	r5, #9
 80133c2:	e7f6      	b.n	80133b2 <__s2b+0x66>
 80133c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80133c8:	4601      	mov	r1, r0
 80133ca:	3b30      	subs	r3, #48	; 0x30
 80133cc:	220a      	movs	r2, #10
 80133ce:	4630      	mov	r0, r6
 80133d0:	f7ff ff76 	bl	80132c0 <__multadd>
 80133d4:	e7ee      	b.n	80133b4 <__s2b+0x68>
 80133d6:	bf00      	nop
 80133d8:	080187dd 	.word	0x080187dd
 80133dc:	080187ee 	.word	0x080187ee

080133e0 <__hi0bits>:
 80133e0:	0c03      	lsrs	r3, r0, #16
 80133e2:	041b      	lsls	r3, r3, #16
 80133e4:	b9d3      	cbnz	r3, 801341c <__hi0bits+0x3c>
 80133e6:	0400      	lsls	r0, r0, #16
 80133e8:	2310      	movs	r3, #16
 80133ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80133ee:	bf04      	itt	eq
 80133f0:	0200      	lsleq	r0, r0, #8
 80133f2:	3308      	addeq	r3, #8
 80133f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80133f8:	bf04      	itt	eq
 80133fa:	0100      	lsleq	r0, r0, #4
 80133fc:	3304      	addeq	r3, #4
 80133fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013402:	bf04      	itt	eq
 8013404:	0080      	lsleq	r0, r0, #2
 8013406:	3302      	addeq	r3, #2
 8013408:	2800      	cmp	r0, #0
 801340a:	db05      	blt.n	8013418 <__hi0bits+0x38>
 801340c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013410:	f103 0301 	add.w	r3, r3, #1
 8013414:	bf08      	it	eq
 8013416:	2320      	moveq	r3, #32
 8013418:	4618      	mov	r0, r3
 801341a:	4770      	bx	lr
 801341c:	2300      	movs	r3, #0
 801341e:	e7e4      	b.n	80133ea <__hi0bits+0xa>

08013420 <__lo0bits>:
 8013420:	6803      	ldr	r3, [r0, #0]
 8013422:	f013 0207 	ands.w	r2, r3, #7
 8013426:	d00c      	beq.n	8013442 <__lo0bits+0x22>
 8013428:	07d9      	lsls	r1, r3, #31
 801342a:	d422      	bmi.n	8013472 <__lo0bits+0x52>
 801342c:	079a      	lsls	r2, r3, #30
 801342e:	bf49      	itett	mi
 8013430:	085b      	lsrmi	r3, r3, #1
 8013432:	089b      	lsrpl	r3, r3, #2
 8013434:	6003      	strmi	r3, [r0, #0]
 8013436:	2201      	movmi	r2, #1
 8013438:	bf5c      	itt	pl
 801343a:	6003      	strpl	r3, [r0, #0]
 801343c:	2202      	movpl	r2, #2
 801343e:	4610      	mov	r0, r2
 8013440:	4770      	bx	lr
 8013442:	b299      	uxth	r1, r3
 8013444:	b909      	cbnz	r1, 801344a <__lo0bits+0x2a>
 8013446:	0c1b      	lsrs	r3, r3, #16
 8013448:	2210      	movs	r2, #16
 801344a:	b2d9      	uxtb	r1, r3
 801344c:	b909      	cbnz	r1, 8013452 <__lo0bits+0x32>
 801344e:	3208      	adds	r2, #8
 8013450:	0a1b      	lsrs	r3, r3, #8
 8013452:	0719      	lsls	r1, r3, #28
 8013454:	bf04      	itt	eq
 8013456:	091b      	lsreq	r3, r3, #4
 8013458:	3204      	addeq	r2, #4
 801345a:	0799      	lsls	r1, r3, #30
 801345c:	bf04      	itt	eq
 801345e:	089b      	lsreq	r3, r3, #2
 8013460:	3202      	addeq	r2, #2
 8013462:	07d9      	lsls	r1, r3, #31
 8013464:	d403      	bmi.n	801346e <__lo0bits+0x4e>
 8013466:	085b      	lsrs	r3, r3, #1
 8013468:	f102 0201 	add.w	r2, r2, #1
 801346c:	d003      	beq.n	8013476 <__lo0bits+0x56>
 801346e:	6003      	str	r3, [r0, #0]
 8013470:	e7e5      	b.n	801343e <__lo0bits+0x1e>
 8013472:	2200      	movs	r2, #0
 8013474:	e7e3      	b.n	801343e <__lo0bits+0x1e>
 8013476:	2220      	movs	r2, #32
 8013478:	e7e1      	b.n	801343e <__lo0bits+0x1e>
	...

0801347c <__i2b>:
 801347c:	b510      	push	{r4, lr}
 801347e:	460c      	mov	r4, r1
 8013480:	2101      	movs	r1, #1
 8013482:	f7ff febb 	bl	80131fc <_Balloc>
 8013486:	4602      	mov	r2, r0
 8013488:	b928      	cbnz	r0, 8013496 <__i2b+0x1a>
 801348a:	4b05      	ldr	r3, [pc, #20]	; (80134a0 <__i2b+0x24>)
 801348c:	4805      	ldr	r0, [pc, #20]	; (80134a4 <__i2b+0x28>)
 801348e:	f240 1145 	movw	r1, #325	; 0x145
 8013492:	f001 fc41 	bl	8014d18 <__assert_func>
 8013496:	2301      	movs	r3, #1
 8013498:	6144      	str	r4, [r0, #20]
 801349a:	6103      	str	r3, [r0, #16]
 801349c:	bd10      	pop	{r4, pc}
 801349e:	bf00      	nop
 80134a0:	080187dd 	.word	0x080187dd
 80134a4:	080187ee 	.word	0x080187ee

080134a8 <__multiply>:
 80134a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ac:	4691      	mov	r9, r2
 80134ae:	690a      	ldr	r2, [r1, #16]
 80134b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	bfb8      	it	lt
 80134b8:	460b      	movlt	r3, r1
 80134ba:	460c      	mov	r4, r1
 80134bc:	bfbc      	itt	lt
 80134be:	464c      	movlt	r4, r9
 80134c0:	4699      	movlt	r9, r3
 80134c2:	6927      	ldr	r7, [r4, #16]
 80134c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80134c8:	68a3      	ldr	r3, [r4, #8]
 80134ca:	6861      	ldr	r1, [r4, #4]
 80134cc:	eb07 060a 	add.w	r6, r7, sl
 80134d0:	42b3      	cmp	r3, r6
 80134d2:	b085      	sub	sp, #20
 80134d4:	bfb8      	it	lt
 80134d6:	3101      	addlt	r1, #1
 80134d8:	f7ff fe90 	bl	80131fc <_Balloc>
 80134dc:	b930      	cbnz	r0, 80134ec <__multiply+0x44>
 80134de:	4602      	mov	r2, r0
 80134e0:	4b44      	ldr	r3, [pc, #272]	; (80135f4 <__multiply+0x14c>)
 80134e2:	4845      	ldr	r0, [pc, #276]	; (80135f8 <__multiply+0x150>)
 80134e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80134e8:	f001 fc16 	bl	8014d18 <__assert_func>
 80134ec:	f100 0514 	add.w	r5, r0, #20
 80134f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80134f4:	462b      	mov	r3, r5
 80134f6:	2200      	movs	r2, #0
 80134f8:	4543      	cmp	r3, r8
 80134fa:	d321      	bcc.n	8013540 <__multiply+0x98>
 80134fc:	f104 0314 	add.w	r3, r4, #20
 8013500:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013504:	f109 0314 	add.w	r3, r9, #20
 8013508:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801350c:	9202      	str	r2, [sp, #8]
 801350e:	1b3a      	subs	r2, r7, r4
 8013510:	3a15      	subs	r2, #21
 8013512:	f022 0203 	bic.w	r2, r2, #3
 8013516:	3204      	adds	r2, #4
 8013518:	f104 0115 	add.w	r1, r4, #21
 801351c:	428f      	cmp	r7, r1
 801351e:	bf38      	it	cc
 8013520:	2204      	movcc	r2, #4
 8013522:	9201      	str	r2, [sp, #4]
 8013524:	9a02      	ldr	r2, [sp, #8]
 8013526:	9303      	str	r3, [sp, #12]
 8013528:	429a      	cmp	r2, r3
 801352a:	d80c      	bhi.n	8013546 <__multiply+0x9e>
 801352c:	2e00      	cmp	r6, #0
 801352e:	dd03      	ble.n	8013538 <__multiply+0x90>
 8013530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013534:	2b00      	cmp	r3, #0
 8013536:	d05b      	beq.n	80135f0 <__multiply+0x148>
 8013538:	6106      	str	r6, [r0, #16]
 801353a:	b005      	add	sp, #20
 801353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013540:	f843 2b04 	str.w	r2, [r3], #4
 8013544:	e7d8      	b.n	80134f8 <__multiply+0x50>
 8013546:	f8b3 a000 	ldrh.w	sl, [r3]
 801354a:	f1ba 0f00 	cmp.w	sl, #0
 801354e:	d024      	beq.n	801359a <__multiply+0xf2>
 8013550:	f104 0e14 	add.w	lr, r4, #20
 8013554:	46a9      	mov	r9, r5
 8013556:	f04f 0c00 	mov.w	ip, #0
 801355a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801355e:	f8d9 1000 	ldr.w	r1, [r9]
 8013562:	fa1f fb82 	uxth.w	fp, r2
 8013566:	b289      	uxth	r1, r1
 8013568:	fb0a 110b 	mla	r1, sl, fp, r1
 801356c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013570:	f8d9 2000 	ldr.w	r2, [r9]
 8013574:	4461      	add	r1, ip
 8013576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801357a:	fb0a c20b 	mla	r2, sl, fp, ip
 801357e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013582:	b289      	uxth	r1, r1
 8013584:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013588:	4577      	cmp	r7, lr
 801358a:	f849 1b04 	str.w	r1, [r9], #4
 801358e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013592:	d8e2      	bhi.n	801355a <__multiply+0xb2>
 8013594:	9a01      	ldr	r2, [sp, #4]
 8013596:	f845 c002 	str.w	ip, [r5, r2]
 801359a:	9a03      	ldr	r2, [sp, #12]
 801359c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80135a0:	3304      	adds	r3, #4
 80135a2:	f1b9 0f00 	cmp.w	r9, #0
 80135a6:	d021      	beq.n	80135ec <__multiply+0x144>
 80135a8:	6829      	ldr	r1, [r5, #0]
 80135aa:	f104 0c14 	add.w	ip, r4, #20
 80135ae:	46ae      	mov	lr, r5
 80135b0:	f04f 0a00 	mov.w	sl, #0
 80135b4:	f8bc b000 	ldrh.w	fp, [ip]
 80135b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80135bc:	fb09 220b 	mla	r2, r9, fp, r2
 80135c0:	4452      	add	r2, sl
 80135c2:	b289      	uxth	r1, r1
 80135c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80135c8:	f84e 1b04 	str.w	r1, [lr], #4
 80135cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80135d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80135d4:	f8be 1000 	ldrh.w	r1, [lr]
 80135d8:	fb09 110a 	mla	r1, r9, sl, r1
 80135dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80135e0:	4567      	cmp	r7, ip
 80135e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80135e6:	d8e5      	bhi.n	80135b4 <__multiply+0x10c>
 80135e8:	9a01      	ldr	r2, [sp, #4]
 80135ea:	50a9      	str	r1, [r5, r2]
 80135ec:	3504      	adds	r5, #4
 80135ee:	e799      	b.n	8013524 <__multiply+0x7c>
 80135f0:	3e01      	subs	r6, #1
 80135f2:	e79b      	b.n	801352c <__multiply+0x84>
 80135f4:	080187dd 	.word	0x080187dd
 80135f8:	080187ee 	.word	0x080187ee

080135fc <__pow5mult>:
 80135fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013600:	4615      	mov	r5, r2
 8013602:	f012 0203 	ands.w	r2, r2, #3
 8013606:	4606      	mov	r6, r0
 8013608:	460f      	mov	r7, r1
 801360a:	d007      	beq.n	801361c <__pow5mult+0x20>
 801360c:	4c25      	ldr	r4, [pc, #148]	; (80136a4 <__pow5mult+0xa8>)
 801360e:	3a01      	subs	r2, #1
 8013610:	2300      	movs	r3, #0
 8013612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013616:	f7ff fe53 	bl	80132c0 <__multadd>
 801361a:	4607      	mov	r7, r0
 801361c:	10ad      	asrs	r5, r5, #2
 801361e:	d03d      	beq.n	801369c <__pow5mult+0xa0>
 8013620:	69f4      	ldr	r4, [r6, #28]
 8013622:	b97c      	cbnz	r4, 8013644 <__pow5mult+0x48>
 8013624:	2010      	movs	r0, #16
 8013626:	f7ff fd35 	bl	8013094 <malloc>
 801362a:	4602      	mov	r2, r0
 801362c:	61f0      	str	r0, [r6, #28]
 801362e:	b928      	cbnz	r0, 801363c <__pow5mult+0x40>
 8013630:	4b1d      	ldr	r3, [pc, #116]	; (80136a8 <__pow5mult+0xac>)
 8013632:	481e      	ldr	r0, [pc, #120]	; (80136ac <__pow5mult+0xb0>)
 8013634:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013638:	f001 fb6e 	bl	8014d18 <__assert_func>
 801363c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013640:	6004      	str	r4, [r0, #0]
 8013642:	60c4      	str	r4, [r0, #12]
 8013644:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801364c:	b94c      	cbnz	r4, 8013662 <__pow5mult+0x66>
 801364e:	f240 2171 	movw	r1, #625	; 0x271
 8013652:	4630      	mov	r0, r6
 8013654:	f7ff ff12 	bl	801347c <__i2b>
 8013658:	2300      	movs	r3, #0
 801365a:	f8c8 0008 	str.w	r0, [r8, #8]
 801365e:	4604      	mov	r4, r0
 8013660:	6003      	str	r3, [r0, #0]
 8013662:	f04f 0900 	mov.w	r9, #0
 8013666:	07eb      	lsls	r3, r5, #31
 8013668:	d50a      	bpl.n	8013680 <__pow5mult+0x84>
 801366a:	4639      	mov	r1, r7
 801366c:	4622      	mov	r2, r4
 801366e:	4630      	mov	r0, r6
 8013670:	f7ff ff1a 	bl	80134a8 <__multiply>
 8013674:	4639      	mov	r1, r7
 8013676:	4680      	mov	r8, r0
 8013678:	4630      	mov	r0, r6
 801367a:	f7ff fdff 	bl	801327c <_Bfree>
 801367e:	4647      	mov	r7, r8
 8013680:	106d      	asrs	r5, r5, #1
 8013682:	d00b      	beq.n	801369c <__pow5mult+0xa0>
 8013684:	6820      	ldr	r0, [r4, #0]
 8013686:	b938      	cbnz	r0, 8013698 <__pow5mult+0x9c>
 8013688:	4622      	mov	r2, r4
 801368a:	4621      	mov	r1, r4
 801368c:	4630      	mov	r0, r6
 801368e:	f7ff ff0b 	bl	80134a8 <__multiply>
 8013692:	6020      	str	r0, [r4, #0]
 8013694:	f8c0 9000 	str.w	r9, [r0]
 8013698:	4604      	mov	r4, r0
 801369a:	e7e4      	b.n	8013666 <__pow5mult+0x6a>
 801369c:	4638      	mov	r0, r7
 801369e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136a2:	bf00      	nop
 80136a4:	08018938 	.word	0x08018938
 80136a8:	0801876e 	.word	0x0801876e
 80136ac:	080187ee 	.word	0x080187ee

080136b0 <__lshift>:
 80136b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136b4:	460c      	mov	r4, r1
 80136b6:	6849      	ldr	r1, [r1, #4]
 80136b8:	6923      	ldr	r3, [r4, #16]
 80136ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80136be:	68a3      	ldr	r3, [r4, #8]
 80136c0:	4607      	mov	r7, r0
 80136c2:	4691      	mov	r9, r2
 80136c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80136c8:	f108 0601 	add.w	r6, r8, #1
 80136cc:	42b3      	cmp	r3, r6
 80136ce:	db0b      	blt.n	80136e8 <__lshift+0x38>
 80136d0:	4638      	mov	r0, r7
 80136d2:	f7ff fd93 	bl	80131fc <_Balloc>
 80136d6:	4605      	mov	r5, r0
 80136d8:	b948      	cbnz	r0, 80136ee <__lshift+0x3e>
 80136da:	4602      	mov	r2, r0
 80136dc:	4b28      	ldr	r3, [pc, #160]	; (8013780 <__lshift+0xd0>)
 80136de:	4829      	ldr	r0, [pc, #164]	; (8013784 <__lshift+0xd4>)
 80136e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80136e4:	f001 fb18 	bl	8014d18 <__assert_func>
 80136e8:	3101      	adds	r1, #1
 80136ea:	005b      	lsls	r3, r3, #1
 80136ec:	e7ee      	b.n	80136cc <__lshift+0x1c>
 80136ee:	2300      	movs	r3, #0
 80136f0:	f100 0114 	add.w	r1, r0, #20
 80136f4:	f100 0210 	add.w	r2, r0, #16
 80136f8:	4618      	mov	r0, r3
 80136fa:	4553      	cmp	r3, sl
 80136fc:	db33      	blt.n	8013766 <__lshift+0xb6>
 80136fe:	6920      	ldr	r0, [r4, #16]
 8013700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013704:	f104 0314 	add.w	r3, r4, #20
 8013708:	f019 091f 	ands.w	r9, r9, #31
 801370c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013714:	d02b      	beq.n	801376e <__lshift+0xbe>
 8013716:	f1c9 0e20 	rsb	lr, r9, #32
 801371a:	468a      	mov	sl, r1
 801371c:	2200      	movs	r2, #0
 801371e:	6818      	ldr	r0, [r3, #0]
 8013720:	fa00 f009 	lsl.w	r0, r0, r9
 8013724:	4310      	orrs	r0, r2
 8013726:	f84a 0b04 	str.w	r0, [sl], #4
 801372a:	f853 2b04 	ldr.w	r2, [r3], #4
 801372e:	459c      	cmp	ip, r3
 8013730:	fa22 f20e 	lsr.w	r2, r2, lr
 8013734:	d8f3      	bhi.n	801371e <__lshift+0x6e>
 8013736:	ebac 0304 	sub.w	r3, ip, r4
 801373a:	3b15      	subs	r3, #21
 801373c:	f023 0303 	bic.w	r3, r3, #3
 8013740:	3304      	adds	r3, #4
 8013742:	f104 0015 	add.w	r0, r4, #21
 8013746:	4584      	cmp	ip, r0
 8013748:	bf38      	it	cc
 801374a:	2304      	movcc	r3, #4
 801374c:	50ca      	str	r2, [r1, r3]
 801374e:	b10a      	cbz	r2, 8013754 <__lshift+0xa4>
 8013750:	f108 0602 	add.w	r6, r8, #2
 8013754:	3e01      	subs	r6, #1
 8013756:	4638      	mov	r0, r7
 8013758:	612e      	str	r6, [r5, #16]
 801375a:	4621      	mov	r1, r4
 801375c:	f7ff fd8e 	bl	801327c <_Bfree>
 8013760:	4628      	mov	r0, r5
 8013762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013766:	f842 0f04 	str.w	r0, [r2, #4]!
 801376a:	3301      	adds	r3, #1
 801376c:	e7c5      	b.n	80136fa <__lshift+0x4a>
 801376e:	3904      	subs	r1, #4
 8013770:	f853 2b04 	ldr.w	r2, [r3], #4
 8013774:	f841 2f04 	str.w	r2, [r1, #4]!
 8013778:	459c      	cmp	ip, r3
 801377a:	d8f9      	bhi.n	8013770 <__lshift+0xc0>
 801377c:	e7ea      	b.n	8013754 <__lshift+0xa4>
 801377e:	bf00      	nop
 8013780:	080187dd 	.word	0x080187dd
 8013784:	080187ee 	.word	0x080187ee

08013788 <__mcmp>:
 8013788:	b530      	push	{r4, r5, lr}
 801378a:	6902      	ldr	r2, [r0, #16]
 801378c:	690c      	ldr	r4, [r1, #16]
 801378e:	1b12      	subs	r2, r2, r4
 8013790:	d10e      	bne.n	80137b0 <__mcmp+0x28>
 8013792:	f100 0314 	add.w	r3, r0, #20
 8013796:	3114      	adds	r1, #20
 8013798:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801379c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80137a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80137a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80137a8:	42a5      	cmp	r5, r4
 80137aa:	d003      	beq.n	80137b4 <__mcmp+0x2c>
 80137ac:	d305      	bcc.n	80137ba <__mcmp+0x32>
 80137ae:	2201      	movs	r2, #1
 80137b0:	4610      	mov	r0, r2
 80137b2:	bd30      	pop	{r4, r5, pc}
 80137b4:	4283      	cmp	r3, r0
 80137b6:	d3f3      	bcc.n	80137a0 <__mcmp+0x18>
 80137b8:	e7fa      	b.n	80137b0 <__mcmp+0x28>
 80137ba:	f04f 32ff 	mov.w	r2, #4294967295
 80137be:	e7f7      	b.n	80137b0 <__mcmp+0x28>

080137c0 <__mdiff>:
 80137c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137c4:	460c      	mov	r4, r1
 80137c6:	4606      	mov	r6, r0
 80137c8:	4611      	mov	r1, r2
 80137ca:	4620      	mov	r0, r4
 80137cc:	4690      	mov	r8, r2
 80137ce:	f7ff ffdb 	bl	8013788 <__mcmp>
 80137d2:	1e05      	subs	r5, r0, #0
 80137d4:	d110      	bne.n	80137f8 <__mdiff+0x38>
 80137d6:	4629      	mov	r1, r5
 80137d8:	4630      	mov	r0, r6
 80137da:	f7ff fd0f 	bl	80131fc <_Balloc>
 80137de:	b930      	cbnz	r0, 80137ee <__mdiff+0x2e>
 80137e0:	4b3a      	ldr	r3, [pc, #232]	; (80138cc <__mdiff+0x10c>)
 80137e2:	4602      	mov	r2, r0
 80137e4:	f240 2137 	movw	r1, #567	; 0x237
 80137e8:	4839      	ldr	r0, [pc, #228]	; (80138d0 <__mdiff+0x110>)
 80137ea:	f001 fa95 	bl	8014d18 <__assert_func>
 80137ee:	2301      	movs	r3, #1
 80137f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80137f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f8:	bfa4      	itt	ge
 80137fa:	4643      	movge	r3, r8
 80137fc:	46a0      	movge	r8, r4
 80137fe:	4630      	mov	r0, r6
 8013800:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013804:	bfa6      	itte	ge
 8013806:	461c      	movge	r4, r3
 8013808:	2500      	movge	r5, #0
 801380a:	2501      	movlt	r5, #1
 801380c:	f7ff fcf6 	bl	80131fc <_Balloc>
 8013810:	b920      	cbnz	r0, 801381c <__mdiff+0x5c>
 8013812:	4b2e      	ldr	r3, [pc, #184]	; (80138cc <__mdiff+0x10c>)
 8013814:	4602      	mov	r2, r0
 8013816:	f240 2145 	movw	r1, #581	; 0x245
 801381a:	e7e5      	b.n	80137e8 <__mdiff+0x28>
 801381c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013820:	6926      	ldr	r6, [r4, #16]
 8013822:	60c5      	str	r5, [r0, #12]
 8013824:	f104 0914 	add.w	r9, r4, #20
 8013828:	f108 0514 	add.w	r5, r8, #20
 801382c:	f100 0e14 	add.w	lr, r0, #20
 8013830:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013838:	f108 0210 	add.w	r2, r8, #16
 801383c:	46f2      	mov	sl, lr
 801383e:	2100      	movs	r1, #0
 8013840:	f859 3b04 	ldr.w	r3, [r9], #4
 8013844:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013848:	fa11 f88b 	uxtah	r8, r1, fp
 801384c:	b299      	uxth	r1, r3
 801384e:	0c1b      	lsrs	r3, r3, #16
 8013850:	eba8 0801 	sub.w	r8, r8, r1
 8013854:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013858:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801385c:	fa1f f888 	uxth.w	r8, r8
 8013860:	1419      	asrs	r1, r3, #16
 8013862:	454e      	cmp	r6, r9
 8013864:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013868:	f84a 3b04 	str.w	r3, [sl], #4
 801386c:	d8e8      	bhi.n	8013840 <__mdiff+0x80>
 801386e:	1b33      	subs	r3, r6, r4
 8013870:	3b15      	subs	r3, #21
 8013872:	f023 0303 	bic.w	r3, r3, #3
 8013876:	3304      	adds	r3, #4
 8013878:	3415      	adds	r4, #21
 801387a:	42a6      	cmp	r6, r4
 801387c:	bf38      	it	cc
 801387e:	2304      	movcc	r3, #4
 8013880:	441d      	add	r5, r3
 8013882:	4473      	add	r3, lr
 8013884:	469e      	mov	lr, r3
 8013886:	462e      	mov	r6, r5
 8013888:	4566      	cmp	r6, ip
 801388a:	d30e      	bcc.n	80138aa <__mdiff+0xea>
 801388c:	f10c 0203 	add.w	r2, ip, #3
 8013890:	1b52      	subs	r2, r2, r5
 8013892:	f022 0203 	bic.w	r2, r2, #3
 8013896:	3d03      	subs	r5, #3
 8013898:	45ac      	cmp	ip, r5
 801389a:	bf38      	it	cc
 801389c:	2200      	movcc	r2, #0
 801389e:	4413      	add	r3, r2
 80138a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80138a4:	b17a      	cbz	r2, 80138c6 <__mdiff+0x106>
 80138a6:	6107      	str	r7, [r0, #16]
 80138a8:	e7a4      	b.n	80137f4 <__mdiff+0x34>
 80138aa:	f856 8b04 	ldr.w	r8, [r6], #4
 80138ae:	fa11 f288 	uxtah	r2, r1, r8
 80138b2:	1414      	asrs	r4, r2, #16
 80138b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80138b8:	b292      	uxth	r2, r2
 80138ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80138be:	f84e 2b04 	str.w	r2, [lr], #4
 80138c2:	1421      	asrs	r1, r4, #16
 80138c4:	e7e0      	b.n	8013888 <__mdiff+0xc8>
 80138c6:	3f01      	subs	r7, #1
 80138c8:	e7ea      	b.n	80138a0 <__mdiff+0xe0>
 80138ca:	bf00      	nop
 80138cc:	080187dd 	.word	0x080187dd
 80138d0:	080187ee 	.word	0x080187ee

080138d4 <__ulp>:
 80138d4:	b082      	sub	sp, #8
 80138d6:	ed8d 0b00 	vstr	d0, [sp]
 80138da:	9a01      	ldr	r2, [sp, #4]
 80138dc:	4b0f      	ldr	r3, [pc, #60]	; (801391c <__ulp+0x48>)
 80138de:	4013      	ands	r3, r2
 80138e0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	dc08      	bgt.n	80138fa <__ulp+0x26>
 80138e8:	425b      	negs	r3, r3
 80138ea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80138ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80138f2:	da04      	bge.n	80138fe <__ulp+0x2a>
 80138f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80138f8:	4113      	asrs	r3, r2
 80138fa:	2200      	movs	r2, #0
 80138fc:	e008      	b.n	8013910 <__ulp+0x3c>
 80138fe:	f1a2 0314 	sub.w	r3, r2, #20
 8013902:	2b1e      	cmp	r3, #30
 8013904:	bfda      	itte	le
 8013906:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801390a:	40da      	lsrle	r2, r3
 801390c:	2201      	movgt	r2, #1
 801390e:	2300      	movs	r3, #0
 8013910:	4619      	mov	r1, r3
 8013912:	4610      	mov	r0, r2
 8013914:	ec41 0b10 	vmov	d0, r0, r1
 8013918:	b002      	add	sp, #8
 801391a:	4770      	bx	lr
 801391c:	7ff00000 	.word	0x7ff00000

08013920 <__b2d>:
 8013920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013924:	6906      	ldr	r6, [r0, #16]
 8013926:	f100 0814 	add.w	r8, r0, #20
 801392a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801392e:	1f37      	subs	r7, r6, #4
 8013930:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013934:	4610      	mov	r0, r2
 8013936:	f7ff fd53 	bl	80133e0 <__hi0bits>
 801393a:	f1c0 0320 	rsb	r3, r0, #32
 801393e:	280a      	cmp	r0, #10
 8013940:	600b      	str	r3, [r1, #0]
 8013942:	491b      	ldr	r1, [pc, #108]	; (80139b0 <__b2d+0x90>)
 8013944:	dc15      	bgt.n	8013972 <__b2d+0x52>
 8013946:	f1c0 0c0b 	rsb	ip, r0, #11
 801394a:	fa22 f30c 	lsr.w	r3, r2, ip
 801394e:	45b8      	cmp	r8, r7
 8013950:	ea43 0501 	orr.w	r5, r3, r1
 8013954:	bf34      	ite	cc
 8013956:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801395a:	2300      	movcs	r3, #0
 801395c:	3015      	adds	r0, #21
 801395e:	fa02 f000 	lsl.w	r0, r2, r0
 8013962:	fa23 f30c 	lsr.w	r3, r3, ip
 8013966:	4303      	orrs	r3, r0
 8013968:	461c      	mov	r4, r3
 801396a:	ec45 4b10 	vmov	d0, r4, r5
 801396e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013972:	45b8      	cmp	r8, r7
 8013974:	bf3a      	itte	cc
 8013976:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801397a:	f1a6 0708 	subcc.w	r7, r6, #8
 801397e:	2300      	movcs	r3, #0
 8013980:	380b      	subs	r0, #11
 8013982:	d012      	beq.n	80139aa <__b2d+0x8a>
 8013984:	f1c0 0120 	rsb	r1, r0, #32
 8013988:	fa23 f401 	lsr.w	r4, r3, r1
 801398c:	4082      	lsls	r2, r0
 801398e:	4322      	orrs	r2, r4
 8013990:	4547      	cmp	r7, r8
 8013992:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013996:	bf8c      	ite	hi
 8013998:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801399c:	2200      	movls	r2, #0
 801399e:	4083      	lsls	r3, r0
 80139a0:	40ca      	lsrs	r2, r1
 80139a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80139a6:	4313      	orrs	r3, r2
 80139a8:	e7de      	b.n	8013968 <__b2d+0x48>
 80139aa:	ea42 0501 	orr.w	r5, r2, r1
 80139ae:	e7db      	b.n	8013968 <__b2d+0x48>
 80139b0:	3ff00000 	.word	0x3ff00000

080139b4 <__d2b>:
 80139b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80139b8:	460f      	mov	r7, r1
 80139ba:	2101      	movs	r1, #1
 80139bc:	ec59 8b10 	vmov	r8, r9, d0
 80139c0:	4616      	mov	r6, r2
 80139c2:	f7ff fc1b 	bl	80131fc <_Balloc>
 80139c6:	4604      	mov	r4, r0
 80139c8:	b930      	cbnz	r0, 80139d8 <__d2b+0x24>
 80139ca:	4602      	mov	r2, r0
 80139cc:	4b24      	ldr	r3, [pc, #144]	; (8013a60 <__d2b+0xac>)
 80139ce:	4825      	ldr	r0, [pc, #148]	; (8013a64 <__d2b+0xb0>)
 80139d0:	f240 310f 	movw	r1, #783	; 0x30f
 80139d4:	f001 f9a0 	bl	8014d18 <__assert_func>
 80139d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80139dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80139e0:	bb2d      	cbnz	r5, 8013a2e <__d2b+0x7a>
 80139e2:	9301      	str	r3, [sp, #4]
 80139e4:	f1b8 0300 	subs.w	r3, r8, #0
 80139e8:	d026      	beq.n	8013a38 <__d2b+0x84>
 80139ea:	4668      	mov	r0, sp
 80139ec:	9300      	str	r3, [sp, #0]
 80139ee:	f7ff fd17 	bl	8013420 <__lo0bits>
 80139f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80139f6:	b1e8      	cbz	r0, 8013a34 <__d2b+0x80>
 80139f8:	f1c0 0320 	rsb	r3, r0, #32
 80139fc:	fa02 f303 	lsl.w	r3, r2, r3
 8013a00:	430b      	orrs	r3, r1
 8013a02:	40c2      	lsrs	r2, r0
 8013a04:	6163      	str	r3, [r4, #20]
 8013a06:	9201      	str	r2, [sp, #4]
 8013a08:	9b01      	ldr	r3, [sp, #4]
 8013a0a:	61a3      	str	r3, [r4, #24]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	bf14      	ite	ne
 8013a10:	2202      	movne	r2, #2
 8013a12:	2201      	moveq	r2, #1
 8013a14:	6122      	str	r2, [r4, #16]
 8013a16:	b1bd      	cbz	r5, 8013a48 <__d2b+0x94>
 8013a18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013a1c:	4405      	add	r5, r0
 8013a1e:	603d      	str	r5, [r7, #0]
 8013a20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013a24:	6030      	str	r0, [r6, #0]
 8013a26:	4620      	mov	r0, r4
 8013a28:	b003      	add	sp, #12
 8013a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013a32:	e7d6      	b.n	80139e2 <__d2b+0x2e>
 8013a34:	6161      	str	r1, [r4, #20]
 8013a36:	e7e7      	b.n	8013a08 <__d2b+0x54>
 8013a38:	a801      	add	r0, sp, #4
 8013a3a:	f7ff fcf1 	bl	8013420 <__lo0bits>
 8013a3e:	9b01      	ldr	r3, [sp, #4]
 8013a40:	6163      	str	r3, [r4, #20]
 8013a42:	3020      	adds	r0, #32
 8013a44:	2201      	movs	r2, #1
 8013a46:	e7e5      	b.n	8013a14 <__d2b+0x60>
 8013a48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013a4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013a50:	6038      	str	r0, [r7, #0]
 8013a52:	6918      	ldr	r0, [r3, #16]
 8013a54:	f7ff fcc4 	bl	80133e0 <__hi0bits>
 8013a58:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013a5c:	e7e2      	b.n	8013a24 <__d2b+0x70>
 8013a5e:	bf00      	nop
 8013a60:	080187dd 	.word	0x080187dd
 8013a64:	080187ee 	.word	0x080187ee

08013a68 <__ratio>:
 8013a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a6c:	4688      	mov	r8, r1
 8013a6e:	4669      	mov	r1, sp
 8013a70:	4681      	mov	r9, r0
 8013a72:	f7ff ff55 	bl	8013920 <__b2d>
 8013a76:	a901      	add	r1, sp, #4
 8013a78:	4640      	mov	r0, r8
 8013a7a:	ec55 4b10 	vmov	r4, r5, d0
 8013a7e:	f7ff ff4f 	bl	8013920 <__b2d>
 8013a82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013a86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013a8a:	eba3 0c02 	sub.w	ip, r3, r2
 8013a8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013a92:	1a9b      	subs	r3, r3, r2
 8013a94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013a98:	ec51 0b10 	vmov	r0, r1, d0
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	bfd6      	itet	le
 8013aa0:	460a      	movle	r2, r1
 8013aa2:	462a      	movgt	r2, r5
 8013aa4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013aa8:	468b      	mov	fp, r1
 8013aaa:	462f      	mov	r7, r5
 8013aac:	bfd4      	ite	le
 8013aae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013ab2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	ee10 2a10 	vmov	r2, s0
 8013abc:	465b      	mov	r3, fp
 8013abe:	4639      	mov	r1, r7
 8013ac0:	f7ec feec 	bl	800089c <__aeabi_ddiv>
 8013ac4:	ec41 0b10 	vmov	d0, r0, r1
 8013ac8:	b003      	add	sp, #12
 8013aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ace <__copybits>:
 8013ace:	3901      	subs	r1, #1
 8013ad0:	b570      	push	{r4, r5, r6, lr}
 8013ad2:	1149      	asrs	r1, r1, #5
 8013ad4:	6914      	ldr	r4, [r2, #16]
 8013ad6:	3101      	adds	r1, #1
 8013ad8:	f102 0314 	add.w	r3, r2, #20
 8013adc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013ae0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013ae4:	1f05      	subs	r5, r0, #4
 8013ae6:	42a3      	cmp	r3, r4
 8013ae8:	d30c      	bcc.n	8013b04 <__copybits+0x36>
 8013aea:	1aa3      	subs	r3, r4, r2
 8013aec:	3b11      	subs	r3, #17
 8013aee:	f023 0303 	bic.w	r3, r3, #3
 8013af2:	3211      	adds	r2, #17
 8013af4:	42a2      	cmp	r2, r4
 8013af6:	bf88      	it	hi
 8013af8:	2300      	movhi	r3, #0
 8013afa:	4418      	add	r0, r3
 8013afc:	2300      	movs	r3, #0
 8013afe:	4288      	cmp	r0, r1
 8013b00:	d305      	bcc.n	8013b0e <__copybits+0x40>
 8013b02:	bd70      	pop	{r4, r5, r6, pc}
 8013b04:	f853 6b04 	ldr.w	r6, [r3], #4
 8013b08:	f845 6f04 	str.w	r6, [r5, #4]!
 8013b0c:	e7eb      	b.n	8013ae6 <__copybits+0x18>
 8013b0e:	f840 3b04 	str.w	r3, [r0], #4
 8013b12:	e7f4      	b.n	8013afe <__copybits+0x30>

08013b14 <__any_on>:
 8013b14:	f100 0214 	add.w	r2, r0, #20
 8013b18:	6900      	ldr	r0, [r0, #16]
 8013b1a:	114b      	asrs	r3, r1, #5
 8013b1c:	4298      	cmp	r0, r3
 8013b1e:	b510      	push	{r4, lr}
 8013b20:	db11      	blt.n	8013b46 <__any_on+0x32>
 8013b22:	dd0a      	ble.n	8013b3a <__any_on+0x26>
 8013b24:	f011 011f 	ands.w	r1, r1, #31
 8013b28:	d007      	beq.n	8013b3a <__any_on+0x26>
 8013b2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013b2e:	fa24 f001 	lsr.w	r0, r4, r1
 8013b32:	fa00 f101 	lsl.w	r1, r0, r1
 8013b36:	428c      	cmp	r4, r1
 8013b38:	d10b      	bne.n	8013b52 <__any_on+0x3e>
 8013b3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013b3e:	4293      	cmp	r3, r2
 8013b40:	d803      	bhi.n	8013b4a <__any_on+0x36>
 8013b42:	2000      	movs	r0, #0
 8013b44:	bd10      	pop	{r4, pc}
 8013b46:	4603      	mov	r3, r0
 8013b48:	e7f7      	b.n	8013b3a <__any_on+0x26>
 8013b4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013b4e:	2900      	cmp	r1, #0
 8013b50:	d0f5      	beq.n	8013b3e <__any_on+0x2a>
 8013b52:	2001      	movs	r0, #1
 8013b54:	e7f6      	b.n	8013b44 <__any_on+0x30>

08013b56 <sulp>:
 8013b56:	b570      	push	{r4, r5, r6, lr}
 8013b58:	4604      	mov	r4, r0
 8013b5a:	460d      	mov	r5, r1
 8013b5c:	ec45 4b10 	vmov	d0, r4, r5
 8013b60:	4616      	mov	r6, r2
 8013b62:	f7ff feb7 	bl	80138d4 <__ulp>
 8013b66:	ec51 0b10 	vmov	r0, r1, d0
 8013b6a:	b17e      	cbz	r6, 8013b8c <sulp+0x36>
 8013b6c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013b70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	dd09      	ble.n	8013b8c <sulp+0x36>
 8013b78:	051b      	lsls	r3, r3, #20
 8013b7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013b7e:	2400      	movs	r4, #0
 8013b80:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013b84:	4622      	mov	r2, r4
 8013b86:	462b      	mov	r3, r5
 8013b88:	f7ec fd5e 	bl	8000648 <__aeabi_dmul>
 8013b8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013b90 <_strtod_l>:
 8013b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b94:	ed2d 8b02 	vpush	{d8}
 8013b98:	b09b      	sub	sp, #108	; 0x6c
 8013b9a:	4604      	mov	r4, r0
 8013b9c:	9213      	str	r2, [sp, #76]	; 0x4c
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	9216      	str	r2, [sp, #88]	; 0x58
 8013ba2:	460d      	mov	r5, r1
 8013ba4:	f04f 0800 	mov.w	r8, #0
 8013ba8:	f04f 0900 	mov.w	r9, #0
 8013bac:	460a      	mov	r2, r1
 8013bae:	9215      	str	r2, [sp, #84]	; 0x54
 8013bb0:	7811      	ldrb	r1, [r2, #0]
 8013bb2:	292b      	cmp	r1, #43	; 0x2b
 8013bb4:	d04c      	beq.n	8013c50 <_strtod_l+0xc0>
 8013bb6:	d83a      	bhi.n	8013c2e <_strtod_l+0x9e>
 8013bb8:	290d      	cmp	r1, #13
 8013bba:	d834      	bhi.n	8013c26 <_strtod_l+0x96>
 8013bbc:	2908      	cmp	r1, #8
 8013bbe:	d834      	bhi.n	8013c2a <_strtod_l+0x9a>
 8013bc0:	2900      	cmp	r1, #0
 8013bc2:	d03d      	beq.n	8013c40 <_strtod_l+0xb0>
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	920a      	str	r2, [sp, #40]	; 0x28
 8013bc8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8013bca:	7832      	ldrb	r2, [r6, #0]
 8013bcc:	2a30      	cmp	r2, #48	; 0x30
 8013bce:	f040 80b4 	bne.w	8013d3a <_strtod_l+0x1aa>
 8013bd2:	7872      	ldrb	r2, [r6, #1]
 8013bd4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013bd8:	2a58      	cmp	r2, #88	; 0x58
 8013bda:	d170      	bne.n	8013cbe <_strtod_l+0x12e>
 8013bdc:	9302      	str	r3, [sp, #8]
 8013bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013be0:	9301      	str	r3, [sp, #4]
 8013be2:	ab16      	add	r3, sp, #88	; 0x58
 8013be4:	9300      	str	r3, [sp, #0]
 8013be6:	4a8e      	ldr	r2, [pc, #568]	; (8013e20 <_strtod_l+0x290>)
 8013be8:	ab17      	add	r3, sp, #92	; 0x5c
 8013bea:	a915      	add	r1, sp, #84	; 0x54
 8013bec:	4620      	mov	r0, r4
 8013bee:	f001 f92f 	bl	8014e50 <__gethex>
 8013bf2:	f010 070f 	ands.w	r7, r0, #15
 8013bf6:	4605      	mov	r5, r0
 8013bf8:	d005      	beq.n	8013c06 <_strtod_l+0x76>
 8013bfa:	2f06      	cmp	r7, #6
 8013bfc:	d12a      	bne.n	8013c54 <_strtod_l+0xc4>
 8013bfe:	3601      	adds	r6, #1
 8013c00:	2300      	movs	r3, #0
 8013c02:	9615      	str	r6, [sp, #84]	; 0x54
 8013c04:	930a      	str	r3, [sp, #40]	; 0x28
 8013c06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	f040 857f 	bne.w	801470c <_strtod_l+0xb7c>
 8013c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c10:	b1db      	cbz	r3, 8013c4a <_strtod_l+0xba>
 8013c12:	4642      	mov	r2, r8
 8013c14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013c18:	ec43 2b10 	vmov	d0, r2, r3
 8013c1c:	b01b      	add	sp, #108	; 0x6c
 8013c1e:	ecbd 8b02 	vpop	{d8}
 8013c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c26:	2920      	cmp	r1, #32
 8013c28:	d1cc      	bne.n	8013bc4 <_strtod_l+0x34>
 8013c2a:	3201      	adds	r2, #1
 8013c2c:	e7bf      	b.n	8013bae <_strtod_l+0x1e>
 8013c2e:	292d      	cmp	r1, #45	; 0x2d
 8013c30:	d1c8      	bne.n	8013bc4 <_strtod_l+0x34>
 8013c32:	2101      	movs	r1, #1
 8013c34:	910a      	str	r1, [sp, #40]	; 0x28
 8013c36:	1c51      	adds	r1, r2, #1
 8013c38:	9115      	str	r1, [sp, #84]	; 0x54
 8013c3a:	7852      	ldrb	r2, [r2, #1]
 8013c3c:	2a00      	cmp	r2, #0
 8013c3e:	d1c3      	bne.n	8013bc8 <_strtod_l+0x38>
 8013c40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c42:	9515      	str	r5, [sp, #84]	; 0x54
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	f040 855f 	bne.w	8014708 <_strtod_l+0xb78>
 8013c4a:	4642      	mov	r2, r8
 8013c4c:	464b      	mov	r3, r9
 8013c4e:	e7e3      	b.n	8013c18 <_strtod_l+0x88>
 8013c50:	2100      	movs	r1, #0
 8013c52:	e7ef      	b.n	8013c34 <_strtod_l+0xa4>
 8013c54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013c56:	b13a      	cbz	r2, 8013c68 <_strtod_l+0xd8>
 8013c58:	2135      	movs	r1, #53	; 0x35
 8013c5a:	a818      	add	r0, sp, #96	; 0x60
 8013c5c:	f7ff ff37 	bl	8013ace <__copybits>
 8013c60:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013c62:	4620      	mov	r0, r4
 8013c64:	f7ff fb0a 	bl	801327c <_Bfree>
 8013c68:	3f01      	subs	r7, #1
 8013c6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013c6c:	2f04      	cmp	r7, #4
 8013c6e:	d806      	bhi.n	8013c7e <_strtod_l+0xee>
 8013c70:	e8df f007 	tbb	[pc, r7]
 8013c74:	201d0314 	.word	0x201d0314
 8013c78:	14          	.byte	0x14
 8013c79:	00          	.byte	0x00
 8013c7a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8013c7e:	05e9      	lsls	r1, r5, #23
 8013c80:	bf48      	it	mi
 8013c82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8013c86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013c8a:	0d1b      	lsrs	r3, r3, #20
 8013c8c:	051b      	lsls	r3, r3, #20
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d1b9      	bne.n	8013c06 <_strtod_l+0x76>
 8013c92:	f7fe faf7 	bl	8012284 <__errno>
 8013c96:	2322      	movs	r3, #34	; 0x22
 8013c98:	6003      	str	r3, [r0, #0]
 8013c9a:	e7b4      	b.n	8013c06 <_strtod_l+0x76>
 8013c9c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8013ca0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013ca4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013ca8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8013cac:	e7e7      	b.n	8013c7e <_strtod_l+0xee>
 8013cae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013e28 <_strtod_l+0x298>
 8013cb2:	e7e4      	b.n	8013c7e <_strtod_l+0xee>
 8013cb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013cb8:	f04f 38ff 	mov.w	r8, #4294967295
 8013cbc:	e7df      	b.n	8013c7e <_strtod_l+0xee>
 8013cbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013cc0:	1c5a      	adds	r2, r3, #1
 8013cc2:	9215      	str	r2, [sp, #84]	; 0x54
 8013cc4:	785b      	ldrb	r3, [r3, #1]
 8013cc6:	2b30      	cmp	r3, #48	; 0x30
 8013cc8:	d0f9      	beq.n	8013cbe <_strtod_l+0x12e>
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d09b      	beq.n	8013c06 <_strtod_l+0x76>
 8013cce:	2301      	movs	r3, #1
 8013cd0:	f04f 0a00 	mov.w	sl, #0
 8013cd4:	9304      	str	r3, [sp, #16]
 8013cd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013cda:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013cde:	46d3      	mov	fp, sl
 8013ce0:	220a      	movs	r2, #10
 8013ce2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013ce4:	7806      	ldrb	r6, [r0, #0]
 8013ce6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013cea:	b2d9      	uxtb	r1, r3
 8013cec:	2909      	cmp	r1, #9
 8013cee:	d926      	bls.n	8013d3e <_strtod_l+0x1ae>
 8013cf0:	494c      	ldr	r1, [pc, #304]	; (8013e24 <_strtod_l+0x294>)
 8013cf2:	2201      	movs	r2, #1
 8013cf4:	f000 ffe6 	bl	8014cc4 <strncmp>
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	d030      	beq.n	8013d5e <_strtod_l+0x1ce>
 8013cfc:	2000      	movs	r0, #0
 8013cfe:	4632      	mov	r2, r6
 8013d00:	9005      	str	r0, [sp, #20]
 8013d02:	465e      	mov	r6, fp
 8013d04:	4603      	mov	r3, r0
 8013d06:	2a65      	cmp	r2, #101	; 0x65
 8013d08:	d001      	beq.n	8013d0e <_strtod_l+0x17e>
 8013d0a:	2a45      	cmp	r2, #69	; 0x45
 8013d0c:	d113      	bne.n	8013d36 <_strtod_l+0x1a6>
 8013d0e:	b91e      	cbnz	r6, 8013d18 <_strtod_l+0x188>
 8013d10:	9a04      	ldr	r2, [sp, #16]
 8013d12:	4302      	orrs	r2, r0
 8013d14:	d094      	beq.n	8013c40 <_strtod_l+0xb0>
 8013d16:	2600      	movs	r6, #0
 8013d18:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013d1a:	1c6a      	adds	r2, r5, #1
 8013d1c:	9215      	str	r2, [sp, #84]	; 0x54
 8013d1e:	786a      	ldrb	r2, [r5, #1]
 8013d20:	2a2b      	cmp	r2, #43	; 0x2b
 8013d22:	d074      	beq.n	8013e0e <_strtod_l+0x27e>
 8013d24:	2a2d      	cmp	r2, #45	; 0x2d
 8013d26:	d078      	beq.n	8013e1a <_strtod_l+0x28a>
 8013d28:	f04f 0c00 	mov.w	ip, #0
 8013d2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013d30:	2909      	cmp	r1, #9
 8013d32:	d97f      	bls.n	8013e34 <_strtod_l+0x2a4>
 8013d34:	9515      	str	r5, [sp, #84]	; 0x54
 8013d36:	2700      	movs	r7, #0
 8013d38:	e09e      	b.n	8013e78 <_strtod_l+0x2e8>
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	e7c8      	b.n	8013cd0 <_strtod_l+0x140>
 8013d3e:	f1bb 0f08 	cmp.w	fp, #8
 8013d42:	bfd8      	it	le
 8013d44:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013d46:	f100 0001 	add.w	r0, r0, #1
 8013d4a:	bfda      	itte	le
 8013d4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013d50:	9309      	strle	r3, [sp, #36]	; 0x24
 8013d52:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8013d56:	f10b 0b01 	add.w	fp, fp, #1
 8013d5a:	9015      	str	r0, [sp, #84]	; 0x54
 8013d5c:	e7c1      	b.n	8013ce2 <_strtod_l+0x152>
 8013d5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d60:	1c5a      	adds	r2, r3, #1
 8013d62:	9215      	str	r2, [sp, #84]	; 0x54
 8013d64:	785a      	ldrb	r2, [r3, #1]
 8013d66:	f1bb 0f00 	cmp.w	fp, #0
 8013d6a:	d037      	beq.n	8013ddc <_strtod_l+0x24c>
 8013d6c:	9005      	str	r0, [sp, #20]
 8013d6e:	465e      	mov	r6, fp
 8013d70:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013d74:	2b09      	cmp	r3, #9
 8013d76:	d912      	bls.n	8013d9e <_strtod_l+0x20e>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e7c4      	b.n	8013d06 <_strtod_l+0x176>
 8013d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d7e:	1c5a      	adds	r2, r3, #1
 8013d80:	9215      	str	r2, [sp, #84]	; 0x54
 8013d82:	785a      	ldrb	r2, [r3, #1]
 8013d84:	3001      	adds	r0, #1
 8013d86:	2a30      	cmp	r2, #48	; 0x30
 8013d88:	d0f8      	beq.n	8013d7c <_strtod_l+0x1ec>
 8013d8a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013d8e:	2b08      	cmp	r3, #8
 8013d90:	f200 84c1 	bhi.w	8014716 <_strtod_l+0xb86>
 8013d94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d96:	9005      	str	r0, [sp, #20]
 8013d98:	2000      	movs	r0, #0
 8013d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d9c:	4606      	mov	r6, r0
 8013d9e:	3a30      	subs	r2, #48	; 0x30
 8013da0:	f100 0301 	add.w	r3, r0, #1
 8013da4:	d014      	beq.n	8013dd0 <_strtod_l+0x240>
 8013da6:	9905      	ldr	r1, [sp, #20]
 8013da8:	4419      	add	r1, r3
 8013daa:	9105      	str	r1, [sp, #20]
 8013dac:	4633      	mov	r3, r6
 8013dae:	eb00 0c06 	add.w	ip, r0, r6
 8013db2:	210a      	movs	r1, #10
 8013db4:	4563      	cmp	r3, ip
 8013db6:	d113      	bne.n	8013de0 <_strtod_l+0x250>
 8013db8:	1833      	adds	r3, r6, r0
 8013dba:	2b08      	cmp	r3, #8
 8013dbc:	f106 0601 	add.w	r6, r6, #1
 8013dc0:	4406      	add	r6, r0
 8013dc2:	dc1a      	bgt.n	8013dfa <_strtod_l+0x26a>
 8013dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013dc6:	230a      	movs	r3, #10
 8013dc8:	fb03 2301 	mla	r3, r3, r1, r2
 8013dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8013dce:	2300      	movs	r3, #0
 8013dd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013dd2:	1c51      	adds	r1, r2, #1
 8013dd4:	9115      	str	r1, [sp, #84]	; 0x54
 8013dd6:	7852      	ldrb	r2, [r2, #1]
 8013dd8:	4618      	mov	r0, r3
 8013dda:	e7c9      	b.n	8013d70 <_strtod_l+0x1e0>
 8013ddc:	4658      	mov	r0, fp
 8013dde:	e7d2      	b.n	8013d86 <_strtod_l+0x1f6>
 8013de0:	2b08      	cmp	r3, #8
 8013de2:	f103 0301 	add.w	r3, r3, #1
 8013de6:	dc03      	bgt.n	8013df0 <_strtod_l+0x260>
 8013de8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013dea:	434f      	muls	r7, r1
 8013dec:	9709      	str	r7, [sp, #36]	; 0x24
 8013dee:	e7e1      	b.n	8013db4 <_strtod_l+0x224>
 8013df0:	2b10      	cmp	r3, #16
 8013df2:	bfd8      	it	le
 8013df4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013df8:	e7dc      	b.n	8013db4 <_strtod_l+0x224>
 8013dfa:	2e10      	cmp	r6, #16
 8013dfc:	bfdc      	itt	le
 8013dfe:	230a      	movle	r3, #10
 8013e00:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013e04:	e7e3      	b.n	8013dce <_strtod_l+0x23e>
 8013e06:	2300      	movs	r3, #0
 8013e08:	9305      	str	r3, [sp, #20]
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	e780      	b.n	8013d10 <_strtod_l+0x180>
 8013e0e:	f04f 0c00 	mov.w	ip, #0
 8013e12:	1caa      	adds	r2, r5, #2
 8013e14:	9215      	str	r2, [sp, #84]	; 0x54
 8013e16:	78aa      	ldrb	r2, [r5, #2]
 8013e18:	e788      	b.n	8013d2c <_strtod_l+0x19c>
 8013e1a:	f04f 0c01 	mov.w	ip, #1
 8013e1e:	e7f8      	b.n	8013e12 <_strtod_l+0x282>
 8013e20:	08018948 	.word	0x08018948
 8013e24:	08018944 	.word	0x08018944
 8013e28:	7ff00000 	.word	0x7ff00000
 8013e2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013e2e:	1c51      	adds	r1, r2, #1
 8013e30:	9115      	str	r1, [sp, #84]	; 0x54
 8013e32:	7852      	ldrb	r2, [r2, #1]
 8013e34:	2a30      	cmp	r2, #48	; 0x30
 8013e36:	d0f9      	beq.n	8013e2c <_strtod_l+0x29c>
 8013e38:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013e3c:	2908      	cmp	r1, #8
 8013e3e:	f63f af7a 	bhi.w	8013d36 <_strtod_l+0x1a6>
 8013e42:	3a30      	subs	r2, #48	; 0x30
 8013e44:	9208      	str	r2, [sp, #32]
 8013e46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013e48:	920c      	str	r2, [sp, #48]	; 0x30
 8013e4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013e4c:	1c57      	adds	r7, r2, #1
 8013e4e:	9715      	str	r7, [sp, #84]	; 0x54
 8013e50:	7852      	ldrb	r2, [r2, #1]
 8013e52:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013e56:	f1be 0f09 	cmp.w	lr, #9
 8013e5a:	d938      	bls.n	8013ece <_strtod_l+0x33e>
 8013e5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013e5e:	1a7f      	subs	r7, r7, r1
 8013e60:	2f08      	cmp	r7, #8
 8013e62:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013e66:	dc03      	bgt.n	8013e70 <_strtod_l+0x2e0>
 8013e68:	9908      	ldr	r1, [sp, #32]
 8013e6a:	428f      	cmp	r7, r1
 8013e6c:	bfa8      	it	ge
 8013e6e:	460f      	movge	r7, r1
 8013e70:	f1bc 0f00 	cmp.w	ip, #0
 8013e74:	d000      	beq.n	8013e78 <_strtod_l+0x2e8>
 8013e76:	427f      	negs	r7, r7
 8013e78:	2e00      	cmp	r6, #0
 8013e7a:	d14f      	bne.n	8013f1c <_strtod_l+0x38c>
 8013e7c:	9904      	ldr	r1, [sp, #16]
 8013e7e:	4301      	orrs	r1, r0
 8013e80:	f47f aec1 	bne.w	8013c06 <_strtod_l+0x76>
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	f47f aedb 	bne.w	8013c40 <_strtod_l+0xb0>
 8013e8a:	2a69      	cmp	r2, #105	; 0x69
 8013e8c:	d029      	beq.n	8013ee2 <_strtod_l+0x352>
 8013e8e:	dc26      	bgt.n	8013ede <_strtod_l+0x34e>
 8013e90:	2a49      	cmp	r2, #73	; 0x49
 8013e92:	d026      	beq.n	8013ee2 <_strtod_l+0x352>
 8013e94:	2a4e      	cmp	r2, #78	; 0x4e
 8013e96:	f47f aed3 	bne.w	8013c40 <_strtod_l+0xb0>
 8013e9a:	499b      	ldr	r1, [pc, #620]	; (8014108 <_strtod_l+0x578>)
 8013e9c:	a815      	add	r0, sp, #84	; 0x54
 8013e9e:	f001 fa17 	bl	80152d0 <__match>
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	f43f aecc 	beq.w	8013c40 <_strtod_l+0xb0>
 8013ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	2b28      	cmp	r3, #40	; 0x28
 8013eae:	d12f      	bne.n	8013f10 <_strtod_l+0x380>
 8013eb0:	4996      	ldr	r1, [pc, #600]	; (801410c <_strtod_l+0x57c>)
 8013eb2:	aa18      	add	r2, sp, #96	; 0x60
 8013eb4:	a815      	add	r0, sp, #84	; 0x54
 8013eb6:	f001 fa1f 	bl	80152f8 <__hexnan>
 8013eba:	2805      	cmp	r0, #5
 8013ebc:	d128      	bne.n	8013f10 <_strtod_l+0x380>
 8013ebe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ec0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013ec4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013ec8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013ecc:	e69b      	b.n	8013c06 <_strtod_l+0x76>
 8013ece:	9f08      	ldr	r7, [sp, #32]
 8013ed0:	210a      	movs	r1, #10
 8013ed2:	fb01 2107 	mla	r1, r1, r7, r2
 8013ed6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013eda:	9208      	str	r2, [sp, #32]
 8013edc:	e7b5      	b.n	8013e4a <_strtod_l+0x2ba>
 8013ede:	2a6e      	cmp	r2, #110	; 0x6e
 8013ee0:	e7d9      	b.n	8013e96 <_strtod_l+0x306>
 8013ee2:	498b      	ldr	r1, [pc, #556]	; (8014110 <_strtod_l+0x580>)
 8013ee4:	a815      	add	r0, sp, #84	; 0x54
 8013ee6:	f001 f9f3 	bl	80152d0 <__match>
 8013eea:	2800      	cmp	r0, #0
 8013eec:	f43f aea8 	beq.w	8013c40 <_strtod_l+0xb0>
 8013ef0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013ef2:	4988      	ldr	r1, [pc, #544]	; (8014114 <_strtod_l+0x584>)
 8013ef4:	3b01      	subs	r3, #1
 8013ef6:	a815      	add	r0, sp, #84	; 0x54
 8013ef8:	9315      	str	r3, [sp, #84]	; 0x54
 8013efa:	f001 f9e9 	bl	80152d0 <__match>
 8013efe:	b910      	cbnz	r0, 8013f06 <_strtod_l+0x376>
 8013f00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f02:	3301      	adds	r3, #1
 8013f04:	9315      	str	r3, [sp, #84]	; 0x54
 8013f06:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014124 <_strtod_l+0x594>
 8013f0a:	f04f 0800 	mov.w	r8, #0
 8013f0e:	e67a      	b.n	8013c06 <_strtod_l+0x76>
 8013f10:	4881      	ldr	r0, [pc, #516]	; (8014118 <_strtod_l+0x588>)
 8013f12:	f000 fef9 	bl	8014d08 <nan>
 8013f16:	ec59 8b10 	vmov	r8, r9, d0
 8013f1a:	e674      	b.n	8013c06 <_strtod_l+0x76>
 8013f1c:	9b05      	ldr	r3, [sp, #20]
 8013f1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f20:	1afb      	subs	r3, r7, r3
 8013f22:	f1bb 0f00 	cmp.w	fp, #0
 8013f26:	bf08      	it	eq
 8013f28:	46b3      	moveq	fp, r6
 8013f2a:	2e10      	cmp	r6, #16
 8013f2c:	9308      	str	r3, [sp, #32]
 8013f2e:	4635      	mov	r5, r6
 8013f30:	bfa8      	it	ge
 8013f32:	2510      	movge	r5, #16
 8013f34:	f7ec fb0e 	bl	8000554 <__aeabi_ui2d>
 8013f38:	2e09      	cmp	r6, #9
 8013f3a:	4680      	mov	r8, r0
 8013f3c:	4689      	mov	r9, r1
 8013f3e:	dd13      	ble.n	8013f68 <_strtod_l+0x3d8>
 8013f40:	4b76      	ldr	r3, [pc, #472]	; (801411c <_strtod_l+0x58c>)
 8013f42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013f46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013f4a:	f7ec fb7d 	bl	8000648 <__aeabi_dmul>
 8013f4e:	4680      	mov	r8, r0
 8013f50:	4650      	mov	r0, sl
 8013f52:	4689      	mov	r9, r1
 8013f54:	f7ec fafe 	bl	8000554 <__aeabi_ui2d>
 8013f58:	4602      	mov	r2, r0
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	4640      	mov	r0, r8
 8013f5e:	4649      	mov	r1, r9
 8013f60:	f7ec f9bc 	bl	80002dc <__adddf3>
 8013f64:	4680      	mov	r8, r0
 8013f66:	4689      	mov	r9, r1
 8013f68:	2e0f      	cmp	r6, #15
 8013f6a:	dc38      	bgt.n	8013fde <_strtod_l+0x44e>
 8013f6c:	9b08      	ldr	r3, [sp, #32]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	f43f ae49 	beq.w	8013c06 <_strtod_l+0x76>
 8013f74:	dd24      	ble.n	8013fc0 <_strtod_l+0x430>
 8013f76:	2b16      	cmp	r3, #22
 8013f78:	dc0b      	bgt.n	8013f92 <_strtod_l+0x402>
 8013f7a:	4968      	ldr	r1, [pc, #416]	; (801411c <_strtod_l+0x58c>)
 8013f7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f84:	4642      	mov	r2, r8
 8013f86:	464b      	mov	r3, r9
 8013f88:	f7ec fb5e 	bl	8000648 <__aeabi_dmul>
 8013f8c:	4680      	mov	r8, r0
 8013f8e:	4689      	mov	r9, r1
 8013f90:	e639      	b.n	8013c06 <_strtod_l+0x76>
 8013f92:	9a08      	ldr	r2, [sp, #32]
 8013f94:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013f98:	4293      	cmp	r3, r2
 8013f9a:	db20      	blt.n	8013fde <_strtod_l+0x44e>
 8013f9c:	4c5f      	ldr	r4, [pc, #380]	; (801411c <_strtod_l+0x58c>)
 8013f9e:	f1c6 060f 	rsb	r6, r6, #15
 8013fa2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8013fa6:	4642      	mov	r2, r8
 8013fa8:	464b      	mov	r3, r9
 8013faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fae:	f7ec fb4b 	bl	8000648 <__aeabi_dmul>
 8013fb2:	9b08      	ldr	r3, [sp, #32]
 8013fb4:	1b9e      	subs	r6, r3, r6
 8013fb6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013fba:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013fbe:	e7e3      	b.n	8013f88 <_strtod_l+0x3f8>
 8013fc0:	9b08      	ldr	r3, [sp, #32]
 8013fc2:	3316      	adds	r3, #22
 8013fc4:	db0b      	blt.n	8013fde <_strtod_l+0x44e>
 8013fc6:	9b05      	ldr	r3, [sp, #20]
 8013fc8:	1bdf      	subs	r7, r3, r7
 8013fca:	4b54      	ldr	r3, [pc, #336]	; (801411c <_strtod_l+0x58c>)
 8013fcc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013fd4:	4640      	mov	r0, r8
 8013fd6:	4649      	mov	r1, r9
 8013fd8:	f7ec fc60 	bl	800089c <__aeabi_ddiv>
 8013fdc:	e7d6      	b.n	8013f8c <_strtod_l+0x3fc>
 8013fde:	9b08      	ldr	r3, [sp, #32]
 8013fe0:	1b75      	subs	r5, r6, r5
 8013fe2:	441d      	add	r5, r3
 8013fe4:	2d00      	cmp	r5, #0
 8013fe6:	dd70      	ble.n	80140ca <_strtod_l+0x53a>
 8013fe8:	f015 030f 	ands.w	r3, r5, #15
 8013fec:	d00a      	beq.n	8014004 <_strtod_l+0x474>
 8013fee:	494b      	ldr	r1, [pc, #300]	; (801411c <_strtod_l+0x58c>)
 8013ff0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013ff4:	4642      	mov	r2, r8
 8013ff6:	464b      	mov	r3, r9
 8013ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ffc:	f7ec fb24 	bl	8000648 <__aeabi_dmul>
 8014000:	4680      	mov	r8, r0
 8014002:	4689      	mov	r9, r1
 8014004:	f035 050f 	bics.w	r5, r5, #15
 8014008:	d04d      	beq.n	80140a6 <_strtod_l+0x516>
 801400a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801400e:	dd22      	ble.n	8014056 <_strtod_l+0x4c6>
 8014010:	2500      	movs	r5, #0
 8014012:	46ab      	mov	fp, r5
 8014014:	9509      	str	r5, [sp, #36]	; 0x24
 8014016:	9505      	str	r5, [sp, #20]
 8014018:	2322      	movs	r3, #34	; 0x22
 801401a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014124 <_strtod_l+0x594>
 801401e:	6023      	str	r3, [r4, #0]
 8014020:	f04f 0800 	mov.w	r8, #0
 8014024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014026:	2b00      	cmp	r3, #0
 8014028:	f43f aded 	beq.w	8013c06 <_strtod_l+0x76>
 801402c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801402e:	4620      	mov	r0, r4
 8014030:	f7ff f924 	bl	801327c <_Bfree>
 8014034:	9905      	ldr	r1, [sp, #20]
 8014036:	4620      	mov	r0, r4
 8014038:	f7ff f920 	bl	801327c <_Bfree>
 801403c:	4659      	mov	r1, fp
 801403e:	4620      	mov	r0, r4
 8014040:	f7ff f91c 	bl	801327c <_Bfree>
 8014044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014046:	4620      	mov	r0, r4
 8014048:	f7ff f918 	bl	801327c <_Bfree>
 801404c:	4629      	mov	r1, r5
 801404e:	4620      	mov	r0, r4
 8014050:	f7ff f914 	bl	801327c <_Bfree>
 8014054:	e5d7      	b.n	8013c06 <_strtod_l+0x76>
 8014056:	4b32      	ldr	r3, [pc, #200]	; (8014120 <_strtod_l+0x590>)
 8014058:	9304      	str	r3, [sp, #16]
 801405a:	2300      	movs	r3, #0
 801405c:	112d      	asrs	r5, r5, #4
 801405e:	4640      	mov	r0, r8
 8014060:	4649      	mov	r1, r9
 8014062:	469a      	mov	sl, r3
 8014064:	2d01      	cmp	r5, #1
 8014066:	dc21      	bgt.n	80140ac <_strtod_l+0x51c>
 8014068:	b10b      	cbz	r3, 801406e <_strtod_l+0x4de>
 801406a:	4680      	mov	r8, r0
 801406c:	4689      	mov	r9, r1
 801406e:	492c      	ldr	r1, [pc, #176]	; (8014120 <_strtod_l+0x590>)
 8014070:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014074:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014078:	4642      	mov	r2, r8
 801407a:	464b      	mov	r3, r9
 801407c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014080:	f7ec fae2 	bl	8000648 <__aeabi_dmul>
 8014084:	4b27      	ldr	r3, [pc, #156]	; (8014124 <_strtod_l+0x594>)
 8014086:	460a      	mov	r2, r1
 8014088:	400b      	ands	r3, r1
 801408a:	4927      	ldr	r1, [pc, #156]	; (8014128 <_strtod_l+0x598>)
 801408c:	428b      	cmp	r3, r1
 801408e:	4680      	mov	r8, r0
 8014090:	d8be      	bhi.n	8014010 <_strtod_l+0x480>
 8014092:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014096:	428b      	cmp	r3, r1
 8014098:	bf86      	itte	hi
 801409a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801412c <_strtod_l+0x59c>
 801409e:	f04f 38ff 	movhi.w	r8, #4294967295
 80140a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80140a6:	2300      	movs	r3, #0
 80140a8:	9304      	str	r3, [sp, #16]
 80140aa:	e07b      	b.n	80141a4 <_strtod_l+0x614>
 80140ac:	07ea      	lsls	r2, r5, #31
 80140ae:	d505      	bpl.n	80140bc <_strtod_l+0x52c>
 80140b0:	9b04      	ldr	r3, [sp, #16]
 80140b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140b6:	f7ec fac7 	bl	8000648 <__aeabi_dmul>
 80140ba:	2301      	movs	r3, #1
 80140bc:	9a04      	ldr	r2, [sp, #16]
 80140be:	3208      	adds	r2, #8
 80140c0:	f10a 0a01 	add.w	sl, sl, #1
 80140c4:	106d      	asrs	r5, r5, #1
 80140c6:	9204      	str	r2, [sp, #16]
 80140c8:	e7cc      	b.n	8014064 <_strtod_l+0x4d4>
 80140ca:	d0ec      	beq.n	80140a6 <_strtod_l+0x516>
 80140cc:	426d      	negs	r5, r5
 80140ce:	f015 020f 	ands.w	r2, r5, #15
 80140d2:	d00a      	beq.n	80140ea <_strtod_l+0x55a>
 80140d4:	4b11      	ldr	r3, [pc, #68]	; (801411c <_strtod_l+0x58c>)
 80140d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80140da:	4640      	mov	r0, r8
 80140dc:	4649      	mov	r1, r9
 80140de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e2:	f7ec fbdb 	bl	800089c <__aeabi_ddiv>
 80140e6:	4680      	mov	r8, r0
 80140e8:	4689      	mov	r9, r1
 80140ea:	112d      	asrs	r5, r5, #4
 80140ec:	d0db      	beq.n	80140a6 <_strtod_l+0x516>
 80140ee:	2d1f      	cmp	r5, #31
 80140f0:	dd1e      	ble.n	8014130 <_strtod_l+0x5a0>
 80140f2:	2500      	movs	r5, #0
 80140f4:	46ab      	mov	fp, r5
 80140f6:	9509      	str	r5, [sp, #36]	; 0x24
 80140f8:	9505      	str	r5, [sp, #20]
 80140fa:	2322      	movs	r3, #34	; 0x22
 80140fc:	f04f 0800 	mov.w	r8, #0
 8014100:	f04f 0900 	mov.w	r9, #0
 8014104:	6023      	str	r3, [r4, #0]
 8014106:	e78d      	b.n	8014024 <_strtod_l+0x494>
 8014108:	08018735 	.word	0x08018735
 801410c:	0801895c 	.word	0x0801895c
 8014110:	0801872d 	.word	0x0801872d
 8014114:	08018764 	.word	0x08018764
 8014118:	08018aed 	.word	0x08018aed
 801411c:	08018870 	.word	0x08018870
 8014120:	08018848 	.word	0x08018848
 8014124:	7ff00000 	.word	0x7ff00000
 8014128:	7ca00000 	.word	0x7ca00000
 801412c:	7fefffff 	.word	0x7fefffff
 8014130:	f015 0310 	ands.w	r3, r5, #16
 8014134:	bf18      	it	ne
 8014136:	236a      	movne	r3, #106	; 0x6a
 8014138:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80144dc <_strtod_l+0x94c>
 801413c:	9304      	str	r3, [sp, #16]
 801413e:	4640      	mov	r0, r8
 8014140:	4649      	mov	r1, r9
 8014142:	2300      	movs	r3, #0
 8014144:	07ea      	lsls	r2, r5, #31
 8014146:	d504      	bpl.n	8014152 <_strtod_l+0x5c2>
 8014148:	e9da 2300 	ldrd	r2, r3, [sl]
 801414c:	f7ec fa7c 	bl	8000648 <__aeabi_dmul>
 8014150:	2301      	movs	r3, #1
 8014152:	106d      	asrs	r5, r5, #1
 8014154:	f10a 0a08 	add.w	sl, sl, #8
 8014158:	d1f4      	bne.n	8014144 <_strtod_l+0x5b4>
 801415a:	b10b      	cbz	r3, 8014160 <_strtod_l+0x5d0>
 801415c:	4680      	mov	r8, r0
 801415e:	4689      	mov	r9, r1
 8014160:	9b04      	ldr	r3, [sp, #16]
 8014162:	b1bb      	cbz	r3, 8014194 <_strtod_l+0x604>
 8014164:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8014168:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801416c:	2b00      	cmp	r3, #0
 801416e:	4649      	mov	r1, r9
 8014170:	dd10      	ble.n	8014194 <_strtod_l+0x604>
 8014172:	2b1f      	cmp	r3, #31
 8014174:	f340 811e 	ble.w	80143b4 <_strtod_l+0x824>
 8014178:	2b34      	cmp	r3, #52	; 0x34
 801417a:	bfde      	ittt	le
 801417c:	f04f 33ff 	movle.w	r3, #4294967295
 8014180:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014184:	4093      	lslle	r3, r2
 8014186:	f04f 0800 	mov.w	r8, #0
 801418a:	bfcc      	ite	gt
 801418c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014190:	ea03 0901 	andle.w	r9, r3, r1
 8014194:	2200      	movs	r2, #0
 8014196:	2300      	movs	r3, #0
 8014198:	4640      	mov	r0, r8
 801419a:	4649      	mov	r1, r9
 801419c:	f7ec fcbc 	bl	8000b18 <__aeabi_dcmpeq>
 80141a0:	2800      	cmp	r0, #0
 80141a2:	d1a6      	bne.n	80140f2 <_strtod_l+0x562>
 80141a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141a6:	9300      	str	r3, [sp, #0]
 80141a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141aa:	4633      	mov	r3, r6
 80141ac:	465a      	mov	r2, fp
 80141ae:	4620      	mov	r0, r4
 80141b0:	f7ff f8cc 	bl	801334c <__s2b>
 80141b4:	9009      	str	r0, [sp, #36]	; 0x24
 80141b6:	2800      	cmp	r0, #0
 80141b8:	f43f af2a 	beq.w	8014010 <_strtod_l+0x480>
 80141bc:	9a08      	ldr	r2, [sp, #32]
 80141be:	9b05      	ldr	r3, [sp, #20]
 80141c0:	2a00      	cmp	r2, #0
 80141c2:	eba3 0307 	sub.w	r3, r3, r7
 80141c6:	bfa8      	it	ge
 80141c8:	2300      	movge	r3, #0
 80141ca:	930c      	str	r3, [sp, #48]	; 0x30
 80141cc:	2500      	movs	r5, #0
 80141ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80141d2:	9312      	str	r3, [sp, #72]	; 0x48
 80141d4:	46ab      	mov	fp, r5
 80141d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141d8:	4620      	mov	r0, r4
 80141da:	6859      	ldr	r1, [r3, #4]
 80141dc:	f7ff f80e 	bl	80131fc <_Balloc>
 80141e0:	9005      	str	r0, [sp, #20]
 80141e2:	2800      	cmp	r0, #0
 80141e4:	f43f af18 	beq.w	8014018 <_strtod_l+0x488>
 80141e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141ea:	691a      	ldr	r2, [r3, #16]
 80141ec:	3202      	adds	r2, #2
 80141ee:	f103 010c 	add.w	r1, r3, #12
 80141f2:	0092      	lsls	r2, r2, #2
 80141f4:	300c      	adds	r0, #12
 80141f6:	f7fe f872 	bl	80122de <memcpy>
 80141fa:	ec49 8b10 	vmov	d0, r8, r9
 80141fe:	aa18      	add	r2, sp, #96	; 0x60
 8014200:	a917      	add	r1, sp, #92	; 0x5c
 8014202:	4620      	mov	r0, r4
 8014204:	f7ff fbd6 	bl	80139b4 <__d2b>
 8014208:	ec49 8b18 	vmov	d8, r8, r9
 801420c:	9016      	str	r0, [sp, #88]	; 0x58
 801420e:	2800      	cmp	r0, #0
 8014210:	f43f af02 	beq.w	8014018 <_strtod_l+0x488>
 8014214:	2101      	movs	r1, #1
 8014216:	4620      	mov	r0, r4
 8014218:	f7ff f930 	bl	801347c <__i2b>
 801421c:	4683      	mov	fp, r0
 801421e:	2800      	cmp	r0, #0
 8014220:	f43f aefa 	beq.w	8014018 <_strtod_l+0x488>
 8014224:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014226:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014228:	2e00      	cmp	r6, #0
 801422a:	bfab      	itete	ge
 801422c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801422e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8014230:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014232:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8014236:	bfac      	ite	ge
 8014238:	eb06 0a03 	addge.w	sl, r6, r3
 801423c:	1b9f      	sublt	r7, r3, r6
 801423e:	9b04      	ldr	r3, [sp, #16]
 8014240:	1af6      	subs	r6, r6, r3
 8014242:	4416      	add	r6, r2
 8014244:	4ba0      	ldr	r3, [pc, #640]	; (80144c8 <_strtod_l+0x938>)
 8014246:	3e01      	subs	r6, #1
 8014248:	429e      	cmp	r6, r3
 801424a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801424e:	f280 80c4 	bge.w	80143da <_strtod_l+0x84a>
 8014252:	1b9b      	subs	r3, r3, r6
 8014254:	2b1f      	cmp	r3, #31
 8014256:	eba2 0203 	sub.w	r2, r2, r3
 801425a:	f04f 0101 	mov.w	r1, #1
 801425e:	f300 80b0 	bgt.w	80143c2 <_strtod_l+0x832>
 8014262:	fa01 f303 	lsl.w	r3, r1, r3
 8014266:	930e      	str	r3, [sp, #56]	; 0x38
 8014268:	2300      	movs	r3, #0
 801426a:	930d      	str	r3, [sp, #52]	; 0x34
 801426c:	eb0a 0602 	add.w	r6, sl, r2
 8014270:	9b04      	ldr	r3, [sp, #16]
 8014272:	45b2      	cmp	sl, r6
 8014274:	4417      	add	r7, r2
 8014276:	441f      	add	r7, r3
 8014278:	4653      	mov	r3, sl
 801427a:	bfa8      	it	ge
 801427c:	4633      	movge	r3, r6
 801427e:	42bb      	cmp	r3, r7
 8014280:	bfa8      	it	ge
 8014282:	463b      	movge	r3, r7
 8014284:	2b00      	cmp	r3, #0
 8014286:	bfc2      	ittt	gt
 8014288:	1af6      	subgt	r6, r6, r3
 801428a:	1aff      	subgt	r7, r7, r3
 801428c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8014290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014292:	2b00      	cmp	r3, #0
 8014294:	dd17      	ble.n	80142c6 <_strtod_l+0x736>
 8014296:	4659      	mov	r1, fp
 8014298:	461a      	mov	r2, r3
 801429a:	4620      	mov	r0, r4
 801429c:	f7ff f9ae 	bl	80135fc <__pow5mult>
 80142a0:	4683      	mov	fp, r0
 80142a2:	2800      	cmp	r0, #0
 80142a4:	f43f aeb8 	beq.w	8014018 <_strtod_l+0x488>
 80142a8:	4601      	mov	r1, r0
 80142aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80142ac:	4620      	mov	r0, r4
 80142ae:	f7ff f8fb 	bl	80134a8 <__multiply>
 80142b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80142b4:	2800      	cmp	r0, #0
 80142b6:	f43f aeaf 	beq.w	8014018 <_strtod_l+0x488>
 80142ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80142bc:	4620      	mov	r0, r4
 80142be:	f7fe ffdd 	bl	801327c <_Bfree>
 80142c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142c4:	9316      	str	r3, [sp, #88]	; 0x58
 80142c6:	2e00      	cmp	r6, #0
 80142c8:	f300 808c 	bgt.w	80143e4 <_strtod_l+0x854>
 80142cc:	9b08      	ldr	r3, [sp, #32]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	dd08      	ble.n	80142e4 <_strtod_l+0x754>
 80142d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80142d4:	9905      	ldr	r1, [sp, #20]
 80142d6:	4620      	mov	r0, r4
 80142d8:	f7ff f990 	bl	80135fc <__pow5mult>
 80142dc:	9005      	str	r0, [sp, #20]
 80142de:	2800      	cmp	r0, #0
 80142e0:	f43f ae9a 	beq.w	8014018 <_strtod_l+0x488>
 80142e4:	2f00      	cmp	r7, #0
 80142e6:	dd08      	ble.n	80142fa <_strtod_l+0x76a>
 80142e8:	9905      	ldr	r1, [sp, #20]
 80142ea:	463a      	mov	r2, r7
 80142ec:	4620      	mov	r0, r4
 80142ee:	f7ff f9df 	bl	80136b0 <__lshift>
 80142f2:	9005      	str	r0, [sp, #20]
 80142f4:	2800      	cmp	r0, #0
 80142f6:	f43f ae8f 	beq.w	8014018 <_strtod_l+0x488>
 80142fa:	f1ba 0f00 	cmp.w	sl, #0
 80142fe:	dd08      	ble.n	8014312 <_strtod_l+0x782>
 8014300:	4659      	mov	r1, fp
 8014302:	4652      	mov	r2, sl
 8014304:	4620      	mov	r0, r4
 8014306:	f7ff f9d3 	bl	80136b0 <__lshift>
 801430a:	4683      	mov	fp, r0
 801430c:	2800      	cmp	r0, #0
 801430e:	f43f ae83 	beq.w	8014018 <_strtod_l+0x488>
 8014312:	9a05      	ldr	r2, [sp, #20]
 8014314:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014316:	4620      	mov	r0, r4
 8014318:	f7ff fa52 	bl	80137c0 <__mdiff>
 801431c:	4605      	mov	r5, r0
 801431e:	2800      	cmp	r0, #0
 8014320:	f43f ae7a 	beq.w	8014018 <_strtod_l+0x488>
 8014324:	68c3      	ldr	r3, [r0, #12]
 8014326:	930b      	str	r3, [sp, #44]	; 0x2c
 8014328:	2300      	movs	r3, #0
 801432a:	60c3      	str	r3, [r0, #12]
 801432c:	4659      	mov	r1, fp
 801432e:	f7ff fa2b 	bl	8013788 <__mcmp>
 8014332:	2800      	cmp	r0, #0
 8014334:	da60      	bge.n	80143f8 <_strtod_l+0x868>
 8014336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014338:	ea53 0308 	orrs.w	r3, r3, r8
 801433c:	f040 8084 	bne.w	8014448 <_strtod_l+0x8b8>
 8014340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014344:	2b00      	cmp	r3, #0
 8014346:	d17f      	bne.n	8014448 <_strtod_l+0x8b8>
 8014348:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801434c:	0d1b      	lsrs	r3, r3, #20
 801434e:	051b      	lsls	r3, r3, #20
 8014350:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014354:	d978      	bls.n	8014448 <_strtod_l+0x8b8>
 8014356:	696b      	ldr	r3, [r5, #20]
 8014358:	b913      	cbnz	r3, 8014360 <_strtod_l+0x7d0>
 801435a:	692b      	ldr	r3, [r5, #16]
 801435c:	2b01      	cmp	r3, #1
 801435e:	dd73      	ble.n	8014448 <_strtod_l+0x8b8>
 8014360:	4629      	mov	r1, r5
 8014362:	2201      	movs	r2, #1
 8014364:	4620      	mov	r0, r4
 8014366:	f7ff f9a3 	bl	80136b0 <__lshift>
 801436a:	4659      	mov	r1, fp
 801436c:	4605      	mov	r5, r0
 801436e:	f7ff fa0b 	bl	8013788 <__mcmp>
 8014372:	2800      	cmp	r0, #0
 8014374:	dd68      	ble.n	8014448 <_strtod_l+0x8b8>
 8014376:	9904      	ldr	r1, [sp, #16]
 8014378:	4a54      	ldr	r2, [pc, #336]	; (80144cc <_strtod_l+0x93c>)
 801437a:	464b      	mov	r3, r9
 801437c:	2900      	cmp	r1, #0
 801437e:	f000 8084 	beq.w	801448a <_strtod_l+0x8fa>
 8014382:	ea02 0109 	and.w	r1, r2, r9
 8014386:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801438a:	dc7e      	bgt.n	801448a <_strtod_l+0x8fa>
 801438c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014390:	f77f aeb3 	ble.w	80140fa <_strtod_l+0x56a>
 8014394:	4b4e      	ldr	r3, [pc, #312]	; (80144d0 <_strtod_l+0x940>)
 8014396:	4640      	mov	r0, r8
 8014398:	4649      	mov	r1, r9
 801439a:	2200      	movs	r2, #0
 801439c:	f7ec f954 	bl	8000648 <__aeabi_dmul>
 80143a0:	4b4a      	ldr	r3, [pc, #296]	; (80144cc <_strtod_l+0x93c>)
 80143a2:	400b      	ands	r3, r1
 80143a4:	4680      	mov	r8, r0
 80143a6:	4689      	mov	r9, r1
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	f47f ae3f 	bne.w	801402c <_strtod_l+0x49c>
 80143ae:	2322      	movs	r3, #34	; 0x22
 80143b0:	6023      	str	r3, [r4, #0]
 80143b2:	e63b      	b.n	801402c <_strtod_l+0x49c>
 80143b4:	f04f 32ff 	mov.w	r2, #4294967295
 80143b8:	fa02 f303 	lsl.w	r3, r2, r3
 80143bc:	ea03 0808 	and.w	r8, r3, r8
 80143c0:	e6e8      	b.n	8014194 <_strtod_l+0x604>
 80143c2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80143c6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80143ca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80143ce:	36e2      	adds	r6, #226	; 0xe2
 80143d0:	fa01 f306 	lsl.w	r3, r1, r6
 80143d4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80143d8:	e748      	b.n	801426c <_strtod_l+0x6dc>
 80143da:	2100      	movs	r1, #0
 80143dc:	2301      	movs	r3, #1
 80143de:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80143e2:	e743      	b.n	801426c <_strtod_l+0x6dc>
 80143e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80143e6:	4632      	mov	r2, r6
 80143e8:	4620      	mov	r0, r4
 80143ea:	f7ff f961 	bl	80136b0 <__lshift>
 80143ee:	9016      	str	r0, [sp, #88]	; 0x58
 80143f0:	2800      	cmp	r0, #0
 80143f2:	f47f af6b 	bne.w	80142cc <_strtod_l+0x73c>
 80143f6:	e60f      	b.n	8014018 <_strtod_l+0x488>
 80143f8:	46ca      	mov	sl, r9
 80143fa:	d171      	bne.n	80144e0 <_strtod_l+0x950>
 80143fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80143fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014402:	b352      	cbz	r2, 801445a <_strtod_l+0x8ca>
 8014404:	4a33      	ldr	r2, [pc, #204]	; (80144d4 <_strtod_l+0x944>)
 8014406:	4293      	cmp	r3, r2
 8014408:	d12a      	bne.n	8014460 <_strtod_l+0x8d0>
 801440a:	9b04      	ldr	r3, [sp, #16]
 801440c:	4641      	mov	r1, r8
 801440e:	b1fb      	cbz	r3, 8014450 <_strtod_l+0x8c0>
 8014410:	4b2e      	ldr	r3, [pc, #184]	; (80144cc <_strtod_l+0x93c>)
 8014412:	ea09 0303 	and.w	r3, r9, r3
 8014416:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801441a:	f04f 32ff 	mov.w	r2, #4294967295
 801441e:	d81a      	bhi.n	8014456 <_strtod_l+0x8c6>
 8014420:	0d1b      	lsrs	r3, r3, #20
 8014422:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014426:	fa02 f303 	lsl.w	r3, r2, r3
 801442a:	4299      	cmp	r1, r3
 801442c:	d118      	bne.n	8014460 <_strtod_l+0x8d0>
 801442e:	4b2a      	ldr	r3, [pc, #168]	; (80144d8 <_strtod_l+0x948>)
 8014430:	459a      	cmp	sl, r3
 8014432:	d102      	bne.n	801443a <_strtod_l+0x8aa>
 8014434:	3101      	adds	r1, #1
 8014436:	f43f adef 	beq.w	8014018 <_strtod_l+0x488>
 801443a:	4b24      	ldr	r3, [pc, #144]	; (80144cc <_strtod_l+0x93c>)
 801443c:	ea0a 0303 	and.w	r3, sl, r3
 8014440:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014444:	f04f 0800 	mov.w	r8, #0
 8014448:	9b04      	ldr	r3, [sp, #16]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d1a2      	bne.n	8014394 <_strtod_l+0x804>
 801444e:	e5ed      	b.n	801402c <_strtod_l+0x49c>
 8014450:	f04f 33ff 	mov.w	r3, #4294967295
 8014454:	e7e9      	b.n	801442a <_strtod_l+0x89a>
 8014456:	4613      	mov	r3, r2
 8014458:	e7e7      	b.n	801442a <_strtod_l+0x89a>
 801445a:	ea53 0308 	orrs.w	r3, r3, r8
 801445e:	d08a      	beq.n	8014376 <_strtod_l+0x7e6>
 8014460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014462:	b1e3      	cbz	r3, 801449e <_strtod_l+0x90e>
 8014464:	ea13 0f0a 	tst.w	r3, sl
 8014468:	d0ee      	beq.n	8014448 <_strtod_l+0x8b8>
 801446a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801446c:	9a04      	ldr	r2, [sp, #16]
 801446e:	4640      	mov	r0, r8
 8014470:	4649      	mov	r1, r9
 8014472:	b1c3      	cbz	r3, 80144a6 <_strtod_l+0x916>
 8014474:	f7ff fb6f 	bl	8013b56 <sulp>
 8014478:	4602      	mov	r2, r0
 801447a:	460b      	mov	r3, r1
 801447c:	ec51 0b18 	vmov	r0, r1, d8
 8014480:	f7eb ff2c 	bl	80002dc <__adddf3>
 8014484:	4680      	mov	r8, r0
 8014486:	4689      	mov	r9, r1
 8014488:	e7de      	b.n	8014448 <_strtod_l+0x8b8>
 801448a:	4013      	ands	r3, r2
 801448c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014490:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8014494:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8014498:	f04f 38ff 	mov.w	r8, #4294967295
 801449c:	e7d4      	b.n	8014448 <_strtod_l+0x8b8>
 801449e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144a0:	ea13 0f08 	tst.w	r3, r8
 80144a4:	e7e0      	b.n	8014468 <_strtod_l+0x8d8>
 80144a6:	f7ff fb56 	bl	8013b56 <sulp>
 80144aa:	4602      	mov	r2, r0
 80144ac:	460b      	mov	r3, r1
 80144ae:	ec51 0b18 	vmov	r0, r1, d8
 80144b2:	f7eb ff11 	bl	80002d8 <__aeabi_dsub>
 80144b6:	2200      	movs	r2, #0
 80144b8:	2300      	movs	r3, #0
 80144ba:	4680      	mov	r8, r0
 80144bc:	4689      	mov	r9, r1
 80144be:	f7ec fb2b 	bl	8000b18 <__aeabi_dcmpeq>
 80144c2:	2800      	cmp	r0, #0
 80144c4:	d0c0      	beq.n	8014448 <_strtod_l+0x8b8>
 80144c6:	e618      	b.n	80140fa <_strtod_l+0x56a>
 80144c8:	fffffc02 	.word	0xfffffc02
 80144cc:	7ff00000 	.word	0x7ff00000
 80144d0:	39500000 	.word	0x39500000
 80144d4:	000fffff 	.word	0x000fffff
 80144d8:	7fefffff 	.word	0x7fefffff
 80144dc:	08018970 	.word	0x08018970
 80144e0:	4659      	mov	r1, fp
 80144e2:	4628      	mov	r0, r5
 80144e4:	f7ff fac0 	bl	8013a68 <__ratio>
 80144e8:	ec57 6b10 	vmov	r6, r7, d0
 80144ec:	ee10 0a10 	vmov	r0, s0
 80144f0:	2200      	movs	r2, #0
 80144f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80144f6:	4639      	mov	r1, r7
 80144f8:	f7ec fb22 	bl	8000b40 <__aeabi_dcmple>
 80144fc:	2800      	cmp	r0, #0
 80144fe:	d071      	beq.n	80145e4 <_strtod_l+0xa54>
 8014500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014502:	2b00      	cmp	r3, #0
 8014504:	d17c      	bne.n	8014600 <_strtod_l+0xa70>
 8014506:	f1b8 0f00 	cmp.w	r8, #0
 801450a:	d15a      	bne.n	80145c2 <_strtod_l+0xa32>
 801450c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014510:	2b00      	cmp	r3, #0
 8014512:	d15d      	bne.n	80145d0 <_strtod_l+0xa40>
 8014514:	4b90      	ldr	r3, [pc, #576]	; (8014758 <_strtod_l+0xbc8>)
 8014516:	2200      	movs	r2, #0
 8014518:	4630      	mov	r0, r6
 801451a:	4639      	mov	r1, r7
 801451c:	f7ec fb06 	bl	8000b2c <__aeabi_dcmplt>
 8014520:	2800      	cmp	r0, #0
 8014522:	d15c      	bne.n	80145de <_strtod_l+0xa4e>
 8014524:	4630      	mov	r0, r6
 8014526:	4639      	mov	r1, r7
 8014528:	4b8c      	ldr	r3, [pc, #560]	; (801475c <_strtod_l+0xbcc>)
 801452a:	2200      	movs	r2, #0
 801452c:	f7ec f88c 	bl	8000648 <__aeabi_dmul>
 8014530:	4606      	mov	r6, r0
 8014532:	460f      	mov	r7, r1
 8014534:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014538:	9606      	str	r6, [sp, #24]
 801453a:	9307      	str	r3, [sp, #28]
 801453c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014540:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014544:	4b86      	ldr	r3, [pc, #536]	; (8014760 <_strtod_l+0xbd0>)
 8014546:	ea0a 0303 	and.w	r3, sl, r3
 801454a:	930d      	str	r3, [sp, #52]	; 0x34
 801454c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801454e:	4b85      	ldr	r3, [pc, #532]	; (8014764 <_strtod_l+0xbd4>)
 8014550:	429a      	cmp	r2, r3
 8014552:	f040 8090 	bne.w	8014676 <_strtod_l+0xae6>
 8014556:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801455a:	ec49 8b10 	vmov	d0, r8, r9
 801455e:	f7ff f9b9 	bl	80138d4 <__ulp>
 8014562:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014566:	ec51 0b10 	vmov	r0, r1, d0
 801456a:	f7ec f86d 	bl	8000648 <__aeabi_dmul>
 801456e:	4642      	mov	r2, r8
 8014570:	464b      	mov	r3, r9
 8014572:	f7eb feb3 	bl	80002dc <__adddf3>
 8014576:	460b      	mov	r3, r1
 8014578:	4979      	ldr	r1, [pc, #484]	; (8014760 <_strtod_l+0xbd0>)
 801457a:	4a7b      	ldr	r2, [pc, #492]	; (8014768 <_strtod_l+0xbd8>)
 801457c:	4019      	ands	r1, r3
 801457e:	4291      	cmp	r1, r2
 8014580:	4680      	mov	r8, r0
 8014582:	d944      	bls.n	801460e <_strtod_l+0xa7e>
 8014584:	ee18 2a90 	vmov	r2, s17
 8014588:	4b78      	ldr	r3, [pc, #480]	; (801476c <_strtod_l+0xbdc>)
 801458a:	429a      	cmp	r2, r3
 801458c:	d104      	bne.n	8014598 <_strtod_l+0xa08>
 801458e:	ee18 3a10 	vmov	r3, s16
 8014592:	3301      	adds	r3, #1
 8014594:	f43f ad40 	beq.w	8014018 <_strtod_l+0x488>
 8014598:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801476c <_strtod_l+0xbdc>
 801459c:	f04f 38ff 	mov.w	r8, #4294967295
 80145a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80145a2:	4620      	mov	r0, r4
 80145a4:	f7fe fe6a 	bl	801327c <_Bfree>
 80145a8:	9905      	ldr	r1, [sp, #20]
 80145aa:	4620      	mov	r0, r4
 80145ac:	f7fe fe66 	bl	801327c <_Bfree>
 80145b0:	4659      	mov	r1, fp
 80145b2:	4620      	mov	r0, r4
 80145b4:	f7fe fe62 	bl	801327c <_Bfree>
 80145b8:	4629      	mov	r1, r5
 80145ba:	4620      	mov	r0, r4
 80145bc:	f7fe fe5e 	bl	801327c <_Bfree>
 80145c0:	e609      	b.n	80141d6 <_strtod_l+0x646>
 80145c2:	f1b8 0f01 	cmp.w	r8, #1
 80145c6:	d103      	bne.n	80145d0 <_strtod_l+0xa40>
 80145c8:	f1b9 0f00 	cmp.w	r9, #0
 80145cc:	f43f ad95 	beq.w	80140fa <_strtod_l+0x56a>
 80145d0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8014728 <_strtod_l+0xb98>
 80145d4:	4f60      	ldr	r7, [pc, #384]	; (8014758 <_strtod_l+0xbc8>)
 80145d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80145da:	2600      	movs	r6, #0
 80145dc:	e7ae      	b.n	801453c <_strtod_l+0x9ac>
 80145de:	4f5f      	ldr	r7, [pc, #380]	; (801475c <_strtod_l+0xbcc>)
 80145e0:	2600      	movs	r6, #0
 80145e2:	e7a7      	b.n	8014534 <_strtod_l+0x9a4>
 80145e4:	4b5d      	ldr	r3, [pc, #372]	; (801475c <_strtod_l+0xbcc>)
 80145e6:	4630      	mov	r0, r6
 80145e8:	4639      	mov	r1, r7
 80145ea:	2200      	movs	r2, #0
 80145ec:	f7ec f82c 	bl	8000648 <__aeabi_dmul>
 80145f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145f2:	4606      	mov	r6, r0
 80145f4:	460f      	mov	r7, r1
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d09c      	beq.n	8014534 <_strtod_l+0x9a4>
 80145fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80145fe:	e79d      	b.n	801453c <_strtod_l+0x9ac>
 8014600:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8014730 <_strtod_l+0xba0>
 8014604:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014608:	ec57 6b17 	vmov	r6, r7, d7
 801460c:	e796      	b.n	801453c <_strtod_l+0x9ac>
 801460e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014612:	9b04      	ldr	r3, [sp, #16]
 8014614:	46ca      	mov	sl, r9
 8014616:	2b00      	cmp	r3, #0
 8014618:	d1c2      	bne.n	80145a0 <_strtod_l+0xa10>
 801461a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801461e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014620:	0d1b      	lsrs	r3, r3, #20
 8014622:	051b      	lsls	r3, r3, #20
 8014624:	429a      	cmp	r2, r3
 8014626:	d1bb      	bne.n	80145a0 <_strtod_l+0xa10>
 8014628:	4630      	mov	r0, r6
 801462a:	4639      	mov	r1, r7
 801462c:	f7ec fb6c 	bl	8000d08 <__aeabi_d2lz>
 8014630:	f7eb ffdc 	bl	80005ec <__aeabi_l2d>
 8014634:	4602      	mov	r2, r0
 8014636:	460b      	mov	r3, r1
 8014638:	4630      	mov	r0, r6
 801463a:	4639      	mov	r1, r7
 801463c:	f7eb fe4c 	bl	80002d8 <__aeabi_dsub>
 8014640:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014642:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014646:	ea43 0308 	orr.w	r3, r3, r8
 801464a:	4313      	orrs	r3, r2
 801464c:	4606      	mov	r6, r0
 801464e:	460f      	mov	r7, r1
 8014650:	d054      	beq.n	80146fc <_strtod_l+0xb6c>
 8014652:	a339      	add	r3, pc, #228	; (adr r3, 8014738 <_strtod_l+0xba8>)
 8014654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014658:	f7ec fa68 	bl	8000b2c <__aeabi_dcmplt>
 801465c:	2800      	cmp	r0, #0
 801465e:	f47f ace5 	bne.w	801402c <_strtod_l+0x49c>
 8014662:	a337      	add	r3, pc, #220	; (adr r3, 8014740 <_strtod_l+0xbb0>)
 8014664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014668:	4630      	mov	r0, r6
 801466a:	4639      	mov	r1, r7
 801466c:	f7ec fa7c 	bl	8000b68 <__aeabi_dcmpgt>
 8014670:	2800      	cmp	r0, #0
 8014672:	d095      	beq.n	80145a0 <_strtod_l+0xa10>
 8014674:	e4da      	b.n	801402c <_strtod_l+0x49c>
 8014676:	9b04      	ldr	r3, [sp, #16]
 8014678:	b333      	cbz	r3, 80146c8 <_strtod_l+0xb38>
 801467a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801467c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014680:	d822      	bhi.n	80146c8 <_strtod_l+0xb38>
 8014682:	a331      	add	r3, pc, #196	; (adr r3, 8014748 <_strtod_l+0xbb8>)
 8014684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014688:	4630      	mov	r0, r6
 801468a:	4639      	mov	r1, r7
 801468c:	f7ec fa58 	bl	8000b40 <__aeabi_dcmple>
 8014690:	b1a0      	cbz	r0, 80146bc <_strtod_l+0xb2c>
 8014692:	4639      	mov	r1, r7
 8014694:	4630      	mov	r0, r6
 8014696:	f7ec faaf 	bl	8000bf8 <__aeabi_d2uiz>
 801469a:	2801      	cmp	r0, #1
 801469c:	bf38      	it	cc
 801469e:	2001      	movcc	r0, #1
 80146a0:	f7eb ff58 	bl	8000554 <__aeabi_ui2d>
 80146a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146a6:	4606      	mov	r6, r0
 80146a8:	460f      	mov	r7, r1
 80146aa:	bb23      	cbnz	r3, 80146f6 <_strtod_l+0xb66>
 80146ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80146b0:	9010      	str	r0, [sp, #64]	; 0x40
 80146b2:	9311      	str	r3, [sp, #68]	; 0x44
 80146b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80146b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80146bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80146c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80146c4:	1a9b      	subs	r3, r3, r2
 80146c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80146c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80146cc:	eeb0 0a48 	vmov.f32	s0, s16
 80146d0:	eef0 0a68 	vmov.f32	s1, s17
 80146d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80146d8:	f7ff f8fc 	bl	80138d4 <__ulp>
 80146dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80146e0:	ec53 2b10 	vmov	r2, r3, d0
 80146e4:	f7eb ffb0 	bl	8000648 <__aeabi_dmul>
 80146e8:	ec53 2b18 	vmov	r2, r3, d8
 80146ec:	f7eb fdf6 	bl	80002dc <__adddf3>
 80146f0:	4680      	mov	r8, r0
 80146f2:	4689      	mov	r9, r1
 80146f4:	e78d      	b.n	8014612 <_strtod_l+0xa82>
 80146f6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80146fa:	e7db      	b.n	80146b4 <_strtod_l+0xb24>
 80146fc:	a314      	add	r3, pc, #80	; (adr r3, 8014750 <_strtod_l+0xbc0>)
 80146fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014702:	f7ec fa13 	bl	8000b2c <__aeabi_dcmplt>
 8014706:	e7b3      	b.n	8014670 <_strtod_l+0xae0>
 8014708:	2300      	movs	r3, #0
 801470a:	930a      	str	r3, [sp, #40]	; 0x28
 801470c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801470e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014710:	6013      	str	r3, [r2, #0]
 8014712:	f7ff ba7c 	b.w	8013c0e <_strtod_l+0x7e>
 8014716:	2a65      	cmp	r2, #101	; 0x65
 8014718:	f43f ab75 	beq.w	8013e06 <_strtod_l+0x276>
 801471c:	2a45      	cmp	r2, #69	; 0x45
 801471e:	f43f ab72 	beq.w	8013e06 <_strtod_l+0x276>
 8014722:	2301      	movs	r3, #1
 8014724:	f7ff bbaa 	b.w	8013e7c <_strtod_l+0x2ec>
 8014728:	00000000 	.word	0x00000000
 801472c:	bff00000 	.word	0xbff00000
 8014730:	00000000 	.word	0x00000000
 8014734:	3ff00000 	.word	0x3ff00000
 8014738:	94a03595 	.word	0x94a03595
 801473c:	3fdfffff 	.word	0x3fdfffff
 8014740:	35afe535 	.word	0x35afe535
 8014744:	3fe00000 	.word	0x3fe00000
 8014748:	ffc00000 	.word	0xffc00000
 801474c:	41dfffff 	.word	0x41dfffff
 8014750:	94a03595 	.word	0x94a03595
 8014754:	3fcfffff 	.word	0x3fcfffff
 8014758:	3ff00000 	.word	0x3ff00000
 801475c:	3fe00000 	.word	0x3fe00000
 8014760:	7ff00000 	.word	0x7ff00000
 8014764:	7fe00000 	.word	0x7fe00000
 8014768:	7c9fffff 	.word	0x7c9fffff
 801476c:	7fefffff 	.word	0x7fefffff

08014770 <_strtod_r>:
 8014770:	4b01      	ldr	r3, [pc, #4]	; (8014778 <_strtod_r+0x8>)
 8014772:	f7ff ba0d 	b.w	8013b90 <_strtod_l>
 8014776:	bf00      	nop
 8014778:	20000270 	.word	0x20000270

0801477c <_strtol_l.constprop.0>:
 801477c:	2b01      	cmp	r3, #1
 801477e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014782:	d001      	beq.n	8014788 <_strtol_l.constprop.0+0xc>
 8014784:	2b24      	cmp	r3, #36	; 0x24
 8014786:	d906      	bls.n	8014796 <_strtol_l.constprop.0+0x1a>
 8014788:	f7fd fd7c 	bl	8012284 <__errno>
 801478c:	2316      	movs	r3, #22
 801478e:	6003      	str	r3, [r0, #0]
 8014790:	2000      	movs	r0, #0
 8014792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014796:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801487c <_strtol_l.constprop.0+0x100>
 801479a:	460d      	mov	r5, r1
 801479c:	462e      	mov	r6, r5
 801479e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147a2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80147a6:	f017 0708 	ands.w	r7, r7, #8
 80147aa:	d1f7      	bne.n	801479c <_strtol_l.constprop.0+0x20>
 80147ac:	2c2d      	cmp	r4, #45	; 0x2d
 80147ae:	d132      	bne.n	8014816 <_strtol_l.constprop.0+0x9a>
 80147b0:	782c      	ldrb	r4, [r5, #0]
 80147b2:	2701      	movs	r7, #1
 80147b4:	1cb5      	adds	r5, r6, #2
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d05b      	beq.n	8014872 <_strtol_l.constprop.0+0xf6>
 80147ba:	2b10      	cmp	r3, #16
 80147bc:	d109      	bne.n	80147d2 <_strtol_l.constprop.0+0x56>
 80147be:	2c30      	cmp	r4, #48	; 0x30
 80147c0:	d107      	bne.n	80147d2 <_strtol_l.constprop.0+0x56>
 80147c2:	782c      	ldrb	r4, [r5, #0]
 80147c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80147c8:	2c58      	cmp	r4, #88	; 0x58
 80147ca:	d14d      	bne.n	8014868 <_strtol_l.constprop.0+0xec>
 80147cc:	786c      	ldrb	r4, [r5, #1]
 80147ce:	2310      	movs	r3, #16
 80147d0:	3502      	adds	r5, #2
 80147d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80147d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80147da:	f04f 0e00 	mov.w	lr, #0
 80147de:	fbb8 f9f3 	udiv	r9, r8, r3
 80147e2:	4676      	mov	r6, lr
 80147e4:	fb03 8a19 	mls	sl, r3, r9, r8
 80147e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80147ec:	f1bc 0f09 	cmp.w	ip, #9
 80147f0:	d816      	bhi.n	8014820 <_strtol_l.constprop.0+0xa4>
 80147f2:	4664      	mov	r4, ip
 80147f4:	42a3      	cmp	r3, r4
 80147f6:	dd24      	ble.n	8014842 <_strtol_l.constprop.0+0xc6>
 80147f8:	f1be 3fff 	cmp.w	lr, #4294967295
 80147fc:	d008      	beq.n	8014810 <_strtol_l.constprop.0+0x94>
 80147fe:	45b1      	cmp	r9, r6
 8014800:	d31c      	bcc.n	801483c <_strtol_l.constprop.0+0xc0>
 8014802:	d101      	bne.n	8014808 <_strtol_l.constprop.0+0x8c>
 8014804:	45a2      	cmp	sl, r4
 8014806:	db19      	blt.n	801483c <_strtol_l.constprop.0+0xc0>
 8014808:	fb06 4603 	mla	r6, r6, r3, r4
 801480c:	f04f 0e01 	mov.w	lr, #1
 8014810:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014814:	e7e8      	b.n	80147e8 <_strtol_l.constprop.0+0x6c>
 8014816:	2c2b      	cmp	r4, #43	; 0x2b
 8014818:	bf04      	itt	eq
 801481a:	782c      	ldrbeq	r4, [r5, #0]
 801481c:	1cb5      	addeq	r5, r6, #2
 801481e:	e7ca      	b.n	80147b6 <_strtol_l.constprop.0+0x3a>
 8014820:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014824:	f1bc 0f19 	cmp.w	ip, #25
 8014828:	d801      	bhi.n	801482e <_strtol_l.constprop.0+0xb2>
 801482a:	3c37      	subs	r4, #55	; 0x37
 801482c:	e7e2      	b.n	80147f4 <_strtol_l.constprop.0+0x78>
 801482e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014832:	f1bc 0f19 	cmp.w	ip, #25
 8014836:	d804      	bhi.n	8014842 <_strtol_l.constprop.0+0xc6>
 8014838:	3c57      	subs	r4, #87	; 0x57
 801483a:	e7db      	b.n	80147f4 <_strtol_l.constprop.0+0x78>
 801483c:	f04f 3eff 	mov.w	lr, #4294967295
 8014840:	e7e6      	b.n	8014810 <_strtol_l.constprop.0+0x94>
 8014842:	f1be 3fff 	cmp.w	lr, #4294967295
 8014846:	d105      	bne.n	8014854 <_strtol_l.constprop.0+0xd8>
 8014848:	2322      	movs	r3, #34	; 0x22
 801484a:	6003      	str	r3, [r0, #0]
 801484c:	4646      	mov	r6, r8
 801484e:	b942      	cbnz	r2, 8014862 <_strtol_l.constprop.0+0xe6>
 8014850:	4630      	mov	r0, r6
 8014852:	e79e      	b.n	8014792 <_strtol_l.constprop.0+0x16>
 8014854:	b107      	cbz	r7, 8014858 <_strtol_l.constprop.0+0xdc>
 8014856:	4276      	negs	r6, r6
 8014858:	2a00      	cmp	r2, #0
 801485a:	d0f9      	beq.n	8014850 <_strtol_l.constprop.0+0xd4>
 801485c:	f1be 0f00 	cmp.w	lr, #0
 8014860:	d000      	beq.n	8014864 <_strtol_l.constprop.0+0xe8>
 8014862:	1e69      	subs	r1, r5, #1
 8014864:	6011      	str	r1, [r2, #0]
 8014866:	e7f3      	b.n	8014850 <_strtol_l.constprop.0+0xd4>
 8014868:	2430      	movs	r4, #48	; 0x30
 801486a:	2b00      	cmp	r3, #0
 801486c:	d1b1      	bne.n	80147d2 <_strtol_l.constprop.0+0x56>
 801486e:	2308      	movs	r3, #8
 8014870:	e7af      	b.n	80147d2 <_strtol_l.constprop.0+0x56>
 8014872:	2c30      	cmp	r4, #48	; 0x30
 8014874:	d0a5      	beq.n	80147c2 <_strtol_l.constprop.0+0x46>
 8014876:	230a      	movs	r3, #10
 8014878:	e7ab      	b.n	80147d2 <_strtol_l.constprop.0+0x56>
 801487a:	bf00      	nop
 801487c:	08018999 	.word	0x08018999

08014880 <_strtol_r>:
 8014880:	f7ff bf7c 	b.w	801477c <_strtol_l.constprop.0>

08014884 <__ssputs_r>:
 8014884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014888:	688e      	ldr	r6, [r1, #8]
 801488a:	461f      	mov	r7, r3
 801488c:	42be      	cmp	r6, r7
 801488e:	680b      	ldr	r3, [r1, #0]
 8014890:	4682      	mov	sl, r0
 8014892:	460c      	mov	r4, r1
 8014894:	4690      	mov	r8, r2
 8014896:	d82c      	bhi.n	80148f2 <__ssputs_r+0x6e>
 8014898:	898a      	ldrh	r2, [r1, #12]
 801489a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801489e:	d026      	beq.n	80148ee <__ssputs_r+0x6a>
 80148a0:	6965      	ldr	r5, [r4, #20]
 80148a2:	6909      	ldr	r1, [r1, #16]
 80148a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80148a8:	eba3 0901 	sub.w	r9, r3, r1
 80148ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80148b0:	1c7b      	adds	r3, r7, #1
 80148b2:	444b      	add	r3, r9
 80148b4:	106d      	asrs	r5, r5, #1
 80148b6:	429d      	cmp	r5, r3
 80148b8:	bf38      	it	cc
 80148ba:	461d      	movcc	r5, r3
 80148bc:	0553      	lsls	r3, r2, #21
 80148be:	d527      	bpl.n	8014910 <__ssputs_r+0x8c>
 80148c0:	4629      	mov	r1, r5
 80148c2:	f7fe fc0f 	bl	80130e4 <_malloc_r>
 80148c6:	4606      	mov	r6, r0
 80148c8:	b360      	cbz	r0, 8014924 <__ssputs_r+0xa0>
 80148ca:	6921      	ldr	r1, [r4, #16]
 80148cc:	464a      	mov	r2, r9
 80148ce:	f7fd fd06 	bl	80122de <memcpy>
 80148d2:	89a3      	ldrh	r3, [r4, #12]
 80148d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80148d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148dc:	81a3      	strh	r3, [r4, #12]
 80148de:	6126      	str	r6, [r4, #16]
 80148e0:	6165      	str	r5, [r4, #20]
 80148e2:	444e      	add	r6, r9
 80148e4:	eba5 0509 	sub.w	r5, r5, r9
 80148e8:	6026      	str	r6, [r4, #0]
 80148ea:	60a5      	str	r5, [r4, #8]
 80148ec:	463e      	mov	r6, r7
 80148ee:	42be      	cmp	r6, r7
 80148f0:	d900      	bls.n	80148f4 <__ssputs_r+0x70>
 80148f2:	463e      	mov	r6, r7
 80148f4:	6820      	ldr	r0, [r4, #0]
 80148f6:	4632      	mov	r2, r6
 80148f8:	4641      	mov	r1, r8
 80148fa:	f000 f9c9 	bl	8014c90 <memmove>
 80148fe:	68a3      	ldr	r3, [r4, #8]
 8014900:	1b9b      	subs	r3, r3, r6
 8014902:	60a3      	str	r3, [r4, #8]
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	4433      	add	r3, r6
 8014908:	6023      	str	r3, [r4, #0]
 801490a:	2000      	movs	r0, #0
 801490c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014910:	462a      	mov	r2, r5
 8014912:	f000 fd9e 	bl	8015452 <_realloc_r>
 8014916:	4606      	mov	r6, r0
 8014918:	2800      	cmp	r0, #0
 801491a:	d1e0      	bne.n	80148de <__ssputs_r+0x5a>
 801491c:	6921      	ldr	r1, [r4, #16]
 801491e:	4650      	mov	r0, sl
 8014920:	f7fe fb6c 	bl	8012ffc <_free_r>
 8014924:	230c      	movs	r3, #12
 8014926:	f8ca 3000 	str.w	r3, [sl]
 801492a:	89a3      	ldrh	r3, [r4, #12]
 801492c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014930:	81a3      	strh	r3, [r4, #12]
 8014932:	f04f 30ff 	mov.w	r0, #4294967295
 8014936:	e7e9      	b.n	801490c <__ssputs_r+0x88>

08014938 <_svfiprintf_r>:
 8014938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801493c:	4698      	mov	r8, r3
 801493e:	898b      	ldrh	r3, [r1, #12]
 8014940:	061b      	lsls	r3, r3, #24
 8014942:	b09d      	sub	sp, #116	; 0x74
 8014944:	4607      	mov	r7, r0
 8014946:	460d      	mov	r5, r1
 8014948:	4614      	mov	r4, r2
 801494a:	d50e      	bpl.n	801496a <_svfiprintf_r+0x32>
 801494c:	690b      	ldr	r3, [r1, #16]
 801494e:	b963      	cbnz	r3, 801496a <_svfiprintf_r+0x32>
 8014950:	2140      	movs	r1, #64	; 0x40
 8014952:	f7fe fbc7 	bl	80130e4 <_malloc_r>
 8014956:	6028      	str	r0, [r5, #0]
 8014958:	6128      	str	r0, [r5, #16]
 801495a:	b920      	cbnz	r0, 8014966 <_svfiprintf_r+0x2e>
 801495c:	230c      	movs	r3, #12
 801495e:	603b      	str	r3, [r7, #0]
 8014960:	f04f 30ff 	mov.w	r0, #4294967295
 8014964:	e0d0      	b.n	8014b08 <_svfiprintf_r+0x1d0>
 8014966:	2340      	movs	r3, #64	; 0x40
 8014968:	616b      	str	r3, [r5, #20]
 801496a:	2300      	movs	r3, #0
 801496c:	9309      	str	r3, [sp, #36]	; 0x24
 801496e:	2320      	movs	r3, #32
 8014970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014974:	f8cd 800c 	str.w	r8, [sp, #12]
 8014978:	2330      	movs	r3, #48	; 0x30
 801497a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014b20 <_svfiprintf_r+0x1e8>
 801497e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014982:	f04f 0901 	mov.w	r9, #1
 8014986:	4623      	mov	r3, r4
 8014988:	469a      	mov	sl, r3
 801498a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801498e:	b10a      	cbz	r2, 8014994 <_svfiprintf_r+0x5c>
 8014990:	2a25      	cmp	r2, #37	; 0x25
 8014992:	d1f9      	bne.n	8014988 <_svfiprintf_r+0x50>
 8014994:	ebba 0b04 	subs.w	fp, sl, r4
 8014998:	d00b      	beq.n	80149b2 <_svfiprintf_r+0x7a>
 801499a:	465b      	mov	r3, fp
 801499c:	4622      	mov	r2, r4
 801499e:	4629      	mov	r1, r5
 80149a0:	4638      	mov	r0, r7
 80149a2:	f7ff ff6f 	bl	8014884 <__ssputs_r>
 80149a6:	3001      	adds	r0, #1
 80149a8:	f000 80a9 	beq.w	8014afe <_svfiprintf_r+0x1c6>
 80149ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149ae:	445a      	add	r2, fp
 80149b0:	9209      	str	r2, [sp, #36]	; 0x24
 80149b2:	f89a 3000 	ldrb.w	r3, [sl]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	f000 80a1 	beq.w	8014afe <_svfiprintf_r+0x1c6>
 80149bc:	2300      	movs	r3, #0
 80149be:	f04f 32ff 	mov.w	r2, #4294967295
 80149c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80149c6:	f10a 0a01 	add.w	sl, sl, #1
 80149ca:	9304      	str	r3, [sp, #16]
 80149cc:	9307      	str	r3, [sp, #28]
 80149ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149d2:	931a      	str	r3, [sp, #104]	; 0x68
 80149d4:	4654      	mov	r4, sl
 80149d6:	2205      	movs	r2, #5
 80149d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149dc:	4850      	ldr	r0, [pc, #320]	; (8014b20 <_svfiprintf_r+0x1e8>)
 80149de:	f7eb fc1f 	bl	8000220 <memchr>
 80149e2:	9a04      	ldr	r2, [sp, #16]
 80149e4:	b9d8      	cbnz	r0, 8014a1e <_svfiprintf_r+0xe6>
 80149e6:	06d0      	lsls	r0, r2, #27
 80149e8:	bf44      	itt	mi
 80149ea:	2320      	movmi	r3, #32
 80149ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149f0:	0711      	lsls	r1, r2, #28
 80149f2:	bf44      	itt	mi
 80149f4:	232b      	movmi	r3, #43	; 0x2b
 80149f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149fa:	f89a 3000 	ldrb.w	r3, [sl]
 80149fe:	2b2a      	cmp	r3, #42	; 0x2a
 8014a00:	d015      	beq.n	8014a2e <_svfiprintf_r+0xf6>
 8014a02:	9a07      	ldr	r2, [sp, #28]
 8014a04:	4654      	mov	r4, sl
 8014a06:	2000      	movs	r0, #0
 8014a08:	f04f 0c0a 	mov.w	ip, #10
 8014a0c:	4621      	mov	r1, r4
 8014a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a12:	3b30      	subs	r3, #48	; 0x30
 8014a14:	2b09      	cmp	r3, #9
 8014a16:	d94d      	bls.n	8014ab4 <_svfiprintf_r+0x17c>
 8014a18:	b1b0      	cbz	r0, 8014a48 <_svfiprintf_r+0x110>
 8014a1a:	9207      	str	r2, [sp, #28]
 8014a1c:	e014      	b.n	8014a48 <_svfiprintf_r+0x110>
 8014a1e:	eba0 0308 	sub.w	r3, r0, r8
 8014a22:	fa09 f303 	lsl.w	r3, r9, r3
 8014a26:	4313      	orrs	r3, r2
 8014a28:	9304      	str	r3, [sp, #16]
 8014a2a:	46a2      	mov	sl, r4
 8014a2c:	e7d2      	b.n	80149d4 <_svfiprintf_r+0x9c>
 8014a2e:	9b03      	ldr	r3, [sp, #12]
 8014a30:	1d19      	adds	r1, r3, #4
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	9103      	str	r1, [sp, #12]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	bfbb      	ittet	lt
 8014a3a:	425b      	neglt	r3, r3
 8014a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8014a40:	9307      	strge	r3, [sp, #28]
 8014a42:	9307      	strlt	r3, [sp, #28]
 8014a44:	bfb8      	it	lt
 8014a46:	9204      	strlt	r2, [sp, #16]
 8014a48:	7823      	ldrb	r3, [r4, #0]
 8014a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8014a4c:	d10c      	bne.n	8014a68 <_svfiprintf_r+0x130>
 8014a4e:	7863      	ldrb	r3, [r4, #1]
 8014a50:	2b2a      	cmp	r3, #42	; 0x2a
 8014a52:	d134      	bne.n	8014abe <_svfiprintf_r+0x186>
 8014a54:	9b03      	ldr	r3, [sp, #12]
 8014a56:	1d1a      	adds	r2, r3, #4
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	9203      	str	r2, [sp, #12]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	bfb8      	it	lt
 8014a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a64:	3402      	adds	r4, #2
 8014a66:	9305      	str	r3, [sp, #20]
 8014a68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014b30 <_svfiprintf_r+0x1f8>
 8014a6c:	7821      	ldrb	r1, [r4, #0]
 8014a6e:	2203      	movs	r2, #3
 8014a70:	4650      	mov	r0, sl
 8014a72:	f7eb fbd5 	bl	8000220 <memchr>
 8014a76:	b138      	cbz	r0, 8014a88 <_svfiprintf_r+0x150>
 8014a78:	9b04      	ldr	r3, [sp, #16]
 8014a7a:	eba0 000a 	sub.w	r0, r0, sl
 8014a7e:	2240      	movs	r2, #64	; 0x40
 8014a80:	4082      	lsls	r2, r0
 8014a82:	4313      	orrs	r3, r2
 8014a84:	3401      	adds	r4, #1
 8014a86:	9304      	str	r3, [sp, #16]
 8014a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a8c:	4825      	ldr	r0, [pc, #148]	; (8014b24 <_svfiprintf_r+0x1ec>)
 8014a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a92:	2206      	movs	r2, #6
 8014a94:	f7eb fbc4 	bl	8000220 <memchr>
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	d038      	beq.n	8014b0e <_svfiprintf_r+0x1d6>
 8014a9c:	4b22      	ldr	r3, [pc, #136]	; (8014b28 <_svfiprintf_r+0x1f0>)
 8014a9e:	bb1b      	cbnz	r3, 8014ae8 <_svfiprintf_r+0x1b0>
 8014aa0:	9b03      	ldr	r3, [sp, #12]
 8014aa2:	3307      	adds	r3, #7
 8014aa4:	f023 0307 	bic.w	r3, r3, #7
 8014aa8:	3308      	adds	r3, #8
 8014aaa:	9303      	str	r3, [sp, #12]
 8014aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aae:	4433      	add	r3, r6
 8014ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8014ab2:	e768      	b.n	8014986 <_svfiprintf_r+0x4e>
 8014ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ab8:	460c      	mov	r4, r1
 8014aba:	2001      	movs	r0, #1
 8014abc:	e7a6      	b.n	8014a0c <_svfiprintf_r+0xd4>
 8014abe:	2300      	movs	r3, #0
 8014ac0:	3401      	adds	r4, #1
 8014ac2:	9305      	str	r3, [sp, #20]
 8014ac4:	4619      	mov	r1, r3
 8014ac6:	f04f 0c0a 	mov.w	ip, #10
 8014aca:	4620      	mov	r0, r4
 8014acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ad0:	3a30      	subs	r2, #48	; 0x30
 8014ad2:	2a09      	cmp	r2, #9
 8014ad4:	d903      	bls.n	8014ade <_svfiprintf_r+0x1a6>
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d0c6      	beq.n	8014a68 <_svfiprintf_r+0x130>
 8014ada:	9105      	str	r1, [sp, #20]
 8014adc:	e7c4      	b.n	8014a68 <_svfiprintf_r+0x130>
 8014ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ae2:	4604      	mov	r4, r0
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	e7f0      	b.n	8014aca <_svfiprintf_r+0x192>
 8014ae8:	ab03      	add	r3, sp, #12
 8014aea:	9300      	str	r3, [sp, #0]
 8014aec:	462a      	mov	r2, r5
 8014aee:	4b0f      	ldr	r3, [pc, #60]	; (8014b2c <_svfiprintf_r+0x1f4>)
 8014af0:	a904      	add	r1, sp, #16
 8014af2:	4638      	mov	r0, r7
 8014af4:	f7fc fc78 	bl	80113e8 <_printf_float>
 8014af8:	1c42      	adds	r2, r0, #1
 8014afa:	4606      	mov	r6, r0
 8014afc:	d1d6      	bne.n	8014aac <_svfiprintf_r+0x174>
 8014afe:	89ab      	ldrh	r3, [r5, #12]
 8014b00:	065b      	lsls	r3, r3, #25
 8014b02:	f53f af2d 	bmi.w	8014960 <_svfiprintf_r+0x28>
 8014b06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b08:	b01d      	add	sp, #116	; 0x74
 8014b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b0e:	ab03      	add	r3, sp, #12
 8014b10:	9300      	str	r3, [sp, #0]
 8014b12:	462a      	mov	r2, r5
 8014b14:	4b05      	ldr	r3, [pc, #20]	; (8014b2c <_svfiprintf_r+0x1f4>)
 8014b16:	a904      	add	r1, sp, #16
 8014b18:	4638      	mov	r0, r7
 8014b1a:	f7fc ff09 	bl	8011930 <_printf_i>
 8014b1e:	e7eb      	b.n	8014af8 <_svfiprintf_r+0x1c0>
 8014b20:	08018a99 	.word	0x08018a99
 8014b24:	08018aa3 	.word	0x08018aa3
 8014b28:	080113e9 	.word	0x080113e9
 8014b2c:	08014885 	.word	0x08014885
 8014b30:	08018a9f 	.word	0x08018a9f

08014b34 <__sflush_r>:
 8014b34:	898a      	ldrh	r2, [r1, #12]
 8014b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b3a:	4605      	mov	r5, r0
 8014b3c:	0710      	lsls	r0, r2, #28
 8014b3e:	460c      	mov	r4, r1
 8014b40:	d458      	bmi.n	8014bf4 <__sflush_r+0xc0>
 8014b42:	684b      	ldr	r3, [r1, #4]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	dc05      	bgt.n	8014b54 <__sflush_r+0x20>
 8014b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	dc02      	bgt.n	8014b54 <__sflush_r+0x20>
 8014b4e:	2000      	movs	r0, #0
 8014b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b56:	2e00      	cmp	r6, #0
 8014b58:	d0f9      	beq.n	8014b4e <__sflush_r+0x1a>
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014b60:	682f      	ldr	r7, [r5, #0]
 8014b62:	6a21      	ldr	r1, [r4, #32]
 8014b64:	602b      	str	r3, [r5, #0]
 8014b66:	d032      	beq.n	8014bce <__sflush_r+0x9a>
 8014b68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014b6a:	89a3      	ldrh	r3, [r4, #12]
 8014b6c:	075a      	lsls	r2, r3, #29
 8014b6e:	d505      	bpl.n	8014b7c <__sflush_r+0x48>
 8014b70:	6863      	ldr	r3, [r4, #4]
 8014b72:	1ac0      	subs	r0, r0, r3
 8014b74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014b76:	b10b      	cbz	r3, 8014b7c <__sflush_r+0x48>
 8014b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014b7a:	1ac0      	subs	r0, r0, r3
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	4602      	mov	r2, r0
 8014b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b82:	6a21      	ldr	r1, [r4, #32]
 8014b84:	4628      	mov	r0, r5
 8014b86:	47b0      	blx	r6
 8014b88:	1c43      	adds	r3, r0, #1
 8014b8a:	89a3      	ldrh	r3, [r4, #12]
 8014b8c:	d106      	bne.n	8014b9c <__sflush_r+0x68>
 8014b8e:	6829      	ldr	r1, [r5, #0]
 8014b90:	291d      	cmp	r1, #29
 8014b92:	d82b      	bhi.n	8014bec <__sflush_r+0xb8>
 8014b94:	4a29      	ldr	r2, [pc, #164]	; (8014c3c <__sflush_r+0x108>)
 8014b96:	410a      	asrs	r2, r1
 8014b98:	07d6      	lsls	r6, r2, #31
 8014b9a:	d427      	bmi.n	8014bec <__sflush_r+0xb8>
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	6062      	str	r2, [r4, #4]
 8014ba0:	04d9      	lsls	r1, r3, #19
 8014ba2:	6922      	ldr	r2, [r4, #16]
 8014ba4:	6022      	str	r2, [r4, #0]
 8014ba6:	d504      	bpl.n	8014bb2 <__sflush_r+0x7e>
 8014ba8:	1c42      	adds	r2, r0, #1
 8014baa:	d101      	bne.n	8014bb0 <__sflush_r+0x7c>
 8014bac:	682b      	ldr	r3, [r5, #0]
 8014bae:	b903      	cbnz	r3, 8014bb2 <__sflush_r+0x7e>
 8014bb0:	6560      	str	r0, [r4, #84]	; 0x54
 8014bb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bb4:	602f      	str	r7, [r5, #0]
 8014bb6:	2900      	cmp	r1, #0
 8014bb8:	d0c9      	beq.n	8014b4e <__sflush_r+0x1a>
 8014bba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bbe:	4299      	cmp	r1, r3
 8014bc0:	d002      	beq.n	8014bc8 <__sflush_r+0x94>
 8014bc2:	4628      	mov	r0, r5
 8014bc4:	f7fe fa1a 	bl	8012ffc <_free_r>
 8014bc8:	2000      	movs	r0, #0
 8014bca:	6360      	str	r0, [r4, #52]	; 0x34
 8014bcc:	e7c0      	b.n	8014b50 <__sflush_r+0x1c>
 8014bce:	2301      	movs	r3, #1
 8014bd0:	4628      	mov	r0, r5
 8014bd2:	47b0      	blx	r6
 8014bd4:	1c41      	adds	r1, r0, #1
 8014bd6:	d1c8      	bne.n	8014b6a <__sflush_r+0x36>
 8014bd8:	682b      	ldr	r3, [r5, #0]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d0c5      	beq.n	8014b6a <__sflush_r+0x36>
 8014bde:	2b1d      	cmp	r3, #29
 8014be0:	d001      	beq.n	8014be6 <__sflush_r+0xb2>
 8014be2:	2b16      	cmp	r3, #22
 8014be4:	d101      	bne.n	8014bea <__sflush_r+0xb6>
 8014be6:	602f      	str	r7, [r5, #0]
 8014be8:	e7b1      	b.n	8014b4e <__sflush_r+0x1a>
 8014bea:	89a3      	ldrh	r3, [r4, #12]
 8014bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014bf0:	81a3      	strh	r3, [r4, #12]
 8014bf2:	e7ad      	b.n	8014b50 <__sflush_r+0x1c>
 8014bf4:	690f      	ldr	r7, [r1, #16]
 8014bf6:	2f00      	cmp	r7, #0
 8014bf8:	d0a9      	beq.n	8014b4e <__sflush_r+0x1a>
 8014bfa:	0793      	lsls	r3, r2, #30
 8014bfc:	680e      	ldr	r6, [r1, #0]
 8014bfe:	bf08      	it	eq
 8014c00:	694b      	ldreq	r3, [r1, #20]
 8014c02:	600f      	str	r7, [r1, #0]
 8014c04:	bf18      	it	ne
 8014c06:	2300      	movne	r3, #0
 8014c08:	eba6 0807 	sub.w	r8, r6, r7
 8014c0c:	608b      	str	r3, [r1, #8]
 8014c0e:	f1b8 0f00 	cmp.w	r8, #0
 8014c12:	dd9c      	ble.n	8014b4e <__sflush_r+0x1a>
 8014c14:	6a21      	ldr	r1, [r4, #32]
 8014c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014c18:	4643      	mov	r3, r8
 8014c1a:	463a      	mov	r2, r7
 8014c1c:	4628      	mov	r0, r5
 8014c1e:	47b0      	blx	r6
 8014c20:	2800      	cmp	r0, #0
 8014c22:	dc06      	bgt.n	8014c32 <__sflush_r+0xfe>
 8014c24:	89a3      	ldrh	r3, [r4, #12]
 8014c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c2a:	81a3      	strh	r3, [r4, #12]
 8014c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c30:	e78e      	b.n	8014b50 <__sflush_r+0x1c>
 8014c32:	4407      	add	r7, r0
 8014c34:	eba8 0800 	sub.w	r8, r8, r0
 8014c38:	e7e9      	b.n	8014c0e <__sflush_r+0xda>
 8014c3a:	bf00      	nop
 8014c3c:	dfbffffe 	.word	0xdfbffffe

08014c40 <_fflush_r>:
 8014c40:	b538      	push	{r3, r4, r5, lr}
 8014c42:	690b      	ldr	r3, [r1, #16]
 8014c44:	4605      	mov	r5, r0
 8014c46:	460c      	mov	r4, r1
 8014c48:	b913      	cbnz	r3, 8014c50 <_fflush_r+0x10>
 8014c4a:	2500      	movs	r5, #0
 8014c4c:	4628      	mov	r0, r5
 8014c4e:	bd38      	pop	{r3, r4, r5, pc}
 8014c50:	b118      	cbz	r0, 8014c5a <_fflush_r+0x1a>
 8014c52:	6a03      	ldr	r3, [r0, #32]
 8014c54:	b90b      	cbnz	r3, 8014c5a <_fflush_r+0x1a>
 8014c56:	f7fd fa29 	bl	80120ac <__sinit>
 8014c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d0f3      	beq.n	8014c4a <_fflush_r+0xa>
 8014c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014c64:	07d0      	lsls	r0, r2, #31
 8014c66:	d404      	bmi.n	8014c72 <_fflush_r+0x32>
 8014c68:	0599      	lsls	r1, r3, #22
 8014c6a:	d402      	bmi.n	8014c72 <_fflush_r+0x32>
 8014c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c6e:	f7fd fb34 	bl	80122da <__retarget_lock_acquire_recursive>
 8014c72:	4628      	mov	r0, r5
 8014c74:	4621      	mov	r1, r4
 8014c76:	f7ff ff5d 	bl	8014b34 <__sflush_r>
 8014c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c7c:	07da      	lsls	r2, r3, #31
 8014c7e:	4605      	mov	r5, r0
 8014c80:	d4e4      	bmi.n	8014c4c <_fflush_r+0xc>
 8014c82:	89a3      	ldrh	r3, [r4, #12]
 8014c84:	059b      	lsls	r3, r3, #22
 8014c86:	d4e1      	bmi.n	8014c4c <_fflush_r+0xc>
 8014c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c8a:	f7fd fb27 	bl	80122dc <__retarget_lock_release_recursive>
 8014c8e:	e7dd      	b.n	8014c4c <_fflush_r+0xc>

08014c90 <memmove>:
 8014c90:	4288      	cmp	r0, r1
 8014c92:	b510      	push	{r4, lr}
 8014c94:	eb01 0402 	add.w	r4, r1, r2
 8014c98:	d902      	bls.n	8014ca0 <memmove+0x10>
 8014c9a:	4284      	cmp	r4, r0
 8014c9c:	4623      	mov	r3, r4
 8014c9e:	d807      	bhi.n	8014cb0 <memmove+0x20>
 8014ca0:	1e43      	subs	r3, r0, #1
 8014ca2:	42a1      	cmp	r1, r4
 8014ca4:	d008      	beq.n	8014cb8 <memmove+0x28>
 8014ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014cae:	e7f8      	b.n	8014ca2 <memmove+0x12>
 8014cb0:	4402      	add	r2, r0
 8014cb2:	4601      	mov	r1, r0
 8014cb4:	428a      	cmp	r2, r1
 8014cb6:	d100      	bne.n	8014cba <memmove+0x2a>
 8014cb8:	bd10      	pop	{r4, pc}
 8014cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014cc2:	e7f7      	b.n	8014cb4 <memmove+0x24>

08014cc4 <strncmp>:
 8014cc4:	b510      	push	{r4, lr}
 8014cc6:	b16a      	cbz	r2, 8014ce4 <strncmp+0x20>
 8014cc8:	3901      	subs	r1, #1
 8014cca:	1884      	adds	r4, r0, r2
 8014ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014cd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	d103      	bne.n	8014ce0 <strncmp+0x1c>
 8014cd8:	42a0      	cmp	r0, r4
 8014cda:	d001      	beq.n	8014ce0 <strncmp+0x1c>
 8014cdc:	2a00      	cmp	r2, #0
 8014cde:	d1f5      	bne.n	8014ccc <strncmp+0x8>
 8014ce0:	1ad0      	subs	r0, r2, r3
 8014ce2:	bd10      	pop	{r4, pc}
 8014ce4:	4610      	mov	r0, r2
 8014ce6:	e7fc      	b.n	8014ce2 <strncmp+0x1e>

08014ce8 <_sbrk_r>:
 8014ce8:	b538      	push	{r3, r4, r5, lr}
 8014cea:	4d06      	ldr	r5, [pc, #24]	; (8014d04 <_sbrk_r+0x1c>)
 8014cec:	2300      	movs	r3, #0
 8014cee:	4604      	mov	r4, r0
 8014cf0:	4608      	mov	r0, r1
 8014cf2:	602b      	str	r3, [r5, #0]
 8014cf4:	f7f1 f900 	bl	8005ef8 <_sbrk>
 8014cf8:	1c43      	adds	r3, r0, #1
 8014cfa:	d102      	bne.n	8014d02 <_sbrk_r+0x1a>
 8014cfc:	682b      	ldr	r3, [r5, #0]
 8014cfe:	b103      	cbz	r3, 8014d02 <_sbrk_r+0x1a>
 8014d00:	6023      	str	r3, [r4, #0]
 8014d02:	bd38      	pop	{r3, r4, r5, pc}
 8014d04:	200023b8 	.word	0x200023b8

08014d08 <nan>:
 8014d08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014d10 <nan+0x8>
 8014d0c:	4770      	bx	lr
 8014d0e:	bf00      	nop
 8014d10:	00000000 	.word	0x00000000
 8014d14:	7ff80000 	.word	0x7ff80000

08014d18 <__assert_func>:
 8014d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d1a:	4614      	mov	r4, r2
 8014d1c:	461a      	mov	r2, r3
 8014d1e:	4b09      	ldr	r3, [pc, #36]	; (8014d44 <__assert_func+0x2c>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	4605      	mov	r5, r0
 8014d24:	68d8      	ldr	r0, [r3, #12]
 8014d26:	b14c      	cbz	r4, 8014d3c <__assert_func+0x24>
 8014d28:	4b07      	ldr	r3, [pc, #28]	; (8014d48 <__assert_func+0x30>)
 8014d2a:	9100      	str	r1, [sp, #0]
 8014d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d30:	4906      	ldr	r1, [pc, #24]	; (8014d4c <__assert_func+0x34>)
 8014d32:	462b      	mov	r3, r5
 8014d34:	f000 fbca 	bl	80154cc <fiprintf>
 8014d38:	f000 fbda 	bl	80154f0 <abort>
 8014d3c:	4b04      	ldr	r3, [pc, #16]	; (8014d50 <__assert_func+0x38>)
 8014d3e:	461c      	mov	r4, r3
 8014d40:	e7f3      	b.n	8014d2a <__assert_func+0x12>
 8014d42:	bf00      	nop
 8014d44:	2000026c 	.word	0x2000026c
 8014d48:	08018ab2 	.word	0x08018ab2
 8014d4c:	08018abf 	.word	0x08018abf
 8014d50:	08018aed 	.word	0x08018aed

08014d54 <_calloc_r>:
 8014d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d56:	fba1 2402 	umull	r2, r4, r1, r2
 8014d5a:	b94c      	cbnz	r4, 8014d70 <_calloc_r+0x1c>
 8014d5c:	4611      	mov	r1, r2
 8014d5e:	9201      	str	r2, [sp, #4]
 8014d60:	f7fe f9c0 	bl	80130e4 <_malloc_r>
 8014d64:	9a01      	ldr	r2, [sp, #4]
 8014d66:	4605      	mov	r5, r0
 8014d68:	b930      	cbnz	r0, 8014d78 <_calloc_r+0x24>
 8014d6a:	4628      	mov	r0, r5
 8014d6c:	b003      	add	sp, #12
 8014d6e:	bd30      	pop	{r4, r5, pc}
 8014d70:	220c      	movs	r2, #12
 8014d72:	6002      	str	r2, [r0, #0]
 8014d74:	2500      	movs	r5, #0
 8014d76:	e7f8      	b.n	8014d6a <_calloc_r+0x16>
 8014d78:	4621      	mov	r1, r4
 8014d7a:	f7fd fa30 	bl	80121de <memset>
 8014d7e:	e7f4      	b.n	8014d6a <_calloc_r+0x16>

08014d80 <rshift>:
 8014d80:	6903      	ldr	r3, [r0, #16]
 8014d82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014d86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014d8e:	f100 0414 	add.w	r4, r0, #20
 8014d92:	dd45      	ble.n	8014e20 <rshift+0xa0>
 8014d94:	f011 011f 	ands.w	r1, r1, #31
 8014d98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014d9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014da0:	d10c      	bne.n	8014dbc <rshift+0x3c>
 8014da2:	f100 0710 	add.w	r7, r0, #16
 8014da6:	4629      	mov	r1, r5
 8014da8:	42b1      	cmp	r1, r6
 8014daa:	d334      	bcc.n	8014e16 <rshift+0x96>
 8014dac:	1a9b      	subs	r3, r3, r2
 8014dae:	009b      	lsls	r3, r3, #2
 8014db0:	1eea      	subs	r2, r5, #3
 8014db2:	4296      	cmp	r6, r2
 8014db4:	bf38      	it	cc
 8014db6:	2300      	movcc	r3, #0
 8014db8:	4423      	add	r3, r4
 8014dba:	e015      	b.n	8014de8 <rshift+0x68>
 8014dbc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014dc0:	f1c1 0820 	rsb	r8, r1, #32
 8014dc4:	40cf      	lsrs	r7, r1
 8014dc6:	f105 0e04 	add.w	lr, r5, #4
 8014dca:	46a1      	mov	r9, r4
 8014dcc:	4576      	cmp	r6, lr
 8014dce:	46f4      	mov	ip, lr
 8014dd0:	d815      	bhi.n	8014dfe <rshift+0x7e>
 8014dd2:	1a9a      	subs	r2, r3, r2
 8014dd4:	0092      	lsls	r2, r2, #2
 8014dd6:	3a04      	subs	r2, #4
 8014dd8:	3501      	adds	r5, #1
 8014dda:	42ae      	cmp	r6, r5
 8014ddc:	bf38      	it	cc
 8014dde:	2200      	movcc	r2, #0
 8014de0:	18a3      	adds	r3, r4, r2
 8014de2:	50a7      	str	r7, [r4, r2]
 8014de4:	b107      	cbz	r7, 8014de8 <rshift+0x68>
 8014de6:	3304      	adds	r3, #4
 8014de8:	1b1a      	subs	r2, r3, r4
 8014dea:	42a3      	cmp	r3, r4
 8014dec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014df0:	bf08      	it	eq
 8014df2:	2300      	moveq	r3, #0
 8014df4:	6102      	str	r2, [r0, #16]
 8014df6:	bf08      	it	eq
 8014df8:	6143      	streq	r3, [r0, #20]
 8014dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014dfe:	f8dc c000 	ldr.w	ip, [ip]
 8014e02:	fa0c fc08 	lsl.w	ip, ip, r8
 8014e06:	ea4c 0707 	orr.w	r7, ip, r7
 8014e0a:	f849 7b04 	str.w	r7, [r9], #4
 8014e0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014e12:	40cf      	lsrs	r7, r1
 8014e14:	e7da      	b.n	8014dcc <rshift+0x4c>
 8014e16:	f851 cb04 	ldr.w	ip, [r1], #4
 8014e1a:	f847 cf04 	str.w	ip, [r7, #4]!
 8014e1e:	e7c3      	b.n	8014da8 <rshift+0x28>
 8014e20:	4623      	mov	r3, r4
 8014e22:	e7e1      	b.n	8014de8 <rshift+0x68>

08014e24 <__hexdig_fun>:
 8014e24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014e28:	2b09      	cmp	r3, #9
 8014e2a:	d802      	bhi.n	8014e32 <__hexdig_fun+0xe>
 8014e2c:	3820      	subs	r0, #32
 8014e2e:	b2c0      	uxtb	r0, r0
 8014e30:	4770      	bx	lr
 8014e32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014e36:	2b05      	cmp	r3, #5
 8014e38:	d801      	bhi.n	8014e3e <__hexdig_fun+0x1a>
 8014e3a:	3847      	subs	r0, #71	; 0x47
 8014e3c:	e7f7      	b.n	8014e2e <__hexdig_fun+0xa>
 8014e3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014e42:	2b05      	cmp	r3, #5
 8014e44:	d801      	bhi.n	8014e4a <__hexdig_fun+0x26>
 8014e46:	3827      	subs	r0, #39	; 0x27
 8014e48:	e7f1      	b.n	8014e2e <__hexdig_fun+0xa>
 8014e4a:	2000      	movs	r0, #0
 8014e4c:	4770      	bx	lr
	...

08014e50 <__gethex>:
 8014e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e54:	4617      	mov	r7, r2
 8014e56:	680a      	ldr	r2, [r1, #0]
 8014e58:	b085      	sub	sp, #20
 8014e5a:	f102 0b02 	add.w	fp, r2, #2
 8014e5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014e62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014e66:	4681      	mov	r9, r0
 8014e68:	468a      	mov	sl, r1
 8014e6a:	9302      	str	r3, [sp, #8]
 8014e6c:	32fe      	adds	r2, #254	; 0xfe
 8014e6e:	eb02 030b 	add.w	r3, r2, fp
 8014e72:	46d8      	mov	r8, fp
 8014e74:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014e78:	9301      	str	r3, [sp, #4]
 8014e7a:	2830      	cmp	r0, #48	; 0x30
 8014e7c:	d0f7      	beq.n	8014e6e <__gethex+0x1e>
 8014e7e:	f7ff ffd1 	bl	8014e24 <__hexdig_fun>
 8014e82:	4604      	mov	r4, r0
 8014e84:	2800      	cmp	r0, #0
 8014e86:	d138      	bne.n	8014efa <__gethex+0xaa>
 8014e88:	49a7      	ldr	r1, [pc, #668]	; (8015128 <__gethex+0x2d8>)
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	4640      	mov	r0, r8
 8014e8e:	f7ff ff19 	bl	8014cc4 <strncmp>
 8014e92:	4606      	mov	r6, r0
 8014e94:	2800      	cmp	r0, #0
 8014e96:	d169      	bne.n	8014f6c <__gethex+0x11c>
 8014e98:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014e9c:	465d      	mov	r5, fp
 8014e9e:	f7ff ffc1 	bl	8014e24 <__hexdig_fun>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	d064      	beq.n	8014f70 <__gethex+0x120>
 8014ea6:	465a      	mov	r2, fp
 8014ea8:	7810      	ldrb	r0, [r2, #0]
 8014eaa:	2830      	cmp	r0, #48	; 0x30
 8014eac:	4690      	mov	r8, r2
 8014eae:	f102 0201 	add.w	r2, r2, #1
 8014eb2:	d0f9      	beq.n	8014ea8 <__gethex+0x58>
 8014eb4:	f7ff ffb6 	bl	8014e24 <__hexdig_fun>
 8014eb8:	2301      	movs	r3, #1
 8014eba:	fab0 f480 	clz	r4, r0
 8014ebe:	0964      	lsrs	r4, r4, #5
 8014ec0:	465e      	mov	r6, fp
 8014ec2:	9301      	str	r3, [sp, #4]
 8014ec4:	4642      	mov	r2, r8
 8014ec6:	4615      	mov	r5, r2
 8014ec8:	3201      	adds	r2, #1
 8014eca:	7828      	ldrb	r0, [r5, #0]
 8014ecc:	f7ff ffaa 	bl	8014e24 <__hexdig_fun>
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	d1f8      	bne.n	8014ec6 <__gethex+0x76>
 8014ed4:	4994      	ldr	r1, [pc, #592]	; (8015128 <__gethex+0x2d8>)
 8014ed6:	2201      	movs	r2, #1
 8014ed8:	4628      	mov	r0, r5
 8014eda:	f7ff fef3 	bl	8014cc4 <strncmp>
 8014ede:	b978      	cbnz	r0, 8014f00 <__gethex+0xb0>
 8014ee0:	b946      	cbnz	r6, 8014ef4 <__gethex+0xa4>
 8014ee2:	1c6e      	adds	r6, r5, #1
 8014ee4:	4632      	mov	r2, r6
 8014ee6:	4615      	mov	r5, r2
 8014ee8:	3201      	adds	r2, #1
 8014eea:	7828      	ldrb	r0, [r5, #0]
 8014eec:	f7ff ff9a 	bl	8014e24 <__hexdig_fun>
 8014ef0:	2800      	cmp	r0, #0
 8014ef2:	d1f8      	bne.n	8014ee6 <__gethex+0x96>
 8014ef4:	1b73      	subs	r3, r6, r5
 8014ef6:	009e      	lsls	r6, r3, #2
 8014ef8:	e004      	b.n	8014f04 <__gethex+0xb4>
 8014efa:	2400      	movs	r4, #0
 8014efc:	4626      	mov	r6, r4
 8014efe:	e7e1      	b.n	8014ec4 <__gethex+0x74>
 8014f00:	2e00      	cmp	r6, #0
 8014f02:	d1f7      	bne.n	8014ef4 <__gethex+0xa4>
 8014f04:	782b      	ldrb	r3, [r5, #0]
 8014f06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014f0a:	2b50      	cmp	r3, #80	; 0x50
 8014f0c:	d13d      	bne.n	8014f8a <__gethex+0x13a>
 8014f0e:	786b      	ldrb	r3, [r5, #1]
 8014f10:	2b2b      	cmp	r3, #43	; 0x2b
 8014f12:	d02f      	beq.n	8014f74 <__gethex+0x124>
 8014f14:	2b2d      	cmp	r3, #45	; 0x2d
 8014f16:	d031      	beq.n	8014f7c <__gethex+0x12c>
 8014f18:	1c69      	adds	r1, r5, #1
 8014f1a:	f04f 0b00 	mov.w	fp, #0
 8014f1e:	7808      	ldrb	r0, [r1, #0]
 8014f20:	f7ff ff80 	bl	8014e24 <__hexdig_fun>
 8014f24:	1e42      	subs	r2, r0, #1
 8014f26:	b2d2      	uxtb	r2, r2
 8014f28:	2a18      	cmp	r2, #24
 8014f2a:	d82e      	bhi.n	8014f8a <__gethex+0x13a>
 8014f2c:	f1a0 0210 	sub.w	r2, r0, #16
 8014f30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014f34:	f7ff ff76 	bl	8014e24 <__hexdig_fun>
 8014f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8014f3c:	fa5f fc8c 	uxtb.w	ip, ip
 8014f40:	f1bc 0f18 	cmp.w	ip, #24
 8014f44:	d91d      	bls.n	8014f82 <__gethex+0x132>
 8014f46:	f1bb 0f00 	cmp.w	fp, #0
 8014f4a:	d000      	beq.n	8014f4e <__gethex+0xfe>
 8014f4c:	4252      	negs	r2, r2
 8014f4e:	4416      	add	r6, r2
 8014f50:	f8ca 1000 	str.w	r1, [sl]
 8014f54:	b1dc      	cbz	r4, 8014f8e <__gethex+0x13e>
 8014f56:	9b01      	ldr	r3, [sp, #4]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	bf14      	ite	ne
 8014f5c:	f04f 0800 	movne.w	r8, #0
 8014f60:	f04f 0806 	moveq.w	r8, #6
 8014f64:	4640      	mov	r0, r8
 8014f66:	b005      	add	sp, #20
 8014f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f6c:	4645      	mov	r5, r8
 8014f6e:	4626      	mov	r6, r4
 8014f70:	2401      	movs	r4, #1
 8014f72:	e7c7      	b.n	8014f04 <__gethex+0xb4>
 8014f74:	f04f 0b00 	mov.w	fp, #0
 8014f78:	1ca9      	adds	r1, r5, #2
 8014f7a:	e7d0      	b.n	8014f1e <__gethex+0xce>
 8014f7c:	f04f 0b01 	mov.w	fp, #1
 8014f80:	e7fa      	b.n	8014f78 <__gethex+0x128>
 8014f82:	230a      	movs	r3, #10
 8014f84:	fb03 0002 	mla	r0, r3, r2, r0
 8014f88:	e7d0      	b.n	8014f2c <__gethex+0xdc>
 8014f8a:	4629      	mov	r1, r5
 8014f8c:	e7e0      	b.n	8014f50 <__gethex+0x100>
 8014f8e:	eba5 0308 	sub.w	r3, r5, r8
 8014f92:	3b01      	subs	r3, #1
 8014f94:	4621      	mov	r1, r4
 8014f96:	2b07      	cmp	r3, #7
 8014f98:	dc0a      	bgt.n	8014fb0 <__gethex+0x160>
 8014f9a:	4648      	mov	r0, r9
 8014f9c:	f7fe f92e 	bl	80131fc <_Balloc>
 8014fa0:	4604      	mov	r4, r0
 8014fa2:	b940      	cbnz	r0, 8014fb6 <__gethex+0x166>
 8014fa4:	4b61      	ldr	r3, [pc, #388]	; (801512c <__gethex+0x2dc>)
 8014fa6:	4602      	mov	r2, r0
 8014fa8:	21e4      	movs	r1, #228	; 0xe4
 8014faa:	4861      	ldr	r0, [pc, #388]	; (8015130 <__gethex+0x2e0>)
 8014fac:	f7ff feb4 	bl	8014d18 <__assert_func>
 8014fb0:	3101      	adds	r1, #1
 8014fb2:	105b      	asrs	r3, r3, #1
 8014fb4:	e7ef      	b.n	8014f96 <__gethex+0x146>
 8014fb6:	f100 0a14 	add.w	sl, r0, #20
 8014fba:	2300      	movs	r3, #0
 8014fbc:	495a      	ldr	r1, [pc, #360]	; (8015128 <__gethex+0x2d8>)
 8014fbe:	f8cd a004 	str.w	sl, [sp, #4]
 8014fc2:	469b      	mov	fp, r3
 8014fc4:	45a8      	cmp	r8, r5
 8014fc6:	d342      	bcc.n	801504e <__gethex+0x1fe>
 8014fc8:	9801      	ldr	r0, [sp, #4]
 8014fca:	f840 bb04 	str.w	fp, [r0], #4
 8014fce:	eba0 000a 	sub.w	r0, r0, sl
 8014fd2:	1080      	asrs	r0, r0, #2
 8014fd4:	6120      	str	r0, [r4, #16]
 8014fd6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014fda:	4658      	mov	r0, fp
 8014fdc:	f7fe fa00 	bl	80133e0 <__hi0bits>
 8014fe0:	683d      	ldr	r5, [r7, #0]
 8014fe2:	eba8 0000 	sub.w	r0, r8, r0
 8014fe6:	42a8      	cmp	r0, r5
 8014fe8:	dd59      	ble.n	801509e <__gethex+0x24e>
 8014fea:	eba0 0805 	sub.w	r8, r0, r5
 8014fee:	4641      	mov	r1, r8
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	f7fe fd8f 	bl	8013b14 <__any_on>
 8014ff6:	4683      	mov	fp, r0
 8014ff8:	b1b8      	cbz	r0, 801502a <__gethex+0x1da>
 8014ffa:	f108 33ff 	add.w	r3, r8, #4294967295
 8014ffe:	1159      	asrs	r1, r3, #5
 8015000:	f003 021f 	and.w	r2, r3, #31
 8015004:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015008:	f04f 0b01 	mov.w	fp, #1
 801500c:	fa0b f202 	lsl.w	r2, fp, r2
 8015010:	420a      	tst	r2, r1
 8015012:	d00a      	beq.n	801502a <__gethex+0x1da>
 8015014:	455b      	cmp	r3, fp
 8015016:	dd06      	ble.n	8015026 <__gethex+0x1d6>
 8015018:	f1a8 0102 	sub.w	r1, r8, #2
 801501c:	4620      	mov	r0, r4
 801501e:	f7fe fd79 	bl	8013b14 <__any_on>
 8015022:	2800      	cmp	r0, #0
 8015024:	d138      	bne.n	8015098 <__gethex+0x248>
 8015026:	f04f 0b02 	mov.w	fp, #2
 801502a:	4641      	mov	r1, r8
 801502c:	4620      	mov	r0, r4
 801502e:	f7ff fea7 	bl	8014d80 <rshift>
 8015032:	4446      	add	r6, r8
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	42b3      	cmp	r3, r6
 8015038:	da41      	bge.n	80150be <__gethex+0x26e>
 801503a:	4621      	mov	r1, r4
 801503c:	4648      	mov	r0, r9
 801503e:	f7fe f91d 	bl	801327c <_Bfree>
 8015042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015044:	2300      	movs	r3, #0
 8015046:	6013      	str	r3, [r2, #0]
 8015048:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801504c:	e78a      	b.n	8014f64 <__gethex+0x114>
 801504e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8015052:	2a2e      	cmp	r2, #46	; 0x2e
 8015054:	d014      	beq.n	8015080 <__gethex+0x230>
 8015056:	2b20      	cmp	r3, #32
 8015058:	d106      	bne.n	8015068 <__gethex+0x218>
 801505a:	9b01      	ldr	r3, [sp, #4]
 801505c:	f843 bb04 	str.w	fp, [r3], #4
 8015060:	f04f 0b00 	mov.w	fp, #0
 8015064:	9301      	str	r3, [sp, #4]
 8015066:	465b      	mov	r3, fp
 8015068:	7828      	ldrb	r0, [r5, #0]
 801506a:	9303      	str	r3, [sp, #12]
 801506c:	f7ff feda 	bl	8014e24 <__hexdig_fun>
 8015070:	9b03      	ldr	r3, [sp, #12]
 8015072:	f000 000f 	and.w	r0, r0, #15
 8015076:	4098      	lsls	r0, r3
 8015078:	ea4b 0b00 	orr.w	fp, fp, r0
 801507c:	3304      	adds	r3, #4
 801507e:	e7a1      	b.n	8014fc4 <__gethex+0x174>
 8015080:	45a8      	cmp	r8, r5
 8015082:	d8e8      	bhi.n	8015056 <__gethex+0x206>
 8015084:	2201      	movs	r2, #1
 8015086:	4628      	mov	r0, r5
 8015088:	9303      	str	r3, [sp, #12]
 801508a:	f7ff fe1b 	bl	8014cc4 <strncmp>
 801508e:	4926      	ldr	r1, [pc, #152]	; (8015128 <__gethex+0x2d8>)
 8015090:	9b03      	ldr	r3, [sp, #12]
 8015092:	2800      	cmp	r0, #0
 8015094:	d1df      	bne.n	8015056 <__gethex+0x206>
 8015096:	e795      	b.n	8014fc4 <__gethex+0x174>
 8015098:	f04f 0b03 	mov.w	fp, #3
 801509c:	e7c5      	b.n	801502a <__gethex+0x1da>
 801509e:	da0b      	bge.n	80150b8 <__gethex+0x268>
 80150a0:	eba5 0800 	sub.w	r8, r5, r0
 80150a4:	4621      	mov	r1, r4
 80150a6:	4642      	mov	r2, r8
 80150a8:	4648      	mov	r0, r9
 80150aa:	f7fe fb01 	bl	80136b0 <__lshift>
 80150ae:	eba6 0608 	sub.w	r6, r6, r8
 80150b2:	4604      	mov	r4, r0
 80150b4:	f100 0a14 	add.w	sl, r0, #20
 80150b8:	f04f 0b00 	mov.w	fp, #0
 80150bc:	e7ba      	b.n	8015034 <__gethex+0x1e4>
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	42b3      	cmp	r3, r6
 80150c2:	dd73      	ble.n	80151ac <__gethex+0x35c>
 80150c4:	1b9e      	subs	r6, r3, r6
 80150c6:	42b5      	cmp	r5, r6
 80150c8:	dc34      	bgt.n	8015134 <__gethex+0x2e4>
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	2b02      	cmp	r3, #2
 80150ce:	d023      	beq.n	8015118 <__gethex+0x2c8>
 80150d0:	2b03      	cmp	r3, #3
 80150d2:	d025      	beq.n	8015120 <__gethex+0x2d0>
 80150d4:	2b01      	cmp	r3, #1
 80150d6:	d115      	bne.n	8015104 <__gethex+0x2b4>
 80150d8:	42b5      	cmp	r5, r6
 80150da:	d113      	bne.n	8015104 <__gethex+0x2b4>
 80150dc:	2d01      	cmp	r5, #1
 80150de:	d10b      	bne.n	80150f8 <__gethex+0x2a8>
 80150e0:	9a02      	ldr	r2, [sp, #8]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6013      	str	r3, [r2, #0]
 80150e6:	2301      	movs	r3, #1
 80150e8:	6123      	str	r3, [r4, #16]
 80150ea:	f8ca 3000 	str.w	r3, [sl]
 80150ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150f0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80150f4:	601c      	str	r4, [r3, #0]
 80150f6:	e735      	b.n	8014f64 <__gethex+0x114>
 80150f8:	1e69      	subs	r1, r5, #1
 80150fa:	4620      	mov	r0, r4
 80150fc:	f7fe fd0a 	bl	8013b14 <__any_on>
 8015100:	2800      	cmp	r0, #0
 8015102:	d1ed      	bne.n	80150e0 <__gethex+0x290>
 8015104:	4621      	mov	r1, r4
 8015106:	4648      	mov	r0, r9
 8015108:	f7fe f8b8 	bl	801327c <_Bfree>
 801510c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801510e:	2300      	movs	r3, #0
 8015110:	6013      	str	r3, [r2, #0]
 8015112:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015116:	e725      	b.n	8014f64 <__gethex+0x114>
 8015118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801511a:	2b00      	cmp	r3, #0
 801511c:	d1f2      	bne.n	8015104 <__gethex+0x2b4>
 801511e:	e7df      	b.n	80150e0 <__gethex+0x290>
 8015120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015122:	2b00      	cmp	r3, #0
 8015124:	d1dc      	bne.n	80150e0 <__gethex+0x290>
 8015126:	e7ed      	b.n	8015104 <__gethex+0x2b4>
 8015128:	08018944 	.word	0x08018944
 801512c:	080187dd 	.word	0x080187dd
 8015130:	08018aee 	.word	0x08018aee
 8015134:	f106 38ff 	add.w	r8, r6, #4294967295
 8015138:	f1bb 0f00 	cmp.w	fp, #0
 801513c:	d133      	bne.n	80151a6 <__gethex+0x356>
 801513e:	f1b8 0f00 	cmp.w	r8, #0
 8015142:	d004      	beq.n	801514e <__gethex+0x2fe>
 8015144:	4641      	mov	r1, r8
 8015146:	4620      	mov	r0, r4
 8015148:	f7fe fce4 	bl	8013b14 <__any_on>
 801514c:	4683      	mov	fp, r0
 801514e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8015152:	2301      	movs	r3, #1
 8015154:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015158:	f008 081f 	and.w	r8, r8, #31
 801515c:	fa03 f308 	lsl.w	r3, r3, r8
 8015160:	4213      	tst	r3, r2
 8015162:	4631      	mov	r1, r6
 8015164:	4620      	mov	r0, r4
 8015166:	bf18      	it	ne
 8015168:	f04b 0b02 	orrne.w	fp, fp, #2
 801516c:	1bad      	subs	r5, r5, r6
 801516e:	f7ff fe07 	bl	8014d80 <rshift>
 8015172:	687e      	ldr	r6, [r7, #4]
 8015174:	f04f 0802 	mov.w	r8, #2
 8015178:	f1bb 0f00 	cmp.w	fp, #0
 801517c:	d04a      	beq.n	8015214 <__gethex+0x3c4>
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	2b02      	cmp	r3, #2
 8015182:	d016      	beq.n	80151b2 <__gethex+0x362>
 8015184:	2b03      	cmp	r3, #3
 8015186:	d018      	beq.n	80151ba <__gethex+0x36a>
 8015188:	2b01      	cmp	r3, #1
 801518a:	d109      	bne.n	80151a0 <__gethex+0x350>
 801518c:	f01b 0f02 	tst.w	fp, #2
 8015190:	d006      	beq.n	80151a0 <__gethex+0x350>
 8015192:	f8da 3000 	ldr.w	r3, [sl]
 8015196:	ea4b 0b03 	orr.w	fp, fp, r3
 801519a:	f01b 0f01 	tst.w	fp, #1
 801519e:	d10f      	bne.n	80151c0 <__gethex+0x370>
 80151a0:	f048 0810 	orr.w	r8, r8, #16
 80151a4:	e036      	b.n	8015214 <__gethex+0x3c4>
 80151a6:	f04f 0b01 	mov.w	fp, #1
 80151aa:	e7d0      	b.n	801514e <__gethex+0x2fe>
 80151ac:	f04f 0801 	mov.w	r8, #1
 80151b0:	e7e2      	b.n	8015178 <__gethex+0x328>
 80151b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151b4:	f1c3 0301 	rsb	r3, r3, #1
 80151b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80151ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d0ef      	beq.n	80151a0 <__gethex+0x350>
 80151c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80151c4:	f104 0214 	add.w	r2, r4, #20
 80151c8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80151cc:	9301      	str	r3, [sp, #4]
 80151ce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80151d2:	2300      	movs	r3, #0
 80151d4:	4694      	mov	ip, r2
 80151d6:	f852 1b04 	ldr.w	r1, [r2], #4
 80151da:	f1b1 3fff 	cmp.w	r1, #4294967295
 80151de:	d01e      	beq.n	801521e <__gethex+0x3ce>
 80151e0:	3101      	adds	r1, #1
 80151e2:	f8cc 1000 	str.w	r1, [ip]
 80151e6:	f1b8 0f02 	cmp.w	r8, #2
 80151ea:	f104 0214 	add.w	r2, r4, #20
 80151ee:	d13d      	bne.n	801526c <__gethex+0x41c>
 80151f0:	683b      	ldr	r3, [r7, #0]
 80151f2:	3b01      	subs	r3, #1
 80151f4:	42ab      	cmp	r3, r5
 80151f6:	d10b      	bne.n	8015210 <__gethex+0x3c0>
 80151f8:	1169      	asrs	r1, r5, #5
 80151fa:	2301      	movs	r3, #1
 80151fc:	f005 051f 	and.w	r5, r5, #31
 8015200:	fa03 f505 	lsl.w	r5, r3, r5
 8015204:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015208:	421d      	tst	r5, r3
 801520a:	bf18      	it	ne
 801520c:	f04f 0801 	movne.w	r8, #1
 8015210:	f048 0820 	orr.w	r8, r8, #32
 8015214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015216:	601c      	str	r4, [r3, #0]
 8015218:	9b02      	ldr	r3, [sp, #8]
 801521a:	601e      	str	r6, [r3, #0]
 801521c:	e6a2      	b.n	8014f64 <__gethex+0x114>
 801521e:	4290      	cmp	r0, r2
 8015220:	f842 3c04 	str.w	r3, [r2, #-4]
 8015224:	d8d6      	bhi.n	80151d4 <__gethex+0x384>
 8015226:	68a2      	ldr	r2, [r4, #8]
 8015228:	4593      	cmp	fp, r2
 801522a:	db17      	blt.n	801525c <__gethex+0x40c>
 801522c:	6861      	ldr	r1, [r4, #4]
 801522e:	4648      	mov	r0, r9
 8015230:	3101      	adds	r1, #1
 8015232:	f7fd ffe3 	bl	80131fc <_Balloc>
 8015236:	4682      	mov	sl, r0
 8015238:	b918      	cbnz	r0, 8015242 <__gethex+0x3f2>
 801523a:	4b1b      	ldr	r3, [pc, #108]	; (80152a8 <__gethex+0x458>)
 801523c:	4602      	mov	r2, r0
 801523e:	2184      	movs	r1, #132	; 0x84
 8015240:	e6b3      	b.n	8014faa <__gethex+0x15a>
 8015242:	6922      	ldr	r2, [r4, #16]
 8015244:	3202      	adds	r2, #2
 8015246:	f104 010c 	add.w	r1, r4, #12
 801524a:	0092      	lsls	r2, r2, #2
 801524c:	300c      	adds	r0, #12
 801524e:	f7fd f846 	bl	80122de <memcpy>
 8015252:	4621      	mov	r1, r4
 8015254:	4648      	mov	r0, r9
 8015256:	f7fe f811 	bl	801327c <_Bfree>
 801525a:	4654      	mov	r4, sl
 801525c:	6922      	ldr	r2, [r4, #16]
 801525e:	1c51      	adds	r1, r2, #1
 8015260:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015264:	6121      	str	r1, [r4, #16]
 8015266:	2101      	movs	r1, #1
 8015268:	6151      	str	r1, [r2, #20]
 801526a:	e7bc      	b.n	80151e6 <__gethex+0x396>
 801526c:	6921      	ldr	r1, [r4, #16]
 801526e:	4559      	cmp	r1, fp
 8015270:	dd0b      	ble.n	801528a <__gethex+0x43a>
 8015272:	2101      	movs	r1, #1
 8015274:	4620      	mov	r0, r4
 8015276:	f7ff fd83 	bl	8014d80 <rshift>
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	3601      	adds	r6, #1
 801527e:	42b3      	cmp	r3, r6
 8015280:	f6ff aedb 	blt.w	801503a <__gethex+0x1ea>
 8015284:	f04f 0801 	mov.w	r8, #1
 8015288:	e7c2      	b.n	8015210 <__gethex+0x3c0>
 801528a:	f015 051f 	ands.w	r5, r5, #31
 801528e:	d0f9      	beq.n	8015284 <__gethex+0x434>
 8015290:	9b01      	ldr	r3, [sp, #4]
 8015292:	441a      	add	r2, r3
 8015294:	f1c5 0520 	rsb	r5, r5, #32
 8015298:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801529c:	f7fe f8a0 	bl	80133e0 <__hi0bits>
 80152a0:	42a8      	cmp	r0, r5
 80152a2:	dbe6      	blt.n	8015272 <__gethex+0x422>
 80152a4:	e7ee      	b.n	8015284 <__gethex+0x434>
 80152a6:	bf00      	nop
 80152a8:	080187dd 	.word	0x080187dd

080152ac <L_shift>:
 80152ac:	f1c2 0208 	rsb	r2, r2, #8
 80152b0:	0092      	lsls	r2, r2, #2
 80152b2:	b570      	push	{r4, r5, r6, lr}
 80152b4:	f1c2 0620 	rsb	r6, r2, #32
 80152b8:	6843      	ldr	r3, [r0, #4]
 80152ba:	6804      	ldr	r4, [r0, #0]
 80152bc:	fa03 f506 	lsl.w	r5, r3, r6
 80152c0:	432c      	orrs	r4, r5
 80152c2:	40d3      	lsrs	r3, r2
 80152c4:	6004      	str	r4, [r0, #0]
 80152c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80152ca:	4288      	cmp	r0, r1
 80152cc:	d3f4      	bcc.n	80152b8 <L_shift+0xc>
 80152ce:	bd70      	pop	{r4, r5, r6, pc}

080152d0 <__match>:
 80152d0:	b530      	push	{r4, r5, lr}
 80152d2:	6803      	ldr	r3, [r0, #0]
 80152d4:	3301      	adds	r3, #1
 80152d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152da:	b914      	cbnz	r4, 80152e2 <__match+0x12>
 80152dc:	6003      	str	r3, [r0, #0]
 80152de:	2001      	movs	r0, #1
 80152e0:	bd30      	pop	{r4, r5, pc}
 80152e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80152ea:	2d19      	cmp	r5, #25
 80152ec:	bf98      	it	ls
 80152ee:	3220      	addls	r2, #32
 80152f0:	42a2      	cmp	r2, r4
 80152f2:	d0f0      	beq.n	80152d6 <__match+0x6>
 80152f4:	2000      	movs	r0, #0
 80152f6:	e7f3      	b.n	80152e0 <__match+0x10>

080152f8 <__hexnan>:
 80152f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152fc:	680b      	ldr	r3, [r1, #0]
 80152fe:	6801      	ldr	r1, [r0, #0]
 8015300:	115e      	asrs	r6, r3, #5
 8015302:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015306:	f013 031f 	ands.w	r3, r3, #31
 801530a:	b087      	sub	sp, #28
 801530c:	bf18      	it	ne
 801530e:	3604      	addne	r6, #4
 8015310:	2500      	movs	r5, #0
 8015312:	1f37      	subs	r7, r6, #4
 8015314:	4682      	mov	sl, r0
 8015316:	4690      	mov	r8, r2
 8015318:	9301      	str	r3, [sp, #4]
 801531a:	f846 5c04 	str.w	r5, [r6, #-4]
 801531e:	46b9      	mov	r9, r7
 8015320:	463c      	mov	r4, r7
 8015322:	9502      	str	r5, [sp, #8]
 8015324:	46ab      	mov	fp, r5
 8015326:	784a      	ldrb	r2, [r1, #1]
 8015328:	1c4b      	adds	r3, r1, #1
 801532a:	9303      	str	r3, [sp, #12]
 801532c:	b342      	cbz	r2, 8015380 <__hexnan+0x88>
 801532e:	4610      	mov	r0, r2
 8015330:	9105      	str	r1, [sp, #20]
 8015332:	9204      	str	r2, [sp, #16]
 8015334:	f7ff fd76 	bl	8014e24 <__hexdig_fun>
 8015338:	2800      	cmp	r0, #0
 801533a:	d14f      	bne.n	80153dc <__hexnan+0xe4>
 801533c:	9a04      	ldr	r2, [sp, #16]
 801533e:	9905      	ldr	r1, [sp, #20]
 8015340:	2a20      	cmp	r2, #32
 8015342:	d818      	bhi.n	8015376 <__hexnan+0x7e>
 8015344:	9b02      	ldr	r3, [sp, #8]
 8015346:	459b      	cmp	fp, r3
 8015348:	dd13      	ble.n	8015372 <__hexnan+0x7a>
 801534a:	454c      	cmp	r4, r9
 801534c:	d206      	bcs.n	801535c <__hexnan+0x64>
 801534e:	2d07      	cmp	r5, #7
 8015350:	dc04      	bgt.n	801535c <__hexnan+0x64>
 8015352:	462a      	mov	r2, r5
 8015354:	4649      	mov	r1, r9
 8015356:	4620      	mov	r0, r4
 8015358:	f7ff ffa8 	bl	80152ac <L_shift>
 801535c:	4544      	cmp	r4, r8
 801535e:	d950      	bls.n	8015402 <__hexnan+0x10a>
 8015360:	2300      	movs	r3, #0
 8015362:	f1a4 0904 	sub.w	r9, r4, #4
 8015366:	f844 3c04 	str.w	r3, [r4, #-4]
 801536a:	f8cd b008 	str.w	fp, [sp, #8]
 801536e:	464c      	mov	r4, r9
 8015370:	461d      	mov	r5, r3
 8015372:	9903      	ldr	r1, [sp, #12]
 8015374:	e7d7      	b.n	8015326 <__hexnan+0x2e>
 8015376:	2a29      	cmp	r2, #41	; 0x29
 8015378:	d155      	bne.n	8015426 <__hexnan+0x12e>
 801537a:	3102      	adds	r1, #2
 801537c:	f8ca 1000 	str.w	r1, [sl]
 8015380:	f1bb 0f00 	cmp.w	fp, #0
 8015384:	d04f      	beq.n	8015426 <__hexnan+0x12e>
 8015386:	454c      	cmp	r4, r9
 8015388:	d206      	bcs.n	8015398 <__hexnan+0xa0>
 801538a:	2d07      	cmp	r5, #7
 801538c:	dc04      	bgt.n	8015398 <__hexnan+0xa0>
 801538e:	462a      	mov	r2, r5
 8015390:	4649      	mov	r1, r9
 8015392:	4620      	mov	r0, r4
 8015394:	f7ff ff8a 	bl	80152ac <L_shift>
 8015398:	4544      	cmp	r4, r8
 801539a:	d934      	bls.n	8015406 <__hexnan+0x10e>
 801539c:	f1a8 0204 	sub.w	r2, r8, #4
 80153a0:	4623      	mov	r3, r4
 80153a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80153a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80153aa:	429f      	cmp	r7, r3
 80153ac:	d2f9      	bcs.n	80153a2 <__hexnan+0xaa>
 80153ae:	1b3b      	subs	r3, r7, r4
 80153b0:	f023 0303 	bic.w	r3, r3, #3
 80153b4:	3304      	adds	r3, #4
 80153b6:	3e03      	subs	r6, #3
 80153b8:	3401      	adds	r4, #1
 80153ba:	42a6      	cmp	r6, r4
 80153bc:	bf38      	it	cc
 80153be:	2304      	movcc	r3, #4
 80153c0:	4443      	add	r3, r8
 80153c2:	2200      	movs	r2, #0
 80153c4:	f843 2b04 	str.w	r2, [r3], #4
 80153c8:	429f      	cmp	r7, r3
 80153ca:	d2fb      	bcs.n	80153c4 <__hexnan+0xcc>
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	b91b      	cbnz	r3, 80153d8 <__hexnan+0xe0>
 80153d0:	4547      	cmp	r7, r8
 80153d2:	d126      	bne.n	8015422 <__hexnan+0x12a>
 80153d4:	2301      	movs	r3, #1
 80153d6:	603b      	str	r3, [r7, #0]
 80153d8:	2005      	movs	r0, #5
 80153da:	e025      	b.n	8015428 <__hexnan+0x130>
 80153dc:	3501      	adds	r5, #1
 80153de:	2d08      	cmp	r5, #8
 80153e0:	f10b 0b01 	add.w	fp, fp, #1
 80153e4:	dd06      	ble.n	80153f4 <__hexnan+0xfc>
 80153e6:	4544      	cmp	r4, r8
 80153e8:	d9c3      	bls.n	8015372 <__hexnan+0x7a>
 80153ea:	2300      	movs	r3, #0
 80153ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80153f0:	2501      	movs	r5, #1
 80153f2:	3c04      	subs	r4, #4
 80153f4:	6822      	ldr	r2, [r4, #0]
 80153f6:	f000 000f 	and.w	r0, r0, #15
 80153fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80153fe:	6020      	str	r0, [r4, #0]
 8015400:	e7b7      	b.n	8015372 <__hexnan+0x7a>
 8015402:	2508      	movs	r5, #8
 8015404:	e7b5      	b.n	8015372 <__hexnan+0x7a>
 8015406:	9b01      	ldr	r3, [sp, #4]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d0df      	beq.n	80153cc <__hexnan+0xd4>
 801540c:	f1c3 0320 	rsb	r3, r3, #32
 8015410:	f04f 32ff 	mov.w	r2, #4294967295
 8015414:	40da      	lsrs	r2, r3
 8015416:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801541a:	4013      	ands	r3, r2
 801541c:	f846 3c04 	str.w	r3, [r6, #-4]
 8015420:	e7d4      	b.n	80153cc <__hexnan+0xd4>
 8015422:	3f04      	subs	r7, #4
 8015424:	e7d2      	b.n	80153cc <__hexnan+0xd4>
 8015426:	2004      	movs	r0, #4
 8015428:	b007      	add	sp, #28
 801542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801542e <__ascii_mbtowc>:
 801542e:	b082      	sub	sp, #8
 8015430:	b901      	cbnz	r1, 8015434 <__ascii_mbtowc+0x6>
 8015432:	a901      	add	r1, sp, #4
 8015434:	b142      	cbz	r2, 8015448 <__ascii_mbtowc+0x1a>
 8015436:	b14b      	cbz	r3, 801544c <__ascii_mbtowc+0x1e>
 8015438:	7813      	ldrb	r3, [r2, #0]
 801543a:	600b      	str	r3, [r1, #0]
 801543c:	7812      	ldrb	r2, [r2, #0]
 801543e:	1e10      	subs	r0, r2, #0
 8015440:	bf18      	it	ne
 8015442:	2001      	movne	r0, #1
 8015444:	b002      	add	sp, #8
 8015446:	4770      	bx	lr
 8015448:	4610      	mov	r0, r2
 801544a:	e7fb      	b.n	8015444 <__ascii_mbtowc+0x16>
 801544c:	f06f 0001 	mvn.w	r0, #1
 8015450:	e7f8      	b.n	8015444 <__ascii_mbtowc+0x16>

08015452 <_realloc_r>:
 8015452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015456:	4680      	mov	r8, r0
 8015458:	4614      	mov	r4, r2
 801545a:	460e      	mov	r6, r1
 801545c:	b921      	cbnz	r1, 8015468 <_realloc_r+0x16>
 801545e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015462:	4611      	mov	r1, r2
 8015464:	f7fd be3e 	b.w	80130e4 <_malloc_r>
 8015468:	b92a      	cbnz	r2, 8015476 <_realloc_r+0x24>
 801546a:	f7fd fdc7 	bl	8012ffc <_free_r>
 801546e:	4625      	mov	r5, r4
 8015470:	4628      	mov	r0, r5
 8015472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015476:	f000 f842 	bl	80154fe <_malloc_usable_size_r>
 801547a:	4284      	cmp	r4, r0
 801547c:	4607      	mov	r7, r0
 801547e:	d802      	bhi.n	8015486 <_realloc_r+0x34>
 8015480:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015484:	d812      	bhi.n	80154ac <_realloc_r+0x5a>
 8015486:	4621      	mov	r1, r4
 8015488:	4640      	mov	r0, r8
 801548a:	f7fd fe2b 	bl	80130e4 <_malloc_r>
 801548e:	4605      	mov	r5, r0
 8015490:	2800      	cmp	r0, #0
 8015492:	d0ed      	beq.n	8015470 <_realloc_r+0x1e>
 8015494:	42bc      	cmp	r4, r7
 8015496:	4622      	mov	r2, r4
 8015498:	4631      	mov	r1, r6
 801549a:	bf28      	it	cs
 801549c:	463a      	movcs	r2, r7
 801549e:	f7fc ff1e 	bl	80122de <memcpy>
 80154a2:	4631      	mov	r1, r6
 80154a4:	4640      	mov	r0, r8
 80154a6:	f7fd fda9 	bl	8012ffc <_free_r>
 80154aa:	e7e1      	b.n	8015470 <_realloc_r+0x1e>
 80154ac:	4635      	mov	r5, r6
 80154ae:	e7df      	b.n	8015470 <_realloc_r+0x1e>

080154b0 <__ascii_wctomb>:
 80154b0:	b149      	cbz	r1, 80154c6 <__ascii_wctomb+0x16>
 80154b2:	2aff      	cmp	r2, #255	; 0xff
 80154b4:	bf85      	ittet	hi
 80154b6:	238a      	movhi	r3, #138	; 0x8a
 80154b8:	6003      	strhi	r3, [r0, #0]
 80154ba:	700a      	strbls	r2, [r1, #0]
 80154bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80154c0:	bf98      	it	ls
 80154c2:	2001      	movls	r0, #1
 80154c4:	4770      	bx	lr
 80154c6:	4608      	mov	r0, r1
 80154c8:	4770      	bx	lr
	...

080154cc <fiprintf>:
 80154cc:	b40e      	push	{r1, r2, r3}
 80154ce:	b503      	push	{r0, r1, lr}
 80154d0:	4601      	mov	r1, r0
 80154d2:	ab03      	add	r3, sp, #12
 80154d4:	4805      	ldr	r0, [pc, #20]	; (80154ec <fiprintf+0x20>)
 80154d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80154da:	6800      	ldr	r0, [r0, #0]
 80154dc:	9301      	str	r3, [sp, #4]
 80154de:	f000 f83f 	bl	8015560 <_vfiprintf_r>
 80154e2:	b002      	add	sp, #8
 80154e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80154e8:	b003      	add	sp, #12
 80154ea:	4770      	bx	lr
 80154ec:	2000026c 	.word	0x2000026c

080154f0 <abort>:
 80154f0:	b508      	push	{r3, lr}
 80154f2:	2006      	movs	r0, #6
 80154f4:	f000 fa0c 	bl	8015910 <raise>
 80154f8:	2001      	movs	r0, #1
 80154fa:	f7f0 fc85 	bl	8005e08 <_exit>

080154fe <_malloc_usable_size_r>:
 80154fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015502:	1f18      	subs	r0, r3, #4
 8015504:	2b00      	cmp	r3, #0
 8015506:	bfbc      	itt	lt
 8015508:	580b      	ldrlt	r3, [r1, r0]
 801550a:	18c0      	addlt	r0, r0, r3
 801550c:	4770      	bx	lr

0801550e <__sfputc_r>:
 801550e:	6893      	ldr	r3, [r2, #8]
 8015510:	3b01      	subs	r3, #1
 8015512:	2b00      	cmp	r3, #0
 8015514:	b410      	push	{r4}
 8015516:	6093      	str	r3, [r2, #8]
 8015518:	da08      	bge.n	801552c <__sfputc_r+0x1e>
 801551a:	6994      	ldr	r4, [r2, #24]
 801551c:	42a3      	cmp	r3, r4
 801551e:	db01      	blt.n	8015524 <__sfputc_r+0x16>
 8015520:	290a      	cmp	r1, #10
 8015522:	d103      	bne.n	801552c <__sfputc_r+0x1e>
 8015524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015528:	f000 b934 	b.w	8015794 <__swbuf_r>
 801552c:	6813      	ldr	r3, [r2, #0]
 801552e:	1c58      	adds	r0, r3, #1
 8015530:	6010      	str	r0, [r2, #0]
 8015532:	7019      	strb	r1, [r3, #0]
 8015534:	4608      	mov	r0, r1
 8015536:	f85d 4b04 	ldr.w	r4, [sp], #4
 801553a:	4770      	bx	lr

0801553c <__sfputs_r>:
 801553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801553e:	4606      	mov	r6, r0
 8015540:	460f      	mov	r7, r1
 8015542:	4614      	mov	r4, r2
 8015544:	18d5      	adds	r5, r2, r3
 8015546:	42ac      	cmp	r4, r5
 8015548:	d101      	bne.n	801554e <__sfputs_r+0x12>
 801554a:	2000      	movs	r0, #0
 801554c:	e007      	b.n	801555e <__sfputs_r+0x22>
 801554e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015552:	463a      	mov	r2, r7
 8015554:	4630      	mov	r0, r6
 8015556:	f7ff ffda 	bl	801550e <__sfputc_r>
 801555a:	1c43      	adds	r3, r0, #1
 801555c:	d1f3      	bne.n	8015546 <__sfputs_r+0xa>
 801555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015560 <_vfiprintf_r>:
 8015560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015564:	460d      	mov	r5, r1
 8015566:	b09d      	sub	sp, #116	; 0x74
 8015568:	4614      	mov	r4, r2
 801556a:	4698      	mov	r8, r3
 801556c:	4606      	mov	r6, r0
 801556e:	b118      	cbz	r0, 8015578 <_vfiprintf_r+0x18>
 8015570:	6a03      	ldr	r3, [r0, #32]
 8015572:	b90b      	cbnz	r3, 8015578 <_vfiprintf_r+0x18>
 8015574:	f7fc fd9a 	bl	80120ac <__sinit>
 8015578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801557a:	07d9      	lsls	r1, r3, #31
 801557c:	d405      	bmi.n	801558a <_vfiprintf_r+0x2a>
 801557e:	89ab      	ldrh	r3, [r5, #12]
 8015580:	059a      	lsls	r2, r3, #22
 8015582:	d402      	bmi.n	801558a <_vfiprintf_r+0x2a>
 8015584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015586:	f7fc fea8 	bl	80122da <__retarget_lock_acquire_recursive>
 801558a:	89ab      	ldrh	r3, [r5, #12]
 801558c:	071b      	lsls	r3, r3, #28
 801558e:	d501      	bpl.n	8015594 <_vfiprintf_r+0x34>
 8015590:	692b      	ldr	r3, [r5, #16]
 8015592:	b99b      	cbnz	r3, 80155bc <_vfiprintf_r+0x5c>
 8015594:	4629      	mov	r1, r5
 8015596:	4630      	mov	r0, r6
 8015598:	f000 f93a 	bl	8015810 <__swsetup_r>
 801559c:	b170      	cbz	r0, 80155bc <_vfiprintf_r+0x5c>
 801559e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80155a0:	07dc      	lsls	r4, r3, #31
 80155a2:	d504      	bpl.n	80155ae <_vfiprintf_r+0x4e>
 80155a4:	f04f 30ff 	mov.w	r0, #4294967295
 80155a8:	b01d      	add	sp, #116	; 0x74
 80155aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ae:	89ab      	ldrh	r3, [r5, #12]
 80155b0:	0598      	lsls	r0, r3, #22
 80155b2:	d4f7      	bmi.n	80155a4 <_vfiprintf_r+0x44>
 80155b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80155b6:	f7fc fe91 	bl	80122dc <__retarget_lock_release_recursive>
 80155ba:	e7f3      	b.n	80155a4 <_vfiprintf_r+0x44>
 80155bc:	2300      	movs	r3, #0
 80155be:	9309      	str	r3, [sp, #36]	; 0x24
 80155c0:	2320      	movs	r3, #32
 80155c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80155c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80155ca:	2330      	movs	r3, #48	; 0x30
 80155cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015780 <_vfiprintf_r+0x220>
 80155d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80155d4:	f04f 0901 	mov.w	r9, #1
 80155d8:	4623      	mov	r3, r4
 80155da:	469a      	mov	sl, r3
 80155dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155e0:	b10a      	cbz	r2, 80155e6 <_vfiprintf_r+0x86>
 80155e2:	2a25      	cmp	r2, #37	; 0x25
 80155e4:	d1f9      	bne.n	80155da <_vfiprintf_r+0x7a>
 80155e6:	ebba 0b04 	subs.w	fp, sl, r4
 80155ea:	d00b      	beq.n	8015604 <_vfiprintf_r+0xa4>
 80155ec:	465b      	mov	r3, fp
 80155ee:	4622      	mov	r2, r4
 80155f0:	4629      	mov	r1, r5
 80155f2:	4630      	mov	r0, r6
 80155f4:	f7ff ffa2 	bl	801553c <__sfputs_r>
 80155f8:	3001      	adds	r0, #1
 80155fa:	f000 80a9 	beq.w	8015750 <_vfiprintf_r+0x1f0>
 80155fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015600:	445a      	add	r2, fp
 8015602:	9209      	str	r2, [sp, #36]	; 0x24
 8015604:	f89a 3000 	ldrb.w	r3, [sl]
 8015608:	2b00      	cmp	r3, #0
 801560a:	f000 80a1 	beq.w	8015750 <_vfiprintf_r+0x1f0>
 801560e:	2300      	movs	r3, #0
 8015610:	f04f 32ff 	mov.w	r2, #4294967295
 8015614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015618:	f10a 0a01 	add.w	sl, sl, #1
 801561c:	9304      	str	r3, [sp, #16]
 801561e:	9307      	str	r3, [sp, #28]
 8015620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015624:	931a      	str	r3, [sp, #104]	; 0x68
 8015626:	4654      	mov	r4, sl
 8015628:	2205      	movs	r2, #5
 801562a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801562e:	4854      	ldr	r0, [pc, #336]	; (8015780 <_vfiprintf_r+0x220>)
 8015630:	f7ea fdf6 	bl	8000220 <memchr>
 8015634:	9a04      	ldr	r2, [sp, #16]
 8015636:	b9d8      	cbnz	r0, 8015670 <_vfiprintf_r+0x110>
 8015638:	06d1      	lsls	r1, r2, #27
 801563a:	bf44      	itt	mi
 801563c:	2320      	movmi	r3, #32
 801563e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015642:	0713      	lsls	r3, r2, #28
 8015644:	bf44      	itt	mi
 8015646:	232b      	movmi	r3, #43	; 0x2b
 8015648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801564c:	f89a 3000 	ldrb.w	r3, [sl]
 8015650:	2b2a      	cmp	r3, #42	; 0x2a
 8015652:	d015      	beq.n	8015680 <_vfiprintf_r+0x120>
 8015654:	9a07      	ldr	r2, [sp, #28]
 8015656:	4654      	mov	r4, sl
 8015658:	2000      	movs	r0, #0
 801565a:	f04f 0c0a 	mov.w	ip, #10
 801565e:	4621      	mov	r1, r4
 8015660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015664:	3b30      	subs	r3, #48	; 0x30
 8015666:	2b09      	cmp	r3, #9
 8015668:	d94d      	bls.n	8015706 <_vfiprintf_r+0x1a6>
 801566a:	b1b0      	cbz	r0, 801569a <_vfiprintf_r+0x13a>
 801566c:	9207      	str	r2, [sp, #28]
 801566e:	e014      	b.n	801569a <_vfiprintf_r+0x13a>
 8015670:	eba0 0308 	sub.w	r3, r0, r8
 8015674:	fa09 f303 	lsl.w	r3, r9, r3
 8015678:	4313      	orrs	r3, r2
 801567a:	9304      	str	r3, [sp, #16]
 801567c:	46a2      	mov	sl, r4
 801567e:	e7d2      	b.n	8015626 <_vfiprintf_r+0xc6>
 8015680:	9b03      	ldr	r3, [sp, #12]
 8015682:	1d19      	adds	r1, r3, #4
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	9103      	str	r1, [sp, #12]
 8015688:	2b00      	cmp	r3, #0
 801568a:	bfbb      	ittet	lt
 801568c:	425b      	neglt	r3, r3
 801568e:	f042 0202 	orrlt.w	r2, r2, #2
 8015692:	9307      	strge	r3, [sp, #28]
 8015694:	9307      	strlt	r3, [sp, #28]
 8015696:	bfb8      	it	lt
 8015698:	9204      	strlt	r2, [sp, #16]
 801569a:	7823      	ldrb	r3, [r4, #0]
 801569c:	2b2e      	cmp	r3, #46	; 0x2e
 801569e:	d10c      	bne.n	80156ba <_vfiprintf_r+0x15a>
 80156a0:	7863      	ldrb	r3, [r4, #1]
 80156a2:	2b2a      	cmp	r3, #42	; 0x2a
 80156a4:	d134      	bne.n	8015710 <_vfiprintf_r+0x1b0>
 80156a6:	9b03      	ldr	r3, [sp, #12]
 80156a8:	1d1a      	adds	r2, r3, #4
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	9203      	str	r2, [sp, #12]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	bfb8      	it	lt
 80156b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80156b6:	3402      	adds	r4, #2
 80156b8:	9305      	str	r3, [sp, #20]
 80156ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015790 <_vfiprintf_r+0x230>
 80156be:	7821      	ldrb	r1, [r4, #0]
 80156c0:	2203      	movs	r2, #3
 80156c2:	4650      	mov	r0, sl
 80156c4:	f7ea fdac 	bl	8000220 <memchr>
 80156c8:	b138      	cbz	r0, 80156da <_vfiprintf_r+0x17a>
 80156ca:	9b04      	ldr	r3, [sp, #16]
 80156cc:	eba0 000a 	sub.w	r0, r0, sl
 80156d0:	2240      	movs	r2, #64	; 0x40
 80156d2:	4082      	lsls	r2, r0
 80156d4:	4313      	orrs	r3, r2
 80156d6:	3401      	adds	r4, #1
 80156d8:	9304      	str	r3, [sp, #16]
 80156da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156de:	4829      	ldr	r0, [pc, #164]	; (8015784 <_vfiprintf_r+0x224>)
 80156e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80156e4:	2206      	movs	r2, #6
 80156e6:	f7ea fd9b 	bl	8000220 <memchr>
 80156ea:	2800      	cmp	r0, #0
 80156ec:	d03f      	beq.n	801576e <_vfiprintf_r+0x20e>
 80156ee:	4b26      	ldr	r3, [pc, #152]	; (8015788 <_vfiprintf_r+0x228>)
 80156f0:	bb1b      	cbnz	r3, 801573a <_vfiprintf_r+0x1da>
 80156f2:	9b03      	ldr	r3, [sp, #12]
 80156f4:	3307      	adds	r3, #7
 80156f6:	f023 0307 	bic.w	r3, r3, #7
 80156fa:	3308      	adds	r3, #8
 80156fc:	9303      	str	r3, [sp, #12]
 80156fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015700:	443b      	add	r3, r7
 8015702:	9309      	str	r3, [sp, #36]	; 0x24
 8015704:	e768      	b.n	80155d8 <_vfiprintf_r+0x78>
 8015706:	fb0c 3202 	mla	r2, ip, r2, r3
 801570a:	460c      	mov	r4, r1
 801570c:	2001      	movs	r0, #1
 801570e:	e7a6      	b.n	801565e <_vfiprintf_r+0xfe>
 8015710:	2300      	movs	r3, #0
 8015712:	3401      	adds	r4, #1
 8015714:	9305      	str	r3, [sp, #20]
 8015716:	4619      	mov	r1, r3
 8015718:	f04f 0c0a 	mov.w	ip, #10
 801571c:	4620      	mov	r0, r4
 801571e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015722:	3a30      	subs	r2, #48	; 0x30
 8015724:	2a09      	cmp	r2, #9
 8015726:	d903      	bls.n	8015730 <_vfiprintf_r+0x1d0>
 8015728:	2b00      	cmp	r3, #0
 801572a:	d0c6      	beq.n	80156ba <_vfiprintf_r+0x15a>
 801572c:	9105      	str	r1, [sp, #20]
 801572e:	e7c4      	b.n	80156ba <_vfiprintf_r+0x15a>
 8015730:	fb0c 2101 	mla	r1, ip, r1, r2
 8015734:	4604      	mov	r4, r0
 8015736:	2301      	movs	r3, #1
 8015738:	e7f0      	b.n	801571c <_vfiprintf_r+0x1bc>
 801573a:	ab03      	add	r3, sp, #12
 801573c:	9300      	str	r3, [sp, #0]
 801573e:	462a      	mov	r2, r5
 8015740:	4b12      	ldr	r3, [pc, #72]	; (801578c <_vfiprintf_r+0x22c>)
 8015742:	a904      	add	r1, sp, #16
 8015744:	4630      	mov	r0, r6
 8015746:	f7fb fe4f 	bl	80113e8 <_printf_float>
 801574a:	4607      	mov	r7, r0
 801574c:	1c78      	adds	r0, r7, #1
 801574e:	d1d6      	bne.n	80156fe <_vfiprintf_r+0x19e>
 8015750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015752:	07d9      	lsls	r1, r3, #31
 8015754:	d405      	bmi.n	8015762 <_vfiprintf_r+0x202>
 8015756:	89ab      	ldrh	r3, [r5, #12]
 8015758:	059a      	lsls	r2, r3, #22
 801575a:	d402      	bmi.n	8015762 <_vfiprintf_r+0x202>
 801575c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801575e:	f7fc fdbd 	bl	80122dc <__retarget_lock_release_recursive>
 8015762:	89ab      	ldrh	r3, [r5, #12]
 8015764:	065b      	lsls	r3, r3, #25
 8015766:	f53f af1d 	bmi.w	80155a4 <_vfiprintf_r+0x44>
 801576a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801576c:	e71c      	b.n	80155a8 <_vfiprintf_r+0x48>
 801576e:	ab03      	add	r3, sp, #12
 8015770:	9300      	str	r3, [sp, #0]
 8015772:	462a      	mov	r2, r5
 8015774:	4b05      	ldr	r3, [pc, #20]	; (801578c <_vfiprintf_r+0x22c>)
 8015776:	a904      	add	r1, sp, #16
 8015778:	4630      	mov	r0, r6
 801577a:	f7fc f8d9 	bl	8011930 <_printf_i>
 801577e:	e7e4      	b.n	801574a <_vfiprintf_r+0x1ea>
 8015780:	08018a99 	.word	0x08018a99
 8015784:	08018aa3 	.word	0x08018aa3
 8015788:	080113e9 	.word	0x080113e9
 801578c:	0801553d 	.word	0x0801553d
 8015790:	08018a9f 	.word	0x08018a9f

08015794 <__swbuf_r>:
 8015794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015796:	460e      	mov	r6, r1
 8015798:	4614      	mov	r4, r2
 801579a:	4605      	mov	r5, r0
 801579c:	b118      	cbz	r0, 80157a6 <__swbuf_r+0x12>
 801579e:	6a03      	ldr	r3, [r0, #32]
 80157a0:	b90b      	cbnz	r3, 80157a6 <__swbuf_r+0x12>
 80157a2:	f7fc fc83 	bl	80120ac <__sinit>
 80157a6:	69a3      	ldr	r3, [r4, #24]
 80157a8:	60a3      	str	r3, [r4, #8]
 80157aa:	89a3      	ldrh	r3, [r4, #12]
 80157ac:	071a      	lsls	r2, r3, #28
 80157ae:	d525      	bpl.n	80157fc <__swbuf_r+0x68>
 80157b0:	6923      	ldr	r3, [r4, #16]
 80157b2:	b31b      	cbz	r3, 80157fc <__swbuf_r+0x68>
 80157b4:	6823      	ldr	r3, [r4, #0]
 80157b6:	6922      	ldr	r2, [r4, #16]
 80157b8:	1a98      	subs	r0, r3, r2
 80157ba:	6963      	ldr	r3, [r4, #20]
 80157bc:	b2f6      	uxtb	r6, r6
 80157be:	4283      	cmp	r3, r0
 80157c0:	4637      	mov	r7, r6
 80157c2:	dc04      	bgt.n	80157ce <__swbuf_r+0x3a>
 80157c4:	4621      	mov	r1, r4
 80157c6:	4628      	mov	r0, r5
 80157c8:	f7ff fa3a 	bl	8014c40 <_fflush_r>
 80157cc:	b9e0      	cbnz	r0, 8015808 <__swbuf_r+0x74>
 80157ce:	68a3      	ldr	r3, [r4, #8]
 80157d0:	3b01      	subs	r3, #1
 80157d2:	60a3      	str	r3, [r4, #8]
 80157d4:	6823      	ldr	r3, [r4, #0]
 80157d6:	1c5a      	adds	r2, r3, #1
 80157d8:	6022      	str	r2, [r4, #0]
 80157da:	701e      	strb	r6, [r3, #0]
 80157dc:	6962      	ldr	r2, [r4, #20]
 80157de:	1c43      	adds	r3, r0, #1
 80157e0:	429a      	cmp	r2, r3
 80157e2:	d004      	beq.n	80157ee <__swbuf_r+0x5a>
 80157e4:	89a3      	ldrh	r3, [r4, #12]
 80157e6:	07db      	lsls	r3, r3, #31
 80157e8:	d506      	bpl.n	80157f8 <__swbuf_r+0x64>
 80157ea:	2e0a      	cmp	r6, #10
 80157ec:	d104      	bne.n	80157f8 <__swbuf_r+0x64>
 80157ee:	4621      	mov	r1, r4
 80157f0:	4628      	mov	r0, r5
 80157f2:	f7ff fa25 	bl	8014c40 <_fflush_r>
 80157f6:	b938      	cbnz	r0, 8015808 <__swbuf_r+0x74>
 80157f8:	4638      	mov	r0, r7
 80157fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157fc:	4621      	mov	r1, r4
 80157fe:	4628      	mov	r0, r5
 8015800:	f000 f806 	bl	8015810 <__swsetup_r>
 8015804:	2800      	cmp	r0, #0
 8015806:	d0d5      	beq.n	80157b4 <__swbuf_r+0x20>
 8015808:	f04f 37ff 	mov.w	r7, #4294967295
 801580c:	e7f4      	b.n	80157f8 <__swbuf_r+0x64>
	...

08015810 <__swsetup_r>:
 8015810:	b538      	push	{r3, r4, r5, lr}
 8015812:	4b2a      	ldr	r3, [pc, #168]	; (80158bc <__swsetup_r+0xac>)
 8015814:	4605      	mov	r5, r0
 8015816:	6818      	ldr	r0, [r3, #0]
 8015818:	460c      	mov	r4, r1
 801581a:	b118      	cbz	r0, 8015824 <__swsetup_r+0x14>
 801581c:	6a03      	ldr	r3, [r0, #32]
 801581e:	b90b      	cbnz	r3, 8015824 <__swsetup_r+0x14>
 8015820:	f7fc fc44 	bl	80120ac <__sinit>
 8015824:	89a3      	ldrh	r3, [r4, #12]
 8015826:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801582a:	0718      	lsls	r0, r3, #28
 801582c:	d422      	bmi.n	8015874 <__swsetup_r+0x64>
 801582e:	06d9      	lsls	r1, r3, #27
 8015830:	d407      	bmi.n	8015842 <__swsetup_r+0x32>
 8015832:	2309      	movs	r3, #9
 8015834:	602b      	str	r3, [r5, #0]
 8015836:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801583a:	81a3      	strh	r3, [r4, #12]
 801583c:	f04f 30ff 	mov.w	r0, #4294967295
 8015840:	e034      	b.n	80158ac <__swsetup_r+0x9c>
 8015842:	0758      	lsls	r0, r3, #29
 8015844:	d512      	bpl.n	801586c <__swsetup_r+0x5c>
 8015846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015848:	b141      	cbz	r1, 801585c <__swsetup_r+0x4c>
 801584a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801584e:	4299      	cmp	r1, r3
 8015850:	d002      	beq.n	8015858 <__swsetup_r+0x48>
 8015852:	4628      	mov	r0, r5
 8015854:	f7fd fbd2 	bl	8012ffc <_free_r>
 8015858:	2300      	movs	r3, #0
 801585a:	6363      	str	r3, [r4, #52]	; 0x34
 801585c:	89a3      	ldrh	r3, [r4, #12]
 801585e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015862:	81a3      	strh	r3, [r4, #12]
 8015864:	2300      	movs	r3, #0
 8015866:	6063      	str	r3, [r4, #4]
 8015868:	6923      	ldr	r3, [r4, #16]
 801586a:	6023      	str	r3, [r4, #0]
 801586c:	89a3      	ldrh	r3, [r4, #12]
 801586e:	f043 0308 	orr.w	r3, r3, #8
 8015872:	81a3      	strh	r3, [r4, #12]
 8015874:	6923      	ldr	r3, [r4, #16]
 8015876:	b94b      	cbnz	r3, 801588c <__swsetup_r+0x7c>
 8015878:	89a3      	ldrh	r3, [r4, #12]
 801587a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801587e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015882:	d003      	beq.n	801588c <__swsetup_r+0x7c>
 8015884:	4621      	mov	r1, r4
 8015886:	4628      	mov	r0, r5
 8015888:	f000 f884 	bl	8015994 <__smakebuf_r>
 801588c:	89a0      	ldrh	r0, [r4, #12]
 801588e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015892:	f010 0301 	ands.w	r3, r0, #1
 8015896:	d00a      	beq.n	80158ae <__swsetup_r+0x9e>
 8015898:	2300      	movs	r3, #0
 801589a:	60a3      	str	r3, [r4, #8]
 801589c:	6963      	ldr	r3, [r4, #20]
 801589e:	425b      	negs	r3, r3
 80158a0:	61a3      	str	r3, [r4, #24]
 80158a2:	6923      	ldr	r3, [r4, #16]
 80158a4:	b943      	cbnz	r3, 80158b8 <__swsetup_r+0xa8>
 80158a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80158aa:	d1c4      	bne.n	8015836 <__swsetup_r+0x26>
 80158ac:	bd38      	pop	{r3, r4, r5, pc}
 80158ae:	0781      	lsls	r1, r0, #30
 80158b0:	bf58      	it	pl
 80158b2:	6963      	ldrpl	r3, [r4, #20]
 80158b4:	60a3      	str	r3, [r4, #8]
 80158b6:	e7f4      	b.n	80158a2 <__swsetup_r+0x92>
 80158b8:	2000      	movs	r0, #0
 80158ba:	e7f7      	b.n	80158ac <__swsetup_r+0x9c>
 80158bc:	2000026c 	.word	0x2000026c

080158c0 <_raise_r>:
 80158c0:	291f      	cmp	r1, #31
 80158c2:	b538      	push	{r3, r4, r5, lr}
 80158c4:	4604      	mov	r4, r0
 80158c6:	460d      	mov	r5, r1
 80158c8:	d904      	bls.n	80158d4 <_raise_r+0x14>
 80158ca:	2316      	movs	r3, #22
 80158cc:	6003      	str	r3, [r0, #0]
 80158ce:	f04f 30ff 	mov.w	r0, #4294967295
 80158d2:	bd38      	pop	{r3, r4, r5, pc}
 80158d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80158d6:	b112      	cbz	r2, 80158de <_raise_r+0x1e>
 80158d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80158dc:	b94b      	cbnz	r3, 80158f2 <_raise_r+0x32>
 80158de:	4620      	mov	r0, r4
 80158e0:	f000 f830 	bl	8015944 <_getpid_r>
 80158e4:	462a      	mov	r2, r5
 80158e6:	4601      	mov	r1, r0
 80158e8:	4620      	mov	r0, r4
 80158ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80158ee:	f000 b817 	b.w	8015920 <_kill_r>
 80158f2:	2b01      	cmp	r3, #1
 80158f4:	d00a      	beq.n	801590c <_raise_r+0x4c>
 80158f6:	1c59      	adds	r1, r3, #1
 80158f8:	d103      	bne.n	8015902 <_raise_r+0x42>
 80158fa:	2316      	movs	r3, #22
 80158fc:	6003      	str	r3, [r0, #0]
 80158fe:	2001      	movs	r0, #1
 8015900:	e7e7      	b.n	80158d2 <_raise_r+0x12>
 8015902:	2400      	movs	r4, #0
 8015904:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015908:	4628      	mov	r0, r5
 801590a:	4798      	blx	r3
 801590c:	2000      	movs	r0, #0
 801590e:	e7e0      	b.n	80158d2 <_raise_r+0x12>

08015910 <raise>:
 8015910:	4b02      	ldr	r3, [pc, #8]	; (801591c <raise+0xc>)
 8015912:	4601      	mov	r1, r0
 8015914:	6818      	ldr	r0, [r3, #0]
 8015916:	f7ff bfd3 	b.w	80158c0 <_raise_r>
 801591a:	bf00      	nop
 801591c:	2000026c 	.word	0x2000026c

08015920 <_kill_r>:
 8015920:	b538      	push	{r3, r4, r5, lr}
 8015922:	4d07      	ldr	r5, [pc, #28]	; (8015940 <_kill_r+0x20>)
 8015924:	2300      	movs	r3, #0
 8015926:	4604      	mov	r4, r0
 8015928:	4608      	mov	r0, r1
 801592a:	4611      	mov	r1, r2
 801592c:	602b      	str	r3, [r5, #0]
 801592e:	f7f0 fa5b 	bl	8005de8 <_kill>
 8015932:	1c43      	adds	r3, r0, #1
 8015934:	d102      	bne.n	801593c <_kill_r+0x1c>
 8015936:	682b      	ldr	r3, [r5, #0]
 8015938:	b103      	cbz	r3, 801593c <_kill_r+0x1c>
 801593a:	6023      	str	r3, [r4, #0]
 801593c:	bd38      	pop	{r3, r4, r5, pc}
 801593e:	bf00      	nop
 8015940:	200023b8 	.word	0x200023b8

08015944 <_getpid_r>:
 8015944:	f7f0 ba48 	b.w	8005dd8 <_getpid>

08015948 <__swhatbuf_r>:
 8015948:	b570      	push	{r4, r5, r6, lr}
 801594a:	460c      	mov	r4, r1
 801594c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015950:	2900      	cmp	r1, #0
 8015952:	b096      	sub	sp, #88	; 0x58
 8015954:	4615      	mov	r5, r2
 8015956:	461e      	mov	r6, r3
 8015958:	da0d      	bge.n	8015976 <__swhatbuf_r+0x2e>
 801595a:	89a3      	ldrh	r3, [r4, #12]
 801595c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015960:	f04f 0100 	mov.w	r1, #0
 8015964:	bf0c      	ite	eq
 8015966:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801596a:	2340      	movne	r3, #64	; 0x40
 801596c:	2000      	movs	r0, #0
 801596e:	6031      	str	r1, [r6, #0]
 8015970:	602b      	str	r3, [r5, #0]
 8015972:	b016      	add	sp, #88	; 0x58
 8015974:	bd70      	pop	{r4, r5, r6, pc}
 8015976:	466a      	mov	r2, sp
 8015978:	f000 f848 	bl	8015a0c <_fstat_r>
 801597c:	2800      	cmp	r0, #0
 801597e:	dbec      	blt.n	801595a <__swhatbuf_r+0x12>
 8015980:	9901      	ldr	r1, [sp, #4]
 8015982:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015986:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801598a:	4259      	negs	r1, r3
 801598c:	4159      	adcs	r1, r3
 801598e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015992:	e7eb      	b.n	801596c <__swhatbuf_r+0x24>

08015994 <__smakebuf_r>:
 8015994:	898b      	ldrh	r3, [r1, #12]
 8015996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015998:	079d      	lsls	r5, r3, #30
 801599a:	4606      	mov	r6, r0
 801599c:	460c      	mov	r4, r1
 801599e:	d507      	bpl.n	80159b0 <__smakebuf_r+0x1c>
 80159a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80159a4:	6023      	str	r3, [r4, #0]
 80159a6:	6123      	str	r3, [r4, #16]
 80159a8:	2301      	movs	r3, #1
 80159aa:	6163      	str	r3, [r4, #20]
 80159ac:	b002      	add	sp, #8
 80159ae:	bd70      	pop	{r4, r5, r6, pc}
 80159b0:	ab01      	add	r3, sp, #4
 80159b2:	466a      	mov	r2, sp
 80159b4:	f7ff ffc8 	bl	8015948 <__swhatbuf_r>
 80159b8:	9900      	ldr	r1, [sp, #0]
 80159ba:	4605      	mov	r5, r0
 80159bc:	4630      	mov	r0, r6
 80159be:	f7fd fb91 	bl	80130e4 <_malloc_r>
 80159c2:	b948      	cbnz	r0, 80159d8 <__smakebuf_r+0x44>
 80159c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159c8:	059a      	lsls	r2, r3, #22
 80159ca:	d4ef      	bmi.n	80159ac <__smakebuf_r+0x18>
 80159cc:	f023 0303 	bic.w	r3, r3, #3
 80159d0:	f043 0302 	orr.w	r3, r3, #2
 80159d4:	81a3      	strh	r3, [r4, #12]
 80159d6:	e7e3      	b.n	80159a0 <__smakebuf_r+0xc>
 80159d8:	89a3      	ldrh	r3, [r4, #12]
 80159da:	6020      	str	r0, [r4, #0]
 80159dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159e0:	81a3      	strh	r3, [r4, #12]
 80159e2:	9b00      	ldr	r3, [sp, #0]
 80159e4:	6163      	str	r3, [r4, #20]
 80159e6:	9b01      	ldr	r3, [sp, #4]
 80159e8:	6120      	str	r0, [r4, #16]
 80159ea:	b15b      	cbz	r3, 8015a04 <__smakebuf_r+0x70>
 80159ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80159f0:	4630      	mov	r0, r6
 80159f2:	f000 f81d 	bl	8015a30 <_isatty_r>
 80159f6:	b128      	cbz	r0, 8015a04 <__smakebuf_r+0x70>
 80159f8:	89a3      	ldrh	r3, [r4, #12]
 80159fa:	f023 0303 	bic.w	r3, r3, #3
 80159fe:	f043 0301 	orr.w	r3, r3, #1
 8015a02:	81a3      	strh	r3, [r4, #12]
 8015a04:	89a3      	ldrh	r3, [r4, #12]
 8015a06:	431d      	orrs	r5, r3
 8015a08:	81a5      	strh	r5, [r4, #12]
 8015a0a:	e7cf      	b.n	80159ac <__smakebuf_r+0x18>

08015a0c <_fstat_r>:
 8015a0c:	b538      	push	{r3, r4, r5, lr}
 8015a0e:	4d07      	ldr	r5, [pc, #28]	; (8015a2c <_fstat_r+0x20>)
 8015a10:	2300      	movs	r3, #0
 8015a12:	4604      	mov	r4, r0
 8015a14:	4608      	mov	r0, r1
 8015a16:	4611      	mov	r1, r2
 8015a18:	602b      	str	r3, [r5, #0]
 8015a1a:	f7f0 fa44 	bl	8005ea6 <_fstat>
 8015a1e:	1c43      	adds	r3, r0, #1
 8015a20:	d102      	bne.n	8015a28 <_fstat_r+0x1c>
 8015a22:	682b      	ldr	r3, [r5, #0]
 8015a24:	b103      	cbz	r3, 8015a28 <_fstat_r+0x1c>
 8015a26:	6023      	str	r3, [r4, #0]
 8015a28:	bd38      	pop	{r3, r4, r5, pc}
 8015a2a:	bf00      	nop
 8015a2c:	200023b8 	.word	0x200023b8

08015a30 <_isatty_r>:
 8015a30:	b538      	push	{r3, r4, r5, lr}
 8015a32:	4d06      	ldr	r5, [pc, #24]	; (8015a4c <_isatty_r+0x1c>)
 8015a34:	2300      	movs	r3, #0
 8015a36:	4604      	mov	r4, r0
 8015a38:	4608      	mov	r0, r1
 8015a3a:	602b      	str	r3, [r5, #0]
 8015a3c:	f7f0 fa43 	bl	8005ec6 <_isatty>
 8015a40:	1c43      	adds	r3, r0, #1
 8015a42:	d102      	bne.n	8015a4a <_isatty_r+0x1a>
 8015a44:	682b      	ldr	r3, [r5, #0]
 8015a46:	b103      	cbz	r3, 8015a4a <_isatty_r+0x1a>
 8015a48:	6023      	str	r3, [r4, #0]
 8015a4a:	bd38      	pop	{r3, r4, r5, pc}
 8015a4c:	200023b8 	.word	0x200023b8

08015a50 <fmod>:
 8015a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a52:	ed2d 8b02 	vpush	{d8}
 8015a56:	ec57 6b10 	vmov	r6, r7, d0
 8015a5a:	ec55 4b11 	vmov	r4, r5, d1
 8015a5e:	f000 f86d 	bl	8015b3c <__ieee754_fmod>
 8015a62:	4622      	mov	r2, r4
 8015a64:	462b      	mov	r3, r5
 8015a66:	4630      	mov	r0, r6
 8015a68:	4639      	mov	r1, r7
 8015a6a:	eeb0 8a40 	vmov.f32	s16, s0
 8015a6e:	eef0 8a60 	vmov.f32	s17, s1
 8015a72:	f7eb f883 	bl	8000b7c <__aeabi_dcmpun>
 8015a76:	b990      	cbnz	r0, 8015a9e <fmod+0x4e>
 8015a78:	2200      	movs	r2, #0
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	4629      	mov	r1, r5
 8015a80:	f7eb f84a 	bl	8000b18 <__aeabi_dcmpeq>
 8015a84:	b158      	cbz	r0, 8015a9e <fmod+0x4e>
 8015a86:	f7fc fbfd 	bl	8012284 <__errno>
 8015a8a:	2321      	movs	r3, #33	; 0x21
 8015a8c:	6003      	str	r3, [r0, #0]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	2300      	movs	r3, #0
 8015a92:	4610      	mov	r0, r2
 8015a94:	4619      	mov	r1, r3
 8015a96:	f7ea ff01 	bl	800089c <__aeabi_ddiv>
 8015a9a:	ec41 0b18 	vmov	d8, r0, r1
 8015a9e:	eeb0 0a48 	vmov.f32	s0, s16
 8015aa2:	eef0 0a68 	vmov.f32	s1, s17
 8015aa6:	ecbd 8b02 	vpop	{d8}
 8015aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015aac <round>:
 8015aac:	ec53 2b10 	vmov	r2, r3, d0
 8015ab0:	b570      	push	{r4, r5, r6, lr}
 8015ab2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8015ab6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8015aba:	2813      	cmp	r0, #19
 8015abc:	ee10 5a10 	vmov	r5, s0
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	dc18      	bgt.n	8015af6 <round+0x4a>
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	da09      	bge.n	8015adc <round+0x30>
 8015ac8:	3001      	adds	r0, #1
 8015aca:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8015ace:	d103      	bne.n	8015ad8 <round+0x2c>
 8015ad0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8015ad4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8015ad8:	2300      	movs	r3, #0
 8015ada:	e02a      	b.n	8015b32 <round+0x86>
 8015adc:	4c16      	ldr	r4, [pc, #88]	; (8015b38 <round+0x8c>)
 8015ade:	4104      	asrs	r4, r0
 8015ae0:	ea03 0604 	and.w	r6, r3, r4
 8015ae4:	4316      	orrs	r6, r2
 8015ae6:	d011      	beq.n	8015b0c <round+0x60>
 8015ae8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015aec:	4103      	asrs	r3, r0
 8015aee:	440b      	add	r3, r1
 8015af0:	ea23 0104 	bic.w	r1, r3, r4
 8015af4:	e7f0      	b.n	8015ad8 <round+0x2c>
 8015af6:	2833      	cmp	r0, #51	; 0x33
 8015af8:	dd0b      	ble.n	8015b12 <round+0x66>
 8015afa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015afe:	d105      	bne.n	8015b0c <round+0x60>
 8015b00:	ee10 0a10 	vmov	r0, s0
 8015b04:	f7ea fbea 	bl	80002dc <__adddf3>
 8015b08:	4602      	mov	r2, r0
 8015b0a:	460b      	mov	r3, r1
 8015b0c:	ec43 2b10 	vmov	d0, r2, r3
 8015b10:	bd70      	pop	{r4, r5, r6, pc}
 8015b12:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8015b16:	f04f 34ff 	mov.w	r4, #4294967295
 8015b1a:	40f4      	lsrs	r4, r6
 8015b1c:	4214      	tst	r4, r2
 8015b1e:	d0f5      	beq.n	8015b0c <round+0x60>
 8015b20:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8015b24:	2301      	movs	r3, #1
 8015b26:	4083      	lsls	r3, r0
 8015b28:	195b      	adds	r3, r3, r5
 8015b2a:	bf28      	it	cs
 8015b2c:	3101      	addcs	r1, #1
 8015b2e:	ea23 0304 	bic.w	r3, r3, r4
 8015b32:	461a      	mov	r2, r3
 8015b34:	460b      	mov	r3, r1
 8015b36:	e7e9      	b.n	8015b0c <round+0x60>
 8015b38:	000fffff 	.word	0x000fffff

08015b3c <__ieee754_fmod>:
 8015b3c:	ec53 2b11 	vmov	r2, r3, d1
 8015b40:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8015b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b48:	ea5c 0402 	orrs.w	r4, ip, r2
 8015b4c:	ec51 0b10 	vmov	r0, r1, d0
 8015b50:	ee11 7a10 	vmov	r7, s2
 8015b54:	ee11 ea10 	vmov	lr, s2
 8015b58:	461e      	mov	r6, r3
 8015b5a:	d00c      	beq.n	8015b76 <__ieee754_fmod+0x3a>
 8015b5c:	4c78      	ldr	r4, [pc, #480]	; (8015d40 <__ieee754_fmod+0x204>)
 8015b5e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8015b62:	45a0      	cmp	r8, r4
 8015b64:	4689      	mov	r9, r1
 8015b66:	dc06      	bgt.n	8015b76 <__ieee754_fmod+0x3a>
 8015b68:	4254      	negs	r4, r2
 8015b6a:	4d76      	ldr	r5, [pc, #472]	; (8015d44 <__ieee754_fmod+0x208>)
 8015b6c:	4314      	orrs	r4, r2
 8015b6e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8015b72:	42ac      	cmp	r4, r5
 8015b74:	d909      	bls.n	8015b8a <__ieee754_fmod+0x4e>
 8015b76:	f7ea fd67 	bl	8000648 <__aeabi_dmul>
 8015b7a:	4602      	mov	r2, r0
 8015b7c:	460b      	mov	r3, r1
 8015b7e:	f7ea fe8d 	bl	800089c <__aeabi_ddiv>
 8015b82:	ec41 0b10 	vmov	d0, r0, r1
 8015b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b8a:	45e0      	cmp	r8, ip
 8015b8c:	ee10 aa10 	vmov	sl, s0
 8015b90:	ee10 4a10 	vmov	r4, s0
 8015b94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8015b98:	dc09      	bgt.n	8015bae <__ieee754_fmod+0x72>
 8015b9a:	dbf2      	blt.n	8015b82 <__ieee754_fmod+0x46>
 8015b9c:	4290      	cmp	r0, r2
 8015b9e:	d3f0      	bcc.n	8015b82 <__ieee754_fmod+0x46>
 8015ba0:	d105      	bne.n	8015bae <__ieee754_fmod+0x72>
 8015ba2:	4b69      	ldr	r3, [pc, #420]	; (8015d48 <__ieee754_fmod+0x20c>)
 8015ba4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8015ba8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015bac:	e7e9      	b.n	8015b82 <__ieee754_fmod+0x46>
 8015bae:	4a65      	ldr	r2, [pc, #404]	; (8015d44 <__ieee754_fmod+0x208>)
 8015bb0:	ea19 0f02 	tst.w	r9, r2
 8015bb4:	d148      	bne.n	8015c48 <__ieee754_fmod+0x10c>
 8015bb6:	f1b8 0f00 	cmp.w	r8, #0
 8015bba:	d13d      	bne.n	8015c38 <__ieee754_fmod+0xfc>
 8015bbc:	4963      	ldr	r1, [pc, #396]	; (8015d4c <__ieee754_fmod+0x210>)
 8015bbe:	4653      	mov	r3, sl
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	dc36      	bgt.n	8015c32 <__ieee754_fmod+0xf6>
 8015bc4:	4216      	tst	r6, r2
 8015bc6:	d14f      	bne.n	8015c68 <__ieee754_fmod+0x12c>
 8015bc8:	f1bc 0f00 	cmp.w	ip, #0
 8015bcc:	d144      	bne.n	8015c58 <__ieee754_fmod+0x11c>
 8015bce:	4a5f      	ldr	r2, [pc, #380]	; (8015d4c <__ieee754_fmod+0x210>)
 8015bd0:	463b      	mov	r3, r7
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	dc3d      	bgt.n	8015c52 <__ieee754_fmod+0x116>
 8015bd6:	485e      	ldr	r0, [pc, #376]	; (8015d50 <__ieee754_fmod+0x214>)
 8015bd8:	4281      	cmp	r1, r0
 8015bda:	db4a      	blt.n	8015c72 <__ieee754_fmod+0x136>
 8015bdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015be4:	485a      	ldr	r0, [pc, #360]	; (8015d50 <__ieee754_fmod+0x214>)
 8015be6:	4282      	cmp	r2, r0
 8015be8:	db57      	blt.n	8015c9a <__ieee754_fmod+0x15e>
 8015bea:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8015bee:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8015bf2:	1a89      	subs	r1, r1, r2
 8015bf4:	1b98      	subs	r0, r3, r6
 8015bf6:	eba4 070e 	sub.w	r7, r4, lr
 8015bfa:	2900      	cmp	r1, #0
 8015bfc:	d162      	bne.n	8015cc4 <__ieee754_fmod+0x188>
 8015bfe:	4574      	cmp	r4, lr
 8015c00:	bf38      	it	cc
 8015c02:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8015c06:	2800      	cmp	r0, #0
 8015c08:	bfa4      	itt	ge
 8015c0a:	463c      	movge	r4, r7
 8015c0c:	4603      	movge	r3, r0
 8015c0e:	ea53 0104 	orrs.w	r1, r3, r4
 8015c12:	d0c6      	beq.n	8015ba2 <__ieee754_fmod+0x66>
 8015c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015c18:	db69      	blt.n	8015cee <__ieee754_fmod+0x1b2>
 8015c1a:	494d      	ldr	r1, [pc, #308]	; (8015d50 <__ieee754_fmod+0x214>)
 8015c1c:	428a      	cmp	r2, r1
 8015c1e:	db6c      	blt.n	8015cfa <__ieee754_fmod+0x1be>
 8015c20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015c24:	432b      	orrs	r3, r5
 8015c26:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8015c2a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015c2e:	4620      	mov	r0, r4
 8015c30:	e7a7      	b.n	8015b82 <__ieee754_fmod+0x46>
 8015c32:	3901      	subs	r1, #1
 8015c34:	005b      	lsls	r3, r3, #1
 8015c36:	e7c3      	b.n	8015bc0 <__ieee754_fmod+0x84>
 8015c38:	4945      	ldr	r1, [pc, #276]	; (8015d50 <__ieee754_fmod+0x214>)
 8015c3a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	ddc0      	ble.n	8015bc4 <__ieee754_fmod+0x88>
 8015c42:	3901      	subs	r1, #1
 8015c44:	005b      	lsls	r3, r3, #1
 8015c46:	e7fa      	b.n	8015c3e <__ieee754_fmod+0x102>
 8015c48:	ea4f 5128 	mov.w	r1, r8, asr #20
 8015c4c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8015c50:	e7b8      	b.n	8015bc4 <__ieee754_fmod+0x88>
 8015c52:	3a01      	subs	r2, #1
 8015c54:	005b      	lsls	r3, r3, #1
 8015c56:	e7bc      	b.n	8015bd2 <__ieee754_fmod+0x96>
 8015c58:	4a3d      	ldr	r2, [pc, #244]	; (8015d50 <__ieee754_fmod+0x214>)
 8015c5a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	ddb9      	ble.n	8015bd6 <__ieee754_fmod+0x9a>
 8015c62:	3a01      	subs	r2, #1
 8015c64:	005b      	lsls	r3, r3, #1
 8015c66:	e7fa      	b.n	8015c5e <__ieee754_fmod+0x122>
 8015c68:	ea4f 522c 	mov.w	r2, ip, asr #20
 8015c6c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015c70:	e7b1      	b.n	8015bd6 <__ieee754_fmod+0x9a>
 8015c72:	1a40      	subs	r0, r0, r1
 8015c74:	281f      	cmp	r0, #31
 8015c76:	dc0a      	bgt.n	8015c8e <__ieee754_fmod+0x152>
 8015c78:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8015c7c:	fa08 f800 	lsl.w	r8, r8, r0
 8015c80:	fa2a f303 	lsr.w	r3, sl, r3
 8015c84:	ea43 0308 	orr.w	r3, r3, r8
 8015c88:	fa0a f400 	lsl.w	r4, sl, r0
 8015c8c:	e7aa      	b.n	8015be4 <__ieee754_fmod+0xa8>
 8015c8e:	4b31      	ldr	r3, [pc, #196]	; (8015d54 <__ieee754_fmod+0x218>)
 8015c90:	1a5b      	subs	r3, r3, r1
 8015c92:	fa0a f303 	lsl.w	r3, sl, r3
 8015c96:	2400      	movs	r4, #0
 8015c98:	e7a4      	b.n	8015be4 <__ieee754_fmod+0xa8>
 8015c9a:	1a80      	subs	r0, r0, r2
 8015c9c:	281f      	cmp	r0, #31
 8015c9e:	dc0a      	bgt.n	8015cb6 <__ieee754_fmod+0x17a>
 8015ca0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8015ca4:	fa0c fc00 	lsl.w	ip, ip, r0
 8015ca8:	fa27 f606 	lsr.w	r6, r7, r6
 8015cac:	ea46 060c 	orr.w	r6, r6, ip
 8015cb0:	fa07 fe00 	lsl.w	lr, r7, r0
 8015cb4:	e79d      	b.n	8015bf2 <__ieee754_fmod+0xb6>
 8015cb6:	4e27      	ldr	r6, [pc, #156]	; (8015d54 <__ieee754_fmod+0x218>)
 8015cb8:	1ab6      	subs	r6, r6, r2
 8015cba:	fa07 f606 	lsl.w	r6, r7, r6
 8015cbe:	f04f 0e00 	mov.w	lr, #0
 8015cc2:	e796      	b.n	8015bf2 <__ieee754_fmod+0xb6>
 8015cc4:	4574      	cmp	r4, lr
 8015cc6:	bf38      	it	cc
 8015cc8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	da05      	bge.n	8015cdc <__ieee754_fmod+0x1a0>
 8015cd0:	0fe0      	lsrs	r0, r4, #31
 8015cd2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015cd6:	0064      	lsls	r4, r4, #1
 8015cd8:	3901      	subs	r1, #1
 8015cda:	e78b      	b.n	8015bf4 <__ieee754_fmod+0xb8>
 8015cdc:	ea50 0307 	orrs.w	r3, r0, r7
 8015ce0:	f43f af5f 	beq.w	8015ba2 <__ieee754_fmod+0x66>
 8015ce4:	0ffb      	lsrs	r3, r7, #31
 8015ce6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8015cea:	007c      	lsls	r4, r7, #1
 8015cec:	e7f4      	b.n	8015cd8 <__ieee754_fmod+0x19c>
 8015cee:	0fe1      	lsrs	r1, r4, #31
 8015cf0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8015cf4:	0064      	lsls	r4, r4, #1
 8015cf6:	3a01      	subs	r2, #1
 8015cf8:	e78c      	b.n	8015c14 <__ieee754_fmod+0xd8>
 8015cfa:	1a89      	subs	r1, r1, r2
 8015cfc:	2914      	cmp	r1, #20
 8015cfe:	dc0a      	bgt.n	8015d16 <__ieee754_fmod+0x1da>
 8015d00:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015d04:	fa03 f202 	lsl.w	r2, r3, r2
 8015d08:	40cc      	lsrs	r4, r1
 8015d0a:	4322      	orrs	r2, r4
 8015d0c:	410b      	asrs	r3, r1
 8015d0e:	ea43 0105 	orr.w	r1, r3, r5
 8015d12:	4610      	mov	r0, r2
 8015d14:	e735      	b.n	8015b82 <__ieee754_fmod+0x46>
 8015d16:	291f      	cmp	r1, #31
 8015d18:	dc07      	bgt.n	8015d2a <__ieee754_fmod+0x1ee>
 8015d1a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015d1e:	40cc      	lsrs	r4, r1
 8015d20:	fa03 f202 	lsl.w	r2, r3, r2
 8015d24:	4322      	orrs	r2, r4
 8015d26:	462b      	mov	r3, r5
 8015d28:	e7f1      	b.n	8015d0e <__ieee754_fmod+0x1d2>
 8015d2a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8015d2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015d32:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8015d36:	32e2      	adds	r2, #226	; 0xe2
 8015d38:	fa43 f202 	asr.w	r2, r3, r2
 8015d3c:	e7f3      	b.n	8015d26 <__ieee754_fmod+0x1ea>
 8015d3e:	bf00      	nop
 8015d40:	7fefffff 	.word	0x7fefffff
 8015d44:	7ff00000 	.word	0x7ff00000
 8015d48:	08018b50 	.word	0x08018b50
 8015d4c:	fffffbed 	.word	0xfffffbed
 8015d50:	fffffc02 	.word	0xfffffc02
 8015d54:	fffffbe2 	.word	0xfffffbe2

08015d58 <_init>:
 8015d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d5a:	bf00      	nop
 8015d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d5e:	bc08      	pop	{r3}
 8015d60:	469e      	mov	lr, r3
 8015d62:	4770      	bx	lr

08015d64 <_fini>:
 8015d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d66:	bf00      	nop
 8015d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d6a:	bc08      	pop	{r3}
 8015d6c:	469e      	mov	lr, r3
 8015d6e:	4770      	bx	lr
