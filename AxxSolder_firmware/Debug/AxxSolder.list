
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b3e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e38  0801b5c8  0801b5c8  0002b5c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e400  0801e400  0003055c  2**0
                  CONTENTS
  4 .ARM          00000008  0801e400  0801e400  0002e400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e408  0801e408  0003055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e408  0801e408  0002e408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e40c  0801e40c  0002e40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000055c  20000000  0801e410  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031c8  20000560  0801e96c  00030560  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003728  0801e96c  00033728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003055c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003058c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f632  00000000  00000000  000305cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065d7  00000000  00000000  0005fc01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029a8  00000000  00000000  000661d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ff1  00000000  00000000  00068b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002897d  00000000  00000000  0006ab71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035780  00000000  00000000  000934ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee7ba  00000000  00000000  000c8c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c738  00000000  00000000  001b7428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001c3b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000560 	.word	0x20000560
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801b5b0 	.word	0x0801b5b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000564 	.word	0x20000564
 800021c:	0801b5b0 	.word	0x0801b5b0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800104e:	0adb      	lsrs	r3, r3, #11
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <FlashCheckCRC>:

bool FlashCheckCRC()
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <FlashCheckCRC+0x70>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <FlashCheckCRC+0x70>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <FlashCheckCRC+0x70>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <FlashCheckCRC+0x74>)
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <FlashCheckCRC+0x78>)
 8001094:	f008 f95c 	bl	8009350 <HAL_CRC_Calculate>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	461c      	mov	r4, r3
 800109e:	4615      	mov	r5, r2
 80010a0:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010aa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b6:	4299      	cmp	r1, r3
 80010b8:	bf08      	it	eq
 80010ba:	4290      	cmpeq	r0, r2
 80010bc:	d101      	bne.n	80010c2 <FlashCheckCRC+0x66>
	{
		return true;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <FlashCheckCRC+0x68>
	}
	return false;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0801f000 	.word	0x0801f000
 80010d4:	20001ea8 	.word	0x20001ea8

080010d8 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
	int i = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <FlashReadToBuf+0x88>)
 80010e4:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 80010e6:	f7ff ffb9 	bl	800105c <FlashCheckCRC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d031      	beq.n	8001154 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010f0:	e025      	b.n	800113e <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e013      	b.n	800112c <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <FlashReadToBuf+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d208      	bcs.n	8001126 <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	1d39      	adds	r1, r7, #4
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	440a      	add	r2, r1
 8001120:	7811      	ldrb	r1, [r2, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <FlashReadToBuf+0x90>)
 8001124:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b07      	cmp	r3, #7
 8001130:	dde8      	ble.n	8001104 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3308      	adds	r3, #8
 8001136:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3308      	adds	r3, #8
 800113c:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <FlashReadToBuf+0x8c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d203      	bcs.n	8001150 <FlashReadToBuf+0x78>
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <FlashReadToBuf+0x94>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d3d0      	bcc.n	80010f2 <FlashReadToBuf+0x1a>
		}
		return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <FlashReadToBuf+0x7e>
	}
	return false;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0801f000 	.word	0x0801f000
 8001164:	20000000 	.word	0x20000000
 8001168:	20000580 	.word	0x20000580
 800116c:	0801ffff 	.word	0x0801ffff

08001170 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 8001178:	f7ff ffae 	bl	80010d8 <FlashReadToBuf>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <FlashRead+0x26>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <FlashRead+0x30>)
 8001186:	4618      	mov	r0, r3
 8001188:	4611      	mov	r1, r2
 800118a:	2350      	movs	r3, #80	; 0x50
 800118c:	461a      	mov	r2, r3
 800118e:	f016 fcd0 	bl	8017b32 <memcpy>
		return true;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <FlashRead+0x28>
	}
	return false;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000580 	.word	0x20000580

080011a4 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <FlashWrite+0x170>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <FlashWrite+0x174>)
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 80011da:	f7ff ff7d 	bl	80010d8 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 80011de:	4a4f      	ldr	r2, [pc, #316]	; (800131c <FlashWrite+0x178>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	2350      	movs	r3, #80	; 0x50
 80011e8:	461a      	mov	r2, r3
 80011ea:	f016 fca2 	bl	8017b32 <memcpy>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <FlashWrite+0x17c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4949      	ldr	r1, [pc, #292]	; (800131c <FlashWrite+0x178>)
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <FlashWrite+0x180>)
 80011f8:	f008 f8aa 	bl	8009350 <HAL_CRC_Calculate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2200      	movs	r2, #0
 8001200:	461c      	mov	r4, r3
 8001202:	4615      	mov	r5, r2
 8001204:	e9c7 4506 	strd	r4, r5, [r7, #24]

	HAL_FLASH_Unlock();
 8001208:	f008 fd8a 	bl	8009d20 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <FlashWrite+0x184>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8001214:	4845      	ldr	r0, [pc, #276]	; (800132c <FlashWrite+0x188>)
 8001216:	f7ff ff13 	bl	8001040 <GetPage>
 800121a:	4604      	mov	r4, r0
 800121c:	483e      	ldr	r0, [pc, #248]	; (8001318 <FlashWrite+0x174>)
 800121e:	f7ff ff0f 	bl	8001040 <GetPage>
 8001222:	4603      	mov	r3, r0
 8001224:	1ae3      	subs	r3, r4, r3
 8001226:	3301      	adds	r3, #1
 8001228:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <FlashWrite+0x18c>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <FlashWrite+0x18c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 8001236:	4838      	ldr	r0, [pc, #224]	; (8001318 <FlashWrite+0x174>)
 8001238:	f7ff ff02 	bl	8001040 <GetPage>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <FlashWrite+0x18c>)
 8001240:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8001242:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <FlashWrite+0x18c>)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4838      	ldr	r0, [pc, #224]	; (8001330 <FlashWrite+0x18c>)
 8001250:	f008 fe52 	bl	8009ef8 <HAL_FLASHEx_Erase>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d152      	bne.n	8001300 <FlashWrite+0x15c>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 800125a:	e04b      	b.n	80012f4 <FlashWrite+0x150>
		{
			for (int j = 0; j < 8; j++)
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	e01b      	b.n	800129a <FlashWrite+0xf6>
			{
				if (j + i < bufLength)
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <FlashWrite+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d20a      	bcs.n	8001288 <FlashWrite+0xe4>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8001272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	441a      	add	r2, r3
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f107 0108 	add.w	r1, r7, #8
 800127e:	440b      	add	r3, r1
 8001280:	4926      	ldr	r1, [pc, #152]	; (800131c <FlashWrite+0x178>)
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e005      	b.n	8001294 <FlashWrite+0xf0>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f107 0208 	add.w	r2, r7, #8
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3301      	adds	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	2b07      	cmp	r3, #7
 800129e:	dde0      	ble.n	8001262 <FlashWrite+0xbe>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 80012a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <FlashWrite+0x17c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d20f      	bcs.n	80012ca <FlashWrite+0x126>
 80012aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012b0:	2000      	movs	r0, #0
 80012b2:	f008 fcc9 	bl	8009c48 <HAL_FLASH_Program>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <FlashWrite+0x126>
			{
				Address = Address + 8;
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	3308      	adds	r3, #8
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	3308      	adds	r3, #8
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c8:	e014      	b.n	80012f4 <FlashWrite+0x150>
			}
			else if (i >= bufLength)
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <FlashWrite+0x17c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d314      	bcc.n	80012fe <FlashWrite+0x15a>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 80012d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012da:	2000      	movs	r0, #0
 80012dc:	f008 fcb4 	bl	8009c48 <HAL_FLASH_Program>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <FlashWrite+0x150>
				{
					HAL_FLASH_Lock();
 80012e6:	f008 fd3d 	bl	8009d64 <HAL_FLASH_Lock>
					flashWriting = 0;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <FlashWrite+0x170>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					return true;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00b      	b.n	800130c <FlashWrite+0x168>
		while (Address < FLASH_USER_END_ADDR)
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <FlashWrite+0x188>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d3af      	bcc.n	800125c <FlashWrite+0xb8>
 80012fc:	e000      	b.n	8001300 <FlashWrite+0x15c>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012fe:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001300:	f008 fd30 	bl	8009d64 <HAL_FLASH_Lock>

	flashWriting = 0;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <FlashWrite+0x170>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	return false;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	2000057c 	.word	0x2000057c
 8001318:	0801f000 	.word	0x0801f000
 800131c:	20000580 	.word	0x20000580
 8001320:	20000000 	.word	0x20000000
 8001324:	20001ea8 	.word	0x20001ea8
 8001328:	40022000 	.word	0x40022000
 800132c:	0801ffff 	.word	0x0801ffff
 8001330:	200005d0 	.word	0x200005d0

08001334 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	ed87 0b04 	vstr	d0, [r7, #16]
 800133e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001342:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800134a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134e:	f7ff fbed 	bl	8000b2c <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <clamp+0x2a>
 8001358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135c:	e001      	b.n	8001362 <clamp+0x2e>
 800135e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001362:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800136a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800136e:	f7ff fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <clamp+0x4a>
 8001378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137c:	e001      	b.n	8001382 <clamp+0x4e>
 800137e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001382:	ec43 2b17 	vmov	d7, r2, r3
}
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <get_mean_ADC_reading_indexed>:

/* Returns the average of 100 readings of the index+3*n value in the ADC_buffer vector */
double get_mean_ADC_reading_indexed(uint8_t index){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e012      	b.n	80013d2 <get_mean_ADC_reading_indexed+0x3e>
		ADC_filter_mean += ADC1_BUF[n];
 80013ac:	4a16      	ldr	r2, [pc, #88]	; (8001408 <get_mean_ADC_reading_indexed+0x74>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3303      	adds	r3, #3
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	dde9      	ble.n	80013ac <get_mean_ADC_reading_indexed+0x18>
	}
	return ADC_filter_mean/(ADC1_BUF_LEN/3.0);
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__aeabi_f2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <get_mean_ADC_reading_indexed+0x78>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000650 	.word	0x20000650
 8001408:	20000654 	.word	0x20000654
 800140c:	40330000 	.word	0x40330000

08001410 <get_mcu_temp>:

void get_mcu_temp(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	sensor_values.mcu_temperature =	Moving_Average_Compute((((get_mean_ADC_reading_indexed(2) * VSENSE) - V30) / Avg_Slope + 25), &mcu_temperature_filter_struct);
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff ffbd 	bl	8001394 <get_mean_ADC_reading_indexed>
 800141a:	ec51 0b10 	vmov	r0, r1, d0
 800141e:	a328      	add	r3, pc, #160	; (adr r3, 80014c0 <get_mcu_temp+0xb0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f910 	bl	8000648 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <get_mcu_temp+0xa0>)
 8001436:	f7ff fa31 	bl	800089c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	a317      	add	r3, pc, #92	; (adr r3, 80014a0 <get_mcu_temp+0x90>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7fe ff46 	bl	80002d8 <__aeabi_dsub>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	a314      	add	r3, pc, #80	; (adr r3, 80014a8 <get_mcu_temp+0x98>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff fa1f 	bl	800089c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <get_mcu_temp+0xa4>)
 800146c:	f7fe ff36 	bl	80002dc <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbbe 	bl	8000bf8 <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <get_mcu_temp+0xa8>)
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fbeb 	bl	8004c5c <Moving_Average_Compute>
 8001486:	ec53 2b10 	vmov	r2, r3, d0
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fbd3 	bl	8000c38 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <get_mcu_temp+0xac>)
 8001496:	61d3      	str	r3, [r2, #28]
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	f3af 8000 	nop.w
 80014a0:	851eb852 	.word	0x851eb852
 80014a4:	3fe851eb 	.word	0x3fe851eb
 80014a8:	47ae147b 	.word	0x47ae147b
 80014ac:	3f647ae1 	.word	0x3f647ae1
 80014b0:	40b00000 	.word	0x40b00000
 80014b4:	40390000 	.word	0x40390000
 80014b8:	20000a68 	.word	0x20000a68
 80014bc:	20000038 	.word	0x20000038
 80014c0:	66666666 	.word	0x66666666
 80014c4:	400a6666 	.word	0x400a6666

080014c8 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	//return ((color & 0b0000000000011111)  << 11)    |    ((color & 0b1111100000000000) >> 5)   |    ((color  & 0b0000011111100000) >> 6);
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	02db      	lsls	r3, r3, #11
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <change_state>:

void change_state(mainstates new_state){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <change_state+0x58>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <change_state+0x5c>)
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	active_state = new_state;
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <change_state+0x58>)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	7013      	strb	r3, [r2, #0]
	if((active_state == RUN) && (flash_values.GPIO4_ON_at_run == 1)){
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <change_state+0x58>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d110      	bne.n	8001538 <change_state+0x44>
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <change_state+0x60>)
 8001518:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <change_state+0x64>)
 8001522:	f7ff faf9 	bl	8000b18 <__aeabi_dcmpeq>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <change_state+0x44>
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <change_state+0x68>)
 8001532:	f008 ff9f 	bl	800a474 <HAL_GPIO_WritePin>
 8001536:	e005      	b.n	8001544 <change_state+0x50>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <change_state+0x68>)
 800153e:	f008 ff99 	bl	800a474 <HAL_GPIO_WritePin>
	}
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000001d 	.word	0x2000001d
 8001550:	20000038 	.word	0x20000038
 8001554:	200006d0 	.word	0x200006d0
 8001558:	3ff00000 	.word	0x3ff00000
 800155c:	48000400 	.word	0x48000400

08001560 <get_bus_voltage>:

void get_bus_voltage(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading_indexed(0), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ff15 	bl	8001394 <get_mean_ADC_reading_indexed>
 800156a:	ec53 2b10 	vmov	r2, r3, d0
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb41 	bl	8000bf8 <__aeabi_d2uiz>
 8001576:	4603      	mov	r3, r0
 8001578:	490d      	ldr	r1, [pc, #52]	; (80015b0 <get_bus_voltage+0x50>)
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fb6e 	bl	8004c5c <Moving_Average_Compute>
 8001580:	ec51 0b10 	vmov	r0, r1, d0
 8001584:	a308      	add	r3, pc, #32	; (adr r3, 80015a8 <get_bus_voltage+0x48>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f85d 	bl	8000648 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb4f 	bl	8000c38 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <get_bus_voltage+0x54>)
 800159e:	6113      	str	r3, [r2, #16]
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	f3af 8000 	nop.w
 80015a8:	ada68bd9 	.word	0xada68bd9
 80015ac:	3f813656 	.word	0x3f813656
 80015b0:	20000d94 	.word	0x20000d94
 80015b4:	20000038 	.word	0x20000038

080015b8 <get_heater_current>:

void get_heater_current(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	sensor_values.heater_current = Moving_Average_Compute(current_raw, &current_filterStruct)*CURRENT_COMPENSATION;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <get_heater_current+0x40>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <get_heater_current+0x44>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fb4a 	bl	8004c5c <Moving_Average_Compute>
 80015c8:	ec51 0b10 	vmov	r0, r1, d0
 80015cc:	a308      	add	r3, pc, #32	; (adr r3, 80015f0 <get_heater_current+0x38>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f839 	bl	8000648 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fb2b 	bl	8000c38 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <get_heater_current+0x48>)
 80015e6:	6153      	str	r3, [r2, #20]
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f3af 8000 	nop.w
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	3fb99999 	.word	0x3fb99999
 80015f8:	200006c6 	.word	0x200006c6
 80015fc:	200010c0 	.word	0x200010c0
 8001600:	20000038 	.word	0x20000038
 8001604:	00000000 	.word	0x00000000

08001608 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(get_mean_ADC_reading_indexed(1), &thermocouple_temperature_filter_struct); /* Moving average filter */
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fec0 	bl	8001394 <get_mean_ADC_reading_indexed>
 8001614:	ec53 2b10 	vmov	r2, r3, d0
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff faec 	bl	8000bf8 <__aeabi_d2uiz>
 8001620:	4603      	mov	r3, r0
 8001622:	4977      	ldr	r1, [pc, #476]	; (8001800 <get_thermocouple_temperature+0x1f8>)
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fb19 	bl	8004c5c <Moving_Average_Compute>
 800162a:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 800162e:	4b75      	ldr	r3, [pc, #468]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d12e      	bne.n	8001694 <get_thermocouple_temperature+0x8c>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800163a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163e:	f7ff f803 	bl	8000648 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a357      	add	r3, pc, #348	; (adr r3, 80017a8 <get_thermocouple_temperature+0x1a0>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe fffa 	bl	8000648 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	a354      	add	r3, pc, #336	; (adr r3, 80017b0 <get_thermocouple_temperature+0x1a8>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001666:	f7fe ffef 	bl	8000648 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe fe33 	bl	80002dc <__adddf3>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	a34e      	add	r3, pc, #312	; (adr r3, 80017b8 <get_thermocouple_temperature+0x1b0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe fe2a 	bl	80002dc <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	495e      	ldr	r1, [pc, #376]	; (8001808 <get_thermocouple_temperature+0x200>)
 800168e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001692:	e064      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == T245){
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d12e      	bne.n	80016fa <get_thermocouple_temperature+0xf2>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 800169c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a4:	f7fe ffd0 	bl	8000648 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	a343      	add	r3, pc, #268	; (adr r3, 80017c0 <get_thermocouple_temperature+0x1b8>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffc7 	bl	8000648 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	a341      	add	r3, pc, #260	; (adr r3, 80017c8 <get_thermocouple_temperature+0x1c0>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016cc:	f7fe ffbc 	bl	8000648 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fe00 	bl	80002dc <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a33a      	add	r3, pc, #232	; (adr r3, 80017d0 <get_thermocouple_temperature+0x1c8>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fdf7 	bl	80002dc <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4945      	ldr	r1, [pc, #276]	; (8001808 <get_thermocouple_temperature+0x200>)
 80016f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016f8:	e031      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == NT115){
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d12d      	bne.n	800175e <get_thermocouple_temperature+0x156>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_NT115 + TC_temp*TC_COMPENSATION_X1_NT115 + TC_COMPENSATION_X0_NT115;
 8001702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800170a:	f7fe ff9d 	bl	8000648 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	a330      	add	r3, pc, #192	; (adr r3, 80017d8 <get_thermocouple_temperature+0x1d0>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe ff94 	bl	8000648 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	a32d      	add	r3, pc, #180	; (adr r3, 80017e0 <get_thermocouple_temperature+0x1d8>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f7fe ff89 	bl	8000648 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fdcd 	bl	80002dc <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	a327      	add	r3, pc, #156	; (adr r3, 80017e8 <get_thermocouple_temperature+0x1e0>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fdc4 	bl	80002dc <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	492b      	ldr	r1, [pc, #172]	; (8001808 <get_thermocouple_temperature+0x200>)
 800175a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <get_thermocouple_temperature+0x200>)
 8001760:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <get_thermocouple_temperature+0x204>)
 8001766:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800176a:	f7fe fdb7 	bl	80002dc <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4925      	ldr	r1, [pc, #148]	; (8001808 <get_thermocouple_temperature+0x200>)
 8001774:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <get_thermocouple_temperature+0x200>)
 800177a:	ed93 7b02 	vldr	d7, [r3, #8]
 800177e:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80017f0 <get_thermocouple_temperature+0x1e8>
 8001782:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80017f8 <get_thermocouple_temperature+0x1f0>
 8001786:	eeb0 0a47 	vmov.f32	s0, s14
 800178a:	eef0 0a67 	vmov.f32	s1, s15
 800178e:	f7ff fdd1 	bl	8001334 <clamp>
 8001792:	eeb0 7a40 	vmov.f32	s14, s0
 8001796:	eef0 7a60 	vmov.f32	s15, s1
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <get_thermocouple_temperature+0x200>)
 800179c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}
 80017a8:	82211f02 	.word	0x82211f02
 80017ac:	3ed1b769 	.word	0x3ed1b769
 80017b0:	7d232337 	.word	0x7d232337
 80017b4:	3fd46490 	.word	0x3fd46490
 80017b8:	11588fd7 	.word	0x11588fd7
 80017bc:	4034f7d1 	.word	0x4034f7d1
 80017c0:	a66d5482 	.word	0xa66d5482
 80017c4:	be9fc6dc 	.word	0xbe9fc6dc
 80017c8:	56fa2c99 	.word	0x56fa2c99
 80017cc:	3fbe8eac 	.word	0x3fbe8eac
 80017d0:	aef84767 	.word	0xaef84767
 80017d4:	4037c703 	.word	0x4037c703
 80017d8:	e0057d0c 	.word	0xe0057d0c
 80017dc:	3f0ac0ae 	.word	0x3f0ac0ae
 80017e0:	859db92b 	.word	0x859db92b
 80017e4:	3fdae99a 	.word	0x3fdae99a
 80017e8:	027d19fb 	.word	0x027d19fb
 80017ec:	40342538 	.word	0x40342538
 80017f0:	00000000 	.word	0x00000000
 80017f4:	408f3800 	.word	0x408f3800
	...
 8001800:	2000073c 	.word	0x2000073c
 8001804:	200005e0 	.word	0x200005e0
 8001808:	20000038 	.word	0x20000038
 800180c:	200006d0 	.word	0x200006d0

08001810 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <set_heater_duty+0x48>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.3);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fea5 	bl	8000574 <__aeabi_i2d>
 800182a:	a309      	add	r3, pc, #36	; (adr r3, 8001850 <set_heater_duty+0x40>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe ff0a 	bl	8000648 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <set_heater_duty+0x48>)
 800183a:	680c      	ldr	r4, [r1, #0]
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f9da 	bl	8000bf8 <__aeabi_d2uiz>
 8001844:	4603      	mov	r3, r0
 8001846:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	33333333 	.word	0x33333333
 8001854:	3fd33333 	.word	0x3fd33333
 8001858:	20001fe4 	.word	0x20001fe4
 800185c:	00000000 	.word	0x00000000

08001860 <heater_on>:

/* Update the duty cycle of timer controlling the heater PWM */
void heater_on(){
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <heater_on+0xa0>)
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe95 	bl	8000598 <__aeabi_f2d>
 800186e:	a31e      	add	r3, pc, #120	; (adr r3, 80018e8 <heater_on+0x88>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fee8 	bl	8000648 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <heater_on+0xa0>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe87 	bl	8000598 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7ff f803 	bl	800089c <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <heater_on+0xa4>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fed0 	bl	8000648 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <heater_on+0xa8>)
 80018ae:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <heater_on+0xa8>)
 80018b4:	ed93 7b00 	vldr	d7, [r3]
 80018b8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80018f0 <heater_on+0x90>
 80018bc:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80018f8 <heater_on+0x98>
 80018c0:	eeb0 0a47 	vmov.f32	s0, s14
 80018c4:	eef0 0a67 	vmov.f32	s1, s15
 80018c8:	f7ff fd34 	bl	8001334 <clamp>
 80018cc:	ec53 2b10 	vmov	r2, r3, d0
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f990 	bl	8000bf8 <__aeabi_d2uiz>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff97 	bl	8001810 <set_heater_duty>
}
 80018e2:	bf00      	nop
 80018e4:	bdb0      	pop	{r4, r5, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	a5e353f8 	.word	0xa5e353f8
 80018ec:	3fc0c49b 	.word	0x3fc0c49b
 80018f0:	00000000 	.word	0x00000000
 80018f4:	407f4000 	.word	0x407f4000
	...
 8001900:	20000038 	.word	0x20000038
 8001904:	20000720 	.word	0x20000720
 8001908:	20000730 	.word	0x20000730

0800190c <heater_off>:

/* Disable the duty cycle of timer controlling the heater PWM*/
void heater_off(){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	set_heater_duty(0);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff ff7d 	bl	8001810 <set_heater_duty>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <show_popup>:

void show_popup(char * text[80]){
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b085      	sub	sp, #20
 8001920:	af02      	add	r7, sp, #8
 8001922:	6078      	str	r0, [r7, #4]
	UG_FillFrame(10, 150, 225, 205, RGB_to_BRG(C_ORANGE));
 8001924:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001928:	f7ff fdce 	bl	80014c8 <RGB_to_BRG>
 800192c:	4603      	mov	r3, r0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	23cd      	movs	r3, #205	; 0xcd
 8001932:	22e1      	movs	r2, #225	; 0xe1
 8001934:	2196      	movs	r1, #150	; 0x96
 8001936:	200a      	movs	r0, #10
 8001938:	f011 f984 	bl	8012c44 <UG_FillFrame>
	UG_FillFrame(15, 155, 220, 200, RGB_to_BRG(C_WHITE));
 800193c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001940:	f7ff fdc2 	bl	80014c8 <RGB_to_BRG>
 8001944:	4603      	mov	r3, r0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	23c8      	movs	r3, #200	; 0xc8
 800194a:	22dc      	movs	r2, #220	; 0xdc
 800194c:	219b      	movs	r1, #155	; 0x9b
 800194e:	200f      	movs	r0, #15
 8001950:	f011 f978 	bl	8012c44 <UG_FillFrame>
	LCD_PutStr(20, 150, text, FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8001954:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001958:	f7ff fdb6 	bl	80014c8 <RGB_to_BRG>
 800195c:	4603      	mov	r3, r0
 800195e:	461c      	mov	r4, r3
 8001960:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001964:	f7ff fdb0 	bl	80014c8 <RGB_to_BRG>
 8001968:	4603      	mov	r3, r0
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	9400      	str	r4, [sp, #0]
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <show_popup+0x80>)
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	2196      	movs	r1, #150	; 0x96
 8001974:	2014      	movs	r0, #20
 8001976:	f004 ff15 	bl	80067a4 <LCD_PutStr>
	HAL_Delay(2000);
 800197a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800197e:	f005 f82b 	bl	80069d8 <HAL_Delay>
	LCD_draw_main_screen();
 8001982:	f001 f96f 	bl	8002c64 <LCD_draw_main_screen>
	standby_state_written_to_LCD = 0;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <show_popup+0x84>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
	sleep_state_written_to_LCD = 0;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <show_popup+0x88>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	0801c7f0 	.word	0x0801c7f0
 80019a0:	20000608 	.word	0x20000608
 80019a4:	20000607 	.word	0x20000607

080019a8 <settings_menue>:

void settings_menue(){
 80019a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019ac:	b08d      	sub	sp, #52	; 0x34
 80019ae:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 80019b0:	2120      	movs	r1, #32
 80019b2:	48c7      	ldr	r0, [pc, #796]	; (8001cd0 <settings_menue+0x328>)
 80019b4:	f008 fd46 	bl	800a444 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	f040 831c 	bne.w	8001ff8 <settings_menue+0x650>
		if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 80019c0:	4bc4      	ldr	r3, [pc, #784]	; (8001cd4 <settings_menue+0x32c>)
 80019c2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	f7ff f8a3 	bl	8000b18 <__aeabi_dcmpeq>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10b      	bne.n	80019f0 <settings_menue+0x48>
 80019d8:	4bbe      	ldr	r3, [pc, #760]	; (8001cd4 <settings_menue+0x32c>)
 80019da:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e6:	f7ff f897 	bl	8000b18 <__aeabi_dcmpeq>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d026      	beq.n	8001a3e <settings_menue+0x96>
			LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019f0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019f4:	f7ff fd68 	bl	80014c8 <RGB_to_BRG>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461c      	mov	r4, r3
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff fd63 	bl	80014c8 <RGB_to_BRG>
 8001a02:	4603      	mov	r3, r0
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	9400      	str	r4, [sp, #0]
 8001a08:	4bb3      	ldr	r3, [pc, #716]	; (8001cd8 <settings_menue+0x330>)
 8001a0a:	4ab4      	ldr	r2, [pc, #720]	; (8001cdc <settings_menue+0x334>)
 8001a0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a10:	2000      	movs	r0, #0
 8001a12:	f004 fec7 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001a16:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001a1a:	f7ff fd55 	bl	80014c8 <RGB_to_BRG>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461c      	mov	r4, r3
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fd50 	bl	80014c8 <RGB_to_BRG>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	9400      	str	r4, [sp, #0]
 8001a2e:	4baa      	ldr	r3, [pc, #680]	; (8001cd8 <settings_menue+0x330>)
 8001a30:	4aab      	ldr	r2, [pc, #684]	; (8001ce0 <settings_menue+0x338>)
 8001a32:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a36:	2096      	movs	r0, #150	; 0x96
 8001a38:	f004 feb4 	bl	80067a4 <LCD_PutStr>
 8001a3c:	e023      	b.n	8001a86 <settings_menue+0xde>
		}
		else{
			LCD_PutStr(0, 215, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001a3e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001a42:	f7ff fd41 	bl	80014c8 <RGB_to_BRG>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461c      	mov	r4, r3
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fd3c 	bl	80014c8 <RGB_to_BRG>
 8001a50:	4603      	mov	r3, r0
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	9400      	str	r4, [sp, #0]
 8001a56:	4ba0      	ldr	r3, [pc, #640]	; (8001cd8 <settings_menue+0x330>)
 8001a58:	4aa0      	ldr	r2, [pc, #640]	; (8001cdc <settings_menue+0x334>)
 8001a5a:	21d7      	movs	r1, #215	; 0xd7
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f004 fea1 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(150, 215, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001a62:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001a66:	f7ff fd2f 	bl	80014c8 <RGB_to_BRG>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461c      	mov	r4, r3
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fd2a 	bl	80014c8 <RGB_to_BRG>
 8001a74:	4603      	mov	r3, r0
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	9400      	str	r4, [sp, #0]
 8001a7a:	4b97      	ldr	r3, [pc, #604]	; (8001cd8 <settings_menue+0x330>)
 8001a7c:	4a98      	ldr	r2, [pc, #608]	; (8001ce0 <settings_menue+0x338>)
 8001a7e:	21d7      	movs	r1, #215	; 0xd7
 8001a80:	2096      	movs	r0, #150	; 0x96
 8001a82:	f004 fe8f 	bl	80067a4 <LCD_PutStr>
		}


		TIM2->CNT = 1000;
 8001a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8001aaa:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001aae:	f7ff fd0b 	bl	80014c8 <RGB_to_BRG>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461c      	mov	r4, r3
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff fd06 	bl	80014c8 <RGB_to_BRG>
 8001abc:	4603      	mov	r3, r0
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	9400      	str	r4, [sp, #0]
 8001ac2:	4b85      	ldr	r3, [pc, #532]	; (8001cd8 <settings_menue+0x330>)
 8001ac4:	4a87      	ldr	r2, [pc, #540]	; (8001ce4 <settings_menue+0x33c>)
 8001ac6:	210c      	movs	r1, #12
 8001ac8:	203c      	movs	r0, #60	; 0x3c
 8001aca:	f004 fe6b 	bl	80067a4 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8001ace:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001ad2:	f7ff fcf9 	bl	80014c8 <RGB_to_BRG>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2328      	movs	r3, #40	; 0x28
 8001adc:	22f0      	movs	r2, #240	; 0xf0
 8001ade:	2128      	movs	r1, #40	; 0x28
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f004 fe21 	bl	8006728 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8001ae6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001aea:	f7ff fced 	bl	80014c8 <RGB_to_BRG>
 8001aee:	4603      	mov	r3, r0
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2329      	movs	r3, #41	; 0x29
 8001af4:	22f0      	movs	r2, #240	; 0xf0
 8001af6:	2129      	movs	r1, #41	; 0x29
 8001af8:	2000      	movs	r0, #0
 8001afa:	f004 fe15 	bl	8006728 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8001afe:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001b02:	f7ff fce1 	bl	80014c8 <RGB_to_BRG>
 8001b06:	4603      	mov	r3, r0
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	232a      	movs	r3, #42	; 0x2a
 8001b0c:	22f0      	movs	r2, #240	; 0xf0
 8001b0e:	212a      	movs	r1, #42	; 0x2a
 8001b10:	2000      	movs	r0, #0
 8001b12:	f004 fe09 	bl	8006728 <LCD_DrawLine>

		HAL_Delay(500);
 8001b16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b1a:	f004 ff5d 	bl	80069d8 <HAL_Delay>
		while(menu_active == 1){
 8001b1e:	e267      	b.n	8001ff0 <settings_menue+0x648>
			if(menue_level == 0){
 8001b20:	8c3b      	ldrh	r3, [r7, #32]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d120      	bne.n	8001b68 <settings_menue+0x1c0>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 8001b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fd11 	bl	8000554 <__aeabi_ui2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	ed9f 2b60 	vldr	d2, [pc, #384]	; 8001cb8 <settings_menue+0x310>
 8001b3a:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8001cc0 <settings_menue+0x318>
 8001b3e:	ec43 2b10 	vmov	d0, r2, r3
 8001b42:	f7ff fbf7 	bl	8001334 <clamp>
 8001b46:	ec53 2b10 	vmov	r2, r3, d0
 8001b4a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7ff f851 	bl	8000bf8 <__aeabi_d2uiz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001b5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 8001b68:	8c3b      	ldrh	r3, [r7, #32]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	f040 8091 	bne.w	8001c92 <settings_menue+0x2ea>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001b70:	69b8      	ldr	r0, [r7, #24]
 8001b72:	f7fe fd11 	bl	8000598 <__aeabi_f2d>
 8001b76:	4604      	mov	r4, r0
 8001b78:	460d      	mov	r5, r1
 8001b7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fce7 	bl	8000554 <__aeabi_ui2d>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <settings_menue+0x340>)
 8001b8c:	f7fe fba4 	bl	80002d8 <__aeabi_dsub>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f84e 	bl	8000c38 <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcfa 	bl	8000598 <__aeabi_f2d>
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bac:	f7fe fe76 	bl	800089c <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fb90 	bl	80002dc <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4690      	mov	r8, r2
 8001bc2:	4699      	mov	r9, r3
 8001bc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bce:	ee17 0a90 	vmov	r0, s15
 8001bd2:	f7fe fce1 	bl	8000598 <__aeabi_f2d>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001bdc:	00c9      	lsls	r1, r1, #3
 8001bde:	483d      	ldr	r0, [pc, #244]	; (8001cd4 <settings_menue+0x32c>)
 8001be0:	180c      	adds	r4, r1, r0
 8001be2:	4640      	mov	r0, r8
 8001be4:	4649      	mov	r1, r9
 8001be6:	f7fe fb77 	bl	80002d8 <__aeabi_dsub>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	e9c4 2300 	strd	r2, r3, [r4]
				if ((menu_cursor_position == 5) || (menu_cursor_position == 8)){
 8001bf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bf4:	2b05      	cmp	r3, #5
 8001bf6:	d002      	beq.n	8001bfe <settings_menue+0x256>
 8001bf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d12c      	bne.n	8001c58 <settings_menue+0x2b0>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001bfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4a34      	ldr	r2, [pc, #208]	; (8001cd4 <settings_menue+0x32c>)
 8001c04:	4413      	add	r3, r2
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ffcb 	bl	8000ba8 <__aeabi_d2iz>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bfb8      	it	lt
 8001c18:	425b      	neglt	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fcaa 	bl	8000574 <__aeabi_i2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001cc8 <settings_menue+0x320>
 8001c28:	ec43 2b10 	vmov	d0, r2, r3
 8001c2c:	f019 fb3c 	bl	801b2a8 <fmod>
 8001c30:	eeb0 7a40 	vmov.f32	s14, s0
 8001c34:	eef0 7a60 	vmov.f32	s15, s1
 8001c38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <settings_menue+0x32c>)
 8001c3e:	189c      	adds	r4, r3, r2
 8001c40:	eeb0 0a47 	vmov.f32	s0, s14
 8001c44:	eef0 0a67 	vmov.f32	s1, s15
 8001c48:	f019 fb5c 	bl	801b304 <round>
 8001c4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c50:	eef0 7a60 	vmov.f32	s15, s1
 8001c54:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 8001c58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d019      	beq.n	8001c92 <settings_menue+0x2ea>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001c5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <settings_menue+0x32c>)
 8001c64:	4413      	add	r3, r2
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe ff9b 	bl	8000ba8 <__aeabi_d2iz>
 8001c72:	4603      	mov	r3, r0
 8001c74:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001c78:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001c7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4914      	ldr	r1, [pc, #80]	; (8001cd4 <settings_menue+0x32c>)
 8001c82:	185c      	adds	r4, r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	f7fe fc75 	bl	8000574 <__aeabi_i2d>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 8001c92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c94:	2b0c      	cmp	r3, #12
 8001c96:	d906      	bls.n	8001ca6 <settings_menue+0x2fe>
							menu_cursor_position = menu_length-1;
 8001c98:	230c      	movs	r3, #12
 8001c9a:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 8001c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 6){
 8001ca6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d91f      	bls.n	8001cec <settings_menue+0x344>
				menue_start = menu_cursor_position-6;
 8001cac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cae:	3b06      	subs	r3, #6
 8001cb0:	847b      	strh	r3, [r7, #34]	; 0x22
 8001cb2:	e01d      	b.n	8001cf0 <settings_menue+0x348>
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	412e8480 	.word	0x412e8480
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	408f4000 	.word	0x408f4000
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	40000000 	.word	0x40000000
 8001cd0:	48000400 	.word	0x48000400
 8001cd4:	200006d0 	.word	0x200006d0
 8001cd8:	0801c7f0 	.word	0x0801c7f0
 8001cdc:	0801b5c8 	.word	0x0801b5c8
 8001ce0:	0801b5d4 	.word	0x0801b5d4
 8001ce4:	0801b5dc 	.word	0x0801b5dc
 8001ce8:	408f4000 	.word	0x408f4000
			}
			else{
				menue_start = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	4891      	ldr	r0, [pc, #580]	; (8001f38 <settings_menue+0x590>)
 8001cf4:	f008 fba6 	bl	800a444 <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d127      	bne.n	8001d4e <settings_menue+0x3a6>
 8001cfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d00:	2b09      	cmp	r3, #9
 8001d02:	d824      	bhi.n	8001d4e <settings_menue+0x3a6>
				if(menue_level == 0){
 8001d04:	8c3b      	ldrh	r3, [r7, #32]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <settings_menue+0x37e>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 8001d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4a8b      	ldr	r2, [pc, #556]	; (8001f3c <settings_menue+0x594>)
 8001d10:	4413      	add	r3, r2
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe ff8d 	bl	8000c38 <__aeabi_d2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 8001d22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d24:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 8001d26:	8c3b      	ldrh	r3, [r7, #32]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d106      	bne.n	8001d3a <settings_menue+0x392>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001d2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d2e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d32:	005a      	lsls	r2, r3, #1
 8001d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001d3a:	8c3b      	ldrh	r3, [r7, #32]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bfb8      	it	lt
 8001d42:	425b      	neglt	r3, r3
 8001d44:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 8001d46:	20c8      	movs	r0, #200	; 0xc8
 8001d48:	f004 fe46 	bl	80069d8 <HAL_Delay>
 8001d4c:	e02e      	b.n	8001dac <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001d4e:	2120      	movs	r1, #32
 8001d50:	4879      	ldr	r0, [pc, #484]	; (8001f38 <settings_menue+0x590>)
 8001d52:	f008 fb77 	bl	800a444 <HAL_GPIO_ReadPin>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <settings_menue+0x3c0>
 8001d5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d102      	bne.n	8001d68 <settings_menue+0x3c0>
				menu_active = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	83fb      	strh	r3, [r7, #30]
 8001d66:	e021      	b.n	8001dac <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001d68:	2120      	movs	r1, #32
 8001d6a:	4873      	ldr	r0, [pc, #460]	; (8001f38 <settings_menue+0x590>)
 8001d6c:	f008 fb6a 	bl	800a444 <HAL_GPIO_ReadPin>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d108      	bne.n	8001d88 <settings_menue+0x3e0>
 8001d76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d78:	2b0b      	cmp	r3, #11
 8001d7a:	d105      	bne.n	8001d88 <settings_menue+0x3e0>
				menu_active = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 8001d80:	486e      	ldr	r0, [pc, #440]	; (8001f3c <settings_menue+0x594>)
 8001d82:	f7ff fa0f 	bl	80011a4 <FlashWrite>
 8001d86:	e011      	b.n	8001dac <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 8001d88:	2120      	movs	r1, #32
 8001d8a:	486b      	ldr	r0, [pc, #428]	; (8001f38 <settings_menue+0x590>)
 8001d8c:	f008 fb5a 	bl	800a444 <HAL_GPIO_ReadPin>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10a      	bne.n	8001dac <settings_menue+0x404>
 8001d96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d98:	2b0a      	cmp	r3, #10
 8001d9a:	d107      	bne.n	8001dac <settings_menue+0x404>
				flash_values = default_flash_values;
 8001d9c:	4a67      	ldr	r2, [pc, #412]	; (8001f3c <settings_menue+0x594>)
 8001d9e:	4b68      	ldr	r3, [pc, #416]	; (8001f40 <settings_menue+0x598>)
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	2350      	movs	r3, #80	; 0x50
 8001da6:	461a      	mov	r2, r3
 8001da8:	f015 fec3 	bl	8017b32 <memcpy>
			}

			for(int i = menue_start;i<=menue_start+6;i++){
 8001dac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e118      	b.n	8001fe4 <settings_menue+0x63c>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001db2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d12b      	bne.n	8001e12 <settings_menue+0x46a>
 8001dba:	8c3b      	ldrh	r3, [r7, #32]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d128      	bne.n	8001e12 <settings_menue+0x46a>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001dc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	461a      	mov	r2, r3
 8001dd0:	0091      	lsls	r1, r2, #2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	332d      	adds	r3, #45	; 0x2d
 8001ddc:	b29c      	uxth	r4, r3
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4a56      	ldr	r2, [pc, #344]	; (8001f44 <settings_menue+0x59c>)
 8001dea:	189d      	adds	r5, r3, r2
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff fb6b 	bl	80014c8 <RGB_to_BRG>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461e      	mov	r6, r3
 8001df6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dfa:	f7ff fb65 	bl	80014c8 <RGB_to_BRG>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	9600      	str	r6, [sp, #0]
 8001e04:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <settings_menue+0x5a0>)
 8001e06:	462a      	mov	r2, r5
 8001e08:	4621      	mov	r1, r4
 8001e0a:	2005      	movs	r0, #5
 8001e0c:	f004 fcca 	bl	80067a4 <LCD_PutStr>
 8001e10:	e027      	b.n	8001e62 <settings_menue+0x4ba>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	0092      	lsls	r2, r2, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	0091      	lsls	r1, r2, #2
 8001e24:	461a      	mov	r2, r3
 8001e26:	460b      	mov	r3, r1
 8001e28:	4413      	add	r3, r2
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	332d      	adds	r3, #45	; 0x2d
 8001e2e:	b29c      	uxth	r4, r3
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4a42      	ldr	r2, [pc, #264]	; (8001f44 <settings_menue+0x59c>)
 8001e3c:	189d      	adds	r5, r3, r2
 8001e3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e42:	f7ff fb41 	bl	80014c8 <RGB_to_BRG>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461e      	mov	r6, r3
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7ff fb3c 	bl	80014c8 <RGB_to_BRG>
 8001e50:	4603      	mov	r3, r0
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	9600      	str	r6, [sp, #0]
 8001e56:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <settings_menue+0x5a0>)
 8001e58:	462a      	mov	r2, r5
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	2005      	movs	r0, #5
 8001e5e:	f004 fca1 	bl	80067a4 <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001e62:	463b      	mov	r3, r7
 8001e64:	2214      	movs	r2, #20
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f015 fde2 	bl	8017a32 <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4a32      	ldr	r2, [pc, #200]	; (8001f3c <settings_menue+0x594>)
 8001e74:	4413      	add	r3, r2
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	4638      	mov	r0, r7
 8001e7c:	4933      	ldr	r1, [pc, #204]	; (8001f4c <settings_menue+0x5a4>)
 8001e7e:	f015 fd75 	bl	801796c <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4a2d      	ldr	r2, [pc, #180]	; (8001f3c <settings_menue+0x594>)
 8001e88:	4413      	add	r3, r2
 8001e8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <settings_menue+0x5a8>)
 8001e94:	f7fe fe4a 	bl	8000b2c <__aeabi_dcmplt>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <settings_menue+0x508>
					str[1] = 32;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	713b      	strb	r3, [r7, #4]
 8001eae:	e011      	b.n	8001ed4 <settings_menue+0x52c>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <settings_menue+0x594>)
 8001eb6:	4413      	add	r3, r2
 8001eb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ebc:	a31c      	add	r3, pc, #112	; (adr r3, 8001f30 <settings_menue+0x588>)
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	f7fe fe33 	bl	8000b2c <__aeabi_dcmplt>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <settings_menue+0x52c>
					str[2] = 32;
 8001ecc:	2320      	movs	r3, #32
 8001ece:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2b09      	cmp	r3, #9
 8001ed8:	dc5d      	bgt.n	8001f96 <settings_menue+0x5ee>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001eda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d138      	bne.n	8001f54 <settings_menue+0x5ac>
 8001ee2:	8c3b      	ldrh	r3, [r7, #32]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d135      	bne.n	8001f54 <settings_menue+0x5ac>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	0091      	lsls	r1, r2, #2
 8001efa:	461a      	mov	r2, r3
 8001efc:	460b      	mov	r3, r1
 8001efe:	4413      	add	r3, r2
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	332d      	adds	r3, #45	; 0x2d
 8001f04:	b29c      	uxth	r4, r3
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff fade 	bl	80014c8 <RGB_to_BRG>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461d      	mov	r5, r3
 8001f10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f14:	f7ff fad8 	bl	80014c8 <RGB_to_BRG>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	463a      	mov	r2, r7
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	9500      	str	r5, [sp, #0]
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <settings_menue+0x5a0>)
 8001f22:	4621      	mov	r1, r4
 8001f24:	20c8      	movs	r0, #200	; 0xc8
 8001f26:	f004 fc3d 	bl	80067a4 <LCD_PutStr>
 8001f2a:	e034      	b.n	8001f96 <settings_menue+0x5ee>
 8001f2c:	f3af 8000 	nop.w
 8001f30:	00000000 	.word	0x00000000
 8001f34:	4058e000 	.word	0x4058e000
 8001f38:	48000400 	.word	0x48000400
 8001f3c:	200006d0 	.word	0x200006d0
 8001f40:	20000088 	.word	0x20000088
 8001f44:	200000d8 	.word	0x200000d8
 8001f48:	0801c7f0 	.word	0x0801c7f0
 8001f4c:	0801b5e8 	.word	0x0801b5e8
 8001f50:	40230000 	.word	0x40230000
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	461a      	mov	r2, r3
 8001f64:	0091      	lsls	r1, r2, #2
 8001f66:	461a      	mov	r2, r3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	332d      	adds	r3, #45	; 0x2d
 8001f70:	b29c      	uxth	r4, r3
 8001f72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f76:	f7ff faa7 	bl	80014c8 <RGB_to_BRG>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461d      	mov	r5, r3
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff faa2 	bl	80014c8 <RGB_to_BRG>
 8001f84:	4603      	mov	r3, r0
 8001f86:	463a      	mov	r2, r7
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	9500      	str	r5, [sp, #0]
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <settings_menue+0x65c>)
 8001f8e:	4621      	mov	r1, r4
 8001f90:	20c8      	movs	r0, #200	; 0xc8
 8001f92:	f004 fc07 	bl	80067a4 <LCD_PutStr>
					}
				}
				if(i >= menu_length-3){
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b09      	cmp	r3, #9
 8001f9a:	dd20      	ble.n	8001fde <settings_menue+0x636>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	0092      	lsls	r2, r2, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	461a      	mov	r2, r3
 8001fac:	0091      	lsls	r1, r2, #2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	332d      	adds	r3, #45	; 0x2d
 8001fb8:	b29c      	uxth	r4, r3
 8001fba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fbe:	f7ff fa83 	bl	80014c8 <RGB_to_BRG>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461d      	mov	r5, r3
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff fa7e 	bl	80014c8 <RGB_to_BRG>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	9500      	str	r5, [sp, #0]
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <settings_menue+0x65c>)
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <settings_menue+0x660>)
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	20c8      	movs	r0, #200	; 0xc8
 8001fda:	f004 fbe3 	bl	80067a4 <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+6;i++){
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fe6:	3306      	adds	r3, #6
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	f77f aee1 	ble.w	8001db2 <settings_menue+0x40a>
		while(menu_active == 1){
 8001ff0:	8bfb      	ldrh	r3, [r7, #30]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	f43f ad94 	beq.w	8001b20 <settings_menue+0x178>
				}

			}
		}
	}
}
 8001ff8:	bf00      	nop
 8001ffa:	372c      	adds	r7, #44	; 0x2c
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002002:	bf00      	nop
 8002004:	0801c7f0 	.word	0x0801c7f0
 8002008:	0801b5f0 	.word	0x0801b5f0
 800200c:	00000000 	.word	0x00000000

08002010 <update_display>:

void update_display(){
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b083      	sub	sp, #12
 8002014:	af02      	add	r7, sp, #8
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8002016:	4b86      	ldr	r3, [pc, #536]	; (8002230 <update_display+0x220>)
 8002018:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	f7fe fd78 	bl	8000b18 <__aeabi_dcmpeq>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <update_display+0x38>
 800202e:	4b80      	ldr	r3, [pc, #512]	; (8002230 <update_display+0x220>)
 8002030:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800203c:	f7fe fd6c 	bl	8000b18 <__aeabi_dcmpeq>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 82f0 	beq.w	8002628 <update_display+0x618>
		memset(&buffer, '\0', sizeof(buffer));
 8002048:	2228      	movs	r2, #40	; 0x28
 800204a:	2100      	movs	r1, #0
 800204c:	4879      	ldr	r0, [pc, #484]	; (8002234 <update_display+0x224>)
 800204e:	f015 fcf0 	bl	8017a32 <memset>
		sprintf(buffer, "%.f", sensor_values.set_temperature);
 8002052:	4b79      	ldr	r3, [pc, #484]	; (8002238 <update_display+0x228>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	4978      	ldr	r1, [pc, #480]	; (800223c <update_display+0x22c>)
 800205a:	4876      	ldr	r0, [pc, #472]	; (8002234 <update_display+0x224>)
 800205c:	f015 fc86 	bl	801796c <siprintf>
		if(sensor_values.set_temperature < 99.5){
 8002060:	4b75      	ldr	r3, [pc, #468]	; (8002238 <update_display+0x228>)
 8002062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002066:	a370      	add	r3, pc, #448	; (adr r3, 8002228 <update_display+0x218>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe fd5e 	bl	8000b2c <__aeabi_dcmplt>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <update_display+0x72>
			buffer[2] = 32;
 8002076:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <update_display+0x224>)
 8002078:	2220      	movs	r2, #32
 800207a:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 800207c:	4b6d      	ldr	r3, [pc, #436]	; (8002234 <update_display+0x224>)
 800207e:	2220      	movs	r2, #32
 8002080:	70da      	strb	r2, [r3, #3]
		}
		LCD_PutStr(14, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002082:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002086:	f7ff fa1f 	bl	80014c8 <RGB_to_BRG>
 800208a:	4603      	mov	r3, r0
 800208c:	461c      	mov	r4, r3
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff fa1a 	bl	80014c8 <RGB_to_BRG>
 8002094:	4603      	mov	r3, r0
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	9400      	str	r4, [sp, #0]
 800209a:	4b69      	ldr	r3, [pc, #420]	; (8002240 <update_display+0x230>)
 800209c:	4a65      	ldr	r2, [pc, #404]	; (8002234 <update_display+0x224>)
 800209e:	214b      	movs	r1, #75	; 0x4b
 80020a0:	200e      	movs	r0, #14
 80020a2:	f004 fb7f 	bl	80067a4 <LCD_PutStr>

		if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 80020a6:	4b64      	ldr	r3, [pc, #400]	; (8002238 <update_display+0x228>)
 80020a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80020ac:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80020b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b8:	d512      	bpl.n	80020e0 <update_display+0xd0>
			LCD_PutStr(10, 165, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80020ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020be:	f7ff fa03 	bl	80014c8 <RGB_to_BRG>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461c      	mov	r4, r3
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff f9fe 	bl	80014c8 <RGB_to_BRG>
 80020cc:	4603      	mov	r3, r0
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	9400      	str	r4, [sp, #0]
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <update_display+0x230>)
 80020d4:	4a5b      	ldr	r2, [pc, #364]	; (8002244 <update_display+0x234>)
 80020d6:	21a5      	movs	r1, #165	; 0xa5
 80020d8:	200a      	movs	r0, #10
 80020da:	f004 fb63 	bl	80067a4 <LCD_PutStr>
 80020de:	e02e      	b.n	800213e <update_display+0x12e>
		}
		else{
			memset(&buffer, '\0', sizeof(buffer));
 80020e0:	2228      	movs	r2, #40	; 0x28
 80020e2:	2100      	movs	r1, #0
 80020e4:	4853      	ldr	r0, [pc, #332]	; (8002234 <update_display+0x224>)
 80020e6:	f015 fca4 	bl	8017a32 <memset>
			sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 80020ea:	4b53      	ldr	r3, [pc, #332]	; (8002238 <update_display+0x228>)
 80020ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020f0:	4952      	ldr	r1, [pc, #328]	; (800223c <update_display+0x22c>)
 80020f2:	4850      	ldr	r0, [pc, #320]	; (8002234 <update_display+0x224>)
 80020f4:	f015 fc3a 	bl	801796c <siprintf>
			if(sensor_values.thermocouple_temperature < 99.5){
 80020f8:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <update_display+0x228>)
 80020fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020fe:	a34a      	add	r3, pc, #296	; (adr r3, 8002228 <update_display+0x218>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe fd12 	bl	8000b2c <__aeabi_dcmplt>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <update_display+0x10a>
				buffer[2] = 32;
 800210e:	4b49      	ldr	r3, [pc, #292]	; (8002234 <update_display+0x224>)
 8002110:	2220      	movs	r2, #32
 8002112:	709a      	strb	r2, [r3, #2]
				buffer[3] = 32;
 8002114:	4b47      	ldr	r3, [pc, #284]	; (8002234 <update_display+0x224>)
 8002116:	2220      	movs	r2, #32
 8002118:	70da      	strb	r2, [r3, #3]
			}
			LCD_PutStr(14, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800211a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800211e:	f7ff f9d3 	bl	80014c8 <RGB_to_BRG>
 8002122:	4603      	mov	r3, r0
 8002124:	461c      	mov	r4, r3
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff f9ce 	bl	80014c8 <RGB_to_BRG>
 800212c:	4603      	mov	r3, r0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	9400      	str	r4, [sp, #0]
 8002132:	4b43      	ldr	r3, [pc, #268]	; (8002240 <update_display+0x230>)
 8002134:	4a3f      	ldr	r2, [pc, #252]	; (8002234 <update_display+0x224>)
 8002136:	21a5      	movs	r1, #165	; 0xa5
 8002138:	200e      	movs	r0, #14
 800213a:	f004 fb33 	bl	80067a4 <LCD_PutStr>
		}

		memset(&buffer, '\0', sizeof(buffer));
 800213e:	2228      	movs	r2, #40	; 0x28
 8002140:	2100      	movs	r1, #0
 8002142:	483c      	ldr	r0, [pc, #240]	; (8002234 <update_display+0x224>)
 8002144:	f015 fc75 	bl	8017a32 <memset>
		sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 8002148:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <update_display+0x228>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fa23 	bl	8000598 <__aeabi_f2d>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	493c      	ldr	r1, [pc, #240]	; (8002248 <update_display+0x238>)
 8002158:	4836      	ldr	r0, [pc, #216]	; (8002234 <update_display+0x224>)
 800215a:	f015 fc07 	bl	801796c <siprintf>
		LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800215e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002162:	f7ff f9b1 	bl	80014c8 <RGB_to_BRG>
 8002166:	4603      	mov	r3, r0
 8002168:	461c      	mov	r4, r3
 800216a:	2000      	movs	r0, #0
 800216c:	f7ff f9ac 	bl	80014c8 <RGB_to_BRG>
 8002170:	4603      	mov	r3, r0
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	9400      	str	r4, [sp, #0]
 8002176:	4b35      	ldr	r3, [pc, #212]	; (800224c <update_display+0x23c>)
 8002178:	4a2e      	ldr	r2, [pc, #184]	; (8002234 <update_display+0x224>)
 800217a:	21ff      	movs	r1, #255	; 0xff
 800217c:	2064      	movs	r0, #100	; 0x64
 800217e:	f004 fb11 	bl	80067a4 <LCD_PutStr>

		memset(&buffer, '\0', sizeof(buffer));
 8002182:	2228      	movs	r2, #40	; 0x28
 8002184:	2100      	movs	r1, #0
 8002186:	482b      	ldr	r0, [pc, #172]	; (8002234 <update_display+0x224>)
 8002188:	f015 fc53 	bl	8017a32 <memset>
		sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 800218c:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <update_display+0x228>)
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fa01 	bl	8000598 <__aeabi_f2d>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	492b      	ldr	r1, [pc, #172]	; (8002248 <update_display+0x238>)
 800219c:	4825      	ldr	r0, [pc, #148]	; (8002234 <update_display+0x224>)
 800219e:	f015 fbe5 	bl	801796c <siprintf>
		LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80021a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021a6:	f7ff f98f 	bl	80014c8 <RGB_to_BRG>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461c      	mov	r4, r3
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7ff f98a 	bl	80014c8 <RGB_to_BRG>
 80021b4:	4603      	mov	r3, r0
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	9400      	str	r4, [sp, #0]
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <update_display+0x23c>)
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <update_display+0x224>)
 80021be:	f240 1113 	movw	r1, #275	; 0x113
 80021c2:	2064      	movs	r0, #100	; 0x64
 80021c4:	f004 faee 	bl	80067a4 <LCD_PutStr>

		if(handle == T210){
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <update_display+0x240>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d112      	bne.n	80021f6 <update_display+0x1e6>
			LCD_PutStr(100, 235, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80021d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021d4:	f7ff f978 	bl	80014c8 <RGB_to_BRG>
 80021d8:	4603      	mov	r3, r0
 80021da:	461c      	mov	r4, r3
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff f973 	bl	80014c8 <RGB_to_BRG>
 80021e2:	4603      	mov	r3, r0
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	9400      	str	r4, [sp, #0]
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <update_display+0x23c>)
 80021ea:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <update_display+0x244>)
 80021ec:	21eb      	movs	r1, #235	; 0xeb
 80021ee:	2064      	movs	r0, #100	; 0x64
 80021f0:	f004 fad8 	bl	80067a4 <LCD_PutStr>
 80021f4:	e048      	b.n	8002288 <update_display+0x278>
		}
		else if(handle == T245){
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <update_display+0x240>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d12e      	bne.n	800225c <update_display+0x24c>
			LCD_PutStr(100, 235, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80021fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002202:	f7ff f961 	bl	80014c8 <RGB_to_BRG>
 8002206:	4603      	mov	r3, r0
 8002208:	461c      	mov	r4, r3
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff f95c 	bl	80014c8 <RGB_to_BRG>
 8002210:	4603      	mov	r3, r0
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	9400      	str	r4, [sp, #0]
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <update_display+0x23c>)
 8002218:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <update_display+0x248>)
 800221a:	21eb      	movs	r1, #235	; 0xeb
 800221c:	2064      	movs	r0, #100	; 0x64
 800221e:	f004 fac1 	bl	80067a4 <LCD_PutStr>
 8002222:	e031      	b.n	8002288 <update_display+0x278>
 8002224:	f3af 8000 	nop.w
 8002228:	00000000 	.word	0x00000000
 800222c:	4058e000 	.word	0x4058e000
 8002230:	200006d0 	.word	0x200006d0
 8002234:	20000628 	.word	0x20000628
 8002238:	20000038 	.word	0x20000038
 800223c:	0801b5f8 	.word	0x0801b5f8
 8002240:	0801d7e0 	.word	0x0801d7e0
 8002244:	0801b5fc 	.word	0x0801b5fc
 8002248:	0801b604 	.word	0x0801b604
 800224c:	0801b820 	.word	0x0801b820
 8002250:	200005e0 	.word	0x200005e0
 8002254:	0801b60c 	.word	0x0801b60c
 8002258:	0801b614 	.word	0x0801b614
		}
		else if(handle == NT115){
 800225c:	4bab      	ldr	r3, [pc, #684]	; (800250c <update_display+0x4fc>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d111      	bne.n	8002288 <update_display+0x278>
			LCD_PutStr(100, 235, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002264:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002268:	f7ff f92e 	bl	80014c8 <RGB_to_BRG>
 800226c:	4603      	mov	r3, r0
 800226e:	461c      	mov	r4, r3
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff f929 	bl	80014c8 <RGB_to_BRG>
 8002276:	4603      	mov	r3, r0
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	9400      	str	r4, [sp, #0]
 800227c:	4ba4      	ldr	r3, [pc, #656]	; (8002510 <update_display+0x500>)
 800227e:	4aa5      	ldr	r2, [pc, #660]	; (8002514 <update_display+0x504>)
 8002280:	21eb      	movs	r1, #235	; 0xeb
 8002282:	2064      	movs	r0, #100	; 0x64
 8002284:	f004 fa8e 	bl	80067a4 <LCD_PutStr>
		}

		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002288:	4ba3      	ldr	r3, [pc, #652]	; (8002518 <update_display+0x508>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d008      	beq.n	80022a2 <update_display+0x292>
 8002290:	4ba1      	ldr	r3, [pc, #644]	; (8002518 <update_display+0x508>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d004      	beq.n	80022a2 <update_display+0x292>
 8002298:	4b9f      	ldr	r3, [pc, #636]	; (8002518 <update_display+0x508>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b04      	cmp	r3, #4
 800229e:	f040 8098 	bne.w	80023d2 <update_display+0x3c2>
 80022a2:	4b9e      	ldr	r3, [pc, #632]	; (800251c <update_display+0x50c>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 8093 	bne.w	80023d2 <update_display+0x3c2>
			UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 80022ac:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022b0:	f7ff f90a 	bl	80014c8 <RGB_to_BRG>
 80022b4:	4603      	mov	r3, r0
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	f44f 738f 	mov.w	r3, #286	; 0x11e
 80022bc:	22e6      	movs	r2, #230	; 0xe6
 80022be:	2137      	movs	r1, #55	; 0x37
 80022c0:	20d2      	movs	r0, #210	; 0xd2
 80022c2:	f010 fcbf 	bl	8012c44 <UG_FillFrame>
			LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7ff f8fe 	bl	80014c8 <RGB_to_BRG>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461c      	mov	r4, r3
 80022d0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022d4:	f7ff f8f8 	bl	80014c8 <RGB_to_BRG>
 80022d8:	4603      	mov	r3, r0
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	9400      	str	r4, [sp, #0]
 80022de:	4b90      	ldr	r3, [pc, #576]	; (8002520 <update_display+0x510>)
 80022e0:	4a90      	ldr	r2, [pc, #576]	; (8002524 <update_display+0x514>)
 80022e2:	213a      	movs	r1, #58	; 0x3a
 80022e4:	20d6      	movs	r0, #214	; 0xd6
 80022e6:	f004 fa5d 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7ff f8ec 	bl	80014c8 <RGB_to_BRG>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461c      	mov	r4, r3
 80022f4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022f8:	f7ff f8e6 	bl	80014c8 <RGB_to_BRG>
 80022fc:	4603      	mov	r3, r0
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	9400      	str	r4, [sp, #0]
 8002302:	4b87      	ldr	r3, [pc, #540]	; (8002520 <update_display+0x510>)
 8002304:	4a88      	ldr	r2, [pc, #544]	; (8002528 <update_display+0x518>)
 8002306:	215c      	movs	r1, #92	; 0x5c
 8002308:	20d8      	movs	r0, #216	; 0xd8
 800230a:	f004 fa4b 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800230e:	2000      	movs	r0, #0
 8002310:	f7ff f8da 	bl	80014c8 <RGB_to_BRG>
 8002314:	4603      	mov	r3, r0
 8002316:	461c      	mov	r4, r3
 8002318:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800231c:	f7ff f8d4 	bl	80014c8 <RGB_to_BRG>
 8002320:	4603      	mov	r3, r0
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	9400      	str	r4, [sp, #0]
 8002326:	4b7e      	ldr	r3, [pc, #504]	; (8002520 <update_display+0x510>)
 8002328:	4a7e      	ldr	r2, [pc, #504]	; (8002524 <update_display+0x514>)
 800232a:	217e      	movs	r1, #126	; 0x7e
 800232c:	20d6      	movs	r0, #214	; 0xd6
 800232e:	f004 fa39 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002332:	2000      	movs	r0, #0
 8002334:	f7ff f8c8 	bl	80014c8 <RGB_to_BRG>
 8002338:	4603      	mov	r3, r0
 800233a:	461c      	mov	r4, r3
 800233c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002340:	f7ff f8c2 	bl	80014c8 <RGB_to_BRG>
 8002344:	4603      	mov	r3, r0
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	9400      	str	r4, [sp, #0]
 800234a:	4b75      	ldr	r3, [pc, #468]	; (8002520 <update_display+0x510>)
 800234c:	4a76      	ldr	r2, [pc, #472]	; (8002528 <update_display+0x518>)
 800234e:	21a1      	movs	r1, #161	; 0xa1
 8002350:	20d8      	movs	r0, #216	; 0xd8
 8002352:	f004 fa27 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff f8b6 	bl	80014c8 <RGB_to_BRG>
 800235c:	4603      	mov	r3, r0
 800235e:	461c      	mov	r4, r3
 8002360:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002364:	f7ff f8b0 	bl	80014c8 <RGB_to_BRG>
 8002368:	4603      	mov	r3, r0
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	9400      	str	r4, [sp, #0]
 800236e:	4b6c      	ldr	r3, [pc, #432]	; (8002520 <update_display+0x510>)
 8002370:	4a6c      	ldr	r2, [pc, #432]	; (8002524 <update_display+0x514>)
 8002372:	21c2      	movs	r1, #194	; 0xc2
 8002374:	20d6      	movs	r0, #214	; 0xd6
 8002376:	f004 fa15 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800237a:	2000      	movs	r0, #0
 800237c:	f7ff f8a4 	bl	80014c8 <RGB_to_BRG>
 8002380:	4603      	mov	r3, r0
 8002382:	461c      	mov	r4, r3
 8002384:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002388:	f7ff f89e 	bl	80014c8 <RGB_to_BRG>
 800238c:	4603      	mov	r3, r0
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	9400      	str	r4, [sp, #0]
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <update_display+0x510>)
 8002394:	4a64      	ldr	r2, [pc, #400]	; (8002528 <update_display+0x518>)
 8002396:	21e4      	movs	r1, #228	; 0xe4
 8002398:	20d8      	movs	r0, #216	; 0xd8
 800239a:	f004 fa03 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800239e:	2000      	movs	r0, #0
 80023a0:	f7ff f892 	bl	80014c8 <RGB_to_BRG>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461c      	mov	r4, r3
 80023a8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023ac:	f7ff f88c 	bl	80014c8 <RGB_to_BRG>
 80023b0:	4603      	mov	r3, r0
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	9400      	str	r4, [sp, #0]
 80023b6:	4b5a      	ldr	r3, [pc, #360]	; (8002520 <update_display+0x510>)
 80023b8:	4a5a      	ldr	r2, [pc, #360]	; (8002524 <update_display+0x514>)
 80023ba:	f44f 7183 	mov.w	r1, #262	; 0x106
 80023be:	20d6      	movs	r0, #214	; 0xd6
 80023c0:	f004 f9f0 	bl	80067a4 <LCD_PutStr>
			sleep_state_written_to_LCD = 1;
 80023c4:	4b55      	ldr	r3, [pc, #340]	; (800251c <update_display+0x50c>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
			standby_state_written_to_LCD = 0;
 80023ca:	4b58      	ldr	r3, [pc, #352]	; (800252c <update_display+0x51c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	e129      	b.n	8002626 <update_display+0x616>
		}
		else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 80023d2:	4b51      	ldr	r3, [pc, #324]	; (8002518 <update_display+0x508>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f040 80b8 	bne.w	800254c <update_display+0x53c>
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <update_display+0x51c>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f040 80b3 	bne.w	800254c <update_display+0x53c>
			UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 80023e6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023ea:	f7ff f86d 	bl	80014c8 <RGB_to_BRG>
 80023ee:	4603      	mov	r3, r0
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	f44f 738f 	mov.w	r3, #286	; 0x11e
 80023f6:	22e6      	movs	r2, #230	; 0xe6
 80023f8:	2137      	movs	r1, #55	; 0x37
 80023fa:	20d2      	movs	r0, #210	; 0xd2
 80023fc:	f010 fc22 	bl	8012c44 <UG_FillFrame>
			LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff f861 	bl	80014c8 <RGB_to_BRG>
 8002406:	4603      	mov	r3, r0
 8002408:	461c      	mov	r4, r3
 800240a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800240e:	f7ff f85b 	bl	80014c8 <RGB_to_BRG>
 8002412:	4603      	mov	r3, r0
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	9400      	str	r4, [sp, #0]
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <update_display+0x510>)
 800241a:	4a45      	ldr	r2, [pc, #276]	; (8002530 <update_display+0x520>)
 800241c:	213a      	movs	r1, #58	; 0x3a
 800241e:	20d6      	movs	r0, #214	; 0xd6
 8002420:	f004 f9c0 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002424:	2000      	movs	r0, #0
 8002426:	f7ff f84f 	bl	80014c8 <RGB_to_BRG>
 800242a:	4603      	mov	r3, r0
 800242c:	461c      	mov	r4, r3
 800242e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002432:	f7ff f849 	bl	80014c8 <RGB_to_BRG>
 8002436:	4603      	mov	r3, r0
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	9400      	str	r4, [sp, #0]
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <update_display+0x510>)
 800243e:	4a3d      	ldr	r2, [pc, #244]	; (8002534 <update_display+0x524>)
 8002440:	215c      	movs	r1, #92	; 0x5c
 8002442:	20d6      	movs	r0, #214	; 0xd6
 8002444:	f004 f9ae 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff f83d 	bl	80014c8 <RGB_to_BRG>
 800244e:	4603      	mov	r3, r0
 8002450:	461c      	mov	r4, r3
 8002452:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002456:	f7ff f837 	bl	80014c8 <RGB_to_BRG>
 800245a:	4603      	mov	r3, r0
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	9400      	str	r4, [sp, #0]
 8002460:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <update_display+0x510>)
 8002462:	4a35      	ldr	r2, [pc, #212]	; (8002538 <update_display+0x528>)
 8002464:	217e      	movs	r1, #126	; 0x7e
 8002466:	20d6      	movs	r0, #214	; 0xd6
 8002468:	f004 f99c 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800246c:	2000      	movs	r0, #0
 800246e:	f7ff f82b 	bl	80014c8 <RGB_to_BRG>
 8002472:	4603      	mov	r3, r0
 8002474:	461c      	mov	r4, r3
 8002476:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800247a:	f7ff f825 	bl	80014c8 <RGB_to_BRG>
 800247e:	4603      	mov	r3, r0
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	9400      	str	r4, [sp, #0]
 8002484:	4b26      	ldr	r3, [pc, #152]	; (8002520 <update_display+0x510>)
 8002486:	4a2d      	ldr	r2, [pc, #180]	; (800253c <update_display+0x52c>)
 8002488:	21a1      	movs	r1, #161	; 0xa1
 800248a:	20d6      	movs	r0, #214	; 0xd6
 800248c:	f004 f98a 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff f819 	bl	80014c8 <RGB_to_BRG>
 8002496:	4603      	mov	r3, r0
 8002498:	461c      	mov	r4, r3
 800249a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800249e:	f7ff f813 	bl	80014c8 <RGB_to_BRG>
 80024a2:	4603      	mov	r3, r0
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	9400      	str	r4, [sp, #0]
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <update_display+0x510>)
 80024aa:	4a25      	ldr	r2, [pc, #148]	; (8002540 <update_display+0x530>)
 80024ac:	21c2      	movs	r1, #194	; 0xc2
 80024ae:	20d6      	movs	r0, #214	; 0xd6
 80024b0:	f004 f978 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7ff f807 	bl	80014c8 <RGB_to_BRG>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461c      	mov	r4, r3
 80024be:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80024c2:	f7ff f801 	bl	80014c8 <RGB_to_BRG>
 80024c6:	4603      	mov	r3, r0
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	9400      	str	r4, [sp, #0]
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <update_display+0x510>)
 80024ce:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <update_display+0x534>)
 80024d0:	21e4      	movs	r1, #228	; 0xe4
 80024d2:	20d6      	movs	r0, #214	; 0xd6
 80024d4:	f004 f966 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fff5 	bl	80014c8 <RGB_to_BRG>
 80024de:	4603      	mov	r3, r0
 80024e0:	461c      	mov	r4, r3
 80024e2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80024e6:	f7fe ffef 	bl	80014c8 <RGB_to_BRG>
 80024ea:	4603      	mov	r3, r0
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	9400      	str	r4, [sp, #0]
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <update_display+0x510>)
 80024f2:	4a15      	ldr	r2, [pc, #84]	; (8002548 <update_display+0x538>)
 80024f4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80024f8:	20d6      	movs	r0, #214	; 0xd6
 80024fa:	f004 f953 	bl	80067a4 <LCD_PutStr>
			standby_state_written_to_LCD = 1;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <update_display+0x51c>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <update_display+0x50c>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e08c      	b.n	8002626 <update_display+0x616>
 800250c:	200005e0 	.word	0x200005e0
 8002510:	0801b820 	.word	0x0801b820
 8002514:	0801b61c 	.word	0x0801b61c
 8002518:	2000001d 	.word	0x2000001d
 800251c:	20000607 	.word	0x20000607
 8002520:	0801c7f0 	.word	0x0801c7f0
 8002524:	0801b624 	.word	0x0801b624
 8002528:	0801b628 	.word	0x0801b628
 800252c:	20000608 	.word	0x20000608
 8002530:	0801b62c 	.word	0x0801b62c
 8002534:	0801b630 	.word	0x0801b630
 8002538:	0801b634 	.word	0x0801b634
 800253c:	0801b638 	.word	0x0801b638
 8002540:	0801b63c 	.word	0x0801b63c
 8002544:	0801b640 	.word	0x0801b640
 8002548:	0801b644 	.word	0x0801b644
		}
		else if(active_state == RUN){
 800254c:	4bb4      	ldr	r3, [pc, #720]	; (8002820 <update_display+0x810>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f040 836a 	bne.w	8002c2a <update_display+0xc1a>
			UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002556:	4bb3      	ldr	r3, [pc, #716]	; (8002824 <update_display+0x814>)
 8002558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	4bb1      	ldr	r3, [pc, #708]	; (8002828 <update_display+0x818>)
 8002562:	f7fe f99b 	bl	800089c <__aeabi_ddiv>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4bae      	ldr	r3, [pc, #696]	; (800282c <update_display+0x81c>)
 8002574:	f7fe f868 	bl	8000648 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	a1a2      	add	r1, pc, #648	; (adr r1, 8002808 <update_display+0x7f8>)
 800257e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002582:	f7fd fea9 	bl	80002d8 <__aeabi_dsub>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	f7fe fb0b 	bl	8000ba8 <__aeabi_d2iz>
 8002592:	4603      	mov	r3, r0
 8002594:	b21c      	sxth	r4, r3
 8002596:	f248 607e 	movw	r0, #34430	; 0x867e
 800259a:	f7fe ff95 	bl	80014c8 <RGB_to_BRG>
 800259e:	4603      	mov	r3, r0
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	f240 131f 	movw	r3, #287	; 0x11f
 80025a6:	22e6      	movs	r2, #230	; 0xe6
 80025a8:	4621      	mov	r1, r4
 80025aa:	20d2      	movs	r0, #210	; 0xd2
 80025ac:	f010 fb4a 	bl	8012c44 <UG_FillFrame>
			UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 80025b0:	4b9c      	ldr	r3, [pc, #624]	; (8002824 <update_display+0x814>)
 80025b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	4b9b      	ldr	r3, [pc, #620]	; (8002828 <update_display+0x818>)
 80025bc:	f7fe f96e 	bl	800089c <__aeabi_ddiv>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	a391      	add	r3, pc, #580	; (adr r3, 8002810 <update_display+0x800>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f7fe f83b 	bl	8000648 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	a18c      	add	r1, pc, #560	; (adr r1, 8002808 <update_display+0x7f8>)
 80025d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025dc:	f7fd fe7c 	bl	80002d8 <__aeabi_dsub>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	4b90      	ldr	r3, [pc, #576]	; (8002830 <update_display+0x820>)
 80025ee:	f7fd fe73 	bl	80002d8 <__aeabi_dsub>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f7fe fad5 	bl	8000ba8 <__aeabi_d2iz>
 80025fe:	4603      	mov	r3, r0
 8002600:	b21c      	sxth	r4, r3
 8002602:	2000      	movs	r0, #0
 8002604:	f7fe ff60 	bl	80014c8 <RGB_to_BRG>
 8002608:	4603      	mov	r3, r0
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	4623      	mov	r3, r4
 800260e:	22e6      	movs	r2, #230	; 0xe6
 8002610:	2137      	movs	r1, #55	; 0x37
 8002612:	20d2      	movs	r0, #210	; 0xd2
 8002614:	f010 fb16 	bl	8012c44 <UG_FillFrame>
			standby_state_written_to_LCD = 0;
 8002618:	4b86      	ldr	r3, [pc, #536]	; (8002834 <update_display+0x824>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 800261e:	4b86      	ldr	r3, [pc, #536]	; (8002838 <update_display+0x828>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002624:	e301      	b.n	8002c2a <update_display+0xc1a>
 8002626:	e300      	b.n	8002c2a <update_display+0xc1a>
		}
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 8002628:	2228      	movs	r2, #40	; 0x28
 800262a:	2100      	movs	r1, #0
 800262c:	4883      	ldr	r0, [pc, #524]	; (800283c <update_display+0x82c>)
 800262e:	f015 fa00 	bl	8017a32 <memset>
		sprintf(buffer, "%.f", sensor_values.set_temperature);
 8002632:	4b83      	ldr	r3, [pc, #524]	; (8002840 <update_display+0x830>)
 8002634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002638:	4982      	ldr	r1, [pc, #520]	; (8002844 <update_display+0x834>)
 800263a:	4880      	ldr	r0, [pc, #512]	; (800283c <update_display+0x82c>)
 800263c:	f015 f996 	bl	801796c <siprintf>
		if(sensor_values.set_temperature < 99.5){
 8002640:	4b7f      	ldr	r3, [pc, #508]	; (8002840 <update_display+0x830>)
 8002642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002646:	a374      	add	r3, pc, #464	; (adr r3, 8002818 <update_display+0x808>)
 8002648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264c:	f7fe fa6e 	bl	8000b2c <__aeabi_dcmplt>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <update_display+0x652>
			buffer[2] = 32;
 8002656:	4b79      	ldr	r3, [pc, #484]	; (800283c <update_display+0x82c>)
 8002658:	2220      	movs	r2, #32
 800265a:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 800265c:	4b77      	ldr	r3, [pc, #476]	; (800283c <update_display+0x82c>)
 800265e:	2220      	movs	r2, #32
 8002660:	70da      	strb	r2, [r3, #3]
		}
		LCD_PutStr(14, 30, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002662:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002666:	f7fe ff2f 	bl	80014c8 <RGB_to_BRG>
 800266a:	4603      	mov	r3, r0
 800266c:	461c      	mov	r4, r3
 800266e:	2000      	movs	r0, #0
 8002670:	f7fe ff2a 	bl	80014c8 <RGB_to_BRG>
 8002674:	4603      	mov	r3, r0
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	9400      	str	r4, [sp, #0]
 800267a:	4b73      	ldr	r3, [pc, #460]	; (8002848 <update_display+0x838>)
 800267c:	4a6f      	ldr	r2, [pc, #444]	; (800283c <update_display+0x82c>)
 800267e:	211e      	movs	r1, #30
 8002680:	200e      	movs	r0, #14
 8002682:	f004 f88f 	bl	80067a4 <LCD_PutStr>

		if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 8002686:	4b6e      	ldr	r3, [pc, #440]	; (8002840 <update_display+0x830>)
 8002688:	edd3 7a05 	vldr	s15, [r3, #20]
 800268c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002698:	d512      	bpl.n	80026c0 <update_display+0x6b0>
			LCD_PutStr(10, 120, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800269a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800269e:	f7fe ff13 	bl	80014c8 <RGB_to_BRG>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461c      	mov	r4, r3
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7fe ff0e 	bl	80014c8 <RGB_to_BRG>
 80026ac:	4603      	mov	r3, r0
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	9400      	str	r4, [sp, #0]
 80026b2:	4b65      	ldr	r3, [pc, #404]	; (8002848 <update_display+0x838>)
 80026b4:	4a65      	ldr	r2, [pc, #404]	; (800284c <update_display+0x83c>)
 80026b6:	2178      	movs	r1, #120	; 0x78
 80026b8:	200a      	movs	r0, #10
 80026ba:	f004 f873 	bl	80067a4 <LCD_PutStr>
 80026be:	e02e      	b.n	800271e <update_display+0x70e>
		}
		else{
			memset(&buffer, '\0', sizeof(buffer));
 80026c0:	2228      	movs	r2, #40	; 0x28
 80026c2:	2100      	movs	r1, #0
 80026c4:	485d      	ldr	r0, [pc, #372]	; (800283c <update_display+0x82c>)
 80026c6:	f015 f9b4 	bl	8017a32 <memset>
			sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 80026ca:	4b5d      	ldr	r3, [pc, #372]	; (8002840 <update_display+0x830>)
 80026cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026d0:	495c      	ldr	r1, [pc, #368]	; (8002844 <update_display+0x834>)
 80026d2:	485a      	ldr	r0, [pc, #360]	; (800283c <update_display+0x82c>)
 80026d4:	f015 f94a 	bl	801796c <siprintf>
			if(sensor_values.thermocouple_temperature < 99.5){
 80026d8:	4b59      	ldr	r3, [pc, #356]	; (8002840 <update_display+0x830>)
 80026da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80026de:	a34e      	add	r3, pc, #312	; (adr r3, 8002818 <update_display+0x808>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fe fa22 	bl	8000b2c <__aeabi_dcmplt>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <update_display+0x6ea>
				buffer[2] = 32;
 80026ee:	4b53      	ldr	r3, [pc, #332]	; (800283c <update_display+0x82c>)
 80026f0:	2220      	movs	r2, #32
 80026f2:	709a      	strb	r2, [r3, #2]
				buffer[3] = 32;
 80026f4:	4b51      	ldr	r3, [pc, #324]	; (800283c <update_display+0x82c>)
 80026f6:	2220      	movs	r2, #32
 80026f8:	70da      	strb	r2, [r3, #3]
			}
			LCD_PutStr(14, 120, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026fe:	f7fe fee3 	bl	80014c8 <RGB_to_BRG>
 8002702:	4603      	mov	r3, r0
 8002704:	461c      	mov	r4, r3
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe fede 	bl	80014c8 <RGB_to_BRG>
 800270c:	4603      	mov	r3, r0
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	9400      	str	r4, [sp, #0]
 8002712:	4b4d      	ldr	r3, [pc, #308]	; (8002848 <update_display+0x838>)
 8002714:	4a49      	ldr	r2, [pc, #292]	; (800283c <update_display+0x82c>)
 8002716:	2178      	movs	r1, #120	; 0x78
 8002718:	200e      	movs	r0, #14
 800271a:	f004 f843 	bl	80067a4 <LCD_PutStr>
		}

		memset(&buffer, '\0', sizeof(buffer));
 800271e:	2228      	movs	r2, #40	; 0x28
 8002720:	2100      	movs	r1, #0
 8002722:	4846      	ldr	r0, [pc, #280]	; (800283c <update_display+0x82c>)
 8002724:	f015 f985 	bl	8017a32 <memset>
		sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 8002728:	4b45      	ldr	r3, [pc, #276]	; (8002840 <update_display+0x830>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd ff33 	bl	8000598 <__aeabi_f2d>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4946      	ldr	r1, [pc, #280]	; (8002850 <update_display+0x840>)
 8002738:	4840      	ldr	r0, [pc, #256]	; (800283c <update_display+0x82c>)
 800273a:	f015 f917 	bl	801796c <siprintf>
		LCD_PutStr(100, 195, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800273e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002742:	f7fe fec1 	bl	80014c8 <RGB_to_BRG>
 8002746:	4603      	mov	r3, r0
 8002748:	461c      	mov	r4, r3
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe febc 	bl	80014c8 <RGB_to_BRG>
 8002750:	4603      	mov	r3, r0
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	9400      	str	r4, [sp, #0]
 8002756:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <update_display+0x844>)
 8002758:	4a38      	ldr	r2, [pc, #224]	; (800283c <update_display+0x82c>)
 800275a:	21c3      	movs	r1, #195	; 0xc3
 800275c:	2064      	movs	r0, #100	; 0x64
 800275e:	f004 f821 	bl	80067a4 <LCD_PutStr>

		memset(&buffer, '\0', sizeof(buffer));
 8002762:	2228      	movs	r2, #40	; 0x28
 8002764:	2100      	movs	r1, #0
 8002766:	4835      	ldr	r0, [pc, #212]	; (800283c <update_display+0x82c>)
 8002768:	f015 f963 	bl	8017a32 <memset>
		sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 800276c:	4b34      	ldr	r3, [pc, #208]	; (8002840 <update_display+0x830>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd ff11 	bl	8000598 <__aeabi_f2d>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4935      	ldr	r1, [pc, #212]	; (8002850 <update_display+0x840>)
 800277c:	482f      	ldr	r0, [pc, #188]	; (800283c <update_display+0x82c>)
 800277e:	f015 f8f5 	bl	801796c <siprintf>
		LCD_PutStr(100, 210, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002782:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002786:	f7fe fe9f 	bl	80014c8 <RGB_to_BRG>
 800278a:	4603      	mov	r3, r0
 800278c:	461c      	mov	r4, r3
 800278e:	2000      	movs	r0, #0
 8002790:	f7fe fe9a 	bl	80014c8 <RGB_to_BRG>
 8002794:	4603      	mov	r3, r0
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	9400      	str	r4, [sp, #0]
 800279a:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <update_display+0x844>)
 800279c:	4a27      	ldr	r2, [pc, #156]	; (800283c <update_display+0x82c>)
 800279e:	21d2      	movs	r1, #210	; 0xd2
 80027a0:	2064      	movs	r0, #100	; 0x64
 80027a2:	f003 ffff 	bl	80067a4 <LCD_PutStr>

		if(handle == T210){
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <update_display+0x848>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d112      	bne.n	80027d4 <update_display+0x7c4>
			LCD_PutStr(100, 180, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80027ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027b2:	f7fe fe89 	bl	80014c8 <RGB_to_BRG>
 80027b6:	4603      	mov	r3, r0
 80027b8:	461c      	mov	r4, r3
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fe fe84 	bl	80014c8 <RGB_to_BRG>
 80027c0:	4603      	mov	r3, r0
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	9400      	str	r4, [sp, #0]
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <update_display+0x844>)
 80027c8:	4a24      	ldr	r2, [pc, #144]	; (800285c <update_display+0x84c>)
 80027ca:	21b4      	movs	r1, #180	; 0xb4
 80027cc:	2064      	movs	r0, #100	; 0x64
 80027ce:	f003 ffe9 	bl	80067a4 <LCD_PutStr>
 80027d2:	e05d      	b.n	8002890 <update_display+0x880>
		}
		else if(handle == T245){
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <update_display+0x848>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d143      	bne.n	8002864 <update_display+0x854>
			LCD_PutStr(100, 180, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80027dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027e0:	f7fe fe72 	bl	80014c8 <RGB_to_BRG>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461c      	mov	r4, r3
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe fe6d 	bl	80014c8 <RGB_to_BRG>
 80027ee:	4603      	mov	r3, r0
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	9400      	str	r4, [sp, #0]
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <update_display+0x844>)
 80027f6:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <update_display+0x850>)
 80027f8:	21b4      	movs	r1, #180	; 0xb4
 80027fa:	2064      	movs	r0, #100	; 0x64
 80027fc:	f003 ffd2 	bl	80067a4 <LCD_PutStr>
 8002800:	e046      	b.n	8002890 <update_display+0x880>
 8002802:	bf00      	nop
 8002804:	f3af 8000 	nop.w
 8002808:	00000000 	.word	0x00000000
 800280c:	4071f000 	.word	0x4071f000
 8002810:	00000000 	.word	0x00000000
 8002814:	406ce000 	.word	0x406ce000
 8002818:	00000000 	.word	0x00000000
 800281c:	4058e000 	.word	0x4058e000
 8002820:	2000001d 	.word	0x2000001d
 8002824:	20000720 	.word	0x20000720
 8002828:	407f4000 	.word	0x407f4000
 800282c:	406d0000 	.word	0x406d0000
 8002830:	3ff00000 	.word	0x3ff00000
 8002834:	20000608 	.word	0x20000608
 8002838:	20000607 	.word	0x20000607
 800283c:	20000628 	.word	0x20000628
 8002840:	20000038 	.word	0x20000038
 8002844:	0801b5f8 	.word	0x0801b5f8
 8002848:	0801d7e0 	.word	0x0801d7e0
 800284c:	0801b5fc 	.word	0x0801b5fc
 8002850:	0801b604 	.word	0x0801b604
 8002854:	0801b820 	.word	0x0801b820
 8002858:	200005e0 	.word	0x200005e0
 800285c:	0801b60c 	.word	0x0801b60c
 8002860:	0801b614 	.word	0x0801b614
		}
		else if(handle == NT115){
 8002864:	4ba9      	ldr	r3, [pc, #676]	; (8002b0c <update_display+0xafc>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d111      	bne.n	8002890 <update_display+0x880>
			LCD_PutStr(100, 180, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800286c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002870:	f7fe fe2a 	bl	80014c8 <RGB_to_BRG>
 8002874:	4603      	mov	r3, r0
 8002876:	461c      	mov	r4, r3
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe fe25 	bl	80014c8 <RGB_to_BRG>
 800287e:	4603      	mov	r3, r0
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	9400      	str	r4, [sp, #0]
 8002884:	4ba2      	ldr	r3, [pc, #648]	; (8002b10 <update_display+0xb00>)
 8002886:	4aa3      	ldr	r2, [pc, #652]	; (8002b14 <update_display+0xb04>)
 8002888:	21b4      	movs	r1, #180	; 0xb4
 800288a:	2064      	movs	r0, #100	; 0x64
 800288c:	f003 ff8a 	bl	80067a4 <LCD_PutStr>
		}

		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002890:	4ba1      	ldr	r3, [pc, #644]	; (8002b18 <update_display+0xb08>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d008      	beq.n	80028aa <update_display+0x89a>
 8002898:	4b9f      	ldr	r3, [pc, #636]	; (8002b18 <update_display+0xb08>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d004      	beq.n	80028aa <update_display+0x89a>
 80028a0:	4b9d      	ldr	r3, [pc, #628]	; (8002b18 <update_display+0xb08>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	f040 808c 	bne.w	80029c2 <update_display+0x9b2>
 80028aa:	4b9c      	ldr	r3, [pc, #624]	; (8002b1c <update_display+0xb0c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 8087 	bne.w	80029c2 <update_display+0x9b2>
			UG_FillFrame(290,5,310,226, RGB_to_BRG(C_ORANGE));
 80028b4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028b8:	f7fe fe06 	bl	80014c8 <RGB_to_BRG>
 80028bc:	4603      	mov	r3, r0
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	23e2      	movs	r3, #226	; 0xe2
 80028c2:	f44f 729b 	mov.w	r2, #310	; 0x136
 80028c6:	2105      	movs	r1, #5
 80028c8:	f44f 7091 	mov.w	r0, #290	; 0x122
 80028cc:	f010 f9ba 	bl	8012c44 <UG_FillFrame>

			LCD_PutStr(294, 3,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7fe fdf9 	bl	80014c8 <RGB_to_BRG>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461c      	mov	r4, r3
 80028da:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028de:	f7fe fdf3 	bl	80014c8 <RGB_to_BRG>
 80028e2:	4603      	mov	r3, r0
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	9400      	str	r4, [sp, #0]
 80028e8:	4b8d      	ldr	r3, [pc, #564]	; (8002b20 <update_display+0xb10>)
 80028ea:	4a8e      	ldr	r2, [pc, #568]	; (8002b24 <update_display+0xb14>)
 80028ec:	2103      	movs	r1, #3
 80028ee:	f44f 7093 	mov.w	r0, #294	; 0x126
 80028f2:	f003 ff57 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(296, 38, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe fde6 	bl	80014c8 <RGB_to_BRG>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461c      	mov	r4, r3
 8002900:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002904:	f7fe fde0 	bl	80014c8 <RGB_to_BRG>
 8002908:	4603      	mov	r3, r0
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	9400      	str	r4, [sp, #0]
 800290e:	4b84      	ldr	r3, [pc, #528]	; (8002b20 <update_display+0xb10>)
 8002910:	4a85      	ldr	r2, [pc, #532]	; (8002b28 <update_display+0xb18>)
 8002912:	2126      	movs	r1, #38	; 0x26
 8002914:	f44f 7094 	mov.w	r0, #296	; 0x128
 8002918:	f003 ff44 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(294, 73, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800291c:	2000      	movs	r0, #0
 800291e:	f7fe fdd3 	bl	80014c8 <RGB_to_BRG>
 8002922:	4603      	mov	r3, r0
 8002924:	461c      	mov	r4, r3
 8002926:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800292a:	f7fe fdcd 	bl	80014c8 <RGB_to_BRG>
 800292e:	4603      	mov	r3, r0
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	9400      	str	r4, [sp, #0]
 8002934:	4b7a      	ldr	r3, [pc, #488]	; (8002b20 <update_display+0xb10>)
 8002936:	4a7b      	ldr	r2, [pc, #492]	; (8002b24 <update_display+0xb14>)
 8002938:	2149      	movs	r1, #73	; 0x49
 800293a:	f44f 7093 	mov.w	r0, #294	; 0x126
 800293e:	f003 ff31 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(296, 108, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe fdc0 	bl	80014c8 <RGB_to_BRG>
 8002948:	4603      	mov	r3, r0
 800294a:	461c      	mov	r4, r3
 800294c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002950:	f7fe fdba 	bl	80014c8 <RGB_to_BRG>
 8002954:	4603      	mov	r3, r0
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	9400      	str	r4, [sp, #0]
 800295a:	4b71      	ldr	r3, [pc, #452]	; (8002b20 <update_display+0xb10>)
 800295c:	4a72      	ldr	r2, [pc, #456]	; (8002b28 <update_display+0xb18>)
 800295e:	216c      	movs	r1, #108	; 0x6c
 8002960:	f44f 7094 	mov.w	r0, #296	; 0x128
 8002964:	f003 ff1e 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(294, 143, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002968:	2000      	movs	r0, #0
 800296a:	f7fe fdad 	bl	80014c8 <RGB_to_BRG>
 800296e:	4603      	mov	r3, r0
 8002970:	461c      	mov	r4, r3
 8002972:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002976:	f7fe fda7 	bl	80014c8 <RGB_to_BRG>
 800297a:	4603      	mov	r3, r0
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	9400      	str	r4, [sp, #0]
 8002980:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <update_display+0xb10>)
 8002982:	4a68      	ldr	r2, [pc, #416]	; (8002b24 <update_display+0xb14>)
 8002984:	218f      	movs	r1, #143	; 0x8f
 8002986:	f44f 7093 	mov.w	r0, #294	; 0x126
 800298a:	f003 ff0b 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(296, 178, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800298e:	2000      	movs	r0, #0
 8002990:	f7fe fd9a 	bl	80014c8 <RGB_to_BRG>
 8002994:	4603      	mov	r3, r0
 8002996:	461c      	mov	r4, r3
 8002998:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800299c:	f7fe fd94 	bl	80014c8 <RGB_to_BRG>
 80029a0:	4603      	mov	r3, r0
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	9400      	str	r4, [sp, #0]
 80029a6:	4b5e      	ldr	r3, [pc, #376]	; (8002b20 <update_display+0xb10>)
 80029a8:	4a5f      	ldr	r2, [pc, #380]	; (8002b28 <update_display+0xb18>)
 80029aa:	21b2      	movs	r1, #178	; 0xb2
 80029ac:	f44f 7094 	mov.w	r0, #296	; 0x128
 80029b0:	f003 fef8 	bl	80067a4 <LCD_PutStr>
			sleep_state_written_to_LCD = 1;
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <update_display+0xb0c>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
			standby_state_written_to_LCD = 0;
 80029ba:	4b5c      	ldr	r3, [pc, #368]	; (8002b2c <update_display+0xb1c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e134      	b.n	8002c2c <update_display+0xc1c>
		}
		else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 80029c2:	4b55      	ldr	r3, [pc, #340]	; (8002b18 <update_display+0xb08>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 80c0 	bne.w	8002b4c <update_display+0xb3c>
 80029cc:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <update_display+0xb1c>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 80bb 	bne.w	8002b4c <update_display+0xb3c>
			UG_FillFrame(290,5,310,226, RGB_to_BRG(C_ORANGE));
 80029d6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029da:	f7fe fd75 	bl	80014c8 <RGB_to_BRG>
 80029de:	4603      	mov	r3, r0
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	23e2      	movs	r3, #226	; 0xe2
 80029e4:	f44f 729b 	mov.w	r2, #310	; 0x136
 80029e8:	2105      	movs	r1, #5
 80029ea:	f44f 7091 	mov.w	r0, #290	; 0x122
 80029ee:	f010 f929 	bl	8012c44 <UG_FillFrame>
			LCD_PutStr(294, 3,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fe fd68 	bl	80014c8 <RGB_to_BRG>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461c      	mov	r4, r3
 80029fc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a00:	f7fe fd62 	bl	80014c8 <RGB_to_BRG>
 8002a04:	4603      	mov	r3, r0
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	9400      	str	r4, [sp, #0]
 8002a0a:	4b45      	ldr	r3, [pc, #276]	; (8002b20 <update_display+0xb10>)
 8002a0c:	4a48      	ldr	r2, [pc, #288]	; (8002b30 <update_display+0xb20>)
 8002a0e:	2103      	movs	r1, #3
 8002a10:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a14:	f003 fec6 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(294, 32,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7fe fd55 	bl	80014c8 <RGB_to_BRG>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	461c      	mov	r4, r3
 8002a22:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a26:	f7fe fd4f 	bl	80014c8 <RGB_to_BRG>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	9400      	str	r4, [sp, #0]
 8002a30:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <update_display+0xb10>)
 8002a32:	4a40      	ldr	r2, [pc, #256]	; (8002b34 <update_display+0xb24>)
 8002a34:	2120      	movs	r1, #32
 8002a36:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a3a:	f003 feb3 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(294, 61, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7fe fd42 	bl	80014c8 <RGB_to_BRG>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461c      	mov	r4, r3
 8002a48:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a4c:	f7fe fd3c 	bl	80014c8 <RGB_to_BRG>
 8002a50:	4603      	mov	r3, r0
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	9400      	str	r4, [sp, #0]
 8002a56:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <update_display+0xb10>)
 8002a58:	4a37      	ldr	r2, [pc, #220]	; (8002b38 <update_display+0xb28>)
 8002a5a:	213d      	movs	r1, #61	; 0x3d
 8002a5c:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a60:	f003 fea0 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(294, 90, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe fd2f 	bl	80014c8 <RGB_to_BRG>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	461c      	mov	r4, r3
 8002a6e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a72:	f7fe fd29 	bl	80014c8 <RGB_to_BRG>
 8002a76:	4603      	mov	r3, r0
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	9400      	str	r4, [sp, #0]
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <update_display+0xb10>)
 8002a7e:	4a2f      	ldr	r2, [pc, #188]	; (8002b3c <update_display+0xb2c>)
 8002a80:	215a      	movs	r1, #90	; 0x5a
 8002a82:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a86:	f003 fe8d 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(294, 119, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fe fd1c 	bl	80014c8 <RGB_to_BRG>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461c      	mov	r4, r3
 8002a94:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a98:	f7fe fd16 	bl	80014c8 <RGB_to_BRG>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	9400      	str	r4, [sp, #0]
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <update_display+0xb10>)
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <update_display+0xb30>)
 8002aa6:	2177      	movs	r1, #119	; 0x77
 8002aa8:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002aac:	f003 fe7a 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(294, 148, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7fe fd09 	bl	80014c8 <RGB_to_BRG>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	461c      	mov	r4, r3
 8002aba:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002abe:	f7fe fd03 	bl	80014c8 <RGB_to_BRG>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	9400      	str	r4, [sp, #0]
 8002ac8:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <update_display+0xb10>)
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <update_display+0xb34>)
 8002acc:	2194      	movs	r1, #148	; 0x94
 8002ace:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002ad2:	f003 fe67 	bl	80067a4 <LCD_PutStr>
			LCD_PutStr(294, 177, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fe fcf6 	bl	80014c8 <RGB_to_BRG>
 8002adc:	4603      	mov	r3, r0
 8002ade:	461c      	mov	r4, r3
 8002ae0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002ae4:	f7fe fcf0 	bl	80014c8 <RGB_to_BRG>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	9400      	str	r4, [sp, #0]
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <update_display+0xb10>)
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <update_display+0xb38>)
 8002af2:	21b1      	movs	r1, #177	; 0xb1
 8002af4:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002af8:	f003 fe54 	bl	80067a4 <LCD_PutStr>
			standby_state_written_to_LCD = 1;
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <update_display+0xb1c>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <update_display+0xb0c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e090      	b.n	8002c2c <update_display+0xc1c>
 8002b0a:	bf00      	nop
 8002b0c:	200005e0 	.word	0x200005e0
 8002b10:	0801b820 	.word	0x0801b820
 8002b14:	0801b61c 	.word	0x0801b61c
 8002b18:	2000001d 	.word	0x2000001d
 8002b1c:	20000607 	.word	0x20000607
 8002b20:	0801c7f0 	.word	0x0801c7f0
 8002b24:	0801b624 	.word	0x0801b624
 8002b28:	0801b628 	.word	0x0801b628
 8002b2c:	20000608 	.word	0x20000608
 8002b30:	0801b62c 	.word	0x0801b62c
 8002b34:	0801b630 	.word	0x0801b630
 8002b38:	0801b634 	.word	0x0801b634
 8002b3c:	0801b638 	.word	0x0801b638
 8002b40:	0801b63c 	.word	0x0801b63c
 8002b44:	0801b640 	.word	0x0801b640
 8002b48:	0801b644 	.word	0x0801b644
		}
		else if(active_state == RUN){
 8002b4c:	4b3e      	ldr	r3, [pc, #248]	; (8002c48 <update_display+0xc38>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d16b      	bne.n	8002c2c <update_display+0xc1c>
			UG_FillFrame(290, 226-(PID_output/PID_MAX_OUTPUT)*221, 	310, 	226, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002b54:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <update_display+0xc3c>)
 8002b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	4b3c      	ldr	r3, [pc, #240]	; (8002c50 <update_display+0xc40>)
 8002b60:	f7fd fe9c 	bl	800089c <__aeabi_ddiv>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	a332      	add	r3, pc, #200	; (adr r3, 8002c38 <update_display+0xc28>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	f7fd fd69 	bl	8000648 <__aeabi_dmul>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	f04f 0000 	mov.w	r0, #0
 8002b7e:	4935      	ldr	r1, [pc, #212]	; (8002c54 <update_display+0xc44>)
 8002b80:	f7fd fbaa 	bl	80002d8 <__aeabi_dsub>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7fe f80c 	bl	8000ba8 <__aeabi_d2iz>
 8002b90:	4603      	mov	r3, r0
 8002b92:	b21c      	sxth	r4, r3
 8002b94:	f248 607e 	movw	r0, #34430	; 0x867e
 8002b98:	f7fe fc96 	bl	80014c8 <RGB_to_BRG>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	23e2      	movs	r3, #226	; 0xe2
 8002ba2:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002bac:	f010 f84a 	bl	8012c44 <UG_FillFrame>
			UG_FillFrame(290, 5, 									310, 	226-(PID_output/PID_MAX_OUTPUT)*211-1, RGB_to_BRG(C_BLACK));
 8002bb0:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <update_display+0xc3c>)
 8002bb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <update_display+0xc40>)
 8002bbc:	f7fd fe6e 	bl	800089c <__aeabi_ddiv>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	a31d      	add	r3, pc, #116	; (adr r3, 8002c40 <update_display+0xc30>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f7fd fd3b 	bl	8000648 <__aeabi_dmul>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	f04f 0000 	mov.w	r0, #0
 8002bda:	491e      	ldr	r1, [pc, #120]	; (8002c54 <update_display+0xc44>)
 8002bdc:	f7fd fb7c 	bl	80002d8 <__aeabi_dsub>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <update_display+0xc48>)
 8002bee:	f7fd fb73 	bl	80002d8 <__aeabi_dsub>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7fd ffd5 	bl	8000ba8 <__aeabi_d2iz>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	b21c      	sxth	r4, r3
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7fe fc60 	bl	80014c8 <RGB_to_BRG>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	4623      	mov	r3, r4
 8002c0e:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002c12:	2105      	movs	r1, #5
 8002c14:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002c18:	f010 f814 	bl	8012c44 <UG_FillFrame>
			standby_state_written_to_LCD = 0;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <update_display+0xc4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <update_display+0xc50>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002c28:	e000      	b.n	8002c2c <update_display+0xc1c>
		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002c2a:	bf00      	nop
}
 8002c2c:	bf00      	nop
 8002c2e:	3704      	adds	r7, #4
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd90      	pop	{r4, r7, pc}
 8002c34:	f3af 8000 	nop.w
 8002c38:	00000000 	.word	0x00000000
 8002c3c:	406ba000 	.word	0x406ba000
 8002c40:	00000000 	.word	0x00000000
 8002c44:	406a6000 	.word	0x406a6000
 8002c48:	2000001d 	.word	0x2000001d
 8002c4c:	20000720 	.word	0x20000720
 8002c50:	407f4000 	.word	0x407f4000
 8002c54:	406c4000 	.word	0x406c4000
 8002c58:	3ff00000 	.word	0x3ff00000
 8002c5c:	20000608 	.word	0x20000608
 8002c60:	20000607 	.word	0x20000607

08002c64 <LCD_draw_main_screen>:


void LCD_draw_main_screen(){
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af02      	add	r7, sp, #8
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8002c6a:	4bd8      	ldr	r3, [pc, #864]	; (8002fcc <LCD_draw_main_screen+0x368>)
 8002c6c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	f7fd ff4e 	bl	8000b18 <__aeabi_dcmpeq>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <LCD_draw_main_screen+0x38>
 8002c82:	4bd2      	ldr	r3, [pc, #840]	; (8002fcc <LCD_draw_main_screen+0x368>)
 8002c84:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c90:	f7fd ff42 	bl	8000b18 <__aeabi_dcmpeq>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 81b6 	beq.w	8003008 <LCD_draw_main_screen+0x3a4>
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fe fc13 	bl	80014c8 <RGB_to_BRG>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f00f ffa9 	bl	8012bfc <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002caa:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002cae:	f7fe fc0b 	bl	80014c8 <RGB_to_BRG>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461c      	mov	r4, r3
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fe fc06 	bl	80014c8 <RGB_to_BRG>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	9400      	str	r4, [sp, #0]
 8002cc2:	4bc3      	ldr	r3, [pc, #780]	; (8002fd0 <LCD_draw_main_screen+0x36c>)
 8002cc4:	4ac3      	ldr	r2, [pc, #780]	; (8002fd4 <LCD_draw_main_screen+0x370>)
 8002cc6:	210c      	movs	r1, #12
 8002cc8:	2035      	movs	r0, #53	; 0x35
 8002cca:	f003 fd6b 	bl	80067a4 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8002cce:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002cd2:	f7fe fbf9 	bl	80014c8 <RGB_to_BRG>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2328      	movs	r3, #40	; 0x28
 8002cdc:	22f0      	movs	r2, #240	; 0xf0
 8002cde:	2128      	movs	r1, #40	; 0x28
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f003 fd21 	bl	8006728 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002ce6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002cea:	f7fe fbed 	bl	80014c8 <RGB_to_BRG>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2329      	movs	r3, #41	; 0x29
 8002cf4:	22f0      	movs	r2, #240	; 0xf0
 8002cf6:	2129      	movs	r1, #41	; 0x29
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f003 fd15 	bl	8006728 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8002cfe:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002d02:	f7fe fbe1 	bl	80014c8 <RGB_to_BRG>
 8002d06:	4603      	mov	r3, r0
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	232a      	movs	r3, #42	; 0x2a
 8002d0c:	22f0      	movs	r2, #240	; 0xf0
 8002d0e:	212a      	movs	r1, #42	; 0x2a
 8002d10:	2000      	movs	r0, #0
 8002d12:	f003 fd09 	bl	8006728 <LCD_DrawLine>


		LCD_PutStr(14, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002d16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d1a:	f7fe fbd5 	bl	80014c8 <RGB_to_BRG>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461c      	mov	r4, r3
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7fe fbd0 	bl	80014c8 <RGB_to_BRG>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	9400      	str	r4, [sp, #0]
 8002d2e:	4baa      	ldr	r3, [pc, #680]	; (8002fd8 <LCD_draw_main_screen+0x374>)
 8002d30:	4aaa      	ldr	r2, [pc, #680]	; (8002fdc <LCD_draw_main_screen+0x378>)
 8002d32:	2132      	movs	r1, #50	; 0x32
 8002d34:	200e      	movs	r0, #14
 8002d36:	f003 fd35 	bl	80067a4 <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 8002d3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d3e:	f7fe fbc3 	bl	80014c8 <RGB_to_BRG>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2205      	movs	r2, #5
 8002d46:	2155      	movs	r1, #85	; 0x55
 8002d48:	2078      	movs	r0, #120	; 0x78
 8002d4a:	f010 f835 	bl	8012db8 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 8002d4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d52:	f7fe fbb9 	bl	80014c8 <RGB_to_BRG>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2204      	movs	r2, #4
 8002d5a:	2155      	movs	r1, #85	; 0x55
 8002d5c:	2078      	movs	r0, #120	; 0x78
 8002d5e:	f010 f82b 	bl	8012db8 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 8002d62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d66:	f7fe fbaf 	bl	80014c8 <RGB_to_BRG>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	2155      	movs	r1, #85	; 0x55
 8002d70:	2078      	movs	r0, #120	; 0x78
 8002d72:	f010 f821 	bl	8012db8 <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002d76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d7a:	f7fe fba5 	bl	80014c8 <RGB_to_BRG>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461c      	mov	r4, r3
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7fe fba0 	bl	80014c8 <RGB_to_BRG>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	9400      	str	r4, [sp, #0]
 8002d8e:	4b94      	ldr	r3, [pc, #592]	; (8002fe0 <LCD_draw_main_screen+0x37c>)
 8002d90:	4a94      	ldr	r2, [pc, #592]	; (8002fe4 <LCD_draw_main_screen+0x380>)
 8002d92:	214b      	movs	r1, #75	; 0x4b
 8002d94:	2082      	movs	r0, #130	; 0x82
 8002d96:	f003 fd05 	bl	80067a4 <LCD_PutStr>


		LCD_PutStr(14, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002d9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d9e:	f7fe fb93 	bl	80014c8 <RGB_to_BRG>
 8002da2:	4603      	mov	r3, r0
 8002da4:	461c      	mov	r4, r3
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7fe fb8e 	bl	80014c8 <RGB_to_BRG>
 8002dac:	4603      	mov	r3, r0
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	9400      	str	r4, [sp, #0]
 8002db2:	4b89      	ldr	r3, [pc, #548]	; (8002fd8 <LCD_draw_main_screen+0x374>)
 8002db4:	4a8c      	ldr	r2, [pc, #560]	; (8002fe8 <LCD_draw_main_screen+0x384>)
 8002db6:	218c      	movs	r1, #140	; 0x8c
 8002db8:	200e      	movs	r0, #14
 8002dba:	f003 fcf3 	bl	80067a4 <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 8002dbe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dc2:	f7fe fb81 	bl	80014c8 <RGB_to_BRG>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2205      	movs	r2, #5
 8002dca:	21af      	movs	r1, #175	; 0xaf
 8002dcc:	2078      	movs	r0, #120	; 0x78
 8002dce:	f00f fff3 	bl	8012db8 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 8002dd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dd6:	f7fe fb77 	bl	80014c8 <RGB_to_BRG>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2204      	movs	r2, #4
 8002dde:	21af      	movs	r1, #175	; 0xaf
 8002de0:	2078      	movs	r0, #120	; 0x78
 8002de2:	f00f ffe9 	bl	8012db8 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 8002de6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dea:	f7fe fb6d 	bl	80014c8 <RGB_to_BRG>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2203      	movs	r2, #3
 8002df2:	21af      	movs	r1, #175	; 0xaf
 8002df4:	2078      	movs	r0, #120	; 0x78
 8002df6:	f00f ffdf 	bl	8012db8 <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002dfa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dfe:	f7fe fb63 	bl	80014c8 <RGB_to_BRG>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461c      	mov	r4, r3
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7fe fb5e 	bl	80014c8 <RGB_to_BRG>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	9400      	str	r4, [sp, #0]
 8002e12:	4b73      	ldr	r3, [pc, #460]	; (8002fe0 <LCD_draw_main_screen+0x37c>)
 8002e14:	4a73      	ldr	r2, [pc, #460]	; (8002fe4 <LCD_draw_main_screen+0x380>)
 8002e16:	21a5      	movs	r1, #165	; 0xa5
 8002e18:	2082      	movs	r0, #130	; 0x82
 8002e1a:	f003 fcc3 	bl	80067a4 <LCD_PutStr>

		UG_DrawFrame(6, 134, 182, 220, RGB_to_BRG(C_WHITE));
 8002e1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e22:	f7fe fb51 	bl	80014c8 <RGB_to_BRG>
 8002e26:	4603      	mov	r3, r0
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	23dc      	movs	r3, #220	; 0xdc
 8002e2c:	22b6      	movs	r2, #182	; 0xb6
 8002e2e:	2186      	movs	r1, #134	; 0x86
 8002e30:	2006      	movs	r0, #6
 8002e32:	f00f ff79 	bl	8012d28 <UG_DrawFrame>
		UG_DrawFrame(5, 133, 183, 221, RGB_to_BRG(C_WHITE));
 8002e36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e3a:	f7fe fb45 	bl	80014c8 <RGB_to_BRG>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	23dd      	movs	r3, #221	; 0xdd
 8002e44:	22b7      	movs	r2, #183	; 0xb7
 8002e46:	2185      	movs	r1, #133	; 0x85
 8002e48:	2005      	movs	r0, #5
 8002e4a:	f00f ff6d 	bl	8012d28 <UG_DrawFrame>

		LCD_PutStr(6, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002e4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e52:	f7fe fb39 	bl	80014c8 <RGB_to_BRG>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461c      	mov	r4, r3
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fe fb34 	bl	80014c8 <RGB_to_BRG>
 8002e60:	4603      	mov	r3, r0
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	9400      	str	r4, [sp, #0]
 8002e66:	4b61      	ldr	r3, [pc, #388]	; (8002fec <LCD_draw_main_screen+0x388>)
 8002e68:	4a61      	ldr	r2, [pc, #388]	; (8002ff0 <LCD_draw_main_screen+0x38c>)
 8002e6a:	21eb      	movs	r1, #235	; 0xeb
 8002e6c:	2006      	movs	r0, #6
 8002e6e:	f003 fc99 	bl	80067a4 <LCD_PutStr>
		LCD_PutStr(6, 255, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002e72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e76:	f7fe fb27 	bl	80014c8 <RGB_to_BRG>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	461c      	mov	r4, r3
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fe fb22 	bl	80014c8 <RGB_to_BRG>
 8002e84:	4603      	mov	r3, r0
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	9400      	str	r4, [sp, #0]
 8002e8a:	4b58      	ldr	r3, [pc, #352]	; (8002fec <LCD_draw_main_screen+0x388>)
 8002e8c:	4a59      	ldr	r2, [pc, #356]	; (8002ff4 <LCD_draw_main_screen+0x390>)
 8002e8e:	21ff      	movs	r1, #255	; 0xff
 8002e90:	2006      	movs	r0, #6
 8002e92:	f003 fc87 	bl	80067a4 <LCD_PutStr>
		LCD_PutStr(6, 275, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002e96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e9a:	f7fe fb15 	bl	80014c8 <RGB_to_BRG>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461c      	mov	r4, r3
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fe fb10 	bl	80014c8 <RGB_to_BRG>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	9400      	str	r4, [sp, #0]
 8002eae:	4b4f      	ldr	r3, [pc, #316]	; (8002fec <LCD_draw_main_screen+0x388>)
 8002eb0:	4a51      	ldr	r2, [pc, #324]	; (8002ff8 <LCD_draw_main_screen+0x394>)
 8002eb2:	f240 1113 	movw	r1, #275	; 0x113
 8002eb6:	2006      	movs	r0, #6
 8002eb8:	f003 fc74 	bl	80067a4 <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002ebc:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002ec0:	f7fe fb02 	bl	80014c8 <RGB_to_BRG>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f44f 7394 	mov.w	r3, #296	; 0x128
 8002ecc:	22f0      	movs	r2, #240	; 0xf0
 8002ece:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002ed2:	2002      	movs	r0, #2
 8002ed4:	f010 f856 	bl	8012f84 <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002ed8:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002edc:	f7fe faf4 	bl	80014c8 <RGB_to_BRG>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	f240 1329 	movw	r3, #297	; 0x129
 8002ee8:	22f0      	movs	r2, #240	; 0xf0
 8002eea:	f240 1129 	movw	r1, #297	; 0x129
 8002eee:	2002      	movs	r0, #2
 8002ef0:	f010 f848 	bl	8012f84 <UG_DrawLine>


		LCD_PutStr(6, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002ef4:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002ef8:	f7fe fae6 	bl	80014c8 <RGB_to_BRG>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461c      	mov	r4, r3
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fe fae1 	bl	80014c8 <RGB_to_BRG>
 8002f06:	4603      	mov	r3, r0
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	9400      	str	r4, [sp, #0]
 8002f0c:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <LCD_draw_main_screen+0x374>)
 8002f0e:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <LCD_draw_main_screen+0x398>)
 8002f10:	f240 112d 	movw	r1, #301	; 0x12d
 8002f14:	2006      	movs	r0, #6
 8002f16:	f003 fc45 	bl	80067a4 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002f1a:	2228      	movs	r2, #40	; 0x28
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4838      	ldr	r0, [pc, #224]	; (8003000 <LCD_draw_main_screen+0x39c>)
 8002f20:	f014 fd87 	bl	8017a32 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 8002f24:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <LCD_draw_main_screen+0x368>)
 8002f26:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002f2a:	4936      	ldr	r1, [pc, #216]	; (8003004 <LCD_draw_main_screen+0x3a0>)
 8002f2c:	4834      	ldr	r0, [pc, #208]	; (8003000 <LCD_draw_main_screen+0x39c>)
 8002f2e:	f014 fd1d 	bl	801796c <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002f32:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002f36:	f7fe fac7 	bl	80014c8 <RGB_to_BRG>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461c      	mov	r4, r3
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f7fe fac2 	bl	80014c8 <RGB_to_BRG>
 8002f44:	4603      	mov	r3, r0
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	9400      	str	r4, [sp, #0]
 8002f4a:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <LCD_draw_main_screen+0x374>)
 8002f4c:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <LCD_draw_main_screen+0x39c>)
 8002f4e:	f240 112d 	movw	r1, #301	; 0x12d
 8002f52:	2082      	movs	r0, #130	; 0x82
 8002f54:	f003 fc26 	bl	80067a4 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002f58:	2228      	movs	r2, #40	; 0x28
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4828      	ldr	r0, [pc, #160]	; (8003000 <LCD_draw_main_screen+0x39c>)
 8002f5e:	f014 fd68 	bl	8017a32 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <LCD_draw_main_screen+0x368>)
 8002f64:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f68:	4926      	ldr	r1, [pc, #152]	; (8003004 <LCD_draw_main_screen+0x3a0>)
 8002f6a:	4825      	ldr	r0, [pc, #148]	; (8003000 <LCD_draw_main_screen+0x39c>)
 8002f6c:	f014 fcfe 	bl	801796c <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002f70:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002f74:	f7fe faa8 	bl	80014c8 <RGB_to_BRG>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461c      	mov	r4, r3
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7fe faa3 	bl	80014c8 <RGB_to_BRG>
 8002f82:	4603      	mov	r3, r0
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	9400      	str	r4, [sp, #0]
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <LCD_draw_main_screen+0x374>)
 8002f8a:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <LCD_draw_main_screen+0x39c>)
 8002f8c:	f240 112d 	movw	r1, #301	; 0x12d
 8002f90:	20be      	movs	r0, #190	; 0xbe
 8002f92:	f003 fc07 	bl	80067a4 <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 8002f96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f9a:	f7fe fa95 	bl	80014c8 <RGB_to_BRG>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	f240 1321 	movw	r3, #289	; 0x121
 8002fa6:	22e8      	movs	r2, #232	; 0xe8
 8002fa8:	2135      	movs	r1, #53	; 0x35
 8002faa:	20d0      	movs	r0, #208	; 0xd0
 8002fac:	f00f febc 	bl	8012d28 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 8002fb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fb4:	f7fe fa88 	bl	80014c8 <RGB_to_BRG>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002fc0:	22e7      	movs	r2, #231	; 0xe7
 8002fc2:	2136      	movs	r1, #54	; 0x36
 8002fc4:	20d1      	movs	r0, #209	; 0xd1
 8002fc6:	f00f feaf 	bl	8012d28 <UG_DrawFrame>
 8002fca:	e113      	b.n	80031f4 <LCD_draw_main_screen+0x590>
 8002fcc:	200006d0 	.word	0x200006d0
 8002fd0:	0801c5bc 	.word	0x0801c5bc
 8002fd4:	0801b648 	.word	0x0801b648
 8002fd8:	0801c7f0 	.word	0x0801c7f0
 8002fdc:	0801b654 	.word	0x0801b654
 8002fe0:	0801d700 	.word	0x0801d700
 8002fe4:	0801b660 	.word	0x0801b660
 8002fe8:	0801b664 	.word	0x0801b664
 8002fec:	0801b820 	.word	0x0801b820
 8002ff0:	0801b670 	.word	0x0801b670
 8002ff4:	0801b680 	.word	0x0801b680
 8002ff8:	0801b69c 	.word	0x0801b69c
 8002ffc:	0801b6bc 	.word	0x0801b6bc
 8003000:	20000628 	.word	0x20000628
 8003004:	0801b5e8 	.word	0x0801b5e8
	}
	else{
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8003008:	2000      	movs	r0, #0
 800300a:	f7fe fa5d 	bl	80014c8 <RGB_to_BRG>
 800300e:	4603      	mov	r3, r0
 8003010:	4618      	mov	r0, r3
 8003012:	f00f fdf3 	bl	8012bfc <UG_FillScreen>

		LCD_PutStr(14, 5, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003016:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800301a:	f7fe fa55 	bl	80014c8 <RGB_to_BRG>
 800301e:	4603      	mov	r3, r0
 8003020:	461c      	mov	r4, r3
 8003022:	2000      	movs	r0, #0
 8003024:	f7fe fa50 	bl	80014c8 <RGB_to_BRG>
 8003028:	4603      	mov	r3, r0
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	9400      	str	r4, [sp, #0]
 800302e:	4b73      	ldr	r3, [pc, #460]	; (80031fc <LCD_draw_main_screen+0x598>)
 8003030:	4a73      	ldr	r2, [pc, #460]	; (8003200 <LCD_draw_main_screen+0x59c>)
 8003032:	2105      	movs	r1, #5
 8003034:	200e      	movs	r0, #14
 8003036:	f003 fbb5 	bl	80067a4 <LCD_PutStr>
		UG_DrawCircle(120, 40, 5, RGB_to_BRG(C_WHITE));
 800303a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800303e:	f7fe fa43 	bl	80014c8 <RGB_to_BRG>
 8003042:	4603      	mov	r3, r0
 8003044:	2205      	movs	r2, #5
 8003046:	2128      	movs	r1, #40	; 0x28
 8003048:	2078      	movs	r0, #120	; 0x78
 800304a:	f00f feb5 	bl	8012db8 <UG_DrawCircle>
		UG_DrawCircle(120, 40, 4, RGB_to_BRG(C_WHITE));
 800304e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003052:	f7fe fa39 	bl	80014c8 <RGB_to_BRG>
 8003056:	4603      	mov	r3, r0
 8003058:	2204      	movs	r2, #4
 800305a:	2128      	movs	r1, #40	; 0x28
 800305c:	2078      	movs	r0, #120	; 0x78
 800305e:	f00f feab 	bl	8012db8 <UG_DrawCircle>
		UG_DrawCircle(120, 40, 3, RGB_to_BRG(C_WHITE));
 8003062:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003066:	f7fe fa2f 	bl	80014c8 <RGB_to_BRG>
 800306a:	4603      	mov	r3, r0
 800306c:	2203      	movs	r2, #3
 800306e:	2128      	movs	r1, #40	; 0x28
 8003070:	2078      	movs	r0, #120	; 0x78
 8003072:	f00f fea1 	bl	8012db8 <UG_DrawCircle>
		LCD_PutStr(130, 30, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003076:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800307a:	f7fe fa25 	bl	80014c8 <RGB_to_BRG>
 800307e:	4603      	mov	r3, r0
 8003080:	461c      	mov	r4, r3
 8003082:	2000      	movs	r0, #0
 8003084:	f7fe fa20 	bl	80014c8 <RGB_to_BRG>
 8003088:	4603      	mov	r3, r0
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	9400      	str	r4, [sp, #0]
 800308e:	4b5d      	ldr	r3, [pc, #372]	; (8003204 <LCD_draw_main_screen+0x5a0>)
 8003090:	4a5d      	ldr	r2, [pc, #372]	; (8003208 <LCD_draw_main_screen+0x5a4>)
 8003092:	211e      	movs	r1, #30
 8003094:	2082      	movs	r0, #130	; 0x82
 8003096:	f003 fb85 	bl	80067a4 <LCD_PutStr>


		LCD_PutStr(14, 95, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800309a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800309e:	f7fe fa13 	bl	80014c8 <RGB_to_BRG>
 80030a2:	4603      	mov	r3, r0
 80030a4:	461c      	mov	r4, r3
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7fe fa0e 	bl	80014c8 <RGB_to_BRG>
 80030ac:	4603      	mov	r3, r0
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	9400      	str	r4, [sp, #0]
 80030b2:	4b52      	ldr	r3, [pc, #328]	; (80031fc <LCD_draw_main_screen+0x598>)
 80030b4:	4a55      	ldr	r2, [pc, #340]	; (800320c <LCD_draw_main_screen+0x5a8>)
 80030b6:	215f      	movs	r1, #95	; 0x5f
 80030b8:	200e      	movs	r0, #14
 80030ba:	f003 fb73 	bl	80067a4 <LCD_PutStr>
		UG_DrawCircle(120, 130, 5, RGB_to_BRG(C_WHITE));
 80030be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030c2:	f7fe fa01 	bl	80014c8 <RGB_to_BRG>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2205      	movs	r2, #5
 80030ca:	2182      	movs	r1, #130	; 0x82
 80030cc:	2078      	movs	r0, #120	; 0x78
 80030ce:	f00f fe73 	bl	8012db8 <UG_DrawCircle>
		UG_DrawCircle(120, 130, 4, RGB_to_BRG(C_WHITE));
 80030d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030d6:	f7fe f9f7 	bl	80014c8 <RGB_to_BRG>
 80030da:	4603      	mov	r3, r0
 80030dc:	2204      	movs	r2, #4
 80030de:	2182      	movs	r1, #130	; 0x82
 80030e0:	2078      	movs	r0, #120	; 0x78
 80030e2:	f00f fe69 	bl	8012db8 <UG_DrawCircle>
		UG_DrawCircle(120, 130, 3, RGB_to_BRG(C_WHITE));
 80030e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030ea:	f7fe f9ed 	bl	80014c8 <RGB_to_BRG>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2203      	movs	r2, #3
 80030f2:	2182      	movs	r1, #130	; 0x82
 80030f4:	2078      	movs	r0, #120	; 0x78
 80030f6:	f00f fe5f 	bl	8012db8 <UG_DrawCircle>
		LCD_PutStr(130, 120, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80030fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030fe:	f7fe f9e3 	bl	80014c8 <RGB_to_BRG>
 8003102:	4603      	mov	r3, r0
 8003104:	461c      	mov	r4, r3
 8003106:	2000      	movs	r0, #0
 8003108:	f7fe f9de 	bl	80014c8 <RGB_to_BRG>
 800310c:	4603      	mov	r3, r0
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	9400      	str	r4, [sp, #0]
 8003112:	4b3c      	ldr	r3, [pc, #240]	; (8003204 <LCD_draw_main_screen+0x5a0>)
 8003114:	4a3c      	ldr	r2, [pc, #240]	; (8003208 <LCD_draw_main_screen+0x5a4>)
 8003116:	2178      	movs	r1, #120	; 0x78
 8003118:	2082      	movs	r0, #130	; 0x82
 800311a:	f003 fb43 	bl	80067a4 <LCD_PutStr>

		UG_DrawFrame(6, 89, 182,175, RGB_to_BRG(C_WHITE));
 800311e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003122:	f7fe f9d1 	bl	80014c8 <RGB_to_BRG>
 8003126:	4603      	mov	r3, r0
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	23af      	movs	r3, #175	; 0xaf
 800312c:	22b6      	movs	r2, #182	; 0xb6
 800312e:	2159      	movs	r1, #89	; 0x59
 8003130:	2006      	movs	r0, #6
 8003132:	f00f fdf9 	bl	8012d28 <UG_DrawFrame>
		UG_DrawFrame(5, 88, 183, 176, RGB_to_BRG(C_WHITE));
 8003136:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800313a:	f7fe f9c5 	bl	80014c8 <RGB_to_BRG>
 800313e:	4603      	mov	r3, r0
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	23b0      	movs	r3, #176	; 0xb0
 8003144:	22b7      	movs	r2, #183	; 0xb7
 8003146:	2158      	movs	r1, #88	; 0x58
 8003148:	2005      	movs	r0, #5
 800314a:	f00f fded 	bl	8012d28 <UG_DrawFrame>

		LCD_PutStr(6, 180, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800314e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003152:	f7fe f9b9 	bl	80014c8 <RGB_to_BRG>
 8003156:	4603      	mov	r3, r0
 8003158:	461c      	mov	r4, r3
 800315a:	2000      	movs	r0, #0
 800315c:	f7fe f9b4 	bl	80014c8 <RGB_to_BRG>
 8003160:	4603      	mov	r3, r0
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	9400      	str	r4, [sp, #0]
 8003166:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <LCD_draw_main_screen+0x5ac>)
 8003168:	4a2a      	ldr	r2, [pc, #168]	; (8003214 <LCD_draw_main_screen+0x5b0>)
 800316a:	21b4      	movs	r1, #180	; 0xb4
 800316c:	2006      	movs	r0, #6
 800316e:	f003 fb19 	bl	80067a4 <LCD_PutStr>
		LCD_PutStr(6, 195, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003172:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003176:	f7fe f9a7 	bl	80014c8 <RGB_to_BRG>
 800317a:	4603      	mov	r3, r0
 800317c:	461c      	mov	r4, r3
 800317e:	2000      	movs	r0, #0
 8003180:	f7fe f9a2 	bl	80014c8 <RGB_to_BRG>
 8003184:	4603      	mov	r3, r0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	9400      	str	r4, [sp, #0]
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <LCD_draw_main_screen+0x5ac>)
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <LCD_draw_main_screen+0x5b4>)
 800318e:	21c3      	movs	r1, #195	; 0xc3
 8003190:	2006      	movs	r0, #6
 8003192:	f003 fb07 	bl	80067a4 <LCD_PutStr>
		LCD_PutStr(6, 210, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003196:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800319a:	f7fe f995 	bl	80014c8 <RGB_to_BRG>
 800319e:	4603      	mov	r3, r0
 80031a0:	461c      	mov	r4, r3
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fe f990 	bl	80014c8 <RGB_to_BRG>
 80031a8:	4603      	mov	r3, r0
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	9400      	str	r4, [sp, #0]
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <LCD_draw_main_screen+0x5ac>)
 80031b0:	4a1a      	ldr	r2, [pc, #104]	; (800321c <LCD_draw_main_screen+0x5b8>)
 80031b2:	21d2      	movs	r1, #210	; 0xd2
 80031b4:	2006      	movs	r0, #6
 80031b6:	f003 faf5 	bl	80067a4 <LCD_PutStr>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
		memset(&buffer, '\0', sizeof(buffer));
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
		LCD_PutStr(190, 271, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
*/
		UG_DrawFrame(288, 3, 312, 228, RGB_to_BRG(C_WHITE));
 80031ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031be:	f7fe f983 	bl	80014c8 <RGB_to_BRG>
 80031c2:	4603      	mov	r3, r0
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	23e4      	movs	r3, #228	; 0xe4
 80031c8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80031cc:	2103      	movs	r1, #3
 80031ce:	f44f 7090 	mov.w	r0, #288	; 0x120
 80031d2:	f00f fda9 	bl	8012d28 <UG_DrawFrame>
		UG_DrawFrame(289, 4, 311, 227, RGB_to_BRG(C_WHITE));
 80031d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031da:	f7fe f975 	bl	80014c8 <RGB_to_BRG>
 80031de:	4603      	mov	r3, r0
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	23e3      	movs	r3, #227	; 0xe3
 80031e4:	f240 1237 	movw	r2, #311	; 0x137
 80031e8:	2104      	movs	r1, #4
 80031ea:	f240 1021 	movw	r0, #289	; 0x121
 80031ee:	f00f fd9b 	bl	8012d28 <UG_DrawFrame>

	}
}
 80031f2:	bf00      	nop
 80031f4:	bf00      	nop
 80031f6:	3704      	adds	r7, #4
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd90      	pop	{r4, r7, pc}
 80031fc:	0801c7f0 	.word	0x0801c7f0
 8003200:	0801b654 	.word	0x0801b654
 8003204:	0801d700 	.word	0x0801d700
 8003208:	0801b660 	.word	0x0801b660
 800320c:	0801b664 	.word	0x0801b664
 8003210:	0801b820 	.word	0x0801b820
 8003214:	0801b670 	.word	0x0801b670
 8003218:	0801b680 	.word	0x0801b680
 800321c:	0801b69c 	.word	0x0801b69c

08003220 <LCD_draw_earth_fault_popup>:

void LCD_draw_earth_fault_popup(){
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b083      	sub	sp, #12
 8003224:	af02      	add	r7, sp, #8
	heater_off();
 8003226:	f7fe fb71 	bl	800190c <heater_off>

	UG_FillFrame(10, 50, 205, 205, RGB_to_BRG(C_ORANGE));
 800322a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800322e:	f7fe f94b 	bl	80014c8 <RGB_to_BRG>
 8003232:	4603      	mov	r3, r0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	23cd      	movs	r3, #205	; 0xcd
 8003238:	22cd      	movs	r2, #205	; 0xcd
 800323a:	2132      	movs	r1, #50	; 0x32
 800323c:	200a      	movs	r0, #10
 800323e:	f00f fd01 	bl	8012c44 <UG_FillFrame>
	UG_FillFrame(15, 55, 200, 200, RGB_to_BRG(C_WHITE));
 8003242:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003246:	f7fe f93f 	bl	80014c8 <RGB_to_BRG>
 800324a:	4603      	mov	r3, r0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	23c8      	movs	r3, #200	; 0xc8
 8003250:	22c8      	movs	r2, #200	; 0xc8
 8003252:	2137      	movs	r1, #55	; 0x37
 8003254:	200f      	movs	r0, #15
 8003256:	f00f fcf5 	bl	8012c44 <UG_FillFrame>
	LCD_PutStr(20, 60, "GROUNDING", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 800325a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800325e:	f7fe f933 	bl	80014c8 <RGB_to_BRG>
 8003262:	4603      	mov	r3, r0
 8003264:	461c      	mov	r4, r3
 8003266:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800326a:	f7fe f92d 	bl	80014c8 <RGB_to_BRG>
 800326e:	4603      	mov	r3, r0
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	9400      	str	r4, [sp, #0]
 8003274:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <LCD_draw_earth_fault_popup+0x104>)
 8003276:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <LCD_draw_earth_fault_popup+0x108>)
 8003278:	213c      	movs	r1, #60	; 0x3c
 800327a:	2014      	movs	r0, #20
 800327c:	f003 fa92 	bl	80067a4 <LCD_PutStr>
	LCD_PutStr(20, 80, "ERROR", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8003280:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003284:	f7fe f920 	bl	80014c8 <RGB_to_BRG>
 8003288:	4603      	mov	r3, r0
 800328a:	461c      	mov	r4, r3
 800328c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003290:	f7fe f91a 	bl	80014c8 <RGB_to_BRG>
 8003294:	4603      	mov	r3, r0
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	9400      	str	r4, [sp, #0]
 800329a:	4b22      	ldr	r3, [pc, #136]	; (8003324 <LCD_draw_earth_fault_popup+0x104>)
 800329c:	4a23      	ldr	r2, [pc, #140]	; (800332c <LCD_draw_earth_fault_popup+0x10c>)
 800329e:	2150      	movs	r1, #80	; 0x50
 80032a0:	2014      	movs	r0, #20
 80032a2:	f003 fa7f 	bl	80067a4 <LCD_PutStr>

	LCD_PutStr(20, 120, "CHECK", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80032a6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032aa:	f7fe f90d 	bl	80014c8 <RGB_to_BRG>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461c      	mov	r4, r3
 80032b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032b6:	f7fe f907 	bl	80014c8 <RGB_to_BRG>
 80032ba:	4603      	mov	r3, r0
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	9400      	str	r4, [sp, #0]
 80032c0:	4b18      	ldr	r3, [pc, #96]	; (8003324 <LCD_draw_earth_fault_popup+0x104>)
 80032c2:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <LCD_draw_earth_fault_popup+0x110>)
 80032c4:	2178      	movs	r1, #120	; 0x78
 80032c6:	2014      	movs	r0, #20
 80032c8:	f003 fa6c 	bl	80067a4 <LCD_PutStr>
	LCD_PutStr(20, 140, "CONNECTIONS", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80032cc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032d0:	f7fe f8fa 	bl	80014c8 <RGB_to_BRG>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461c      	mov	r4, r3
 80032d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032dc:	f7fe f8f4 	bl	80014c8 <RGB_to_BRG>
 80032e0:	4603      	mov	r3, r0
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	9400      	str	r4, [sp, #0]
 80032e6:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <LCD_draw_earth_fault_popup+0x104>)
 80032e8:	4a12      	ldr	r2, [pc, #72]	; (8003334 <LCD_draw_earth_fault_popup+0x114>)
 80032ea:	218c      	movs	r1, #140	; 0x8c
 80032ec:	2014      	movs	r0, #20
 80032ee:	f003 fa59 	bl	80067a4 <LCD_PutStr>
	LCD_PutStr(20, 160, "AND REBOOT", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80032f2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032f6:	f7fe f8e7 	bl	80014c8 <RGB_to_BRG>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461c      	mov	r4, r3
 80032fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003302:	f7fe f8e1 	bl	80014c8 <RGB_to_BRG>
 8003306:	4603      	mov	r3, r0
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	9400      	str	r4, [sp, #0]
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <LCD_draw_earth_fault_popup+0x104>)
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <LCD_draw_earth_fault_popup+0x118>)
 8003310:	21a0      	movs	r1, #160	; 0xa0
 8003312:	2014      	movs	r0, #20
 8003314:	f003 fa46 	bl	80067a4 <LCD_PutStr>

	Error_Handler();
 8003318:	f001 fc6a 	bl	8004bf0 <Error_Handler>
}
 800331c:	bf00      	nop
 800331e:	3704      	adds	r7, #4
 8003320:	46bd      	mov	sp, r7
 8003322:	bd90      	pop	{r4, r7, pc}
 8003324:	0801c7f0 	.word	0x0801c7f0
 8003328:	0801b6c4 	.word	0x0801b6c4
 800332c:	0801b6d0 	.word	0x0801b6d0
 8003330:	0801b6d8 	.word	0x0801b6d8
 8003334:	0801b6e0 	.word	0x0801b6e0
 8003338:	0801b6ec 	.word	0x0801b6ec

0800333c <get_set_temperature>:


/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 800333c:	b598      	push	{r3, r4, r7, lr}
 800333e:	af00      	add	r7, sp, #0
	if(custom_temperature_on == 0){
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <get_set_temperature+0x70>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d12f      	bne.n	80033a8 <get_set_temperature+0x6c>
		TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8003348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f900 	bl	8000554 <__aeabi_ui2d>
 8003354:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <get_set_temperature+0x74>)
 8003356:	ed93 7b00 	vldr	d7, [r3]
 800335a:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <get_set_temperature+0x78>)
 800335c:	ed93 6b00 	vldr	d6, [r3]
 8003360:	eeb0 2a46 	vmov.f32	s4, s12
 8003364:	eef0 2a66 	vmov.f32	s5, s13
 8003368:	eeb0 1a47 	vmov.f32	s2, s14
 800336c:	eef0 1a67 	vmov.f32	s3, s15
 8003370:	ec41 0b10 	vmov	d0, r0, r1
 8003374:	f7fd ffde 	bl	8001334 <clamp>
 8003378:	ec53 2b10 	vmov	r2, r3, d0
 800337c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	f7fd fc38 	bl	8000bf8 <__aeabi_d2uiz>
 8003388:	4603      	mov	r3, r0
 800338a:	6263      	str	r3, [r4, #36]	; 0x24
		sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 800338c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	b29b      	uxth	r3, r3
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd f8eb 	bl	8000574 <__aeabi_i2d>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4905      	ldr	r1, [pc, #20]	; (80033b8 <get_set_temperature+0x7c>)
 80033a4:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80033a8:	bf00      	nop
 80033aa:	bd98      	pop	{r3, r4, r7, pc}
 80033ac:	200006c8 	.word	0x200006c8
 80033b0:	20000028 	.word	0x20000028
 80033b4:	20000030 	.word	0x20000030
 80033b8:	20000038 	.word	0x20000038

080033bc <beep>:

/* Beep the beeper */
void beep(){
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <beep+0x30>)
 80033c2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <beep+0x34>)
 80033cc:	f7fd fba4 	bl	8000b18 <__aeabi_dcmpeq>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d100      	bne.n	80033d8 <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 80033d6:	e006      	b.n	80033e6 <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 80033d8:	2104      	movs	r1, #4
 80033da:	4806      	ldr	r0, [pc, #24]	; (80033f4 <beep+0x38>)
 80033dc:	f00a fd0e 	bl	800ddfc <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 80033e0:	4805      	ldr	r0, [pc, #20]	; (80033f8 <beep+0x3c>)
 80033e2:	f00a fc1b 	bl	800dc1c <HAL_TIM_Base_Start_IT>
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200006d0 	.word	0x200006d0
 80033f0:	3ff00000 	.word	0x3ff00000
 80033f4:	2000207c 	.word	0x2000207c
 80033f8:	200021f8 	.word	0x200021f8
 80033fc:	00000000 	.word	0x00000000

08003400 <handle_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void handle_emergency_shutdown(){
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	af00      	add	r7, sp, #0
	/* Get time when iron turns on */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8003404:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <handle_emergency_shutdown+0xe8>)
 8003406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <handle_emergency_shutdown+0x20>
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <handle_emergency_shutdown+0xec>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <handle_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8003416:	f003 fad3 	bl	80069c0 <HAL_GetTick>
 800341a:	4603      	mov	r3, r0
 800341c:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <handle_emergency_shutdown+0xf0>)
 800341e:	6013      	str	r3, [r2, #0]
	}

	/* Set state to EMERGENCY_SLEEP if iron ON for longer time than emergency_time */
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8003420:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <handle_emergency_shutdown+0xe8>)
 8003422:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	f7fd fb73 	bl	8000b18 <__aeabi_dcmpeq>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d024      	beq.n	8003482 <handle_emergency_shutdown+0x82>
 8003438:	f003 fac2 	bl	80069c0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <handle_emergency_shutdown+0xf0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd f885 	bl	8000554 <__aeabi_ui2d>
 800344a:	4604      	mov	r4, r0
 800344c:	460d      	mov	r5, r1
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <handle_emergency_shutdown+0xf4>)
 8003450:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003454:	a322      	add	r3, pc, #136	; (adr r3, 80034e0 <handle_emergency_shutdown+0xe0>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd f8f5 	bl	8000648 <__aeabi_dmul>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	f7fd fb75 	bl	8000b54 <__aeabi_dcmpge>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <handle_emergency_shutdown+0x82>
 8003470:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <handle_emergency_shutdown+0xec>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <handle_emergency_shutdown+0x82>
		change_state(EMERGENCY_SLEEP);
 8003478:	2003      	movs	r0, #3
 800347a:	f7fe f83b 	bl	80014f4 <change_state>
		beep();
 800347e:	f7ff ff9d 	bl	80033bc <beep>
	}

	/* Set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <handle_emergency_shutdown+0xe8>)
 8003484:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <handle_emergency_shutdown+0xf8>)
 800348e:	f7fd fb6b 	bl	8000b68 <__aeabi_dcmpgt>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d009      	beq.n	80034ac <handle_emergency_shutdown+0xac>
 8003498:	4b14      	ldr	r3, [pc, #80]	; (80034ec <handle_emergency_shutdown+0xec>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <handle_emergency_shutdown+0xac>
		show_popup("\n\n  NO tip detected");
 80034a0:	4816      	ldr	r0, [pc, #88]	; (80034fc <handle_emergency_shutdown+0xfc>)
 80034a2:	f7fe fa3b 	bl	800191c <show_popup>
		change_state(EMERGENCY_SLEEP);
 80034a6:	2003      	movs	r0, #3
 80034a8:	f7fe f824 	bl	80014f4 <change_state>
	}
	/* Set state to EMERGENCY_SLEEP if input voltage is too low */
	if((sensor_values.bus_voltage <= MIN_BUSVOLTAGE) && (active_state == RUN)){
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <handle_emergency_shutdown+0xe8>)
 80034ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80034b2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80034b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	d900      	bls.n	80034c2 <handle_emergency_shutdown+0xc2>
		show_popup("\n\n  Too Low voltage");
		change_state(EMERGENCY_SLEEP);
	}
}
 80034c0:	e009      	b.n	80034d6 <handle_emergency_shutdown+0xd6>
	if((sensor_values.bus_voltage <= MIN_BUSVOLTAGE) && (active_state == RUN)){
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <handle_emergency_shutdown+0xec>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d105      	bne.n	80034d6 <handle_emergency_shutdown+0xd6>
		show_popup("\n\n  Too Low voltage");
 80034ca:	480d      	ldr	r0, [pc, #52]	; (8003500 <handle_emergency_shutdown+0x100>)
 80034cc:	f7fe fa26 	bl	800191c <show_popup>
		change_state(EMERGENCY_SLEEP);
 80034d0:	2003      	movs	r0, #3
 80034d2:	f7fe f80f 	bl	80014f4 <change_state>
}
 80034d6:	bf00      	nop
 80034d8:	bdb0      	pop	{r4, r5, r7, pc}
 80034da:	bf00      	nop
 80034dc:	f3af 8000 	nop.w
 80034e0:	00000000 	.word	0x00000000
 80034e4:	40ed4c00 	.word	0x40ed4c00
 80034e8:	20000038 	.word	0x20000038
 80034ec:	2000001d 	.word	0x2000001d
 80034f0:	200005f0 	.word	0x200005f0
 80034f4:	200006d0 	.word	0x200006d0
 80034f8:	407e0000 	.word	0x407e0000
 80034fc:	0801b6f8 	.word	0x0801b6f8
 8003500:	0801b70c 	.word	0x0801b70c

08003504 <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 8003504:	b598      	push	{r3, r4, r7, lr}
 8003506:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 8003508:	4b24      	ldr	r3, [pc, #144]	; (800359c <handle_button_status+0x98>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d11e      	bne.n	800354e <handle_button_status+0x4a>
		SW_1_pressed = 0;
 8003510:	4b22      	ldr	r3, [pc, #136]	; (800359c <handle_button_status+0x98>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 8003516:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <handle_button_status+0x9c>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <handle_button_status+0x22>
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <handle_button_status+0x9c>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d103      	bne.n	800352e <handle_button_status+0x2a>
			change_state(HALTED);
 8003526:	2004      	movs	r0, #4
 8003528:	f7fd ffe4 	bl	80014f4 <change_state>
 800352c:	e00a      	b.n	8003544 <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <handle_button_status+0x9c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d003      	beq.n	800353e <handle_button_status+0x3a>
 8003536:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <handle_button_status+0x9c>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d102      	bne.n	8003544 <handle_button_status+0x40>
			change_state(RUN);
 800353e:	2000      	movs	r0, #0
 8003540:	f7fd ffd8 	bl	80014f4 <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 8003544:	f003 fa3c 	bl	80069c0 <HAL_GetTick>
 8003548:	4603      	mov	r3, r0
 800354a:	4a16      	ldr	r2, [pc, #88]	; (80035a4 <handle_button_status+0xa0>)
 800354c:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <handle_button_status+0xa4>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10d      	bne.n	8003572 <handle_button_status+0x6e>
		SW_2_pressed = 0;
 8003556:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <handle_button_status+0xa4>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <handle_button_status+0xa8>)
 800355e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003562:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	f7fd fb45 	bl	8000bf8 <__aeabi_d2uiz>
 800356e:	4603      	mov	r3, r0
 8003570:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 8003572:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <handle_button_status+0xac>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10d      	bne.n	8003596 <handle_button_status+0x92>
		SW_3_pressed = 0;
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <handle_button_status+0xac>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <handle_button_status+0xa8>)
 8003582:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003586:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	f7fd fb33 	bl	8000bf8 <__aeabi_d2uiz>
 8003592:	4603      	mov	r3, r0
 8003594:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 8003596:	bf00      	nop
 8003598:	bd98      	pop	{r3, r4, r7, pc}
 800359a:	bf00      	nop
 800359c:	20000604 	.word	0x20000604
 80035a0:	2000001d 	.word	0x2000001d
 80035a4:	200005ec 	.word	0x200005ec
 80035a8:	20000605 	.word	0x20000605
 80035ac:	200006d0 	.word	0x200006d0
 80035b0:	20000606 	.word	0x20000606
 80035b4:	00000000 	.word	0x00000000

080035b8 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035c4:	f006 ff3e 	bl	800a444 <HAL_GPIO_ReadPin>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <get_stand_status+0x1c>
		stand_status = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	e001      	b.n	80035d8 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	493b      	ldr	r1, [pc, #236]	; (80036c8 <get_stand_status+0x110>)
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 fb3d 	bl	8004c5c <Moving_Average_Compute>
 80035e2:	eeb0 7a40 	vmov.f32	s14, s0
 80035e6:	eef0 7a60 	vmov.f32	s15, s1
 80035ea:	4b38      	ldr	r3, [pc, #224]	; (80036cc <get_stand_status+0x114>)
 80035ec:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand >= 0.2){
 80035f0:	4b36      	ldr	r3, [pc, #216]	; (80036cc <get_stand_status+0x114>)
 80035f2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80035f6:	a330      	add	r3, pc, #192	; (adr r3, 80036b8 <get_stand_status+0x100>)
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f7fd faaa 	bl	8000b54 <__aeabi_dcmpge>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d039      	beq.n	800367a <get_stand_status+0xc2>
		if(active_state == RUN){
 8003606:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <get_stand_status+0x118>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d107      	bne.n	800361e <get_stand_status+0x66>
			change_state(STANDBY);
 800360e:	2001      	movs	r0, #1
 8003610:	f7fd ff70 	bl	80014f4 <change_state>
			previous_standby_millis = HAL_GetTick();
 8003614:	f003 f9d4 	bl	80069c0 <HAL_GetTick>
 8003618:	4603      	mov	r3, r0
 800361a:	4a2e      	ldr	r2, [pc, #184]	; (80036d4 <get_stand_status+0x11c>)
 800361c:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 800361e:	f003 f9cf 	bl	80069c0 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <get_stand_status+0x11c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ff92 	bl	8000554 <__aeabi_ui2d>
 8003630:	4604      	mov	r4, r0
 8003632:	460d      	mov	r5, r1
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <get_stand_status+0x120>)
 8003636:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800363a:	a321      	add	r3, pc, #132	; (adr r3, 80036c0 <get_stand_status+0x108>)
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	f7fd f802 	bl	8000648 <__aeabi_dmul>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4620      	mov	r0, r4
 800364a:	4629      	mov	r1, r5
 800364c:	f7fd fa82 	bl	8000b54 <__aeabi_dcmpge>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d006      	beq.n	8003664 <get_stand_status+0xac>
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <get_stand_status+0x118>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d102      	bne.n	8003664 <get_stand_status+0xac>
			change_state(SLEEP);
 800365e:	2002      	movs	r0, #2
 8003660:	f7fd ff48 	bl	80014f4 <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <get_stand_status+0x118>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d003      	beq.n	8003674 <get_stand_status+0xbc>
 800366c:	4b18      	ldr	r3, [pc, #96]	; (80036d0 <get_stand_status+0x118>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d102      	bne.n	800367a <get_stand_status+0xc2>
			change_state(SLEEP);
 8003674:	2002      	movs	r0, #2
 8003676:	f7fd ff3d 	bl	80014f4 <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.2){
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <get_stand_status+0x114>)
 800367c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003680:	a30d      	add	r3, pc, #52	; (adr r3, 80036b8 <get_stand_status+0x100>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f7fd fa51 	bl	8000b2c <__aeabi_dcmplt>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d100      	bne.n	8003692 <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
			change_state(RUN);
		}
	}
}
 8003690:	e00e      	b.n	80036b0 <get_stand_status+0xf8>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
 8003692:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <get_stand_status+0x118>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d007      	beq.n	80036aa <get_stand_status+0xf2>
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <get_stand_status+0x118>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d003      	beq.n	80036aa <get_stand_status+0xf2>
 80036a2:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <get_stand_status+0x118>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <get_stand_status+0xf8>
			change_state(RUN);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f7fd ff22 	bl	80014f4 <change_state>
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bdb0      	pop	{r4, r5, r7, pc}
 80036b8:	9999999a 	.word	0x9999999a
 80036bc:	3fc99999 	.word	0x3fc99999
 80036c0:	00000000 	.word	0x00000000
 80036c4:	40ed4c00 	.word	0x40ed4c00
 80036c8:	200013ec 	.word	0x200013ec
 80036cc:	20000038 	.word	0x20000038
 80036d0:	2000001d 	.word	0x2000001d
 80036d4:	200005f4 	.word	0x200005f4
 80036d8:	200006d0 	.word	0x200006d0
 80036dc:	00000000 	.word	0x00000000

080036e0 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 80036e0:	b5b0      	push	{r4, r5, r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_1_Pin) == 0){
 80036e6:	2110      	movs	r1, #16
 80036e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ec:	f006 feaa 	bl	800a444 <HAL_GPIO_ReadPin>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <get_handle_type+0x1c>
		handle_status = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	71fb      	strb	r3, [r7, #7]
 80036fa:	e001      	b.n	8003700 <get_handle_type+0x20>
	}
	else{
		handle_status = 1;
 80036fc:	2301      	movs	r3, #1
 80036fe:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle1_sense = Moving_Average_Compute(handle_status, &handle1_sense_filterStruct); /* Moving average filter */
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	496f      	ldr	r1, [pc, #444]	; (80038c0 <get_handle_type+0x1e0>)
 8003704:	4618      	mov	r0, r3
 8003706:	f001 faa9 	bl	8004c5c <Moving_Average_Compute>
 800370a:	eeb0 7a40 	vmov.f32	s14, s0
 800370e:	eef0 7a60 	vmov.f32	s15, s1
 8003712:	4b6c      	ldr	r3, [pc, #432]	; (80038c4 <get_handle_type+0x1e4>)
 8003714:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_2_Pin) == 0){
 8003718:	2120      	movs	r1, #32
 800371a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800371e:	f006 fe91 	bl	800a444 <HAL_GPIO_ReadPin>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <get_handle_type+0x4e>
		handle_status = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	71fb      	strb	r3, [r7, #7]
 800372c:	e001      	b.n	8003732 <get_handle_type+0x52>
	}
	else{
		handle_status = 1;
 800372e:	2301      	movs	r3, #1
 8003730:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle2_sense = Moving_Average_Compute(handle_status, &handle2_sense_filterStruct); /* Moving average filter */
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	4964      	ldr	r1, [pc, #400]	; (80038c8 <get_handle_type+0x1e8>)
 8003736:	4618      	mov	r0, r3
 8003738:	f001 fa90 	bl	8004c5c <Moving_Average_Compute>
 800373c:	eeb0 7a40 	vmov.f32	s14, s0
 8003740:	eef0 7a60 	vmov.f32	s15, s1
 8003744:	4b5f      	ldr	r3, [pc, #380]	; (80038c4 <get_handle_type+0x1e4>)
 8003746:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

	/* Determine if NT115 handle is detected */
	if((sensor_values.handle1_sense >= 0.5) && (sensor_values.handle2_sense < 0.5)){
 800374a:	4b5e      	ldr	r3, [pc, #376]	; (80038c4 <get_handle_type+0x1e4>)
 800374c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	4b5d      	ldr	r3, [pc, #372]	; (80038cc <get_handle_type+0x1ec>)
 8003756:	f7fd f9fd 	bl	8000b54 <__aeabi_dcmpge>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d029      	beq.n	80037b4 <get_handle_type+0xd4>
 8003760:	4b58      	ldr	r3, [pc, #352]	; (80038c4 <get_handle_type+0x1e4>)
 8003762:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	4b58      	ldr	r3, [pc, #352]	; (80038cc <get_handle_type+0x1ec>)
 800376c:	f7fd f9de 	bl	8000b2c <__aeabi_dcmplt>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01e      	beq.n	80037b4 <get_handle_type+0xd4>
		handle = NT115;
 8003776:	4b56      	ldr	r3, [pc, #344]	; (80038d0 <get_handle_type+0x1f0>)
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 20; //20W
 800377c:	4b51      	ldr	r3, [pc, #324]	; (80038c4 <get_handle_type+0x1e4>)
 800377e:	4a55      	ldr	r2, [pc, #340]	; (80038d4 <get_handle_type+0x1f4>)
 8003780:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 3;
 8003782:	4955      	ldr	r1, [pc, #340]	; (80038d8 <get_handle_type+0x1f8>)
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	4b54      	ldr	r3, [pc, #336]	; (80038dc <get_handle_type+0x1fc>)
 800378a:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 1;
 800378e:	4954      	ldr	r1, [pc, #336]	; (80038e0 <get_handle_type+0x200>)
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <get_handle_type+0x204>)
 8003796:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 800379a:	4953      	ldr	r1, [pc, #332]	; (80038e8 <get_handle_type+0x208>)
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	4b52      	ldr	r3, [pc, #328]	; (80038ec <get_handle_type+0x20c>)
 80037a2:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 100;
 80037a6:	4952      	ldr	r1, [pc, #328]	; (80038f0 <get_handle_type+0x210>)
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	4b51      	ldr	r3, [pc, #324]	; (80038f4 <get_handle_type+0x214>)
 80037ae:	e9c1 2300 	strd	r2, r3, [r1]
 80037b2:	e052      	b.n	800385a <get_handle_type+0x17a>
	}
	/* Determine if T210 handle is detected */
	else if((sensor_values.handle1_sense < 0.5) && (sensor_values.handle2_sense >= 0.5)){
 80037b4:	4b43      	ldr	r3, [pc, #268]	; (80038c4 <get_handle_type+0x1e4>)
 80037b6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	4b43      	ldr	r3, [pc, #268]	; (80038cc <get_handle_type+0x1ec>)
 80037c0:	f7fd f9b4 	bl	8000b2c <__aeabi_dcmplt>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d029      	beq.n	800381e <get_handle_type+0x13e>
 80037ca:	4b3e      	ldr	r3, [pc, #248]	; (80038c4 <get_handle_type+0x1e4>)
 80037cc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <get_handle_type+0x1ec>)
 80037d6:	f7fd f9bd 	bl	8000b54 <__aeabi_dcmpge>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01e      	beq.n	800381e <get_handle_type+0x13e>
		handle = T210;
 80037e0:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <get_handle_type+0x1f0>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 80037e6:	4b37      	ldr	r3, [pc, #220]	; (80038c4 <get_handle_type+0x1e4>)
 80037e8:	4a43      	ldr	r2, [pc, #268]	; (80038f8 <get_handle_type+0x218>)
 80037ea:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 5;
 80037ec:	493a      	ldr	r1, [pc, #232]	; (80038d8 <get_handle_type+0x1f8>)
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	4b42      	ldr	r3, [pc, #264]	; (80038fc <get_handle_type+0x21c>)
 80037f4:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 5;
 80037f8:	4939      	ldr	r1, [pc, #228]	; (80038e0 <get_handle_type+0x200>)
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <get_handle_type+0x21c>)
 8003800:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8003804:	4938      	ldr	r1, [pc, #224]	; (80038e8 <get_handle_type+0x208>)
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	4b30      	ldr	r3, [pc, #192]	; (80038cc <get_handle_type+0x1ec>)
 800380c:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 125;
 8003810:	4937      	ldr	r1, [pc, #220]	; (80038f0 <get_handle_type+0x210>)
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <get_handle_type+0x220>)
 8003818:	e9c1 2300 	strd	r2, r3, [r1]
 800381c:	e01d      	b.n	800385a <get_handle_type+0x17a>
	}
	else{
		handle = T245;
 800381e:	4b2c      	ldr	r3, [pc, #176]	; (80038d0 <get_handle_type+0x1f0>)
 8003820:	2202      	movs	r2, #2
 8003822:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 8003824:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <get_handle_type+0x1e4>)
 8003826:	4a37      	ldr	r2, [pc, #220]	; (8003904 <get_handle_type+0x224>)
 8003828:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 8;
 800382a:	492b      	ldr	r1, [pc, #172]	; (80038d8 <get_handle_type+0x1f8>)
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	4b35      	ldr	r3, [pc, #212]	; (8003908 <get_handle_type+0x228>)
 8003832:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 3;
 8003836:	492a      	ldr	r1, [pc, #168]	; (80038e0 <get_handle_type+0x200>)
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <get_handle_type+0x1fc>)
 800383e:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8003842:	4929      	ldr	r1, [pc, #164]	; (80038e8 <get_handle_type+0x208>)
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	4b20      	ldr	r3, [pc, #128]	; (80038cc <get_handle_type+0x1ec>)
 800384a:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 150;
 800384e:	4928      	ldr	r1, [pc, #160]	; (80038f0 <get_handle_type+0x210>)
 8003850:	a319      	add	r3, pc, #100	; (adr r3, 80038b8 <get_handle_type+0x1d8>)
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 800385a:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <get_handle_type+0x1f8>)
 800385c:	ed93 7b00 	vldr	d7, [r3]
 8003860:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <get_handle_type+0x200>)
 8003862:	ed93 6b00 	vldr	d6, [r3]
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <get_handle_type+0x208>)
 8003868:	ed93 5b00 	vldr	d5, [r3]
 800386c:	eeb0 2a45 	vmov.f32	s4, s10
 8003870:	eef0 2a65 	vmov.f32	s5, s11
 8003874:	eeb0 1a46 	vmov.f32	s2, s12
 8003878:	eef0 1a66 	vmov.f32	s3, s13
 800387c:	eeb0 0a47 	vmov.f32	s0, s14
 8003880:	eef0 0a67 	vmov.f32	s1, s15
 8003884:	4821      	ldr	r0, [pc, #132]	; (800390c <get_handle_type+0x22c>)
 8003886:	f001 fcc2 	bl	800520e <PID_SetTunings>
	PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 800388a:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <get_handle_type+0x210>)
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	4614      	mov	r4, r2
 8003892:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <get_handle_type+0x210>)
 8003898:	ed93 7b00 	vldr	d7, [r3]
 800389c:	eeb0 1a47 	vmov.f32	s2, s14
 80038a0:	eef0 1a67 	vmov.f32	s3, s15
 80038a4:	ec45 4b10 	vmov	d0, r4, r5
 80038a8:	4818      	ldr	r0, [pc, #96]	; (800390c <get_handle_type+0x22c>)
 80038aa:	f001 fc90 	bl	80051ce <PID_SetILimits>

}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bdb0      	pop	{r4, r5, r7, pc}
 80038b6:	bf00      	nop
 80038b8:	00000000 	.word	0x00000000
 80038bc:	4062c000 	.word	0x4062c000
 80038c0:	20001718 	.word	0x20001718
 80038c4:	20000038 	.word	0x20000038
 80038c8:	20001a44 	.word	0x20001a44
 80038cc:	3fe00000 	.word	0x3fe00000
 80038d0:	200005e0 	.word	0x200005e0
 80038d4:	41a00000 	.word	0x41a00000
 80038d8:	20000610 	.word	0x20000610
 80038dc:	40080000 	.word	0x40080000
 80038e0:	20000618 	.word	0x20000618
 80038e4:	3ff00000 	.word	0x3ff00000
 80038e8:	20000620 	.word	0x20000620
 80038ec:	3fd00000 	.word	0x3fd00000
 80038f0:	20000020 	.word	0x20000020
 80038f4:	40590000 	.word	0x40590000
 80038f8:	42700000 	.word	0x42700000
 80038fc:	40140000 	.word	0x40140000
 8003900:	405f4000 	.word	0x405f4000
 8003904:	42f00000 	.word	0x42f00000
 8003908:	40200000 	.word	0x40200000
 800390c:	200022d8 	.word	0x200022d8

08003910 <HAL_GPIO_EXTI_Callback>:

/* Interrupts at button press */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	2b20      	cmp	r3, #32
 800391e:	d006      	beq.n	800392e <HAL_GPIO_EXTI_Callback+0x1e>
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	2b80      	cmp	r3, #128	; 0x80
 8003924:	d003      	beq.n	800392e <HAL_GPIO_EXTI_Callback+0x1e>
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d109      	bne.n	8003942 <HAL_GPIO_EXTI_Callback+0x32>
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_GPIO_EXTI_Callback+0x3c>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d105      	bne.n	8003942 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_TIM_Base_Start_IT(&htim16);
 8003936:	4806      	ldr	r0, [pc, #24]	; (8003950 <HAL_GPIO_EXTI_Callback+0x40>)
 8003938:	f00a f970 	bl	800dc1c <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_GPIO_EXTI_Callback+0x3c>)
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
    }
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	2000001c 	.word	0x2000001c
 8003950:	200021ac 	.word	0x200021ac

08003954 <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	7f1b      	ldrb	r3, [r3, #28]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d003      	beq.n	800396c <HAL_TIM_IC_CaptureCallback+0x18>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	7f1b      	ldrb	r3, [r3, #28]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d101      	bne.n	8003970 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 800396c:	f7ff fd26 	bl	80033bc <beep>
	}
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	if (((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) && (current_measurement_requested == 1)){
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d110      	bne.n	80039aa <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	7f1b      	ldrb	r3, [r3, #28]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10c      	bne.n	80039aa <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d108      	bne.n	80039aa <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		current_measurement_requested = 0;
 8003998:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
		current_measurement_done = 0;
 800399e:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc2);
 80039a4:	4806      	ldr	r0, [pc, #24]	; (80039c0 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80039a6:	f003 fd23 	bl	80073f0 <HAL_ADC_Start_IT>
	}
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20001fe4 	.word	0x20001fe4
 80039b8:	20000738 	.word	0x20000738
 80039bc:	200001dc 	.word	0x200001dc
 80039c0:	20001ddc 	.word	0x20001ddc

080039c4 <HAL_TIM_PeriodElapsedCallback>:

/* Timer Callbacks */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	/* take thermocouple measurement every 25 ms */
	if (htim == &htim6){
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a35      	ldr	r2, [pc, #212]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10c      	bne.n	80039ee <HAL_TIM_PeriodElapsedCallback+0x2a>
		heater_off();
 80039d4:	f7fd ff9a 	bl	800190c <heater_off>
		thermocouple_measurement_done = 0;
 80039d8:	4b33      	ldr	r3, [pc, #204]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim7);
 80039de:	4b33      	ldr	r3, [pc, #204]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b31      	ldr	r3, [pc, #196]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim7){
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2e      	ldr	r2, [pc, #184]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d104      	bne.n	8003a00 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 80039f6:	2239      	movs	r2, #57	; 0x39
 80039f8:	492d      	ldr	r1, [pc, #180]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80039fa:	482e      	ldr	r0, [pc, #184]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80039fc:	f003 fe28 	bl	8007650 <HAL_ADC_Start_DMA>
		}

	/* Beep length timer */
	if (htim == &htim17){
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a2d      	ldr	r2, [pc, #180]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d106      	bne.n	8003a16 <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_TIM_Base_Stop_IT(&htim17);
 8003a08:	482b      	ldr	r0, [pc, #172]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003a0a:	f00a f971 	bl	800dcf0 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 8003a0e:	2104      	movs	r1, #4
 8003a10:	482a      	ldr	r0, [pc, #168]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003a12:	f00a fb3f 	bl	800e094 <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim16 && SW_ready == 0)){
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d13d      	bne.n	8003a9a <HAL_TIM_PeriodElapsedCallback+0xd6>
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d139      	bne.n	8003a9a <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 8003a26:	2120      	movs	r1, #32
 8003a28:	4827      	ldr	r0, [pc, #156]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003a2a:	f006 fd0b 	bl	800a444 <HAL_GPIO_ReadPin>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d10b      	bne.n	8003a4c <HAL_TIM_PeriodElapsedCallback+0x88>
			SW_ready = 1;
 8003a34:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 8003a3a:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
			beep();
 8003a40:	f7ff fcbc 	bl	80033bc <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003a44:	481e      	ldr	r0, [pc, #120]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a46:	f00a f953 	bl	800dcf0 <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim16);
		}
	}
}
 8003a4a:	e026      	b.n	8003a9a <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 8003a4c:	2180      	movs	r1, #128	; 0x80
 8003a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a52:	f006 fcf7 	bl	800a444 <HAL_GPIO_ReadPin>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d10b      	bne.n	8003a74 <HAL_TIM_PeriodElapsedCallback+0xb0>
			SW_ready = 1;
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
			beep();
 8003a68:	f7ff fca8 	bl	80033bc <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003a6c:	4814      	ldr	r0, [pc, #80]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a6e:	f00a f93f 	bl	800dcf0 <HAL_TIM_Base_Stop_IT>
}
 8003a72:	e012      	b.n	8003a9a <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 8003a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a78:	4813      	ldr	r0, [pc, #76]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003a7a:	f006 fce3 	bl	800a444 <HAL_GPIO_ReadPin>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d10a      	bne.n	8003a9a <HAL_TIM_PeriodElapsedCallback+0xd6>
			SW_ready = 1;
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
			beep();
 8003a90:	f7ff fc94 	bl	80033bc <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003a94:	480a      	ldr	r0, [pc, #40]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a96:	f00a f92b 	bl	800dcf0 <HAL_TIM_Base_Stop_IT>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200020c8 	.word	0x200020c8
 8003aa8:	200001dd 	.word	0x200001dd
 8003aac:	20002114 	.word	0x20002114
 8003ab0:	20000654 	.word	0x20000654
 8003ab4:	20001d70 	.word	0x20001d70
 8003ab8:	200021f8 	.word	0x200021f8
 8003abc:	2000207c 	.word	0x2000207c
 8003ac0:	200021ac 	.word	0x200021ac
 8003ac4:	2000001c 	.word	0x2000001c
 8003ac8:	48000400 	.word	0x48000400
 8003acc:	20000604 	.word	0x20000604
 8003ad0:	20000605 	.word	0x20000605
 8003ad4:	20000606 	.word	0x20000606

08003ad8 <HAL_ADC_ConvCpltCallback>:
/* ADC conversion completed Callbacks */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (thermocouple_measurement_done == 0)){
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae8:	d110      	bne.n	8003b0c <HAL_ADC_ConvCpltCallback+0x34>
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_ADC_ConvCpltCallback+0x74>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10c      	bne.n	8003b0c <HAL_ADC_ConvCpltCallback+0x34>
		get_thermocouple_temperature();
 8003af2:	f7fd fd89 	bl	8001608 <get_thermocouple_temperature>
		heater_on();
 8003af6:	f7fd feb3 	bl	8001860 <heater_on>
		/* Compute PID */
		PID_Compute(&TPID);
 8003afa:	4815      	ldr	r0, [pc, #84]	; (8003b50 <HAL_ADC_ConvCpltCallback+0x78>)
 8003afc:	f001 f994 	bl	8004e28 <PID_Compute>
		HAL_ADC_Stop_DMA(&hadc1);
 8003b00:	4814      	ldr	r0, [pc, #80]	; (8003b54 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003b02:	f003 fe59 	bl	80077b8 <HAL_ADC_Stop_DMA>
		thermocouple_measurement_done = 1;
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_ADC_ConvCpltCallback+0x74>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
	}
	if ((hadc->Instance == ADC2) && (current_measurement_done == 0)){
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a11      	ldr	r2, [pc, #68]	; (8003b58 <HAL_ADC_ConvCpltCallback+0x80>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d116      	bne.n	8003b44 <HAL_ADC_ConvCpltCallback+0x6c>
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <HAL_ADC_ConvCpltCallback+0x84>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d112      	bne.n	8003b44 <HAL_ADC_ConvCpltCallback+0x6c>
		sensor_values.leak_current = HAL_ADC_GetValue(&hadc2);
 8003b1e:	4810      	ldr	r0, [pc, #64]	; (8003b60 <HAL_ADC_ConvCpltCallback+0x88>)
 8003b20:	f003 feab 	bl	800787a <HAL_ADC_GetValue>
 8003b24:	4603      	mov	r3, r0
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003b2a:	831a      	strh	r2, [r3, #24]
		current_raw = HAL_ADC_GetValue(&hadc2);
 8003b2c:	480c      	ldr	r0, [pc, #48]	; (8003b60 <HAL_ADC_ConvCpltCallback+0x88>)
 8003b2e:	f003 fea4 	bl	800787a <HAL_ADC_GetValue>
 8003b32:	4603      	mov	r3, r0
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <HAL_ADC_ConvCpltCallback+0x90>)
 8003b38:	801a      	strh	r2, [r3, #0]
		heater_on();
 8003b3a:	f7fd fe91 	bl	8001860 <heater_on>
		current_measurement_done = 1;
 8003b3e:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <HAL_ADC_ConvCpltCallback+0x84>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
	}
}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200001dd 	.word	0x200001dd
 8003b50:	200022d8 	.word	0x200022d8
 8003b54:	20001d70 	.word	0x20001d70
 8003b58:	50000100 	.word	0x50000100
 8003b5c:	200001dc 	.word	0x200001dc
 8003b60:	20001ddc 	.word	0x20001ddc
 8003b64:	20000038 	.word	0x20000038
 8003b68:	200006c6 	.word	0x200006c6

08003b6c <HAL_ADC_LevelOutOfWindowCallback>:

/* ADC watchdog Callback */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
		LCD_draw_earth_fault_popup();
 8003b74:	f7ff fb54 	bl	8003220 <LCD_draw_earth_fault_popup>
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b84:	ed2d 8b06 	vpush	{d8-d10}
 8003b88:	b08e      	sub	sp, #56	; 0x38
 8003b8a:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b8c:	f002 feb4 	bl	80068f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b90:	f000 fa80 	bl	8004094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b94:	f000 ff7c 	bl	8004a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b98:	f000 ff48 	bl	8004a2c <MX_DMA_Init>
  MX_ADC1_Init();
 8003b9c:	f000 fac8 	bl	8004130 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003ba0:	f000 fb5e 	bl	8004260 <MX_ADC2_Init>
  MX_CRC_Init();
 8003ba4:	f000 fbfa 	bl	800439c <MX_CRC_Init>
  MX_TIM1_Init();
 8003ba8:	f000 fc98 	bl	80044dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8003bac:	f000 fd36 	bl	800461c <MX_TIM2_Init>
  MX_TIM4_Init();
 8003bb0:	f000 fd88 	bl	80046c4 <MX_TIM4_Init>
  MX_SPI2_Init();
 8003bb4:	f000 fc54 	bl	8004460 <MX_SPI2_Init>
  MX_I2C1_Init();
 8003bb8:	f000 fc12 	bl	80043e0 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8003bbc:	f012 fa94 	bl	80160e8 <MX_USB_Device_Init>
  MX_TIM17_Init();
 8003bc0:	f000 feb8 	bl	8004934 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8003bc4:	f000 fee6 	bl	8004994 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003bc8:	f000 fe0c 	bl	80047e4 <MX_TIM7_Init>
  MX_TIM8_Init();
 8003bcc:	f000 fe4a 	bl	8004864 <MX_TIM8_Init>
  MX_TIM6_Init();
 8003bd0:	f000 fdd2 	bl	8004778 <MX_TIM6_Init>
  MX_TIM16_Init();
 8003bd4:	f000 fe86 	bl	80048e4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 8003bd8:	2000      	movs	r0, #0
 8003bda:	f7fd fe19 	bl	8001810 <set_heater_duty>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8003bde:	2108      	movs	r1, #8
 8003be0:	489f      	ldr	r0, [pc, #636]	; (8003e60 <main+0x2e0>)
 8003be2:	f00b fb0f 	bl	800f204 <HAL_TIMEx_PWMN_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8003be6:	213c      	movs	r1, #60	; 0x3c
 8003be8:	489e      	ldr	r0, [pc, #632]	; (8003e64 <main+0x2e4>)
 8003bea:	f00a fc2d 	bl	800e448 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	489b      	ldr	r0, [pc, #620]	; (8003e60 <main+0x2e0>)
 8003bf2:	f00a f903 	bl	800ddfc <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 8003bf6:	4b9c      	ldr	r3, [pc, #624]	; (8003e68 <main+0x2e8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2205      	movs	r2, #5
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(&htim6);
 8003bfe:	489b      	ldr	r0, [pc, #620]	; (8003e6c <main+0x2ec>)
 8003c00:	f00a f80c 	bl	800dc1c <HAL_TIM_Base_Start_IT>

	__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 8003c04:	4b9a      	ldr	r3, [pc, #616]	; (8003e70 <main+0x2f0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	4b99      	ldr	r3, [pc, #612]	; (8003e70 <main+0x2f0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	60da      	str	r2, [r3, #12]

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003c14:	217f      	movs	r1, #127	; 0x7f
 8003c16:	4897      	ldr	r0, [pc, #604]	; (8003e74 <main+0x2f4>)
 8003c18:	f005 f8ee 	bl	8008df8 <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003c1c:	217f      	movs	r1, #127	; 0x7f
 8003c1e:	4896      	ldr	r0, [pc, #600]	; (8003e78 <main+0x2f8>)
 8003c20:	f005 f8ea 	bl	8008df8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8003c24:	2239      	movs	r2, #57	; 0x39
 8003c26:	4995      	ldr	r1, [pc, #596]	; (8003e7c <main+0x2fc>)
 8003c28:	4893      	ldr	r0, [pc, #588]	; (8003e78 <main+0x2f8>)
 8003c2a:	f003 fd11 	bl	8007650 <HAL_ADC_Start_DMA>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,30);
 8003c2e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003c32:	4893      	ldr	r0, [pc, #588]	; (8003e80 <main+0x300>)
 8003c34:	f000 ffe1 	bl	8004bfa <Moving_Average_Init>
	Moving_Average_Init(&mcu_temperature_filter_struct,100);
 8003c38:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8003e84 <main+0x304>
 8003c3c:	4892      	ldr	r0, [pc, #584]	; (8003e88 <main+0x308>)
 8003c3e:	f000 ffdc 	bl	8004bfa <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,25);
 8003c42:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8003c46:	4891      	ldr	r0, [pc, #580]	; (8003e8c <main+0x30c>)
 8003c48:	f000 ffd7 	bl	8004bfa <Moving_Average_Init>
	Moving_Average_Init(&current_filterStruct,3);
 8003c4c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003c50:	488f      	ldr	r0, [pc, #572]	; (8003e90 <main+0x310>)
 8003c52:	f000 ffd2 	bl	8004bfa <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 8003c56:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003c5a:	488e      	ldr	r0, [pc, #568]	; (8003e94 <main+0x314>)
 8003c5c:	f000 ffcd 	bl	8004bfa <Moving_Average_Init>
	Moving_Average_Init(&handle1_sense_filterStruct,20);
 8003c60:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003c64:	488c      	ldr	r0, [pc, #560]	; (8003e98 <main+0x318>)
 8003c66:	f000 ffc8 	bl	8004bfa <Moving_Average_Init>
	Moving_Average_Init(&handle2_sense_filterStruct,20);
 8003c6a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003c6e:	488b      	ldr	r0, [pc, #556]	; (8003e9c <main+0x31c>)
 8003c70:	f000 ffc3 	bl	8004bfa <Moving_Average_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 8003c74:	20c8      	movs	r0, #200	; 0xc8
 8003c76:	f002 feaf 	bl	80069d8 <HAL_Delay>

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 8003c7a:	f7fd f9ef 	bl	800105c <FlashCheckCRC>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f083 0301 	eor.w	r3, r3, #1
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <main+0x110>
  	    	FlashWrite(&default_flash_values);
 8003c8a:	4885      	ldr	r0, [pc, #532]	; (8003ea0 <main+0x320>)
 8003c8c:	f7fd fa8a 	bl	80011a4 <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 8003c90:	4884      	ldr	r0, [pc, #528]	; (8003ea4 <main+0x324>)
 8003c92:	f7fd fa6d 	bl	8001170 <FlashRead>

  	    /* Set screen rotation */
  	    if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8003c96:	4b83      	ldr	r3, [pc, #524]	; (8003ea4 <main+0x324>)
 8003c98:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	f7fc ff38 	bl	8000b18 <__aeabi_dcmpeq>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
		  #define LCD_WIDTH  240
		  #define LCD_HEIGHT 320
  	    }
  	    if((flash_values.screen_rotation == 1) || (flash_values.screen_rotation == 3)){
 8003cac:	4b7d      	ldr	r3, [pc, #500]	; (8003ea4 <main+0x324>)
 8003cae:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	4b7c      	ldr	r3, [pc, #496]	; (8003ea8 <main+0x328>)
 8003cb8:	f7fc ff2e 	bl	8000b18 <__aeabi_dcmpeq>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
		  #define LCD_WIDTH  240
		  #define LCD_HEIGHT 320
		}

  	    LCD_init();
 8003cc0:	f002 fdae 	bl	8006820 <LCD_init>
  	  	LCD_SetRotation(flash_values.screen_rotation);
 8003cc4:	4b77      	ldr	r3, [pc, #476]	; (8003ea4 <main+0x324>)
 8003cc6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f7fc ff93 	bl	8000bf8 <__aeabi_d2uiz>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 fb50 	bl	800637c <LCD_SetRotation>

  		/* Set startup state */
  	    change_state(HALTED);
 8003cdc:	2004      	movs	r0, #4
 8003cde:	f7fd fc09 	bl	80014f4 <change_state>

  		settings_menue();
 8003ce2:	f7fd fe61 	bl	80019a8 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8003ce6:	4b6f      	ldr	r3, [pc, #444]	; (8003ea4 <main+0x324>)
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f7fc ff80 	bl	8000bf8 <__aeabi_d2uiz>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8003cfc:	4b6b      	ldr	r3, [pc, #428]	; (8003eac <main+0x32c>)
 8003cfe:	ed93 7b00 	vldr	d7, [r3]
 8003d02:	4b6b      	ldr	r3, [pc, #428]	; (8003eb0 <main+0x330>)
 8003d04:	ed93 6b00 	vldr	d6, [r3]
 8003d08:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <main+0x334>)
 8003d0a:	ed93 5b00 	vldr	d5, [r3]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	2301      	movs	r3, #1
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	eeb0 2a45 	vmov.f32	s4, s10
 8003d1a:	eef0 2a65 	vmov.f32	s5, s11
 8003d1e:	eeb0 1a46 	vmov.f32	s2, s12
 8003d22:	eef0 1a66 	vmov.f32	s3, s13
 8003d26:	eeb0 0a47 	vmov.f32	s0, s14
 8003d2a:	eef0 0a67 	vmov.f32	s1, s15
 8003d2e:	4b62      	ldr	r3, [pc, #392]	; (8003eb8 <main+0x338>)
 8003d30:	4a62      	ldr	r2, [pc, #392]	; (8003ebc <main+0x33c>)
 8003d32:	4963      	ldr	r1, [pc, #396]	; (8003ec0 <main+0x340>)
 8003d34:	4863      	ldr	r0, [pc, #396]	; (8003ec4 <main+0x344>)
 8003d36:	f001 f82b 	bl	8004d90 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4861      	ldr	r0, [pc, #388]	; (8003ec4 <main+0x344>)
 8003d3e:	f001 f9ba 	bl	80050b6 <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 8003d42:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <main+0x348>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2200      	movs	r2, #0
 8003d48:	4619      	mov	r1, r3
 8003d4a:	485e      	ldr	r0, [pc, #376]	; (8003ec4 <main+0x344>)
 8003d4c:	f001 fb62 	bl	8005414 <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 8003d50:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8003e50 <main+0x2d0>
 8003d54:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8003e58 <main+0x2d8>
 8003d58:	485a      	ldr	r0, [pc, #360]	; (8003ec4 <main+0x344>)
 8003d5a:	f001 f9ca 	bl	80050f2 <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 8003d5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <main+0x34c>)
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	4690      	mov	r8, r2
 8003d66:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003d6a:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <main+0x34c>)
 8003d6c:	ed93 7b00 	vldr	d7, [r3]
 8003d70:	eeb0 1a47 	vmov.f32	s2, s14
 8003d74:	eef0 1a67 	vmov.f32	s3, s15
 8003d78:	ec49 8b10 	vmov	d0, r8, r9
 8003d7c:	4851      	ldr	r0, [pc, #324]	; (8003ec4 <main+0x344>)
 8003d7e:	f001 fa26 	bl	80051ce <PID_SetILimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 8003d82:	f7fe ff6f 	bl	8002c64 <LCD_draw_main_screen>

  		/* Init and fill filter structures with initial values */
  		for (int i = 0; i<200;i++){
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	e010      	b.n	8003dae <main+0x22e>
  			get_bus_voltage();
 8003d8c:	f7fd fbe8 	bl	8001560 <get_bus_voltage>
  			get_heater_current();
 8003d90:	f7fd fc12 	bl	80015b8 <get_heater_current>
  			get_mcu_temp();
 8003d94:	f7fd fb3c 	bl	8001410 <get_mcu_temp>
  			get_thermocouple_temperature();
 8003d98:	f7fd fc36 	bl	8001608 <get_thermocouple_temperature>
  			get_handle_type();
 8003d9c:	f7ff fca0 	bl	80036e0 <get_handle_type>
  			get_stand_status();
 8003da0:	f7ff fc0a 	bl	80035b8 <get_stand_status>
  			handle_button_status();
 8003da4:	f7ff fbae 	bl	8003504 <handle_button_status>
  		for (int i = 0; i<200;i++){
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3301      	adds	r3, #1
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2bc7      	cmp	r3, #199	; 0xc7
 8003db2:	ddeb      	ble.n	8003d8c <main+0x20c>
  		}

  		/* Start-up beep */
  		beep();
 8003db4:	f7ff fb02 	bl	80033bc <beep>
  		HAL_Delay(100);
 8003db8:	2064      	movs	r0, #100	; 0x64
 8003dba:	f002 fe0d 	bl	80069d8 <HAL_Delay>
  		beep();
 8003dbe:	f7ff fafd 	bl	80033bc <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003dc2:	f002 fdfd 	bl	80069c0 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <main+0x350>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	1ad2      	subs	r2, r2, r3
 8003dce:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <main+0x354>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d30e      	bcc.n	8003df4 <main+0x274>
  				get_stand_status();
 8003dd6:	f7ff fbef 	bl	80035b8 <get_stand_status>
  				get_handle_type();
 8003dda:	f7ff fc81 	bl	80036e0 <get_handle_type>
  				get_set_temperature();
 8003dde:	f7ff faad 	bl	800333c <get_set_temperature>
  				handle_button_status();
 8003de2:	f7ff fb8f 	bl	8003504 <handle_button_status>
  	  			handle_emergency_shutdown();
 8003de6:	f7ff fb0b 	bl	8003400 <handle_emergency_shutdown>
  				previous_sensor_update_high_update = HAL_GetTick();
 8003dea:	f002 fde9 	bl	80069c0 <HAL_GetTick>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4a37      	ldr	r2, [pc, #220]	; (8003ed0 <main+0x350>)
 8003df2:	6013      	str	r3, [r2, #0]
  			}

  			if(HAL_GetTick() - previous_sensor_update_low_update >= interval_sensor_update_low_update){
 8003df4:	f002 fde4 	bl	80069c0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b37      	ldr	r3, [pc, #220]	; (8003ed8 <main+0x358>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	4b36      	ldr	r3, [pc, #216]	; (8003edc <main+0x35c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d30a      	bcc.n	8003e1e <main+0x29e>
  				get_bus_voltage();
 8003e08:	f7fd fbaa 	bl	8001560 <get_bus_voltage>
  				get_heater_current();
 8003e0c:	f7fd fbd4 	bl	80015b8 <get_heater_current>
  				get_mcu_temp();
 8003e10:	f7fd fafe 	bl	8001410 <get_mcu_temp>
  				previous_sensor_update_low_update = HAL_GetTick();
 8003e14:	f002 fdd4 	bl	80069c0 <HAL_GetTick>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4a2f      	ldr	r2, [pc, #188]	; (8003ed8 <main+0x358>)
 8003e1c:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8003e1e:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <main+0x360>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	dc68      	bgt.n	8003ef8 <main+0x378>
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	da5e      	bge.n	8003ee8 <main+0x368>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <main+0x2b4>
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d007      	beq.n	8003e42 <main+0x2c2>
 8003e32:	e061      	b.n	8003ef8 <main+0x378>
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8003e34:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <main+0x364>)
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	491f      	ldr	r1, [pc, #124]	; (8003eb8 <main+0x338>)
 8003e3c:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003e40:	e05a      	b.n	8003ef8 <main+0x378>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 8003e42:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <main+0x324>)
 8003e44:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e48:	491b      	ldr	r1, [pc, #108]	; (8003eb8 <main+0x338>)
 8003e4a:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003e4e:	e053      	b.n	8003ef8 <main+0x378>
 8003e50:	00000000 	.word	0x00000000
 8003e54:	407f4000 	.word	0x407f4000
	...
 8003e60:	20001fe4 	.word	0x20001fe4
 8003e64:	20002030 	.word	0x20002030
 8003e68:	2000207c 	.word	0x2000207c
 8003e6c:	200020c8 	.word	0x200020c8
 8003e70:	20002114 	.word	0x20002114
 8003e74:	20001ddc 	.word	0x20001ddc
 8003e78:	20001d70 	.word	0x20001d70
 8003e7c:	20000654 	.word	0x20000654
 8003e80:	2000073c 	.word	0x2000073c
 8003e84:	42c80000 	.word	0x42c80000
 8003e88:	20000a68 	.word	0x20000a68
 8003e8c:	20000d94 	.word	0x20000d94
 8003e90:	200010c0 	.word	0x200010c0
 8003e94:	200013ec 	.word	0x200013ec
 8003e98:	20001718 	.word	0x20001718
 8003e9c:	20001a44 	.word	0x20001a44
 8003ea0:	20000088 	.word	0x20000088
 8003ea4:	200006d0 	.word	0x200006d0
 8003ea8:	3ff00000 	.word	0x3ff00000
 8003eac:	20000610 	.word	0x20000610
 8003eb0:	20000618 	.word	0x20000618
 8003eb4:	20000620 	.word	0x20000620
 8003eb8:	20000728 	.word	0x20000728
 8003ebc:	20000720 	.word	0x20000720
 8003ec0:	20000040 	.word	0x20000040
 8003ec4:	200022d8 	.word	0x200022d8
 8003ec8:	2000000c 	.word	0x2000000c
 8003ecc:	20000020 	.word	0x20000020
 8003ed0:	200005fc 	.word	0x200005fc
 8003ed4:	20000014 	.word	0x20000014
 8003ed8:	20000600 	.word	0x20000600
 8003edc:	20000018 	.word	0x20000018
 8003ee0:	2000001d 	.word	0x2000001d
 8003ee4:	20000038 	.word	0x20000038
  				}
  				case SLEEP:
  				case EMERGENCY_SLEEP:
  				case HALTED: {
  					PID_setpoint = 0;
 8003ee8:	4958      	ldr	r1, [pc, #352]	; (800404c <main+0x4cc>)
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003ef6:	bf00      	nop
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8003ef8:	f002 fd62 	bl	80069c0 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b54      	ldr	r3, [pc, #336]	; (8004050 <main+0x4d0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	1ad2      	subs	r2, r2, r3
 8003f04:	4b53      	ldr	r3, [pc, #332]	; (8004054 <main+0x4d4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d370      	bcc.n	8003fee <main+0x46e>
  				memset(&buffer, '\0', sizeof(buffer));
 8003f0c:	2228      	movs	r2, #40	; 0x28
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4851      	ldr	r0, [pc, #324]	; (8004058 <main+0x4d8>)
 8003f12:	f013 fd8e 	bl	8017a32 <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f16:	4b51      	ldr	r3, [pc, #324]	; (800405c <main+0x4dc>)
 8003f18:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8003f1c:	4b4f      	ldr	r3, [pc, #316]	; (800405c <main+0x4dc>)
 8003f1e:	e9d3 8900 	ldrd	r8, r9, [r3]
  						sensor_values.thermocouple_temperature, sensor_values.set_temperature,
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f22:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <main+0x4e0>)
 8003f24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	4b4d      	ldr	r3, [pc, #308]	; (8004064 <main+0x4e4>)
 8003f2e:	f7fc fcb5 	bl	800089c <__aeabi_ddiv>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	4b4a      	ldr	r3, [pc, #296]	; (8004068 <main+0x4e8>)
 8003f40:	f7fc fb82 	bl	8000648 <__aeabi_dmul>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	ec43 2b19 	vmov	d9, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f4c:	4847      	ldr	r0, [pc, #284]	; (800406c <main+0x4ec>)
 8003f4e:	f001 faa5 	bl	800549c <PID_GetPpart>
 8003f52:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	4b45      	ldr	r3, [pc, #276]	; (8004070 <main+0x4f0>)
 8003f5c:	f7fc fc9e 	bl	800089c <__aeabi_ddiv>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f68:	4840      	ldr	r0, [pc, #256]	; (800406c <main+0x4ec>)
 8003f6a:	f001 faa9 	bl	80054c0 <PID_GetIpart>
 8003f6e:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	4b3e      	ldr	r3, [pc, #248]	; (8004070 <main+0x4f0>)
 8003f78:	f7fc fc90 	bl	800089c <__aeabi_ddiv>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f84:	4839      	ldr	r0, [pc, #228]	; (800406c <main+0x4ec>)
 8003f86:	f001 faad 	bl	80054e4 <PID_GetDpart>
 8003f8a:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	4b37      	ldr	r3, [pc, #220]	; (8004070 <main+0x4f0>)
 8003f94:	f7fc fc82 	bl	800089c <__aeabi_ddiv>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	461d      	mov	r5, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003fa0:	4b2e      	ldr	r3, [pc, #184]	; (800405c <main+0x4dc>)
 8003fa2:	695b      	ldr	r3, [r3, #20]
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc faf7 	bl	8000598 <__aeabi_f2d>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003fb2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003fb6:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003fba:	ed8d ab04 	vstr	d10, [sp, #16]
 8003fbe:	ed8d 9b02 	vstr	d9, [sp, #8]
 8003fc2:	e9cd 8900 	strd	r8, r9, [sp]
 8003fc6:	4652      	mov	r2, sl
 8003fc8:	465b      	mov	r3, fp
 8003fca:	492a      	ldr	r1, [pc, #168]	; (8004074 <main+0x4f4>)
 8003fcc:	4822      	ldr	r0, [pc, #136]	; (8004058 <main+0x4d8>)
 8003fce:	f013 fccd 	bl	801796c <siprintf>
  				CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
 8003fd2:	4821      	ldr	r0, [pc, #132]	; (8004058 <main+0x4d8>)
 8003fd4:	f7fc f974 	bl	80002c0 <strlen>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	481e      	ldr	r0, [pc, #120]	; (8004058 <main+0x4d8>)
 8003fe0:	f012 f940 	bl	8016264 <CDC_Transmit_FS>
  				previous_millis_debug = HAL_GetTick();
 8003fe4:	f002 fcec 	bl	80069c0 <HAL_GetTick>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4a19      	ldr	r2, [pc, #100]	; (8004050 <main+0x4d0>)
 8003fec:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_measure_current_update >= interval_measure_current){
 8003fee:	f002 fce7 	bl	80069c0 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <main+0x4f8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	1ad2      	subs	r2, r2, r3
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <main+0x4fc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d311      	bcc.n	8004026 <main+0x4a6>
  					if(thermocouple_measurement_done == 1){ //Only take current measurement if thermocouple measurement is not ongoing
 8004002:	4b1f      	ldr	r3, [pc, #124]	; (8004080 <main+0x500>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10d      	bne.n	8004026 <main+0x4a6>
						current_measurement_done = 0;
 800400a:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <main+0x504>)
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
						set_heater_duty(PID_MAX_OUTPUT/2);
 8004010:	20fa      	movs	r0, #250	; 0xfa
 8004012:	f7fd fbfd 	bl	8001810 <set_heater_duty>
						current_measurement_requested = 1;
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <main+0x508>)
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
	  					previous_measure_current_update = HAL_GetTick();
 800401c:	f002 fcd0 	bl	80069c0 <HAL_GetTick>
 8004020:	4603      	mov	r3, r0
 8004022:	4a15      	ldr	r2, [pc, #84]	; (8004078 <main+0x4f8>)
 8004024:	6013      	str	r3, [r2, #0]
  					}
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 8004026:	f002 fccb 	bl	80069c0 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	4b17      	ldr	r3, [pc, #92]	; (800408c <main+0x50c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	1ad2      	subs	r2, r2, r3
 8004032:	4b17      	ldr	r3, [pc, #92]	; (8004090 <main+0x510>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	f4ff aec3 	bcc.w	8003dc2 <main+0x242>
  				update_display();
 800403c:	f7fd ffe8 	bl	8002010 <update_display>
  				previous_millis_display = HAL_GetTick();
 8004040:	f002 fcbe 	bl	80069c0 <HAL_GetTick>
 8004044:	4603      	mov	r3, r0
 8004046:	4a11      	ldr	r2, [pc, #68]	; (800408c <main+0x50c>)
 8004048:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 800404a:	e6ba      	b.n	8003dc2 <main+0x242>
 800404c:	20000728 	.word	0x20000728
 8004050:	200005e8 	.word	0x200005e8
 8004054:	20000008 	.word	0x20000008
 8004058:	20000628 	.word	0x20000628
 800405c:	20000038 	.word	0x20000038
 8004060:	20000720 	.word	0x20000720
 8004064:	407f4000 	.word	0x407f4000
 8004068:	40590000 	.word	0x40590000
 800406c:	200022d8 	.word	0x200022d8
 8004070:	40240000 	.word	0x40240000
 8004074:	0801b720 	.word	0x0801b720
 8004078:	200005f8 	.word	0x200005f8
 800407c:	20000010 	.word	0x20000010
 8004080:	200001dd 	.word	0x200001dd
 8004084:	200001dc 	.word	0x200001dc
 8004088:	20000738 	.word	0x20000738
 800408c:	200005e4 	.word	0x200005e4
 8004090:	20000004 	.word	0x20000004

08004094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b094      	sub	sp, #80	; 0x50
 8004098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800409a:	f107 0318 	add.w	r3, r7, #24
 800409e:	2238      	movs	r2, #56	; 0x38
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f013 fcc5 	bl	8017a32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80040b6:	2000      	movs	r0, #0
 80040b8:	f008 f872 	bl	800c1a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80040bc:	2322      	movs	r3, #34	; 0x22
 80040be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040c6:	2340      	movs	r3, #64	; 0x40
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80040ca:	2301      	movs	r3, #1
 80040cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040ce:	2302      	movs	r3, #2
 80040d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040d2:	2302      	movs	r3, #2
 80040d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80040d6:	2304      	movs	r3, #4
 80040d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80040da:	2355      	movs	r3, #85	; 0x55
 80040dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040de:	2302      	movs	r3, #2
 80040e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80040e2:	2302      	movs	r3, #2
 80040e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80040e6:	2302      	movs	r3, #2
 80040e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040ea:	f107 0318 	add.w	r3, r7, #24
 80040ee:	4618      	mov	r0, r3
 80040f0:	f008 f90a 	bl	800c308 <HAL_RCC_OscConfig>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80040fa:	f000 fd79 	bl	8004bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040fe:	230f      	movs	r3, #15
 8004100:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004102:	2303      	movs	r3, #3
 8004104:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004112:	1d3b      	adds	r3, r7, #4
 8004114:	2104      	movs	r1, #4
 8004116:	4618      	mov	r0, r3
 8004118:	f008 fc08 	bl	800c92c <HAL_RCC_ClockConfig>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004122:	f000 fd65 	bl	8004bf0 <Error_Handler>
  }
}
 8004126:	bf00      	nop
 8004128:	3750      	adds	r7, #80	; 0x50
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08c      	sub	sp, #48	; 0x30
 8004134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	605a      	str	r2, [r3, #4]
 8004140:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	2220      	movs	r2, #32
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f013 fc72 	bl	8017a32 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800414e:	4b40      	ldr	r3, [pc, #256]	; (8004250 <MX_ADC1_Init+0x120>)
 8004150:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004154:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <MX_ADC1_Init+0x120>)
 8004158:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800415c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800415e:	4b3c      	ldr	r3, [pc, #240]	; (8004250 <MX_ADC1_Init+0x120>)
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004164:	4b3a      	ldr	r3, [pc, #232]	; (8004250 <MX_ADC1_Init+0x120>)
 8004166:	2200      	movs	r2, #0
 8004168:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800416a:	4b39      	ldr	r3, [pc, #228]	; (8004250 <MX_ADC1_Init+0x120>)
 800416c:	2200      	movs	r2, #0
 800416e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004170:	4b37      	ldr	r3, [pc, #220]	; (8004250 <MX_ADC1_Init+0x120>)
 8004172:	2201      	movs	r2, #1
 8004174:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004176:	4b36      	ldr	r3, [pc, #216]	; (8004250 <MX_ADC1_Init+0x120>)
 8004178:	2204      	movs	r2, #4
 800417a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800417c:	4b34      	ldr	r3, [pc, #208]	; (8004250 <MX_ADC1_Init+0x120>)
 800417e:	2200      	movs	r2, #0
 8004180:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004182:	4b33      	ldr	r3, [pc, #204]	; (8004250 <MX_ADC1_Init+0x120>)
 8004184:	2201      	movs	r2, #1
 8004186:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8004188:	4b31      	ldr	r3, [pc, #196]	; (8004250 <MX_ADC1_Init+0x120>)
 800418a:	2203      	movs	r2, #3
 800418c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800418e:	4b30      	ldr	r3, [pc, #192]	; (8004250 <MX_ADC1_Init+0x120>)
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004196:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <MX_ADC1_Init+0x120>)
 8004198:	2200      	movs	r2, #0
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800419c:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <MX_ADC1_Init+0x120>)
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80041a2:	4b2b      	ldr	r3, [pc, #172]	; (8004250 <MX_ADC1_Init+0x120>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80041aa:	4b29      	ldr	r3, [pc, #164]	; (8004250 <MX_ADC1_Init+0x120>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80041b0:	4b27      	ldr	r3, [pc, #156]	; (8004250 <MX_ADC1_Init+0x120>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041b8:	4825      	ldr	r0, [pc, #148]	; (8004250 <MX_ADC1_Init+0x120>)
 80041ba:	f002 ff95 	bl	80070e8 <HAL_ADC_Init>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80041c4:	f000 fd14 	bl	8004bf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80041c8:	2300      	movs	r3, #0
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80041cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d0:	4619      	mov	r1, r3
 80041d2:	481f      	ldr	r0, [pc, #124]	; (8004250 <MX_ADC1_Init+0x120>)
 80041d4:	f004 fea4 	bl	8008f20 <HAL_ADCEx_MultiModeConfigChannel>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80041de:	f000 fd07 	bl	8004bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <MX_ADC1_Init+0x124>)
 80041e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80041e6:	2306      	movs	r3, #6
 80041e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80041ea:	2306      	movs	r3, #6
 80041ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80041ee:	237f      	movs	r3, #127	; 0x7f
 80041f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80041f2:	2304      	movs	r3, #4
 80041f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4814      	ldr	r0, [pc, #80]	; (8004250 <MX_ADC1_Init+0x120>)
 8004200:	f003 fd76 	bl	8007cf0 <HAL_ADC_ConfigChannel>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800420a:	f000 fcf1 	bl	8004bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <MX_ADC1_Init+0x128>)
 8004210:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004212:	230c      	movs	r3, #12
 8004214:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	4619      	mov	r1, r3
 800421a:	480d      	ldr	r0, [pc, #52]	; (8004250 <MX_ADC1_Init+0x120>)
 800421c:	f003 fd68 	bl	8007cf0 <HAL_ADC_ConfigChannel>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004226:	f000 fce3 	bl	8004bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800422a:	4b0c      	ldr	r3, [pc, #48]	; (800425c <MX_ADC1_Init+0x12c>)
 800422c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800422e:	2312      	movs	r3, #18
 8004230:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4806      	ldr	r0, [pc, #24]	; (8004250 <MX_ADC1_Init+0x120>)
 8004238:	f003 fd5a 	bl	8007cf0 <HAL_ADC_ConfigChannel>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8004242:	f000 fcd5 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004246:	bf00      	nop
 8004248:	3730      	adds	r7, #48	; 0x30
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20001d70 	.word	0x20001d70
 8004254:	0c900008 	.word	0x0c900008
 8004258:	10c00010 	.word	0x10c00010
 800425c:	c3210000 	.word	0xc3210000

08004260 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b090      	sub	sp, #64	; 0x40
 8004264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8004266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	605a      	str	r2, [r3, #4]
 8004270:	609a      	str	r2, [r3, #8]
 8004272:	60da      	str	r2, [r3, #12]
 8004274:	611a      	str	r2, [r3, #16]
 8004276:	615a      	str	r2, [r3, #20]
 8004278:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	2220      	movs	r2, #32
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f013 fbd6 	bl	8017a32 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004286:	4b40      	ldr	r3, [pc, #256]	; (8004388 <MX_ADC2_Init+0x128>)
 8004288:	4a40      	ldr	r2, [pc, #256]	; (800438c <MX_ADC2_Init+0x12c>)
 800428a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800428c:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <MX_ADC2_Init+0x128>)
 800428e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004292:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004294:	4b3c      	ldr	r3, [pc, #240]	; (8004388 <MX_ADC2_Init+0x128>)
 8004296:	2200      	movs	r2, #0
 8004298:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800429a:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <MX_ADC2_Init+0x128>)
 800429c:	2200      	movs	r2, #0
 800429e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80042a0:	4b39      	ldr	r3, [pc, #228]	; (8004388 <MX_ADC2_Init+0x128>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80042a6:	4b38      	ldr	r3, [pc, #224]	; (8004388 <MX_ADC2_Init+0x128>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042ac:	4b36      	ldr	r3, [pc, #216]	; (8004388 <MX_ADC2_Init+0x128>)
 80042ae:	2204      	movs	r2, #4
 80042b0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80042b2:	4b35      	ldr	r3, [pc, #212]	; (8004388 <MX_ADC2_Init+0x128>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80042b8:	4b33      	ldr	r3, [pc, #204]	; (8004388 <MX_ADC2_Init+0x128>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80042be:	4b32      	ldr	r3, [pc, #200]	; (8004388 <MX_ADC2_Init+0x128>)
 80042c0:	2202      	movs	r2, #2
 80042c2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80042c4:	4b30      	ldr	r3, [pc, #192]	; (8004388 <MX_ADC2_Init+0x128>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042cc:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <MX_ADC2_Init+0x128>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80042d2:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <MX_ADC2_Init+0x128>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80042d8:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <MX_ADC2_Init+0x128>)
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80042e0:	4b29      	ldr	r3, [pc, #164]	; (8004388 <MX_ADC2_Init+0x128>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80042e6:	4b28      	ldr	r3, [pc, #160]	; (8004388 <MX_ADC2_Init+0x128>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80042ee:	4826      	ldr	r0, [pc, #152]	; (8004388 <MX_ADC2_Init+0x128>)
 80042f0:	f002 fefa 	bl	80070e8 <HAL_ADC_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 80042fa:	f000 fc79 	bl	8004bf0 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80042fe:	4b24      	ldr	r3, [pc, #144]	; (8004390 <MX_ADC2_Init+0x130>)
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8004302:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 8004308:	4b22      	ldr	r3, [pc, #136]	; (8004394 <MX_ADC2_Init+0x134>)
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.HighThreshold = 2000;
 8004312:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.LowThreshold = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	63bb      	str	r3, [r7, #56]	; 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 800431c:	2300      	movs	r3, #0
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8004320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004324:	4619      	mov	r1, r3
 8004326:	4818      	ldr	r0, [pc, #96]	; (8004388 <MX_ADC2_Init+0x128>)
 8004328:	f004 f8d2 	bl	80084d0 <HAL_ADC_AnalogWDGConfig>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8004332:	f000 fc5d 	bl	8004bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004336:	4b17      	ldr	r3, [pc, #92]	; (8004394 <MX_ADC2_Init+0x134>)
 8004338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800433a:	2306      	movs	r3, #6
 800433c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004342:	237f      	movs	r3, #127	; 0x7f
 8004344:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004346:	2304      	movs	r3, #4
 8004348:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800434e:	1d3b      	adds	r3, r7, #4
 8004350:	4619      	mov	r1, r3
 8004352:	480d      	ldr	r0, [pc, #52]	; (8004388 <MX_ADC2_Init+0x128>)
 8004354:	f003 fccc 	bl	8007cf0 <HAL_ADC_ConfigChannel>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 800435e:	f000 fc47 	bl	8004bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004362:	4b0d      	ldr	r3, [pc, #52]	; (8004398 <MX_ADC2_Init+0x138>)
 8004364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004366:	230c      	movs	r3, #12
 8004368:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4806      	ldr	r0, [pc, #24]	; (8004388 <MX_ADC2_Init+0x128>)
 8004370:	f003 fcbe 	bl	8007cf0 <HAL_ADC_ConfigChannel>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 800437a:	f000 fc39 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800437e:	bf00      	nop
 8004380:	3740      	adds	r7, #64	; 0x40
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20001ddc 	.word	0x20001ddc
 800438c:	50000100 	.word	0x50000100
 8004390:	7dc00000 	.word	0x7dc00000
 8004394:	08600004 	.word	0x08600004
 8004398:	2a000400 	.word	0x2a000400

0800439c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <MX_CRC_Init+0x3c>)
 80043a2:	4a0e      	ldr	r2, [pc, #56]	; (80043dc <MX_CRC_Init+0x40>)
 80043a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <MX_CRC_Init+0x3c>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <MX_CRC_Init+0x3c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <MX_CRC_Init+0x3c>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <MX_CRC_Init+0x3c>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <MX_CRC_Init+0x3c>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80043c4:	4804      	ldr	r0, [pc, #16]	; (80043d8 <MX_CRC_Init+0x3c>)
 80043c6:	f004 ff5f 	bl	8009288 <HAL_CRC_Init>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80043d0:	f000 fc0e 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80043d4:	bf00      	nop
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20001ea8 	.word	0x20001ea8
 80043dc:	40023000 	.word	0x40023000

080043e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <MX_I2C1_Init+0x74>)
 80043e6:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <MX_I2C1_Init+0x78>)
 80043e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <MX_I2C1_Init+0x74>)
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <MX_I2C1_Init+0x7c>)
 80043ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80043f0:	4b18      	ldr	r3, [pc, #96]	; (8004454 <MX_I2C1_Init+0x74>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043f6:	4b17      	ldr	r3, [pc, #92]	; (8004454 <MX_I2C1_Init+0x74>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043fc:	4b15      	ldr	r3, [pc, #84]	; (8004454 <MX_I2C1_Init+0x74>)
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004402:	4b14      	ldr	r3, [pc, #80]	; (8004454 <MX_I2C1_Init+0x74>)
 8004404:	2200      	movs	r2, #0
 8004406:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <MX_I2C1_Init+0x74>)
 800440a:	2200      	movs	r2, #0
 800440c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <MX_I2C1_Init+0x74>)
 8004410:	2200      	movs	r2, #0
 8004412:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <MX_I2C1_Init+0x74>)
 8004416:	2200      	movs	r2, #0
 8004418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800441a:	480e      	ldr	r0, [pc, #56]	; (8004454 <MX_I2C1_Init+0x74>)
 800441c:	f006 f85a 	bl	800a4d4 <HAL_I2C_Init>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004426:	f000 fbe3 	bl	8004bf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800442a:	2100      	movs	r1, #0
 800442c:	4809      	ldr	r0, [pc, #36]	; (8004454 <MX_I2C1_Init+0x74>)
 800442e:	f006 f8ec 	bl	800a60a <HAL_I2CEx_ConfigAnalogFilter>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004438:	f000 fbda 	bl	8004bf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800443c:	2100      	movs	r1, #0
 800443e:	4805      	ldr	r0, [pc, #20]	; (8004454 <MX_I2C1_Init+0x74>)
 8004440:	f006 f92e 	bl	800a6a0 <HAL_I2CEx_ConfigDigitalFilter>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800444a:	f000 fbd1 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20001ecc 	.word	0x20001ecc
 8004458:	40005400 	.word	0x40005400
 800445c:	30a0a7fb 	.word	0x30a0a7fb

08004460 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <MX_SPI2_Init+0x74>)
 8004466:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <MX_SPI2_Init+0x78>)
 8004468:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800446a:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <MX_SPI2_Init+0x74>)
 800446c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004470:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8004472:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <MX_SPI2_Init+0x74>)
 8004474:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004478:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800447a:	4b16      	ldr	r3, [pc, #88]	; (80044d4 <MX_SPI2_Init+0x74>)
 800447c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004480:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004482:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <MX_SPI2_Init+0x74>)
 8004484:	2200      	movs	r2, #0
 8004486:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004488:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <MX_SPI2_Init+0x74>)
 800448a:	2200      	movs	r2, #0
 800448c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <MX_SPI2_Init+0x74>)
 8004490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004494:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004496:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <MX_SPI2_Init+0x74>)
 8004498:	2210      	movs	r2, #16
 800449a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800449c:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <MX_SPI2_Init+0x74>)
 800449e:	2200      	movs	r2, #0
 80044a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80044a2:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <MX_SPI2_Init+0x74>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <MX_SPI2_Init+0x74>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <MX_SPI2_Init+0x74>)
 80044b0:	2207      	movs	r2, #7
 80044b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80044b4:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <MX_SPI2_Init+0x74>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <MX_SPI2_Init+0x74>)
 80044bc:	2208      	movs	r2, #8
 80044be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80044c0:	4804      	ldr	r0, [pc, #16]	; (80044d4 <MX_SPI2_Init+0x74>)
 80044c2:	f008 fe3f 	bl	800d144 <HAL_SPI_Init>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80044cc:	f000 fb90 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80044d0:	bf00      	nop
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20001f20 	.word	0x20001f20
 80044d8:	40003800 	.word	0x40003800

080044dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b098      	sub	sp, #96	; 0x60
 80044e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	605a      	str	r2, [r3, #4]
 80044ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	605a      	str	r2, [r3, #4]
 80044f8:	609a      	str	r2, [r3, #8]
 80044fa:	60da      	str	r2, [r3, #12]
 80044fc:	611a      	str	r2, [r3, #16]
 80044fe:	615a      	str	r2, [r3, #20]
 8004500:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004502:	1d3b      	adds	r3, r7, #4
 8004504:	2234      	movs	r2, #52	; 0x34
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f013 fa92 	bl	8017a32 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800450e:	4b41      	ldr	r3, [pc, #260]	; (8004614 <MX_TIM1_Init+0x138>)
 8004510:	4a41      	ldr	r2, [pc, #260]	; (8004618 <MX_TIM1_Init+0x13c>)
 8004512:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8004514:	4b3f      	ldr	r3, [pc, #252]	; (8004614 <MX_TIM1_Init+0x138>)
 8004516:	2213      	movs	r2, #19
 8004518:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800451a:	4b3e      	ldr	r3, [pc, #248]	; (8004614 <MX_TIM1_Init+0x138>)
 800451c:	2200      	movs	r2, #0
 800451e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8004520:	4b3c      	ldr	r3, [pc, #240]	; (8004614 <MX_TIM1_Init+0x138>)
 8004522:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004526:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004528:	4b3a      	ldr	r3, [pc, #232]	; (8004614 <MX_TIM1_Init+0x138>)
 800452a:	2200      	movs	r2, #0
 800452c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800452e:	4b39      	ldr	r3, [pc, #228]	; (8004614 <MX_TIM1_Init+0x138>)
 8004530:	2200      	movs	r2, #0
 8004532:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004534:	4b37      	ldr	r3, [pc, #220]	; (8004614 <MX_TIM1_Init+0x138>)
 8004536:	2280      	movs	r2, #128	; 0x80
 8004538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800453a:	4836      	ldr	r0, [pc, #216]	; (8004614 <MX_TIM1_Init+0x138>)
 800453c:	f009 fc07 	bl	800dd4e <HAL_TIM_PWM_Init>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8004546:	f000 fb53 	bl	8004bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004552:	2300      	movs	r3, #0
 8004554:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004556:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800455a:	4619      	mov	r1, r3
 800455c:	482d      	ldr	r0, [pc, #180]	; (8004614 <MX_TIM1_Init+0x138>)
 800455e:	f00a ff59 	bl	800f414 <HAL_TIMEx_MasterConfigSynchronization>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004568:	f000 fb42 	bl	8004bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800456c:	2360      	movs	r3, #96	; 0x60
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004574:	2300      	movs	r3, #0
 8004576:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004578:	2300      	movs	r3, #0
 800457a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800457c:	2300      	movs	r3, #0
 800457e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004580:	2300      	movs	r3, #0
 8004582:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004584:	2300      	movs	r3, #0
 8004586:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004588:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800458c:	2200      	movs	r2, #0
 800458e:	4619      	mov	r1, r3
 8004590:	4820      	ldr	r0, [pc, #128]	; (8004614 <MX_TIM1_Init+0x138>)
 8004592:	f00a f957 	bl	800e844 <HAL_TIM_PWM_ConfigChannel>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800459c:	f000 fb28 	bl	8004bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80045a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045a4:	2208      	movs	r2, #8
 80045a6:	4619      	mov	r1, r3
 80045a8:	481a      	ldr	r0, [pc, #104]	; (8004614 <MX_TIM1_Init+0x138>)
 80045aa:	f00a f94b 	bl	800e844 <HAL_TIM_PWM_ConfigChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80045b4:	f000 fb1c 	bl	8004bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80045bc:	2300      	movs	r3, #0
 80045be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80045cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80045de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80045e8:	2300      	movs	r3, #0
 80045ea:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4807      	ldr	r0, [pc, #28]	; (8004614 <MX_TIM1_Init+0x138>)
 80045f6:	f00a ff8f 	bl	800f518 <HAL_TIMEx_ConfigBreakDeadTime>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004600:	f000 faf6 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004604:	4803      	ldr	r0, [pc, #12]	; (8004614 <MX_TIM1_Init+0x138>)
 8004606:	f001 faf5 	bl	8005bf4 <HAL_TIM_MspPostInit>

}
 800460a:	bf00      	nop
 800460c:	3760      	adds	r7, #96	; 0x60
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20001fe4 	.word	0x20001fe4
 8004618:	40012c00 	.word	0x40012c00

0800461c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	; 0x30
 8004620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004622:	f107 030c 	add.w	r3, r7, #12
 8004626:	2224      	movs	r2, #36	; 0x24
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f013 fa01 	bl	8017a32 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004630:	463b      	mov	r3, r7
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800463a:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <MX_TIM2_Init+0xa4>)
 800463c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004640:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004642:	4b1f      	ldr	r3, [pc, #124]	; (80046c0 <MX_TIM2_Init+0xa4>)
 8004644:	2200      	movs	r2, #0
 8004646:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004648:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <MX_TIM2_Init+0xa4>)
 800464a:	2200      	movs	r2, #0
 800464c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800464e:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <MX_TIM2_Init+0xa4>)
 8004650:	f04f 32ff 	mov.w	r2, #4294967295
 8004654:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004656:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <MX_TIM2_Init+0xa4>)
 8004658:	2200      	movs	r2, #0
 800465a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800465c:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <MX_TIM2_Init+0xa4>)
 800465e:	2200      	movs	r2, #0
 8004660:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004662:	2303      	movs	r3, #3
 8004664:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004666:	2302      	movs	r3, #2
 8004668:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800466a:	2301      	movs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004676:	2300      	movs	r3, #0
 8004678:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800467a:	2301      	movs	r3, #1
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800467e:	2300      	movs	r3, #0
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004686:	f107 030c 	add.w	r3, r7, #12
 800468a:	4619      	mov	r1, r3
 800468c:	480c      	ldr	r0, [pc, #48]	; (80046c0 <MX_TIM2_Init+0xa4>)
 800468e:	f009 fe35 	bl	800e2fc <HAL_TIM_Encoder_Init>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004698:	f000 faaa 	bl	8004bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800469c:	2300      	movs	r3, #0
 800469e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046a4:	463b      	mov	r3, r7
 80046a6:	4619      	mov	r1, r3
 80046a8:	4805      	ldr	r0, [pc, #20]	; (80046c0 <MX_TIM2_Init+0xa4>)
 80046aa:	f00a feb3 	bl	800f414 <HAL_TIMEx_MasterConfigSynchronization>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80046b4:	f000 fa9c 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80046b8:	bf00      	nop
 80046ba:	3730      	adds	r7, #48	; 0x30
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20002030 	.word	0x20002030

080046c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	; 0x28
 80046c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046ca:	f107 031c 	add.w	r3, r7, #28
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	605a      	str	r2, [r3, #4]
 80046d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046d6:	463b      	mov	r3, r7
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	611a      	str	r2, [r3, #16]
 80046e4:	615a      	str	r2, [r3, #20]
 80046e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80046e8:	4b21      	ldr	r3, [pc, #132]	; (8004770 <MX_TIM4_Init+0xac>)
 80046ea:	4a22      	ldr	r2, [pc, #136]	; (8004774 <MX_TIM4_Init+0xb0>)
 80046ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 80046ee:	4b20      	ldr	r3, [pc, #128]	; (8004770 <MX_TIM4_Init+0xac>)
 80046f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80046f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046f6:	4b1e      	ldr	r3, [pc, #120]	; (8004770 <MX_TIM4_Init+0xac>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 80046fc:	4b1c      	ldr	r3, [pc, #112]	; (8004770 <MX_TIM4_Init+0xac>)
 80046fe:	220a      	movs	r2, #10
 8004700:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <MX_TIM4_Init+0xac>)
 8004704:	2200      	movs	r2, #0
 8004706:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004708:	4b19      	ldr	r3, [pc, #100]	; (8004770 <MX_TIM4_Init+0xac>)
 800470a:	2280      	movs	r2, #128	; 0x80
 800470c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800470e:	4818      	ldr	r0, [pc, #96]	; (8004770 <MX_TIM4_Init+0xac>)
 8004710:	f009 fb1d 	bl	800dd4e <HAL_TIM_PWM_Init>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800471a:	f000 fa69 	bl	8004bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004722:	2300      	movs	r3, #0
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004726:	f107 031c 	add.w	r3, r7, #28
 800472a:	4619      	mov	r1, r3
 800472c:	4810      	ldr	r0, [pc, #64]	; (8004770 <MX_TIM4_Init+0xac>)
 800472e:	f00a fe71 	bl	800f414 <HAL_TIMEx_MasterConfigSynchronization>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8004738:	f000 fa5a 	bl	8004bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800473c:	2360      	movs	r3, #96	; 0x60
 800473e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004744:	2300      	movs	r3, #0
 8004746:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800474c:	463b      	mov	r3, r7
 800474e:	2204      	movs	r2, #4
 8004750:	4619      	mov	r1, r3
 8004752:	4807      	ldr	r0, [pc, #28]	; (8004770 <MX_TIM4_Init+0xac>)
 8004754:	f00a f876 	bl	800e844 <HAL_TIM_PWM_ConfigChannel>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800475e:	f000 fa47 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004762:	4803      	ldr	r0, [pc, #12]	; (8004770 <MX_TIM4_Init+0xac>)
 8004764:	f001 fa46 	bl	8005bf4 <HAL_TIM_MspPostInit>

}
 8004768:	bf00      	nop
 800476a:	3728      	adds	r7, #40	; 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	2000207c 	.word	0x2000207c
 8004774:	40000800 	.word	0x40000800

08004778 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800477e:	1d3b      	adds	r3, r7, #4
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004788:	4b14      	ldr	r3, [pc, #80]	; (80047dc <MX_TIM6_Init+0x64>)
 800478a:	4a15      	ldr	r2, [pc, #84]	; (80047e0 <MX_TIM6_Init+0x68>)
 800478c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 800478e:	4b13      	ldr	r3, [pc, #76]	; (80047dc <MX_TIM6_Init+0x64>)
 8004790:	f244 2267 	movw	r2, #16999	; 0x4267
 8004794:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <MX_TIM6_Init+0x64>)
 8004798:	2200      	movs	r2, #0
 800479a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250;
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <MX_TIM6_Init+0x64>)
 800479e:	22fa      	movs	r2, #250	; 0xfa
 80047a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047a2:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <MX_TIM6_Init+0x64>)
 80047a4:	2280      	movs	r2, #128	; 0x80
 80047a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80047a8:	480c      	ldr	r0, [pc, #48]	; (80047dc <MX_TIM6_Init+0x64>)
 80047aa:	f009 f9df 	bl	800db6c <HAL_TIM_Base_Init>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80047b4:	f000 fa1c 	bl	8004bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047b8:	2300      	movs	r3, #0
 80047ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80047c0:	1d3b      	adds	r3, r7, #4
 80047c2:	4619      	mov	r1, r3
 80047c4:	4805      	ldr	r0, [pc, #20]	; (80047dc <MX_TIM6_Init+0x64>)
 80047c6:	f00a fe25 	bl	800f414 <HAL_TIMEx_MasterConfigSynchronization>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80047d0:	f000 fa0e 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	200020c8 	.word	0x200020c8
 80047e0:	40001000 	.word	0x40001000

080047e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <MX_TIM7_Init+0x78>)
 80047f6:	4a1a      	ldr	r2, [pc, #104]	; (8004860 <MX_TIM7_Init+0x7c>)
 80047f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8500-1;
 80047fa:	4b18      	ldr	r3, [pc, #96]	; (800485c <MX_TIM7_Init+0x78>)
 80047fc:	f242 1233 	movw	r2, #8499	; 0x2133
 8004800:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004802:	4b16      	ldr	r3, [pc, #88]	; (800485c <MX_TIM7_Init+0x78>)
 8004804:	2200      	movs	r2, #0
 8004806:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8004808:	4b14      	ldr	r3, [pc, #80]	; (800485c <MX_TIM7_Init+0x78>)
 800480a:	2209      	movs	r2, #9
 800480c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800480e:	4b13      	ldr	r3, [pc, #76]	; (800485c <MX_TIM7_Init+0x78>)
 8004810:	2280      	movs	r2, #128	; 0x80
 8004812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004814:	4811      	ldr	r0, [pc, #68]	; (800485c <MX_TIM7_Init+0x78>)
 8004816:	f009 f9a9 	bl	800db6c <HAL_TIM_Base_Init>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004820:	f000 f9e6 	bl	8004bf0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8004824:	2108      	movs	r1, #8
 8004826:	480d      	ldr	r0, [pc, #52]	; (800485c <MX_TIM7_Init+0x78>)
 8004828:	f009 fd18 	bl	800e25c <HAL_TIM_OnePulse_Init>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8004832:	f000 f9dd 	bl	8004bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004836:	2320      	movs	r3, #32
 8004838:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800483e:	1d3b      	adds	r3, r7, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4806      	ldr	r0, [pc, #24]	; (800485c <MX_TIM7_Init+0x78>)
 8004844:	f00a fde6 	bl	800f414 <HAL_TIMEx_MasterConfigSynchronization>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 800484e:	f000 f9cf 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004852:	bf00      	nop
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20002114 	.word	0x20002114
 8004860:	40001400 	.word	0x40001400

08004864 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	605a      	str	r2, [r3, #4]
 8004872:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <MX_TIM8_Init+0x78>)
 8004876:	4a1a      	ldr	r2, [pc, #104]	; (80048e0 <MX_TIM8_Init+0x7c>)
 8004878:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800487a:	4b18      	ldr	r3, [pc, #96]	; (80048dc <MX_TIM8_Init+0x78>)
 800487c:	2200      	movs	r2, #0
 800487e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004880:	4b16      	ldr	r3, [pc, #88]	; (80048dc <MX_TIM8_Init+0x78>)
 8004882:	2200      	movs	r2, #0
 8004884:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <MX_TIM8_Init+0x78>)
 8004888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800488c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800488e:	4b13      	ldr	r3, [pc, #76]	; (80048dc <MX_TIM8_Init+0x78>)
 8004890:	2200      	movs	r2, #0
 8004892:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <MX_TIM8_Init+0x78>)
 8004896:	2200      	movs	r2, #0
 8004898:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800489a:	4b10      	ldr	r3, [pc, #64]	; (80048dc <MX_TIM8_Init+0x78>)
 800489c:	2200      	movs	r2, #0
 800489e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 80048a0:	2108      	movs	r1, #8
 80048a2:	480e      	ldr	r0, [pc, #56]	; (80048dc <MX_TIM8_Init+0x78>)
 80048a4:	f009 fcda 	bl	800e25c <HAL_TIM_OnePulse_Init>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 80048ae:	f000 f99f 	bl	8004bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4806      	ldr	r0, [pc, #24]	; (80048dc <MX_TIM8_Init+0x78>)
 80048c4:	f00a fda6 	bl	800f414 <HAL_TIMEx_MasterConfigSynchronization>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80048ce:	f000 f98f 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20002160 	.word	0x20002160
 80048e0:	40013400 	.word	0x40013400

080048e4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80048e8:	4b10      	ldr	r3, [pc, #64]	; (800492c <MX_TIM16_Init+0x48>)
 80048ea:	4a11      	ldr	r2, [pc, #68]	; (8004930 <MX_TIM16_Init+0x4c>)
 80048ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <MX_TIM16_Init+0x48>)
 80048f0:	f244 2267 	movw	r2, #16999	; 0x4267
 80048f4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <MX_TIM16_Init+0x48>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <MX_TIM16_Init+0x48>)
 80048fe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004902:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004904:	4b09      	ldr	r3, [pc, #36]	; (800492c <MX_TIM16_Init+0x48>)
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800490a:	4b08      	ldr	r3, [pc, #32]	; (800492c <MX_TIM16_Init+0x48>)
 800490c:	2200      	movs	r2, #0
 800490e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <MX_TIM16_Init+0x48>)
 8004912:	2280      	movs	r2, #128	; 0x80
 8004914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004916:	4805      	ldr	r0, [pc, #20]	; (800492c <MX_TIM16_Init+0x48>)
 8004918:	f009 f928 	bl	800db6c <HAL_TIM_Base_Init>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8004922:	f000 f965 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004926:	bf00      	nop
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	200021ac 	.word	0x200021ac
 8004930:	40014400 	.word	0x40014400

08004934 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004938:	4b14      	ldr	r3, [pc, #80]	; (800498c <MX_TIM17_Init+0x58>)
 800493a:	4a15      	ldr	r2, [pc, #84]	; (8004990 <MX_TIM17_Init+0x5c>)
 800493c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <MX_TIM17_Init+0x58>)
 8004940:	f244 2267 	movw	r2, #16999	; 0x4267
 8004944:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <MX_TIM17_Init+0x58>)
 8004948:	2200      	movs	r2, #0
 800494a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <MX_TIM17_Init+0x58>)
 800494e:	2231      	movs	r2, #49	; 0x31
 8004950:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004952:	4b0e      	ldr	r3, [pc, #56]	; (800498c <MX_TIM17_Init+0x58>)
 8004954:	2200      	movs	r2, #0
 8004956:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <MX_TIM17_Init+0x58>)
 800495a:	2200      	movs	r2, #0
 800495c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <MX_TIM17_Init+0x58>)
 8004960:	2280      	movs	r2, #128	; 0x80
 8004962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004964:	4809      	ldr	r0, [pc, #36]	; (800498c <MX_TIM17_Init+0x58>)
 8004966:	f009 f901 	bl	800db6c <HAL_TIM_Base_Init>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8004970:	f000 f93e 	bl	8004bf0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 8004974:	2108      	movs	r1, #8
 8004976:	4805      	ldr	r0, [pc, #20]	; (800498c <MX_TIM17_Init+0x58>)
 8004978:	f009 fc70 	bl	800e25c <HAL_TIM_OnePulse_Init>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 8004982:	f000 f935 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	200021f8 	.word	0x200021f8
 8004990:	40014800 	.word	0x40014800

08004994 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004998:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 800499a:	4a23      	ldr	r2, [pc, #140]	; (8004a28 <MX_USART1_UART_Init+0x94>)
 800499c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800499e:	4b21      	ldr	r3, [pc, #132]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049a6:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049ac:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049b2:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049ba:	220c      	movs	r2, #12
 80049bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049be:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049c4:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049ca:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049d0:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049d8:	2200      	movs	r2, #0
 80049da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049dc:	4811      	ldr	r0, [pc, #68]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049de:	f00a fe92 	bl	800f706 <HAL_UART_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80049e8:	f000 f902 	bl	8004bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049ec:	2100      	movs	r1, #0
 80049ee:	480d      	ldr	r0, [pc, #52]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 80049f0:	f00b fbfe 	bl	80101f0 <HAL_UARTEx_SetTxFifoThreshold>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80049fa:	f000 f8f9 	bl	8004bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049fe:	2100      	movs	r1, #0
 8004a00:	4808      	ldr	r0, [pc, #32]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 8004a02:	f00b fc33 	bl	801026c <HAL_UARTEx_SetRxFifoThreshold>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004a0c:	f000 f8f0 	bl	8004bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004a10:	4804      	ldr	r0, [pc, #16]	; (8004a24 <MX_USART1_UART_Init+0x90>)
 8004a12:	f00b fbb4 	bl	801017e <HAL_UARTEx_DisableFifoMode>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004a1c:	f000 f8e8 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004a20:	bf00      	nop
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20002244 	.word	0x20002244
 8004a28:	40013800 	.word	0x40013800

08004a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004a32:	4b16      	ldr	r3, [pc, #88]	; (8004a8c <MX_DMA_Init+0x60>)
 8004a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a36:	4a15      	ldr	r2, [pc, #84]	; (8004a8c <MX_DMA_Init+0x60>)
 8004a38:	f043 0304 	orr.w	r3, r3, #4
 8004a3c:	6493      	str	r3, [r2, #72]	; 0x48
 8004a3e:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <MX_DMA_Init+0x60>)
 8004a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	607b      	str	r3, [r7, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004a4a:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <MX_DMA_Init+0x60>)
 8004a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4e:	4a0f      	ldr	r2, [pc, #60]	; (8004a8c <MX_DMA_Init+0x60>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6493      	str	r3, [r2, #72]	; 0x48
 8004a56:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <MX_DMA_Init+0x60>)
 8004a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004a62:	2200      	movs	r2, #0
 8004a64:	2100      	movs	r1, #0
 8004a66:	200b      	movs	r0, #11
 8004a68:	f004 fbd9 	bl	800921e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004a6c:	200b      	movs	r0, #11
 8004a6e:	f004 fbf0 	bl	8009252 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004a72:	2200      	movs	r2, #0
 8004a74:	2100      	movs	r1, #0
 8004a76:	200d      	movs	r0, #13
 8004a78:	f004 fbd1 	bl	800921e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004a7c:	200d      	movs	r0, #13
 8004a7e:	f004 fbe8 	bl	8009252 <HAL_NVIC_EnableIRQ>

}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000

08004a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a96:	f107 0314 	add.w	r3, r7, #20
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aa6:	4b4f      	ldr	r3, [pc, #316]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aaa:	4a4e      	ldr	r2, [pc, #312]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004aac:	f043 0304 	orr.w	r3, r3, #4
 8004ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ab2:	4b4c      	ldr	r3, [pc, #304]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004abe:	4b49      	ldr	r3, [pc, #292]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac2:	4a48      	ldr	r2, [pc, #288]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004ac4:	f043 0320 	orr.w	r3, r3, #32
 8004ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aca:	4b46      	ldr	r3, [pc, #280]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ad6:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ada:	4a42      	ldr	r2, [pc, #264]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ae2:	4b40      	ldr	r3, [pc, #256]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aee:	4b3d      	ldr	r3, [pc, #244]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	4a3c      	ldr	r2, [pc, #240]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004af4:	f043 0302 	orr.w	r3, r3, #2
 8004af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004afa:	4b3a      	ldr	r3, [pc, #232]	; (8004be4 <MX_GPIO_Init+0x154>)
 8004afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8004b06:	2200      	movs	r2, #0
 8004b08:	f645 4107 	movw	r1, #23559	; 0x5c07
 8004b0c:	4836      	ldr	r0, [pc, #216]	; (8004be8 <MX_GPIO_Init+0x158>)
 8004b0e:	f005 fcb1 	bl	800a474 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8004b12:	2200      	movs	r2, #0
 8004b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b1c:	f005 fcaa 	bl	800a474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 8004b20:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b2e:	f107 0314 	add.w	r3, r7, #20
 8004b32:	4619      	mov	r1, r3
 8004b34:	482d      	ldr	r0, [pc, #180]	; (8004bec <MX_GPIO_Init+0x15c>)
 8004b36:	f005 fb03 	bl	800a140 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 8004b3a:	2370      	movs	r3, #112	; 0x70
 8004b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b46:	f107 0314 	add.w	r3, r7, #20
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b50:	f005 faf6 	bl	800a140 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8004b62:	f107 0314 	add.w	r3, r7, #20
 8004b66:	4619      	mov	r1, r3
 8004b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b6c:	f005 fae8 	bl	800a140 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8004b70:	f645 4307 	movw	r3, #23559	; 0x5c07
 8004b74:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b76:	2301      	movs	r3, #1
 8004b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b82:	f107 0314 	add.w	r3, r7, #20
 8004b86:	4619      	mov	r1, r3
 8004b88:	4817      	ldr	r0, [pc, #92]	; (8004be8 <MX_GPIO_Init+0x158>)
 8004b8a:	f005 fad9 	bl	800a140 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8004b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b94:	2301      	movs	r3, #1
 8004b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004baa:	f005 fac9 	bl	800a140 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 8004bae:	f44f 7390 	mov.w	r3, #288	; 0x120
 8004bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004bb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bbe:	f107 0314 	add.w	r3, r7, #20
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4808      	ldr	r0, [pc, #32]	; (8004be8 <MX_GPIO_Init+0x158>)
 8004bc6:	f005 fabb 	bl	800a140 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2100      	movs	r1, #0
 8004bce:	2017      	movs	r0, #23
 8004bd0:	f004 fb25 	bl	800921e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004bd4:	2017      	movs	r0, #23
 8004bd6:	f004 fb3c 	bl	8009252 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004bda:	bf00      	nop
 8004bdc:	3728      	adds	r7, #40	; 0x28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	48000400 	.word	0x48000400
 8004bec:	48000800 	.word	0x48000800

08004bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf4:	b672      	cpsid	i
}
 8004bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bf8:	e7fe      	b.n	8004bf8 <Error_Handler+0x8>

08004bfa <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	e008      	b.n	8004c34 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3301      	adds	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	edd3 7a00 	vldr	s15, [r3]
 8004c44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4c:	d4e9      	bmi.n	8004c22 <Moving_Average_Init+0x28>
	}
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	441a      	add	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	1ad2      	subs	r2, r2, r3
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	edd3 7a00 	vldr	s15, [r3]
 8004cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc6:	d507      	bpl.n	8004cd8 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8004cd6:	e003      	b.n	8004ce0 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	edd3 7a00 	vldr	s15, [r3]
 8004cf4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cf8:	ee16 0a90 	vmov	r0, s13
 8004cfc:	f7fb fc4c 	bl	8000598 <__aeabi_f2d>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d08:	eeb0 0a47 	vmov.f32	s0, s14
 8004d0c:	eef0 0a67 	vmov.f32	s1, s15
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004d46:	f7fb ff0f 	bl	8000b68 <__aeabi_dcmpgt>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d006      	beq.n	8004d5e <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8004d5c:	e011      	b.n	8004d82 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004d6a:	f7fb fedf 	bl	8000b2c <__aeabi_dcmplt>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d100      	bne.n	8004d76 <PID_Init+0x60>
}
 8004d74:	e005      	b.n	8004d82 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	0000      	movs	r0, r0
 8004d8c:	0000      	movs	r0, r0
	...

08004d90 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	; 0x28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6278      	str	r0, [r7, #36]	; 0x24
 8004d98:	6239      	str	r1, [r7, #32]
 8004d9a:	61fa      	str	r2, [r7, #28]
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004da2:	ed87 1b02 	vstr	d1, [r7, #8]
 8004da6:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	6a3a      	ldr	r2, [r7, #32]
 8004db4:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8004dc2:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8004e18 <PID+0x88>
 8004dc6:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8004e20 <PID+0x90>
 8004dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dcc:	f000 f991 	bl	80050f2 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	2264      	movs	r2, #100	; 0x64
 8004dd4:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8004dd6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dde:	f000 fad9 	bl	8005394 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8004de2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004de6:	4619      	mov	r1, r3
 8004de8:	ed97 2b00 	vldr	d2, [r7]
 8004dec:	ed97 1b02 	vldr	d1, [r7, #8]
 8004df0:	ed97 0b04 	vldr	d0, [r7, #16]
 8004df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004df6:	f000 fa25 	bl	8005244 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8004dfa:	f001 fde1 	bl	80069c0 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	1ad2      	subs	r2, r2, r3
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	605a      	str	r2, [r3, #4]

}
 8004e0a:	bf00      	nop
 8004e0c:	3728      	adds	r7, #40	; 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	f3af 8000 	nop.w
 8004e18:	00000000 	.word	0x00000000
 8004e1c:	406fe000 	.word	0x406fe000
	...

08004e28 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8004e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e2c:	b08c      	sub	sp, #48	; 0x30
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <PID_Compute+0x16>
	{
		return _FALSE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e136      	b.n	80050ac <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8004e3e:	f001 fdbf 	bl	80069c0 <HAL_GetTick>
 8004e42:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	6a3a      	ldr	r2, [r7, #32]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d204      	bcs.n	8004e62 <PID_Compute+0x3a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8124 	beq.w	80050aa <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e7a:	f7fb fa2d 	bl	80002d8 <__aeabi_dsub>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004e8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e90:	f7fb fa22 	bl	80002d8 <__aeabi_dsub>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004ea8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004eac:	f7fb fbcc 	bl	8000648 <__aeabi_dmul>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4650      	mov	r0, sl
 8004eb6:	4659      	mov	r1, fp
 8004eb8:	f7fb fa10 	bl	80002dc <__adddf3>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8004ed2:	f7fb fe49 	bl	8000b68 <__aeabi_dcmpgt>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d006      	beq.n	8004eea <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004ee8:	e010      	b.n	8004f0c <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8004ef6:	f7fb fe19 	bl	8000b2c <__aeabi_dcmplt>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d114      	bne.n	8004f4a <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f30:	f7fb fb8a 	bl	8000648 <__aeabi_dmul>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4650      	mov	r0, sl
 8004f3a:	4659      	mov	r1, fp
 8004f3c:	f7fb f9cc 	bl	80002d8 <__aeabi_dsub>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004f56:	f7fb fe07 	bl	8000b68 <__aeabi_dcmpgt>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d006      	beq.n	8004f6e <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004f6c:	e010      	b.n	8004f90 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004f7a:	f7fb fdd7 	bl	8000b2c <__aeabi_dcmplt>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004f96:	4690      	mov	r8, r2
 8004f98:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004f9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	f7fb fb50 	bl	8000648 <__aeabi_dmul>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d017      	beq.n	8004fea <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004fc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fc4:	f7fb fb40 	bl	8000648 <__aeabi_dmul>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004fd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fda:	f7fb fb35 	bl	8000648 <__aeabi_dmul>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004fe8:	e005      	b.n	8004ff6 <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005006:	f7fb fb1f 	bl	8000648 <__aeabi_dmul>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4640      	mov	r0, r8
 8005010:	4649      	mov	r1, r9
 8005012:	f7fb f961 	bl	80002d8 <__aeabi_dsub>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800501e:	f7fb f95d 	bl	80002dc <__adddf3>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005030:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005034:	f7fb fd98 	bl	8000b68 <__aeabi_dcmpgt>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005044:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005048:	e00e      	b.n	8005068 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005050:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005054:	f7fb fd6a 	bl	8000b2c <__aeabi_dcmplt>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d004      	beq.n	8005068 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005064:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800506e:	4614      	mov	r4, r2
 8005070:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005078:	4620      	mov	r0, r4
 800507a:	4629      	mov	r1, r5
 800507c:	f7fb fae4 	bl	8000648 <__aeabi_dmul>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800508e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005092:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800509c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a4:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 80050aa:	2300      	movs	r3, #0
	}

}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3730      	adds	r7, #48	; 0x30
 80050b0:	46bd      	mov	sp, r7
 80050b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050b6 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	460b      	mov	r3, r1
 80050c0:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80050c2:	78fb      	ldrb	r3, [r7, #3]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <PID_SetMode+0x2e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d102      	bne.n	80050e4 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff fe19 	bl	8004d16 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	7bfa      	ldrb	r2, [r7, #15]
 80050e8:	705a      	strb	r2, [r3, #1]

}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6178      	str	r0, [r7, #20]
 80050fa:	ed87 0b02 	vstr	d0, [r7, #8]
 80050fe:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8005102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800510a:	f7fb fd23 	bl	8000b54 <__aeabi_dcmpge>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d158      	bne.n	80051c6 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8005114:	6979      	ldr	r1, [r7, #20]
 8005116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800511a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005124:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	785b      	ldrb	r3, [r3, #1]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d04b      	beq.n	80051c8 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800513e:	f7fb fd13 	bl	8000b68 <__aeabi_dcmpgt>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005152:	e9c1 2300 	strd	r2, r3, [r1]
 8005156:	e012      	b.n	800517e <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005166:	f7fb fce1 	bl	8000b2c <__aeabi_dcmplt>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d006      	beq.n	800517e <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800517a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800518a:	f7fb fced 	bl	8000b68 <__aeabi_dcmpgt>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d006      	beq.n	80051a2 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800519a:	6979      	ldr	r1, [r7, #20]
 800519c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80051a0:	e012      	b.n	80051c8 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80051ae:	f7fb fcbd 	bl	8000b2c <__aeabi_dcmplt>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80051be:	6979      	ldr	r1, [r7, #20]
 80051c0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80051c4:	e000      	b.n	80051c8 <PID_SetOutputLimits+0xd6>
		return;
 80051c6:	bf00      	nop
		}
		else { }

	}

}
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b086      	sub	sp, #24
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6178      	str	r0, [r7, #20]
 80051d6:	ed87 0b02 	vstr	d0, [r7, #8]
 80051da:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80051de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051e6:	f7fb fcb5 	bl	8000b54 <__aeabi_dcmpge>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 80051f0:	6979      	ldr	r1, [r7, #20]
 80051f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051f6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 80051fa:	6979      	ldr	r1, [r7, #20]
 80051fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005200:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8005204:	e000      	b.n	8005208 <PID_SetILimits+0x3a>
		return;
 8005206:	bf00      	nop
}
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b088      	sub	sp, #32
 8005212:	af00      	add	r7, sp, #0
 8005214:	61f8      	str	r0, [r7, #28]
 8005216:	ed87 0b04 	vstr	d0, [r7, #16]
 800521a:	ed87 1b02 	vstr	d1, [r7, #8]
 800521e:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	789b      	ldrb	r3, [r3, #2]
 8005226:	4619      	mov	r1, r3
 8005228:	ed97 2b00 	vldr	d2, [r7]
 800522c:	ed97 1b02 	vldr	d1, [r7, #8]
 8005230:	ed97 0b04 	vldr	d0, [r7, #16]
 8005234:	69f8      	ldr	r0, [r7, #28]
 8005236:	f000 f805 	bl	8005244 <PID_SetTunings2>
}
 800523a:	bf00      	nop
 800523c:	3720      	adds	r7, #32
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	61f8      	str	r0, [r7, #28]
 800524c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005250:	ed87 1b02 	vstr	d1, [r7, #8]
 8005254:	ed87 2b00 	vstr	d2, [r7]
 8005258:	460b      	mov	r3, r1
 800525a:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005268:	f7fb fc60 	bl	8000b2c <__aeabi_dcmplt>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 8089 	bne.w	8005386 <PID_SetTunings2+0x142>
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005280:	f7fb fc54 	bl	8000b2c <__aeabi_dcmplt>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d17d      	bne.n	8005386 <PID_SetTunings2+0x142>
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005296:	f7fb fc49 	bl	8000b2c <__aeabi_dcmplt>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d172      	bne.n	8005386 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	7efa      	ldrb	r2, [r7, #27]
 80052a4:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80052a6:	7efb      	ldrb	r3, [r7, #27]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80052b8:	69f9      	ldr	r1, [r7, #28]
 80052ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052be:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80052c2:	69f9      	ldr	r1, [r7, #28]
 80052c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80052cc:	69f9      	ldr	r1, [r7, #28]
 80052ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d2:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fb f93a 	bl	8000554 <__aeabi_ui2d>
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	4b2a      	ldr	r3, [pc, #168]	; (8005390 <PID_SetTunings2+0x14c>)
 80052e6:	f7fb fad9 	bl	800089c <__aeabi_ddiv>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 80052f2:	69f9      	ldr	r1, [r7, #28]
 80052f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80052fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005300:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005304:	f7fb f9a0 	bl	8000648 <__aeabi_dmul>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	69f9      	ldr	r1, [r7, #28]
 800530e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8005312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005316:	e9d7 0100 	ldrd	r0, r1, [r7]
 800531a:	f7fb fabf 	bl	800089c <__aeabi_ddiv>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	69f9      	ldr	r1, [r7, #28]
 8005324:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	78db      	ldrb	r3, [r3, #3]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d12b      	bne.n	8005388 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005336:	f04f 0000 	mov.w	r0, #0
 800533a:	f04f 0100 	mov.w	r1, #0
 800533e:	f7fa ffcb 	bl	80002d8 <__aeabi_dsub>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	69f9      	ldr	r1, [r7, #28]
 8005348:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f04f 0100 	mov.w	r1, #0
 800535a:	f7fa ffbd 	bl	80002d8 <__aeabi_dsub>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	69f9      	ldr	r1, [r7, #28]
 8005364:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800536e:	f04f 0000 	mov.w	r0, #0
 8005372:	f04f 0100 	mov.w	r1, #0
 8005376:	f7fa ffaf 	bl	80002d8 <__aeabi_dsub>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	69f9      	ldr	r1, [r7, #28]
 8005380:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8005384:	e000      	b.n	8005388 <PID_SetTunings2+0x144>
		return;
 8005386:	bf00      	nop

	}

}
 8005388:	3728      	adds	r7, #40	; 0x28
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	408f4000 	.word	0x408f4000

08005394 <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d02e      	beq.n	8005406 <PID_SetControllerDirection+0x72>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	78db      	ldrb	r3, [r3, #3]
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d029      	beq.n	8005406 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80053b8:	f04f 0000 	mov.w	r0, #0
 80053bc:	f04f 0100 	mov.w	r1, #0
 80053c0:	f7fa ff8a 	bl	80002d8 <__aeabi_dsub>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80053d4:	f04f 0000 	mov.w	r0, #0
 80053d8:	f04f 0100 	mov.w	r1, #0
 80053dc:	f7fa ff7c 	bl	80002d8 <__aeabi_dsub>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80053f0:	f04f 0000 	mov.w	r0, #0
 80053f4:	f04f 0100 	mov.w	r1, #0
 80053f8:	f7fa ff6e 	bl	80002d8 <__aeabi_dsub>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	78fa      	ldrb	r2, [r7, #3]
 800540a:	70da      	strb	r2, [r3, #3]

}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 8005414:	b5b0      	push	{r4, r5, r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	dd01      	ble.n	800542a <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 8005426:	2301      	movs	r3, #1
 8005428:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	dd2e      	ble.n	8005494 <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8005436:	68b8      	ldr	r0, [r7, #8]
 8005438:	f7fb f89c 	bl	8000574 <__aeabi_i2d>
 800543c:	4604      	mov	r4, r0
 800543e:	460d      	mov	r5, r1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4618      	mov	r0, r3
 8005446:	f7fb f885 	bl	8000554 <__aeabi_ui2d>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4620      	mov	r0, r4
 8005450:	4629      	mov	r1, r5
 8005452:	f7fb fa23 	bl	800089c <__aeabi_ddiv>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005464:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005468:	f7fb f8ee 	bl	8000648 <__aeabi_dmul>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800547c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005480:	f7fb fa0c 	bl	800089c <__aeabi_ddiv>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	68f9      	ldr	r1, [r7, #12]
 800548a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	609a      	str	r2, [r3, #8]

	}

}
 8005494:	bf00      	nop
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bdb0      	pop	{r4, r5, r7, pc}

0800549c <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80054aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80054ae:	eeb0 0a47 	vmov.f32	s0, s14
 80054b2:	eef0 0a67 	vmov.f32	s1, s15
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80054ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80054d2:	eeb0 0a47 	vmov.f32	s0, s14
 80054d6:	eef0 0a67 	vmov.f32	s1, s15
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80054f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80054f6:	eeb0 0a47 	vmov.f32	s0, s14
 80054fa:	eef0 0a67 	vmov.f32	s1, s15
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <HAL_MspInit+0x44>)
 8005510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005512:	4a0e      	ldr	r2, [pc, #56]	; (800554c <HAL_MspInit+0x44>)
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	6613      	str	r3, [r2, #96]	; 0x60
 800551a:	4b0c      	ldr	r3, [pc, #48]	; (800554c <HAL_MspInit+0x44>)
 800551c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005526:	4b09      	ldr	r3, [pc, #36]	; (800554c <HAL_MspInit+0x44>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	4a08      	ldr	r2, [pc, #32]	; (800554c <HAL_MspInit+0x44>)
 800552c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005530:	6593      	str	r3, [r2, #88]	; 0x58
 8005532:	4b06      	ldr	r3, [pc, #24]	; (800554c <HAL_MspInit+0x44>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800553e:	f006 fed3 	bl	800c2e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000

08005550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b09e      	sub	sp, #120	; 0x78
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005558:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	609a      	str	r2, [r3, #8]
 8005564:	60da      	str	r2, [r3, #12]
 8005566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005568:	f107 0320 	add.w	r3, r7, #32
 800556c:	2244      	movs	r2, #68	; 0x44
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f012 fa5e 	bl	8017a32 <memset>
  if(hadc->Instance==ADC1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800557e:	d171      	bne.n	8005664 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005584:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005586:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800558a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800558c:	f107 0320 	add.w	r3, r7, #32
 8005590:	4618      	mov	r0, r3
 8005592:	f007 fbe7 	bl	800cd64 <HAL_RCCEx_PeriphCLKConfig>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800559c:	f7ff fb28 	bl	8004bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80055a0:	4b64      	ldr	r3, [pc, #400]	; (8005734 <HAL_ADC_MspInit+0x1e4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	4a63      	ldr	r2, [pc, #396]	; (8005734 <HAL_ADC_MspInit+0x1e4>)
 80055a8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80055aa:	4b62      	ldr	r3, [pc, #392]	; (8005734 <HAL_ADC_MspInit+0x1e4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d10b      	bne.n	80055ca <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80055b2:	4b61      	ldr	r3, [pc, #388]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	4a60      	ldr	r2, [pc, #384]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80055b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055be:	4b5e      	ldr	r3, [pc, #376]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80055c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ca:	4b5b      	ldr	r3, [pc, #364]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80055cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ce:	4a5a      	ldr	r2, [pc, #360]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055d6:	4b58      	ldr	r3, [pc, #352]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80055d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = VBUS_Pin|THERMOCOUPLE_Pin;
 80055e2:	230c      	movs	r3, #12
 80055e4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055e6:	2303      	movs	r3, #3
 80055e8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80055f2:	4619      	mov	r1, r3
 80055f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055f8:	f004 fda2 	bl	800a140 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80055fc:	4b4f      	ldr	r3, [pc, #316]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 80055fe:	4a50      	ldr	r2, [pc, #320]	; (8005740 <HAL_ADC_MspInit+0x1f0>)
 8005600:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005602:	4b4e      	ldr	r3, [pc, #312]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 8005604:	2205      	movs	r2, #5
 8005606:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005608:	4b4c      	ldr	r3, [pc, #304]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 800560a:	2200      	movs	r2, #0
 800560c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800560e:	4b4b      	ldr	r3, [pc, #300]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 8005610:	2200      	movs	r2, #0
 8005612:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005614:	4b49      	ldr	r3, [pc, #292]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 8005616:	2280      	movs	r2, #128	; 0x80
 8005618:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800561a:	4b48      	ldr	r3, [pc, #288]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 800561c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005620:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005622:	4b46      	ldr	r3, [pc, #280]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 8005624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005628:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800562a:	4b44      	ldr	r3, [pc, #272]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 800562c:	2220      	movs	r2, #32
 800562e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005630:	4b42      	ldr	r3, [pc, #264]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 8005632:	2200      	movs	r2, #0
 8005634:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005636:	4841      	ldr	r0, [pc, #260]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 8005638:	f004 f82c 	bl	8009694 <HAL_DMA_Init>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8005642:	f7ff fad5 	bl	8004bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a3c      	ldr	r2, [pc, #240]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 800564a:	655a      	str	r2, [r3, #84]	; 0x54
 800564c:	4a3b      	ldr	r2, [pc, #236]	; (800573c <HAL_ADC_MspInit+0x1ec>)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8005652:	2200      	movs	r2, #0
 8005654:	210a      	movs	r1, #10
 8005656:	2012      	movs	r0, #18
 8005658:	f003 fde1 	bl	800921e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800565c:	2012      	movs	r0, #18
 800565e:	f003 fdf8 	bl	8009252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005662:	e062      	b.n	800572a <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a36      	ldr	r2, [pc, #216]	; (8005744 <HAL_ADC_MspInit+0x1f4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d15d      	bne.n	800572a <HAL_ADC_MspInit+0x1da>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800566e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005672:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005674:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005678:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800567a:	f107 0320 	add.w	r3, r7, #32
 800567e:	4618      	mov	r0, r3
 8005680:	f007 fb70 	bl	800cd64 <HAL_RCCEx_PeriphCLKConfig>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 800568a:	f7ff fab1 	bl	8004bf0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800568e:	4b29      	ldr	r3, [pc, #164]	; (8005734 <HAL_ADC_MspInit+0x1e4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3301      	adds	r3, #1
 8005694:	4a27      	ldr	r2, [pc, #156]	; (8005734 <HAL_ADC_MspInit+0x1e4>)
 8005696:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005698:	4b26      	ldr	r3, [pc, #152]	; (8005734 <HAL_ADC_MspInit+0x1e4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d10b      	bne.n	80056b8 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80056a0:	4b25      	ldr	r3, [pc, #148]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80056a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a4:	4a24      	ldr	r2, [pc, #144]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80056a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056ac:	4b22      	ldr	r3, [pc, #136]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80056ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80056b8:	4b1f      	ldr	r3, [pc, #124]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80056ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056bc:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80056be:	f043 0320 	orr.w	r3, r3, #32
 80056c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056c4:	4b1c      	ldr	r3, [pc, #112]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80056c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056d0:	4b19      	ldr	r3, [pc, #100]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80056d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d4:	4a18      	ldr	r2, [pc, #96]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056dc:	4b16      	ldr	r3, [pc, #88]	; (8005738 <HAL_ADC_MspInit+0x1e8>)
 80056de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_Pin;
 80056e8:	2302      	movs	r3, #2
 80056ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056ec:	2303      	movs	r3, #3
 80056ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 80056f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80056f8:	4619      	mov	r1, r3
 80056fa:	4813      	ldr	r0, [pc, #76]	; (8005748 <HAL_ADC_MspInit+0x1f8>)
 80056fc:	f004 fd20 	bl	800a140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_LEAK_Pin;
 8005700:	2302      	movs	r3, #2
 8005702:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005704:	2303      	movs	r3, #3
 8005706:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	2300      	movs	r3, #0
 800570a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(I_LEAK_GPIO_Port, &GPIO_InitStruct);
 800570c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005710:	4619      	mov	r1, r3
 8005712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005716:	f004 fd13 	bl	800a140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 800571a:	2200      	movs	r2, #0
 800571c:	210a      	movs	r1, #10
 800571e:	2012      	movs	r0, #18
 8005720:	f003 fd7d 	bl	800921e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005724:	2012      	movs	r0, #18
 8005726:	f003 fd94 	bl	8009252 <HAL_NVIC_EnableIRQ>
}
 800572a:	bf00      	nop
 800572c:	3778      	adds	r7, #120	; 0x78
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20002370 	.word	0x20002370
 8005738:	40021000 	.word	0x40021000
 800573c:	20001e48 	.word	0x20001e48
 8005740:	40020030 	.word	0x40020030
 8005744:	50000100 	.word	0x50000100
 8005748:	48001400 	.word	0x48001400

0800574c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <HAL_CRC_MspInit+0x38>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d10b      	bne.n	8005776 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800575e:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <HAL_CRC_MspInit+0x3c>)
 8005760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005762:	4a09      	ldr	r2, [pc, #36]	; (8005788 <HAL_CRC_MspInit+0x3c>)
 8005764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005768:	6493      	str	r3, [r2, #72]	; 0x48
 800576a:	4b07      	ldr	r3, [pc, #28]	; (8005788 <HAL_CRC_MspInit+0x3c>)
 800576c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800576e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40023000 	.word	0x40023000
 8005788:	40021000 	.word	0x40021000

0800578c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b09c      	sub	sp, #112	; 0x70
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005794:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	609a      	str	r2, [r3, #8]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057a4:	f107 0318 	add.w	r3, r7, #24
 80057a8:	2244      	movs	r2, #68	; 0x44
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f012 f940 	bl	8017a32 <memset>
  if(hi2c->Instance==I2C1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2e      	ldr	r2, [pc, #184]	; (8005870 <HAL_I2C_MspInit+0xe4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d154      	bne.n	8005866 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80057bc:	2340      	movs	r3, #64	; 0x40
 80057be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80057c0:	2300      	movs	r3, #0
 80057c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057c4:	f107 0318 	add.w	r3, r7, #24
 80057c8:	4618      	mov	r0, r3
 80057ca:	f007 facb 	bl	800cd64 <HAL_RCCEx_PeriphCLKConfig>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80057d4:	f7ff fa0c 	bl	8004bf0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057d8:	4b26      	ldr	r3, [pc, #152]	; (8005874 <HAL_I2C_MspInit+0xe8>)
 80057da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057dc:	4a25      	ldr	r2, [pc, #148]	; (8005874 <HAL_I2C_MspInit+0xe8>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057e4:	4b23      	ldr	r3, [pc, #140]	; (8005874 <HAL_I2C_MspInit+0xe8>)
 80057e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057f0:	4b20      	ldr	r3, [pc, #128]	; (8005874 <HAL_I2C_MspInit+0xe8>)
 80057f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f4:	4a1f      	ldr	r2, [pc, #124]	; (8005874 <HAL_I2C_MspInit+0xe8>)
 80057f6:	f043 0302 	orr.w	r3, r3, #2
 80057fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057fc:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <HAL_I2C_MspInit+0xe8>)
 80057fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800580c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800580e:	2312      	movs	r3, #18
 8005810:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005812:	2300      	movs	r3, #0
 8005814:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005816:	2300      	movs	r3, #0
 8005818:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800581a:	2304      	movs	r3, #4
 800581c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800581e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005822:	4619      	mov	r1, r3
 8005824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005828:	f004 fc8a 	bl	800a140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800582c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005830:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005832:	2312      	movs	r3, #18
 8005834:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005836:	2300      	movs	r3, #0
 8005838:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800583a:	2300      	movs	r3, #0
 800583c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800583e:	2304      	movs	r3, #4
 8005840:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005842:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005846:	4619      	mov	r1, r3
 8005848:	480b      	ldr	r0, [pc, #44]	; (8005878 <HAL_I2C_MspInit+0xec>)
 800584a:	f004 fc79 	bl	800a140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <HAL_I2C_MspInit+0xe8>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	4a08      	ldr	r2, [pc, #32]	; (8005874 <HAL_I2C_MspInit+0xe8>)
 8005854:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005858:	6593      	str	r3, [r2, #88]	; 0x58
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <HAL_I2C_MspInit+0xe8>)
 800585c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005866:	bf00      	nop
 8005868:	3770      	adds	r7, #112	; 0x70
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40005400 	.word	0x40005400
 8005874:	40021000 	.word	0x40021000
 8005878:	48000400 	.word	0x48000400

0800587c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005884:	f107 0314 	add.w	r3, r7, #20
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	609a      	str	r2, [r3, #8]
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a2c      	ldr	r2, [pc, #176]	; (800594c <HAL_SPI_MspInit+0xd0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d151      	bne.n	8005942 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800589e:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <HAL_SPI_MspInit+0xd4>)
 80058a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a2:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <HAL_SPI_MspInit+0xd4>)
 80058a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058a8:	6593      	str	r3, [r2, #88]	; 0x58
 80058aa:	4b29      	ldr	r3, [pc, #164]	; (8005950 <HAL_SPI_MspInit+0xd4>)
 80058ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058b6:	4b26      	ldr	r3, [pc, #152]	; (8005950 <HAL_SPI_MspInit+0xd4>)
 80058b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ba:	4a25      	ldr	r2, [pc, #148]	; (8005950 <HAL_SPI_MspInit+0xd4>)
 80058bc:	f043 0302 	orr.w	r3, r3, #2
 80058c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058c2:	4b23      	ldr	r3, [pc, #140]	; (8005950 <HAL_SPI_MspInit+0xd4>)
 80058c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80058ce:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80058d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d4:	2302      	movs	r3, #2
 80058d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058dc:	2300      	movs	r3, #0
 80058de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80058e0:	2305      	movs	r3, #5
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058e4:	f107 0314 	add.w	r3, r7, #20
 80058e8:	4619      	mov	r1, r3
 80058ea:	481a      	ldr	r0, [pc, #104]	; (8005954 <HAL_SPI_MspInit+0xd8>)
 80058ec:	f004 fc28 	bl	800a140 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 80058f2:	4a1a      	ldr	r2, [pc, #104]	; (800595c <HAL_SPI_MspInit+0xe0>)
 80058f4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80058f6:	4b18      	ldr	r3, [pc, #96]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 80058f8:	220d      	movs	r2, #13
 80058fa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058fc:	4b16      	ldr	r3, [pc, #88]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 80058fe:	2210      	movs	r2, #16
 8005900:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005902:	4b15      	ldr	r3, [pc, #84]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 8005904:	2200      	movs	r2, #0
 8005906:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005908:	4b13      	ldr	r3, [pc, #76]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 800590a:	2280      	movs	r2, #128	; 0x80
 800590c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800590e:	4b12      	ldr	r3, [pc, #72]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 8005910:	2200      	movs	r2, #0
 8005912:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005914:	4b10      	ldr	r3, [pc, #64]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 8005916:	2200      	movs	r2, #0
 8005918:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800591a:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 800591c:	2200      	movs	r2, #0
 800591e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005920:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 8005922:	2200      	movs	r2, #0
 8005924:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005926:	480c      	ldr	r0, [pc, #48]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 8005928:	f003 feb4 	bl	8009694 <HAL_DMA_Init>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8005932:	f7ff f95d 	bl	8004bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a07      	ldr	r2, [pc, #28]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 800593a:	655a      	str	r2, [r3, #84]	; 0x54
 800593c:	4a06      	ldr	r2, [pc, #24]	; (8005958 <HAL_SPI_MspInit+0xdc>)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005942:	bf00      	nop
 8005944:	3728      	adds	r7, #40	; 0x28
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40003800 	.word	0x40003800
 8005950:	40021000 	.word	0x40021000
 8005954:	48000400 	.word	0x48000400
 8005958:	20001f84 	.word	0x20001f84
 800595c:	40020008 	.word	0x40020008

08005960 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a22      	ldr	r2, [pc, #136]	; (80059f8 <HAL_TIM_PWM_MspInit+0x98>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d12c      	bne.n	80059cc <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005972:	4b22      	ldr	r3, [pc, #136]	; (80059fc <HAL_TIM_PWM_MspInit+0x9c>)
 8005974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005976:	4a21      	ldr	r2, [pc, #132]	; (80059fc <HAL_TIM_PWM_MspInit+0x9c>)
 8005978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800597c:	6613      	str	r3, [r2, #96]	; 0x60
 800597e:	4b1f      	ldr	r3, [pc, #124]	; (80059fc <HAL_TIM_PWM_MspInit+0x9c>)
 8005980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800598a:	2200      	movs	r2, #0
 800598c:	2100      	movs	r1, #0
 800598e:	2018      	movs	r0, #24
 8005990:	f003 fc45 	bl	800921e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005994:	2018      	movs	r0, #24
 8005996:	f003 fc5c 	bl	8009252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800599a:	2200      	movs	r2, #0
 800599c:	2100      	movs	r1, #0
 800599e:	2019      	movs	r0, #25
 80059a0:	f003 fc3d 	bl	800921e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80059a4:	2019      	movs	r0, #25
 80059a6:	f003 fc54 	bl	8009252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80059aa:	2200      	movs	r2, #0
 80059ac:	2100      	movs	r1, #0
 80059ae:	201a      	movs	r0, #26
 80059b0:	f003 fc35 	bl	800921e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80059b4:	201a      	movs	r0, #26
 80059b6:	f003 fc4c 	bl	8009252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80059ba:	2200      	movs	r2, #0
 80059bc:	2100      	movs	r1, #0
 80059be:	201b      	movs	r0, #27
 80059c0:	f003 fc2d 	bl	800921e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80059c4:	201b      	movs	r0, #27
 80059c6:	f003 fc44 	bl	8009252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80059ca:	e010      	b.n	80059ee <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0b      	ldr	r2, [pc, #44]	; (8005a00 <HAL_TIM_PWM_MspInit+0xa0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d10b      	bne.n	80059ee <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80059d6:	4b09      	ldr	r3, [pc, #36]	; (80059fc <HAL_TIM_PWM_MspInit+0x9c>)
 80059d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059da:	4a08      	ldr	r2, [pc, #32]	; (80059fc <HAL_TIM_PWM_MspInit+0x9c>)
 80059dc:	f043 0304 	orr.w	r3, r3, #4
 80059e0:	6593      	str	r3, [r2, #88]	; 0x58
 80059e2:	4b06      	ldr	r3, [pc, #24]	; (80059fc <HAL_TIM_PWM_MspInit+0x9c>)
 80059e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	60bb      	str	r3, [r7, #8]
 80059ec:	68bb      	ldr	r3, [r7, #8]
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	40021000 	.word	0x40021000
 8005a00:	40000800 	.word	0x40000800

08005a04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	; 0x28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a0c:	f107 0314 	add.w	r3, r7, #20
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	609a      	str	r2, [r3, #8]
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a24:	d144      	bne.n	8005ab0 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a26:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2a:	4a23      	ldr	r2, [pc, #140]	; (8005ab8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	6593      	str	r3, [r2, #88]	; 0x58
 8005a32:	4b21      	ldr	r3, [pc, #132]	; (8005ab8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a3e:	4b1e      	ldr	r3, [pc, #120]	; (8005ab8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a42:	4a1d      	ldr	r2, [pc, #116]	; (8005ab8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a4a:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a56:	4b18      	ldr	r3, [pc, #96]	; (8005ab8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5a:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005a5c:	f043 0302 	orr.w	r3, r3, #2
 8005a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a72:	2302      	movs	r3, #2
 8005a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8005a82:	f107 0314 	add.w	r3, r7, #20
 8005a86:	4619      	mov	r1, r3
 8005a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a8c:	f004 fb58 	bl	800a140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8005a90:	2308      	movs	r3, #8
 8005a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a94:	2302      	movs	r3, #2
 8005a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8005aa4:	f107 0314 	add.w	r3, r7, #20
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4804      	ldr	r0, [pc, #16]	; (8005abc <HAL_TIM_Encoder_MspInit+0xb8>)
 8005aac:	f004 fb48 	bl	800a140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005ab0:	bf00      	nop
 8005ab2:	3728      	adds	r7, #40	; 0x28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	48000400 	.word	0x48000400

08005ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a34      	ldr	r2, [pc, #208]	; (8005ba0 <HAL_TIM_Base_MspInit+0xe0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d114      	bne.n	8005afc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005ad2:	4b34      	ldr	r3, [pc, #208]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad6:	4a33      	ldr	r2, [pc, #204]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005ad8:	f043 0310 	orr.w	r3, r3, #16
 8005adc:	6593      	str	r3, [r2, #88]	; 0x58
 8005ade:	4b31      	ldr	r3, [pc, #196]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005aea:	2200      	movs	r2, #0
 8005aec:	2100      	movs	r1, #0
 8005aee:	2036      	movs	r0, #54	; 0x36
 8005af0:	f003 fb95 	bl	800921e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005af4:	2036      	movs	r0, #54	; 0x36
 8005af6:	f003 fbac 	bl	8009252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005afa:	e04c      	b.n	8005b96 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <HAL_TIM_Base_MspInit+0xe8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d114      	bne.n	8005b30 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b06:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0a:	4a26      	ldr	r2, [pc, #152]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005b0c:	f043 0320 	orr.w	r3, r3, #32
 8005b10:	6593      	str	r3, [r2, #88]	; 0x58
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2100      	movs	r1, #0
 8005b22:	2037      	movs	r0, #55	; 0x37
 8005b24:	f003 fb7b 	bl	800921e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005b28:	2037      	movs	r0, #55	; 0x37
 8005b2a:	f003 fb92 	bl	8009252 <HAL_NVIC_EnableIRQ>
}
 8005b2e:	e032      	b.n	8005b96 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <HAL_TIM_Base_MspInit+0xec>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d114      	bne.n	8005b64 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005b3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3e:	4a19      	ldr	r2, [pc, #100]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b44:	6613      	str	r3, [r2, #96]	; 0x60
 8005b46:	4b17      	ldr	r3, [pc, #92]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2100      	movs	r1, #0
 8005b56:	2019      	movs	r0, #25
 8005b58:	f003 fb61 	bl	800921e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005b5c:	2019      	movs	r0, #25
 8005b5e:	f003 fb78 	bl	8009252 <HAL_NVIC_EnableIRQ>
}
 8005b62:	e018      	b.n	8005b96 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a11      	ldr	r2, [pc, #68]	; (8005bb0 <HAL_TIM_Base_MspInit+0xf0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d113      	bne.n	8005b96 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b72:	4a0c      	ldr	r2, [pc, #48]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b78:	6613      	str	r3, [r2, #96]	; 0x60
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <HAL_TIM_Base_MspInit+0xe4>)
 8005b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8005b86:	2200      	movs	r2, #0
 8005b88:	2100      	movs	r1, #0
 8005b8a:	201a      	movs	r0, #26
 8005b8c:	f003 fb47 	bl	800921e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005b90:	201a      	movs	r0, #26
 8005b92:	f003 fb5e 	bl	8009252 <HAL_NVIC_EnableIRQ>
}
 8005b96:	bf00      	nop
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40001000 	.word	0x40001000
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	40001400 	.word	0x40001400
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800

08005bb4 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <HAL_TIM_OnePulse_MspInit+0x38>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d10b      	bne.n	8005bde <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bca:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bd0:	6613      	str	r3, [r2, #96]	; 0x60
 8005bd2:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40013400 	.word	0x40013400
 8005bf0:	40021000 	.word	0x40021000

08005bf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08a      	sub	sp, #40	; 0x28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bfc:	f107 0314 	add.w	r3, r7, #20
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	609a      	str	r2, [r3, #8]
 8005c08:	60da      	str	r2, [r3, #12]
 8005c0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a22      	ldr	r2, [pc, #136]	; (8005c9c <HAL_TIM_MspPostInit+0xa8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d11c      	bne.n	8005c50 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c16:	4b22      	ldr	r3, [pc, #136]	; (8005ca0 <HAL_TIM_MspPostInit+0xac>)
 8005c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1a:	4a21      	ldr	r2, [pc, #132]	; (8005ca0 <HAL_TIM_MspPostInit+0xac>)
 8005c1c:	f043 0320 	orr.w	r3, r3, #32
 8005c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c22:	4b1f      	ldr	r3, [pc, #124]	; (8005ca0 <HAL_TIM_MspPostInit+0xac>)
 8005c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c32:	2302      	movs	r3, #2
 8005c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005c3e:	2306      	movs	r3, #6
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8005c42:	f107 0314 	add.w	r3, r7, #20
 8005c46:	4619      	mov	r1, r3
 8005c48:	4816      	ldr	r0, [pc, #88]	; (8005ca4 <HAL_TIM_MspPostInit+0xb0>)
 8005c4a:	f004 fa79 	bl	800a140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005c4e:	e020      	b.n	8005c92 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a14      	ldr	r2, [pc, #80]	; (8005ca8 <HAL_TIM_MspPostInit+0xb4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d11b      	bne.n	8005c92 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c5a:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <HAL_TIM_MspPostInit+0xac>)
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5e:	4a10      	ldr	r2, [pc, #64]	; (8005ca0 <HAL_TIM_MspPostInit+0xac>)
 8005c60:	f043 0302 	orr.w	r3, r3, #2
 8005c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c66:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <HAL_TIM_MspPostInit+0xac>)
 8005c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8005c72:	2380      	movs	r3, #128	; 0x80
 8005c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c76:	2302      	movs	r3, #2
 8005c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005c82:	2302      	movs	r3, #2
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005c86:	f107 0314 	add.w	r3, r7, #20
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4807      	ldr	r0, [pc, #28]	; (8005cac <HAL_TIM_MspPostInit+0xb8>)
 8005c8e:	f004 fa57 	bl	800a140 <HAL_GPIO_Init>
}
 8005c92:	bf00      	nop
 8005c94:	3728      	adds	r7, #40	; 0x28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	48001400 	.word	0x48001400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	48000400 	.word	0x48000400

08005cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b09a      	sub	sp, #104	; 0x68
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	605a      	str	r2, [r3, #4]
 8005cc2:	609a      	str	r2, [r3, #8]
 8005cc4:	60da      	str	r2, [r3, #12]
 8005cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005cc8:	f107 0310 	add.w	r3, r7, #16
 8005ccc:	2244      	movs	r2, #68	; 0x44
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f011 feae 	bl	8017a32 <memset>
  if(huart->Instance==USART1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1f      	ldr	r2, [pc, #124]	; (8005d58 <HAL_UART_MspInit+0xa8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d137      	bne.n	8005d50 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ce8:	f107 0310 	add.w	r3, r7, #16
 8005cec:	4618      	mov	r0, r3
 8005cee:	f007 f839 	bl	800cd64 <HAL_RCCEx_PeriphCLKConfig>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005cf8:	f7fe ff7a 	bl	8004bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005cfc:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <HAL_UART_MspInit+0xac>)
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d00:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <HAL_UART_MspInit+0xac>)
 8005d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d06:	6613      	str	r3, [r2, #96]	; 0x60
 8005d08:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <HAL_UART_MspInit+0xac>)
 8005d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d14:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <HAL_UART_MspInit+0xac>)
 8005d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d18:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <HAL_UART_MspInit+0xac>)
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d20:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <HAL_UART_MspInit+0xac>)
 8005d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005d2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005d30:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d32:	2302      	movs	r3, #2
 8005d34:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005d3e:	2307      	movs	r3, #7
 8005d40:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d46:	4619      	mov	r1, r3
 8005d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d4c:	f004 f9f8 	bl	800a140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005d50:	bf00      	nop
 8005d52:	3768      	adds	r7, #104	; 0x68
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40013800 	.word	0x40013800
 8005d5c:	40021000 	.word	0x40021000

08005d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005d64:	e7fe      	b.n	8005d64 <NMI_Handler+0x4>

08005d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d6a:	e7fe      	b.n	8005d6a <HardFault_Handler+0x4>

08005d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d70:	e7fe      	b.n	8005d70 <MemManage_Handler+0x4>

08005d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d72:	b480      	push	{r7}
 8005d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d76:	e7fe      	b.n	8005d76 <BusFault_Handler+0x4>

08005d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d7c:	e7fe      	b.n	8005d7c <UsageFault_Handler+0x4>

08005d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d82:	bf00      	nop
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d90:	bf00      	nop
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d9e:	bf00      	nop
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005dac:	f000 fdf6 	bl	800699c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005db0:	bf00      	nop
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005db8:	4802      	ldr	r0, [pc, #8]	; (8005dc4 <DMA1_Channel1_IRQHandler+0x10>)
 8005dba:	f003 fde7 	bl	800998c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005dbe:	bf00      	nop
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20001f84 	.word	0x20001f84

08005dc8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005dcc:	4802      	ldr	r0, [pc, #8]	; (8005dd8 <DMA1_Channel3_IRQHandler+0x10>)
 8005dce:	f003 fddd 	bl	800998c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005dd2:	bf00      	nop
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20001e48 	.word	0x20001e48

08005ddc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005de0:	4803      	ldr	r0, [pc, #12]	; (8005df0 <ADC1_2_IRQHandler+0x14>)
 8005de2:	f001 fd57 	bl	8007894 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005de6:	4803      	ldr	r0, [pc, #12]	; (8005df4 <ADC1_2_IRQHandler+0x18>)
 8005de8:	f001 fd54 	bl	8007894 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005dec:	bf00      	nop
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20001d70 	.word	0x20001d70
 8005df4:	20001ddc 	.word	0x20001ddc

08005df8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005dfc:	4802      	ldr	r0, [pc, #8]	; (8005e08 <USB_LP_IRQHandler+0x10>)
 8005dfe:	f004 fd8b 	bl	800a918 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005e02:	bf00      	nop
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	200030e0 	.word	0x200030e0

08005e0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 8005e10:	2020      	movs	r0, #32
 8005e12:	f004 fb47 	bl	800a4a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 8005e16:	2080      	movs	r0, #128	; 0x80
 8005e18:	f004 fb44 	bl	800a4a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 8005e1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e20:	f004 fb40 	bl	800a4a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005e24:	bf00      	nop
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e2c:	4802      	ldr	r0, [pc, #8]	; (8005e38 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8005e2e:	f008 fbb9 	bl	800e5a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005e32:	bf00      	nop
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20001fe4 	.word	0x20001fe4

08005e3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e40:	4803      	ldr	r0, [pc, #12]	; (8005e50 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005e42:	f008 fbaf 	bl	800e5a4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005e46:	4803      	ldr	r0, [pc, #12]	; (8005e54 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005e48:	f008 fbac 	bl	800e5a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005e4c:	bf00      	nop
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20001fe4 	.word	0x20001fe4
 8005e54:	200021ac 	.word	0x200021ac

08005e58 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e5c:	4803      	ldr	r0, [pc, #12]	; (8005e6c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8005e5e:	f008 fba1 	bl	800e5a4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8005e62:	4803      	ldr	r0, [pc, #12]	; (8005e70 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8005e64:	f008 fb9e 	bl	800e5a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005e68:	bf00      	nop
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20001fe4 	.word	0x20001fe4
 8005e70:	200021f8 	.word	0x200021f8

08005e74 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e78:	4802      	ldr	r0, [pc, #8]	; (8005e84 <TIM1_CC_IRQHandler+0x10>)
 8005e7a:	f008 fb93 	bl	800e5a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20001fe4 	.word	0x20001fe4

08005e88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005e8c:	4802      	ldr	r0, [pc, #8]	; (8005e98 <TIM6_DAC_IRQHandler+0x10>)
 8005e8e:	f008 fb89 	bl	800e5a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005e92:	bf00      	nop
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200020c8 	.word	0x200020c8

08005e9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005ea0:	4802      	ldr	r0, [pc, #8]	; (8005eac <TIM7_IRQHandler+0x10>)
 8005ea2:	f008 fb7f 	bl	800e5a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005ea6:	bf00      	nop
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20002114 	.word	0x20002114

08005eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  return 1;
 8005eb4:	2301      	movs	r3, #1
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <_kill>:

int _kill(int pid, int sig)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005eca:	f011 fe05 	bl	8017ad8 <__errno>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2216      	movs	r2, #22
 8005ed2:	601a      	str	r2, [r3, #0]
  return -1;
 8005ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <_exit>:

void _exit (int status)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff ffe7 	bl	8005ec0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005ef2:	e7fe      	b.n	8005ef2 <_exit+0x12>

08005ef4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e00a      	b.n	8005f1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005f06:	f3af 8000 	nop.w
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	60ba      	str	r2, [r7, #8]
 8005f12:	b2ca      	uxtb	r2, r1
 8005f14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	dbf0      	blt.n	8005f06 <_read+0x12>
  }

  return len;
 8005f24:	687b      	ldr	r3, [r7, #4]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e009      	b.n	8005f54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	60ba      	str	r2, [r7, #8]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	3301      	adds	r3, #1
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	dbf1      	blt.n	8005f40 <_write+0x12>
  }
  return len;
 8005f5c:	687b      	ldr	r3, [r7, #4]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <_close>:

int _close(int file)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f8e:	605a      	str	r2, [r3, #4]
  return 0;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <_isatty>:

int _isatty(int file)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005fa6:	2301      	movs	r3, #1
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005fd8:	4a14      	ldr	r2, [pc, #80]	; (800602c <_sbrk+0x5c>)
 8005fda:	4b15      	ldr	r3, [pc, #84]	; (8006030 <_sbrk+0x60>)
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005fe4:	4b13      	ldr	r3, [pc, #76]	; (8006034 <_sbrk+0x64>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005fec:	4b11      	ldr	r3, [pc, #68]	; (8006034 <_sbrk+0x64>)
 8005fee:	4a12      	ldr	r2, [pc, #72]	; (8006038 <_sbrk+0x68>)
 8005ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ff2:	4b10      	ldr	r3, [pc, #64]	; (8006034 <_sbrk+0x64>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d207      	bcs.n	8006010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006000:	f011 fd6a 	bl	8017ad8 <__errno>
 8006004:	4603      	mov	r3, r0
 8006006:	220c      	movs	r2, #12
 8006008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800600a:	f04f 33ff 	mov.w	r3, #4294967295
 800600e:	e009      	b.n	8006024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006010:	4b08      	ldr	r3, [pc, #32]	; (8006034 <_sbrk+0x64>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006016:	4b07      	ldr	r3, [pc, #28]	; (8006034 <_sbrk+0x64>)
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4413      	add	r3, r2
 800601e:	4a05      	ldr	r2, [pc, #20]	; (8006034 <_sbrk+0x64>)
 8006020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006022:	68fb      	ldr	r3, [r7, #12]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20008000 	.word	0x20008000
 8006030:	00000400 	.word	0x00000400
 8006034:	20002374 	.word	0x20002374
 8006038:	20003728 	.word	0x20003728

0800603c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <SystemInit+0x20>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	4a05      	ldr	r2, [pc, #20]	; (800605c <SystemInit+0x20>)
 8006048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800604c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006050:	bf00      	nop
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	e000ed00 	.word	0xe000ed00

08006060 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006060:	480d      	ldr	r0, [pc, #52]	; (8006098 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006062:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8006064:	f7ff ffea 	bl	800603c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
                                   ldr r0, =_sdata
 8006068:	480c      	ldr	r0, [pc, #48]	; (800609c <LoopForever+0x6>)
  ldr r1, =_edata
 800606a:	490d      	ldr	r1, [pc, #52]	; (80060a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800606c:	4a0d      	ldr	r2, [pc, #52]	; (80060a4 <LoopForever+0xe>)
  movs r3, #0
 800606e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006070:	e002      	b.n	8006078 <LoopCopyDataInit>

08006072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006076:	3304      	adds	r3, #4

08006078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800607a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800607c:	d3f9      	bcc.n	8006072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800607e:	4a0a      	ldr	r2, [pc, #40]	; (80060a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006080:	4c0a      	ldr	r4, [pc, #40]	; (80060ac <LoopForever+0x16>)
  movs r3, #0
 8006082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006084:	e001      	b.n	800608a <LoopFillZerobss>

08006086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006088:	3204      	adds	r2, #4

0800608a <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
 800608a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800608c:	d3fb      	bcc.n	8006086 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800608e:	f011 fd29 	bl	8017ae4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006092:	f7fd fd75 	bl	8003b80 <main>

08006096 <LoopForever>:

LoopForever:
    b LoopForever
 8006096:	e7fe      	b.n	8006096 <LoopForever>
  ldr   r0, =_estack
 8006098:	20008000 	.word	0x20008000
                                   ldr r0, =_sdata
 800609c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80060a0:	2000055c 	.word	0x2000055c
  ldr r2, =_sidata
 80060a4:	0801e410 	.word	0x0801e410
  ldr r2, =_sbss
 80060a8:	20000560 	.word	0x20000560
  ldr r4, =_ebss
 80060ac:	20003728 	.word	0x20003728

080060b0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80060b0:	e7fe      	b.n	80060b0 <COMP1_2_3_IRQHandler>
	...

080060b4 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <setSPI_Size+0x54>)
 80060c0:	f993 3000 	ldrsb.w	r3, [r3]
 80060c4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d017      	beq.n	80060fc <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80060cc:	4b0f      	ldr	r3, [pc, #60]	; (800610c <setSPI_Size+0x58>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4b0e      	ldr	r3, [pc, #56]	; (800610c <setSPI_Size+0x58>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060da:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 80060dc:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <setSPI_Size+0x54>)
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80060e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d104      	bne.n	80060f4 <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80060ea:	4b08      	ldr	r3, [pc, #32]	; (800610c <setSPI_Size+0x58>)
 80060ec:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80060f0:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 80060f2:	e003      	b.n	80060fc <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80060f4:	4b05      	ldr	r3, [pc, #20]	; (800610c <setSPI_Size+0x58>)
 80060f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80060fa:	60da      	str	r2, [r3, #12]
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	200001e4 	.word	0x200001e4
 800610c:	20001f20 	.word	0x20001f20

08006110 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	460a      	mov	r2, r1
 800611a:	71fb      	strb	r3, [r7, #7]
 800611c:	4613      	mov	r3, r2
 800611e:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8006120:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ffc5 	bl	80060b4 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 800612a:	4b3c      	ldr	r3, [pc, #240]	; (800621c <setDMAMemMode+0x10c>)
 800612c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006130:	461a      	mov	r2, r3
 8006132:	79bb      	ldrb	r3, [r7, #6]
 8006134:	429a      	cmp	r2, r3
 8006136:	d106      	bne.n	8006146 <setDMAMemMode+0x36>
 8006138:	4b38      	ldr	r3, [pc, #224]	; (800621c <setDMAMemMode+0x10c>)
 800613a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800613e:	461a      	mov	r2, r3
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	429a      	cmp	r2, r3
 8006144:	d066      	beq.n	8006214 <setDMAMemMode+0x104>
    config.dma_sz =size;
 8006146:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800614a:	4b34      	ldr	r3, [pc, #208]	; (800621c <setDMAMemMode+0x10c>)
 800614c:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800614e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006152:	4b32      	ldr	r3, [pc, #200]	; (800621c <setDMAMemMode+0x10c>)
 8006154:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8006156:	4b32      	ldr	r3, [pc, #200]	; (8006220 <setDMAMemMode+0x110>)
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	4b30      	ldr	r3, [pc, #192]	; (8006220 <setDMAMemMode+0x110>)
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 800616a:	bf00      	nop
 800616c:	4b2c      	ldr	r3, [pc, #176]	; (8006220 <setDMAMemMode+0x110>)
 800616e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f7      	bne.n	800616c <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d10e      	bne.n	80061a0 <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8006182:	4b27      	ldr	r3, [pc, #156]	; (8006220 <setDMAMemMode+0x110>)
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	2280      	movs	r2, #128	; 0x80
 8006188:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 800618a:	4b25      	ldr	r3, [pc, #148]	; (8006220 <setDMAMemMode+0x110>)
 800618c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b23      	ldr	r3, [pc, #140]	; (8006220 <setDMAMemMode+0x110>)
 8006194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e00d      	b.n	80061bc <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80061a0:	4b1f      	ldr	r3, [pc, #124]	; (8006220 <setDMAMemMode+0x110>)
 80061a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a4:	2200      	movs	r2, #0
 80061a6:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 80061a8:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <setDMAMemMode+0x110>)
 80061aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b1b      	ldr	r3, [pc, #108]	; (8006220 <setDMAMemMode+0x110>)
 80061b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061ba:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 80061bc:	79bb      	ldrb	r3, [r7, #6]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d116      	bne.n	80061f0 <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80061c2:	4b17      	ldr	r3, [pc, #92]	; (8006220 <setDMAMemMode+0x110>)
 80061c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061ca:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80061cc:	4b14      	ldr	r3, [pc, #80]	; (8006220 <setDMAMemMode+0x110>)
 80061ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061d4:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 80061d6:	4b12      	ldr	r3, [pc, #72]	; (8006220 <setDMAMemMode+0x110>)
 80061d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80061e2:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <setDMAMemMode+0x110>)
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 80061ec:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 80061ee:	e011      	b.n	8006214 <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <setDMAMemMode+0x110>)
 80061f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f4:	2200      	movs	r2, #0
 80061f6:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <setDMAMemMode+0x110>)
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	2200      	movs	r2, #0
 80061fe:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <setDMAMemMode+0x110>)
 8006202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <setDMAMemMode+0x110>)
 800620a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	200001e4 	.word	0x200001e4
 8006220:	20001f20 	.word	0x20001f20

08006224 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8006230:	2000      	movs	r0, #0
 8006232:	f7ff ff3f 	bl	80060b4 <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 8006236:	2200      	movs	r2, #0
 8006238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800623c:	4815      	ldr	r0, [pc, #84]	; (8006294 <LCD_WriteCommand+0x70>)
 800623e:	f004 f919 	bl	800a474 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8006242:	2200      	movs	r2, #0
 8006244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006248:	4812      	ldr	r0, [pc, #72]	; (8006294 <LCD_WriteCommand+0x70>)
 800624a:	f004 f913 	bl	800a474 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	2201      	movs	r2, #1
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4810      	ldr	r0, [pc, #64]	; (8006298 <LCD_WriteCommand+0x74>)
 8006258:	f007 f81f 	bl	800d29a <HAL_SPI_Transmit>
  if(argc){
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00e      	beq.n	8006280 <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8006262:	2201      	movs	r2, #1
 8006264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006268:	480a      	ldr	r0, [pc, #40]	; (8006294 <LCD_WriteCommand+0x70>)
 800626a:	f004 f903 	bl	800a474 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	1c59      	adds	r1, r3, #1
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	b29a      	uxth	r2, r3
 8006276:	f04f 33ff 	mov.w	r3, #4294967295
 800627a:	4807      	ldr	r0, [pc, #28]	; (8006298 <LCD_WriteCommand+0x74>)
 800627c:	f007 f80d 	bl	800d29a <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8006280:	2201      	movs	r2, #1
 8006282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006286:	4803      	ldr	r0, [pc, #12]	; (8006294 <LCD_WriteCommand+0x70>)
 8006288:	f004 f8f4 	bl	800a474 <HAL_GPIO_WritePin>
#endif
}
 800628c:	bf00      	nop
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	48000400 	.word	0x48000400
 8006298:	20001f20 	.word	0x20001f20

0800629c <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80062a6:	2201      	movs	r2, #1
 80062a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062ac:	4830      	ldr	r0, [pc, #192]	; (8006370 <LCD_WriteData+0xd4>)
 80062ae:	f004 f8e1 	bl	800a474 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80062b2:	2200      	movs	r2, #0
 80062b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062b8:	482d      	ldr	r0, [pc, #180]	; (8006370 <LCD_WriteData+0xd4>)
 80062ba:	f004 f8db 	bl	800a474 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80062be:	e049      	b.n	8006354 <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062c6:	4293      	cmp	r3, r2
 80062c8:	bf28      	it	cs
 80062ca:	4613      	movcs	r3, r2
 80062cc:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	d924      	bls.n	800631e <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 80062d4:	89fb      	ldrh	r3, [r7, #14]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	4826      	ldr	r0, [pc, #152]	; (8006374 <LCD_WriteData+0xd8>)
 80062dc:	f007 f952 	bl	800d584 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 80062e0:	bf00      	nop
 80062e2:	4b24      	ldr	r3, [pc, #144]	; (8006374 <LCD_WriteData+0xd8>)
 80062e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e6:	4618      	mov	r0, r3
 80062e8:	f003 fbff 	bl	8009aea <HAL_DMA_GetState>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d1f7      	bne.n	80062e2 <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 80062f2:	4b21      	ldr	r3, [pc, #132]	; (8006378 <LCD_WriteData+0xdc>)
 80062f4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d127      	bne.n	800634c <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 80062fc:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <LCD_WriteData+0xdc>)
 80062fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d104      	bne.n	8006310 <LCD_WriteData+0x74>
          buff += chunk_size;
 8006306:	89fb      	ldrh	r3, [r7, #14]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4413      	add	r3, r2
 800630c:	607b      	str	r3, [r7, #4]
 800630e:	e01d      	b.n	800634c <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 8006310:	89fb      	ldrh	r3, [r7, #14]
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	461a      	mov	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	607b      	str	r3, [r7, #4]
 800631c:	e016      	b.n	800634c <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800631e:	89fa      	ldrh	r2, [r7, #14]
 8006320:	f04f 33ff 	mov.w	r3, #4294967295
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4813      	ldr	r0, [pc, #76]	; (8006374 <LCD_WriteData+0xd8>)
 8006328:	f006 ffb7 	bl	800d29a <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 800632c:	4b12      	ldr	r3, [pc, #72]	; (8006378 <LCD_WriteData+0xdc>)
 800632e:	f993 3000 	ldrsb.w	r3, [r3]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d104      	bne.n	8006340 <LCD_WriteData+0xa4>
        buff += chunk_size;
 8006336:	89fb      	ldrh	r3, [r7, #14]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	4413      	add	r3, r2
 800633c:	607b      	str	r3, [r7, #4]
 800633e:	e005      	b.n	800634c <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 8006340:	89fb      	ldrh	r3, [r7, #14]
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	461a      	mov	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4413      	add	r3, r2
 800634a:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 800634c:	89fb      	ldrh	r3, [r7, #14]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1b2      	bne.n	80062c0 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 800635a:	2201      	movs	r2, #1
 800635c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006360:	4803      	ldr	r0, [pc, #12]	; (8006370 <LCD_WriteData+0xd4>)
 8006362:	f004 f887 	bl	800a474 <HAL_GPIO_WritePin>
#endif
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	48000400 	.word	0x48000400
 8006374:	20001f20 	.word	0x20001f20
 8006378:	200001e4 	.word	0x200001e4

0800637c <LCD_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in ST7735.h)
 * @return none
 */
void LCD_SetRotation(uint8_t m)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { CMD_MADCTL, 0};
 8006386:	2336      	movs	r3, #54	; 0x36
 8006388:	81bb      	strh	r3, [r7, #12]

  m = m % 4; // can't be higher than 3
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	f003 0303 	and.w	r3, r3, #3
 8006390:	71fb      	strb	r3, [r7, #7]

  switch (m)
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	2b03      	cmp	r3, #3
 8006396:	d817      	bhi.n	80063c8 <LCD_SetRotation+0x4c>
 8006398:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <LCD_SetRotation+0x24>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063b7 	.word	0x080063b7
 80063a8:	080063bd 	.word	0x080063bd
 80063ac:	080063c3 	.word	0x080063c3
  {
  case 0:
#if LCD_IS_160X80
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MY | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MY | CMD_MADCTL_RGB;
 80063b0:	23c0      	movs	r3, #192	; 0xc0
 80063b2:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80063b4:	e008      	b.n	80063c8 <LCD_SetRotation+0x4c>
  case 1:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_MY | CMD_MADCTL_MV | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MY | CMD_MADCTL_MV | CMD_MADCTL_RGB;
 80063b6:	23a0      	movs	r3, #160	; 0xa0
 80063b8:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80063ba:	e005      	b.n	80063c8 <LCD_SetRotation+0x4c>
  case 2:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_RGB;
 80063bc:	2300      	movs	r3, #0
 80063be:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80063c0:	e002      	b.n	80063c8 <LCD_SetRotation+0x4c>
  case 3:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MV | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MV | CMD_MADCTL_RGB;
 80063c2:	2360      	movs	r3, #96	; 0x60
 80063c4:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80063c6:	bf00      	nop
  }
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80063c8:	f107 030c 	add.w	r3, r7, #12
 80063cc:	2101      	movs	r1, #1
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff ff28 	bl	8006224 <LCD_WriteCommand>
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80063dc:	b590      	push	{r4, r7, lr}
 80063de:	b08b      	sub	sp, #44	; 0x2c
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4604      	mov	r4, r0
 80063e4:	4608      	mov	r0, r1
 80063e6:	4611      	mov	r1, r2
 80063e8:	461a      	mov	r2, r3
 80063ea:	4623      	mov	r3, r4
 80063ec:	80fb      	strh	r3, [r7, #6]
 80063ee:	4603      	mov	r3, r0
 80063f0:	80bb      	strh	r3, [r7, #4]
 80063f2:	460b      	mov	r3, r1
 80063f4:	807b      	strh	r3, [r7, #2]
 80063f6:	4613      	mov	r3, r2
 80063f8:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063fe:	887b      	ldrh	r3, [r7, #2]
 8006400:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8006402:	88bb      	ldrh	r3, [r7, #4]
 8006404:	847b      	strh	r3, [r7, #34]	; 0x22
 8006406:	883b      	ldrh	r3, [r7, #0]
 8006408:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 800640a:	232a      	movs	r3, #42	; 0x2a
 800640c:	763b      	strb	r3, [r7, #24]
 800640e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006412:	121b      	asrs	r3, r3, #8
 8006414:	b21b      	sxth	r3, r3
 8006416:	b2db      	uxtb	r3, r3
 8006418:	767b      	strb	r3, [r7, #25]
 800641a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800641c:	b2db      	uxtb	r3, r3
 800641e:	76bb      	strb	r3, [r7, #26]
 8006420:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006424:	121b      	asrs	r3, r3, #8
 8006426:	b21b      	sxth	r3, r3
 8006428:	b2db      	uxtb	r3, r3
 800642a:	76fb      	strb	r3, [r7, #27]
 800642c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800642e:	b2db      	uxtb	r3, r3
 8006430:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8006432:	f107 0318 	add.w	r3, r7, #24
 8006436:	2104      	movs	r1, #4
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fef3 	bl	8006224 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 800643e:	232b      	movs	r3, #43	; 0x2b
 8006440:	743b      	strb	r3, [r7, #16]
 8006442:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006446:	121b      	asrs	r3, r3, #8
 8006448:	b21b      	sxth	r3, r3
 800644a:	b2db      	uxtb	r3, r3
 800644c:	747b      	strb	r3, [r7, #17]
 800644e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006450:	b2db      	uxtb	r3, r3
 8006452:	74bb      	strb	r3, [r7, #18]
 8006454:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006458:	121b      	asrs	r3, r3, #8
 800645a:	b21b      	sxth	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	74fb      	strb	r3, [r7, #19]
 8006460:	8c3b      	ldrh	r3, [r7, #32]
 8006462:	b2db      	uxtb	r3, r3
 8006464:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8006466:	f107 0310 	add.w	r3, r7, #16
 800646a:	2104      	movs	r1, #4
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fed9 	bl	8006224 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8006472:	232c      	movs	r3, #44	; 0x2c
 8006474:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8006476:	f107 030c 	add.w	r3, r7, #12
 800647a:	2100      	movs	r1, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fed1 	bl	8006224 <LCD_WriteCommand>
  }
}
 8006482:	bf00      	nop
 8006484:	372c      	adds	r7, #44	; 0x2c
 8006486:	46bd      	mov	sp, r7
 8006488:	bd90      	pop	{r4, r7, pc}
	...

0800648c <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	80fb      	strh	r3, [r7, #6]
 8006496:	460b      	mov	r3, r1
 8006498:	80bb      	strh	r3, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 800649e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	db39      	blt.n	800651a <LCD_DrawPixel+0x8e>
 80064a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064aa:	2bef      	cmp	r3, #239	; 0xef
 80064ac:	dc35      	bgt.n	800651a <LCD_DrawPixel+0x8e>
 80064ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	db31      	blt.n	800651a <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 80064b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80064be:	da2c      	bge.n	800651a <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80064c0:	887b      	ldrh	r3, [r7, #2]
 80064c2:	0a1b      	lsrs	r3, r3, #8
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	733b      	strb	r3, [r7, #12]
 80064ca:	887b      	ldrh	r3, [r7, #2]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80064d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064d8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80064dc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80064e0:	f7ff ff7c 	bl	80063dc <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80064e4:	2201      	movs	r2, #1
 80064e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064ea:	480e      	ldr	r0, [pc, #56]	; (8006524 <LCD_DrawPixel+0x98>)
 80064ec:	f003 ffc2 	bl	800a474 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80064f0:	2200      	movs	r2, #0
 80064f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064f6:	480b      	ldr	r0, [pc, #44]	; (8006524 <LCD_DrawPixel+0x98>)
 80064f8:	f003 ffbc 	bl	800a474 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 80064fc:	f107 010c 	add.w	r1, r7, #12
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	2202      	movs	r2, #2
 8006506:	4808      	ldr	r0, [pc, #32]	; (8006528 <LCD_DrawPixel+0x9c>)
 8006508:	f006 fec7 	bl	800d29a <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 800650c:	2201      	movs	r2, #1
 800650e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006512:	4804      	ldr	r0, [pc, #16]	; (8006524 <LCD_DrawPixel+0x98>)
 8006514:	f003 ffae 	bl	800a474 <HAL_GPIO_WritePin>
 8006518:	e000      	b.n	800651c <LCD_DrawPixel+0x90>
    return;
 800651a:	bf00      	nop
#endif
}
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	48000400 	.word	0x48000400
 8006528:	20001f20 	.word	0x20001f20

0800652c <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 800652c:	b580      	push	{r7, lr}
 800652e:	b094      	sub	sp, #80	; 0x50
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b20      	cmp	r3, #32
 800653c:	d905      	bls.n	800654a <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 800653e:	1cbb      	adds	r3, r7, #2
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff feaa 	bl	800629c <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8006548:	e026      	b.n	8006598 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 800654a:	2300      	movs	r3, #0
 800654c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800654e:	e009      	b.n	8006564 <LCD_FillPixels+0x38>
      fill[t]=color;
 8006550:	887a      	ldrh	r2, [r7, #2]
 8006552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	3350      	adds	r3, #80	; 0x50
 8006558:	443b      	add	r3, r7
 800655a:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 800655e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006560:	3301      	adds	r3, #1
 8006562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b20      	cmp	r3, #32
 8006568:	bf28      	it	cs
 800656a:	2320      	movcs	r3, #32
 800656c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800656e:	429a      	cmp	r2, r3
 8006570:	d3ee      	bcc.n	8006550 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 8006572:	e00e      	b.n	8006592 <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b20      	cmp	r3, #32
 8006578:	bf28      	it	cs
 800657a:	2320      	movcs	r3, #32
 800657c:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 800657e:	f107 0308 	add.w	r3, r7, #8
 8006582:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff fe89 	bl	800629c <LCD_WriteData>
      pixels-=sz;
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1ed      	bne.n	8006574 <LCD_FillPixels+0x48>
}
 8006598:	bf00      	nop
 800659a:	3750      	adds	r7, #80	; 0x50
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	4611      	mov	r1, r2
 80065ac:	461a      	mov	r2, r3
 80065ae:	4623      	mov	r3, r4
 80065b0:	80fb      	strh	r3, [r7, #6]
 80065b2:	4603      	mov	r3, r0
 80065b4:	80bb      	strh	r3, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	807b      	strh	r3, [r7, #2]
 80065ba:	4613      	mov	r3, r2
 80065bc:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80065be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c6:	d105      	bne.n	80065d4 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 80065c8:	2100      	movs	r1, #0
 80065ca:	2001      	movs	r0, #1
 80065cc:	f7ff fda0 	bl	8006110 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	e014      	b.n	80065fe <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80065d4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80065d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80065dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80065e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80065e4:	f7ff fefa 	bl	80063dc <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80065e8:	2101      	movs	r1, #1
 80065ea:	2000      	movs	r0, #0
 80065ec:	f7ff fd90 	bl	8006110 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80065f0:	2201      	movs	r2, #1
 80065f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065f6:	4804      	ldr	r0, [pc, #16]	; (8006608 <LCD_FillArea+0x68>)
 80065f8:	f003 ff3c 	bl	800a474 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 80065fc:	4b03      	ldr	r3, [pc, #12]	; (800660c <LCD_FillArea+0x6c>)
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}
 8006606:	bf00      	nop
 8006608:	48000400 	.word	0x48000400
 800660c:	0800652d 	.word	0x0800652d

08006610 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	4611      	mov	r1, r2
 800661c:	461a      	mov	r2, r3
 800661e:	4623      	mov	r3, r4
 8006620:	80fb      	strh	r3, [r7, #6]
 8006622:	4603      	mov	r3, r0
 8006624:	80bb      	strh	r3, [r7, #4]
 8006626:	460b      	mov	r3, r1
 8006628:	807b      	strh	r3, [r7, #2]
 800662a:	4613      	mov	r3, r2
 800662c:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 800662e:	887a      	ldrh	r2, [r7, #2]
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	3301      	adds	r3, #1
 8006636:	4619      	mov	r1, r3
 8006638:	883a      	ldrh	r2, [r7, #0]
 800663a:	88bb      	ldrh	r3, [r7, #4]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	3301      	adds	r3, #1
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8006646:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800664a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800664e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006652:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006656:	f7ff fec1 	bl	80063dc <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 800665a:	2101      	movs	r1, #1
 800665c:	2000      	movs	r0, #0
 800665e:	f7ff fd57 	bl	8006110 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8006662:	8c3b      	ldrh	r3, [r7, #32]
 8006664:	4619      	mov	r1, r3
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff ff60 	bl	800652c <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 800666c:	2100      	movs	r1, #0
 800666e:	2001      	movs	r0, #1
 8006670:	f7ff fd4e 	bl	8006110 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	bd90      	pop	{r4, r7, pc}

0800667e <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 800667e:	b590      	push	{r4, r7, lr}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	4603      	mov	r3, r0
 8006686:	603a      	str	r2, [r7, #0]
 8006688:	80fb      	strh	r3, [r7, #6]
 800668a:	460b      	mov	r3, r1
 800668c:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	889b      	ldrh	r3, [r3, #4]
 8006692:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	88db      	ldrh	r3, [r3, #6]
 8006698:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	2bef      	cmp	r3, #239	; 0xef
 800669e:	d839      	bhi.n	8006714 <LCD_DrawImage+0x96>
 80066a0:	88bb      	ldrh	r3, [r7, #4]
 80066a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80066a6:	d235      	bcs.n	8006714 <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 80066a8:	88fa      	ldrh	r2, [r7, #6]
 80066aa:	89fb      	ldrh	r3, [r7, #14]
 80066ac:	4413      	add	r3, r2
 80066ae:	2bf0      	cmp	r3, #240	; 0xf0
 80066b0:	dc32      	bgt.n	8006718 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 80066b2:	88ba      	ldrh	r2, [r7, #4]
 80066b4:	89bb      	ldrh	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80066bc:	dc2e      	bgt.n	800671c <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	7a1b      	ldrb	r3, [r3, #8]
 80066c2:	2b10      	cmp	r3, #16
 80066c4:	d12c      	bne.n	8006720 <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80066c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80066ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80066ce:	88fa      	ldrh	r2, [r7, #6]
 80066d0:	89fb      	ldrh	r3, [r7, #14]
 80066d2:	4413      	add	r3, r2
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29b      	uxth	r3, r3
 80066da:	b21c      	sxth	r4, r3
 80066dc:	88ba      	ldrh	r2, [r7, #4]
 80066de:	89bb      	ldrh	r3, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	b21b      	sxth	r3, r3
 80066ea:	4622      	mov	r2, r4
 80066ec:	f7ff fe76 	bl	80063dc <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80066f0:	2101      	movs	r1, #1
 80066f2:	2001      	movs	r0, #1
 80066f4:	f7ff fd0c 	bl	8006110 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	89fb      	ldrh	r3, [r7, #14]
 80066fe:	89ba      	ldrh	r2, [r7, #12]
 8006700:	fb02 f303 	mul.w	r3, r2, r3
 8006704:	4619      	mov	r1, r3
 8006706:	f7ff fdc9 	bl	800629c <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 800670a:	2100      	movs	r1, #0
 800670c:	2001      	movs	r0, #1
 800670e:	f7ff fcff 	bl	8006110 <setDMAMemMode>
 8006712:	e006      	b.n	8006722 <LCD_DrawImage+0xa4>
    return;
 8006714:	bf00      	nop
 8006716:	e004      	b.n	8006722 <LCD_DrawImage+0xa4>
    return;
 8006718:	bf00      	nop
 800671a:	e002      	b.n	8006722 <LCD_DrawImage+0xa4>
    return;
 800671c:	bf00      	nop
 800671e:	e000      	b.n	8006722 <LCD_DrawImage+0xa4>
    return;
 8006720:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	bd90      	pop	{r4, r7, pc}

08006728 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8006728:	b590      	push	{r4, r7, lr}
 800672a:	b087      	sub	sp, #28
 800672c:	af02      	add	r7, sp, #8
 800672e:	4604      	mov	r4, r0
 8006730:	4608      	mov	r0, r1
 8006732:	4611      	mov	r1, r2
 8006734:	461a      	mov	r2, r3
 8006736:	4623      	mov	r3, r4
 8006738:	80fb      	strh	r3, [r7, #6]
 800673a:	4603      	mov	r3, r0
 800673c:	80bb      	strh	r3, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	807b      	strh	r3, [r7, #2]
 8006742:	4613      	mov	r3, r2
 8006744:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	887b      	ldrh	r3, [r7, #2]
 800674a:	429a      	cmp	r2, r3
 800674c:	d10a      	bne.n	8006764 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 800674e:	88ba      	ldrh	r2, [r7, #4]
 8006750:	883b      	ldrh	r3, [r7, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d918      	bls.n	8006788 <LCD_DrawLine+0x60>
 8006756:	88bb      	ldrh	r3, [r7, #4]
 8006758:	81bb      	strh	r3, [r7, #12]
 800675a:	883b      	ldrh	r3, [r7, #0]
 800675c:	80bb      	strh	r3, [r7, #4]
 800675e:	89bb      	ldrh	r3, [r7, #12]
 8006760:	803b      	strh	r3, [r7, #0]
 8006762:	e011      	b.n	8006788 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8006764:	88ba      	ldrh	r2, [r7, #4]
 8006766:	883b      	ldrh	r3, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d10a      	bne.n	8006782 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 800676c:	88fa      	ldrh	r2, [r7, #6]
 800676e:	887b      	ldrh	r3, [r7, #2]
 8006770:	429a      	cmp	r2, r3
 8006772:	d909      	bls.n	8006788 <LCD_DrawLine+0x60>
 8006774:	88fb      	ldrh	r3, [r7, #6]
 8006776:	81fb      	strh	r3, [r7, #14]
 8006778:	887b      	ldrh	r3, [r7, #2]
 800677a:	80fb      	strh	r3, [r7, #6]
 800677c:	89fb      	ldrh	r3, [r7, #14]
 800677e:	807b      	strh	r3, [r7, #2]
 8006780:	e002      	b.n	8006788 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8006782:	f04f 33ff 	mov.w	r3, #4294967295
 8006786:	e009      	b.n	800679c <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8006788:	883c      	ldrh	r4, [r7, #0]
 800678a:	887a      	ldrh	r2, [r7, #2]
 800678c:	88b9      	ldrh	r1, [r7, #4]
 800678e:	88f8      	ldrh	r0, [r7, #6]
 8006790:	8c3b      	ldrh	r3, [r7, #32]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	4623      	mov	r3, r4
 8006796:	f7ff ff3b 	bl	8006610 <LCD_Fill>
  return UG_RESULT_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd90      	pop	{r4, r7, pc}

080067a4 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60ba      	str	r2, [r7, #8]
 80067ac:	607b      	str	r3, [r7, #4]
 80067ae:	4603      	mov	r3, r0
 80067b0:	81fb      	strh	r3, [r7, #14]
 80067b2:	460b      	mov	r3, r1
 80067b4:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f00c fa10 	bl	8012bdc <UG_FontSelect>
  UG_SetForecolor(color);
 80067bc:	8b3b      	ldrh	r3, [r7, #24]
 80067be:	4618      	mov	r0, r3
 80067c0:	f00c fd58 	bl	8013274 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 80067c4:	8bbb      	ldrh	r3, [r7, #28]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f00c fd66 	bl	8013298 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 80067cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067d0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f00c fcb4 	bl	8013144 <UG_PutString>
}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <LCD_setPower+0x14>
 80067f4:	2329      	movs	r3, #41	; 0x29
 80067f6:	e000      	b.n	80067fa <LCD_setPower+0x16>
 80067f8:	2328      	movs	r3, #40	; 0x28
 80067fa:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80067fc:	f107 030c 	add.w	r3, r7, #12
 8006800:	2100      	movs	r1, #0
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff fd0e 	bl	8006224 <LCD_WriteCommand>
}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <LCD_Update>:

static void LCD_Update(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8006814:	2100      	movs	r1, #0
 8006816:	2001      	movs	r0, #1
 8006818:	f7ff fc7a 	bl	8006110 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 800681c:	bf00      	nop
 800681e:	bd80      	pop	{r7, pc}

08006820 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8006826:	2201      	movs	r2, #1
 8006828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800682c:	482a      	ldr	r0, [pc, #168]	; (80068d8 <LCD_init+0xb8>)
 800682e:	f003 fe21 	bl	800a474 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 8006832:	2200      	movs	r2, #0
 8006834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006838:	4827      	ldr	r0, [pc, #156]	; (80068d8 <LCD_init+0xb8>)
 800683a:	f003 fe1b 	bl	800a474 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800683e:	2001      	movs	r0, #1
 8006840:	f000 f8ca 	bl	80069d8 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 8006844:	2201      	movs	r2, #1
 8006846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800684a:	4823      	ldr	r0, [pc, #140]	; (80068d8 <LCD_init+0xb8>)
 800684c:	f003 fe12 	bl	800a474 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8006850:	20c8      	movs	r0, #200	; 0xc8
 8006852:	f000 f8c1 	bl	80069d8 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8006856:	4921      	ldr	r1, [pc, #132]	; (80068dc <LCD_init+0xbc>)
 8006858:	4821      	ldr	r0, [pc, #132]	; (80068e0 <LCD_init+0xc0>)
 800685a:	f00c f925 	bl	8012aa8 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 800685e:	4921      	ldr	r1, [pc, #132]	; (80068e4 <LCD_init+0xc4>)
 8006860:	2000      	movs	r0, #0
 8006862:	f00d fdaf 	bl	80143c4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8006866:	4920      	ldr	r1, [pc, #128]	; (80068e8 <LCD_init+0xc8>)
 8006868:	2001      	movs	r0, #1
 800686a:	f00d fdab 	bl	80143c4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 800686e:	491f      	ldr	r1, [pc, #124]	; (80068ec <LCD_init+0xcc>)
 8006870:	2002      	movs	r0, #2
 8006872:	f00d fda7 	bl	80143c4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8006876:	491e      	ldr	r1, [pc, #120]	; (80068f0 <LCD_init+0xd0>)
 8006878:	2003      	movs	r0, #3
 800687a:	f00d fda3 	bl	80143c4 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 800687e:	2000      	movs	r0, #0
 8006880:	f00c fd1c 	bl	80132bc <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8006884:	2000      	movs	r0, #0
 8006886:	f00c fd2d 	bl	80132e4 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 800688a:	2300      	movs	r3, #0
 800688c:	80fb      	strh	r3, [r7, #6]
 800688e:	e013      	b.n	80068b8 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	3301      	adds	r3, #1
 8006894:	4a17      	ldr	r2, [pc, #92]	; (80068f4 <LCD_init+0xd4>)
 8006896:	441a      	add	r2, r3
 8006898:	88fb      	ldrh	r3, [r7, #6]
 800689a:	4916      	ldr	r1, [pc, #88]	; (80068f4 <LCD_init+0xd4>)
 800689c:	5ccb      	ldrb	r3, [r1, r3]
 800689e:	4619      	mov	r1, r3
 80068a0:	4610      	mov	r0, r2
 80068a2:	f7ff fcbf 	bl	8006224 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	4a12      	ldr	r2, [pc, #72]	; (80068f4 <LCD_init+0xd4>)
 80068aa:	5cd3      	ldrb	r3, [r2, r3]
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	88fb      	ldrh	r3, [r7, #6]
 80068b0:	4413      	add	r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3302      	adds	r3, #2
 80068b6:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80068b8:	88fb      	ldrh	r3, [r7, #6]
 80068ba:	2b4b      	cmp	r3, #75	; 0x4b
 80068bc:	d9e8      	bls.n	8006890 <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 80068be:	2000      	movs	r0, #0
 80068c0:	f00c f99c 	bl	8012bfc <UG_FillScreen>
  LCD_setPower(ENABLE);
 80068c4:	2001      	movs	r0, #1
 80068c6:	f7ff ff8d 	bl	80067e4 <LCD_setPower>
  UG_Update();
 80068ca:	f00d fd9d 	bl	8014408 <UG_Update>
}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	48000400 	.word	0x48000400
 80068dc:	200001e8 	.word	0x200001e8
 80068e0:	20002378 	.word	0x20002378
 80068e4:	08006729 	.word	0x08006729
 80068e8:	08006611 	.word	0x08006611
 80068ec:	080065a1 	.word	0x080065a1
 80068f0:	0800667f 	.word	0x0800667f
 80068f4:	0801b7ac 	.word	0x0801b7ac

080068f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006902:	2003      	movs	r0, #3
 8006904:	f002 fc80 	bl	8009208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006908:	200f      	movs	r0, #15
 800690a:	f000 f80d 	bl	8006928 <HAL_InitTick>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	71fb      	strb	r3, [r7, #7]
 8006918:	e001      	b.n	800691e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800691a:	f7fe fdf5 	bl	8005508 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800691e:	79fb      	ldrb	r3, [r7, #7]

}
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006934:	4b16      	ldr	r3, [pc, #88]	; (8006990 <HAL_InitTick+0x68>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d022      	beq.n	8006982 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800693c:	4b15      	ldr	r3, [pc, #84]	; (8006994 <HAL_InitTick+0x6c>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	4b13      	ldr	r3, [pc, #76]	; (8006990 <HAL_InitTick+0x68>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006948:	fbb1 f3f3 	udiv	r3, r1, r3
 800694c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006950:	4618      	mov	r0, r3
 8006952:	f002 fc8c 	bl	800926e <HAL_SYSTICK_Config>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10f      	bne.n	800697c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b0f      	cmp	r3, #15
 8006960:	d809      	bhi.n	8006976 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006962:	2200      	movs	r2, #0
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	f04f 30ff 	mov.w	r0, #4294967295
 800696a:	f002 fc58 	bl	800921e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800696e:	4a0a      	ldr	r2, [pc, #40]	; (8006998 <HAL_InitTick+0x70>)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	e007      	b.n	8006986 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	73fb      	strb	r3, [r7, #15]
 800697a:	e004      	b.n	8006986 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
 8006980:	e001      	b.n	8006986 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006986:	7bfb      	ldrb	r3, [r7, #15]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	200001f8 	.word	0x200001f8
 8006994:	200001e0 	.word	0x200001e0
 8006998:	200001f4 	.word	0x200001f4

0800699c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069a0:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <HAL_IncTick+0x1c>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	4b05      	ldr	r3, [pc, #20]	; (80069bc <HAL_IncTick+0x20>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4413      	add	r3, r2
 80069aa:	4a03      	ldr	r2, [pc, #12]	; (80069b8 <HAL_IncTick+0x1c>)
 80069ac:	6013      	str	r3, [r2, #0]
}
 80069ae:	bf00      	nop
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	200023ec 	.word	0x200023ec
 80069bc:	200001f8 	.word	0x200001f8

080069c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  return uwTick;
 80069c4:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <HAL_GetTick+0x14>)
 80069c6:	681b      	ldr	r3, [r3, #0]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	200023ec 	.word	0x200023ec

080069d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069e0:	f7ff ffee 	bl	80069c0 <HAL_GetTick>
 80069e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d004      	beq.n	80069fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80069f2:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <HAL_Delay+0x40>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069fc:	bf00      	nop
 80069fe:	f7ff ffdf 	bl	80069c0 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d8f7      	bhi.n	80069fe <HAL_Delay+0x26>
  {
  }
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	200001f8 	.word	0x200001f8

08006a1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	609a      	str	r2, [r3, #8]
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	609a      	str	r2, [r3, #8]
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3360      	adds	r3, #96	; 0x60
 8006a96:	461a      	mov	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	4b08      	ldr	r3, [pc, #32]	; (8006ac8 <LL_ADC_SetOffset+0x44>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006abc:	bf00      	nop
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	03fff000 	.word	0x03fff000

08006acc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3360      	adds	r3, #96	; 0x60
 8006ada:	461a      	mov	r2, r3
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3360      	adds	r3, #96	; 0x60
 8006b08:	461a      	mov	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b087      	sub	sp, #28
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3360      	adds	r3, #96	; 0x60
 8006b3e:	461a      	mov	r2, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3360      	adds	r3, #96	; 0x60
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	615a      	str	r2, [r3, #20]
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b087      	sub	sp, #28
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3330      	adds	r3, #48	; 0x30
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	0a1b      	lsrs	r3, r3, #8
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	f003 030c 	and.w	r3, r3, #12
 8006c02:	4413      	add	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f003 031f 	and.w	r3, r3, #31
 8006c10:	211f      	movs	r1, #31
 8006c12:	fa01 f303 	lsl.w	r3, r1, r3
 8006c16:	43db      	mvns	r3, r3
 8006c18:	401a      	ands	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	0e9b      	lsrs	r3, r3, #26
 8006c1e:	f003 011f 	and.w	r1, r3, #31
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3314      	adds	r3, #20
 8006c74:	461a      	mov	r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	0e5b      	lsrs	r3, r3, #25
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	4413      	add	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	0d1b      	lsrs	r3, r3, #20
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	2107      	movs	r1, #7
 8006c92:	fa01 f303 	lsl.w	r3, r1, r3
 8006c96:	43db      	mvns	r3, r3
 8006c98:	401a      	ands	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	0d1b      	lsrs	r3, r3, #20
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
	...

08006cbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd4:	43db      	mvns	r3, r3
 8006cd6:	401a      	ands	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f003 0318 	and.w	r3, r3, #24
 8006cde:	4908      	ldr	r1, [pc, #32]	; (8006d00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006ce0:	40d9      	lsrs	r1, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	400b      	ands	r3, r1
 8006ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cea:	431a      	orrs	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006cf2:	bf00      	nop
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	0007ffff 	.word	0x0007ffff

08006d04 <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	330c      	adds	r3, #12
 8006d14:	4618      	mov	r0, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	0d1b      	lsrs	r3, r3, #20
 8006d1a:	f003 0103 	and.w	r1, r3, #3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f003 0201 	and.w	r2, r3, #1
 8006d24:	4613      	mov	r3, r2
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	440b      	add	r3, r1
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4403      	add	r3, r0
 8006d32:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8006d3e:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8006d42:	43db      	mvns	r3, r3
 8006d44:	401a      	ands	r2, r3
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	400b      	ands	r3, r1
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b087      	sub	sp, #28
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
 8006d6a:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3320      	adds	r3, #32
 8006d70:	461a      	mov	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	0d1b      	lsrs	r3, r3, #20
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	f003 030c 	and.w	r3, r3, #12
 8006d7c:	4413      	add	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	0419      	lsls	r1, r3, #16
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	430b      	orrs	r3, r1
 8006d90:	431a      	orrs	r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 031f 	and.w	r3, r3, #31
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006dea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	6093      	str	r3, [r2, #8]
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e12:	d101      	bne.n	8006e18 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006e36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e3a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e62:	d101      	bne.n	8006e68 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e8a:	f043 0201 	orr.w	r2, r3, #1
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006eb2:	f043 0202 	orr.w	r2, r3, #2
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <LL_ADC_IsEnabled+0x18>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <LL_ADC_IsEnabled+0x1a>
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d101      	bne.n	8006f04 <LL_ADC_IsDisableOngoing+0x18>
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <LL_ADC_IsDisableOngoing+0x1a>
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f26:	f043 0204 	orr.w	r2, r3, #4
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f4e:	f043 0210 	orr.w	r2, r3, #16
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 0304 	and.w	r3, r3, #4
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d101      	bne.n	8006f7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f9c:	f043 0220 	orr.w	r2, r3, #32
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d101      	bne.n	8006fc8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e000      	b.n	8006fca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2280      	movs	r2, #128	; 0x80
 8006fe2:	601a      	str	r2, [r3, #0]
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ffe:	601a      	str	r2, [r3, #0]
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800701a:	601a      	str	r2, [r3, #0]
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	605a      	str	r2, [r3, #4]
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	605a      	str	r2, [r3, #4]
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	605a      	str	r2, [r3, #4]
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	605a      	str	r2, [r3, #4]
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	605a      	str	r2, [r3, #4]
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	605a      	str	r2, [r3, #4]
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b089      	sub	sp, #36	; 0x24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e167      	b.n	80073d2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d109      	bne.n	8007124 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7fe fa1d 	bl	8005550 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff fe68 	bl	8006dfe <LL_ADC_IsDeepPowerDownEnabled>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d004      	beq.n	800713e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fe4e 	bl	8006dda <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff fe83 	bl	8006e4e <LL_ADC_IsInternalRegulatorEnabled>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d115      	bne.n	800717a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff fe67 	bl	8006e26 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007158:	4ba0      	ldr	r3, [pc, #640]	; (80073dc <HAL_ADC_Init+0x2f4>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	099b      	lsrs	r3, r3, #6
 800715e:	4aa0      	ldr	r2, [pc, #640]	; (80073e0 <HAL_ADC_Init+0x2f8>)
 8007160:	fba2 2303 	umull	r2, r3, r2, r3
 8007164:	099b      	lsrs	r3, r3, #6
 8007166:	3301      	adds	r3, #1
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800716c:	e002      	b.n	8007174 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3b01      	subs	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f9      	bne.n	800716e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff fe65 	bl	8006e4e <LL_ADC_IsInternalRegulatorEnabled>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10d      	bne.n	80071a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718e:	f043 0210 	orr.w	r2, r3, #16
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719a:	f043 0201 	orr.w	r2, r3, #1
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff fed9 	bl	8006f62 <LL_ADC_REG_IsConversionOngoing>
 80071b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f040 8100 	bne.w	80073c0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f040 80fc 	bne.w	80073c0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80071d0:	f043 0202 	orr.w	r2, r3, #2
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff fe72 	bl	8006ec6 <LL_ADC_IsEnabled>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d111      	bne.n	800720c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80071ec:	f7ff fe6b 	bl	8006ec6 <LL_ADC_IsEnabled>
 80071f0:	4604      	mov	r4, r0
 80071f2:	487c      	ldr	r0, [pc, #496]	; (80073e4 <HAL_ADC_Init+0x2fc>)
 80071f4:	f7ff fe67 	bl	8006ec6 <LL_ADC_IsEnabled>
 80071f8:	4603      	mov	r3, r0
 80071fa:	4323      	orrs	r3, r4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d105      	bne.n	800720c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	4619      	mov	r1, r3
 8007206:	4878      	ldr	r0, [pc, #480]	; (80073e8 <HAL_ADC_Init+0x300>)
 8007208:	f7ff fc08 	bl	8006a1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	7f5b      	ldrb	r3, [r3, #29]
 8007210:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007216:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800721c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007222:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800722a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800722c:	4313      	orrs	r3, r2
 800722e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007236:	2b01      	cmp	r3, #1
 8007238:	d106      	bne.n	8007248 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	3b01      	subs	r3, #1
 8007240:	045b      	lsls	r3, r3, #17
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	4313      	orrs	r3, r2
 8007246:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d009      	beq.n	8007264 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	4313      	orrs	r3, r2
 8007262:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	4b60      	ldr	r3, [pc, #384]	; (80073ec <HAL_ADC_Init+0x304>)
 800726c:	4013      	ands	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6812      	ldr	r2, [r2, #0]
 8007272:	69b9      	ldr	r1, [r7, #24]
 8007274:	430b      	orrs	r3, r1
 8007276:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff fe8c 	bl	8006fb0 <LL_ADC_INJ_IsConversionOngoing>
 8007298:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d16d      	bne.n	800737c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d16a      	bne.n	800737c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80072aa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072b2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80072b4:	4313      	orrs	r3, r2
 80072b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072c2:	f023 0302 	bic.w	r3, r3, #2
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	69b9      	ldr	r1, [r7, #24]
 80072cc:	430b      	orrs	r3, r1
 80072ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d017      	beq.n	8007308 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	691a      	ldr	r2, [r3, #16]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80072e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80072f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6911      	ldr	r1, [r2, #16]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	430b      	orrs	r3, r1
 8007302:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8007306:	e013      	b.n	8007330 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	691a      	ldr	r2, [r3, #16]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007316:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6812      	ldr	r2, [r2, #0]
 8007324:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800732c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007336:	2b01      	cmp	r3, #1
 8007338:	d118      	bne.n	800736c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007344:	f023 0304 	bic.w	r3, r3, #4
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007350:	4311      	orrs	r1, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007356:	4311      	orrs	r1, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800735c:	430a      	orrs	r2, r1
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f042 0201 	orr.w	r2, r2, #1
 8007368:	611a      	str	r2, [r3, #16]
 800736a:	e007      	b.n	800737c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691a      	ldr	r2, [r3, #16]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d10c      	bne.n	800739e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	f023 010f 	bic.w	r1, r3, #15
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	1e5a      	subs	r2, r3, #1
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	631a      	str	r2, [r3, #48]	; 0x30
 800739c:	e007      	b.n	80073ae <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 020f 	bic.w	r2, r2, #15
 80073ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b2:	f023 0303 	bic.w	r3, r3, #3
 80073b6:	f043 0201 	orr.w	r2, r3, #1
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80073be:	e007      	b.n	80073d0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c4:	f043 0210 	orr.w	r2, r3, #16
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80073d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3724      	adds	r7, #36	; 0x24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd90      	pop	{r4, r7, pc}
 80073da:	bf00      	nop
 80073dc:	200001e0 	.word	0x200001e0
 80073e0:	053e2d63 	.word	0x053e2d63
 80073e4:	50000100 	.word	0x50000100
 80073e8:	50000300 	.word	0x50000300
 80073ec:	fff04007 	.word	0xfff04007

080073f0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80073f8:	4893      	ldr	r0, [pc, #588]	; (8007648 <HAL_ADC_Start_IT+0x258>)
 80073fa:	f7ff fcd2 	bl	8006da2 <LL_ADC_GetMultimode>
 80073fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fdac 	bl	8006f62 <LL_ADC_REG_IsConversionOngoing>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	f040 8113 	bne.w	8007638 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007418:	2b01      	cmp	r3, #1
 800741a:	d101      	bne.n	8007420 <HAL_ADC_Start_IT+0x30>
 800741c:	2302      	movs	r3, #2
 800741e:	e10e      	b.n	800763e <HAL_ADC_Start_IT+0x24e>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f001 fb19 	bl	8008a60 <ADC_Enable>
 800742e:	4603      	mov	r3, r0
 8007430:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 80fa 	bne.w	800762e <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007442:	f023 0301 	bic.w	r3, r3, #1
 8007446:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a7e      	ldr	r2, [pc, #504]	; (800764c <HAL_ADC_Start_IT+0x25c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d002      	beq.n	800745e <HAL_ADC_Start_IT+0x6e>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	e001      	b.n	8007462 <HAL_ADC_Start_IT+0x72>
 800745e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	4293      	cmp	r3, r2
 8007468:	d002      	beq.n	8007470 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d105      	bne.n	800747c <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007474:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d006      	beq.n	8007496 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800748c:	f023 0206 	bic.w	r2, r3, #6
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	661a      	str	r2, [r3, #96]	; 0x60
 8007494:	e002      	b.n	800749c <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	221c      	movs	r2, #28
 80074a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 021c 	bic.w	r2, r2, #28
 80074ba:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d108      	bne.n	80074d6 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0208 	orr.w	r2, r2, #8
 80074d2:	605a      	str	r2, [r3, #4]
          break;
 80074d4:	e008      	b.n	80074e8 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f042 0204 	orr.w	r2, r2, #4
 80074e4:	605a      	str	r2, [r3, #4]
          break;
 80074e6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d107      	bne.n	8007500 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0210 	orr.w	r2, r2, #16
 80074fe:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a51      	ldr	r2, [pc, #324]	; (800764c <HAL_ADC_Start_IT+0x25c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d002      	beq.n	8007510 <HAL_ADC_Start_IT+0x120>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	e001      	b.n	8007514 <HAL_ADC_Start_IT+0x124>
 8007510:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6812      	ldr	r2, [r2, #0]
 8007518:	4293      	cmp	r3, r2
 800751a:	d008      	beq.n	800752e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2b05      	cmp	r3, #5
 8007526:	d002      	beq.n	800752e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	2b09      	cmp	r3, #9
 800752c:	d13a      	bne.n	80075a4 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d02d      	beq.n	8007598 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007540:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007544:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	2b08      	cmp	r3, #8
 8007552:	d110      	bne.n	8007576 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0220 	bic.w	r2, r2, #32
 8007562:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007572:	605a      	str	r2, [r3, #4]
              break;
 8007574:	e010      	b.n	8007598 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007584:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0220 	orr.w	r2, r2, #32
 8007594:	605a      	str	r2, [r3, #4]
              break;
 8007596:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff fcb8 	bl	8006f12 <LL_ADC_REG_StartConversion>
 80075a2:	e04b      	b.n	800763c <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a25      	ldr	r2, [pc, #148]	; (800764c <HAL_ADC_Start_IT+0x25c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d002      	beq.n	80075c0 <HAL_ADC_Start_IT+0x1d0>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	e001      	b.n	80075c4 <HAL_ADC_Start_IT+0x1d4>
 80075c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80075c4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d034      	beq.n	800763c <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80075da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	2b08      	cmp	r3, #8
 80075e8:	d110      	bne.n	800760c <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0220 	bic.w	r2, r2, #32
 80075f8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007608:	605a      	str	r2, [r3, #4]
              break;
 800760a:	e017      	b.n	800763c <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800761a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0220 	orr.w	r2, r2, #32
 800762a:	605a      	str	r2, [r3, #4]
              break;
 800762c:	e006      	b.n	800763c <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007636:	e001      	b.n	800763c <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007638:	2302      	movs	r3, #2
 800763a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800763c:	7dfb      	ldrb	r3, [r7, #23]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	50000300 	.word	0x50000300
 800764c:	50000100 	.word	0x50000100

08007650 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800765c:	4851      	ldr	r0, [pc, #324]	; (80077a4 <HAL_ADC_Start_DMA+0x154>)
 800765e:	f7ff fba0 	bl	8006da2 <LL_ADC_GetMultimode>
 8007662:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff fc7a 	bl	8006f62 <LL_ADC_REG_IsConversionOngoing>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	f040 808f 	bne.w	8007794 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_ADC_Start_DMA+0x34>
 8007680:	2302      	movs	r3, #2
 8007682:	e08a      	b.n	800779a <HAL_ADC_Start_DMA+0x14a>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b05      	cmp	r3, #5
 8007696:	d002      	beq.n	800769e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	2b09      	cmp	r3, #9
 800769c:	d173      	bne.n	8007786 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f001 f9de 	bl	8008a60 <ADC_Enable>
 80076a4:	4603      	mov	r3, r0
 80076a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d166      	bne.n	800777c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076b6:	f023 0301 	bic.w	r3, r3, #1
 80076ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a38      	ldr	r2, [pc, #224]	; (80077a8 <HAL_ADC_Start_DMA+0x158>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d002      	beq.n	80076d2 <HAL_ADC_Start_DMA+0x82>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	e001      	b.n	80076d6 <HAL_ADC_Start_DMA+0x86>
 80076d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	6812      	ldr	r2, [r2, #0]
 80076da:	4293      	cmp	r3, r2
 80076dc:	d002      	beq.n	80076e4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d006      	beq.n	800770a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007700:	f023 0206 	bic.w	r2, r3, #6
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	661a      	str	r2, [r3, #96]	; 0x60
 8007708:	e002      	b.n	8007710 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007714:	4a25      	ldr	r2, [pc, #148]	; (80077ac <HAL_ADC_Start_DMA+0x15c>)
 8007716:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771c:	4a24      	ldr	r2, [pc, #144]	; (80077b0 <HAL_ADC_Start_DMA+0x160>)
 800771e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007724:	4a23      	ldr	r2, [pc, #140]	; (80077b4 <HAL_ADC_Start_DMA+0x164>)
 8007726:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	221c      	movs	r2, #28
 800772e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0210 	orr.w	r2, r2, #16
 8007746:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0201 	orr.w	r2, r2, #1
 8007756:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3340      	adds	r3, #64	; 0x40
 8007762:	4619      	mov	r1, r3
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f002 f83c 	bl	80097e4 <HAL_DMA_Start_IT>
 800776c:	4603      	mov	r3, r0
 800776e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff fbcc 	bl	8006f12 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800777a:	e00d      	b.n	8007798 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8007784:	e008      	b.n	8007798 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007792:	e001      	b.n	8007798 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007794:	2302      	movs	r3, #2
 8007796:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007798:	7dfb      	ldrb	r3, [r7, #23]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	50000300 	.word	0x50000300
 80077a8:	50000100 	.word	0x50000100
 80077ac:	08008c2b 	.word	0x08008c2b
 80077b0:	08008d03 	.word	0x08008d03
 80077b4:	08008d1f 	.word	0x08008d1f

080077b8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <HAL_ADC_Stop_DMA+0x16>
 80077ca:	2302      	movs	r3, #2
 80077cc:	e051      	b.n	8007872 <HAL_ADC_Stop_DMA+0xba>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80077d6:	2103      	movs	r1, #3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 f885 	bl	80088e8 <ADC_ConversionStop>
 80077de:	4603      	mov	r3, r0
 80077e0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d13f      	bne.n	8007868 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0201 	bic.w	r2, r2, #1
 80077f6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b02      	cmp	r3, #2
 8007804:	d10f      	bne.n	8007826 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780a:	4618      	mov	r0, r3
 800780c:	f002 f865 	bl	80098da <HAL_DMA_Abort>
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 0210 	bic.w	r2, r2, #16
 8007834:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d105      	bne.n	8007848 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 f995 	bl	8008b6c <ADC_Disable>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
 8007846:	e002      	b.n	800784e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 f98f 	bl	8008b6c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d109      	bne.n	8007868 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007858:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800785c:	f023 0301 	bic.w	r3, r3, #1
 8007860:	f043 0201 	orr.w	r2, r3, #1
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007888:	4618      	mov	r0, r3
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08a      	sub	sp, #40	; 0x28
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800789c:	2300      	movs	r3, #0
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078b0:	4883      	ldr	r0, [pc, #524]	; (8007ac0 <HAL_ADC_IRQHandler+0x22c>)
 80078b2:	f7ff fa76 	bl	8006da2 <LL_ADC_GetMultimode>
 80078b6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d017      	beq.n	80078f2 <HAL_ADC_IRQHandler+0x5e>
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d012      	beq.n	80078f2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d0:	f003 0310 	and.w	r3, r3, #16
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d105      	bne.n	80078e4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078dc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 fb11 	bl	8008f0c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2202      	movs	r2, #2
 80078f0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <HAL_ADC_IRQHandler+0x72>
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 8085 	beq.w	8007a1c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d07f      	beq.n	8007a1c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff f941 	bl	8006bc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d064      	beq.n	8007a0e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a5e      	ldr	r2, [pc, #376]	; (8007ac4 <HAL_ADC_IRQHandler+0x230>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d002      	beq.n	8007954 <HAL_ADC_IRQHandler+0xc0>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	e001      	b.n	8007958 <HAL_ADC_IRQHandler+0xc4>
 8007954:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	6812      	ldr	r2, [r2, #0]
 800795c:	4293      	cmp	r3, r2
 800795e:	d008      	beq.n	8007972 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2b05      	cmp	r3, #5
 800796a:	d002      	beq.n	8007972 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b09      	cmp	r3, #9
 8007970:	d104      	bne.n	800797c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	623b      	str	r3, [r7, #32]
 800797a:	e00d      	b.n	8007998 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a50      	ldr	r2, [pc, #320]	; (8007ac4 <HAL_ADC_IRQHandler+0x230>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d002      	beq.n	800798c <HAL_ADC_IRQHandler+0xf8>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	e001      	b.n	8007990 <HAL_ADC_IRQHandler+0xfc>
 800798c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007990:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d135      	bne.n	8007a0e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0308 	and.w	r3, r3, #8
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d12e      	bne.n	8007a0e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff fad4 	bl	8006f62 <LL_ADC_REG_IsConversionOngoing>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d11a      	bne.n	80079f6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 020c 	bic.w	r2, r2, #12
 80079ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d112      	bne.n	8007a0e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ec:	f043 0201 	orr.w	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80079f4:	e00b      	b.n	8007a0e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079fa:	f043 0210 	orr.w	r2, r3, #16
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a06:	f043 0201 	orr.w	r2, r3, #1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fc f862 	bl	8003ad8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	220c      	movs	r2, #12
 8007a1a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d004      	beq.n	8007a30 <HAL_ADC_IRQHandler+0x19c>
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10b      	bne.n	8007a48 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 809e 	beq.w	8007b78 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8098 	beq.w	8007b78 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d105      	bne.n	8007a60 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a58:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff f8ea 	bl	8006c3e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007a6a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff f8a5 	bl	8006bc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007a76:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <HAL_ADC_IRQHandler+0x230>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d002      	beq.n	8007a88 <HAL_ADC_IRQHandler+0x1f4>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	e001      	b.n	8007a8c <HAL_ADC_IRQHandler+0x1f8>
 8007a88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6812      	ldr	r2, [r2, #0]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d008      	beq.n	8007aa6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b06      	cmp	r3, #6
 8007a9e:	d002      	beq.n	8007aa6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2b07      	cmp	r3, #7
 8007aa4:	d104      	bne.n	8007ab0 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	623b      	str	r3, [r7, #32]
 8007aae:	e011      	b.n	8007ad4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a03      	ldr	r2, [pc, #12]	; (8007ac4 <HAL_ADC_IRQHandler+0x230>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d006      	beq.n	8007ac8 <HAL_ADC_IRQHandler+0x234>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	e005      	b.n	8007acc <HAL_ADC_IRQHandler+0x238>
 8007ac0:	50000300 	.word	0x50000300
 8007ac4:	50000100 	.word	0x50000100
 8007ac8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007acc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d047      	beq.n	8007b6a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d007      	beq.n	8007af4 <HAL_ADC_IRQHandler+0x260>
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d03f      	beq.n	8007b6a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d13a      	bne.n	8007b6a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afe:	2b40      	cmp	r3, #64	; 0x40
 8007b00:	d133      	bne.n	8007b6a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d12e      	bne.n	8007b6a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff fa4d 	bl	8006fb0 <LL_ADC_INJ_IsConversionOngoing>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d11a      	bne.n	8007b52 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b2a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d112      	bne.n	8007b6a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b48:	f043 0201 	orr.w	r2, r3, #1
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b50:	e00b      	b.n	8007b6a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b56:	f043 0210 	orr.w	r2, r3, #16
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b62:	f043 0201 	orr.w	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f001 f9a6 	bl	8008ebc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2260      	movs	r2, #96	; 0x60
 8007b76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d011      	beq.n	8007ba6 <HAL_ADC_IRQHandler+0x312>
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00c      	beq.n	8007ba6 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7fb ffe7 	bl	8003b6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2280      	movs	r2, #128	; 0x80
 8007ba4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d012      	beq.n	8007bd6 <HAL_ADC_IRQHandler+0x342>
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00d      	beq.n	8007bd6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 f98c 	bl	8008ee4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d012      	beq.n	8007c06 <HAL_ADC_IRQHandler+0x372>
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00d      	beq.n	8007c06 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f001 f97e 	bl	8008ef8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d036      	beq.n	8007c7e <HAL_ADC_IRQHandler+0x3ea>
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f003 0310 	and.w	r3, r3, #16
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d031      	beq.n	8007c7e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d102      	bne.n	8007c28 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8007c22:	2301      	movs	r3, #1
 8007c24:	627b      	str	r3, [r7, #36]	; 0x24
 8007c26:	e014      	b.n	8007c52 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d008      	beq.n	8007c40 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007c2e:	4825      	ldr	r0, [pc, #148]	; (8007cc4 <HAL_ADC_IRQHandler+0x430>)
 8007c30:	f7ff f8c5 	bl	8006dbe <LL_ADC_GetMultiDMATransfer>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00b      	beq.n	8007c52 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c3e:	e008      	b.n	8007c52 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d10e      	bne.n	8007c76 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c68:	f043 0202 	orr.w	r2, r3, #2
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f833 	bl	8007cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2210      	movs	r2, #16
 8007c7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d018      	beq.n	8007cba <HAL_ADC_IRQHandler+0x426>
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d013      	beq.n	8007cba <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c96:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca2:	f043 0208 	orr.w	r2, r3, #8
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cb2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 f90b 	bl	8008ed0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007cba:	bf00      	nop
 8007cbc:	3728      	adds	r7, #40	; 0x28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	50000300 	.word	0x50000300

08007cc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b0b6      	sub	sp, #216	; 0xd8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_ADC_ConfigChannel+0x22>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e3c8      	b.n	80084a4 <HAL_ADC_ConfigChannel+0x7b4>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff f91f 	bl	8006f62 <LL_ADC_REG_IsConversionOngoing>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 83ad 	bne.w	8008486 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6818      	ldr	r0, [r3, #0]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	6859      	ldr	r1, [r3, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f7fe ff54 	bl	8006be6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff f90d 	bl	8006f62 <LL_ADC_REG_IsConversionOngoing>
 8007d48:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff f92d 	bl	8006fb0 <LL_ADC_INJ_IsConversionOngoing>
 8007d56:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007d5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f040 81d9 	bne.w	8008116 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007d64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f040 81d4 	bne.w	8008116 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d76:	d10f      	bne.n	8007d98 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2200      	movs	r2, #0
 8007d82:	4619      	mov	r1, r3
 8007d84:	f7fe ff6e 	bl	8006c64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe ff02 	bl	8006b9a <LL_ADC_SetSamplingTimeCommonConfig>
 8007d96:	e00e      	b.n	8007db6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	6819      	ldr	r1, [r3, #0]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	461a      	mov	r2, r3
 8007da6:	f7fe ff5d 	bl	8006c64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2100      	movs	r1, #0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe fef2 	bl	8006b9a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	695a      	ldr	r2, [r3, #20]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	08db      	lsrs	r3, r3, #3
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d022      	beq.n	8007e1e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	6919      	ldr	r1, [r3, #16]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007de8:	f7fe fe4c 	bl	8006a84 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	6919      	ldr	r1, [r3, #16]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f7fe fe98 	bl	8006b2e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d102      	bne.n	8007e14 <HAL_ADC_ConfigChannel+0x124>
 8007e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e12:	e000      	b.n	8007e16 <HAL_ADC_ConfigChannel+0x126>
 8007e14:	2300      	movs	r3, #0
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7fe fea4 	bl	8006b64 <LL_ADC_SetOffsetSaturation>
 8007e1c:	e17b      	b.n	8008116 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2100      	movs	r1, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe fe51 	bl	8006acc <LL_ADC_GetOffsetChannel>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <HAL_ADC_ConfigChannel+0x15a>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe fe46 	bl	8006acc <LL_ADC_GetOffsetChannel>
 8007e40:	4603      	mov	r3, r0
 8007e42:	0e9b      	lsrs	r3, r3, #26
 8007e44:	f003 021f 	and.w	r2, r3, #31
 8007e48:	e01e      	b.n	8007e88 <HAL_ADC_ConfigChannel+0x198>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fe fe3b 	bl	8006acc <LL_ADC_GetOffsetChannel>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e60:	fa93 f3a3 	rbit	r3, r3
 8007e64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007e70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8007e78:	2320      	movs	r3, #32
 8007e7a:	e004      	b.n	8007e86 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8007e7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e80:	fab3 f383 	clz	r3, r3
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d105      	bne.n	8007ea0 <HAL_ADC_ConfigChannel+0x1b0>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	0e9b      	lsrs	r3, r3, #26
 8007e9a:	f003 031f 	and.w	r3, r3, #31
 8007e9e:	e018      	b.n	8007ed2 <HAL_ADC_ConfigChannel+0x1e2>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007eac:	fa93 f3a3 	rbit	r3, r3
 8007eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007eb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007ebc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8007ec4:	2320      	movs	r3, #32
 8007ec6:	e004      	b.n	8007ed2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007ec8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ecc:	fab3 f383 	clz	r3, r3
 8007ed0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d106      	bne.n	8007ee4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fe0a 	bl	8006af8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2101      	movs	r1, #1
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe fdee 	bl	8006acc <LL_ADC_GetOffsetChannel>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10a      	bne.n	8007f10 <HAL_ADC_ConfigChannel+0x220>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2101      	movs	r1, #1
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fe fde3 	bl	8006acc <LL_ADC_GetOffsetChannel>
 8007f06:	4603      	mov	r3, r0
 8007f08:	0e9b      	lsrs	r3, r3, #26
 8007f0a:	f003 021f 	and.w	r2, r3, #31
 8007f0e:	e01e      	b.n	8007f4e <HAL_ADC_ConfigChannel+0x25e>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2101      	movs	r1, #1
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fdd8 	bl	8006acc <LL_ADC_GetOffsetChannel>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f26:	fa93 f3a3 	rbit	r3, r3
 8007f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007f36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8007f3e:	2320      	movs	r3, #32
 8007f40:	e004      	b.n	8007f4c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8007f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f46:	fab3 f383 	clz	r3, r3
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <HAL_ADC_ConfigChannel+0x276>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	0e9b      	lsrs	r3, r3, #26
 8007f60:	f003 031f 	and.w	r3, r3, #31
 8007f64:	e018      	b.n	8007f98 <HAL_ADC_ConfigChannel+0x2a8>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f72:	fa93 f3a3 	rbit	r3, r3
 8007f76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007f7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8007f8a:	2320      	movs	r3, #32
 8007f8c:	e004      	b.n	8007f98 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8007f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f92:	fab3 f383 	clz	r3, r3
 8007f96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d106      	bne.n	8007faa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fe fda7 	bl	8006af8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2102      	movs	r1, #2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe fd8b 	bl	8006acc <LL_ADC_GetOffsetChannel>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10a      	bne.n	8007fd6 <HAL_ADC_ConfigChannel+0x2e6>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2102      	movs	r1, #2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fe fd80 	bl	8006acc <LL_ADC_GetOffsetChannel>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	0e9b      	lsrs	r3, r3, #26
 8007fd0:	f003 021f 	and.w	r2, r3, #31
 8007fd4:	e01e      	b.n	8008014 <HAL_ADC_ConfigChannel+0x324>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2102      	movs	r1, #2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe fd75 	bl	8006acc <LL_ADC_GetOffsetChannel>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fec:	fa93 f3a3 	rbit	r3, r3
 8007ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8008004:	2320      	movs	r3, #32
 8008006:	e004      	b.n	8008012 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8008008:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800800c:	fab3 f383 	clz	r3, r3
 8008010:	b2db      	uxtb	r3, r3
 8008012:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800801c:	2b00      	cmp	r3, #0
 800801e:	d105      	bne.n	800802c <HAL_ADC_ConfigChannel+0x33c>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	0e9b      	lsrs	r3, r3, #26
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	e016      	b.n	800805a <HAL_ADC_ConfigChannel+0x36a>
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008034:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008038:	fa93 f3a3 	rbit	r3, r3
 800803c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800803e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800804c:	2320      	movs	r3, #32
 800804e:	e004      	b.n	800805a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8008050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008054:	fab3 f383 	clz	r3, r3
 8008058:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800805a:	429a      	cmp	r2, r3
 800805c:	d106      	bne.n	800806c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	2102      	movs	r1, #2
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fd46 	bl	8006af8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2103      	movs	r1, #3
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fd2a 	bl	8006acc <LL_ADC_GetOffsetChannel>
 8008078:	4603      	mov	r3, r0
 800807a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <HAL_ADC_ConfigChannel+0x3a8>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2103      	movs	r1, #3
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fd1f 	bl	8006acc <LL_ADC_GetOffsetChannel>
 800808e:	4603      	mov	r3, r0
 8008090:	0e9b      	lsrs	r3, r3, #26
 8008092:	f003 021f 	and.w	r2, r3, #31
 8008096:	e017      	b.n	80080c8 <HAL_ADC_ConfigChannel+0x3d8>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2103      	movs	r1, #3
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe fd14 	bl	8006acc <LL_ADC_GetOffsetChannel>
 80080a4:	4603      	mov	r3, r0
 80080a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080aa:	fa93 f3a3 	rbit	r3, r3
 80080ae:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80080b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080b2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80080b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80080ba:	2320      	movs	r3, #32
 80080bc:	e003      	b.n	80080c6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80080be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080c0:	fab3 f383 	clz	r3, r3
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d105      	bne.n	80080e0 <HAL_ADC_ConfigChannel+0x3f0>
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	0e9b      	lsrs	r3, r3, #26
 80080da:	f003 031f 	and.w	r3, r3, #31
 80080de:	e011      	b.n	8008104 <HAL_ADC_ConfigChannel+0x414>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080e8:	fa93 f3a3 	rbit	r3, r3
 80080ec:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80080ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80080f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80080f8:	2320      	movs	r3, #32
 80080fa:	e003      	b.n	8008104 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80080fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fe:	fab3 f383 	clz	r3, r3
 8008102:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008104:	429a      	cmp	r2, r3
 8008106:	d106      	bne.n	8008116 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2200      	movs	r2, #0
 800810e:	2103      	movs	r1, #3
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fcf1 	bl	8006af8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4618      	mov	r0, r3
 800811c:	f7fe fed3 	bl	8006ec6 <LL_ADC_IsEnabled>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	f040 8140 	bne.w	80083a8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	6819      	ldr	r1, [r3, #0]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	461a      	mov	r2, r3
 8008136:	f7fe fdc1 	bl	8006cbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	4a8f      	ldr	r2, [pc, #572]	; (800837c <HAL_ADC_ConfigChannel+0x68c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	f040 8131 	bne.w	80083a8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10b      	bne.n	800816e <HAL_ADC_ConfigChannel+0x47e>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	0e9b      	lsrs	r3, r3, #26
 800815c:	3301      	adds	r3, #1
 800815e:	f003 031f 	and.w	r3, r3, #31
 8008162:	2b09      	cmp	r3, #9
 8008164:	bf94      	ite	ls
 8008166:	2301      	movls	r3, #1
 8008168:	2300      	movhi	r3, #0
 800816a:	b2db      	uxtb	r3, r3
 800816c:	e019      	b.n	80081a2 <HAL_ADC_ConfigChannel+0x4b2>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008176:	fa93 f3a3 	rbit	r3, r3
 800817a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800817c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800817e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8008186:	2320      	movs	r3, #32
 8008188:	e003      	b.n	8008192 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800818a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800818c:	fab3 f383 	clz	r3, r3
 8008190:	b2db      	uxtb	r3, r3
 8008192:	3301      	adds	r3, #1
 8008194:	f003 031f 	and.w	r3, r3, #31
 8008198:	2b09      	cmp	r3, #9
 800819a:	bf94      	ite	ls
 800819c:	2301      	movls	r3, #1
 800819e:	2300      	movhi	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d079      	beq.n	800829a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d107      	bne.n	80081c2 <HAL_ADC_ConfigChannel+0x4d2>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	0e9b      	lsrs	r3, r3, #26
 80081b8:	3301      	adds	r3, #1
 80081ba:	069b      	lsls	r3, r3, #26
 80081bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80081c0:	e015      	b.n	80081ee <HAL_ADC_ConfigChannel+0x4fe>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ca:	fa93 f3a3 	rbit	r3, r3
 80081ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80081d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80081d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80081da:	2320      	movs	r3, #32
 80081dc:	e003      	b.n	80081e6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80081de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e0:	fab3 f383 	clz	r3, r3
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	3301      	adds	r3, #1
 80081e8:	069b      	lsls	r3, r3, #26
 80081ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d109      	bne.n	800820e <HAL_ADC_ConfigChannel+0x51e>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	0e9b      	lsrs	r3, r3, #26
 8008200:	3301      	adds	r3, #1
 8008202:	f003 031f 	and.w	r3, r3, #31
 8008206:	2101      	movs	r1, #1
 8008208:	fa01 f303 	lsl.w	r3, r1, r3
 800820c:	e017      	b.n	800823e <HAL_ADC_ConfigChannel+0x54e>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008216:	fa93 f3a3 	rbit	r3, r3
 800821a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800821c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8008226:	2320      	movs	r3, #32
 8008228:	e003      	b.n	8008232 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800822a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800822c:	fab3 f383 	clz	r3, r3
 8008230:	b2db      	uxtb	r3, r3
 8008232:	3301      	adds	r3, #1
 8008234:	f003 031f 	and.w	r3, r3, #31
 8008238:	2101      	movs	r1, #1
 800823a:	fa01 f303 	lsl.w	r3, r1, r3
 800823e:	ea42 0103 	orr.w	r1, r2, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10a      	bne.n	8008264 <HAL_ADC_ConfigChannel+0x574>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	0e9b      	lsrs	r3, r3, #26
 8008254:	3301      	adds	r3, #1
 8008256:	f003 021f 	and.w	r2, r3, #31
 800825a:	4613      	mov	r3, r2
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	4413      	add	r3, r2
 8008260:	051b      	lsls	r3, r3, #20
 8008262:	e018      	b.n	8008296 <HAL_ADC_ConfigChannel+0x5a6>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	fa93 f3a3 	rbit	r3, r3
 8008270:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008274:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800827c:	2320      	movs	r3, #32
 800827e:	e003      	b.n	8008288 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8008280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008282:	fab3 f383 	clz	r3, r3
 8008286:	b2db      	uxtb	r3, r3
 8008288:	3301      	adds	r3, #1
 800828a:	f003 021f 	and.w	r2, r3, #31
 800828e:	4613      	mov	r3, r2
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	4413      	add	r3, r2
 8008294:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008296:	430b      	orrs	r3, r1
 8008298:	e081      	b.n	800839e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d107      	bne.n	80082b6 <HAL_ADC_ConfigChannel+0x5c6>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	0e9b      	lsrs	r3, r3, #26
 80082ac:	3301      	adds	r3, #1
 80082ae:	069b      	lsls	r3, r3, #26
 80082b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80082b4:	e015      	b.n	80082e2 <HAL_ADC_ConfigChannel+0x5f2>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	fa93 f3a3 	rbit	r3, r3
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80082ce:	2320      	movs	r3, #32
 80082d0:	e003      	b.n	80082da <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	fab3 f383 	clz	r3, r3
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	3301      	adds	r3, #1
 80082dc:	069b      	lsls	r3, r3, #26
 80082de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d109      	bne.n	8008302 <HAL_ADC_ConfigChannel+0x612>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	0e9b      	lsrs	r3, r3, #26
 80082f4:	3301      	adds	r3, #1
 80082f6:	f003 031f 	and.w	r3, r3, #31
 80082fa:	2101      	movs	r1, #1
 80082fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008300:	e017      	b.n	8008332 <HAL_ADC_ConfigChannel+0x642>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	fa93 f3a3 	rbit	r3, r3
 800830e:	61fb      	str	r3, [r7, #28]
  return result;
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800831a:	2320      	movs	r3, #32
 800831c:	e003      	b.n	8008326 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	fab3 f383 	clz	r3, r3
 8008324:	b2db      	uxtb	r3, r3
 8008326:	3301      	adds	r3, #1
 8008328:	f003 031f 	and.w	r3, r3, #31
 800832c:	2101      	movs	r1, #1
 800832e:	fa01 f303 	lsl.w	r3, r1, r3
 8008332:	ea42 0103 	orr.w	r1, r2, r3
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10d      	bne.n	800835e <HAL_ADC_ConfigChannel+0x66e>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	0e9b      	lsrs	r3, r3, #26
 8008348:	3301      	adds	r3, #1
 800834a:	f003 021f 	and.w	r2, r3, #31
 800834e:	4613      	mov	r3, r2
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	4413      	add	r3, r2
 8008354:	3b1e      	subs	r3, #30
 8008356:	051b      	lsls	r3, r3, #20
 8008358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800835c:	e01e      	b.n	800839c <HAL_ADC_ConfigChannel+0x6ac>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	fa93 f3a3 	rbit	r3, r3
 800836a:	613b      	str	r3, [r7, #16]
  return result;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d104      	bne.n	8008380 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8008376:	2320      	movs	r3, #32
 8008378:	e006      	b.n	8008388 <HAL_ADC_ConfigChannel+0x698>
 800837a:	bf00      	nop
 800837c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	fab3 f383 	clz	r3, r3
 8008386:	b2db      	uxtb	r3, r3
 8008388:	3301      	adds	r3, #1
 800838a:	f003 021f 	and.w	r2, r3, #31
 800838e:	4613      	mov	r3, r2
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	4413      	add	r3, r2
 8008394:	3b1e      	subs	r3, #30
 8008396:	051b      	lsls	r3, r3, #20
 8008398:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800839c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083a2:	4619      	mov	r1, r3
 80083a4:	f7fe fc5e 	bl	8006c64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	4b3f      	ldr	r3, [pc, #252]	; (80084ac <HAL_ADC_ConfigChannel+0x7bc>)
 80083ae:	4013      	ands	r3, r2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d071      	beq.n	8008498 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80083b4:	483e      	ldr	r0, [pc, #248]	; (80084b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80083b6:	f7fe fb57 	bl	8006a68 <LL_ADC_GetCommonPathInternalCh>
 80083ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a3c      	ldr	r2, [pc, #240]	; (80084b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <HAL_ADC_ConfigChannel+0x6e2>
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a3a      	ldr	r2, [pc, #232]	; (80084b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d127      	bne.n	8008422 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80083d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d121      	bne.n	8008422 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083e6:	d157      	bne.n	8008498 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80083e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083f0:	4619      	mov	r1, r3
 80083f2:	482f      	ldr	r0, [pc, #188]	; (80084b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80083f4:	f7fe fb25 	bl	8006a42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80083f8:	4b30      	ldr	r3, [pc, #192]	; (80084bc <HAL_ADC_ConfigChannel+0x7cc>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	099b      	lsrs	r3, r3, #6
 80083fe:	4a30      	ldr	r2, [pc, #192]	; (80084c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8008400:	fba2 2303 	umull	r2, r3, r2, r3
 8008404:	099b      	lsrs	r3, r3, #6
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	4613      	mov	r3, r2
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008412:	e002      	b.n	800841a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3b01      	subs	r3, #1
 8008418:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1f9      	bne.n	8008414 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008420:	e03a      	b.n	8008498 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a27      	ldr	r2, [pc, #156]	; (80084c4 <HAL_ADC_ConfigChannel+0x7d4>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d113      	bne.n	8008454 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800842c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10d      	bne.n	8008454 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a22      	ldr	r2, [pc, #136]	; (80084c8 <HAL_ADC_ConfigChannel+0x7d8>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d02a      	beq.n	8008498 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008442:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800844a:	4619      	mov	r1, r3
 800844c:	4818      	ldr	r0, [pc, #96]	; (80084b0 <HAL_ADC_ConfigChannel+0x7c0>)
 800844e:	f7fe faf8 	bl	8006a42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008452:	e021      	b.n	8008498 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a1c      	ldr	r2, [pc, #112]	; (80084cc <HAL_ADC_ConfigChannel+0x7dc>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d11c      	bne.n	8008498 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800845e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d116      	bne.n	8008498 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a16      	ldr	r2, [pc, #88]	; (80084c8 <HAL_ADC_ConfigChannel+0x7d8>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d011      	beq.n	8008498 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008474:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008478:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800847c:	4619      	mov	r1, r3
 800847e:	480c      	ldr	r0, [pc, #48]	; (80084b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8008480:	f7fe fadf 	bl	8006a42 <LL_ADC_SetCommonPathInternalCh>
 8008484:	e008      	b.n	8008498 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800848a:	f043 0220 	orr.w	r2, r3, #32
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80084a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	37d8      	adds	r7, #216	; 0xd8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	80080000 	.word	0x80080000
 80084b0:	50000300 	.word	0x50000300
 80084b4:	c3210000 	.word	0xc3210000
 80084b8:	90c00010 	.word	0x90c00010
 80084bc:	200001e0 	.word	0x200001e0
 80084c0:	053e2d63 	.word	0x053e2d63
 80084c4:	c7520000 	.word	0xc7520000
 80084c8:	50000100 	.word	0x50000100
 80084cc:	cb840000 	.word	0xcb840000

080084d0 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b08e      	sub	sp, #56	; 0x38
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084e8:	d003      	beq.n	80084f2 <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80084ee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_ADC_AnalogWDGConfig+0x30>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e1ea      	b.n	80088d6 <HAL_ADC_AnalogWDGConfig+0x406>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe fd28 	bl	8006f62 <LL_ADC_REG_IsConversionOngoing>
 8008512:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe fd49 	bl	8006fb0 <LL_ADC_INJ_IsConversionOngoing>
 800851e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	2b00      	cmp	r3, #0
 8008524:	f040 8175 	bne.w	8008812 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	2b00      	cmp	r3, #0
 800852c:	f040 8171 	bne.w	8008812 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a90      	ldr	r2, [pc, #576]	; (8008778 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008536:	4293      	cmp	r3, r2
 8008538:	f040 808d 	bne.w	8008656 <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8008544:	d034      	beq.n	80085b0 <HAL_ADC_AnalogWDGConfig+0xe0>
 8008546:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800854a:	d856      	bhi.n	80085fa <HAL_ADC_AnalogWDGConfig+0x12a>
 800854c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008550:	d04b      	beq.n	80085ea <HAL_ADC_AnalogWDGConfig+0x11a>
 8008552:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008556:	d850      	bhi.n	80085fa <HAL_ADC_AnalogWDGConfig+0x12a>
 8008558:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800855c:	d01b      	beq.n	8008596 <HAL_ADC_AnalogWDGConfig+0xc6>
 800855e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008562:	d84a      	bhi.n	80085fa <HAL_ADC_AnalogWDGConfig+0x12a>
 8008564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008568:	d037      	beq.n	80085da <HAL_ADC_AnalogWDGConfig+0x10a>
 800856a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800856e:	d844      	bhi.n	80085fa <HAL_ADC_AnalogWDGConfig+0x12a>
 8008570:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008574:	d029      	beq.n	80085ca <HAL_ADC_AnalogWDGConfig+0xfa>
 8008576:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800857a:	d13e      	bne.n	80085fa <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8008588:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800858c:	461a      	mov	r2, r3
 800858e:	497a      	ldr	r1, [pc, #488]	; (8008778 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008590:	f7fe fbb8 	bl	8006d04 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8008594:	e039      	b.n	800860a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80085a2:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 80085a6:	461a      	mov	r2, r3
 80085a8:	4973      	ldr	r1, [pc, #460]	; (8008778 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80085aa:	f7fe fbab 	bl	8006d04 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 80085ae:	e02c      	b.n	800860a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80085bc:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 80085c0:	461a      	mov	r2, r3
 80085c2:	496d      	ldr	r1, [pc, #436]	; (8008778 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80085c4:	f7fe fb9e 	bl	8006d04 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80085c8:	e01f      	b.n	800860a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a6b      	ldr	r2, [pc, #428]	; (800877c <HAL_ADC_AnalogWDGConfig+0x2ac>)
 80085d0:	4969      	ldr	r1, [pc, #420]	; (8008778 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fb96 	bl	8006d04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80085d8:	e017      	b.n	800860a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a68      	ldr	r2, [pc, #416]	; (8008780 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 80085e0:	4965      	ldr	r1, [pc, #404]	; (8008778 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe fb8e 	bl	8006d04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80085e8:	e00f      	b.n	800860a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a65      	ldr	r2, [pc, #404]	; (8008784 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80085f0:	4961      	ldr	r1, [pc, #388]	; (8008778 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fb86 	bl	8006d04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80085f8:	e007      	b.n	800860a <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2200      	movs	r2, #0
 8008600:	495d      	ldr	r1, [pc, #372]	; (8008778 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008602:	4618      	mov	r0, r3
 8008604:	f7fe fb7e 	bl	8006d04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008608:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	430a      	orrs	r2, r1
 800861e:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008624:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4618      	mov	r0, r3
 8008632:	f7fe fcd0 	bl	8006fd6 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	7b1b      	ldrb	r3, [r3, #12]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d105      	bne.n	800864a <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fcf0 	bl	8007028 <LL_ADC_EnableIT_AWD1>
 8008648:	e0e3      	b.n	8008812 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fd1a 	bl	8007088 <LL_ADC_DisableIT_AWD1>
 8008654:	e0dd      	b.n	8008812 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800865e:	d01d      	beq.n	800869c <HAL_ADC_AnalogWDGConfig+0x1cc>
 8008660:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8008664:	f200 8092 	bhi.w	800878c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8008668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800866c:	d07b      	beq.n	8008766 <HAL_ADC_AnalogWDGConfig+0x296>
 800866e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008672:	f200 808b 	bhi.w	800878c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8008676:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800867a:	d00f      	beq.n	800869c <HAL_ADC_AnalogWDGConfig+0x1cc>
 800867c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008680:	f200 8084 	bhi.w	800878c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8008684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008688:	d06d      	beq.n	8008766 <HAL_ADC_AnalogWDGConfig+0x296>
 800868a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800868e:	d87d      	bhi.n	800878c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8008690:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008694:	d067      	beq.n	8008766 <HAL_ADC_AnalogWDGConfig+0x296>
 8008696:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800869a:	d177      	bne.n	800878c <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a39      	ldr	r2, [pc, #228]	; (8008788 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d12f      	bne.n	8008706 <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d108      	bne.n	80086c4 <HAL_ADC_AnalogWDGConfig+0x1f4>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	0e9b      	lsrs	r3, r3, #26
 80086b8:	f003 031f 	and.w	r3, r3, #31
 80086bc:	2201      	movs	r2, #1
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	e016      	b.n	80086f2 <HAL_ADC_AnalogWDGConfig+0x222>
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	fa93 f3a3 	rbit	r3, r3
 80086d0:	61bb      	str	r3, [r7, #24]
  return result;
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 80086dc:	2320      	movs	r3, #32
 80086de:	e003      	b.n	80086e8 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	fab3 f383 	clz	r3, r3
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	f003 031f 	and.w	r3, r3, #31
 80086ec:	2201      	movs	r2, #1
 80086ee:	fa02 f303 	lsl.w	r3, r2, r3
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6812      	ldr	r2, [r2, #0]
 80086f6:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6812      	ldr	r2, [r2, #0]
 80086fe:	430b      	orrs	r3, r1
 8008700:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8008704:	e04b      	b.n	800879e <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800870e:	2b00      	cmp	r3, #0
 8008710:	d108      	bne.n	8008724 <HAL_ADC_AnalogWDGConfig+0x254>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	0e9b      	lsrs	r3, r3, #26
 8008718:	f003 031f 	and.w	r3, r3, #31
 800871c:	2201      	movs	r2, #1
 800871e:	fa02 f303 	lsl.w	r3, r2, r3
 8008722:	e016      	b.n	8008752 <HAL_ADC_AnalogWDGConfig+0x282>
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	fa93 f3a3 	rbit	r3, r3
 8008730:	60fb      	str	r3, [r7, #12]
  return result;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 800873c:	2320      	movs	r3, #32
 800873e:	e003      	b.n	8008748 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	fab3 f383 	clz	r3, r3
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f003 031f 	and.w	r3, r3, #31
 800874c:	2201      	movs	r2, #1
 800874e:	fa02 f303 	lsl.w	r3, r2, r3
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	430b      	orrs	r3, r1
 8008760:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8008764:	e01b      	b.n	800879e <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800876e:	4a05      	ldr	r2, [pc, #20]	; (8008784 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8008770:	4619      	mov	r1, r3
 8008772:	f7fe fac7 	bl	8006d04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008776:	e012      	b.n	800879e <HAL_ADC_AnalogWDGConfig+0x2ce>
 8008778:	7dc00000 	.word	0x7dc00000
 800877c:	0087ffff 	.word	0x0087ffff
 8008780:	0107ffff 	.word	0x0107ffff
 8008784:	0187ffff 	.word	0x0187ffff
 8008788:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2200      	movs	r2, #0
 8008796:	4619      	mov	r1, r3
 8008798:	f7fe fab4 	bl	8006d04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800879c:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a4f      	ldr	r2, [pc, #316]	; (80088e0 <HAL_ADC_AnalogWDGConfig+0x410>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d11a      	bne.n	80087de <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ac:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe fc19 	bl	8006ff0 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	7b1b      	ldrb	r3, [r3, #12]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d105      	bne.n	80087d2 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fc3c 	bl	8007048 <LL_ADC_EnableIT_AWD2>
 80087d0:	e01f      	b.n	8008812 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe fc66 	bl	80070a8 <LL_ADC_DisableIT_AWD2>
 80087dc:	e019      	b.n	8008812 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fe fc0c 	bl	800700c <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	7b1b      	ldrb	r3, [r3, #12]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d105      	bne.n	8008808 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f7fe fc31 	bl	8007068 <LL_ADC_EnableIT_AWD3>
 8008806:	e004      	b.n	8008812 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe fc5b 	bl	80070c8 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a33      	ldr	r2, [pc, #204]	; (80088e4 <HAL_ADC_AnalogWDGConfig+0x414>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d118      	bne.n	800884e <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	08db      	lsrs	r3, r3, #3
 8008828:	f003 0303 	and.w	r3, r3, #3
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	fa02 f303 	lsl.w	r3, r2, r3
 8008832:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	695a      	ldr	r2, [r3, #20]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	08db      	lsrs	r3, r3, #3
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	fa02 f303 	lsl.w	r3, r2, r3
 800884a:	633b      	str	r3, [r7, #48]	; 0x30
 800884c:	e035      	b.n	80088ba <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f003 0318 	and.w	r3, r3, #24
 8008858:	2b18      	cmp	r3, #24
 800885a:	d00f      	beq.n	800887c <HAL_ADC_AnalogWDGConfig+0x3ac>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	691a      	ldr	r2, [r3, #16]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	08db      	lsrs	r3, r3, #3
 8008868:	f003 0303 	and.w	r3, r3, #3
 800886c:	f1c3 0302 	rsb	r3, r3, #2
 8008870:	005b      	lsls	r3, r3, #1
 8008872:	f003 031e 	and.w	r3, r3, #30
 8008876:	fa22 f303 	lsr.w	r3, r2, r3
 800887a:	e002      	b.n	8008882 <HAL_ADC_AnalogWDGConfig+0x3b2>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	f003 0318 	and.w	r3, r3, #24
 800888e:	2b18      	cmp	r3, #24
 8008890:	d00f      	beq.n	80088b2 <HAL_ADC_AnalogWDGConfig+0x3e2>
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	695a      	ldr	r2, [r3, #20]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	08db      	lsrs	r3, r3, #3
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	f1c3 0302 	rsb	r3, r3, #2
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	f003 031e 	and.w	r3, r3, #30
 80088ac:	fa22 f303 	lsr.w	r3, r2, r3
 80088b0:	e002      	b.n	80088b8 <HAL_ADC_AnalogWDGConfig+0x3e8>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	6819      	ldr	r1, [r3, #0]
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088c6:	f7fe fa4a 	bl	8006d5e <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80088d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3738      	adds	r7, #56	; 0x38
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	0017ffff 	.word	0x0017ffff
 80088e4:	7dc00000 	.word	0x7dc00000

080088e8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80088f2:	2300      	movs	r3, #0
 80088f4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe fb2f 	bl	8006f62 <LL_ADC_REG_IsConversionOngoing>
 8008904:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fb50 	bl	8006fb0 <LL_ADC_INJ_IsConversionOngoing>
 8008910:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d103      	bne.n	8008920 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 8098 	beq.w	8008a50 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d02a      	beq.n	8008984 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	7f5b      	ldrb	r3, [r3, #29]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d126      	bne.n	8008984 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	7f1b      	ldrb	r3, [r3, #28]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d122      	bne.n	8008984 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800893e:	2301      	movs	r3, #1
 8008940:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008942:	e014      	b.n	800896e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	4a45      	ldr	r2, [pc, #276]	; (8008a5c <ADC_ConversionStop+0x174>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d90d      	bls.n	8008968 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008950:	f043 0210 	orr.w	r2, r3, #16
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800895c:	f043 0201 	orr.w	r2, r3, #1
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e074      	b.n	8008a52 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	3301      	adds	r3, #1
 800896c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008978:	2b40      	cmp	r3, #64	; 0x40
 800897a:	d1e3      	bne.n	8008944 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2240      	movs	r2, #64	; 0x40
 8008982:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	2b02      	cmp	r3, #2
 8008988:	d014      	beq.n	80089b4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fae7 	bl	8006f62 <LL_ADC_REG_IsConversionOngoing>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00c      	beq.n	80089b4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe faa4 	bl	8006eec <LL_ADC_IsDisableOngoing>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d104      	bne.n	80089b4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fac3 	bl	8006f3a <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d014      	beq.n	80089e4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe faf6 	bl	8006fb0 <LL_ADC_INJ_IsConversionOngoing>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00c      	beq.n	80089e4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fa8c 	bl	8006eec <LL_ADC_IsDisableOngoing>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d104      	bne.n	80089e4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe fad2 	bl	8006f88 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d005      	beq.n	80089f6 <ADC_ConversionStop+0x10e>
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d105      	bne.n	80089fc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80089f0:	230c      	movs	r3, #12
 80089f2:	617b      	str	r3, [r7, #20]
        break;
 80089f4:	e005      	b.n	8008a02 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80089f6:	2308      	movs	r3, #8
 80089f8:	617b      	str	r3, [r7, #20]
        break;
 80089fa:	e002      	b.n	8008a02 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80089fc:	2304      	movs	r3, #4
 80089fe:	617b      	str	r3, [r7, #20]
        break;
 8008a00:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008a02:	f7fd ffdd 	bl	80069c0 <HAL_GetTick>
 8008a06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008a08:	e01b      	b.n	8008a42 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008a0a:	f7fd ffd9 	bl	80069c0 <HAL_GetTick>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	2b05      	cmp	r3, #5
 8008a16:	d914      	bls.n	8008a42 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689a      	ldr	r2, [r3, #8]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	4013      	ands	r3, r2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00d      	beq.n	8008a42 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a2a:	f043 0210 	orr.w	r2, r3, #16
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a36:	f043 0201 	orr.w	r2, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e007      	b.n	8008a52 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1dc      	bne.n	8008a0a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3720      	adds	r7, #32
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	a33fffff 	.word	0xa33fffff

08008a60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fe fa28 	bl	8006ec6 <LL_ADC_IsEnabled>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d169      	bne.n	8008b50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	4b36      	ldr	r3, [pc, #216]	; (8008b5c <ADC_Enable+0xfc>)
 8008a84:	4013      	ands	r3, r2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00d      	beq.n	8008aa6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a8e:	f043 0210 	orr.w	r2, r3, #16
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a9a:	f043 0201 	orr.w	r2, r3, #1
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e055      	b.n	8008b52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe f9e3 	bl	8006e76 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008ab0:	482b      	ldr	r0, [pc, #172]	; (8008b60 <ADC_Enable+0x100>)
 8008ab2:	f7fd ffd9 	bl	8006a68 <LL_ADC_GetCommonPathInternalCh>
 8008ab6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d013      	beq.n	8008ae8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008ac0:	4b28      	ldr	r3, [pc, #160]	; (8008b64 <ADC_Enable+0x104>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	099b      	lsrs	r3, r3, #6
 8008ac6:	4a28      	ldr	r2, [pc, #160]	; (8008b68 <ADC_Enable+0x108>)
 8008ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8008acc:	099b      	lsrs	r3, r3, #6
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	4413      	add	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008ada:	e002      	b.n	8008ae2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1f9      	bne.n	8008adc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008ae8:	f7fd ff6a 	bl	80069c0 <HAL_GetTick>
 8008aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008aee:	e028      	b.n	8008b42 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe f9e6 	bl	8006ec6 <LL_ADC_IsEnabled>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d104      	bne.n	8008b0a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fe f9b6 	bl	8006e76 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008b0a:	f7fd ff59 	bl	80069c0 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d914      	bls.n	8008b42 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d00d      	beq.n	8008b42 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b2a:	f043 0210 	orr.w	r2, r3, #16
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b36:	f043 0201 	orr.w	r2, r3, #1
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e007      	b.n	8008b52 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d1cf      	bne.n	8008af0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	8000003f 	.word	0x8000003f
 8008b60:	50000300 	.word	0x50000300
 8008b64:	200001e0 	.word	0x200001e0
 8008b68:	053e2d63 	.word	0x053e2d63

08008b6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe f9b7 	bl	8006eec <LL_ADC_IsDisableOngoing>
 8008b7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe f99e 	bl	8006ec6 <LL_ADC_IsEnabled>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d047      	beq.n	8008c20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d144      	bne.n	8008c20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f003 030d 	and.w	r3, r3, #13
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d10c      	bne.n	8008bbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe f978 	bl	8006e9e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008bb6:	f7fd ff03 	bl	80069c0 <HAL_GetTick>
 8008bba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008bbc:	e029      	b.n	8008c12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bc2:	f043 0210 	orr.w	r2, r3, #16
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bce:	f043 0201 	orr.w	r2, r3, #1
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e023      	b.n	8008c22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008bda:	f7fd fef1 	bl	80069c0 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d914      	bls.n	8008c12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00d      	beq.n	8008c12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bfa:	f043 0210 	orr.w	r2, r3, #16
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c06:	f043 0201 	orr.w	r2, r3, #1
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e007      	b.n	8008c22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1dc      	bne.n	8008bda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d14b      	bne.n	8008cdc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d021      	beq.n	8008ca2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fd ffac 	bl	8006bc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d032      	beq.n	8008cd4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d12b      	bne.n	8008cd4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d11f      	bne.n	8008cd4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c98:	f043 0201 	orr.w	r2, r3, #1
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ca0:	e018      	b.n	8008cd4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d111      	bne.n	8008cd4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d105      	bne.n	8008cd4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ccc:	f043 0201 	orr.w	r2, r3, #1
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f7fa feff 	bl	8003ad8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008cda:	e00e      	b.n	8008cfa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce0:	f003 0310 	and.w	r3, r3, #16
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7fe fff7 	bl	8007cdc <HAL_ADC_ErrorCallback>
}
 8008cee:	e004      	b.n	8008cfa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	4798      	blx	r3
}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f7fe ffd9 	bl	8007cc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008d16:	bf00      	nop
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d3c:	f043 0204 	orr.w	r2, r3, #4
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f7fe ffc9 	bl	8007cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008d4a:	bf00      	nop
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <LL_ADC_IsEnabled>:
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d101      	bne.n	8008d6a <LL_ADC_IsEnabled+0x18>
 8008d66:	2301      	movs	r3, #1
 8008d68:	e000      	b.n	8008d6c <LL_ADC_IsEnabled+0x1a>
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <LL_ADC_StartCalibration>:
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008d8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008d94:	4313      	orrs	r3, r2
 8008d96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	609a      	str	r2, [r3, #8]
}
 8008d9e:	bf00      	nop
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <LL_ADC_IsCalibrationOnGoing>:
{
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dbe:	d101      	bne.n	8008dc4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e000      	b.n	8008dc6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <LL_ADC_REG_IsConversionOngoing>:
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f003 0304 	and.w	r3, r3, #4
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d101      	bne.n	8008dea <LL_ADC_REG_IsConversionOngoing+0x18>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <HAL_ADCEx_Calibration_Start+0x1c>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e04d      	b.n	8008eb0 <HAL_ADCEx_Calibration_Start+0xb8>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff fea5 	bl	8008b6c <ADC_Disable>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d136      	bne.n	8008e9a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e34:	f023 0302 	bic.w	r3, r3, #2
 8008e38:	f043 0202 	orr.w	r2, r3, #2
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff ff96 	bl	8008d78 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008e4c:	e014      	b.n	8008e78 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	3301      	adds	r3, #1
 8008e52:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	4a18      	ldr	r2, [pc, #96]	; (8008eb8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d90d      	bls.n	8008e78 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e60:	f023 0312 	bic.w	r3, r3, #18
 8008e64:	f043 0210 	orr.w	r2, r3, #16
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e01b      	b.n	8008eb0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff ff94 	bl	8008daa <LL_ADC_IsCalibrationOnGoing>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e2      	bne.n	8008e4e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e8c:	f023 0303 	bic.w	r3, r3, #3
 8008e90:	f043 0201 	orr.w	r2, r3, #1
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	65da      	str	r2, [r3, #92]	; 0x5c
 8008e98:	e005      	b.n	8008ea6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e9e:	f043 0210 	orr.w	r2, r3, #16
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	0004de01 	.word	0x0004de01

08008ebc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008f20:	b590      	push	{r4, r7, lr}
 8008f22:	b0a1      	sub	sp, #132	; 0x84
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e08b      	b.n	8009056 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008f46:	2300      	movs	r3, #0
 8008f48:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f56:	d102      	bne.n	8008f5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008f58:	4b41      	ldr	r3, [pc, #260]	; (8009060 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008f5a:	60bb      	str	r3, [r7, #8]
 8008f5c:	e001      	b.n	8008f62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10b      	bne.n	8008f80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f6c:	f043 0220 	orr.w	r2, r3, #32
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e06a      	b.n	8009056 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff ff25 	bl	8008dd2 <LL_ADC_REG_IsConversionOngoing>
 8008f88:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7ff ff1f 	bl	8008dd2 <LL_ADC_REG_IsConversionOngoing>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d14c      	bne.n	8009034 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d149      	bne.n	8009034 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008fa0:	4b30      	ldr	r3, [pc, #192]	; (8009064 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8008fa2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d028      	beq.n	8008ffe <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	6859      	ldr	r1, [r3, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008fbe:	035b      	lsls	r3, r3, #13
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	431a      	orrs	r2, r3
 8008fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008fc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008fcc:	f7ff fec1 	bl	8008d52 <LL_ADC_IsEnabled>
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	4823      	ldr	r0, [pc, #140]	; (8009060 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008fd4:	f7ff febd 	bl	8008d52 <LL_ADC_IsEnabled>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	4323      	orrs	r3, r4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d133      	bne.n	8009048 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008fe8:	f023 030f 	bic.w	r3, r3, #15
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	6811      	ldr	r1, [r2, #0]
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	6892      	ldr	r2, [r2, #8]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ffa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008ffc:	e024      	b.n	8009048 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009008:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800900a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800900e:	f7ff fea0 	bl	8008d52 <LL_ADC_IsEnabled>
 8009012:	4604      	mov	r4, r0
 8009014:	4812      	ldr	r0, [pc, #72]	; (8009060 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8009016:	f7ff fe9c 	bl	8008d52 <LL_ADC_IsEnabled>
 800901a:	4603      	mov	r3, r0
 800901c:	4323      	orrs	r3, r4
 800901e:	2b00      	cmp	r3, #0
 8009020:	d112      	bne.n	8009048 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800902a:	f023 030f 	bic.w	r3, r3, #15
 800902e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009030:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009032:	e009      	b.n	8009048 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009038:	f043 0220 	orr.w	r2, r3, #32
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009046:	e000      	b.n	800904a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009048:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009052:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009056:	4618      	mov	r0, r3
 8009058:	3784      	adds	r7, #132	; 0x84
 800905a:	46bd      	mov	sp, r7
 800905c:	bd90      	pop	{r4, r7, pc}
 800905e:	bf00      	nop
 8009060:	50000100 	.word	0x50000100
 8009064:	50000300 	.word	0x50000300

08009068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f003 0307 	and.w	r3, r3, #7
 8009076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009078:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <__NVIC_SetPriorityGrouping+0x44>)
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009084:	4013      	ands	r3, r2
 8009086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800909a:	4a04      	ldr	r2, [pc, #16]	; (80090ac <__NVIC_SetPriorityGrouping+0x44>)
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	60d3      	str	r3, [r2, #12]
}
 80090a0:	bf00      	nop
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	e000ed00 	.word	0xe000ed00

080090b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <__NVIC_GetPriorityGrouping+0x18>)
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	0a1b      	lsrs	r3, r3, #8
 80090ba:	f003 0307 	and.w	r3, r3, #7
}
 80090be:	4618      	mov	r0, r3
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	e000ed00 	.word	0xe000ed00

080090cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	db0b      	blt.n	80090f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090de:	79fb      	ldrb	r3, [r7, #7]
 80090e0:	f003 021f 	and.w	r2, r3, #31
 80090e4:	4907      	ldr	r1, [pc, #28]	; (8009104 <__NVIC_EnableIRQ+0x38>)
 80090e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090ea:	095b      	lsrs	r3, r3, #5
 80090ec:	2001      	movs	r0, #1
 80090ee:	fa00 f202 	lsl.w	r2, r0, r2
 80090f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80090f6:	bf00      	nop
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	e000e100 	.word	0xe000e100

08009108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	6039      	str	r1, [r7, #0]
 8009112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009118:	2b00      	cmp	r3, #0
 800911a:	db0a      	blt.n	8009132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	b2da      	uxtb	r2, r3
 8009120:	490c      	ldr	r1, [pc, #48]	; (8009154 <__NVIC_SetPriority+0x4c>)
 8009122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009126:	0112      	lsls	r2, r2, #4
 8009128:	b2d2      	uxtb	r2, r2
 800912a:	440b      	add	r3, r1
 800912c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009130:	e00a      	b.n	8009148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	b2da      	uxtb	r2, r3
 8009136:	4908      	ldr	r1, [pc, #32]	; (8009158 <__NVIC_SetPriority+0x50>)
 8009138:	79fb      	ldrb	r3, [r7, #7]
 800913a:	f003 030f 	and.w	r3, r3, #15
 800913e:	3b04      	subs	r3, #4
 8009140:	0112      	lsls	r2, r2, #4
 8009142:	b2d2      	uxtb	r2, r2
 8009144:	440b      	add	r3, r1
 8009146:	761a      	strb	r2, [r3, #24]
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	e000e100 	.word	0xe000e100
 8009158:	e000ed00 	.word	0xe000ed00

0800915c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800915c:	b480      	push	{r7}
 800915e:	b089      	sub	sp, #36	; 0x24
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f003 0307 	and.w	r3, r3, #7
 800916e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	f1c3 0307 	rsb	r3, r3, #7
 8009176:	2b04      	cmp	r3, #4
 8009178:	bf28      	it	cs
 800917a:	2304      	movcs	r3, #4
 800917c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	3304      	adds	r3, #4
 8009182:	2b06      	cmp	r3, #6
 8009184:	d902      	bls.n	800918c <NVIC_EncodePriority+0x30>
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	3b03      	subs	r3, #3
 800918a:	e000      	b.n	800918e <NVIC_EncodePriority+0x32>
 800918c:	2300      	movs	r3, #0
 800918e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009190:	f04f 32ff 	mov.w	r2, #4294967295
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	fa02 f303 	lsl.w	r3, r2, r3
 800919a:	43da      	mvns	r2, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	401a      	ands	r2, r3
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091a4:	f04f 31ff 	mov.w	r1, #4294967295
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	fa01 f303 	lsl.w	r3, r1, r3
 80091ae:	43d9      	mvns	r1, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091b4:	4313      	orrs	r3, r2
         );
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3724      	adds	r7, #36	; 0x24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
	...

080091c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091d4:	d301      	bcc.n	80091da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80091d6:	2301      	movs	r3, #1
 80091d8:	e00f      	b.n	80091fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80091da:	4a0a      	ldr	r2, [pc, #40]	; (8009204 <SysTick_Config+0x40>)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3b01      	subs	r3, #1
 80091e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80091e2:	210f      	movs	r1, #15
 80091e4:	f04f 30ff 	mov.w	r0, #4294967295
 80091e8:	f7ff ff8e 	bl	8009108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80091ec:	4b05      	ldr	r3, [pc, #20]	; (8009204 <SysTick_Config+0x40>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80091f2:	4b04      	ldr	r3, [pc, #16]	; (8009204 <SysTick_Config+0x40>)
 80091f4:	2207      	movs	r2, #7
 80091f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	e000e010 	.word	0xe000e010

08009208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7ff ff29 	bl	8009068 <__NVIC_SetPriorityGrouping>
}
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b086      	sub	sp, #24
 8009222:	af00      	add	r7, sp, #0
 8009224:	4603      	mov	r3, r0
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	607a      	str	r2, [r7, #4]
 800922a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800922c:	f7ff ff40 	bl	80090b0 <__NVIC_GetPriorityGrouping>
 8009230:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	68b9      	ldr	r1, [r7, #8]
 8009236:	6978      	ldr	r0, [r7, #20]
 8009238:	f7ff ff90 	bl	800915c <NVIC_EncodePriority>
 800923c:	4602      	mov	r2, r0
 800923e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009242:	4611      	mov	r1, r2
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff ff5f 	bl	8009108 <__NVIC_SetPriority>
}
 800924a:	bf00      	nop
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	4603      	mov	r3, r0
 800925a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800925c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009260:	4618      	mov	r0, r3
 8009262:	f7ff ff33 	bl	80090cc <__NVIC_EnableIRQ>
}
 8009266:	bf00      	nop
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7ff ffa4 	bl	80091c4 <SysTick_Config>
 800927c:	4603      	mov	r3, r0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e054      	b.n	8009344 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7f5b      	ldrb	r3, [r3, #29]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d105      	bne.n	80092b0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7fc fa4e 	bl	800574c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	791b      	ldrb	r3, [r3, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10c      	bne.n	80092d8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a22      	ldr	r2, [pc, #136]	; (800934c <HAL_CRC_Init+0xc4>)
 80092c4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0218 	bic.w	r2, r2, #24
 80092d4:	609a      	str	r2, [r3, #8]
 80092d6:	e00c      	b.n	80092f2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6899      	ldr	r1, [r3, #8]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	461a      	mov	r2, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f948 	bl	8009578 <HAL_CRCEx_Polynomial_Set>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e028      	b.n	8009344 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	795b      	ldrb	r3, [r3, #5]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d105      	bne.n	8009306 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009302:	611a      	str	r2, [r3, #16]
 8009304:	e004      	b.n	8009310 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	6912      	ldr	r2, [r2, #16]
 800930e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	695a      	ldr	r2, [r3, #20]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	699a      	ldr	r2, [r3, #24]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	04c11db7 	.word	0x04c11db7

08009350 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800935c:	2300      	movs	r3, #0
 800935e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2202      	movs	r2, #2
 8009364:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689a      	ldr	r2, [r3, #8]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f042 0201 	orr.w	r2, r2, #1
 8009374:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	2b03      	cmp	r3, #3
 800937c:	d006      	beq.n	800938c <HAL_CRC_Calculate+0x3c>
 800937e:	2b03      	cmp	r3, #3
 8009380:	d829      	bhi.n	80093d6 <HAL_CRC_Calculate+0x86>
 8009382:	2b01      	cmp	r3, #1
 8009384:	d019      	beq.n	80093ba <HAL_CRC_Calculate+0x6a>
 8009386:	2b02      	cmp	r3, #2
 8009388:	d01e      	beq.n	80093c8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800938a:	e024      	b.n	80093d6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800938c:	2300      	movs	r3, #0
 800938e:	617b      	str	r3, [r7, #20]
 8009390:	e00a      	b.n	80093a8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	441a      	add	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6812      	ldr	r2, [r2, #0]
 80093a0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	3301      	adds	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d3f0      	bcc.n	8009392 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	613b      	str	r3, [r7, #16]
      break;
 80093b8:	e00e      	b.n	80093d8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	68b9      	ldr	r1, [r7, #8]
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 f812 	bl	80093e8 <CRC_Handle_8>
 80093c4:	6138      	str	r0, [r7, #16]
      break;
 80093c6:	e007      	b.n	80093d8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	68b9      	ldr	r1, [r7, #8]
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f000 f899 	bl	8009504 <CRC_Handle_16>
 80093d2:	6138      	str	r0, [r7, #16]
      break;
 80093d4:	e000      	b.n	80093d8 <HAL_CRC_Calculate+0x88>
      break;
 80093d6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2201      	movs	r2, #1
 80093dc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80093de:	693b      	ldr	r3, [r7, #16]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b089      	sub	sp, #36	; 0x24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80093f4:	2300      	movs	r3, #0
 80093f6:	61fb      	str	r3, [r7, #28]
 80093f8:	e023      	b.n	8009442 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	4413      	add	r3, r2
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	3301      	adds	r3, #1
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	440b      	add	r3, r1
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009414:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	3302      	adds	r3, #2
 800941c:	68b9      	ldr	r1, [r7, #8]
 800941e:	440b      	add	r3, r1
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009424:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	3303      	adds	r3, #3
 800942c:	68b9      	ldr	r1, [r7, #8]
 800942e:	440b      	add	r3, r1
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009438:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800943a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	3301      	adds	r3, #1
 8009440:	61fb      	str	r3, [r7, #28]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	089b      	lsrs	r3, r3, #2
 8009446:	69fa      	ldr	r2, [r7, #28]
 8009448:	429a      	cmp	r2, r3
 800944a:	d3d6      	bcc.n	80093fa <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f003 0303 	and.w	r3, r3, #3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d04d      	beq.n	80094f2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f003 0303 	and.w	r3, r3, #3
 800945c:	2b01      	cmp	r3, #1
 800945e:	d107      	bne.n	8009470 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	4413      	add	r3, r2
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	6812      	ldr	r2, [r2, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f003 0303 	and.w	r3, r3, #3
 8009476:	2b02      	cmp	r3, #2
 8009478:	d116      	bne.n	80094a8 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	4413      	add	r3, r2
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	021b      	lsls	r3, r3, #8
 8009486:	b21a      	sxth	r2, r3
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	3301      	adds	r3, #1
 800948e:	68b9      	ldr	r1, [r7, #8]
 8009490:	440b      	add	r3, r1
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	b21b      	sxth	r3, r3
 8009496:	4313      	orrs	r3, r2
 8009498:	b21b      	sxth	r3, r3
 800949a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	8b7a      	ldrh	r2, [r7, #26]
 80094a6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f003 0303 	and.w	r3, r3, #3
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d11f      	bne.n	80094f2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	4413      	add	r3, r2
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	021b      	lsls	r3, r3, #8
 80094be:	b21a      	sxth	r2, r3
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	3301      	adds	r3, #1
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	440b      	add	r3, r1
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	b21b      	sxth	r3, r3
 80094ce:	4313      	orrs	r3, r2
 80094d0:	b21b      	sxth	r3, r3
 80094d2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	8b7a      	ldrh	r2, [r7, #26]
 80094de:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	3302      	adds	r3, #2
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	4413      	add	r3, r2
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	6812      	ldr	r2, [r2, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3724      	adds	r7, #36	; 0x24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8009504:	b480      	push	{r7}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009510:	2300      	movs	r3, #0
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	e013      	b.n	800953e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	4413      	add	r3, r2
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	041a      	lsls	r2, r3, #16
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	3302      	adds	r3, #2
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	440b      	add	r3, r1
 800952c:	881b      	ldrh	r3, [r3, #0]
 800952e:	4619      	mov	r1, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	3301      	adds	r3, #1
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	085b      	lsrs	r3, r3, #1
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	429a      	cmp	r2, r3
 8009546:	d3e6      	bcc.n	8009516 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d009      	beq.n	8009566 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	4413      	add	r3, r2
 8009560:	881a      	ldrh	r2, [r3, #0]
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
}
 800956c:	4618      	mov	r0, r3
 800956e:	371c      	adds	r7, #28
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009588:	231f      	movs	r3, #31
 800958a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d102      	bne.n	800959c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	75fb      	strb	r3, [r7, #23]
 800959a:	e063      	b.n	8009664 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800959c:	bf00      	nop
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	1e5a      	subs	r2, r3, #1
 80095a2:	613a      	str	r2, [r7, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d009      	beq.n	80095bc <HAL_CRCEx_Polynomial_Set+0x44>
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	f003 031f 	and.w	r3, r3, #31
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	fa22 f303 	lsr.w	r3, r2, r3
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0f0      	beq.n	800959e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b18      	cmp	r3, #24
 80095c0:	d846      	bhi.n	8009650 <HAL_CRCEx_Polynomial_Set+0xd8>
 80095c2:	a201      	add	r2, pc, #4	; (adr r2, 80095c8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80095c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c8:	08009657 	.word	0x08009657
 80095cc:	08009651 	.word	0x08009651
 80095d0:	08009651 	.word	0x08009651
 80095d4:	08009651 	.word	0x08009651
 80095d8:	08009651 	.word	0x08009651
 80095dc:	08009651 	.word	0x08009651
 80095e0:	08009651 	.word	0x08009651
 80095e4:	08009651 	.word	0x08009651
 80095e8:	08009645 	.word	0x08009645
 80095ec:	08009651 	.word	0x08009651
 80095f0:	08009651 	.word	0x08009651
 80095f4:	08009651 	.word	0x08009651
 80095f8:	08009651 	.word	0x08009651
 80095fc:	08009651 	.word	0x08009651
 8009600:	08009651 	.word	0x08009651
 8009604:	08009651 	.word	0x08009651
 8009608:	08009639 	.word	0x08009639
 800960c:	08009651 	.word	0x08009651
 8009610:	08009651 	.word	0x08009651
 8009614:	08009651 	.word	0x08009651
 8009618:	08009651 	.word	0x08009651
 800961c:	08009651 	.word	0x08009651
 8009620:	08009651 	.word	0x08009651
 8009624:	08009651 	.word	0x08009651
 8009628:	0800962d 	.word	0x0800962d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	2b06      	cmp	r3, #6
 8009630:	d913      	bls.n	800965a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009636:	e010      	b.n	800965a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	2b07      	cmp	r3, #7
 800963c:	d90f      	bls.n	800965e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009642:	e00c      	b.n	800965e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	2b0f      	cmp	r3, #15
 8009648:	d90b      	bls.n	8009662 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800964e:	e008      	b.n	8009662 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	75fb      	strb	r3, [r7, #23]
        break;
 8009654:	e006      	b.n	8009664 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009656:	bf00      	nop
 8009658:	e004      	b.n	8009664 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800965a:	bf00      	nop
 800965c:	e002      	b.n	8009664 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800965e:	bf00      	nop
 8009660:	e000      	b.n	8009664 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009662:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10d      	bne.n	8009686 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f023 0118 	bic.w	r1, r3, #24
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	430a      	orrs	r2, r1
 8009684:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009686:	7dfb      	ldrb	r3, [r7, #23]
}
 8009688:	4618      	mov	r0, r3
 800968a:	371c      	adds	r7, #28
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e08d      	b.n	80097c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	4b47      	ldr	r3, [pc, #284]	; (80097cc <HAL_DMA_Init+0x138>)
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d80f      	bhi.n	80096d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	4b45      	ldr	r3, [pc, #276]	; (80097d0 <HAL_DMA_Init+0x13c>)
 80096ba:	4413      	add	r3, r2
 80096bc:	4a45      	ldr	r2, [pc, #276]	; (80097d4 <HAL_DMA_Init+0x140>)
 80096be:	fba2 2303 	umull	r2, r3, r2, r3
 80096c2:	091b      	lsrs	r3, r3, #4
 80096c4:	009a      	lsls	r2, r3, #2
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a42      	ldr	r2, [pc, #264]	; (80097d8 <HAL_DMA_Init+0x144>)
 80096ce:	641a      	str	r2, [r3, #64]	; 0x40
 80096d0:	e00e      	b.n	80096f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	4b40      	ldr	r3, [pc, #256]	; (80097dc <HAL_DMA_Init+0x148>)
 80096da:	4413      	add	r3, r2
 80096dc:	4a3d      	ldr	r2, [pc, #244]	; (80097d4 <HAL_DMA_Init+0x140>)
 80096de:	fba2 2303 	umull	r2, r3, r2, r3
 80096e2:	091b      	lsrs	r3, r3, #4
 80096e4:	009a      	lsls	r2, r3, #2
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a3c      	ldr	r2, [pc, #240]	; (80097e0 <HAL_DMA_Init+0x14c>)
 80096ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800970a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800972c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4313      	orrs	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa1e 	bl	8009b84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009750:	d102      	bne.n	8009758 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009760:	b2d2      	uxtb	r2, r2
 8009762:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800976c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d010      	beq.n	8009798 <HAL_DMA_Init+0x104>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	2b04      	cmp	r3, #4
 800977c:	d80c      	bhi.n	8009798 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa3e 	bl	8009c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009788:	2200      	movs	r2, #0
 800978a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009794:	605a      	str	r2, [r3, #4]
 8009796:	e008      	b.n	80097aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	40020407 	.word	0x40020407
 80097d0:	bffdfff8 	.word	0xbffdfff8
 80097d4:	cccccccd 	.word	0xcccccccd
 80097d8:	40020000 	.word	0x40020000
 80097dc:	bffdfbf8 	.word	0xbffdfbf8
 80097e0:	40020400 	.word	0x40020400

080097e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d101      	bne.n	8009804 <HAL_DMA_Start_IT+0x20>
 8009800:	2302      	movs	r3, #2
 8009802:	e066      	b.n	80098d2 <HAL_DMA_Start_IT+0xee>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b01      	cmp	r3, #1
 8009816:	d155      	bne.n	80098c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2202      	movs	r2, #2
 800981c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0201 	bic.w	r2, r2, #1
 8009834:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f962 	bl	8009b06 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009846:	2b00      	cmp	r3, #0
 8009848:	d008      	beq.n	800985c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 020e 	orr.w	r2, r2, #14
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	e00f      	b.n	800987c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f022 0204 	bic.w	r2, r2, #4
 800986a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f042 020a 	orr.w	r2, r2, #10
 800987a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009898:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d007      	beq.n	80098b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f042 0201 	orr.w	r2, r2, #1
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	e005      	b.n	80098d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80098cc:	2302      	movs	r3, #2
 80098ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d005      	beq.n	80098fe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2204      	movs	r2, #4
 80098f6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	73fb      	strb	r3, [r7, #15]
 80098fc:	e037      	b.n	800996e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f022 020e 	bic.w	r2, r2, #14
 800990c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800991c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0201 	bic.w	r2, r2, #1
 800992c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009932:	f003 021f 	and.w	r2, r3, #31
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993a:	2101      	movs	r1, #1
 800993c:	fa01 f202 	lsl.w	r2, r1, r2
 8009940:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800994a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00c      	beq.n	800996e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800995e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009962:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800996c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800997e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a8:	f003 031f 	and.w	r3, r3, #31
 80099ac:	2204      	movs	r2, #4
 80099ae:	409a      	lsls	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4013      	ands	r3, r2
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d026      	beq.n	8009a06 <HAL_DMA_IRQHandler+0x7a>
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	f003 0304 	and.w	r3, r3, #4
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d021      	beq.n	8009a06 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0320 	and.w	r3, r3, #32
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d107      	bne.n	80099e0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f022 0204 	bic.w	r2, r2, #4
 80099de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e4:	f003 021f 	and.w	r2, r3, #31
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	2104      	movs	r1, #4
 80099ee:	fa01 f202 	lsl.w	r2, r1, r2
 80099f2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d071      	beq.n	8009ae0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009a04:	e06c      	b.n	8009ae0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0a:	f003 031f 	and.w	r3, r3, #31
 8009a0e:	2202      	movs	r2, #2
 8009a10:	409a      	lsls	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4013      	ands	r3, r2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d02e      	beq.n	8009a78 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	f003 0302 	and.w	r3, r3, #2
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d029      	beq.n	8009a78 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 0320 	and.w	r3, r3, #32
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10b      	bne.n	8009a4a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 020a 	bic.w	r2, r2, #10
 8009a40:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4e:	f003 021f 	and.w	r2, r3, #31
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a56:	2102      	movs	r1, #2
 8009a58:	fa01 f202 	lsl.w	r2, r1, r2
 8009a5c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d038      	beq.n	8009ae0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009a76:	e033      	b.n	8009ae0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7c:	f003 031f 	and.w	r3, r3, #31
 8009a80:	2208      	movs	r2, #8
 8009a82:	409a      	lsls	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4013      	ands	r3, r2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d02a      	beq.n	8009ae2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	f003 0308 	and.w	r3, r3, #8
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d025      	beq.n	8009ae2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 020e 	bic.w	r2, r2, #14
 8009aa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aaa:	f003 021f 	and.w	r2, r3, #31
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8009ab8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d004      	beq.n	8009ae2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009ae0:	bf00      	nop
 8009ae2:	bf00      	nop
}
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b083      	sub	sp, #12
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009af8:	b2db      	uxtb	r3, r3
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b085      	sub	sp, #20
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	607a      	str	r2, [r7, #4]
 8009b12:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009b1c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d004      	beq.n	8009b30 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009b2e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b34:	f003 021f 	and.w	r2, r3, #31
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8009b42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	2b10      	cmp	r3, #16
 8009b52:	d108      	bne.n	8009b66 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009b64:	e007      	b.n	8009b76 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	60da      	str	r2, [r3, #12]
}
 8009b76:	bf00      	nop
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
	...

08009b84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	461a      	mov	r2, r3
 8009b92:	4b16      	ldr	r3, [pc, #88]	; (8009bec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d802      	bhi.n	8009b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009b98:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009b9a:	617b      	str	r3, [r7, #20]
 8009b9c:	e001      	b.n	8009ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8009b9e:	4b15      	ldr	r3, [pc, #84]	; (8009bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009ba0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	3b08      	subs	r3, #8
 8009bae:	4a12      	ldr	r2, [pc, #72]	; (8009bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb4:	091b      	lsrs	r3, r3, #4
 8009bb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bbc:	089b      	lsrs	r3, r3, #2
 8009bbe:	009a      	lsls	r2, r3, #2
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a0b      	ldr	r2, [pc, #44]	; (8009bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009bce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f003 031f 	and.w	r3, r3, #31
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	409a      	lsls	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009bde:	bf00      	nop
 8009be0:	371c      	adds	r7, #28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	40020407 	.word	0x40020407
 8009bf0:	40020800 	.word	0x40020800
 8009bf4:	40020820 	.word	0x40020820
 8009bf8:	cccccccd 	.word	0xcccccccd
 8009bfc:	40020880 	.word	0x40020880

08009c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009c14:	4413      	add	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	461a      	mov	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a08      	ldr	r2, [pc, #32]	; (8009c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009c22:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	f003 031f 	and.w	r3, r3, #31
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	409a      	lsls	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009c34:	bf00      	nop
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	1000823f 	.word	0x1000823f
 8009c44:	40020940 	.word	0x40020940

08009c48 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009c5a:	4b2f      	ldr	r3, [pc, #188]	; (8009d18 <HAL_FLASH_Program+0xd0>)
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d101      	bne.n	8009c66 <HAL_FLASH_Program+0x1e>
 8009c62:	2302      	movs	r3, #2
 8009c64:	e053      	b.n	8009d0e <HAL_FLASH_Program+0xc6>
 8009c66:	4b2c      	ldr	r3, [pc, #176]	; (8009d18 <HAL_FLASH_Program+0xd0>)
 8009c68:	2201      	movs	r2, #1
 8009c6a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009c70:	f000 f892 	bl	8009d98 <FLASH_WaitForLastOperation>
 8009c74:	4603      	mov	r3, r0
 8009c76:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d143      	bne.n	8009d06 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009c7e:	4b26      	ldr	r3, [pc, #152]	; (8009d18 <HAL_FLASH_Program+0xd0>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009c84:	4b25      	ldr	r3, [pc, #148]	; (8009d1c <HAL_FLASH_Program+0xd4>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d009      	beq.n	8009ca4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009c90:	4b22      	ldr	r3, [pc, #136]	; (8009d1c <HAL_FLASH_Program+0xd4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a21      	ldr	r2, [pc, #132]	; (8009d1c <HAL_FLASH_Program+0xd4>)
 8009c96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c9a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009c9c:	4b1e      	ldr	r3, [pc, #120]	; (8009d18 <HAL_FLASH_Program+0xd0>)
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	771a      	strb	r2, [r3, #28]
 8009ca2:	e002      	b.n	8009caa <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009ca4:	4b1c      	ldr	r3, [pc, #112]	; (8009d18 <HAL_FLASH_Program+0xd0>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d107      	bne.n	8009cc0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8009cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cb4:	68b8      	ldr	r0, [r7, #8]
 8009cb6:	f000 f8c3 	bl	8009e40 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	613b      	str	r3, [r7, #16]
 8009cbe:	e010      	b.n	8009ce2 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d002      	beq.n	8009ccc <HAL_FLASH_Program+0x84>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d10a      	bne.n	8009ce2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	68b8      	ldr	r0, [r7, #8]
 8009cd2:	f000 f8db 	bl	8009e8c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d102      	bne.n	8009ce2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8009cdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ce0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ce6:	f000 f857 	bl	8009d98 <FLASH_WaitForLastOperation>
 8009cea:	4603      	mov	r3, r0
 8009cec:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d006      	beq.n	8009d02 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8009cf4:	4b09      	ldr	r3, [pc, #36]	; (8009d1c <HAL_FLASH_Program+0xd4>)
 8009cf6:	695a      	ldr	r2, [r3, #20]
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	43db      	mvns	r3, r3
 8009cfc:	4907      	ldr	r1, [pc, #28]	; (8009d1c <HAL_FLASH_Program+0xd4>)
 8009cfe:	4013      	ands	r3, r2
 8009d00:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009d02:	f000 f9d3 	bl	800a0ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009d06:	4b04      	ldr	r3, [pc, #16]	; (8009d18 <HAL_FLASH_Program+0xd0>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	200001fc 	.word	0x200001fc
 8009d1c:	40022000 	.word	0x40022000

08009d20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009d2a:	4b0b      	ldr	r3, [pc, #44]	; (8009d58 <HAL_FLASH_Unlock+0x38>)
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	da0b      	bge.n	8009d4a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009d32:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <HAL_FLASH_Unlock+0x38>)
 8009d34:	4a09      	ldr	r2, [pc, #36]	; (8009d5c <HAL_FLASH_Unlock+0x3c>)
 8009d36:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009d38:	4b07      	ldr	r3, [pc, #28]	; (8009d58 <HAL_FLASH_Unlock+0x38>)
 8009d3a:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <HAL_FLASH_Unlock+0x40>)
 8009d3c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009d3e:	4b06      	ldr	r3, [pc, #24]	; (8009d58 <HAL_FLASH_Unlock+0x38>)
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	da01      	bge.n	8009d4a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	40022000 	.word	0x40022000
 8009d5c:	45670123 	.word	0x45670123
 8009d60:	cdef89ab 	.word	0xcdef89ab

08009d64 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009d6e:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <HAL_FLASH_Lock+0x30>)
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	4a08      	ldr	r2, [pc, #32]	; (8009d94 <HAL_FLASH_Lock+0x30>)
 8009d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d78:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009d7a:	4b06      	ldr	r3, [pc, #24]	; (8009d94 <HAL_FLASH_Lock+0x30>)
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	da01      	bge.n	8009d86 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009d86:	79fb      	ldrb	r3, [r7, #7]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	40022000 	.word	0x40022000

08009d98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8009da0:	f7fc fe0e 	bl	80069c0 <HAL_GetTick>
 8009da4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009da6:	e009      	b.n	8009dbc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8009da8:	f7fc fe0a 	bl	80069c0 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d201      	bcs.n	8009dbc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e038      	b.n	8009e2e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009dbc:	4b1e      	ldr	r3, [pc, #120]	; (8009e38 <FLASH_WaitForLastOperation+0xa0>)
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc8:	d0ee      	beq.n	8009da8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009dca:	4b1b      	ldr	r3, [pc, #108]	; (8009e38 <FLASH_WaitForLastOperation+0xa0>)
 8009dcc:	691a      	ldr	r2, [r3, #16]
 8009dce:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01e      	beq.n	8009e1a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8009ddc:	4b17      	ldr	r3, [pc, #92]	; (8009e3c <FLASH_WaitForLastOperation+0xa4>)
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	4a15      	ldr	r2, [pc, #84]	; (8009e3c <FLASH_WaitForLastOperation+0xa4>)
 8009de6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d007      	beq.n	8009e02 <FLASH_WaitForLastOperation+0x6a>
 8009df2:	4b11      	ldr	r3, [pc, #68]	; (8009e38 <FLASH_WaitForLastOperation+0xa0>)
 8009df4:	699a      	ldr	r2, [r3, #24]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009dfc:	490e      	ldr	r1, [pc, #56]	; (8009e38 <FLASH_WaitForLastOperation+0xa0>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	618b      	str	r3, [r1, #24]
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d004      	beq.n	8009e16 <FLASH_WaitForLastOperation+0x7e>
 8009e0c:	4a0a      	ldr	r2, [pc, #40]	; (8009e38 <FLASH_WaitForLastOperation+0xa0>)
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009e14:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e009      	b.n	8009e2e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009e1a:	4b07      	ldr	r3, [pc, #28]	; (8009e38 <FLASH_WaitForLastOperation+0xa0>)
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d102      	bne.n	8009e2c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009e26:	4b04      	ldr	r3, [pc, #16]	; (8009e38 <FLASH_WaitForLastOperation+0xa0>)
 8009e28:	2201      	movs	r2, #1
 8009e2a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	40022000 	.word	0x40022000
 8009e3c:	200001fc 	.word	0x200001fc

08009e40 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009e4c:	4b0e      	ldr	r3, [pc, #56]	; (8009e88 <FLASH_Program_DoubleWord+0x48>)
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	4a0d      	ldr	r2, [pc, #52]	; (8009e88 <FLASH_Program_DoubleWord+0x48>)
 8009e52:	f043 0301 	orr.w	r3, r3, #1
 8009e56:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009e5e:	f3bf 8f6f 	isb	sy
}
 8009e62:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009e64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e68:	f04f 0200 	mov.w	r2, #0
 8009e6c:	f04f 0300 	mov.w	r3, #0
 8009e70:	000a      	movs	r2, r1
 8009e72:	2300      	movs	r3, #0
 8009e74:	68f9      	ldr	r1, [r7, #12]
 8009e76:	3104      	adds	r1, #4
 8009e78:	4613      	mov	r3, r2
 8009e7a:	600b      	str	r3, [r1, #0]
}
 8009e7c:	bf00      	nop
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	40022000 	.word	0x40022000

08009e8c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b089      	sub	sp, #36	; 0x24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8009e96:	2340      	movs	r3, #64	; 0x40
 8009e98:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8009ea2:	4b14      	ldr	r3, [pc, #80]	; (8009ef4 <FLASH_Program_Fast+0x68>)
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	4a13      	ldr	r2, [pc, #76]	; (8009ef4 <FLASH_Program_Fast+0x68>)
 8009ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eae:	f3ef 8310 	mrs	r3, PRIMASK
 8009eb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eb4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8009eb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eb8:	b672      	cpsid	i
}
 8009eba:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	617b      	str	r3, [r7, #20]
    row_index--;
 8009ed0:	7ffb      	ldrb	r3, [r7, #31]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8009ed6:	7ffb      	ldrb	r3, [r7, #31]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1ef      	bne.n	8009ebc <FLASH_Program_Fast+0x30>
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	f383 8810 	msr	PRIMASK, r3
}
 8009ee6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009ee8:	bf00      	nop
 8009eea:	3724      	adds	r7, #36	; 0x24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	40022000 	.word	0x40022000

08009ef8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f02:	4b47      	ldr	r3, [pc, #284]	; (800a020 <HAL_FLASHEx_Erase+0x128>)
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d101      	bne.n	8009f0e <HAL_FLASHEx_Erase+0x16>
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	e083      	b.n	800a016 <HAL_FLASHEx_Erase+0x11e>
 8009f0e:	4b44      	ldr	r3, [pc, #272]	; (800a020 <HAL_FLASHEx_Erase+0x128>)
 8009f10:	2201      	movs	r2, #1
 8009f12:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f18:	f7ff ff3e 	bl	8009d98 <FLASH_WaitForLastOperation>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d173      	bne.n	800a00e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009f26:	4b3e      	ldr	r3, [pc, #248]	; (800a020 <HAL_FLASHEx_Erase+0x128>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009f2c:	4b3d      	ldr	r3, [pc, #244]	; (800a024 <HAL_FLASHEx_Erase+0x12c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d013      	beq.n	8009f60 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009f38:	4b3a      	ldr	r3, [pc, #232]	; (800a024 <HAL_FLASHEx_Erase+0x12c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d009      	beq.n	8009f58 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009f44:	4b37      	ldr	r3, [pc, #220]	; (800a024 <HAL_FLASHEx_Erase+0x12c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a36      	ldr	r2, [pc, #216]	; (800a024 <HAL_FLASHEx_Erase+0x12c>)
 8009f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f4e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009f50:	4b33      	ldr	r3, [pc, #204]	; (800a020 <HAL_FLASHEx_Erase+0x128>)
 8009f52:	2203      	movs	r2, #3
 8009f54:	771a      	strb	r2, [r3, #28]
 8009f56:	e016      	b.n	8009f86 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009f58:	4b31      	ldr	r3, [pc, #196]	; (800a020 <HAL_FLASHEx_Erase+0x128>)
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	771a      	strb	r2, [r3, #28]
 8009f5e:	e012      	b.n	8009f86 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009f60:	4b30      	ldr	r3, [pc, #192]	; (800a024 <HAL_FLASHEx_Erase+0x12c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d009      	beq.n	8009f80 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009f6c:	4b2d      	ldr	r3, [pc, #180]	; (800a024 <HAL_FLASHEx_Erase+0x12c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a2c      	ldr	r2, [pc, #176]	; (800a024 <HAL_FLASHEx_Erase+0x12c>)
 8009f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f76:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009f78:	4b29      	ldr	r3, [pc, #164]	; (800a020 <HAL_FLASHEx_Erase+0x128>)
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	771a      	strb	r2, [r3, #28]
 8009f7e:	e002      	b.n	8009f86 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009f80:	4b27      	ldr	r3, [pc, #156]	; (800a020 <HAL_FLASHEx_Erase+0x128>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d111      	bne.n	8009fb2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 f848 	bl	800a028 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f9c:	f7ff fefc 	bl	8009d98 <FLASH_WaitForLastOperation>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8009fa4:	4b1f      	ldr	r3, [pc, #124]	; (800a024 <HAL_FLASHEx_Erase+0x12c>)
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	4a1e      	ldr	r2, [pc, #120]	; (800a024 <HAL_FLASHEx_Erase+0x12c>)
 8009faa:	f023 0304 	bic.w	r3, r3, #4
 8009fae:	6153      	str	r3, [r2, #20]
 8009fb0:	e02b      	b.n	800a00a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	60bb      	str	r3, [r7, #8]
 8009fc0:	e01b      	b.n	8009ffa <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	68b8      	ldr	r0, [r7, #8]
 8009fca:	f000 f84b 	bl	800a064 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009fce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fd2:	f7ff fee1 	bl	8009d98 <FLASH_WaitForLastOperation>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009fda:	4b12      	ldr	r3, [pc, #72]	; (800a024 <HAL_FLASHEx_Erase+0x12c>)
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	4a11      	ldr	r2, [pc, #68]	; (800a024 <HAL_FLASHEx_Erase+0x12c>)
 8009fe0:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8009fe4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d003      	beq.n	8009ff4 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	601a      	str	r2, [r3, #0]
          break;
 8009ff2:	e00a      	b.n	800a00a <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	60bb      	str	r3, [r7, #8]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689a      	ldr	r2, [r3, #8]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	4413      	add	r3, r2
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	429a      	cmp	r2, r3
 800a008:	d3db      	bcc.n	8009fc2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a00a:	f000 f84f 	bl	800a0ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a00e:	4b04      	ldr	r3, [pc, #16]	; (800a020 <HAL_FLASHEx_Erase+0x128>)
 800a010:	2200      	movs	r2, #0
 800a012:	701a      	strb	r2, [r3, #0]

  return status;
 800a014:	7bfb      	ldrb	r3, [r7, #15]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	200001fc 	.word	0x200001fc
 800a024:	40022000 	.word	0x40022000

0800a028 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d005      	beq.n	800a046 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800a03a:	4b09      	ldr	r3, [pc, #36]	; (800a060 <FLASH_MassErase+0x38>)
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	4a08      	ldr	r2, [pc, #32]	; (800a060 <FLASH_MassErase+0x38>)
 800a040:	f043 0304 	orr.w	r3, r3, #4
 800a044:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a046:	4b06      	ldr	r3, [pc, #24]	; (800a060 <FLASH_MassErase+0x38>)
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	4a05      	ldr	r2, [pc, #20]	; (800a060 <FLASH_MassErase+0x38>)
 800a04c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a050:	6153      	str	r3, [r2, #20]
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	40022000 	.word	0x40022000

0800a064 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800a06e:	4b0e      	ldr	r3, [pc, #56]	; (800a0a8 <FLASH_PageErase+0x44>)
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800a07e:	490a      	ldr	r1, [pc, #40]	; (800a0a8 <FLASH_PageErase+0x44>)
 800a080:	4313      	orrs	r3, r2
 800a082:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a084:	4b08      	ldr	r3, [pc, #32]	; (800a0a8 <FLASH_PageErase+0x44>)
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	4a07      	ldr	r2, [pc, #28]	; (800a0a8 <FLASH_PageErase+0x44>)
 800a08a:	f043 0302 	orr.w	r3, r3, #2
 800a08e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a090:	4b05      	ldr	r3, [pc, #20]	; (800a0a8 <FLASH_PageErase+0x44>)
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	4a04      	ldr	r2, [pc, #16]	; (800a0a8 <FLASH_PageErase+0x44>)
 800a096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a09a:	6153      	str	r3, [r2, #20]
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	40022000 	.word	0x40022000

0800a0ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800a0b2:	4b21      	ldr	r3, [pc, #132]	; (800a138 <FLASH_FlushCaches+0x8c>)
 800a0b4:	7f1b      	ldrb	r3, [r3, #28]
 800a0b6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800a0b8:	79fb      	ldrb	r3, [r7, #7]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d002      	beq.n	800a0c4 <FLASH_FlushCaches+0x18>
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d117      	bne.n	800a0f4 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a0c4:	4b1d      	ldr	r3, [pc, #116]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a1c      	ldr	r2, [pc, #112]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a0ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0ce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a0d0:	4b1a      	ldr	r3, [pc, #104]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a19      	ldr	r2, [pc, #100]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a0d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	4b17      	ldr	r3, [pc, #92]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a16      	ldr	r2, [pc, #88]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a0e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a0e8:	4b14      	ldr	r3, [pc, #80]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a13      	ldr	r2, [pc, #76]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a0ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0f2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d002      	beq.n	800a100 <FLASH_FlushCaches+0x54>
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d111      	bne.n	800a124 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a100:	4b0e      	ldr	r3, [pc, #56]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a0d      	ldr	r2, [pc, #52]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a106:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a0a      	ldr	r2, [pc, #40]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a116:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a118:	4b08      	ldr	r3, [pc, #32]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a07      	ldr	r2, [pc, #28]	; (800a13c <FLASH_FlushCaches+0x90>)
 800a11e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a122:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a124:	4b04      	ldr	r3, [pc, #16]	; (800a138 <FLASH_FlushCaches+0x8c>)
 800a126:	2200      	movs	r2, #0
 800a128:	771a      	strb	r2, [r3, #28]
}
 800a12a:	bf00      	nop
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	200001fc 	.word	0x200001fc
 800a13c:	40022000 	.word	0x40022000

0800a140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a14a:	2300      	movs	r3, #0
 800a14c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a14e:	e15a      	b.n	800a406 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	2101      	movs	r1, #1
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	fa01 f303 	lsl.w	r3, r1, r3
 800a15c:	4013      	ands	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 814c 	beq.w	800a400 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f003 0303 	and.w	r3, r3, #3
 800a170:	2b01      	cmp	r3, #1
 800a172:	d005      	beq.n	800a180 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d130      	bne.n	800a1e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	005b      	lsls	r3, r3, #1
 800a18a:	2203      	movs	r2, #3
 800a18c:	fa02 f303 	lsl.w	r3, r2, r3
 800a190:	43db      	mvns	r3, r3
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	4013      	ands	r3, r2
 800a196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	68da      	ldr	r2, [r3, #12]
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	005b      	lsls	r3, r3, #1
 800a1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a1be:	43db      	mvns	r3, r3
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	091b      	lsrs	r3, r3, #4
 800a1cc:	f003 0201 	and.w	r2, r3, #1
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f003 0303 	and.w	r3, r3, #3
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d017      	beq.n	800a21e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	2203      	movs	r2, #3
 800a1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fe:	43db      	mvns	r3, r3
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	4013      	ands	r3, r2
 800a204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	689a      	ldr	r2, [r3, #8]
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	fa02 f303 	lsl.w	r3, r2, r3
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	4313      	orrs	r3, r2
 800a216:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	f003 0303 	and.w	r3, r3, #3
 800a226:	2b02      	cmp	r3, #2
 800a228:	d123      	bne.n	800a272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	08da      	lsrs	r2, r3, #3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3208      	adds	r2, #8
 800a232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	f003 0307 	and.w	r3, r3, #7
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	220f      	movs	r2, #15
 800a242:	fa02 f303 	lsl.w	r3, r2, r3
 800a246:	43db      	mvns	r3, r3
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	4013      	ands	r3, r2
 800a24c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	691a      	ldr	r2, [r3, #16]
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f003 0307 	and.w	r3, r3, #7
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	fa02 f303 	lsl.w	r3, r2, r3
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	4313      	orrs	r3, r2
 800a262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	08da      	lsrs	r2, r3, #3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3208      	adds	r2, #8
 800a26c:	6939      	ldr	r1, [r7, #16]
 800a26e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	2203      	movs	r2, #3
 800a27e:	fa02 f303 	lsl.w	r3, r2, r3
 800a282:	43db      	mvns	r3, r3
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	4013      	ands	r3, r2
 800a288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f003 0203 	and.w	r2, r3, #3
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	fa02 f303 	lsl.w	r3, r2, r3
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f000 80a6 	beq.w	800a400 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2b4:	4b5b      	ldr	r3, [pc, #364]	; (800a424 <HAL_GPIO_Init+0x2e4>)
 800a2b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2b8:	4a5a      	ldr	r2, [pc, #360]	; (800a424 <HAL_GPIO_Init+0x2e4>)
 800a2ba:	f043 0301 	orr.w	r3, r3, #1
 800a2be:	6613      	str	r3, [r2, #96]	; 0x60
 800a2c0:	4b58      	ldr	r3, [pc, #352]	; (800a424 <HAL_GPIO_Init+0x2e4>)
 800a2c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	60bb      	str	r3, [r7, #8]
 800a2ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a2cc:	4a56      	ldr	r2, [pc, #344]	; (800a428 <HAL_GPIO_Init+0x2e8>)
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	089b      	lsrs	r3, r3, #2
 800a2d2:	3302      	adds	r3, #2
 800a2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f003 0303 	and.w	r3, r3, #3
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	220f      	movs	r2, #15
 800a2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e8:	43db      	mvns	r3, r3
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a2f6:	d01f      	beq.n	800a338 <HAL_GPIO_Init+0x1f8>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a4c      	ldr	r2, [pc, #304]	; (800a42c <HAL_GPIO_Init+0x2ec>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d019      	beq.n	800a334 <HAL_GPIO_Init+0x1f4>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a4b      	ldr	r2, [pc, #300]	; (800a430 <HAL_GPIO_Init+0x2f0>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d013      	beq.n	800a330 <HAL_GPIO_Init+0x1f0>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a4a      	ldr	r2, [pc, #296]	; (800a434 <HAL_GPIO_Init+0x2f4>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d00d      	beq.n	800a32c <HAL_GPIO_Init+0x1ec>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a49      	ldr	r2, [pc, #292]	; (800a438 <HAL_GPIO_Init+0x2f8>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d007      	beq.n	800a328 <HAL_GPIO_Init+0x1e8>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a48      	ldr	r2, [pc, #288]	; (800a43c <HAL_GPIO_Init+0x2fc>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d101      	bne.n	800a324 <HAL_GPIO_Init+0x1e4>
 800a320:	2305      	movs	r3, #5
 800a322:	e00a      	b.n	800a33a <HAL_GPIO_Init+0x1fa>
 800a324:	2306      	movs	r3, #6
 800a326:	e008      	b.n	800a33a <HAL_GPIO_Init+0x1fa>
 800a328:	2304      	movs	r3, #4
 800a32a:	e006      	b.n	800a33a <HAL_GPIO_Init+0x1fa>
 800a32c:	2303      	movs	r3, #3
 800a32e:	e004      	b.n	800a33a <HAL_GPIO_Init+0x1fa>
 800a330:	2302      	movs	r3, #2
 800a332:	e002      	b.n	800a33a <HAL_GPIO_Init+0x1fa>
 800a334:	2301      	movs	r3, #1
 800a336:	e000      	b.n	800a33a <HAL_GPIO_Init+0x1fa>
 800a338:	2300      	movs	r3, #0
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	f002 0203 	and.w	r2, r2, #3
 800a340:	0092      	lsls	r2, r2, #2
 800a342:	4093      	lsls	r3, r2
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	4313      	orrs	r3, r2
 800a348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a34a:	4937      	ldr	r1, [pc, #220]	; (800a428 <HAL_GPIO_Init+0x2e8>)
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	089b      	lsrs	r3, r3, #2
 800a350:	3302      	adds	r3, #2
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a358:	4b39      	ldr	r3, [pc, #228]	; (800a440 <HAL_GPIO_Init+0x300>)
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	43db      	mvns	r3, r3
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	4013      	ands	r3, r2
 800a366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	4313      	orrs	r3, r2
 800a37a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a37c:	4a30      	ldr	r2, [pc, #192]	; (800a440 <HAL_GPIO_Init+0x300>)
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a382:	4b2f      	ldr	r3, [pc, #188]	; (800a440 <HAL_GPIO_Init+0x300>)
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	43db      	mvns	r3, r3
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	4013      	ands	r3, r2
 800a390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a3a6:	4a26      	ldr	r2, [pc, #152]	; (800a440 <HAL_GPIO_Init+0x300>)
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a3ac:	4b24      	ldr	r3, [pc, #144]	; (800a440 <HAL_GPIO_Init+0x300>)
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	43db      	mvns	r3, r3
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a3d0:	4a1b      	ldr	r2, [pc, #108]	; (800a440 <HAL_GPIO_Init+0x300>)
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a3d6:	4b1a      	ldr	r3, [pc, #104]	; (800a440 <HAL_GPIO_Init+0x300>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	43db      	mvns	r3, r3
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a3fa:	4a11      	ldr	r2, [pc, #68]	; (800a440 <HAL_GPIO_Init+0x300>)
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	3301      	adds	r3, #1
 800a404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	fa22 f303 	lsr.w	r3, r2, r3
 800a410:	2b00      	cmp	r3, #0
 800a412:	f47f ae9d 	bne.w	800a150 <HAL_GPIO_Init+0x10>
  }
}
 800a416:	bf00      	nop
 800a418:	bf00      	nop
 800a41a:	371c      	adds	r7, #28
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr
 800a424:	40021000 	.word	0x40021000
 800a428:	40010000 	.word	0x40010000
 800a42c:	48000400 	.word	0x48000400
 800a430:	48000800 	.word	0x48000800
 800a434:	48000c00 	.word	0x48000c00
 800a438:	48001000 	.word	0x48001000
 800a43c:	48001400 	.word	0x48001400
 800a440:	40010400 	.word	0x40010400

0800a444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	691a      	ldr	r2, [r3, #16]
 800a454:	887b      	ldrh	r3, [r7, #2]
 800a456:	4013      	ands	r3, r2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a45c:	2301      	movs	r3, #1
 800a45e:	73fb      	strb	r3, [r7, #15]
 800a460:	e001      	b.n	800a466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a462:	2300      	movs	r3, #0
 800a464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a466:	7bfb      	ldrb	r3, [r7, #15]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	807b      	strh	r3, [r7, #2]
 800a480:	4613      	mov	r3, r2
 800a482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a484:	787b      	ldrb	r3, [r7, #1]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a48a:	887a      	ldrh	r2, [r7, #2]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a490:	e002      	b.n	800a498 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a492:	887a      	ldrh	r2, [r7, #2]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a4ae:	4b08      	ldr	r3, [pc, #32]	; (800a4d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a4b0:	695a      	ldr	r2, [r3, #20]
 800a4b2:	88fb      	ldrh	r3, [r7, #6]
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d006      	beq.n	800a4c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a4ba:	4a05      	ldr	r2, [pc, #20]	; (800a4d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7f9 fa24 	bl	8003910 <HAL_GPIO_EXTI_Callback>
  }
}
 800a4c8:	bf00      	nop
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	40010400 	.word	0x40010400

0800a4d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e08d      	b.n	800a602 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d106      	bne.n	800a500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7fb f946 	bl	800578c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2224      	movs	r2, #36	; 0x24
 800a504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f022 0201 	bic.w	r2, r2, #1
 800a516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a524:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689a      	ldr	r2, [r3, #8]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a534:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d107      	bne.n	800a54e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689a      	ldr	r2, [r3, #8]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a54a:	609a      	str	r2, [r3, #8]
 800a54c:	e006      	b.n	800a55c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a55a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	2b02      	cmp	r3, #2
 800a562:	d108      	bne.n	800a576 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a572:	605a      	str	r2, [r3, #4]
 800a574:	e007      	b.n	800a586 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a584:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	6812      	ldr	r2, [r2, #0]
 800a590:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a598:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68da      	ldr	r2, [r3, #12]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	691a      	ldr	r2, [r3, #16]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	430a      	orrs	r2, r1
 800a5c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	69d9      	ldr	r1, [r3, #28]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a1a      	ldr	r2, [r3, #32]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f042 0201 	orr.w	r2, r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b20      	cmp	r3, #32
 800a61e:	d138      	bne.n	800a692 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a626:	2b01      	cmp	r3, #1
 800a628:	d101      	bne.n	800a62e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a62a:	2302      	movs	r3, #2
 800a62c:	e032      	b.n	800a694 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2224      	movs	r2, #36	; 0x24
 800a63a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f022 0201 	bic.w	r2, r2, #1
 800a64c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a65c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6819      	ldr	r1, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f042 0201 	orr.w	r2, r2, #1
 800a67c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2220      	movs	r2, #32
 800a682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	e000      	b.n	800a694 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a692:	2302      	movs	r3, #2
  }
}
 800a694:	4618      	mov	r0, r3
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b20      	cmp	r3, #32
 800a6b4:	d139      	bne.n	800a72a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d101      	bne.n	800a6c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	e033      	b.n	800a72c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2224      	movs	r2, #36	; 0x24
 800a6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f022 0201 	bic.w	r2, r2, #1
 800a6e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a6f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	021b      	lsls	r3, r3, #8
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f042 0201 	orr.w	r2, r2, #1
 800a714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2220      	movs	r2, #32
 800a71a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	e000      	b.n	800a72c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a72a:	2302      	movs	r3, #2
  }
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	e0c0      	b.n	800a8cc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800a750:	b2db      	uxtb	r3, r3
 800a752:	2b00      	cmp	r3, #0
 800a754:	d106      	bne.n	800a764 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f00b fec8 	bl	80164f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2203      	movs	r2, #3
 800a768:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4618      	mov	r0, r3
 800a772:	f005 fe1e 	bl	80103b2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a776:	2300      	movs	r3, #0
 800a778:	73fb      	strb	r3, [r7, #15]
 800a77a:	e03e      	b.n	800a7fa <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a77c:	7bfa      	ldrb	r2, [r7, #15]
 800a77e:	6879      	ldr	r1, [r7, #4]
 800a780:	4613      	mov	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	00db      	lsls	r3, r3, #3
 800a788:	440b      	add	r3, r1
 800a78a:	3311      	adds	r3, #17
 800a78c:	2201      	movs	r2, #1
 800a78e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a790:	7bfa      	ldrb	r2, [r7, #15]
 800a792:	6879      	ldr	r1, [r7, #4]
 800a794:	4613      	mov	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	440b      	add	r3, r1
 800a79e:	3310      	adds	r3, #16
 800a7a0:	7bfa      	ldrb	r2, [r7, #15]
 800a7a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a7a4:	7bfa      	ldrb	r2, [r7, #15]
 800a7a6:	6879      	ldr	r1, [r7, #4]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	440b      	add	r3, r1
 800a7b2:	3313      	adds	r3, #19
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a7b8:	7bfa      	ldrb	r2, [r7, #15]
 800a7ba:	6879      	ldr	r1, [r7, #4]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	00db      	lsls	r3, r3, #3
 800a7c4:	440b      	add	r3, r1
 800a7c6:	3320      	adds	r3, #32
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a7cc:	7bfa      	ldrb	r2, [r7, #15]
 800a7ce:	6879      	ldr	r1, [r7, #4]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	440b      	add	r3, r1
 800a7da:	3324      	adds	r3, #36	; 0x24
 800a7dc:	2200      	movs	r2, #0
 800a7de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
 800a7e2:	6879      	ldr	r1, [r7, #4]
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4413      	add	r3, r2
 800a7ec:	00db      	lsls	r3, r3, #3
 800a7ee:	440b      	add	r3, r1
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	73fb      	strb	r3, [r7, #15]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	791b      	ldrb	r3, [r3, #4]
 800a7fe:	7bfa      	ldrb	r2, [r7, #15]
 800a800:	429a      	cmp	r2, r3
 800a802:	d3bb      	bcc.n	800a77c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a804:	2300      	movs	r3, #0
 800a806:	73fb      	strb	r3, [r7, #15]
 800a808:	e044      	b.n	800a894 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a80a:	7bfa      	ldrb	r2, [r7, #15]
 800a80c:	6879      	ldr	r1, [r7, #4]
 800a80e:	4613      	mov	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	00db      	lsls	r3, r3, #3
 800a816:	440b      	add	r3, r1
 800a818:	f203 1351 	addw	r3, r3, #337	; 0x151
 800a81c:	2200      	movs	r2, #0
 800a81e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a820:	7bfa      	ldrb	r2, [r7, #15]
 800a822:	6879      	ldr	r1, [r7, #4]
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	440b      	add	r3, r1
 800a82e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a832:	7bfa      	ldrb	r2, [r7, #15]
 800a834:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a836:	7bfa      	ldrb	r2, [r7, #15]
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	4613      	mov	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	00db      	lsls	r3, r3, #3
 800a842:	440b      	add	r3, r1
 800a844:	f203 1353 	addw	r3, r3, #339	; 0x153
 800a848:	2200      	movs	r2, #0
 800a84a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a84c:	7bfa      	ldrb	r2, [r7, #15]
 800a84e:	6879      	ldr	r1, [r7, #4]
 800a850:	4613      	mov	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	00db      	lsls	r3, r3, #3
 800a858:	440b      	add	r3, r1
 800a85a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a862:	7bfa      	ldrb	r2, [r7, #15]
 800a864:	6879      	ldr	r1, [r7, #4]
 800a866:	4613      	mov	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	440b      	add	r3, r1
 800a870:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a874:	2200      	movs	r2, #0
 800a876:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a878:	7bfa      	ldrb	r2, [r7, #15]
 800a87a:	6879      	ldr	r1, [r7, #4]
 800a87c:	4613      	mov	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	00db      	lsls	r3, r3, #3
 800a884:	440b      	add	r3, r1
 800a886:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a88a:	2200      	movs	r2, #0
 800a88c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	3301      	adds	r3, #1
 800a892:	73fb      	strb	r3, [r7, #15]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	791b      	ldrb	r3, [r3, #4]
 800a898:	7bfa      	ldrb	r2, [r7, #15]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d3b5      	bcc.n	800a80a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6818      	ldr	r0, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a8aa:	f005 fd9d 	bl	80103e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	7a9b      	ldrb	r3, [r3, #10]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d102      	bne.n	800a8ca <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f001 fc41 	bl	800c14c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d101      	bne.n	800a8ea <HAL_PCD_Start+0x16>
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	e012      	b.n	800a910 <HAL_PCD_Start+0x3c>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f005 fd44 	bl	8010384 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4618      	mov	r0, r3
 800a902:	f008 f804 	bl	801290e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4618      	mov	r0, r3
 800a926:	f008 f809 	bl	801293c <USB_ReadInterrupts>
 800a92a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d003      	beq.n	800a93e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fb04 	bl	800af44 <PCD_EP_ISR_Handler>

    return;
 800a93c:	e110      	b.n	800ab60 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a944:	2b00      	cmp	r3, #0
 800a946:	d013      	beq.n	800a970 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a950:	b29a      	uxth	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a95a:	b292      	uxth	r2, r2
 800a95c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f00b fe58 	bl	8016616 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a966:	2100      	movs	r1, #0
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f8fc 	bl	800ab66 <HAL_PCD_SetAddress>

    return;
 800a96e:	e0f7      	b.n	800ab60 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00c      	beq.n	800a994 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a982:	b29a      	uxth	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a98c:	b292      	uxth	r2, r2
 800a98e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a992:	e0e5      	b.n	800ab60 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00c      	beq.n	800a9b8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9b0:	b292      	uxth	r2, r2
 800a9b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a9b6:	e0d3      	b.n	800ab60 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d034      	beq.n	800aa2c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f022 0204 	bic.w	r2, r2, #4
 800a9d4:	b292      	uxth	r2, r2
 800a9d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f022 0208 	bic.w	r2, r2, #8
 800a9ec:	b292      	uxth	r2, r2
 800a9ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d107      	bne.n	800aa0c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800aa04:	2100      	movs	r1, #0
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f00b fff8 	bl	80169fc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f00b fe3b 	bl	8016688 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa24:	b292      	uxth	r2, r2
 800aa26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800aa2a:	e099      	b.n	800ab60 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d027      	beq.n	800aa86 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f042 0208 	orr.w	r2, r2, #8
 800aa48:	b292      	uxth	r2, r2
 800aa4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa60:	b292      	uxth	r2, r2
 800aa62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f042 0204 	orr.w	r2, r2, #4
 800aa78:	b292      	uxth	r2, r2
 800aa7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f00b fde8 	bl	8016654 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800aa84:	e06c      	b.n	800ab60 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d040      	beq.n	800ab12 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aaa2:	b292      	uxth	r2, r2
 800aaa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d12b      	bne.n	800ab0a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f042 0204 	orr.w	r2, r2, #4
 800aac4:	b292      	uxth	r2, r2
 800aac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f042 0208 	orr.w	r2, r2, #8
 800aadc:	b292      	uxth	r2, r2
 800aade:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	089b      	lsrs	r3, r3, #2
 800aaf6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ab00:	2101      	movs	r1, #1
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f00b ff7a 	bl	80169fc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800ab08:	e02a      	b.n	800ab60 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f00b fda2 	bl	8016654 <HAL_PCD_SuspendCallback>
    return;
 800ab10:	e026      	b.n	800ab60 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00f      	beq.n	800ab3c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ab2e:	b292      	uxth	r2, r2
 800ab30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f00b fd60 	bl	80165fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800ab3a:	e011      	b.n	800ab60 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00c      	beq.n	800ab60 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab58:	b292      	uxth	r2, r2
 800ab5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800ab5e:	bf00      	nop
  }
}
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d101      	bne.n	800ab80 <HAL_PCD_SetAddress+0x1a>
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	e012      	b.n	800aba6 <HAL_PCD_SetAddress+0x40>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	78fa      	ldrb	r2, [r7, #3]
 800ab8c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	78fa      	ldrb	r2, [r7, #3]
 800ab94:	4611      	mov	r1, r2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f007 fea5 	bl	80128e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b084      	sub	sp, #16
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	4608      	mov	r0, r1
 800abb8:	4611      	mov	r1, r2
 800abba:	461a      	mov	r2, r3
 800abbc:	4603      	mov	r3, r0
 800abbe:	70fb      	strb	r3, [r7, #3]
 800abc0:	460b      	mov	r3, r1
 800abc2:	803b      	strh	r3, [r7, #0]
 800abc4:	4613      	mov	r3, r2
 800abc6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800abcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	da0e      	bge.n	800abf2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	f003 0207 	and.w	r2, r3, #7
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	00db      	lsls	r3, r3, #3
 800abe2:	3310      	adds	r3, #16
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	4413      	add	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2201      	movs	r2, #1
 800abee:	705a      	strb	r2, [r3, #1]
 800abf0:	e00e      	b.n	800ac10 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abf2:	78fb      	ldrb	r3, [r7, #3]
 800abf4:	f003 0207 	and.w	r2, r3, #7
 800abf8:	4613      	mov	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	4413      	add	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ac10:	78fb      	ldrb	r3, [r7, #3]
 800ac12:	f003 0307 	and.w	r3, r3, #7
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ac1c:	883a      	ldrh	r2, [r7, #0]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	78ba      	ldrb	r2, [r7, #2]
 800ac26:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ac28:	78bb      	ldrb	r3, [r7, #2]
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d102      	bne.n	800ac34 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d101      	bne.n	800ac42 <HAL_PCD_EP_Open+0x94>
 800ac3e:	2302      	movs	r3, #2
 800ac40:	e00e      	b.n	800ac60 <HAL_PCD_EP_Open+0xb2>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68f9      	ldr	r1, [r7, #12]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f005 fbe7 	bl	8010424 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800ac5e:	7afb      	ldrb	r3, [r7, #11]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ac74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	da0e      	bge.n	800ac9a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac7c:	78fb      	ldrb	r3, [r7, #3]
 800ac7e:	f003 0207 	and.w	r2, r3, #7
 800ac82:	4613      	mov	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4413      	add	r3, r2
 800ac88:	00db      	lsls	r3, r3, #3
 800ac8a:	3310      	adds	r3, #16
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4413      	add	r3, r2
 800ac90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2201      	movs	r2, #1
 800ac96:	705a      	strb	r2, [r3, #1]
 800ac98:	e00e      	b.n	800acb8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac9a:	78fb      	ldrb	r3, [r7, #3]
 800ac9c:	f003 0207 	and.w	r2, r3, #7
 800aca0:	4613      	mov	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	4413      	add	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800acb8:	78fb      	ldrb	r3, [r7, #3]
 800acba:	f003 0307 	and.w	r3, r3, #7
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800acca:	2b01      	cmp	r3, #1
 800accc:	d101      	bne.n	800acd2 <HAL_PCD_EP_Close+0x6a>
 800acce:	2302      	movs	r3, #2
 800acd0:	e00e      	b.n	800acf0 <HAL_PCD_EP_Close+0x88>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68f9      	ldr	r1, [r7, #12]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f005 ff63 	bl	8010bac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	607a      	str	r2, [r7, #4]
 800ad02:	603b      	str	r3, [r7, #0]
 800ad04:	460b      	mov	r3, r1
 800ad06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad08:	7afb      	ldrb	r3, [r7, #11]
 800ad0a:	f003 0207 	and.w	r2, r3, #7
 800ad0e:	4613      	mov	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	00db      	lsls	r3, r3, #3
 800ad16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	2200      	movs	r2, #0
 800ad36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad38:	7afb      	ldrb	r3, [r7, #11]
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	6979      	ldr	r1, [r7, #20]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f006 f91b 	bl	8010f86 <USB_EPStartXfer>

  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3718      	adds	r7, #24
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b083      	sub	sp, #12
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	460b      	mov	r3, r1
 800ad64:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ad66:	78fb      	ldrb	r3, [r7, #3]
 800ad68:	f003 0207 	and.w	r2, r3, #7
 800ad6c:	6879      	ldr	r1, [r7, #4]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	440b      	add	r3, r1
 800ad78:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800ad7c:	681b      	ldr	r3, [r3, #0]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b086      	sub	sp, #24
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	60f8      	str	r0, [r7, #12]
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	603b      	str	r3, [r7, #0]
 800ad96:	460b      	mov	r3, r1
 800ad98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad9a:	7afb      	ldrb	r3, [r7, #11]
 800ad9c:	f003 0207 	and.w	r2, r3, #7
 800ada0:	4613      	mov	r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	4413      	add	r3, r2
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	3310      	adds	r3, #16
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	4413      	add	r3, r2
 800adae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	2200      	movs	r2, #0
 800adce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	2201      	movs	r2, #1
 800add4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800add6:	7afb      	ldrb	r3, [r7, #11]
 800add8:	f003 0307 	and.w	r3, r3, #7
 800addc:	b2da      	uxtb	r2, r3
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	6979      	ldr	r1, [r7, #20]
 800ade8:	4618      	mov	r0, r3
 800adea:	f006 f8cc 	bl	8010f86 <USB_EPStartXfer>

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3718      	adds	r7, #24
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	460b      	mov	r3, r1
 800ae02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ae04:	78fb      	ldrb	r3, [r7, #3]
 800ae06:	f003 0307 	and.w	r3, r3, #7
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	7912      	ldrb	r2, [r2, #4]
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d901      	bls.n	800ae16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e03e      	b.n	800ae94 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	da0e      	bge.n	800ae3c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae1e:	78fb      	ldrb	r3, [r7, #3]
 800ae20:	f003 0207 	and.w	r2, r3, #7
 800ae24:	4613      	mov	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4413      	add	r3, r2
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	3310      	adds	r3, #16
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	4413      	add	r3, r2
 800ae32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2201      	movs	r2, #1
 800ae38:	705a      	strb	r2, [r3, #1]
 800ae3a:	e00c      	b.n	800ae56 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ae3c:	78fa      	ldrb	r2, [r7, #3]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	00db      	lsls	r3, r3, #3
 800ae46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae5c:	78fb      	ldrb	r3, [r7, #3]
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d101      	bne.n	800ae76 <HAL_PCD_EP_SetStall+0x7e>
 800ae72:	2302      	movs	r3, #2
 800ae74:	e00e      	b.n	800ae94 <HAL_PCD_EP_SetStall+0x9c>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68f9      	ldr	r1, [r7, #12]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f007 fc2f 	bl	80126e8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	460b      	mov	r3, r1
 800aea6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800aea8:	78fb      	ldrb	r3, [r7, #3]
 800aeaa:	f003 030f 	and.w	r3, r3, #15
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	7912      	ldrb	r2, [r2, #4]
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d901      	bls.n	800aeba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e040      	b.n	800af3c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800aeba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	da0e      	bge.n	800aee0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aec2:	78fb      	ldrb	r3, [r7, #3]
 800aec4:	f003 0207 	and.w	r2, r3, #7
 800aec8:	4613      	mov	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	3310      	adds	r3, #16
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	4413      	add	r3, r2
 800aed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2201      	movs	r2, #1
 800aedc:	705a      	strb	r2, [r3, #1]
 800aede:	e00e      	b.n	800aefe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aee0:	78fb      	ldrb	r3, [r7, #3]
 800aee2:	f003 0207 	and.w	r2, r3, #7
 800aee6:	4613      	mov	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	00db      	lsls	r3, r3, #3
 800aeee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	4413      	add	r3, r2
 800aef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800af04:	78fb      	ldrb	r3, [r7, #3]
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800af16:	2b01      	cmp	r3, #1
 800af18:	d101      	bne.n	800af1e <HAL_PCD_EP_ClrStall+0x82>
 800af1a:	2302      	movs	r3, #2
 800af1c:	e00e      	b.n	800af3c <HAL_PCD_EP_ClrStall+0xa0>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68f9      	ldr	r1, [r7, #12]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f007 fc2c 	bl	801278a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b096      	sub	sp, #88	; 0x58
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800af4c:	e3ae      	b.n	800b6ac <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800af5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	f003 030f 	and.w	r3, r3, #15
 800af64:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800af68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f040 8170 	bne.w	800b252 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800af72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af76:	f003 0310 	and.w	r3, r3, #16
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d14d      	bne.n	800b01a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	b29b      	uxth	r3, r3
 800af86:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800af8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af8e:	81fb      	strh	r3, [r7, #14]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	89fb      	ldrh	r3, [r7, #14]
 800af96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3310      	adds	r3, #16
 800afa6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	461a      	mov	r2, r3
 800afb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	4413      	add	r3, r2
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	6812      	ldr	r2, [r2, #0]
 800afc0:	4413      	add	r3, r2
 800afc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afc6:	881b      	ldrh	r3, [r3, #0]
 800afc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800afcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800afd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afd2:	695a      	ldr	r2, [r3, #20]
 800afd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afd6:	69db      	ldr	r3, [r3, #28]
 800afd8:	441a      	add	r2, r3
 800afda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afdc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800afde:	2100      	movs	r1, #0
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f00b faf0 	bl	80165c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	7b1b      	ldrb	r3, [r3, #12]
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	f000 835d 	beq.w	800b6ac <PCD_EP_ISR_Handler+0x768>
 800aff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f040 8358 	bne.w	800b6ac <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	7b1b      	ldrb	r3, [r3, #12]
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b006:	b2da      	uxtb	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	b292      	uxth	r2, r2
 800b00e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	731a      	strb	r2, [r3, #12]
 800b018:	e348      	b.n	800b6ac <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b020:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b02c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b034:	2b00      	cmp	r3, #0
 800b036:	d032      	beq.n	800b09e <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b040:	b29b      	uxth	r3, r3
 800b042:	461a      	mov	r2, r3
 800b044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	00db      	lsls	r3, r3, #3
 800b04a:	4413      	add	r3, r2
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	6812      	ldr	r2, [r2, #0]
 800b050:	4413      	add	r3, r2
 800b052:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b05c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b05e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6818      	ldr	r0, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800b06a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b06c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b06e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b070:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b072:	b29b      	uxth	r3, r3
 800b074:	f007 fcb4 	bl	80129e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	b29a      	uxth	r2, r3
 800b080:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b084:	4013      	ands	r3, r2
 800b086:	823b      	strh	r3, [r7, #16]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	8a3a      	ldrh	r2, [r7, #16]
 800b08e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b092:	b292      	uxth	r2, r2
 800b094:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f00b fa68 	bl	801656c <HAL_PCD_SetupStageCallback>
 800b09c:	e306      	b.n	800b6ac <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b09e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f280 8302 	bge.w	800b6ac <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	83fb      	strh	r3, [r7, #30]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	8bfa      	ldrh	r2, [r7, #30]
 800b0be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b0c2:	b292      	uxth	r2, r2
 800b0c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	00db      	lsls	r3, r3, #3
 800b0d8:	4413      	add	r3, r2
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	6812      	ldr	r2, [r2, #0]
 800b0de:	4413      	add	r3, r2
 800b0e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b0ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b0ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f0:	69db      	ldr	r3, [r3, #28]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d019      	beq.n	800b12a <PCD_EP_ISR_Handler+0x1e6>
 800b0f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d015      	beq.n	800b12a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6818      	ldr	r0, [r3, #0]
 800b102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b104:	6959      	ldr	r1, [r3, #20]
 800b106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b108:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b10a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b10c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b10e:	b29b      	uxth	r3, r3
 800b110:	f007 fc66 	bl	80129e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b116:	695a      	ldr	r2, [r3, #20]
 800b118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b11a:	69db      	ldr	r3, [r3, #28]
 800b11c:	441a      	add	r2, r3
 800b11e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b120:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b122:	2100      	movs	r1, #0
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f00b fa33 	bl	8016590 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800b134:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f040 82b5 	bne.w	800b6ac <PCD_EP_ISR_Handler+0x768>
 800b142:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b146:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b14a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b14e:	f000 82ad 	beq.w	800b6ac <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	61bb      	str	r3, [r7, #24]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b160:	b29b      	uxth	r3, r3
 800b162:	461a      	mov	r2, r3
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	4413      	add	r3, r2
 800b168:	61bb      	str	r3, [r7, #24]
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b170:	617b      	str	r3, [r7, #20]
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	881b      	ldrh	r3, [r3, #0]
 800b176:	b29b      	uxth	r3, r3
 800b178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	801a      	strh	r2, [r3, #0]
 800b182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	2b3e      	cmp	r3, #62	; 0x3e
 800b188:	d91d      	bls.n	800b1c6 <PCD_EP_ISR_Handler+0x282>
 800b18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	095b      	lsrs	r3, r3, #5
 800b190:	647b      	str	r3, [r7, #68]	; 0x44
 800b192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	f003 031f 	and.w	r3, r3, #31
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d102      	bne.n	800b1a4 <PCD_EP_ISR_Handler+0x260>
 800b19e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	647b      	str	r3, [r7, #68]	; 0x44
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	881b      	ldrh	r3, [r3, #0]
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	029b      	lsls	r3, r3, #10
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	801a      	strh	r2, [r3, #0]
 800b1c4:	e026      	b.n	800b214 <PCD_EP_ISR_Handler+0x2d0>
 800b1c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d10a      	bne.n	800b1e4 <PCD_EP_ISR_Handler+0x2a0>
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	801a      	strh	r2, [r3, #0]
 800b1e2:	e017      	b.n	800b214 <PCD_EP_ISR_Handler+0x2d0>
 800b1e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	085b      	lsrs	r3, r3, #1
 800b1ea:	647b      	str	r3, [r7, #68]	; 0x44
 800b1ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	f003 0301 	and.w	r3, r3, #1
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d002      	beq.n	800b1fe <PCD_EP_ISR_Handler+0x2ba>
 800b1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	647b      	str	r3, [r7, #68]	; 0x44
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	b29a      	uxth	r2, r3
 800b204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b206:	b29b      	uxth	r3, r3
 800b208:	029b      	lsls	r3, r3, #10
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	4313      	orrs	r3, r2
 800b20e:	b29a      	uxth	r2, r3
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b224:	827b      	strh	r3, [r7, #18]
 800b226:	8a7b      	ldrh	r3, [r7, #18]
 800b228:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b22c:	827b      	strh	r3, [r7, #18]
 800b22e:	8a7b      	ldrh	r3, [r7, #18]
 800b230:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b234:	827b      	strh	r3, [r7, #18]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	8a7b      	ldrh	r3, [r7, #18]
 800b23c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	8013      	strh	r3, [r2, #0]
 800b250:	e22c      	b.n	800b6ac <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b266:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f280 80f6 	bge.w	800b45c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	b29a      	uxth	r2, r3
 800b282:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b286:	4013      	ands	r3, r2
 800b288:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	461a      	mov	r2, r3
 800b292:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4413      	add	r3, r2
 800b29a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800b29e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b2a2:	b292      	uxth	r2, r2
 800b2a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b2a6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	4413      	add	r3, r2
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b2bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2be:	7b1b      	ldrb	r3, [r3, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d123      	bne.n	800b30c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	00db      	lsls	r3, r3, #3
 800b2d6:	4413      	add	r3, r2
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	6812      	ldr	r2, [r2, #0]
 800b2dc:	4413      	add	r3, r2
 800b2de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800b2ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 808e 	beq.w	800b412 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2fc:	6959      	ldr	r1, [r3, #20]
 800b2fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b300:	88da      	ldrh	r2, [r3, #6]
 800b302:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b306:	f007 fb6b 	bl	80129e0 <USB_ReadPMA>
 800b30a:	e082      	b.n	800b412 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b30c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b30e:	78db      	ldrb	r3, [r3, #3]
 800b310:	2b02      	cmp	r3, #2
 800b312:	d10a      	bne.n	800b32a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b314:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b318:	461a      	mov	r2, r3
 800b31a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f9d3 	bl	800b6c8 <HAL_PCD_EP_DB_Receive>
 800b322:	4603      	mov	r3, r0
 800b324:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b328:	e073      	b.n	800b412 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	461a      	mov	r2, r3
 800b330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4413      	add	r3, r2
 800b338:	881b      	ldrh	r3, [r3, #0]
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b344:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	461a      	mov	r2, r3
 800b34e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	441a      	add	r2, r3
 800b356:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b35a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b35e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b366:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	461a      	mov	r2, r3
 800b374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	881b      	ldrh	r3, [r3, #0]
 800b37e:	b29b      	uxth	r3, r3
 800b380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d022      	beq.n	800b3ce <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b390:	b29b      	uxth	r3, r3
 800b392:	461a      	mov	r2, r3
 800b394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	4413      	add	r3, r2
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	6812      	ldr	r2, [r2, #0]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b3a6:	881b      	ldrh	r3, [r3, #0]
 800b3a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800b3b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d02c      	beq.n	800b412 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6818      	ldr	r0, [r3, #0]
 800b3bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3be:	6959      	ldr	r1, [r3, #20]
 800b3c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3c2:	891a      	ldrh	r2, [r3, #8]
 800b3c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b3c8:	f007 fb0a 	bl	80129e0 <USB_ReadPMA>
 800b3cc:	e021      	b.n	800b412 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	461a      	mov	r2, r3
 800b3da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	4413      	add	r3, r2
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	6812      	ldr	r2, [r2, #0]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b3ec:	881b      	ldrh	r3, [r3, #0]
 800b3ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800b3f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d009      	beq.n	800b412 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b404:	6959      	ldr	r1, [r3, #20]
 800b406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b408:	895a      	ldrh	r2, [r3, #10]
 800b40a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b40e:	f007 fae7 	bl	80129e0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800b412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b414:	69da      	ldr	r2, [r3, #28]
 800b416:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b41a:	441a      	add	r2, r3
 800b41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b41e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b422:	695a      	ldr	r2, [r3, #20]
 800b424:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b428:	441a      	add	r2, r3
 800b42a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b42c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b42e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d005      	beq.n	800b442 <PCD_EP_ISR_Handler+0x4fe>
 800b436:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800b43a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d206      	bcs.n	800b450 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	4619      	mov	r1, r3
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f00b f8a1 	bl	8016590 <HAL_PCD_DataOutStageCallback>
 800b44e:	e005      	b.n	800b45c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b456:	4618      	mov	r0, r3
 800b458:	f005 fd95 	bl	8010f86 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800b45c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 8121 	beq.w	800b6ac <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800b46a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	3310      	adds	r3, #16
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	4413      	add	r3, r2
 800b47c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	b29b      	uxth	r3, r3
 800b490:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b498:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	441a      	add	r2, r3
 800b4aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b4ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800b4ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4bc:	78db      	ldrb	r3, [r3, #3]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	f040 80a2 	bne.w	800b608 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800b4c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800b4ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4cc:	7b1b      	ldrb	r3, [r3, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 8093 	beq.w	800b5fa <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b4d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d046      	beq.n	800b56e <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b4e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4e2:	785b      	ldrb	r3, [r3, #1]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d126      	bne.n	800b536 <PCD_EP_ISR_Handler+0x5f2>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	4413      	add	r3, r2
 800b4fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	00da      	lsls	r2, r3, #3
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	4413      	add	r3, r2
 800b50a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b50e:	623b      	str	r3, [r7, #32]
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	b29b      	uxth	r3, r3
 800b516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	6a3b      	ldr	r3, [r7, #32]
 800b51e:	801a      	strh	r2, [r3, #0]
 800b520:	6a3b      	ldr	r3, [r7, #32]
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	b29b      	uxth	r3, r3
 800b526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b52a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b52e:	b29a      	uxth	r2, r3
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	801a      	strh	r2, [r3, #0]
 800b534:	e061      	b.n	800b5fa <PCD_EP_ISR_Handler+0x6b6>
 800b536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b538:	785b      	ldrb	r3, [r3, #1]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d15d      	bne.n	800b5fa <PCD_EP_ISR_Handler+0x6b6>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	461a      	mov	r2, r3
 800b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b552:	4413      	add	r3, r2
 800b554:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	00da      	lsls	r2, r3, #3
 800b55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55e:	4413      	add	r3, r2
 800b560:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b564:	62bb      	str	r3, [r7, #40]	; 0x28
 800b566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b568:	2200      	movs	r2, #0
 800b56a:	801a      	strh	r2, [r3, #0]
 800b56c:	e045      	b.n	800b5fa <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b576:	785b      	ldrb	r3, [r3, #1]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d126      	bne.n	800b5ca <PCD_EP_ISR_Handler+0x686>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	637b      	str	r3, [r7, #52]	; 0x34
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	461a      	mov	r2, r3
 800b58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b590:	4413      	add	r3, r2
 800b592:	637b      	str	r3, [r7, #52]	; 0x34
 800b594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	00da      	lsls	r2, r3, #3
 800b59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59c:	4413      	add	r3, r2
 800b59e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5a2:	633b      	str	r3, [r7, #48]	; 0x30
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a6:	881b      	ldrh	r3, [r3, #0]
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b2:	801a      	strh	r2, [r3, #0]
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b6:	881b      	ldrh	r3, [r3, #0]
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5c2:	b29a      	uxth	r2, r3
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c6:	801a      	strh	r2, [r3, #0]
 800b5c8:	e017      	b.n	800b5fa <PCD_EP_ISR_Handler+0x6b6>
 800b5ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5cc:	785b      	ldrb	r3, [r3, #1]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d113      	bne.n	800b5fa <PCD_EP_ISR_Handler+0x6b6>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	461a      	mov	r2, r3
 800b5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e0:	4413      	add	r3, r2
 800b5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	00da      	lsls	r2, r3, #3
 800b5ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ec:	4413      	add	r3, r2
 800b5ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f00a ffe0 	bl	80165c6 <HAL_PCD_DataInStageCallback>
 800b606:	e051      	b.n	800b6ac <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800b608:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b60c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b610:	2b00      	cmp	r3, #0
 800b612:	d144      	bne.n	800b69e <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	461a      	mov	r2, r3
 800b620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	00db      	lsls	r3, r3, #3
 800b626:	4413      	add	r3, r2
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	6812      	ldr	r2, [r2, #0]
 800b62c:	4413      	add	r3, r2
 800b62e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b632:	881b      	ldrh	r3, [r3, #0]
 800b634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b638:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800b63c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b63e:	699a      	ldr	r2, [r3, #24]
 800b640:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b644:	429a      	cmp	r2, r3
 800b646:	d907      	bls.n	800b658 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800b648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b64a:	699a      	ldr	r2, [r3, #24]
 800b64c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b650:	1ad2      	subs	r2, r2, r3
 800b652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b654:	619a      	str	r2, [r3, #24]
 800b656:	e002      	b.n	800b65e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800b658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b65a:	2200      	movs	r2, #0
 800b65c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800b65e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d106      	bne.n	800b674 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f00a ffaa 	bl	80165c6 <HAL_PCD_DataInStageCallback>
 800b672:	e01b      	b.n	800b6ac <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800b674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b676:	695a      	ldr	r2, [r3, #20]
 800b678:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b67c:	441a      	add	r2, r3
 800b67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b680:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800b682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b684:	69da      	ldr	r2, [r3, #28]
 800b686:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b68a:	441a      	add	r2, r3
 800b68c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b68e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b696:	4618      	mov	r0, r3
 800b698:	f005 fc75 	bl	8010f86 <USB_EPStartXfer>
 800b69c:	e006      	b.n	800b6ac <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800b69e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f917 	bl	800b8da <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	b21b      	sxth	r3, r3
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f6ff ac48 	blt.w	800af4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3758      	adds	r7, #88	; 0x58
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b6d6:	88fb      	ldrh	r3, [r7, #6]
 800b6d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d07c      	beq.n	800b7da <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	00db      	lsls	r3, r3, #3
 800b6f2:	4413      	add	r3, r2
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b6fe:	881b      	ldrh	r3, [r3, #0]
 800b700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b704:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	699a      	ldr	r2, [r3, #24]
 800b70a:	8b7b      	ldrh	r3, [r7, #26]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d306      	bcc.n	800b71e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	699a      	ldr	r2, [r3, #24]
 800b714:	8b7b      	ldrh	r3, [r7, #26]
 800b716:	1ad2      	subs	r2, r2, r3
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	619a      	str	r2, [r3, #24]
 800b71c:	e002      	b.n	800b724 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	2200      	movs	r2, #0
 800b722:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	699b      	ldr	r3, [r3, #24]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d123      	bne.n	800b774 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	461a      	mov	r2, r3
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4413      	add	r3, r2
 800b73a:	881b      	ldrh	r3, [r3, #0]
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b746:	833b      	strh	r3, [r7, #24]
 800b748:	8b3b      	ldrh	r3, [r7, #24]
 800b74a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b74e:	833b      	strh	r3, [r7, #24]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	461a      	mov	r2, r3
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	441a      	add	r2, r3
 800b75e:	8b3b      	ldrh	r3, [r7, #24]
 800b760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b770:	b29b      	uxth	r3, r3
 800b772:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b774:	88fb      	ldrh	r3, [r7, #6]
 800b776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d01f      	beq.n	800b7be <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	461a      	mov	r2, r3
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	b29b      	uxth	r3, r3
 800b790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b798:	82fb      	strh	r3, [r7, #22]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	441a      	add	r2, r3
 800b7a8:	8afb      	ldrh	r3, [r7, #22]
 800b7aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b7be:	8b7b      	ldrh	r3, [r7, #26]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 8085 	beq.w	800b8d0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6818      	ldr	r0, [r3, #0]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	6959      	ldr	r1, [r3, #20]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	891a      	ldrh	r2, [r3, #8]
 800b7d2:	8b7b      	ldrh	r3, [r7, #26]
 800b7d4:	f007 f904 	bl	80129e0 <USB_ReadPMA>
 800b7d8:	e07a      	b.n	800b8d0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	4413      	add	r3, r2
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	6812      	ldr	r2, [r2, #0]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7f8:	881b      	ldrh	r3, [r3, #0]
 800b7fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	699a      	ldr	r2, [r3, #24]
 800b804:	8b7b      	ldrh	r3, [r7, #26]
 800b806:	429a      	cmp	r2, r3
 800b808:	d306      	bcc.n	800b818 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	699a      	ldr	r2, [r3, #24]
 800b80e:	8b7b      	ldrh	r3, [r7, #26]
 800b810:	1ad2      	subs	r2, r2, r3
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	619a      	str	r2, [r3, #24]
 800b816:	e002      	b.n	800b81e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	2200      	movs	r2, #0
 800b81c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d123      	bne.n	800b86e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	461a      	mov	r2, r3
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	4413      	add	r3, r2
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	b29b      	uxth	r3, r3
 800b838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b83c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b840:	83fb      	strh	r3, [r7, #30]
 800b842:	8bfb      	ldrh	r3, [r7, #30]
 800b844:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b848:	83fb      	strh	r3, [r7, #30]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	461a      	mov	r2, r3
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	441a      	add	r2, r3
 800b858:	8bfb      	ldrh	r3, [r7, #30]
 800b85a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b85e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b86e:	88fb      	ldrh	r3, [r7, #6]
 800b870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b874:	2b00      	cmp	r3, #0
 800b876:	d11f      	bne.n	800b8b8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	461a      	mov	r2, r3
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b88e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b892:	83bb      	strh	r3, [r7, #28]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	461a      	mov	r2, r3
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	441a      	add	r2, r3
 800b8a2:	8bbb      	ldrh	r3, [r7, #28]
 800b8a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b8b8:	8b7b      	ldrh	r3, [r7, #26]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d008      	beq.n	800b8d0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	6959      	ldr	r1, [r3, #20]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	895a      	ldrh	r2, [r3, #10]
 800b8ca:	8b7b      	ldrh	r3, [r7, #26]
 800b8cc:	f007 f888 	bl	80129e0 <USB_ReadPMA>
    }
  }

  return count;
 800b8d0:	8b7b      	ldrh	r3, [r7, #26]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3720      	adds	r7, #32
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b0a4      	sub	sp, #144	; 0x90
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b8e8:	88fb      	ldrh	r3, [r7, #6]
 800b8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f000 81db 	beq.w	800bcaa <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	461a      	mov	r2, r3
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	00db      	lsls	r3, r3, #3
 800b906:	4413      	add	r3, r2
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	6812      	ldr	r2, [r2, #0]
 800b90c:	4413      	add	r3, r2
 800b90e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b918:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	699a      	ldr	r2, [r3, #24]
 800b920:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b924:	429a      	cmp	r2, r3
 800b926:	d907      	bls.n	800b938 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	699a      	ldr	r2, [r3, #24]
 800b92c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b930:	1ad2      	subs	r2, r2, r3
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	619a      	str	r2, [r3, #24]
 800b936:	e002      	b.n	800b93e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	2200      	movs	r2, #0
 800b93c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	2b00      	cmp	r3, #0
 800b944:	f040 80b9 	bne.w	800baba <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	785b      	ldrb	r3, [r3, #1]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d126      	bne.n	800b99e <HAL_PCD_EP_DB_Transmit+0xc4>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b95e:	b29b      	uxth	r3, r3
 800b960:	461a      	mov	r2, r3
 800b962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b964:	4413      	add	r3, r2
 800b966:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	00da      	lsls	r2, r3, #3
 800b96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b970:	4413      	add	r3, r2
 800b972:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b976:	62bb      	str	r3, [r7, #40]	; 0x28
 800b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97a:	881b      	ldrh	r3, [r3, #0]
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b982:	b29a      	uxth	r2, r3
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	801a      	strh	r2, [r3, #0]
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	881b      	ldrh	r3, [r3, #0]
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b996:	b29a      	uxth	r2, r3
 800b998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99a:	801a      	strh	r2, [r3, #0]
 800b99c:	e01a      	b.n	800b9d4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	785b      	ldrb	r3, [r3, #1]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d116      	bne.n	800b9d4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ba:	4413      	add	r3, r2
 800b9bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	00da      	lsls	r2, r3, #3
 800b9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b9cc:	633b      	str	r3, [r7, #48]	; 0x30
 800b9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	627b      	str	r3, [r7, #36]	; 0x24
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	785b      	ldrb	r3, [r3, #1]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d126      	bne.n	800ba30 <HAL_PCD_EP_DB_Transmit+0x156>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	61fb      	str	r3, [r7, #28]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	61fb      	str	r3, [r7, #28]
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	00da      	lsls	r2, r3, #3
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	4413      	add	r3, r2
 800ba04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba08:	61bb      	str	r3, [r7, #24]
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	801a      	strh	r2, [r3, #0]
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	801a      	strh	r2, [r3, #0]
 800ba2e:	e017      	b.n	800ba60 <HAL_PCD_EP_DB_Transmit+0x186>
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	785b      	ldrb	r3, [r3, #1]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d113      	bne.n	800ba60 <HAL_PCD_EP_DB_Transmit+0x186>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	461a      	mov	r2, r3
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	4413      	add	r3, r2
 800ba48:	627b      	str	r3, [r7, #36]	; 0x24
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	00da      	lsls	r2, r3, #3
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	4413      	add	r3, r2
 800ba54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba58:	623b      	str	r3, [r7, #32]
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	4619      	mov	r1, r3
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f00a fdad 	bl	80165c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ba6c:	88fb      	ldrh	r3, [r7, #6]
 800ba6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 82fa 	beq.w	800c06c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	881b      	ldrh	r3, [r3, #0]
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba92:	82fb      	strh	r3, [r7, #22]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	441a      	add	r2, r3
 800baa2:	8afb      	ldrh	r3, [r7, #22]
 800baa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	8013      	strh	r3, [r2, #0]
 800bab8:	e2d8      	b.n	800c06c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800baba:	88fb      	ldrh	r3, [r7, #6]
 800babc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d021      	beq.n	800bb08 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	461a      	mov	r2, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	881b      	ldrh	r3, [r3, #0]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bade:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	441a      	add	r2, r3
 800baf0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800baf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bafc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	f040 82ac 	bne.w	800c06c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	695a      	ldr	r2, [r3, #20]
 800bb18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bb1c:	441a      	add	r2, r3
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	69da      	ldr	r2, [r3, #28]
 800bb26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bb2a:	441a      	add	r2, r3
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	6a1a      	ldr	r2, [r3, #32]
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d30b      	bcc.n	800bb54 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	6a1a      	ldr	r2, [r3, #32]
 800bb48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb4c:	1ad2      	subs	r2, r2, r3
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	621a      	str	r2, [r3, #32]
 800bb52:	e017      	b.n	800bb84 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	6a1b      	ldr	r3, [r3, #32]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d108      	bne.n	800bb6e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800bb5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bb60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bb6c:	e00a      	b.n	800bb84 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	2200      	movs	r2, #0
 800bb82:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	785b      	ldrb	r3, [r3, #1]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d165      	bne.n	800bc58 <HAL_PCD_EP_DB_Transmit+0x37e>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba0:	4413      	add	r3, r2
 800bba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	00da      	lsls	r2, r3, #3
 800bbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbac:	4413      	add	r3, r2
 800bbae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbb2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb6:	881b      	ldrh	r3, [r3, #0]
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc2:	801a      	strh	r2, [r3, #0]
 800bbc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbc8:	2b3e      	cmp	r3, #62	; 0x3e
 800bbca:	d91d      	bls.n	800bc08 <HAL_PCD_EP_DB_Transmit+0x32e>
 800bbcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbd0:	095b      	lsrs	r3, r3, #5
 800bbd2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbd8:	f003 031f 	and.w	r3, r3, #31
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d102      	bne.n	800bbe6 <HAL_PCD_EP_DB_Transmit+0x30c>
 800bbe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	029b      	lsls	r3, r3, #10
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	801a      	strh	r2, [r3, #0]
 800bc06:	e044      	b.n	800bc92 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800bc08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10a      	bne.n	800bc26 <HAL_PCD_EP_DB_Transmit+0x34c>
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	881b      	ldrh	r3, [r3, #0]
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	801a      	strh	r2, [r3, #0]
 800bc24:	e035      	b.n	800bc92 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800bc26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc2a:	085b      	lsrs	r3, r3, #1
 800bc2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d002      	beq.n	800bc40 <HAL_PCD_EP_DB_Transmit+0x366>
 800bc3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	029b      	lsls	r3, r3, #10
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	801a      	strh	r2, [r3, #0]
 800bc56:	e01c      	b.n	800bc92 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	785b      	ldrb	r3, [r3, #1]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d118      	bne.n	800bc92 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	647b      	str	r3, [r7, #68]	; 0x44
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	461a      	mov	r2, r3
 800bc72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc74:	4413      	add	r3, r2
 800bc76:	647b      	str	r3, [r7, #68]	; 0x44
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	00da      	lsls	r2, r3, #3
 800bc7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc80:	4413      	add	r3, r2
 800bc82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc86:	643b      	str	r3, [r7, #64]	; 0x40
 800bc88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc90:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6818      	ldr	r0, [r3, #0]
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6959      	ldr	r1, [r3, #20]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	891a      	ldrh	r2, [r3, #8]
 800bc9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	f006 fe5a 	bl	801295c <USB_WritePMA>
 800bca8:	e1e0      	b.n	800c06c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	00db      	lsls	r3, r3, #3
 800bcbc:	4413      	add	r3, r2
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	6812      	ldr	r2, [r2, #0]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	699a      	ldr	r2, [r3, #24]
 800bcd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d307      	bcc.n	800bcee <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	699a      	ldr	r2, [r3, #24]
 800bce2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bce6:	1ad2      	subs	r2, r2, r3
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	619a      	str	r2, [r3, #24]
 800bcec:	e002      	b.n	800bcf4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f040 80c0 	bne.w	800be7e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	785b      	ldrb	r3, [r3, #1]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d126      	bne.n	800bd54 <HAL_PCD_EP_DB_Transmit+0x47a>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	461a      	mov	r2, r3
 800bd18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd1a:	4413      	add	r3, r2
 800bd1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	00da      	lsls	r2, r3, #3
 800bd24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd26:	4413      	add	r3, r2
 800bd28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd2c:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd30:	881b      	ldrh	r3, [r3, #0]
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd3c:	801a      	strh	r2, [r3, #0]
 800bd3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd50:	801a      	strh	r2, [r3, #0]
 800bd52:	e01a      	b.n	800bd8a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	785b      	ldrb	r3, [r3, #1]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d116      	bne.n	800bd8a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	667b      	str	r3, [r7, #100]	; 0x64
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd70:	4413      	add	r3, r2
 800bd72:	667b      	str	r3, [r7, #100]	; 0x64
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	00da      	lsls	r2, r3, #3
 800bd7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd82:	663b      	str	r3, [r7, #96]	; 0x60
 800bd84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd86:	2200      	movs	r2, #0
 800bd88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	677b      	str	r3, [r7, #116]	; 0x74
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	785b      	ldrb	r3, [r3, #1]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d12b      	bne.n	800bdf0 <HAL_PCD_EP_DB_Transmit+0x516>
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	461a      	mov	r2, r3
 800bdaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdac:	4413      	add	r3, r2
 800bdae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	00da      	lsls	r2, r3, #3
 800bdb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdb8:	4413      	add	r3, r2
 800bdba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bdbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bdc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bdc6:	881b      	ldrh	r3, [r3, #0]
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bdd4:	801a      	strh	r2, [r3, #0]
 800bdd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bdda:	881b      	ldrh	r3, [r3, #0]
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bde2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bde6:	b29a      	uxth	r2, r3
 800bde8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bdec:	801a      	strh	r2, [r3, #0]
 800bdee:	e017      	b.n	800be20 <HAL_PCD_EP_DB_Transmit+0x546>
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	785b      	ldrb	r3, [r3, #1]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d113      	bne.n	800be20 <HAL_PCD_EP_DB_Transmit+0x546>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be00:	b29b      	uxth	r3, r3
 800be02:	461a      	mov	r2, r3
 800be04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be06:	4413      	add	r3, r2
 800be08:	677b      	str	r3, [r7, #116]	; 0x74
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	00da      	lsls	r2, r3, #3
 800be10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be12:	4413      	add	r3, r2
 800be14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be18:	673b      	str	r3, [r7, #112]	; 0x70
 800be1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be1c:	2200      	movs	r2, #0
 800be1e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	4619      	mov	r1, r3
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f00a fbcd 	bl	80165c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800be2c:	88fb      	ldrh	r3, [r7, #6]
 800be2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be32:	2b00      	cmp	r3, #0
 800be34:	f040 811a 	bne.w	800c06c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	461a      	mov	r2, r3
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	4413      	add	r3, r2
 800be46:	881b      	ldrh	r3, [r3, #0]
 800be48:	b29b      	uxth	r3, r3
 800be4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be52:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	461a      	mov	r2, r3
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	441a      	add	r2, r3
 800be64:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800be68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be78:	b29b      	uxth	r3, r3
 800be7a:	8013      	strh	r3, [r2, #0]
 800be7c:	e0f6      	b.n	800c06c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800be7e:	88fb      	ldrh	r3, [r7, #6]
 800be80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be84:	2b00      	cmp	r3, #0
 800be86:	d121      	bne.n	800becc <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	461a      	mov	r2, r3
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	881b      	ldrh	r3, [r3, #0]
 800be98:	b29b      	uxth	r3, r3
 800be9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bea2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	461a      	mov	r2, r3
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	441a      	add	r2, r3
 800beb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800beb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bec8:	b29b      	uxth	r3, r3
 800beca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	f040 80ca 	bne.w	800c06c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	695a      	ldr	r2, [r3, #20]
 800bedc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bee0:	441a      	add	r2, r3
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	69da      	ldr	r2, [r3, #28]
 800beea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800beee:	441a      	add	r2, r3
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	6a1a      	ldr	r2, [r3, #32]
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	429a      	cmp	r2, r3
 800befe:	d30b      	bcc.n	800bf18 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	6a1a      	ldr	r2, [r3, #32]
 800bf0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf10:	1ad2      	subs	r2, r2, r3
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	621a      	str	r2, [r3, #32]
 800bf16:	e017      	b.n	800bf48 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	6a1b      	ldr	r3, [r3, #32]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d108      	bne.n	800bf32 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800bf20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bf24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bf30:	e00a      	b.n	800bf48 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	657b      	str	r3, [r7, #84]	; 0x54
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	785b      	ldrb	r3, [r3, #1]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d165      	bne.n	800c022 <HAL_PCD_EP_DB_Transmit+0x748>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	461a      	mov	r2, r3
 800bf68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf6a:	4413      	add	r3, r2
 800bf6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	00da      	lsls	r2, r3, #3
 800bf74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf76:	4413      	add	r3, r2
 800bf78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf7c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf8c:	801a      	strh	r2, [r3, #0]
 800bf8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf92:	2b3e      	cmp	r3, #62	; 0x3e
 800bf94:	d91d      	bls.n	800bfd2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800bf96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf9a:	095b      	lsrs	r3, r3, #5
 800bf9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfa2:	f003 031f 	and.w	r3, r3, #31
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d102      	bne.n	800bfb0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800bfaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfac:	3b01      	subs	r3, #1
 800bfae:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfb2:	881b      	ldrh	r3, [r3, #0]
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	029b      	lsls	r3, r3, #10
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfce:	801a      	strh	r2, [r3, #0]
 800bfd0:	e041      	b.n	800c056 <HAL_PCD_EP_DB_Transmit+0x77c>
 800bfd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10a      	bne.n	800bff0 <HAL_PCD_EP_DB_Transmit+0x716>
 800bfda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfec:	801a      	strh	r2, [r3, #0]
 800bfee:	e032      	b.n	800c056 <HAL_PCD_EP_DB_Transmit+0x77c>
 800bff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bff4:	085b      	lsrs	r3, r3, #1
 800bff6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <HAL_PCD_EP_DB_Transmit+0x730>
 800c004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c006:	3301      	adds	r3, #1
 800c008:	66bb      	str	r3, [r7, #104]	; 0x68
 800c00a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c00c:	881b      	ldrh	r3, [r3, #0]
 800c00e:	b29a      	uxth	r2, r3
 800c010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c012:	b29b      	uxth	r3, r3
 800c014:	029b      	lsls	r3, r3, #10
 800c016:	b29b      	uxth	r3, r3
 800c018:	4313      	orrs	r3, r2
 800c01a:	b29a      	uxth	r2, r3
 800c01c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c01e:	801a      	strh	r2, [r3, #0]
 800c020:	e019      	b.n	800c056 <HAL_PCD_EP_DB_Transmit+0x77c>
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	785b      	ldrb	r3, [r3, #1]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d115      	bne.n	800c056 <HAL_PCD_EP_DB_Transmit+0x77c>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c032:	b29b      	uxth	r3, r3
 800c034:	461a      	mov	r2, r3
 800c036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c038:	4413      	add	r3, r2
 800c03a:	657b      	str	r3, [r7, #84]	; 0x54
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	00da      	lsls	r2, r3, #3
 800c042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c044:	4413      	add	r3, r2
 800c046:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c04a:	653b      	str	r3, [r7, #80]	; 0x50
 800c04c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c050:	b29a      	uxth	r2, r3
 800c052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c054:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	6959      	ldr	r1, [r3, #20]
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	895a      	ldrh	r2, [r3, #10]
 800c062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c066:	b29b      	uxth	r3, r3
 800c068:	f006 fc78 	bl	801295c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	461a      	mov	r2, r3
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c086:	82bb      	strh	r3, [r7, #20]
 800c088:	8abb      	ldrh	r3, [r7, #20]
 800c08a:	f083 0310 	eor.w	r3, r3, #16
 800c08e:	82bb      	strh	r3, [r7, #20]
 800c090:	8abb      	ldrh	r3, [r7, #20]
 800c092:	f083 0320 	eor.w	r3, r3, #32
 800c096:	82bb      	strh	r3, [r7, #20]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	461a      	mov	r2, r3
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	441a      	add	r2, r3
 800c0a6:	8abb      	ldrh	r3, [r7, #20]
 800c0a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3790      	adds	r7, #144	; 0x90
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c0c6:	b480      	push	{r7}
 800c0c8:	b087      	sub	sp, #28
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	607b      	str	r3, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	817b      	strh	r3, [r7, #10]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c0d8:	897b      	ldrh	r3, [r7, #10]
 800c0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00b      	beq.n	800c0fc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c0e4:	897b      	ldrh	r3, [r7, #10]
 800c0e6:	f003 0207 	and.w	r2, r3, #7
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	00db      	lsls	r3, r3, #3
 800c0f2:	3310      	adds	r3, #16
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	617b      	str	r3, [r7, #20]
 800c0fa:	e009      	b.n	800c110 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c0fc:	897a      	ldrh	r2, [r7, #10]
 800c0fe:	4613      	mov	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	00db      	lsls	r3, r3, #3
 800c106:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	4413      	add	r3, r2
 800c10e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c110:	893b      	ldrh	r3, [r7, #8]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d107      	bne.n	800c126 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	2200      	movs	r2, #0
 800c11a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	b29a      	uxth	r2, r3
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	80da      	strh	r2, [r3, #6]
 800c124:	e00b      	b.n	800c13e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2201      	movs	r2, #1
 800c12a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	b29a      	uxth	r2, r3
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	0c1b      	lsrs	r3, r3, #16
 800c138:	b29a      	uxth	r2, r3
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	371c      	adds	r7, #28
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b085      	sub	sp, #20
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c170:	b29b      	uxth	r3, r3
 800c172:	f043 0301 	orr.w	r3, r3, #1
 800c176:	b29a      	uxth	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c184:	b29b      	uxth	r3, r3
 800c186:	f043 0302 	orr.w	r3, r3, #2
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3714      	adds	r7, #20
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d141      	bne.n	800c232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c1ae:	4b4b      	ldr	r3, [pc, #300]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c1b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1ba:	d131      	bne.n	800c220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1bc:	4b47      	ldr	r3, [pc, #284]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1c2:	4a46      	ldr	r2, [pc, #280]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1cc:	4b43      	ldr	r3, [pc, #268]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c1d4:	4a41      	ldr	r2, [pc, #260]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c1dc:	4b40      	ldr	r3, [pc, #256]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2232      	movs	r2, #50	; 0x32
 800c1e2:	fb02 f303 	mul.w	r3, r2, r3
 800c1e6:	4a3f      	ldr	r2, [pc, #252]	; (800c2e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ec:	0c9b      	lsrs	r3, r3, #18
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1f2:	e002      	b.n	800c1fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1fa:	4b38      	ldr	r3, [pc, #224]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1fc:	695b      	ldr	r3, [r3, #20]
 800c1fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c206:	d102      	bne.n	800c20e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1f2      	bne.n	800c1f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c20e:	4b33      	ldr	r3, [pc, #204]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c21a:	d158      	bne.n	800c2ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c21c:	2303      	movs	r3, #3
 800c21e:	e057      	b.n	800c2d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c220:	4b2e      	ldr	r3, [pc, #184]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c226:	4a2d      	ldr	r2, [pc, #180]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c22c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c230:	e04d      	b.n	800c2ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c238:	d141      	bne.n	800c2be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c23a:	4b28      	ldr	r3, [pc, #160]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c246:	d131      	bne.n	800c2ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c248:	4b24      	ldr	r3, [pc, #144]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c24a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c24e:	4a23      	ldr	r2, [pc, #140]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c258:	4b20      	ldr	r3, [pc, #128]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c260:	4a1e      	ldr	r2, [pc, #120]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c268:	4b1d      	ldr	r3, [pc, #116]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2232      	movs	r2, #50	; 0x32
 800c26e:	fb02 f303 	mul.w	r3, r2, r3
 800c272:	4a1c      	ldr	r2, [pc, #112]	; (800c2e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c274:	fba2 2303 	umull	r2, r3, r2, r3
 800c278:	0c9b      	lsrs	r3, r3, #18
 800c27a:	3301      	adds	r3, #1
 800c27c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c27e:	e002      	b.n	800c286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	3b01      	subs	r3, #1
 800c284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c286:	4b15      	ldr	r3, [pc, #84]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c288:	695b      	ldr	r3, [r3, #20]
 800c28a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c28e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c292:	d102      	bne.n	800c29a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1f2      	bne.n	800c280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c29a:	4b10      	ldr	r3, [pc, #64]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c29c:	695b      	ldr	r3, [r3, #20]
 800c29e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2a6:	d112      	bne.n	800c2ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e011      	b.n	800c2d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c2ac:	4b0b      	ldr	r3, [pc, #44]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2b2:	4a0a      	ldr	r2, [pc, #40]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c2bc:	e007      	b.n	800c2ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c2be:	4b07      	ldr	r3, [pc, #28]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c2c6:	4a05      	ldr	r2, [pc, #20]	; (800c2dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c2cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr
 800c2dc:	40007000 	.word	0x40007000
 800c2e0:	200001e0 	.word	0x200001e0
 800c2e4:	431bde83 	.word	0x431bde83

0800c2e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800c2ec:	4b05      	ldr	r3, [pc, #20]	; (800c304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	4a04      	ldr	r2, [pc, #16]	; (800c304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c2f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c2f6:	6093      	str	r3, [r2, #8]
}
 800c2f8:	bf00      	nop
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	40007000 	.word	0x40007000

0800c308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b088      	sub	sp, #32
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d101      	bne.n	800c31a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c316:	2301      	movs	r3, #1
 800c318:	e2fe      	b.n	800c918 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	2b00      	cmp	r3, #0
 800c324:	d075      	beq.n	800c412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c326:	4b97      	ldr	r3, [pc, #604]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	f003 030c 	and.w	r3, r3, #12
 800c32e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c330:	4b94      	ldr	r3, [pc, #592]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	f003 0303 	and.w	r3, r3, #3
 800c338:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	2b0c      	cmp	r3, #12
 800c33e:	d102      	bne.n	800c346 <HAL_RCC_OscConfig+0x3e>
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	2b03      	cmp	r3, #3
 800c344:	d002      	beq.n	800c34c <HAL_RCC_OscConfig+0x44>
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	2b08      	cmp	r3, #8
 800c34a:	d10b      	bne.n	800c364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c34c:	4b8d      	ldr	r3, [pc, #564]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c354:	2b00      	cmp	r3, #0
 800c356:	d05b      	beq.n	800c410 <HAL_RCC_OscConfig+0x108>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d157      	bne.n	800c410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	e2d9      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c36c:	d106      	bne.n	800c37c <HAL_RCC_OscConfig+0x74>
 800c36e:	4b85      	ldr	r3, [pc, #532]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a84      	ldr	r2, [pc, #528]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c378:	6013      	str	r3, [r2, #0]
 800c37a:	e01d      	b.n	800c3b8 <HAL_RCC_OscConfig+0xb0>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c384:	d10c      	bne.n	800c3a0 <HAL_RCC_OscConfig+0x98>
 800c386:	4b7f      	ldr	r3, [pc, #508]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a7e      	ldr	r2, [pc, #504]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c38c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c390:	6013      	str	r3, [r2, #0]
 800c392:	4b7c      	ldr	r3, [pc, #496]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a7b      	ldr	r2, [pc, #492]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c39c:	6013      	str	r3, [r2, #0]
 800c39e:	e00b      	b.n	800c3b8 <HAL_RCC_OscConfig+0xb0>
 800c3a0:	4b78      	ldr	r3, [pc, #480]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a77      	ldr	r2, [pc, #476]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c3a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3aa:	6013      	str	r3, [r2, #0]
 800c3ac:	4b75      	ldr	r3, [pc, #468]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a74      	ldr	r2, [pc, #464]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c3b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d013      	beq.n	800c3e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3c0:	f7fa fafe 	bl	80069c0 <HAL_GetTick>
 800c3c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c3c6:	e008      	b.n	800c3da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3c8:	f7fa fafa 	bl	80069c0 <HAL_GetTick>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	1ad3      	subs	r3, r2, r3
 800c3d2:	2b64      	cmp	r3, #100	; 0x64
 800c3d4:	d901      	bls.n	800c3da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	e29e      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c3da:	4b6a      	ldr	r3, [pc, #424]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d0f0      	beq.n	800c3c8 <HAL_RCC_OscConfig+0xc0>
 800c3e6:	e014      	b.n	800c412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3e8:	f7fa faea 	bl	80069c0 <HAL_GetTick>
 800c3ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c3ee:	e008      	b.n	800c402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3f0:	f7fa fae6 	bl	80069c0 <HAL_GetTick>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	1ad3      	subs	r3, r2, r3
 800c3fa:	2b64      	cmp	r3, #100	; 0x64
 800c3fc:	d901      	bls.n	800c402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c3fe:	2303      	movs	r3, #3
 800c400:	e28a      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c402:	4b60      	ldr	r3, [pc, #384]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1f0      	bne.n	800c3f0 <HAL_RCC_OscConfig+0xe8>
 800c40e:	e000      	b.n	800c412 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 0302 	and.w	r3, r3, #2
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d075      	beq.n	800c50a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c41e:	4b59      	ldr	r3, [pc, #356]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	f003 030c 	and.w	r3, r3, #12
 800c426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c428:	4b56      	ldr	r3, [pc, #344]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	f003 0303 	and.w	r3, r3, #3
 800c430:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	2b0c      	cmp	r3, #12
 800c436:	d102      	bne.n	800c43e <HAL_RCC_OscConfig+0x136>
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d002      	beq.n	800c444 <HAL_RCC_OscConfig+0x13c>
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	2b04      	cmp	r3, #4
 800c442:	d11f      	bne.n	800c484 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c444:	4b4f      	ldr	r3, [pc, #316]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d005      	beq.n	800c45c <HAL_RCC_OscConfig+0x154>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d101      	bne.n	800c45c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	e25d      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c45c:	4b49      	ldr	r3, [pc, #292]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	061b      	lsls	r3, r3, #24
 800c46a:	4946      	ldr	r1, [pc, #280]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c46c:	4313      	orrs	r3, r2
 800c46e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c470:	4b45      	ldr	r3, [pc, #276]	; (800c588 <HAL_RCC_OscConfig+0x280>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4618      	mov	r0, r3
 800c476:	f7fa fa57 	bl	8006928 <HAL_InitTick>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d043      	beq.n	800c508 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	e249      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d023      	beq.n	800c4d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c48c:	4b3d      	ldr	r3, [pc, #244]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a3c      	ldr	r2, [pc, #240]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c498:	f7fa fa92 	bl	80069c0 <HAL_GetTick>
 800c49c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c49e:	e008      	b.n	800c4b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4a0:	f7fa fa8e 	bl	80069c0 <HAL_GetTick>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	d901      	bls.n	800c4b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	e232      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c4b2:	4b34      	ldr	r3, [pc, #208]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d0f0      	beq.n	800c4a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4be:	4b31      	ldr	r3, [pc, #196]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	061b      	lsls	r3, r3, #24
 800c4cc:	492d      	ldr	r1, [pc, #180]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	604b      	str	r3, [r1, #4]
 800c4d2:	e01a      	b.n	800c50a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c4d4:	4b2b      	ldr	r3, [pc, #172]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a2a      	ldr	r2, [pc, #168]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c4da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4e0:	f7fa fa6e 	bl	80069c0 <HAL_GetTick>
 800c4e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c4e6:	e008      	b.n	800c4fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4e8:	f7fa fa6a 	bl	80069c0 <HAL_GetTick>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	1ad3      	subs	r3, r2, r3
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d901      	bls.n	800c4fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e20e      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c4fa:	4b22      	ldr	r3, [pc, #136]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1f0      	bne.n	800c4e8 <HAL_RCC_OscConfig+0x1e0>
 800c506:	e000      	b.n	800c50a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c508:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f003 0308 	and.w	r3, r3, #8
 800c512:	2b00      	cmp	r3, #0
 800c514:	d041      	beq.n	800c59a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d01c      	beq.n	800c558 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c51e:	4b19      	ldr	r3, [pc, #100]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c524:	4a17      	ldr	r2, [pc, #92]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c526:	f043 0301 	orr.w	r3, r3, #1
 800c52a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c52e:	f7fa fa47 	bl	80069c0 <HAL_GetTick>
 800c532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c534:	e008      	b.n	800c548 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c536:	f7fa fa43 	bl	80069c0 <HAL_GetTick>
 800c53a:	4602      	mov	r2, r0
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	2b02      	cmp	r3, #2
 800c542:	d901      	bls.n	800c548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c544:	2303      	movs	r3, #3
 800c546:	e1e7      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c548:	4b0e      	ldr	r3, [pc, #56]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c54a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c54e:	f003 0302 	and.w	r3, r3, #2
 800c552:	2b00      	cmp	r3, #0
 800c554:	d0ef      	beq.n	800c536 <HAL_RCC_OscConfig+0x22e>
 800c556:	e020      	b.n	800c59a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c558:	4b0a      	ldr	r3, [pc, #40]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c55a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c55e:	4a09      	ldr	r2, [pc, #36]	; (800c584 <HAL_RCC_OscConfig+0x27c>)
 800c560:	f023 0301 	bic.w	r3, r3, #1
 800c564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c568:	f7fa fa2a 	bl	80069c0 <HAL_GetTick>
 800c56c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c56e:	e00d      	b.n	800c58c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c570:	f7fa fa26 	bl	80069c0 <HAL_GetTick>
 800c574:	4602      	mov	r2, r0
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d906      	bls.n	800c58c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c57e:	2303      	movs	r3, #3
 800c580:	e1ca      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
 800c582:	bf00      	nop
 800c584:	40021000 	.word	0x40021000
 800c588:	200001f4 	.word	0x200001f4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c58c:	4b8c      	ldr	r3, [pc, #560]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c58e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c592:	f003 0302 	and.w	r3, r3, #2
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1ea      	bne.n	800c570 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 0304 	and.w	r3, r3, #4
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	f000 80a6 	beq.w	800c6f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c5ac:	4b84      	ldr	r3, [pc, #528]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <HAL_RCC_OscConfig+0x2b4>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e000      	b.n	800c5be <HAL_RCC_OscConfig+0x2b6>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00d      	beq.n	800c5de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5c2:	4b7f      	ldr	r3, [pc, #508]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5c6:	4a7e      	ldr	r2, [pc, #504]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c5c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5cc:	6593      	str	r3, [r2, #88]	; 0x58
 800c5ce:	4b7c      	ldr	r3, [pc, #496]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c5d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5de:	4b79      	ldr	r3, [pc, #484]	; (800c7c4 <HAL_RCC_OscConfig+0x4bc>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d118      	bne.n	800c61c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c5ea:	4b76      	ldr	r3, [pc, #472]	; (800c7c4 <HAL_RCC_OscConfig+0x4bc>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a75      	ldr	r2, [pc, #468]	; (800c7c4 <HAL_RCC_OscConfig+0x4bc>)
 800c5f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5f6:	f7fa f9e3 	bl	80069c0 <HAL_GetTick>
 800c5fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5fc:	e008      	b.n	800c610 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5fe:	f7fa f9df 	bl	80069c0 <HAL_GetTick>
 800c602:	4602      	mov	r2, r0
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d901      	bls.n	800c610 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c60c:	2303      	movs	r3, #3
 800c60e:	e183      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c610:	4b6c      	ldr	r3, [pc, #432]	; (800c7c4 <HAL_RCC_OscConfig+0x4bc>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d0f0      	beq.n	800c5fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d108      	bne.n	800c636 <HAL_RCC_OscConfig+0x32e>
 800c624:	4b66      	ldr	r3, [pc, #408]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c62a:	4a65      	ldr	r2, [pc, #404]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c62c:	f043 0301 	orr.w	r3, r3, #1
 800c630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c634:	e024      	b.n	800c680 <HAL_RCC_OscConfig+0x378>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	2b05      	cmp	r3, #5
 800c63c:	d110      	bne.n	800c660 <HAL_RCC_OscConfig+0x358>
 800c63e:	4b60      	ldr	r3, [pc, #384]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c644:	4a5e      	ldr	r2, [pc, #376]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c646:	f043 0304 	orr.w	r3, r3, #4
 800c64a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c64e:	4b5c      	ldr	r3, [pc, #368]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c654:	4a5a      	ldr	r2, [pc, #360]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c656:	f043 0301 	orr.w	r3, r3, #1
 800c65a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c65e:	e00f      	b.n	800c680 <HAL_RCC_OscConfig+0x378>
 800c660:	4b57      	ldr	r3, [pc, #348]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c666:	4a56      	ldr	r2, [pc, #344]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c668:	f023 0301 	bic.w	r3, r3, #1
 800c66c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c670:	4b53      	ldr	r3, [pc, #332]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c676:	4a52      	ldr	r2, [pc, #328]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c678:	f023 0304 	bic.w	r3, r3, #4
 800c67c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d016      	beq.n	800c6b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c688:	f7fa f99a 	bl	80069c0 <HAL_GetTick>
 800c68c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c68e:	e00a      	b.n	800c6a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c690:	f7fa f996 	bl	80069c0 <HAL_GetTick>
 800c694:	4602      	mov	r2, r0
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d901      	bls.n	800c6a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	e138      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c6a6:	4b46      	ldr	r3, [pc, #280]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6ac:	f003 0302 	and.w	r3, r3, #2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d0ed      	beq.n	800c690 <HAL_RCC_OscConfig+0x388>
 800c6b4:	e015      	b.n	800c6e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6b6:	f7fa f983 	bl	80069c0 <HAL_GetTick>
 800c6ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c6bc:	e00a      	b.n	800c6d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6be:	f7fa f97f 	bl	80069c0 <HAL_GetTick>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	1ad3      	subs	r3, r2, r3
 800c6c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d901      	bls.n	800c6d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c6d0:	2303      	movs	r3, #3
 800c6d2:	e121      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c6d4:	4b3a      	ldr	r3, [pc, #232]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1ed      	bne.n	800c6be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c6e2:	7ffb      	ldrb	r3, [r7, #31]
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d105      	bne.n	800c6f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6e8:	4b35      	ldr	r3, [pc, #212]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c6ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ec:	4a34      	ldr	r2, [pc, #208]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c6ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0320 	and.w	r3, r3, #32
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d03c      	beq.n	800c77a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	699b      	ldr	r3, [r3, #24]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d01c      	beq.n	800c742 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c708:	4b2d      	ldr	r3, [pc, #180]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c70a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c70e:	4a2c      	ldr	r2, [pc, #176]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c710:	f043 0301 	orr.w	r3, r3, #1
 800c714:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c718:	f7fa f952 	bl	80069c0 <HAL_GetTick>
 800c71c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c71e:	e008      	b.n	800c732 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c720:	f7fa f94e 	bl	80069c0 <HAL_GetTick>
 800c724:	4602      	mov	r2, r0
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d901      	bls.n	800c732 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c72e:	2303      	movs	r3, #3
 800c730:	e0f2      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c732:	4b23      	ldr	r3, [pc, #140]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c734:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c738:	f003 0302 	and.w	r3, r3, #2
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d0ef      	beq.n	800c720 <HAL_RCC_OscConfig+0x418>
 800c740:	e01b      	b.n	800c77a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c742:	4b1f      	ldr	r3, [pc, #124]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c748:	4a1d      	ldr	r2, [pc, #116]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c74a:	f023 0301 	bic.w	r3, r3, #1
 800c74e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c752:	f7fa f935 	bl	80069c0 <HAL_GetTick>
 800c756:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c758:	e008      	b.n	800c76c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c75a:	f7fa f931 	bl	80069c0 <HAL_GetTick>
 800c75e:	4602      	mov	r2, r0
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	1ad3      	subs	r3, r2, r3
 800c764:	2b02      	cmp	r3, #2
 800c766:	d901      	bls.n	800c76c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c768:	2303      	movs	r3, #3
 800c76a:	e0d5      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c76c:	4b14      	ldr	r3, [pc, #80]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c76e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c772:	f003 0302 	and.w	r3, r3, #2
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1ef      	bne.n	800c75a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f000 80c9 	beq.w	800c916 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c784:	4b0e      	ldr	r3, [pc, #56]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	f003 030c 	and.w	r3, r3, #12
 800c78c:	2b0c      	cmp	r3, #12
 800c78e:	f000 8083 	beq.w	800c898 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	69db      	ldr	r3, [r3, #28]
 800c796:	2b02      	cmp	r3, #2
 800c798:	d15e      	bne.n	800c858 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c79a:	4b09      	ldr	r3, [pc, #36]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a08      	ldr	r2, [pc, #32]	; (800c7c0 <HAL_RCC_OscConfig+0x4b8>)
 800c7a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7a6:	f7fa f90b 	bl	80069c0 <HAL_GetTick>
 800c7aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7ac:	e00c      	b.n	800c7c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7ae:	f7fa f907 	bl	80069c0 <HAL_GetTick>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	d905      	bls.n	800c7c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	e0ab      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
 800c7c0:	40021000 	.word	0x40021000
 800c7c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7c8:	4b55      	ldr	r3, [pc, #340]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1ec      	bne.n	800c7ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7d4:	4b52      	ldr	r3, [pc, #328]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c7d6:	68da      	ldr	r2, [r3, #12]
 800c7d8:	4b52      	ldr	r3, [pc, #328]	; (800c924 <HAL_RCC_OscConfig+0x61c>)
 800c7da:	4013      	ands	r3, r2
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	6a11      	ldr	r1, [r2, #32]
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c7e4:	3a01      	subs	r2, #1
 800c7e6:	0112      	lsls	r2, r2, #4
 800c7e8:	4311      	orrs	r1, r2
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c7ee:	0212      	lsls	r2, r2, #8
 800c7f0:	4311      	orrs	r1, r2
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c7f6:	0852      	lsrs	r2, r2, #1
 800c7f8:	3a01      	subs	r2, #1
 800c7fa:	0552      	lsls	r2, r2, #21
 800c7fc:	4311      	orrs	r1, r2
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c802:	0852      	lsrs	r2, r2, #1
 800c804:	3a01      	subs	r2, #1
 800c806:	0652      	lsls	r2, r2, #25
 800c808:	4311      	orrs	r1, r2
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c80e:	06d2      	lsls	r2, r2, #27
 800c810:	430a      	orrs	r2, r1
 800c812:	4943      	ldr	r1, [pc, #268]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c814:	4313      	orrs	r3, r2
 800c816:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c818:	4b41      	ldr	r3, [pc, #260]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a40      	ldr	r2, [pc, #256]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c81e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c822:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c824:	4b3e      	ldr	r3, [pc, #248]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	4a3d      	ldr	r2, [pc, #244]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c82a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c82e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c830:	f7fa f8c6 	bl	80069c0 <HAL_GetTick>
 800c834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c836:	e008      	b.n	800c84a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c838:	f7fa f8c2 	bl	80069c0 <HAL_GetTick>
 800c83c:	4602      	mov	r2, r0
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	2b02      	cmp	r3, #2
 800c844:	d901      	bls.n	800c84a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800c846:	2303      	movs	r3, #3
 800c848:	e066      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c84a:	4b35      	ldr	r3, [pc, #212]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c852:	2b00      	cmp	r3, #0
 800c854:	d0f0      	beq.n	800c838 <HAL_RCC_OscConfig+0x530>
 800c856:	e05e      	b.n	800c916 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c858:	4b31      	ldr	r3, [pc, #196]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a30      	ldr	r2, [pc, #192]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c85e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c864:	f7fa f8ac 	bl	80069c0 <HAL_GetTick>
 800c868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c86a:	e008      	b.n	800c87e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c86c:	f7fa f8a8 	bl	80069c0 <HAL_GetTick>
 800c870:	4602      	mov	r2, r0
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	2b02      	cmp	r3, #2
 800c878:	d901      	bls.n	800c87e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800c87a:	2303      	movs	r3, #3
 800c87c:	e04c      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c87e:	4b28      	ldr	r3, [pc, #160]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1f0      	bne.n	800c86c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c88a:	4b25      	ldr	r3, [pc, #148]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c88c:	68da      	ldr	r2, [r3, #12]
 800c88e:	4924      	ldr	r1, [pc, #144]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c890:	4b25      	ldr	r3, [pc, #148]	; (800c928 <HAL_RCC_OscConfig+0x620>)
 800c892:	4013      	ands	r3, r2
 800c894:	60cb      	str	r3, [r1, #12]
 800c896:	e03e      	b.n	800c916 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	69db      	ldr	r3, [r3, #28]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d101      	bne.n	800c8a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e039      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c8a4:	4b1e      	ldr	r3, [pc, #120]	; (800c920 <HAL_RCC_OscConfig+0x618>)
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f003 0203 	and.w	r2, r3, #3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a1b      	ldr	r3, [r3, #32]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d12c      	bne.n	800c912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d123      	bne.n	800c912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d11b      	bne.n	800c912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d113      	bne.n	800c912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f4:	085b      	lsrs	r3, r3, #1
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d109      	bne.n	800c912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c908:	085b      	lsrs	r3, r3, #1
 800c90a:	3b01      	subs	r3, #1
 800c90c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c90e:	429a      	cmp	r2, r3
 800c910:	d001      	beq.n	800c916 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	e000      	b.n	800c918 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3720      	adds	r7, #32
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	40021000 	.word	0x40021000
 800c924:	019f800c 	.word	0x019f800c
 800c928:	feeefffc 	.word	0xfeeefffc

0800c92c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c936:	2300      	movs	r3, #0
 800c938:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	e11e      	b.n	800cb82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c944:	4b91      	ldr	r3, [pc, #580]	; (800cb8c <HAL_RCC_ClockConfig+0x260>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f003 030f 	and.w	r3, r3, #15
 800c94c:	683a      	ldr	r2, [r7, #0]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d910      	bls.n	800c974 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c952:	4b8e      	ldr	r3, [pc, #568]	; (800cb8c <HAL_RCC_ClockConfig+0x260>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f023 020f 	bic.w	r2, r3, #15
 800c95a:	498c      	ldr	r1, [pc, #560]	; (800cb8c <HAL_RCC_ClockConfig+0x260>)
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	4313      	orrs	r3, r2
 800c960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c962:	4b8a      	ldr	r3, [pc, #552]	; (800cb8c <HAL_RCC_ClockConfig+0x260>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f003 030f 	and.w	r3, r3, #15
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d001      	beq.n	800c974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	e106      	b.n	800cb82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 0301 	and.w	r3, r3, #1
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d073      	beq.n	800ca68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	2b03      	cmp	r3, #3
 800c986:	d129      	bne.n	800c9dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c988:	4b81      	ldr	r3, [pc, #516]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	e0f4      	b.n	800cb82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c998:	f000 f99e 	bl	800ccd8 <RCC_GetSysClockFreqFromPLLSource>
 800c99c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	4a7c      	ldr	r2, [pc, #496]	; (800cb94 <HAL_RCC_ClockConfig+0x268>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d93f      	bls.n	800ca26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c9a6:	4b7a      	ldr	r3, [pc, #488]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d009      	beq.n	800c9c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d033      	beq.n	800ca26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d12f      	bne.n	800ca26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c9c6:	4b72      	ldr	r3, [pc, #456]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9ce:	4a70      	ldr	r2, [pc, #448]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800c9d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c9d6:	2380      	movs	r3, #128	; 0x80
 800c9d8:	617b      	str	r3, [r7, #20]
 800c9da:	e024      	b.n	800ca26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	d107      	bne.n	800c9f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c9e4:	4b6a      	ldr	r3, [pc, #424]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d109      	bne.n	800ca04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e0c6      	b.n	800cb82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c9f4:	4b66      	ldr	r3, [pc, #408]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	e0be      	b.n	800cb82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ca04:	f000 f8ce 	bl	800cba4 <HAL_RCC_GetSysClockFreq>
 800ca08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	4a61      	ldr	r2, [pc, #388]	; (800cb94 <HAL_RCC_ClockConfig+0x268>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d909      	bls.n	800ca26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ca12:	4b5f      	ldr	r3, [pc, #380]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca1a:	4a5d      	ldr	r2, [pc, #372]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800ca1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ca22:	2380      	movs	r3, #128	; 0x80
 800ca24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ca26:	4b5a      	ldr	r3, [pc, #360]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	f023 0203 	bic.w	r2, r3, #3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	4957      	ldr	r1, [pc, #348]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800ca34:	4313      	orrs	r3, r2
 800ca36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca38:	f7f9 ffc2 	bl	80069c0 <HAL_GetTick>
 800ca3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca3e:	e00a      	b.n	800ca56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca40:	f7f9 ffbe 	bl	80069c0 <HAL_GetTick>
 800ca44:	4602      	mov	r2, r0
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d901      	bls.n	800ca56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ca52:	2303      	movs	r3, #3
 800ca54:	e095      	b.n	800cb82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca56:	4b4e      	ldr	r3, [pc, #312]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	f003 020c 	and.w	r2, r3, #12
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d1eb      	bne.n	800ca40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d023      	beq.n	800cabc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 0304 	and.w	r3, r3, #4
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d005      	beq.n	800ca8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca80:	4b43      	ldr	r3, [pc, #268]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	4a42      	ldr	r2, [pc, #264]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800ca86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ca8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 0308 	and.w	r3, r3, #8
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d007      	beq.n	800caa8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ca98:	4b3d      	ldr	r3, [pc, #244]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800caa0:	4a3b      	ldr	r2, [pc, #236]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800caa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800caa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800caa8:	4b39      	ldr	r3, [pc, #228]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	4936      	ldr	r1, [pc, #216]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800cab6:	4313      	orrs	r3, r2
 800cab8:	608b      	str	r3, [r1, #8]
 800caba:	e008      	b.n	800cace <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	2b80      	cmp	r3, #128	; 0x80
 800cac0:	d105      	bne.n	800cace <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cac2:	4b33      	ldr	r3, [pc, #204]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	4a32      	ldr	r2, [pc, #200]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800cac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cacc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cace:	4b2f      	ldr	r3, [pc, #188]	; (800cb8c <HAL_RCC_ClockConfig+0x260>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 030f 	and.w	r3, r3, #15
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d21d      	bcs.n	800cb18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cadc:	4b2b      	ldr	r3, [pc, #172]	; (800cb8c <HAL_RCC_ClockConfig+0x260>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f023 020f 	bic.w	r2, r3, #15
 800cae4:	4929      	ldr	r1, [pc, #164]	; (800cb8c <HAL_RCC_ClockConfig+0x260>)
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	4313      	orrs	r3, r2
 800caea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800caec:	f7f9 ff68 	bl	80069c0 <HAL_GetTick>
 800caf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800caf2:	e00a      	b.n	800cb0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800caf4:	f7f9 ff64 	bl	80069c0 <HAL_GetTick>
 800caf8:	4602      	mov	r2, r0
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	1ad3      	subs	r3, r2, r3
 800cafe:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d901      	bls.n	800cb0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800cb06:	2303      	movs	r3, #3
 800cb08:	e03b      	b.n	800cb82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb0a:	4b20      	ldr	r3, [pc, #128]	; (800cb8c <HAL_RCC_ClockConfig+0x260>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 030f 	and.w	r3, r3, #15
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d1ed      	bne.n	800caf4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 0304 	and.w	r3, r3, #4
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d008      	beq.n	800cb36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cb24:	4b1a      	ldr	r3, [pc, #104]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	4917      	ldr	r1, [pc, #92]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800cb32:	4313      	orrs	r3, r2
 800cb34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f003 0308 	and.w	r3, r3, #8
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d009      	beq.n	800cb56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cb42:	4b13      	ldr	r3, [pc, #76]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	00db      	lsls	r3, r3, #3
 800cb50:	490f      	ldr	r1, [pc, #60]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800cb52:	4313      	orrs	r3, r2
 800cb54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cb56:	f000 f825 	bl	800cba4 <HAL_RCC_GetSysClockFreq>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	4b0c      	ldr	r3, [pc, #48]	; (800cb90 <HAL_RCC_ClockConfig+0x264>)
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	091b      	lsrs	r3, r3, #4
 800cb62:	f003 030f 	and.w	r3, r3, #15
 800cb66:	490c      	ldr	r1, [pc, #48]	; (800cb98 <HAL_RCC_ClockConfig+0x26c>)
 800cb68:	5ccb      	ldrb	r3, [r1, r3]
 800cb6a:	f003 031f 	and.w	r3, r3, #31
 800cb6e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb72:	4a0a      	ldr	r2, [pc, #40]	; (800cb9c <HAL_RCC_ClockConfig+0x270>)
 800cb74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cb76:	4b0a      	ldr	r3, [pc, #40]	; (800cba0 <HAL_RCC_ClockConfig+0x274>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7f9 fed4 	bl	8006928 <HAL_InitTick>
 800cb80:	4603      	mov	r3, r0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3718      	adds	r7, #24
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	40022000 	.word	0x40022000
 800cb90:	40021000 	.word	0x40021000
 800cb94:	04c4b400 	.word	0x04c4b400
 800cb98:	0801b794 	.word	0x0801b794
 800cb9c:	200001e0 	.word	0x200001e0
 800cba0:	200001f4 	.word	0x200001f4

0800cba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b087      	sub	sp, #28
 800cba8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cbaa:	4b2c      	ldr	r3, [pc, #176]	; (800cc5c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	f003 030c 	and.w	r3, r3, #12
 800cbb2:	2b04      	cmp	r3, #4
 800cbb4:	d102      	bne.n	800cbbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cbb6:	4b2a      	ldr	r3, [pc, #168]	; (800cc60 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cbb8:	613b      	str	r3, [r7, #16]
 800cbba:	e047      	b.n	800cc4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cbbc:	4b27      	ldr	r3, [pc, #156]	; (800cc5c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	f003 030c 	and.w	r3, r3, #12
 800cbc4:	2b08      	cmp	r3, #8
 800cbc6:	d102      	bne.n	800cbce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cbc8:	4b26      	ldr	r3, [pc, #152]	; (800cc64 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cbca:	613b      	str	r3, [r7, #16]
 800cbcc:	e03e      	b.n	800cc4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cbce:	4b23      	ldr	r3, [pc, #140]	; (800cc5c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	f003 030c 	and.w	r3, r3, #12
 800cbd6:	2b0c      	cmp	r3, #12
 800cbd8:	d136      	bne.n	800cc48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cbda:	4b20      	ldr	r3, [pc, #128]	; (800cc5c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	f003 0303 	and.w	r3, r3, #3
 800cbe2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cbe4:	4b1d      	ldr	r3, [pc, #116]	; (800cc5c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	091b      	lsrs	r3, r3, #4
 800cbea:	f003 030f 	and.w	r3, r3, #15
 800cbee:	3301      	adds	r3, #1
 800cbf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2b03      	cmp	r3, #3
 800cbf6:	d10c      	bne.n	800cc12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cbf8:	4a1a      	ldr	r2, [pc, #104]	; (800cc64 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc00:	4a16      	ldr	r2, [pc, #88]	; (800cc5c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc02:	68d2      	ldr	r2, [r2, #12]
 800cc04:	0a12      	lsrs	r2, r2, #8
 800cc06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc0a:	fb02 f303 	mul.w	r3, r2, r3
 800cc0e:	617b      	str	r3, [r7, #20]
      break;
 800cc10:	e00c      	b.n	800cc2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc12:	4a13      	ldr	r2, [pc, #76]	; (800cc60 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc1a:	4a10      	ldr	r2, [pc, #64]	; (800cc5c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc1c:	68d2      	ldr	r2, [r2, #12]
 800cc1e:	0a12      	lsrs	r2, r2, #8
 800cc20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc24:	fb02 f303 	mul.w	r3, r2, r3
 800cc28:	617b      	str	r3, [r7, #20]
      break;
 800cc2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cc2c:	4b0b      	ldr	r3, [pc, #44]	; (800cc5c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	0e5b      	lsrs	r3, r3, #25
 800cc32:	f003 0303 	and.w	r3, r3, #3
 800cc36:	3301      	adds	r3, #1
 800cc38:	005b      	lsls	r3, r3, #1
 800cc3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cc3c:	697a      	ldr	r2, [r7, #20]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc44:	613b      	str	r3, [r7, #16]
 800cc46:	e001      	b.n	800cc4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cc4c:	693b      	ldr	r3, [r7, #16]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	371c      	adds	r7, #28
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	40021000 	.word	0x40021000
 800cc60:	00f42400 	.word	0x00f42400
 800cc64:	007a1200 	.word	0x007a1200

0800cc68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc6c:	4b03      	ldr	r3, [pc, #12]	; (800cc7c <HAL_RCC_GetHCLKFreq+0x14>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	200001e0 	.word	0x200001e0

0800cc80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cc84:	f7ff fff0 	bl	800cc68 <HAL_RCC_GetHCLKFreq>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	4b06      	ldr	r3, [pc, #24]	; (800cca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	0a1b      	lsrs	r3, r3, #8
 800cc90:	f003 0307 	and.w	r3, r3, #7
 800cc94:	4904      	ldr	r1, [pc, #16]	; (800cca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cc96:	5ccb      	ldrb	r3, [r1, r3]
 800cc98:	f003 031f 	and.w	r3, r3, #31
 800cc9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	40021000 	.word	0x40021000
 800cca8:	0801b7a4 	.word	0x0801b7a4

0800ccac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ccb0:	f7ff ffda 	bl	800cc68 <HAL_RCC_GetHCLKFreq>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	4b06      	ldr	r3, [pc, #24]	; (800ccd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	0adb      	lsrs	r3, r3, #11
 800ccbc:	f003 0307 	and.w	r3, r3, #7
 800ccc0:	4904      	ldr	r1, [pc, #16]	; (800ccd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ccc2:	5ccb      	ldrb	r3, [r1, r3]
 800ccc4:	f003 031f 	and.w	r3, r3, #31
 800ccc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	40021000 	.word	0x40021000
 800ccd4:	0801b7a4 	.word	0x0801b7a4

0800ccd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b087      	sub	sp, #28
 800ccdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ccde:	4b1e      	ldr	r3, [pc, #120]	; (800cd58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	f003 0303 	and.w	r3, r3, #3
 800cce6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cce8:	4b1b      	ldr	r3, [pc, #108]	; (800cd58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	091b      	lsrs	r3, r3, #4
 800ccee:	f003 030f 	and.w	r3, r3, #15
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	2b03      	cmp	r3, #3
 800ccfa:	d10c      	bne.n	800cd16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ccfc:	4a17      	ldr	r2, [pc, #92]	; (800cd5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd04:	4a14      	ldr	r2, [pc, #80]	; (800cd58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cd06:	68d2      	ldr	r2, [r2, #12]
 800cd08:	0a12      	lsrs	r2, r2, #8
 800cd0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd0e:	fb02 f303 	mul.w	r3, r2, r3
 800cd12:	617b      	str	r3, [r7, #20]
    break;
 800cd14:	e00c      	b.n	800cd30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cd16:	4a12      	ldr	r2, [pc, #72]	; (800cd60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd1e:	4a0e      	ldr	r2, [pc, #56]	; (800cd58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cd20:	68d2      	ldr	r2, [r2, #12]
 800cd22:	0a12      	lsrs	r2, r2, #8
 800cd24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd28:	fb02 f303 	mul.w	r3, r2, r3
 800cd2c:	617b      	str	r3, [r7, #20]
    break;
 800cd2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cd30:	4b09      	ldr	r3, [pc, #36]	; (800cd58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	0e5b      	lsrs	r3, r3, #25
 800cd36:	f003 0303 	and.w	r3, r3, #3
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	005b      	lsls	r3, r3, #1
 800cd3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800cd4a:	687b      	ldr	r3, [r7, #4]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	371c      	adds	r7, #28
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	40021000 	.word	0x40021000
 800cd5c:	007a1200 	.word	0x007a1200
 800cd60:	00f42400 	.word	0x00f42400

0800cd64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b086      	sub	sp, #24
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cd70:	2300      	movs	r3, #0
 800cd72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f000 8098 	beq.w	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd82:	2300      	movs	r3, #0
 800cd84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd86:	4b43      	ldr	r3, [pc, #268]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10d      	bne.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd92:	4b40      	ldr	r3, [pc, #256]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd96:	4a3f      	ldr	r2, [pc, #252]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd9c:	6593      	str	r3, [r2, #88]	; 0x58
 800cd9e:	4b3d      	ldr	r3, [pc, #244]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cda0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cda2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cda6:	60bb      	str	r3, [r7, #8]
 800cda8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cdae:	4b3a      	ldr	r3, [pc, #232]	; (800ce98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a39      	ldr	r2, [pc, #228]	; (800ce98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cdb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cdba:	f7f9 fe01 	bl	80069c0 <HAL_GetTick>
 800cdbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cdc0:	e009      	b.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cdc2:	f7f9 fdfd 	bl	80069c0 <HAL_GetTick>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	1ad3      	subs	r3, r2, r3
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	d902      	bls.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	74fb      	strb	r3, [r7, #19]
        break;
 800cdd4:	e005      	b.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cdd6:	4b30      	ldr	r3, [pc, #192]	; (800ce98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d0ef      	beq.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800cde2:	7cfb      	ldrb	r3, [r7, #19]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d159      	bne.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cde8:	4b2a      	ldr	r3, [pc, #168]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdf2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d01e      	beq.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfe:	697a      	ldr	r2, [r7, #20]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d019      	beq.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ce04:	4b23      	ldr	r3, [pc, #140]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ce10:	4b20      	ldr	r3, [pc, #128]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce16:	4a1f      	ldr	r2, [pc, #124]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ce20:	4b1c      	ldr	r3, [pc, #112]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce26:	4a1b      	ldr	r2, [pc, #108]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ce30:	4a18      	ldr	r2, [pc, #96]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	f003 0301 	and.w	r3, r3, #1
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d016      	beq.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce42:	f7f9 fdbd 	bl	80069c0 <HAL_GetTick>
 800ce46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce48:	e00b      	b.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce4a:	f7f9 fdb9 	bl	80069c0 <HAL_GetTick>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d902      	bls.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800ce5c:	2303      	movs	r3, #3
 800ce5e:	74fb      	strb	r3, [r7, #19]
            break;
 800ce60:	e006      	b.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce62:	4b0c      	ldr	r3, [pc, #48]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce68:	f003 0302 	and.w	r3, r3, #2
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d0ec      	beq.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ce70:	7cfb      	ldrb	r3, [r7, #19]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d10b      	bne.n	800ce8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce76:	4b07      	ldr	r3, [pc, #28]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce84:	4903      	ldr	r1, [pc, #12]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce86:	4313      	orrs	r3, r2
 800ce88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ce8c:	e008      	b.n	800cea0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ce8e:	7cfb      	ldrb	r3, [r7, #19]
 800ce90:	74bb      	strb	r3, [r7, #18]
 800ce92:	e005      	b.n	800cea0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ce94:	40021000 	.word	0x40021000
 800ce98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce9c:	7cfb      	ldrb	r3, [r7, #19]
 800ce9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cea0:	7c7b      	ldrb	r3, [r7, #17]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d105      	bne.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cea6:	4ba6      	ldr	r3, [pc, #664]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceaa:	4aa5      	ldr	r2, [pc, #660]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ceac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ceb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 0301 	and.w	r3, r3, #1
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00a      	beq.n	800ced4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cebe:	4ba0      	ldr	r3, [pc, #640]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cec4:	f023 0203 	bic.w	r2, r3, #3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	499c      	ldr	r1, [pc, #624]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cece:	4313      	orrs	r3, r2
 800ced0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 0302 	and.w	r3, r3, #2
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00a      	beq.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cee0:	4b97      	ldr	r3, [pc, #604]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cee6:	f023 020c 	bic.w	r2, r3, #12
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	4994      	ldr	r1, [pc, #592]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cef0:	4313      	orrs	r3, r2
 800cef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f003 0304 	and.w	r3, r3, #4
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00a      	beq.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cf02:	4b8f      	ldr	r3, [pc, #572]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	498b      	ldr	r1, [pc, #556]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf12:	4313      	orrs	r3, r2
 800cf14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f003 0308 	and.w	r3, r3, #8
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d00a      	beq.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cf24:	4b86      	ldr	r3, [pc, #536]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	4983      	ldr	r1, [pc, #524]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf34:	4313      	orrs	r3, r2
 800cf36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f003 0320 	and.w	r3, r3, #32
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00a      	beq.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cf46:	4b7e      	ldr	r3, [pc, #504]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	695b      	ldr	r3, [r3, #20]
 800cf54:	497a      	ldr	r1, [pc, #488]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf56:	4313      	orrs	r3, r2
 800cf58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00a      	beq.n	800cf7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf68:	4b75      	ldr	r3, [pc, #468]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	699b      	ldr	r3, [r3, #24]
 800cf76:	4972      	ldr	r1, [pc, #456]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00a      	beq.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf8a:	4b6d      	ldr	r3, [pc, #436]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	69db      	ldr	r3, [r3, #28]
 800cf98:	4969      	ldr	r1, [pc, #420]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00a      	beq.n	800cfc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cfac:	4b64      	ldr	r3, [pc, #400]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cfae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a1b      	ldr	r3, [r3, #32]
 800cfba:	4961      	ldr	r1, [pc, #388]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00a      	beq.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cfce:	4b5c      	ldr	r3, [pc, #368]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cfd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfdc:	4958      	ldr	r1, [pc, #352]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d015      	beq.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cff0:	4b53      	ldr	r3, [pc, #332]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffe:	4950      	ldr	r1, [pc, #320]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d000:	4313      	orrs	r3, r2
 800d002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d00a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d00e:	d105      	bne.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d010:	4b4b      	ldr	r3, [pc, #300]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	4a4a      	ldr	r2, [pc, #296]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d01a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d024:	2b00      	cmp	r3, #0
 800d026:	d015      	beq.n	800d054 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d028:	4b45      	ldr	r3, [pc, #276]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d02e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d036:	4942      	ldr	r1, [pc, #264]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d038:	4313      	orrs	r3, r2
 800d03a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d046:	d105      	bne.n	800d054 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d048:	4b3d      	ldr	r3, [pc, #244]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	4a3c      	ldr	r2, [pc, #240]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d04e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d052:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d015      	beq.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d060:	4b37      	ldr	r3, [pc, #220]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d066:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d06e:	4934      	ldr	r1, [pc, #208]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d070:	4313      	orrs	r3, r2
 800d072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d07a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d07e:	d105      	bne.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d080:	4b2f      	ldr	r3, [pc, #188]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	4a2e      	ldr	r2, [pc, #184]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d08a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d094:	2b00      	cmp	r3, #0
 800d096:	d015      	beq.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d098:	4b29      	ldr	r3, [pc, #164]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d09e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a6:	4926      	ldr	r1, [pc, #152]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0b6:	d105      	bne.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d0b8:	4b21      	ldr	r3, [pc, #132]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	4a20      	ldr	r2, [pc, #128]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d0be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d015      	beq.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d0d0:	4b1b      	ldr	r3, [pc, #108]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0de:	4918      	ldr	r1, [pc, #96]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0ee:	d105      	bne.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d0f0:	4b13      	ldr	r3, [pc, #76]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	4a12      	ldr	r2, [pc, #72]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d0f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d104:	2b00      	cmp	r3, #0
 800d106:	d015      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d108:	4b0d      	ldr	r3, [pc, #52]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d10e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d116:	490a      	ldr	r1, [pc, #40]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d118:	4313      	orrs	r3, r2
 800d11a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d126:	d105      	bne.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d128:	4b05      	ldr	r3, [pc, #20]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	4a04      	ldr	r2, [pc, #16]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d12e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d132:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d134:	7cbb      	ldrb	r3, [r7, #18]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3718      	adds	r7, #24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	40021000 	.word	0x40021000

0800d144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d101      	bne.n	800d156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	e09d      	b.n	800d292 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d108      	bne.n	800d170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d166:	d009      	beq.n	800d17c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	61da      	str	r2, [r3, #28]
 800d16e:	e005      	b.n	800d17c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d106      	bne.n	800d19c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7f8 fb70 	bl	800587c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2202      	movs	r2, #2
 800d1a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d1bc:	d902      	bls.n	800d1c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	60fb      	str	r3, [r7, #12]
 800d1c2:	e002      	b.n	800d1ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d1c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d1d2:	d007      	beq.n	800d1e4 <HAL_SPI_Init+0xa0>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d1dc:	d002      	beq.n	800d1e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d1f4:	431a      	orrs	r2, r3
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	691b      	ldr	r3, [r3, #16]
 800d1fa:	f003 0302 	and.w	r3, r3, #2
 800d1fe:	431a      	orrs	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	f003 0301 	and.w	r3, r3, #1
 800d208:	431a      	orrs	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	699b      	ldr	r3, [r3, #24]
 800d20e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d212:	431a      	orrs	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	69db      	ldr	r3, [r3, #28]
 800d218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d21c:	431a      	orrs	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a1b      	ldr	r3, [r3, #32]
 800d222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d226:	ea42 0103 	orr.w	r1, r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d22e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	430a      	orrs	r2, r1
 800d238:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	699b      	ldr	r3, [r3, #24]
 800d23e:	0c1b      	lsrs	r3, r3, #16
 800d240:	f003 0204 	and.w	r2, r3, #4
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d248:	f003 0310 	and.w	r3, r3, #16
 800d24c:	431a      	orrs	r2, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d252:	f003 0308 	and.w	r3, r3, #8
 800d256:	431a      	orrs	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d260:	ea42 0103 	orr.w	r1, r2, r3
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	430a      	orrs	r2, r1
 800d270:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	69da      	ldr	r2, [r3, #28]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d280:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b088      	sub	sp, #32
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	60f8      	str	r0, [r7, #12]
 800d2a2:	60b9      	str	r1, [r7, #8]
 800d2a4:	603b      	str	r3, [r7, #0]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d101      	bne.n	800d2bc <HAL_SPI_Transmit+0x22>
 800d2b8:	2302      	movs	r3, #2
 800d2ba:	e15f      	b.n	800d57c <HAL_SPI_Transmit+0x2e2>
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d2c4:	f7f9 fb7c 	bl	80069c0 <HAL_GetTick>
 800d2c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d2ca:	88fb      	ldrh	r3, [r7, #6]
 800d2cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d002      	beq.n	800d2e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d2da:	2302      	movs	r3, #2
 800d2dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d2de:	e148      	b.n	800d572 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d002      	beq.n	800d2ec <HAL_SPI_Transmit+0x52>
 800d2e6:	88fb      	ldrh	r3, [r7, #6]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d102      	bne.n	800d2f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d2f0:	e13f      	b.n	800d572 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2203      	movs	r2, #3
 800d2f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	68ba      	ldr	r2, [r7, #8]
 800d304:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	88fa      	ldrh	r2, [r7, #6]
 800d30a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	88fa      	ldrh	r2, [r7, #6]
 800d310:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2200      	movs	r2, #0
 800d316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2200      	movs	r2, #0
 800d324:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2200      	movs	r2, #0
 800d32c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2200      	movs	r2, #0
 800d332:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d33c:	d10f      	bne.n	800d35e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d34c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d35c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d368:	2b40      	cmp	r3, #64	; 0x40
 800d36a:	d007      	beq.n	800d37c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d37a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d384:	d94f      	bls.n	800d426 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d002      	beq.n	800d394 <HAL_SPI_Transmit+0xfa>
 800d38e:	8afb      	ldrh	r3, [r7, #22]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d142      	bne.n	800d41a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d398:	881a      	ldrh	r2, [r3, #0]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a4:	1c9a      	adds	r2, r3, #2
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d3b8:	e02f      	b.n	800d41a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	f003 0302 	and.w	r3, r3, #2
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d112      	bne.n	800d3ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3cc:	881a      	ldrh	r2, [r3, #0]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d8:	1c9a      	adds	r2, r3, #2
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d3ec:	e015      	b.n	800d41a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d3ee:	f7f9 fae7 	bl	80069c0 <HAL_GetTick>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	683a      	ldr	r2, [r7, #0]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d803      	bhi.n	800d406 <HAL_SPI_Transmit+0x16c>
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d404:	d102      	bne.n	800d40c <HAL_SPI_Transmit+0x172>
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d106      	bne.n	800d41a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800d40c:	2303      	movs	r3, #3
 800d40e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800d418:	e0ab      	b.n	800d572 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d41e:	b29b      	uxth	r3, r3
 800d420:	2b00      	cmp	r3, #0
 800d422:	d1ca      	bne.n	800d3ba <HAL_SPI_Transmit+0x120>
 800d424:	e080      	b.n	800d528 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d002      	beq.n	800d434 <HAL_SPI_Transmit+0x19a>
 800d42e:	8afb      	ldrh	r3, [r7, #22]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d174      	bne.n	800d51e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d438:	b29b      	uxth	r3, r3
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d912      	bls.n	800d464 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d442:	881a      	ldrh	r2, [r3, #0]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44e:	1c9a      	adds	r2, r3, #2
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d458:	b29b      	uxth	r3, r3
 800d45a:	3b02      	subs	r3, #2
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d462:	e05c      	b.n	800d51e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	330c      	adds	r3, #12
 800d46e:	7812      	ldrb	r2, [r2, #0]
 800d470:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d476:	1c5a      	adds	r2, r3, #1
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d480:	b29b      	uxth	r3, r3
 800d482:	3b01      	subs	r3, #1
 800d484:	b29a      	uxth	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d48a:	e048      	b.n	800d51e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	f003 0302 	and.w	r3, r3, #2
 800d496:	2b02      	cmp	r3, #2
 800d498:	d12b      	bne.n	800d4f2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d912      	bls.n	800d4ca <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a8:	881a      	ldrh	r2, [r3, #0]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b4:	1c9a      	adds	r2, r3, #2
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	3b02      	subs	r3, #2
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d4c8:	e029      	b.n	800d51e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	330c      	adds	r3, #12
 800d4d4:	7812      	ldrb	r2, [r2, #0]
 800d4d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4dc:	1c5a      	adds	r2, r3, #1
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d4f0:	e015      	b.n	800d51e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4f2:	f7f9 fa65 	bl	80069c0 <HAL_GetTick>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	1ad3      	subs	r3, r2, r3
 800d4fc:	683a      	ldr	r2, [r7, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d803      	bhi.n	800d50a <HAL_SPI_Transmit+0x270>
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d508:	d102      	bne.n	800d510 <HAL_SPI_Transmit+0x276>
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d106      	bne.n	800d51e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800d510:	2303      	movs	r3, #3
 800d512:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2201      	movs	r2, #1
 800d518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800d51c:	e029      	b.n	800d572 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d522:	b29b      	uxth	r3, r3
 800d524:	2b00      	cmp	r3, #0
 800d526:	d1b1      	bne.n	800d48c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d528:	69ba      	ldr	r2, [r7, #24]
 800d52a:	6839      	ldr	r1, [r7, #0]
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f000 fad7 	bl	800dae0 <SPI_EndRxTxTransaction>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2220      	movs	r2, #32
 800d53c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d10a      	bne.n	800d55c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d546:	2300      	movs	r3, #0
 800d548:	613b      	str	r3, [r7, #16]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	613b      	str	r3, [r7, #16]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	613b      	str	r3, [r7, #16]
 800d55a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800d564:	2301      	movs	r3, #1
 800d566:	77fb      	strb	r3, [r7, #31]
 800d568:	e003      	b.n	800d572 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2201      	movs	r2, #1
 800d56e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2200      	movs	r2, #0
 800d576:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d57a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3720      	adds	r7, #32
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	4613      	mov	r3, r2
 800d590:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d592:	2300      	movs	r3, #0
 800d594:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d101      	bne.n	800d5a4 <HAL_SPI_Transmit_DMA+0x20>
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	e0d4      	b.n	800d74e <HAL_SPI_Transmit_DMA+0x1ca>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d002      	beq.n	800d5be <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800d5b8:	2302      	movs	r3, #2
 800d5ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d5bc:	e0c2      	b.n	800d744 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d002      	beq.n	800d5ca <HAL_SPI_Transmit_DMA+0x46>
 800d5c4:	88fb      	ldrh	r3, [r7, #6]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d102      	bne.n	800d5d0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d5ce:	e0b9      	b.n	800d744 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2203      	movs	r2, #3
 800d5d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	68ba      	ldr	r2, [r7, #8]
 800d5e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	88fa      	ldrh	r2, [r7, #6]
 800d5e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	88fa      	ldrh	r2, [r7, #6]
 800d5ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2200      	movs	r2, #0
 800d600:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2200      	movs	r2, #0
 800d606:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d61a:	d10f      	bne.n	800d63c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d62a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d63a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d640:	4a45      	ldr	r2, [pc, #276]	; (800d758 <HAL_SPI_Transmit_DMA+0x1d4>)
 800d642:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d648:	4a44      	ldr	r2, [pc, #272]	; (800d75c <HAL_SPI_Transmit_DMA+0x1d8>)
 800d64a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d650:	4a43      	ldr	r2, [pc, #268]	; (800d760 <HAL_SPI_Transmit_DMA+0x1dc>)
 800d652:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d658:	2200      	movs	r2, #0
 800d65a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	685a      	ldr	r2, [r3, #4]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d66a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d674:	d82d      	bhi.n	800d6d2 <HAL_SPI_Transmit_DMA+0x14e>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d67a:	699b      	ldr	r3, [r3, #24]
 800d67c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d680:	d127      	bne.n	800d6d2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d686:	b29b      	uxth	r3, r3
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d10f      	bne.n	800d6b0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	685a      	ldr	r2, [r3, #4]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d69e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	085b      	lsrs	r3, r3, #1
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d6ae:	e010      	b.n	800d6d2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6be:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	085b      	lsrs	r3, r3, #1
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6da:	4619      	mov	r1, r3
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	330c      	adds	r3, #12
 800d6e2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6e8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d6ea:	f7fc f87b 	bl	80097e4 <HAL_DMA_Start_IT>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d008      	beq.n	800d706 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6f8:	f043 0210 	orr.w	r2, r3, #16
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d700:	2301      	movs	r3, #1
 800d702:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d704:	e01e      	b.n	800d744 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d710:	2b40      	cmp	r3, #64	; 0x40
 800d712:	d007      	beq.n	800d724 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d722:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	685a      	ldr	r2, [r3, #4]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f042 0220 	orr.w	r2, r2, #32
 800d732:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	685a      	ldr	r2, [r3, #4]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f042 0202 	orr.w	r2, r2, #2
 800d742:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2200      	movs	r2, #0
 800d748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d74c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3718      	adds	r7, #24
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	0800d847 	.word	0x0800d847
 800d75c:	0800d7a1 	.word	0x0800d7a1
 800d760:	0800d863 	.word	0x0800d863

0800d764 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d780:	bf00      	nop
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d794:	bf00      	nop
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d7ae:	f7f9 f907 	bl	80069c0 <HAL_GetTick>
 800d7b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f003 0320 	and.w	r3, r3, #32
 800d7be:	2b20      	cmp	r3, #32
 800d7c0:	d03b      	beq.n	800d83a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	685a      	ldr	r2, [r3, #4]
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f022 0220 	bic.w	r2, r2, #32
 800d7d0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	685a      	ldr	r2, [r3, #4]
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f022 0202 	bic.w	r2, r2, #2
 800d7e0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d7e2:	693a      	ldr	r2, [r7, #16]
 800d7e4:	2164      	movs	r1, #100	; 0x64
 800d7e6:	6978      	ldr	r0, [r7, #20]
 800d7e8:	f000 f97a 	bl	800dae0 <SPI_EndRxTxTransaction>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d005      	beq.n	800d7fe <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7f6:	f043 0220 	orr.w	r2, r3, #32
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10a      	bne.n	800d81c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d806:	2300      	movs	r3, #0
 800d808:	60fb      	str	r3, [r7, #12]
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	60fb      	str	r3, [r7, #12]
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	60fb      	str	r3, [r7, #12]
 800d81a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	2200      	movs	r2, #0
 800d820:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	2201      	movs	r2, #1
 800d826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d003      	beq.n	800d83a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d832:	6978      	ldr	r0, [r7, #20]
 800d834:	f7ff ffaa 	bl	800d78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d838:	e002      	b.n	800d840 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d83a:	6978      	ldr	r0, [r7, #20]
 800d83c:	f7ff ff92 	bl	800d764 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d840:	3718      	adds	r7, #24
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b084      	sub	sp, #16
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d852:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	f7ff ff8f 	bl	800d778 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d85a:	bf00      	nop
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d862:	b580      	push	{r7, lr}
 800d864:	b084      	sub	sp, #16
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d86e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	685a      	ldr	r2, [r3, #4]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f022 0203 	bic.w	r2, r2, #3
 800d87e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d884:	f043 0210 	orr.w	r2, r3, #16
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2201      	movs	r2, #1
 800d890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f7ff ff79 	bl	800d78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d89a:	bf00      	nop
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
	...

0800d8a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b088      	sub	sp, #32
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	603b      	str	r3, [r7, #0]
 800d8b0:	4613      	mov	r3, r2
 800d8b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d8b4:	f7f9 f884 	bl	80069c0 <HAL_GetTick>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8bc:	1a9b      	subs	r3, r3, r2
 800d8be:	683a      	ldr	r2, [r7, #0]
 800d8c0:	4413      	add	r3, r2
 800d8c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d8c4:	f7f9 f87c 	bl	80069c0 <HAL_GetTick>
 800d8c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d8ca:	4b39      	ldr	r3, [pc, #228]	; (800d9b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	015b      	lsls	r3, r3, #5
 800d8d0:	0d1b      	lsrs	r3, r3, #20
 800d8d2:	69fa      	ldr	r2, [r7, #28]
 800d8d4:	fb02 f303 	mul.w	r3, r2, r3
 800d8d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d8da:	e054      	b.n	800d986 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e2:	d050      	beq.n	800d986 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d8e4:	f7f9 f86c 	bl	80069c0 <HAL_GetTick>
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	1ad3      	subs	r3, r2, r3
 800d8ee:	69fa      	ldr	r2, [r7, #28]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d902      	bls.n	800d8fa <SPI_WaitFlagStateUntilTimeout+0x56>
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d13d      	bne.n	800d976 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	685a      	ldr	r2, [r3, #4]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d908:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d912:	d111      	bne.n	800d938 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d91c:	d004      	beq.n	800d928 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d926:	d107      	bne.n	800d938 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d936:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d93c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d940:	d10f      	bne.n	800d962 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d950:	601a      	str	r2, [r3, #0]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2201      	movs	r2, #1
 800d966:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d972:	2303      	movs	r3, #3
 800d974:	e017      	b.n	800d9a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d101      	bne.n	800d980 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d97c:	2300      	movs	r3, #0
 800d97e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	3b01      	subs	r3, #1
 800d984:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	689a      	ldr	r2, [r3, #8]
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	4013      	ands	r3, r2
 800d990:	68ba      	ldr	r2, [r7, #8]
 800d992:	429a      	cmp	r2, r3
 800d994:	bf0c      	ite	eq
 800d996:	2301      	moveq	r3, #1
 800d998:	2300      	movne	r3, #0
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	461a      	mov	r2, r3
 800d99e:	79fb      	ldrb	r3, [r7, #7]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d19b      	bne.n	800d8dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3720      	adds	r7, #32
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	200001e0 	.word	0x200001e0

0800d9b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b08a      	sub	sp, #40	; 0x28
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
 800d9c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d9c6:	f7f8 fffb 	bl	80069c0 <HAL_GetTick>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ce:	1a9b      	subs	r3, r3, r2
 800d9d0:	683a      	ldr	r2, [r7, #0]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d9d6:	f7f8 fff3 	bl	80069c0 <HAL_GetTick>
 800d9da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	330c      	adds	r3, #12
 800d9e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d9e4:	4b3d      	ldr	r3, [pc, #244]	; (800dadc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4413      	add	r3, r2
 800d9ee:	00da      	lsls	r2, r3, #3
 800d9f0:	1ad3      	subs	r3, r2, r3
 800d9f2:	0d1b      	lsrs	r3, r3, #20
 800d9f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9f6:	fb02 f303 	mul.w	r3, r2, r3
 800d9fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d9fc:	e060      	b.n	800dac0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800da04:	d107      	bne.n	800da16 <SPI_WaitFifoStateUntilTimeout+0x62>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d104      	bne.n	800da16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	b2db      	uxtb	r3, r3
 800da12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800da14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da1c:	d050      	beq.n	800dac0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800da1e:	f7f8 ffcf 	bl	80069c0 <HAL_GetTick>
 800da22:	4602      	mov	r2, r0
 800da24:	6a3b      	ldr	r3, [r7, #32]
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d902      	bls.n	800da34 <SPI_WaitFifoStateUntilTimeout+0x80>
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	2b00      	cmp	r3, #0
 800da32:	d13d      	bne.n	800dab0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	685a      	ldr	r2, [r3, #4]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800da42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da4c:	d111      	bne.n	800da72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da56:	d004      	beq.n	800da62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da60:	d107      	bne.n	800da72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da7a:	d10f      	bne.n	800da9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800da9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2200      	movs	r2, #0
 800daa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800daac:	2303      	movs	r3, #3
 800daae:	e010      	b.n	800dad2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d101      	bne.n	800daba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800dab6:	2300      	movs	r3, #0
 800dab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800daba:	69bb      	ldr	r3, [r7, #24]
 800dabc:	3b01      	subs	r3, #1
 800dabe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	689a      	ldr	r2, [r3, #8]
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	4013      	ands	r3, r2
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d196      	bne.n	800d9fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3728      	adds	r7, #40	; 0x28
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	200001e0 	.word	0x200001e0

0800dae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af02      	add	r7, sp, #8
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	9300      	str	r3, [sp, #0]
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f7ff ff5b 	bl	800d9b4 <SPI_WaitFifoStateUntilTimeout>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d007      	beq.n	800db14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db08:	f043 0220 	orr.w	r2, r3, #32
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800db10:	2303      	movs	r3, #3
 800db12:	e027      	b.n	800db64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	2200      	movs	r2, #0
 800db1c:	2180      	movs	r1, #128	; 0x80
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f7ff fec0 	bl	800d8a4 <SPI_WaitFlagStateUntilTimeout>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d007      	beq.n	800db3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db2e:	f043 0220 	orr.w	r2, r3, #32
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800db36:	2303      	movs	r3, #3
 800db38:	e014      	b.n	800db64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	2200      	movs	r2, #0
 800db42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f7ff ff34 	bl	800d9b4 <SPI_WaitFifoStateUntilTimeout>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d007      	beq.n	800db62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db56:	f043 0220 	orr.w	r2, r3, #32
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800db5e:	2303      	movs	r3, #3
 800db60:	e000      	b.n	800db64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800db62:	2300      	movs	r3, #0
}
 800db64:	4618      	mov	r0, r3
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d101      	bne.n	800db7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db7a:	2301      	movs	r3, #1
 800db7c:	e049      	b.n	800dc12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db84:	b2db      	uxtb	r3, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	d106      	bne.n	800db98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7f7 ff94 	bl	8005ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2202      	movs	r2, #2
 800db9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	3304      	adds	r3, #4
 800dba8:	4619      	mov	r1, r3
 800dbaa:	4610      	mov	r0, r2
 800dbac:	f000 ff72 	bl	800ea94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc10:	2300      	movs	r3, #0
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
	...

0800dc1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b085      	sub	sp, #20
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d001      	beq.n	800dc34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e04a      	b.n	800dcca <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2202      	movs	r2, #2
 800dc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68da      	ldr	r2, [r3, #12]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f042 0201 	orr.w	r2, r2, #1
 800dc4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a21      	ldr	r2, [pc, #132]	; (800dcd8 <HAL_TIM_Base_Start_IT+0xbc>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d018      	beq.n	800dc88 <HAL_TIM_Base_Start_IT+0x6c>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc5e:	d013      	beq.n	800dc88 <HAL_TIM_Base_Start_IT+0x6c>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a1d      	ldr	r2, [pc, #116]	; (800dcdc <HAL_TIM_Base_Start_IT+0xc0>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d00e      	beq.n	800dc88 <HAL_TIM_Base_Start_IT+0x6c>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4a1c      	ldr	r2, [pc, #112]	; (800dce0 <HAL_TIM_Base_Start_IT+0xc4>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d009      	beq.n	800dc88 <HAL_TIM_Base_Start_IT+0x6c>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a1a      	ldr	r2, [pc, #104]	; (800dce4 <HAL_TIM_Base_Start_IT+0xc8>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d004      	beq.n	800dc88 <HAL_TIM_Base_Start_IT+0x6c>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	4a19      	ldr	r2, [pc, #100]	; (800dce8 <HAL_TIM_Base_Start_IT+0xcc>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d115      	bne.n	800dcb4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	689a      	ldr	r2, [r3, #8]
 800dc8e:	4b17      	ldr	r3, [pc, #92]	; (800dcec <HAL_TIM_Base_Start_IT+0xd0>)
 800dc90:	4013      	ands	r3, r2
 800dc92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2b06      	cmp	r3, #6
 800dc98:	d015      	beq.n	800dcc6 <HAL_TIM_Base_Start_IT+0xaa>
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dca0:	d011      	beq.n	800dcc6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f042 0201 	orr.w	r2, r2, #1
 800dcb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcb2:	e008      	b.n	800dcc6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f042 0201 	orr.w	r2, r2, #1
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	e000      	b.n	800dcc8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3714      	adds	r7, #20
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr
 800dcd6:	bf00      	nop
 800dcd8:	40012c00 	.word	0x40012c00
 800dcdc:	40000400 	.word	0x40000400
 800dce0:	40000800 	.word	0x40000800
 800dce4:	40013400 	.word	0x40013400
 800dce8:	40014000 	.word	0x40014000
 800dcec:	00010007 	.word	0x00010007

0800dcf0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	68da      	ldr	r2, [r3, #12]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f022 0201 	bic.w	r2, r2, #1
 800dd06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6a1a      	ldr	r2, [r3, #32]
 800dd0e:	f241 1311 	movw	r3, #4369	; 0x1111
 800dd12:	4013      	ands	r3, r2
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d10f      	bne.n	800dd38 <HAL_TIM_Base_Stop_IT+0x48>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6a1a      	ldr	r2, [r3, #32]
 800dd1e:	f244 4344 	movw	r3, #17476	; 0x4444
 800dd22:	4013      	ands	r3, r2
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d107      	bne.n	800dd38 <HAL_TIM_Base_Stop_IT+0x48>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f022 0201 	bic.w	r2, r2, #1
 800dd36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	370c      	adds	r7, #12
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b082      	sub	sp, #8
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d101      	bne.n	800dd60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	e049      	b.n	800ddf4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d106      	bne.n	800dd7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f7f7 fdf3 	bl	8005960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2202      	movs	r2, #2
 800dd7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	3304      	adds	r3, #4
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	4610      	mov	r0, r2
 800dd8e:	f000 fe81 	bl	800ea94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2201      	movs	r2, #1
 800dd96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2201      	movs	r2, #1
 800ddae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2201      	movs	r2, #1
 800ddde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2201      	movs	r2, #1
 800dde6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2201      	movs	r2, #1
 800ddee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ddf2:	2300      	movs	r3, #0
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800de06:	2300      	movs	r3, #0
 800de08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d109      	bne.n	800de24 <HAL_TIM_PWM_Start_IT+0x28>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800de16:	b2db      	uxtb	r3, r3
 800de18:	2b01      	cmp	r3, #1
 800de1a:	bf14      	ite	ne
 800de1c:	2301      	movne	r3, #1
 800de1e:	2300      	moveq	r3, #0
 800de20:	b2db      	uxtb	r3, r3
 800de22:	e03c      	b.n	800de9e <HAL_TIM_PWM_Start_IT+0xa2>
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	2b04      	cmp	r3, #4
 800de28:	d109      	bne.n	800de3e <HAL_TIM_PWM_Start_IT+0x42>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800de30:	b2db      	uxtb	r3, r3
 800de32:	2b01      	cmp	r3, #1
 800de34:	bf14      	ite	ne
 800de36:	2301      	movne	r3, #1
 800de38:	2300      	moveq	r3, #0
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	e02f      	b.n	800de9e <HAL_TIM_PWM_Start_IT+0xa2>
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	2b08      	cmp	r3, #8
 800de42:	d109      	bne.n	800de58 <HAL_TIM_PWM_Start_IT+0x5c>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	bf14      	ite	ne
 800de50:	2301      	movne	r3, #1
 800de52:	2300      	moveq	r3, #0
 800de54:	b2db      	uxtb	r3, r3
 800de56:	e022      	b.n	800de9e <HAL_TIM_PWM_Start_IT+0xa2>
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	2b0c      	cmp	r3, #12
 800de5c:	d109      	bne.n	800de72 <HAL_TIM_PWM_Start_IT+0x76>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de64:	b2db      	uxtb	r3, r3
 800de66:	2b01      	cmp	r3, #1
 800de68:	bf14      	ite	ne
 800de6a:	2301      	movne	r3, #1
 800de6c:	2300      	moveq	r3, #0
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	e015      	b.n	800de9e <HAL_TIM_PWM_Start_IT+0xa2>
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	2b10      	cmp	r3, #16
 800de76:	d109      	bne.n	800de8c <HAL_TIM_PWM_Start_IT+0x90>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	2b01      	cmp	r3, #1
 800de82:	bf14      	ite	ne
 800de84:	2301      	movne	r3, #1
 800de86:	2300      	moveq	r3, #0
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	e008      	b.n	800de9e <HAL_TIM_PWM_Start_IT+0xa2>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800de92:	b2db      	uxtb	r3, r3
 800de94:	2b01      	cmp	r3, #1
 800de96:	bf14      	ite	ne
 800de98:	2301      	movne	r3, #1
 800de9a:	2300      	moveq	r3, #0
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800dea2:	2301      	movs	r3, #1
 800dea4:	e0e2      	b.n	800e06c <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d104      	bne.n	800deb6 <HAL_TIM_PWM_Start_IT+0xba>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2202      	movs	r2, #2
 800deb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800deb4:	e023      	b.n	800defe <HAL_TIM_PWM_Start_IT+0x102>
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	2b04      	cmp	r3, #4
 800deba:	d104      	bne.n	800dec6 <HAL_TIM_PWM_Start_IT+0xca>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2202      	movs	r2, #2
 800dec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dec4:	e01b      	b.n	800defe <HAL_TIM_PWM_Start_IT+0x102>
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	2b08      	cmp	r3, #8
 800deca:	d104      	bne.n	800ded6 <HAL_TIM_PWM_Start_IT+0xda>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2202      	movs	r2, #2
 800ded0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ded4:	e013      	b.n	800defe <HAL_TIM_PWM_Start_IT+0x102>
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	2b0c      	cmp	r3, #12
 800deda:	d104      	bne.n	800dee6 <HAL_TIM_PWM_Start_IT+0xea>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2202      	movs	r2, #2
 800dee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dee4:	e00b      	b.n	800defe <HAL_TIM_PWM_Start_IT+0x102>
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	2b10      	cmp	r3, #16
 800deea:	d104      	bne.n	800def6 <HAL_TIM_PWM_Start_IT+0xfa>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2202      	movs	r2, #2
 800def0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800def4:	e003      	b.n	800defe <HAL_TIM_PWM_Start_IT+0x102>
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2202      	movs	r2, #2
 800defa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	2b0c      	cmp	r3, #12
 800df02:	d841      	bhi.n	800df88 <HAL_TIM_PWM_Start_IT+0x18c>
 800df04:	a201      	add	r2, pc, #4	; (adr r2, 800df0c <HAL_TIM_PWM_Start_IT+0x110>)
 800df06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0a:	bf00      	nop
 800df0c:	0800df41 	.word	0x0800df41
 800df10:	0800df89 	.word	0x0800df89
 800df14:	0800df89 	.word	0x0800df89
 800df18:	0800df89 	.word	0x0800df89
 800df1c:	0800df53 	.word	0x0800df53
 800df20:	0800df89 	.word	0x0800df89
 800df24:	0800df89 	.word	0x0800df89
 800df28:	0800df89 	.word	0x0800df89
 800df2c:	0800df65 	.word	0x0800df65
 800df30:	0800df89 	.word	0x0800df89
 800df34:	0800df89 	.word	0x0800df89
 800df38:	0800df89 	.word	0x0800df89
 800df3c:	0800df77 	.word	0x0800df77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68da      	ldr	r2, [r3, #12]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f042 0202 	orr.w	r2, r2, #2
 800df4e:	60da      	str	r2, [r3, #12]
      break;
 800df50:	e01d      	b.n	800df8e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	68da      	ldr	r2, [r3, #12]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f042 0204 	orr.w	r2, r2, #4
 800df60:	60da      	str	r2, [r3, #12]
      break;
 800df62:	e014      	b.n	800df8e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	68da      	ldr	r2, [r3, #12]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f042 0208 	orr.w	r2, r2, #8
 800df72:	60da      	str	r2, [r3, #12]
      break;
 800df74:	e00b      	b.n	800df8e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	68da      	ldr	r2, [r3, #12]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f042 0210 	orr.w	r2, r2, #16
 800df84:	60da      	str	r2, [r3, #12]
      break;
 800df86:	e002      	b.n	800df8e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800df88:	2301      	movs	r3, #1
 800df8a:	73fb      	strb	r3, [r7, #15]
      break;
 800df8c:	bf00      	nop
  }

  if (status == HAL_OK)
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d16a      	bne.n	800e06a <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2201      	movs	r2, #1
 800df9a:	6839      	ldr	r1, [r7, #0]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f001 f90b 	bl	800f1b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a33      	ldr	r2, [pc, #204]	; (800e074 <HAL_TIM_PWM_Start_IT+0x278>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d013      	beq.n	800dfd4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a31      	ldr	r2, [pc, #196]	; (800e078 <HAL_TIM_PWM_Start_IT+0x27c>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d00e      	beq.n	800dfd4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4a30      	ldr	r2, [pc, #192]	; (800e07c <HAL_TIM_PWM_Start_IT+0x280>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d009      	beq.n	800dfd4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4a2e      	ldr	r2, [pc, #184]	; (800e080 <HAL_TIM_PWM_Start_IT+0x284>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d004      	beq.n	800dfd4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4a2d      	ldr	r2, [pc, #180]	; (800e084 <HAL_TIM_PWM_Start_IT+0x288>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d101      	bne.n	800dfd8 <HAL_TIM_PWM_Start_IT+0x1dc>
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e000      	b.n	800dfda <HAL_TIM_PWM_Start_IT+0x1de>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d007      	beq.n	800dfee <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dfec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4a20      	ldr	r2, [pc, #128]	; (800e074 <HAL_TIM_PWM_Start_IT+0x278>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d018      	beq.n	800e02a <HAL_TIM_PWM_Start_IT+0x22e>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e000:	d013      	beq.n	800e02a <HAL_TIM_PWM_Start_IT+0x22e>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4a20      	ldr	r2, [pc, #128]	; (800e088 <HAL_TIM_PWM_Start_IT+0x28c>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d00e      	beq.n	800e02a <HAL_TIM_PWM_Start_IT+0x22e>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a1e      	ldr	r2, [pc, #120]	; (800e08c <HAL_TIM_PWM_Start_IT+0x290>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d009      	beq.n	800e02a <HAL_TIM_PWM_Start_IT+0x22e>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4a17      	ldr	r2, [pc, #92]	; (800e078 <HAL_TIM_PWM_Start_IT+0x27c>)
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d004      	beq.n	800e02a <HAL_TIM_PWM_Start_IT+0x22e>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4a15      	ldr	r2, [pc, #84]	; (800e07c <HAL_TIM_PWM_Start_IT+0x280>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d115      	bne.n	800e056 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	689a      	ldr	r2, [r3, #8]
 800e030:	4b17      	ldr	r3, [pc, #92]	; (800e090 <HAL_TIM_PWM_Start_IT+0x294>)
 800e032:	4013      	ands	r3, r2
 800e034:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	2b06      	cmp	r3, #6
 800e03a:	d015      	beq.n	800e068 <HAL_TIM_PWM_Start_IT+0x26c>
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e042:	d011      	beq.n	800e068 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f042 0201 	orr.w	r2, r2, #1
 800e052:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e054:	e008      	b.n	800e068 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f042 0201 	orr.w	r2, r2, #1
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	e000      	b.n	800e06a <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e068:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3710      	adds	r7, #16
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	40012c00 	.word	0x40012c00
 800e078:	40013400 	.word	0x40013400
 800e07c:	40014000 	.word	0x40014000
 800e080:	40014400 	.word	0x40014400
 800e084:	40014800 	.word	0x40014800
 800e088:	40000400 	.word	0x40000400
 800e08c:	40000800 	.word	0x40000800
 800e090:	00010007 	.word	0x00010007

0800e094 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	2b0c      	cmp	r3, #12
 800e0a6:	d841      	bhi.n	800e12c <HAL_TIM_PWM_Stop_IT+0x98>
 800e0a8:	a201      	add	r2, pc, #4	; (adr r2, 800e0b0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800e0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ae:	bf00      	nop
 800e0b0:	0800e0e5 	.word	0x0800e0e5
 800e0b4:	0800e12d 	.word	0x0800e12d
 800e0b8:	0800e12d 	.word	0x0800e12d
 800e0bc:	0800e12d 	.word	0x0800e12d
 800e0c0:	0800e0f7 	.word	0x0800e0f7
 800e0c4:	0800e12d 	.word	0x0800e12d
 800e0c8:	0800e12d 	.word	0x0800e12d
 800e0cc:	0800e12d 	.word	0x0800e12d
 800e0d0:	0800e109 	.word	0x0800e109
 800e0d4:	0800e12d 	.word	0x0800e12d
 800e0d8:	0800e12d 	.word	0x0800e12d
 800e0dc:	0800e12d 	.word	0x0800e12d
 800e0e0:	0800e11b 	.word	0x0800e11b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	68da      	ldr	r2, [r3, #12]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f022 0202 	bic.w	r2, r2, #2
 800e0f2:	60da      	str	r2, [r3, #12]
      break;
 800e0f4:	e01d      	b.n	800e132 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	68da      	ldr	r2, [r3, #12]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f022 0204 	bic.w	r2, r2, #4
 800e104:	60da      	str	r2, [r3, #12]
      break;
 800e106:	e014      	b.n	800e132 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	68da      	ldr	r2, [r3, #12]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f022 0208 	bic.w	r2, r2, #8
 800e116:	60da      	str	r2, [r3, #12]
      break;
 800e118:	e00b      	b.n	800e132 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	68da      	ldr	r2, [r3, #12]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f022 0210 	bic.w	r2, r2, #16
 800e128:	60da      	str	r2, [r3, #12]
      break;
 800e12a:	e002      	b.n	800e132 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e12c:	2301      	movs	r3, #1
 800e12e:	73fb      	strb	r3, [r7, #15]
      break;
 800e130:	bf00      	nop
  }

  if (status == HAL_OK)
 800e132:	7bfb      	ldrb	r3, [r7, #15]
 800e134:	2b00      	cmp	r3, #0
 800e136:	f040 8081 	bne.w	800e23c <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2200      	movs	r2, #0
 800e140:	6839      	ldr	r1, [r7, #0]
 800e142:	4618      	mov	r0, r3
 800e144:	f001 f838 	bl	800f1b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a3e      	ldr	r2, [pc, #248]	; (800e248 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d013      	beq.n	800e17a <HAL_TIM_PWM_Stop_IT+0xe6>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a3d      	ldr	r2, [pc, #244]	; (800e24c <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d00e      	beq.n	800e17a <HAL_TIM_PWM_Stop_IT+0xe6>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a3b      	ldr	r2, [pc, #236]	; (800e250 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d009      	beq.n	800e17a <HAL_TIM_PWM_Stop_IT+0xe6>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a3a      	ldr	r2, [pc, #232]	; (800e254 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d004      	beq.n	800e17a <HAL_TIM_PWM_Stop_IT+0xe6>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a38      	ldr	r2, [pc, #224]	; (800e258 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d101      	bne.n	800e17e <HAL_TIM_PWM_Stop_IT+0xea>
 800e17a:	2301      	movs	r3, #1
 800e17c:	e000      	b.n	800e180 <HAL_TIM_PWM_Stop_IT+0xec>
 800e17e:	2300      	movs	r3, #0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d017      	beq.n	800e1b4 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6a1a      	ldr	r2, [r3, #32]
 800e18a:	f241 1311 	movw	r3, #4369	; 0x1111
 800e18e:	4013      	ands	r3, r2
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10f      	bne.n	800e1b4 <HAL_TIM_PWM_Stop_IT+0x120>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	6a1a      	ldr	r2, [r3, #32]
 800e19a:	f244 4344 	movw	r3, #17476	; 0x4444
 800e19e:	4013      	ands	r3, r2
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d107      	bne.n	800e1b4 <HAL_TIM_PWM_Stop_IT+0x120>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e1b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	6a1a      	ldr	r2, [r3, #32]
 800e1ba:	f241 1311 	movw	r3, #4369	; 0x1111
 800e1be:	4013      	ands	r3, r2
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d10f      	bne.n	800e1e4 <HAL_TIM_PWM_Stop_IT+0x150>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	6a1a      	ldr	r2, [r3, #32]
 800e1ca:	f244 4344 	movw	r3, #17476	; 0x4444
 800e1ce:	4013      	ands	r3, r2
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d107      	bne.n	800e1e4 <HAL_TIM_PWM_Stop_IT+0x150>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f022 0201 	bic.w	r2, r2, #1
 800e1e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d104      	bne.n	800e1f4 <HAL_TIM_PWM_Stop_IT+0x160>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e1f2:	e023      	b.n	800e23c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	2b04      	cmp	r3, #4
 800e1f8:	d104      	bne.n	800e204 <HAL_TIM_PWM_Stop_IT+0x170>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e202:	e01b      	b.n	800e23c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	2b08      	cmp	r3, #8
 800e208:	d104      	bne.n	800e214 <HAL_TIM_PWM_Stop_IT+0x180>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2201      	movs	r2, #1
 800e20e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e212:	e013      	b.n	800e23c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	2b0c      	cmp	r3, #12
 800e218:	d104      	bne.n	800e224 <HAL_TIM_PWM_Stop_IT+0x190>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e222:	e00b      	b.n	800e23c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	2b10      	cmp	r3, #16
 800e228:	d104      	bne.n	800e234 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2201      	movs	r2, #1
 800e22e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e232:	e003      	b.n	800e23c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2201      	movs	r2, #1
 800e238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	40012c00 	.word	0x40012c00
 800e24c:	40013400 	.word	0x40013400
 800e250:	40014000 	.word	0x40014000
 800e254:	40014400 	.word	0x40014400
 800e258:	40014800 	.word	0x40014800

0800e25c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d101      	bne.n	800e270 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e041      	b.n	800e2f4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e276:	b2db      	uxtb	r3, r3
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d106      	bne.n	800e28a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7f7 fc95 	bl	8005bb4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2202      	movs	r2, #2
 800e28e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	3304      	adds	r3, #4
 800e29a:	4619      	mov	r1, r3
 800e29c:	4610      	mov	r0, r2
 800e29e:	f000 fbf9 	bl	800ea94 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f022 0208 	bic.w	r2, r2, #8
 800e2b0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	6819      	ldr	r1, [r3, #0]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	683a      	ldr	r2, [r7, #0]
 800e2be:	430a      	orrs	r2, r1
 800e2c0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d101      	bne.n	800e310 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e30c:	2301      	movs	r3, #1
 800e30e:	e097      	b.n	800e440 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e316:	b2db      	uxtb	r3, r3
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d106      	bne.n	800e32a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7f7 fb6d 	bl	8005a04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2202      	movs	r2, #2
 800e32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	6812      	ldr	r2, [r2, #0]
 800e33c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800e340:	f023 0307 	bic.w	r3, r3, #7
 800e344:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	3304      	adds	r3, #4
 800e34e:	4619      	mov	r1, r3
 800e350:	4610      	mov	r0, r2
 800e352:	f000 fb9f 	bl	800ea94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	699b      	ldr	r3, [r3, #24]
 800e364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	6a1b      	ldr	r3, [r3, #32]
 800e36c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	697a      	ldr	r2, [r7, #20]
 800e374:	4313      	orrs	r3, r2
 800e376:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e37e:	f023 0303 	bic.w	r3, r3, #3
 800e382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	689a      	ldr	r2, [r3, #8]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	021b      	lsls	r3, r3, #8
 800e38e:	4313      	orrs	r3, r2
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	4313      	orrs	r3, r2
 800e394:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e39c:	f023 030c 	bic.w	r3, r3, #12
 800e3a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e3a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e3ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	68da      	ldr	r2, [r3, #12]
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	69db      	ldr	r3, [r3, #28]
 800e3b6:	021b      	lsls	r3, r3, #8
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	693a      	ldr	r2, [r7, #16]
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	011a      	lsls	r2, r3, #4
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	6a1b      	ldr	r3, [r3, #32]
 800e3ca:	031b      	lsls	r3, r3, #12
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e3da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e3e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	685a      	ldr	r2, [r3, #4]
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	695b      	ldr	r3, [r3, #20]
 800e3ec:	011b      	lsls	r3, r3, #4
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	697a      	ldr	r2, [r7, #20]
 800e3fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	693a      	ldr	r2, [r7, #16]
 800e404:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2201      	movs	r2, #1
 800e412:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2201      	movs	r2, #1
 800e41a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2201      	movs	r2, #1
 800e422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2201      	movs	r2, #1
 800e42a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2201      	movs	r2, #1
 800e432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2201      	movs	r2, #1
 800e43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3718      	adds	r7, #24
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e458:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e460:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e468:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e470:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d110      	bne.n	800e49a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e478:	7bfb      	ldrb	r3, [r7, #15]
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d102      	bne.n	800e484 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e47e:	7b7b      	ldrb	r3, [r7, #13]
 800e480:	2b01      	cmp	r3, #1
 800e482:	d001      	beq.n	800e488 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800e484:	2301      	movs	r3, #1
 800e486:	e089      	b.n	800e59c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2202      	movs	r2, #2
 800e48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2202      	movs	r2, #2
 800e494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e498:	e031      	b.n	800e4fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	2b04      	cmp	r3, #4
 800e49e:	d110      	bne.n	800e4c2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e4a0:	7bbb      	ldrb	r3, [r7, #14]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d102      	bne.n	800e4ac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e4a6:	7b3b      	ldrb	r3, [r7, #12]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d001      	beq.n	800e4b0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e075      	b.n	800e59c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2202      	movs	r2, #2
 800e4b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2202      	movs	r2, #2
 800e4bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e4c0:	e01d      	b.n	800e4fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e4c2:	7bfb      	ldrb	r3, [r7, #15]
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d108      	bne.n	800e4da <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e4c8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d105      	bne.n	800e4da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e4ce:	7b7b      	ldrb	r3, [r7, #13]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d102      	bne.n	800e4da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e4d4:	7b3b      	ldrb	r3, [r7, #12]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d001      	beq.n	800e4de <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e05e      	b.n	800e59c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2202      	movs	r2, #2
 800e4ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2202      	movs	r2, #2
 800e4f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2202      	movs	r2, #2
 800e4fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d003      	beq.n	800e50c <HAL_TIM_Encoder_Start_IT+0xc4>
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	2b04      	cmp	r3, #4
 800e508:	d010      	beq.n	800e52c <HAL_TIM_Encoder_Start_IT+0xe4>
 800e50a:	e01f      	b.n	800e54c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2201      	movs	r2, #1
 800e512:	2100      	movs	r1, #0
 800e514:	4618      	mov	r0, r3
 800e516:	f000 fe4f 	bl	800f1b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68da      	ldr	r2, [r3, #12]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f042 0202 	orr.w	r2, r2, #2
 800e528:	60da      	str	r2, [r3, #12]
      break;
 800e52a:	e02e      	b.n	800e58a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	2201      	movs	r2, #1
 800e532:	2104      	movs	r1, #4
 800e534:	4618      	mov	r0, r3
 800e536:	f000 fe3f 	bl	800f1b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	68da      	ldr	r2, [r3, #12]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f042 0204 	orr.w	r2, r2, #4
 800e548:	60da      	str	r2, [r3, #12]
      break;
 800e54a:	e01e      	b.n	800e58a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2201      	movs	r2, #1
 800e552:	2100      	movs	r1, #0
 800e554:	4618      	mov	r0, r3
 800e556:	f000 fe2f 	bl	800f1b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2201      	movs	r2, #1
 800e560:	2104      	movs	r1, #4
 800e562:	4618      	mov	r0, r3
 800e564:	f000 fe28 	bl	800f1b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68da      	ldr	r2, [r3, #12]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f042 0202 	orr.w	r2, r2, #2
 800e576:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	68da      	ldr	r2, [r3, #12]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f042 0204 	orr.w	r2, r2, #4
 800e586:	60da      	str	r2, [r3, #12]
      break;
 800e588:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f042 0201 	orr.w	r2, r2, #1
 800e598:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3710      	adds	r7, #16
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	691b      	ldr	r3, [r3, #16]
 800e5ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	f003 0302 	and.w	r3, r3, #2
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d020      	beq.n	800e608 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f003 0302 	and.w	r3, r3, #2
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d01b      	beq.n	800e608 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f06f 0202 	mvn.w	r2, #2
 800e5d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	699b      	ldr	r3, [r3, #24]
 800e5e6:	f003 0303 	and.w	r3, r3, #3
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d003      	beq.n	800e5f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7f5 f9b0 	bl	8003954 <HAL_TIM_IC_CaptureCallback>
 800e5f4:	e005      	b.n	800e602 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 fa38 	bl	800ea6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7f5 f9bb 	bl	8003978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2200      	movs	r2, #0
 800e606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	f003 0304 	and.w	r3, r3, #4
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d020      	beq.n	800e654 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f003 0304 	and.w	r3, r3, #4
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d01b      	beq.n	800e654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f06f 0204 	mvn.w	r2, #4
 800e624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2202      	movs	r2, #2
 800e62a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	699b      	ldr	r3, [r3, #24]
 800e632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e636:	2b00      	cmp	r3, #0
 800e638:	d003      	beq.n	800e642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f7f5 f98a 	bl	8003954 <HAL_TIM_IC_CaptureCallback>
 800e640:	e005      	b.n	800e64e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 fa12 	bl	800ea6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7f5 f995 	bl	8003978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	f003 0308 	and.w	r3, r3, #8
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d020      	beq.n	800e6a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f003 0308 	and.w	r3, r3, #8
 800e664:	2b00      	cmp	r3, #0
 800e666:	d01b      	beq.n	800e6a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f06f 0208 	mvn.w	r2, #8
 800e670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2204      	movs	r2, #4
 800e676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	69db      	ldr	r3, [r3, #28]
 800e67e:	f003 0303 	and.w	r3, r3, #3
 800e682:	2b00      	cmp	r3, #0
 800e684:	d003      	beq.n	800e68e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7f5 f964 	bl	8003954 <HAL_TIM_IC_CaptureCallback>
 800e68c:	e005      	b.n	800e69a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 f9ec 	bl	800ea6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7f5 f96f 	bl	8003978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	f003 0310 	and.w	r3, r3, #16
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d020      	beq.n	800e6ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f003 0310 	and.w	r3, r3, #16
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d01b      	beq.n	800e6ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f06f 0210 	mvn.w	r2, #16
 800e6bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2208      	movs	r2, #8
 800e6c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	69db      	ldr	r3, [r3, #28]
 800e6ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d003      	beq.n	800e6da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7f5 f93e 	bl	8003954 <HAL_TIM_IC_CaptureCallback>
 800e6d8:	e005      	b.n	800e6e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 f9c6 	bl	800ea6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f7f5 f949 	bl	8003978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00c      	beq.n	800e710 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f003 0301 	and.w	r3, r3, #1
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d007      	beq.n	800e710 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f06f 0201 	mvn.w	r2, #1
 800e708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7f5 f95a 	bl	80039c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e716:	2b00      	cmp	r3, #0
 800e718:	d104      	bne.n	800e724 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00c      	beq.n	800e73e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d007      	beq.n	800e73e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800e736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 ff83 	bl	800f644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00c      	beq.n	800e762 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d007      	beq.n	800e762 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e75a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f000 ff7b 	bl	800f658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d00c      	beq.n	800e786 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e772:	2b00      	cmp	r3, #0
 800e774:	d007      	beq.n	800e786 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e77e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 f97d 	bl	800ea80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	f003 0320 	and.w	r3, r3, #32
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00c      	beq.n	800e7aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f003 0320 	and.w	r3, r3, #32
 800e796:	2b00      	cmp	r3, #0
 800e798:	d007      	beq.n	800e7aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f06f 0220 	mvn.w	r2, #32
 800e7a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 ff43 	bl	800f630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d00c      	beq.n	800e7ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d007      	beq.n	800e7ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e7c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f000 ff4f 	bl	800f66c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d00c      	beq.n	800e7f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d007      	beq.n	800e7f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e7ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 ff47 	bl	800f680 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00c      	beq.n	800e816 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e802:	2b00      	cmp	r3, #0
 800e804:	d007      	beq.n	800e816 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e80e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 ff3f 	bl	800f694 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00c      	beq.n	800e83a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e826:	2b00      	cmp	r3, #0
 800e828:	d007      	beq.n	800e83a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 ff37 	bl	800f6a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e83a:	bf00      	nop
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e850:	2300      	movs	r3, #0
 800e852:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d101      	bne.n	800e862 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e85e:	2302      	movs	r3, #2
 800e860:	e0ff      	b.n	800ea62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2201      	movs	r2, #1
 800e866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2b14      	cmp	r3, #20
 800e86e:	f200 80f0 	bhi.w	800ea52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e872:	a201      	add	r2, pc, #4	; (adr r2, 800e878 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e878:	0800e8cd 	.word	0x0800e8cd
 800e87c:	0800ea53 	.word	0x0800ea53
 800e880:	0800ea53 	.word	0x0800ea53
 800e884:	0800ea53 	.word	0x0800ea53
 800e888:	0800e90d 	.word	0x0800e90d
 800e88c:	0800ea53 	.word	0x0800ea53
 800e890:	0800ea53 	.word	0x0800ea53
 800e894:	0800ea53 	.word	0x0800ea53
 800e898:	0800e94f 	.word	0x0800e94f
 800e89c:	0800ea53 	.word	0x0800ea53
 800e8a0:	0800ea53 	.word	0x0800ea53
 800e8a4:	0800ea53 	.word	0x0800ea53
 800e8a8:	0800e98f 	.word	0x0800e98f
 800e8ac:	0800ea53 	.word	0x0800ea53
 800e8b0:	0800ea53 	.word	0x0800ea53
 800e8b4:	0800ea53 	.word	0x0800ea53
 800e8b8:	0800e9d1 	.word	0x0800e9d1
 800e8bc:	0800ea53 	.word	0x0800ea53
 800e8c0:	0800ea53 	.word	0x0800ea53
 800e8c4:	0800ea53 	.word	0x0800ea53
 800e8c8:	0800ea11 	.word	0x0800ea11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68b9      	ldr	r1, [r7, #8]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 f97a 	bl	800ebcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	699a      	ldr	r2, [r3, #24]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f042 0208 	orr.w	r2, r2, #8
 800e8e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	699a      	ldr	r2, [r3, #24]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f022 0204 	bic.w	r2, r2, #4
 800e8f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6999      	ldr	r1, [r3, #24]
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	691a      	ldr	r2, [r3, #16]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	430a      	orrs	r2, r1
 800e908:	619a      	str	r2, [r3, #24]
      break;
 800e90a:	e0a5      	b.n	800ea58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68b9      	ldr	r1, [r7, #8]
 800e912:	4618      	mov	r0, r3
 800e914:	f000 f9ea 	bl	800ecec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	699a      	ldr	r2, [r3, #24]
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	699a      	ldr	r2, [r3, #24]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	6999      	ldr	r1, [r3, #24]
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	691b      	ldr	r3, [r3, #16]
 800e942:	021a      	lsls	r2, r3, #8
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	430a      	orrs	r2, r1
 800e94a:	619a      	str	r2, [r3, #24]
      break;
 800e94c:	e084      	b.n	800ea58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68b9      	ldr	r1, [r7, #8]
 800e954:	4618      	mov	r0, r3
 800e956:	f000 fa53 	bl	800ee00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	69da      	ldr	r2, [r3, #28]
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f042 0208 	orr.w	r2, r2, #8
 800e968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	69da      	ldr	r2, [r3, #28]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f022 0204 	bic.w	r2, r2, #4
 800e978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	69d9      	ldr	r1, [r3, #28]
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	691a      	ldr	r2, [r3, #16]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	430a      	orrs	r2, r1
 800e98a:	61da      	str	r2, [r3, #28]
      break;
 800e98c:	e064      	b.n	800ea58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	68b9      	ldr	r1, [r7, #8]
 800e994:	4618      	mov	r0, r3
 800e996:	f000 fabb 	bl	800ef10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	69da      	ldr	r2, [r3, #28]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	69da      	ldr	r2, [r3, #28]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e9b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	69d9      	ldr	r1, [r3, #28]
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	021a      	lsls	r2, r3, #8
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	430a      	orrs	r2, r1
 800e9cc:	61da      	str	r2, [r3, #28]
      break;
 800e9ce:	e043      	b.n	800ea58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	68b9      	ldr	r1, [r7, #8]
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f000 fb24 	bl	800f024 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f042 0208 	orr.w	r2, r2, #8
 800e9ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f022 0204 	bic.w	r2, r2, #4
 800e9fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	691a      	ldr	r2, [r3, #16]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	430a      	orrs	r2, r1
 800ea0c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ea0e:	e023      	b.n	800ea58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	68b9      	ldr	r1, [r7, #8]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f000 fb68 	bl	800f0ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	691b      	ldr	r3, [r3, #16]
 800ea46:	021a      	lsls	r2, r3, #8
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	430a      	orrs	r2, r1
 800ea4e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ea50:	e002      	b.n	800ea58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ea52:	2301      	movs	r3, #1
 800ea54:	75fb      	strb	r3, [r7, #23]
      break;
 800ea56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ea60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3718      	adds	r7, #24
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop

0800ea6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ea74:	bf00      	nop
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ea88:	bf00      	nop
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4a42      	ldr	r2, [pc, #264]	; (800ebb0 <TIM_Base_SetConfig+0x11c>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d00f      	beq.n	800eacc <TIM_Base_SetConfig+0x38>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eab2:	d00b      	beq.n	800eacc <TIM_Base_SetConfig+0x38>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a3f      	ldr	r2, [pc, #252]	; (800ebb4 <TIM_Base_SetConfig+0x120>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d007      	beq.n	800eacc <TIM_Base_SetConfig+0x38>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4a3e      	ldr	r2, [pc, #248]	; (800ebb8 <TIM_Base_SetConfig+0x124>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d003      	beq.n	800eacc <TIM_Base_SetConfig+0x38>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	4a3d      	ldr	r2, [pc, #244]	; (800ebbc <TIM_Base_SetConfig+0x128>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d108      	bne.n	800eade <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ead2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	68fa      	ldr	r2, [r7, #12]
 800eada:	4313      	orrs	r3, r2
 800eadc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4a33      	ldr	r2, [pc, #204]	; (800ebb0 <TIM_Base_SetConfig+0x11c>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d01b      	beq.n	800eb1e <TIM_Base_SetConfig+0x8a>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaec:	d017      	beq.n	800eb1e <TIM_Base_SetConfig+0x8a>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4a30      	ldr	r2, [pc, #192]	; (800ebb4 <TIM_Base_SetConfig+0x120>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d013      	beq.n	800eb1e <TIM_Base_SetConfig+0x8a>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	4a2f      	ldr	r2, [pc, #188]	; (800ebb8 <TIM_Base_SetConfig+0x124>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d00f      	beq.n	800eb1e <TIM_Base_SetConfig+0x8a>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	4a2e      	ldr	r2, [pc, #184]	; (800ebbc <TIM_Base_SetConfig+0x128>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d00b      	beq.n	800eb1e <TIM_Base_SetConfig+0x8a>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4a2d      	ldr	r2, [pc, #180]	; (800ebc0 <TIM_Base_SetConfig+0x12c>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d007      	beq.n	800eb1e <TIM_Base_SetConfig+0x8a>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	4a2c      	ldr	r2, [pc, #176]	; (800ebc4 <TIM_Base_SetConfig+0x130>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d003      	beq.n	800eb1e <TIM_Base_SetConfig+0x8a>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4a2b      	ldr	r2, [pc, #172]	; (800ebc8 <TIM_Base_SetConfig+0x134>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d108      	bne.n	800eb30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	4313      	orrs	r3, r2
 800eb2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	695b      	ldr	r3, [r3, #20]
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	689a      	ldr	r2, [r3, #8]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a16      	ldr	r2, [pc, #88]	; (800ebb0 <TIM_Base_SetConfig+0x11c>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d00f      	beq.n	800eb7c <TIM_Base_SetConfig+0xe8>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4a17      	ldr	r2, [pc, #92]	; (800ebbc <TIM_Base_SetConfig+0x128>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d00b      	beq.n	800eb7c <TIM_Base_SetConfig+0xe8>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4a16      	ldr	r2, [pc, #88]	; (800ebc0 <TIM_Base_SetConfig+0x12c>)
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d007      	beq.n	800eb7c <TIM_Base_SetConfig+0xe8>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	4a15      	ldr	r2, [pc, #84]	; (800ebc4 <TIM_Base_SetConfig+0x130>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d003      	beq.n	800eb7c <TIM_Base_SetConfig+0xe8>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4a14      	ldr	r2, [pc, #80]	; (800ebc8 <TIM_Base_SetConfig+0x134>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d103      	bne.n	800eb84 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	691a      	ldr	r2, [r3, #16]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2201      	movs	r2, #1
 800eb88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	691b      	ldr	r3, [r3, #16]
 800eb8e:	f003 0301 	and.w	r3, r3, #1
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d105      	bne.n	800eba2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	691b      	ldr	r3, [r3, #16]
 800eb9a:	f023 0201 	bic.w	r2, r3, #1
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	611a      	str	r2, [r3, #16]
  }
}
 800eba2:	bf00      	nop
 800eba4:	3714      	adds	r7, #20
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	40012c00 	.word	0x40012c00
 800ebb4:	40000400 	.word	0x40000400
 800ebb8:	40000800 	.word	0x40000800
 800ebbc:	40013400 	.word	0x40013400
 800ebc0:	40014000 	.word	0x40014000
 800ebc4:	40014400 	.word	0x40014400
 800ebc8:	40014800 	.word	0x40014800

0800ebcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b087      	sub	sp, #28
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6a1b      	ldr	r3, [r3, #32]
 800ebda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6a1b      	ldr	r3, [r3, #32]
 800ebe0:	f023 0201 	bic.w	r2, r3, #1
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	699b      	ldr	r3, [r3, #24]
 800ebf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ebfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f023 0303 	bic.w	r3, r3, #3
 800ec06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	f023 0302 	bic.w	r3, r3, #2
 800ec18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	697a      	ldr	r2, [r7, #20]
 800ec20:	4313      	orrs	r3, r2
 800ec22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	4a2c      	ldr	r2, [pc, #176]	; (800ecd8 <TIM_OC1_SetConfig+0x10c>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d00f      	beq.n	800ec4c <TIM_OC1_SetConfig+0x80>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	4a2b      	ldr	r2, [pc, #172]	; (800ecdc <TIM_OC1_SetConfig+0x110>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d00b      	beq.n	800ec4c <TIM_OC1_SetConfig+0x80>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	4a2a      	ldr	r2, [pc, #168]	; (800ece0 <TIM_OC1_SetConfig+0x114>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d007      	beq.n	800ec4c <TIM_OC1_SetConfig+0x80>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	4a29      	ldr	r2, [pc, #164]	; (800ece4 <TIM_OC1_SetConfig+0x118>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d003      	beq.n	800ec4c <TIM_OC1_SetConfig+0x80>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	4a28      	ldr	r2, [pc, #160]	; (800ece8 <TIM_OC1_SetConfig+0x11c>)
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d10c      	bne.n	800ec66 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	f023 0308 	bic.w	r3, r3, #8
 800ec52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	697a      	ldr	r2, [r7, #20]
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	f023 0304 	bic.w	r3, r3, #4
 800ec64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4a1b      	ldr	r2, [pc, #108]	; (800ecd8 <TIM_OC1_SetConfig+0x10c>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d00f      	beq.n	800ec8e <TIM_OC1_SetConfig+0xc2>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	4a1a      	ldr	r2, [pc, #104]	; (800ecdc <TIM_OC1_SetConfig+0x110>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d00b      	beq.n	800ec8e <TIM_OC1_SetConfig+0xc2>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	4a19      	ldr	r2, [pc, #100]	; (800ece0 <TIM_OC1_SetConfig+0x114>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d007      	beq.n	800ec8e <TIM_OC1_SetConfig+0xc2>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4a18      	ldr	r2, [pc, #96]	; (800ece4 <TIM_OC1_SetConfig+0x118>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d003      	beq.n	800ec8e <TIM_OC1_SetConfig+0xc2>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	4a17      	ldr	r2, [pc, #92]	; (800ece8 <TIM_OC1_SetConfig+0x11c>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d111      	bne.n	800ecb2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	695b      	ldr	r3, [r3, #20]
 800eca2:	693a      	ldr	r2, [r7, #16]
 800eca4:	4313      	orrs	r3, r2
 800eca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	699b      	ldr	r3, [r3, #24]
 800ecac:	693a      	ldr	r2, [r7, #16]
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	693a      	ldr	r2, [r7, #16]
 800ecb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	68fa      	ldr	r2, [r7, #12]
 800ecbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	685a      	ldr	r2, [r3, #4]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	697a      	ldr	r2, [r7, #20]
 800ecca:	621a      	str	r2, [r3, #32]
}
 800eccc:	bf00      	nop
 800ecce:	371c      	adds	r7, #28
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr
 800ecd8:	40012c00 	.word	0x40012c00
 800ecdc:	40013400 	.word	0x40013400
 800ece0:	40014000 	.word	0x40014000
 800ece4:	40014400 	.word	0x40014400
 800ece8:	40014800 	.word	0x40014800

0800ecec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b087      	sub	sp, #28
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6a1b      	ldr	r3, [r3, #32]
 800ecfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6a1b      	ldr	r3, [r3, #32]
 800ed00:	f023 0210 	bic.w	r2, r3, #16
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	699b      	ldr	r3, [r3, #24]
 800ed12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ed1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	021b      	lsls	r3, r3, #8
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	f023 0320 	bic.w	r3, r3, #32
 800ed3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	011b      	lsls	r3, r3, #4
 800ed42:	697a      	ldr	r2, [r7, #20]
 800ed44:	4313      	orrs	r3, r2
 800ed46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4a28      	ldr	r2, [pc, #160]	; (800edec <TIM_OC2_SetConfig+0x100>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d003      	beq.n	800ed58 <TIM_OC2_SetConfig+0x6c>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a27      	ldr	r2, [pc, #156]	; (800edf0 <TIM_OC2_SetConfig+0x104>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d10d      	bne.n	800ed74 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	68db      	ldr	r3, [r3, #12]
 800ed64:	011b      	lsls	r3, r3, #4
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4a1d      	ldr	r2, [pc, #116]	; (800edec <TIM_OC2_SetConfig+0x100>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d00f      	beq.n	800ed9c <TIM_OC2_SetConfig+0xb0>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4a1c      	ldr	r2, [pc, #112]	; (800edf0 <TIM_OC2_SetConfig+0x104>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d00b      	beq.n	800ed9c <TIM_OC2_SetConfig+0xb0>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4a1b      	ldr	r2, [pc, #108]	; (800edf4 <TIM_OC2_SetConfig+0x108>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d007      	beq.n	800ed9c <TIM_OC2_SetConfig+0xb0>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4a1a      	ldr	r2, [pc, #104]	; (800edf8 <TIM_OC2_SetConfig+0x10c>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d003      	beq.n	800ed9c <TIM_OC2_SetConfig+0xb0>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	4a19      	ldr	r2, [pc, #100]	; (800edfc <TIM_OC2_SetConfig+0x110>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d113      	bne.n	800edc4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eda2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800edaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	695b      	ldr	r3, [r3, #20]
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	693a      	ldr	r2, [r7, #16]
 800edb4:	4313      	orrs	r3, r2
 800edb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	699b      	ldr	r3, [r3, #24]
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	693a      	ldr	r2, [r7, #16]
 800edc0:	4313      	orrs	r3, r2
 800edc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	693a      	ldr	r2, [r7, #16]
 800edc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	68fa      	ldr	r2, [r7, #12]
 800edce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	685a      	ldr	r2, [r3, #4]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	697a      	ldr	r2, [r7, #20]
 800eddc:	621a      	str	r2, [r3, #32]
}
 800edde:	bf00      	nop
 800ede0:	371c      	adds	r7, #28
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop
 800edec:	40012c00 	.word	0x40012c00
 800edf0:	40013400 	.word	0x40013400
 800edf4:	40014000 	.word	0x40014000
 800edf8:	40014400 	.word	0x40014400
 800edfc:	40014800 	.word	0x40014800

0800ee00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b087      	sub	sp, #28
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a1b      	ldr	r3, [r3, #32]
 800ee0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6a1b      	ldr	r3, [r3, #32]
 800ee14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	69db      	ldr	r3, [r3, #28]
 800ee26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f023 0303 	bic.w	r3, r3, #3
 800ee3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	4313      	orrs	r3, r2
 800ee44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ee4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	021b      	lsls	r3, r3, #8
 800ee54:	697a      	ldr	r2, [r7, #20]
 800ee56:	4313      	orrs	r3, r2
 800ee58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4a27      	ldr	r2, [pc, #156]	; (800eefc <TIM_OC3_SetConfig+0xfc>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d003      	beq.n	800ee6a <TIM_OC3_SetConfig+0x6a>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4a26      	ldr	r2, [pc, #152]	; (800ef00 <TIM_OC3_SetConfig+0x100>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d10d      	bne.n	800ee86 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ee70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	021b      	lsls	r3, r3, #8
 800ee78:	697a      	ldr	r2, [r7, #20]
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ee84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	4a1c      	ldr	r2, [pc, #112]	; (800eefc <TIM_OC3_SetConfig+0xfc>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d00f      	beq.n	800eeae <TIM_OC3_SetConfig+0xae>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	4a1b      	ldr	r2, [pc, #108]	; (800ef00 <TIM_OC3_SetConfig+0x100>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d00b      	beq.n	800eeae <TIM_OC3_SetConfig+0xae>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	4a1a      	ldr	r2, [pc, #104]	; (800ef04 <TIM_OC3_SetConfig+0x104>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d007      	beq.n	800eeae <TIM_OC3_SetConfig+0xae>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	4a19      	ldr	r2, [pc, #100]	; (800ef08 <TIM_OC3_SetConfig+0x108>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d003      	beq.n	800eeae <TIM_OC3_SetConfig+0xae>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	4a18      	ldr	r2, [pc, #96]	; (800ef0c <TIM_OC3_SetConfig+0x10c>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d113      	bne.n	800eed6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eeb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	695b      	ldr	r3, [r3, #20]
 800eec2:	011b      	lsls	r3, r3, #4
 800eec4:	693a      	ldr	r2, [r7, #16]
 800eec6:	4313      	orrs	r3, r2
 800eec8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	699b      	ldr	r3, [r3, #24]
 800eece:	011b      	lsls	r3, r3, #4
 800eed0:	693a      	ldr	r2, [r7, #16]
 800eed2:	4313      	orrs	r3, r2
 800eed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	693a      	ldr	r2, [r7, #16]
 800eeda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	68fa      	ldr	r2, [r7, #12]
 800eee0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	685a      	ldr	r2, [r3, #4]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	697a      	ldr	r2, [r7, #20]
 800eeee:	621a      	str	r2, [r3, #32]
}
 800eef0:	bf00      	nop
 800eef2:	371c      	adds	r7, #28
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	40012c00 	.word	0x40012c00
 800ef00:	40013400 	.word	0x40013400
 800ef04:	40014000 	.word	0x40014000
 800ef08:	40014400 	.word	0x40014400
 800ef0c:	40014800 	.word	0x40014800

0800ef10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b087      	sub	sp, #28
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6a1b      	ldr	r3, [r3, #32]
 800ef1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6a1b      	ldr	r3, [r3, #32]
 800ef24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	69db      	ldr	r3, [r3, #28]
 800ef36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ef3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	021b      	lsls	r3, r3, #8
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	4313      	orrs	r3, r2
 800ef56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ef5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	689b      	ldr	r3, [r3, #8]
 800ef64:	031b      	lsls	r3, r3, #12
 800ef66:	697a      	ldr	r2, [r7, #20]
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	4a28      	ldr	r2, [pc, #160]	; (800f010 <TIM_OC4_SetConfig+0x100>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d003      	beq.n	800ef7c <TIM_OC4_SetConfig+0x6c>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	4a27      	ldr	r2, [pc, #156]	; (800f014 <TIM_OC4_SetConfig+0x104>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d10d      	bne.n	800ef98 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ef82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	031b      	lsls	r3, r3, #12
 800ef8a:	697a      	ldr	r2, [r7, #20]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4a1d      	ldr	r2, [pc, #116]	; (800f010 <TIM_OC4_SetConfig+0x100>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d00f      	beq.n	800efc0 <TIM_OC4_SetConfig+0xb0>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4a1c      	ldr	r2, [pc, #112]	; (800f014 <TIM_OC4_SetConfig+0x104>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d00b      	beq.n	800efc0 <TIM_OC4_SetConfig+0xb0>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4a1b      	ldr	r2, [pc, #108]	; (800f018 <TIM_OC4_SetConfig+0x108>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d007      	beq.n	800efc0 <TIM_OC4_SetConfig+0xb0>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4a1a      	ldr	r2, [pc, #104]	; (800f01c <TIM_OC4_SetConfig+0x10c>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d003      	beq.n	800efc0 <TIM_OC4_SetConfig+0xb0>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a19      	ldr	r2, [pc, #100]	; (800f020 <TIM_OC4_SetConfig+0x110>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d113      	bne.n	800efe8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800efc6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800efce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	695b      	ldr	r3, [r3, #20]
 800efd4:	019b      	lsls	r3, r3, #6
 800efd6:	693a      	ldr	r2, [r7, #16]
 800efd8:	4313      	orrs	r3, r2
 800efda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	699b      	ldr	r3, [r3, #24]
 800efe0:	019b      	lsls	r3, r3, #6
 800efe2:	693a      	ldr	r2, [r7, #16]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	693a      	ldr	r2, [r7, #16]
 800efec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	685a      	ldr	r2, [r3, #4]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	697a      	ldr	r2, [r7, #20]
 800f000:	621a      	str	r2, [r3, #32]
}
 800f002:	bf00      	nop
 800f004:	371c      	adds	r7, #28
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	40012c00 	.word	0x40012c00
 800f014:	40013400 	.word	0x40013400
 800f018:	40014000 	.word	0x40014000
 800f01c:	40014400 	.word	0x40014400
 800f020:	40014800 	.word	0x40014800

0800f024 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f024:	b480      	push	{r7}
 800f026:	b087      	sub	sp, #28
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6a1b      	ldr	r3, [r3, #32]
 800f032:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6a1b      	ldr	r3, [r3, #32]
 800f038:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	4313      	orrs	r3, r2
 800f060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f068:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	689b      	ldr	r3, [r3, #8]
 800f06e:	041b      	lsls	r3, r3, #16
 800f070:	693a      	ldr	r2, [r7, #16]
 800f072:	4313      	orrs	r3, r2
 800f074:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	4a17      	ldr	r2, [pc, #92]	; (800f0d8 <TIM_OC5_SetConfig+0xb4>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d00f      	beq.n	800f09e <TIM_OC5_SetConfig+0x7a>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4a16      	ldr	r2, [pc, #88]	; (800f0dc <TIM_OC5_SetConfig+0xb8>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d00b      	beq.n	800f09e <TIM_OC5_SetConfig+0x7a>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4a15      	ldr	r2, [pc, #84]	; (800f0e0 <TIM_OC5_SetConfig+0xbc>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d007      	beq.n	800f09e <TIM_OC5_SetConfig+0x7a>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4a14      	ldr	r2, [pc, #80]	; (800f0e4 <TIM_OC5_SetConfig+0xc0>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d003      	beq.n	800f09e <TIM_OC5_SetConfig+0x7a>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a13      	ldr	r2, [pc, #76]	; (800f0e8 <TIM_OC5_SetConfig+0xc4>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d109      	bne.n	800f0b2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f0a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	021b      	lsls	r3, r3, #8
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	697a      	ldr	r2, [r7, #20]
 800f0b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	68fa      	ldr	r2, [r7, #12]
 800f0bc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	685a      	ldr	r2, [r3, #4]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	693a      	ldr	r2, [r7, #16]
 800f0ca:	621a      	str	r2, [r3, #32]
}
 800f0cc:	bf00      	nop
 800f0ce:	371c      	adds	r7, #28
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	40012c00 	.word	0x40012c00
 800f0dc:	40013400 	.word	0x40013400
 800f0e0:	40014000 	.word	0x40014000
 800f0e4:	40014400 	.word	0x40014400
 800f0e8:	40014800 	.word	0x40014800

0800f0ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b087      	sub	sp, #28
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a1b      	ldr	r3, [r3, #32]
 800f0fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6a1b      	ldr	r3, [r3, #32]
 800f100:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f11a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f11e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	021b      	lsls	r3, r3, #8
 800f126:	68fa      	ldr	r2, [r7, #12]
 800f128:	4313      	orrs	r3, r2
 800f12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	051b      	lsls	r3, r3, #20
 800f13a:	693a      	ldr	r2, [r7, #16]
 800f13c:	4313      	orrs	r3, r2
 800f13e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	4a18      	ldr	r2, [pc, #96]	; (800f1a4 <TIM_OC6_SetConfig+0xb8>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d00f      	beq.n	800f168 <TIM_OC6_SetConfig+0x7c>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4a17      	ldr	r2, [pc, #92]	; (800f1a8 <TIM_OC6_SetConfig+0xbc>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d00b      	beq.n	800f168 <TIM_OC6_SetConfig+0x7c>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	4a16      	ldr	r2, [pc, #88]	; (800f1ac <TIM_OC6_SetConfig+0xc0>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d007      	beq.n	800f168 <TIM_OC6_SetConfig+0x7c>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4a15      	ldr	r2, [pc, #84]	; (800f1b0 <TIM_OC6_SetConfig+0xc4>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d003      	beq.n	800f168 <TIM_OC6_SetConfig+0x7c>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4a14      	ldr	r2, [pc, #80]	; (800f1b4 <TIM_OC6_SetConfig+0xc8>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d109      	bne.n	800f17c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f16e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	695b      	ldr	r3, [r3, #20]
 800f174:	029b      	lsls	r3, r3, #10
 800f176:	697a      	ldr	r2, [r7, #20]
 800f178:	4313      	orrs	r3, r2
 800f17a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	685a      	ldr	r2, [r3, #4]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	693a      	ldr	r2, [r7, #16]
 800f194:	621a      	str	r2, [r3, #32]
}
 800f196:	bf00      	nop
 800f198:	371c      	adds	r7, #28
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	40012c00 	.word	0x40012c00
 800f1a8:	40013400 	.word	0x40013400
 800f1ac:	40014000 	.word	0x40014000
 800f1b0:	40014400 	.word	0x40014400
 800f1b4:	40014800 	.word	0x40014800

0800f1b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b087      	sub	sp, #28
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	f003 031f 	and.w	r3, r3, #31
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800f1d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	6a1a      	ldr	r2, [r3, #32]
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	43db      	mvns	r3, r3
 800f1da:	401a      	ands	r2, r3
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	6a1a      	ldr	r2, [r3, #32]
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	f003 031f 	and.w	r3, r3, #31
 800f1ea:	6879      	ldr	r1, [r7, #4]
 800f1ec:	fa01 f303 	lsl.w	r3, r1, r3
 800f1f0:	431a      	orrs	r2, r3
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	621a      	str	r2, [r3, #32]
}
 800f1f6:	bf00      	nop
 800f1f8:	371c      	adds	r7, #28
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr
	...

0800f204 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f20e:	2300      	movs	r3, #0
 800f210:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d109      	bne.n	800f22c <HAL_TIMEx_PWMN_Start_IT+0x28>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	2b01      	cmp	r3, #1
 800f222:	bf14      	ite	ne
 800f224:	2301      	movne	r3, #1
 800f226:	2300      	moveq	r3, #0
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	e022      	b.n	800f272 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	2b04      	cmp	r3, #4
 800f230:	d109      	bne.n	800f246 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	bf14      	ite	ne
 800f23e:	2301      	movne	r3, #1
 800f240:	2300      	moveq	r3, #0
 800f242:	b2db      	uxtb	r3, r3
 800f244:	e015      	b.n	800f272 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	2b08      	cmp	r3, #8
 800f24a:	d109      	bne.n	800f260 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f252:	b2db      	uxtb	r3, r3
 800f254:	2b01      	cmp	r3, #1
 800f256:	bf14      	ite	ne
 800f258:	2301      	movne	r3, #1
 800f25a:	2300      	moveq	r3, #0
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	e008      	b.n	800f272 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f266:	b2db      	uxtb	r3, r3
 800f268:	2b01      	cmp	r3, #1
 800f26a:	bf14      	ite	ne
 800f26c:	2301      	movne	r3, #1
 800f26e:	2300      	moveq	r3, #0
 800f270:	b2db      	uxtb	r3, r3
 800f272:	2b00      	cmp	r3, #0
 800f274:	d001      	beq.n	800f27a <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800f276:	2301      	movs	r3, #1
 800f278:	e0bc      	b.n	800f3f4 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d104      	bne.n	800f28a <HAL_TIMEx_PWMN_Start_IT+0x86>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2202      	movs	r2, #2
 800f284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f288:	e013      	b.n	800f2b2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	2b04      	cmp	r3, #4
 800f28e:	d104      	bne.n	800f29a <HAL_TIMEx_PWMN_Start_IT+0x96>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2202      	movs	r2, #2
 800f294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f298:	e00b      	b.n	800f2b2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	2b08      	cmp	r3, #8
 800f29e:	d104      	bne.n	800f2aa <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2202      	movs	r2, #2
 800f2a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f2a8:	e003      	b.n	800f2b2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2202      	movs	r2, #2
 800f2ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	2b0c      	cmp	r3, #12
 800f2b6:	d841      	bhi.n	800f33c <HAL_TIMEx_PWMN_Start_IT+0x138>
 800f2b8:	a201      	add	r2, pc, #4	; (adr r2, 800f2c0 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800f2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2be:	bf00      	nop
 800f2c0:	0800f2f5 	.word	0x0800f2f5
 800f2c4:	0800f33d 	.word	0x0800f33d
 800f2c8:	0800f33d 	.word	0x0800f33d
 800f2cc:	0800f33d 	.word	0x0800f33d
 800f2d0:	0800f307 	.word	0x0800f307
 800f2d4:	0800f33d 	.word	0x0800f33d
 800f2d8:	0800f33d 	.word	0x0800f33d
 800f2dc:	0800f33d 	.word	0x0800f33d
 800f2e0:	0800f319 	.word	0x0800f319
 800f2e4:	0800f33d 	.word	0x0800f33d
 800f2e8:	0800f33d 	.word	0x0800f33d
 800f2ec:	0800f33d 	.word	0x0800f33d
 800f2f0:	0800f32b 	.word	0x0800f32b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	68da      	ldr	r2, [r3, #12]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f042 0202 	orr.w	r2, r2, #2
 800f302:	60da      	str	r2, [r3, #12]
      break;
 800f304:	e01d      	b.n	800f342 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	68da      	ldr	r2, [r3, #12]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f042 0204 	orr.w	r2, r2, #4
 800f314:	60da      	str	r2, [r3, #12]
      break;
 800f316:	e014      	b.n	800f342 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	68da      	ldr	r2, [r3, #12]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f042 0208 	orr.w	r2, r2, #8
 800f326:	60da      	str	r2, [r3, #12]
      break;
 800f328:	e00b      	b.n	800f342 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	68da      	ldr	r2, [r3, #12]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	f042 0210 	orr.w	r2, r2, #16
 800f338:	60da      	str	r2, [r3, #12]
      break;
 800f33a:	e002      	b.n	800f342 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800f33c:	2301      	movs	r3, #1
 800f33e:	73fb      	strb	r3, [r7, #15]
      break;
 800f340:	bf00      	nop
  }

  if (status == HAL_OK)
 800f342:	7bfb      	ldrb	r3, [r7, #15]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d154      	bne.n	800f3f2 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	68da      	ldr	r2, [r3, #12]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f356:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2204      	movs	r2, #4
 800f35e:	6839      	ldr	r1, [r7, #0]
 800f360:	4618      	mov	r0, r3
 800f362:	f000 f9ab 	bl	800f6bc <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4a20      	ldr	r2, [pc, #128]	; (800f3fc <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d018      	beq.n	800f3b2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f388:	d013      	beq.n	800f3b2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	4a1c      	ldr	r2, [pc, #112]	; (800f400 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d00e      	beq.n	800f3b2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4a1a      	ldr	r2, [pc, #104]	; (800f404 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d009      	beq.n	800f3b2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4a19      	ldr	r2, [pc, #100]	; (800f408 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d004      	beq.n	800f3b2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a17      	ldr	r2, [pc, #92]	; (800f40c <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d115      	bne.n	800f3de <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	689a      	ldr	r2, [r3, #8]
 800f3b8:	4b15      	ldr	r3, [pc, #84]	; (800f410 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800f3ba:	4013      	ands	r3, r2
 800f3bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	2b06      	cmp	r3, #6
 800f3c2:	d015      	beq.n	800f3f0 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3ca:	d011      	beq.n	800f3f0 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f042 0201 	orr.w	r2, r2, #1
 800f3da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3dc:	e008      	b.n	800f3f0 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	681a      	ldr	r2, [r3, #0]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f042 0201 	orr.w	r2, r2, #1
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	e000      	b.n	800f3f2 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3f0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3710      	adds	r7, #16
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	40012c00 	.word	0x40012c00
 800f400:	40000400 	.word	0x40000400
 800f404:	40000800 	.word	0x40000800
 800f408:	40013400 	.word	0x40013400
 800f40c:	40014000 	.word	0x40014000
 800f410:	00010007 	.word	0x00010007

0800f414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f414:	b480      	push	{r7}
 800f416:	b085      	sub	sp, #20
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f424:	2b01      	cmp	r3, #1
 800f426:	d101      	bne.n	800f42c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f428:	2302      	movs	r3, #2
 800f42a:	e065      	b.n	800f4f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2201      	movs	r2, #1
 800f430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2202      	movs	r2, #2
 800f438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	689b      	ldr	r3, [r3, #8]
 800f44a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a2c      	ldr	r2, [pc, #176]	; (800f504 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d004      	beq.n	800f460 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4a2b      	ldr	r2, [pc, #172]	; (800f508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d108      	bne.n	800f472 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f466:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	68fa      	ldr	r2, [r7, #12]
 800f46e:	4313      	orrs	r3, r2
 800f470:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800f478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f47c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	4313      	orrs	r3, r2
 800f486:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a1b      	ldr	r2, [pc, #108]	; (800f504 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d018      	beq.n	800f4cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4a2:	d013      	beq.n	800f4cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4a18      	ldr	r2, [pc, #96]	; (800f50c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d00e      	beq.n	800f4cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	4a17      	ldr	r2, [pc, #92]	; (800f510 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d009      	beq.n	800f4cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4a12      	ldr	r2, [pc, #72]	; (800f508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d004      	beq.n	800f4cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4a13      	ldr	r2, [pc, #76]	; (800f514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d10c      	bne.n	800f4e6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f4d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	689b      	ldr	r3, [r3, #8]
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	68ba      	ldr	r2, [r7, #8]
 800f4e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f4f6:	2300      	movs	r3, #0
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3714      	adds	r7, #20
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr
 800f504:	40012c00 	.word	0x40012c00
 800f508:	40013400 	.word	0x40013400
 800f50c:	40000400 	.word	0x40000400
 800f510:	40000800 	.word	0x40000800
 800f514:	40014000 	.word	0x40014000

0800f518 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f518:	b480      	push	{r7}
 800f51a:	b085      	sub	sp, #20
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f522:	2300      	movs	r3, #0
 800f524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d101      	bne.n	800f534 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f530:	2302      	movs	r3, #2
 800f532:	e073      	b.n	800f61c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2201      	movs	r2, #1
 800f538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	68db      	ldr	r3, [r3, #12]
 800f546:	4313      	orrs	r3, r2
 800f548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	4313      	orrs	r3, r2
 800f556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	4313      	orrs	r3, r2
 800f564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4313      	orrs	r3, r2
 800f572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	691b      	ldr	r3, [r3, #16]
 800f57e:	4313      	orrs	r3, r2
 800f580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	695b      	ldr	r3, [r3, #20]
 800f58c:	4313      	orrs	r3, r2
 800f58e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f59a:	4313      	orrs	r3, r2
 800f59c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	699b      	ldr	r3, [r3, #24]
 800f5a8:	041b      	lsls	r3, r3, #16
 800f5aa:	4313      	orrs	r3, r2
 800f5ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	69db      	ldr	r3, [r3, #28]
 800f5b8:	4313      	orrs	r3, r2
 800f5ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a19      	ldr	r2, [pc, #100]	; (800f628 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d004      	beq.n	800f5d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4a18      	ldr	r2, [pc, #96]	; (800f62c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d11c      	bne.n	800f60a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5da:	051b      	lsls	r3, r3, #20
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	6a1b      	ldr	r3, [r3, #32]
 800f5ea:	4313      	orrs	r3, r2
 800f5ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f606:	4313      	orrs	r3, r2
 800f608:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2200      	movs	r2, #0
 800f616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f61a:	2300      	movs	r3, #0
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3714      	adds	r7, #20
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr
 800f628:	40012c00 	.word	0x40012c00
 800f62c:	40013400 	.word	0x40013400

0800f630 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f638:	bf00      	nop
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f64c:	bf00      	nop
 800f64e:	370c      	adds	r7, #12
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f660:	bf00      	nop
 800f662:	370c      	adds	r7, #12
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr

0800f66c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f674:	bf00      	nop
 800f676:	370c      	adds	r7, #12
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f688:	bf00      	nop
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f69c:	bf00      	nop
 800f69e:	370c      	adds	r7, #12
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b083      	sub	sp, #12
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f6b0:	bf00      	nop
 800f6b2:	370c      	adds	r7, #12
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b087      	sub	sp, #28
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	f003 030f 	and.w	r3, r3, #15
 800f6ce:	2204      	movs	r2, #4
 800f6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f6d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6a1a      	ldr	r2, [r3, #32]
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	43db      	mvns	r3, r3
 800f6de:	401a      	ands	r2, r3
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6a1a      	ldr	r2, [r3, #32]
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	f003 030f 	and.w	r3, r3, #15
 800f6ee:	6879      	ldr	r1, [r7, #4]
 800f6f0:	fa01 f303 	lsl.w	r3, r1, r3
 800f6f4:	431a      	orrs	r2, r3
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	621a      	str	r2, [r3, #32]
}
 800f6fa:	bf00      	nop
 800f6fc:	371c      	adds	r7, #28
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f706:	b580      	push	{r7, lr}
 800f708:	b082      	sub	sp, #8
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d101      	bne.n	800f718 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f714:	2301      	movs	r3, #1
 800f716:	e042      	b.n	800f79e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d106      	bne.n	800f730 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7f6 fac0 	bl	8005cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2224      	movs	r2, #36	; 0x24
 800f734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f022 0201 	bic.w	r2, r2, #1
 800f746:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d002      	beq.n	800f756 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 faf5 	bl	800fd40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 f826 	bl	800f7a8 <UART_SetConfig>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d101      	bne.n	800f766 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f762:	2301      	movs	r3, #1
 800f764:	e01b      	b.n	800f79e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	685a      	ldr	r2, [r3, #4]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f774:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	689a      	ldr	r2, [r3, #8]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f784:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	681a      	ldr	r2, [r3, #0]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f042 0201 	orr.w	r2, r2, #1
 800f794:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 fb74 	bl	800fe84 <UART_CheckIdleState>
 800f79c:	4603      	mov	r3, r0
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3708      	adds	r7, #8
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
	...

0800f7a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f7a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f7ac:	b08c      	sub	sp, #48	; 0x30
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	689a      	ldr	r2, [r3, #8]
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	691b      	ldr	r3, [r3, #16]
 800f7c0:	431a      	orrs	r2, r3
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	695b      	ldr	r3, [r3, #20]
 800f7c6:	431a      	orrs	r2, r3
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	69db      	ldr	r3, [r3, #28]
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	4bab      	ldr	r3, [pc, #684]	; (800fa84 <UART_SetConfig+0x2dc>)
 800f7d8:	4013      	ands	r3, r2
 800f7da:	697a      	ldr	r2, [r7, #20]
 800f7dc:	6812      	ldr	r2, [r2, #0]
 800f7de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7e0:	430b      	orrs	r3, r1
 800f7e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	68da      	ldr	r2, [r3, #12]
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	430a      	orrs	r2, r1
 800f7f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	699b      	ldr	r3, [r3, #24]
 800f7fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4aa0      	ldr	r2, [pc, #640]	; (800fa88 <UART_SetConfig+0x2e0>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d004      	beq.n	800f814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	6a1b      	ldr	r3, [r3, #32]
 800f80e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f810:	4313      	orrs	r3, r2
 800f812:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f81e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	6812      	ldr	r2, [r2, #0]
 800f826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f828:	430b      	orrs	r3, r1
 800f82a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f832:	f023 010f 	bic.w	r1, r3, #15
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	430a      	orrs	r2, r1
 800f840:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4a91      	ldr	r2, [pc, #580]	; (800fa8c <UART_SetConfig+0x2e4>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d125      	bne.n	800f898 <UART_SetConfig+0xf0>
 800f84c:	4b90      	ldr	r3, [pc, #576]	; (800fa90 <UART_SetConfig+0x2e8>)
 800f84e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f852:	f003 0303 	and.w	r3, r3, #3
 800f856:	2b03      	cmp	r3, #3
 800f858:	d81a      	bhi.n	800f890 <UART_SetConfig+0xe8>
 800f85a:	a201      	add	r2, pc, #4	; (adr r2, 800f860 <UART_SetConfig+0xb8>)
 800f85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f860:	0800f871 	.word	0x0800f871
 800f864:	0800f881 	.word	0x0800f881
 800f868:	0800f879 	.word	0x0800f879
 800f86c:	0800f889 	.word	0x0800f889
 800f870:	2301      	movs	r3, #1
 800f872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f876:	e0d6      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f878:	2302      	movs	r3, #2
 800f87a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f87e:	e0d2      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f880:	2304      	movs	r3, #4
 800f882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f886:	e0ce      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f888:	2308      	movs	r3, #8
 800f88a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f88e:	e0ca      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f890:	2310      	movs	r3, #16
 800f892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f896:	e0c6      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	4a7d      	ldr	r2, [pc, #500]	; (800fa94 <UART_SetConfig+0x2ec>)
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d138      	bne.n	800f914 <UART_SetConfig+0x16c>
 800f8a2:	4b7b      	ldr	r3, [pc, #492]	; (800fa90 <UART_SetConfig+0x2e8>)
 800f8a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8a8:	f003 030c 	and.w	r3, r3, #12
 800f8ac:	2b0c      	cmp	r3, #12
 800f8ae:	d82d      	bhi.n	800f90c <UART_SetConfig+0x164>
 800f8b0:	a201      	add	r2, pc, #4	; (adr r2, 800f8b8 <UART_SetConfig+0x110>)
 800f8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8b6:	bf00      	nop
 800f8b8:	0800f8ed 	.word	0x0800f8ed
 800f8bc:	0800f90d 	.word	0x0800f90d
 800f8c0:	0800f90d 	.word	0x0800f90d
 800f8c4:	0800f90d 	.word	0x0800f90d
 800f8c8:	0800f8fd 	.word	0x0800f8fd
 800f8cc:	0800f90d 	.word	0x0800f90d
 800f8d0:	0800f90d 	.word	0x0800f90d
 800f8d4:	0800f90d 	.word	0x0800f90d
 800f8d8:	0800f8f5 	.word	0x0800f8f5
 800f8dc:	0800f90d 	.word	0x0800f90d
 800f8e0:	0800f90d 	.word	0x0800f90d
 800f8e4:	0800f90d 	.word	0x0800f90d
 800f8e8:	0800f905 	.word	0x0800f905
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8f2:	e098      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f8f4:	2302      	movs	r3, #2
 800f8f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8fa:	e094      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f8fc:	2304      	movs	r3, #4
 800f8fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f902:	e090      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f904:	2308      	movs	r3, #8
 800f906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f90a:	e08c      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f90c:	2310      	movs	r3, #16
 800f90e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f912:	e088      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4a5f      	ldr	r2, [pc, #380]	; (800fa98 <UART_SetConfig+0x2f0>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d125      	bne.n	800f96a <UART_SetConfig+0x1c2>
 800f91e:	4b5c      	ldr	r3, [pc, #368]	; (800fa90 <UART_SetConfig+0x2e8>)
 800f920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f924:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f928:	2b30      	cmp	r3, #48	; 0x30
 800f92a:	d016      	beq.n	800f95a <UART_SetConfig+0x1b2>
 800f92c:	2b30      	cmp	r3, #48	; 0x30
 800f92e:	d818      	bhi.n	800f962 <UART_SetConfig+0x1ba>
 800f930:	2b20      	cmp	r3, #32
 800f932:	d00a      	beq.n	800f94a <UART_SetConfig+0x1a2>
 800f934:	2b20      	cmp	r3, #32
 800f936:	d814      	bhi.n	800f962 <UART_SetConfig+0x1ba>
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d002      	beq.n	800f942 <UART_SetConfig+0x19a>
 800f93c:	2b10      	cmp	r3, #16
 800f93e:	d008      	beq.n	800f952 <UART_SetConfig+0x1aa>
 800f940:	e00f      	b.n	800f962 <UART_SetConfig+0x1ba>
 800f942:	2300      	movs	r3, #0
 800f944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f948:	e06d      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f94a:	2302      	movs	r3, #2
 800f94c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f950:	e069      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f952:	2304      	movs	r3, #4
 800f954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f958:	e065      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f95a:	2308      	movs	r3, #8
 800f95c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f960:	e061      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f962:	2310      	movs	r3, #16
 800f964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f968:	e05d      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	4a4b      	ldr	r2, [pc, #300]	; (800fa9c <UART_SetConfig+0x2f4>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d125      	bne.n	800f9c0 <UART_SetConfig+0x218>
 800f974:	4b46      	ldr	r3, [pc, #280]	; (800fa90 <UART_SetConfig+0x2e8>)
 800f976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f97a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f97e:	2bc0      	cmp	r3, #192	; 0xc0
 800f980:	d016      	beq.n	800f9b0 <UART_SetConfig+0x208>
 800f982:	2bc0      	cmp	r3, #192	; 0xc0
 800f984:	d818      	bhi.n	800f9b8 <UART_SetConfig+0x210>
 800f986:	2b80      	cmp	r3, #128	; 0x80
 800f988:	d00a      	beq.n	800f9a0 <UART_SetConfig+0x1f8>
 800f98a:	2b80      	cmp	r3, #128	; 0x80
 800f98c:	d814      	bhi.n	800f9b8 <UART_SetConfig+0x210>
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d002      	beq.n	800f998 <UART_SetConfig+0x1f0>
 800f992:	2b40      	cmp	r3, #64	; 0x40
 800f994:	d008      	beq.n	800f9a8 <UART_SetConfig+0x200>
 800f996:	e00f      	b.n	800f9b8 <UART_SetConfig+0x210>
 800f998:	2300      	movs	r3, #0
 800f99a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f99e:	e042      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f9a0:	2302      	movs	r3, #2
 800f9a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9a6:	e03e      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f9a8:	2304      	movs	r3, #4
 800f9aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9ae:	e03a      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f9b0:	2308      	movs	r3, #8
 800f9b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9b6:	e036      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f9b8:	2310      	movs	r3, #16
 800f9ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9be:	e032      	b.n	800fa26 <UART_SetConfig+0x27e>
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a30      	ldr	r2, [pc, #192]	; (800fa88 <UART_SetConfig+0x2e0>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d12a      	bne.n	800fa20 <UART_SetConfig+0x278>
 800f9ca:	4b31      	ldr	r3, [pc, #196]	; (800fa90 <UART_SetConfig+0x2e8>)
 800f9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f9d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f9d8:	d01a      	beq.n	800fa10 <UART_SetConfig+0x268>
 800f9da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f9de:	d81b      	bhi.n	800fa18 <UART_SetConfig+0x270>
 800f9e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9e4:	d00c      	beq.n	800fa00 <UART_SetConfig+0x258>
 800f9e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9ea:	d815      	bhi.n	800fa18 <UART_SetConfig+0x270>
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d003      	beq.n	800f9f8 <UART_SetConfig+0x250>
 800f9f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9f4:	d008      	beq.n	800fa08 <UART_SetConfig+0x260>
 800f9f6:	e00f      	b.n	800fa18 <UART_SetConfig+0x270>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9fe:	e012      	b.n	800fa26 <UART_SetConfig+0x27e>
 800fa00:	2302      	movs	r3, #2
 800fa02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa06:	e00e      	b.n	800fa26 <UART_SetConfig+0x27e>
 800fa08:	2304      	movs	r3, #4
 800fa0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa0e:	e00a      	b.n	800fa26 <UART_SetConfig+0x27e>
 800fa10:	2308      	movs	r3, #8
 800fa12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa16:	e006      	b.n	800fa26 <UART_SetConfig+0x27e>
 800fa18:	2310      	movs	r3, #16
 800fa1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa1e:	e002      	b.n	800fa26 <UART_SetConfig+0x27e>
 800fa20:	2310      	movs	r3, #16
 800fa22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	4a17      	ldr	r2, [pc, #92]	; (800fa88 <UART_SetConfig+0x2e0>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	f040 80a8 	bne.w	800fb82 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fa36:	2b08      	cmp	r3, #8
 800fa38:	d834      	bhi.n	800faa4 <UART_SetConfig+0x2fc>
 800fa3a:	a201      	add	r2, pc, #4	; (adr r2, 800fa40 <UART_SetConfig+0x298>)
 800fa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa40:	0800fa65 	.word	0x0800fa65
 800fa44:	0800faa5 	.word	0x0800faa5
 800fa48:	0800fa6d 	.word	0x0800fa6d
 800fa4c:	0800faa5 	.word	0x0800faa5
 800fa50:	0800fa73 	.word	0x0800fa73
 800fa54:	0800faa5 	.word	0x0800faa5
 800fa58:	0800faa5 	.word	0x0800faa5
 800fa5c:	0800faa5 	.word	0x0800faa5
 800fa60:	0800fa7b 	.word	0x0800fa7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa64:	f7fd f90c 	bl	800cc80 <HAL_RCC_GetPCLK1Freq>
 800fa68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fa6a:	e021      	b.n	800fab0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fa6c:	4b0c      	ldr	r3, [pc, #48]	; (800faa0 <UART_SetConfig+0x2f8>)
 800fa6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fa70:	e01e      	b.n	800fab0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fa72:	f7fd f897 	bl	800cba4 <HAL_RCC_GetSysClockFreq>
 800fa76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fa78:	e01a      	b.n	800fab0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fa80:	e016      	b.n	800fab0 <UART_SetConfig+0x308>
 800fa82:	bf00      	nop
 800fa84:	cfff69f3 	.word	0xcfff69f3
 800fa88:	40008000 	.word	0x40008000
 800fa8c:	40013800 	.word	0x40013800
 800fa90:	40021000 	.word	0x40021000
 800fa94:	40004400 	.word	0x40004400
 800fa98:	40004800 	.word	0x40004800
 800fa9c:	40004c00 	.word	0x40004c00
 800faa0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800faa4:	2300      	movs	r3, #0
 800faa6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800faa8:	2301      	movs	r3, #1
 800faaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800faae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f000 812a 	beq.w	800fd0c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fabc:	4a9e      	ldr	r2, [pc, #632]	; (800fd38 <UART_SetConfig+0x590>)
 800fabe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fac2:	461a      	mov	r2, r3
 800fac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac6:	fbb3 f3f2 	udiv	r3, r3, r2
 800faca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	685a      	ldr	r2, [r3, #4]
 800fad0:	4613      	mov	r3, r2
 800fad2:	005b      	lsls	r3, r3, #1
 800fad4:	4413      	add	r3, r2
 800fad6:	69ba      	ldr	r2, [r7, #24]
 800fad8:	429a      	cmp	r2, r3
 800fada:	d305      	bcc.n	800fae8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	685b      	ldr	r3, [r3, #4]
 800fae0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fae2:	69ba      	ldr	r2, [r7, #24]
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d903      	bls.n	800faf0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800fae8:	2301      	movs	r3, #1
 800faea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800faee:	e10d      	b.n	800fd0c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800faf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf2:	2200      	movs	r2, #0
 800faf4:	60bb      	str	r3, [r7, #8]
 800faf6:	60fa      	str	r2, [r7, #12]
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fafc:	4a8e      	ldr	r2, [pc, #568]	; (800fd38 <UART_SetConfig+0x590>)
 800fafe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	2200      	movs	r2, #0
 800fb06:	603b      	str	r3, [r7, #0]
 800fb08:	607a      	str	r2, [r7, #4]
 800fb0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fb12:	f7f1 f8e1 	bl	8000cd8 <__aeabi_uldivmod>
 800fb16:	4602      	mov	r2, r0
 800fb18:	460b      	mov	r3, r1
 800fb1a:	4610      	mov	r0, r2
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	f04f 0200 	mov.w	r2, #0
 800fb22:	f04f 0300 	mov.w	r3, #0
 800fb26:	020b      	lsls	r3, r1, #8
 800fb28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fb2c:	0202      	lsls	r2, r0, #8
 800fb2e:	6979      	ldr	r1, [r7, #20]
 800fb30:	6849      	ldr	r1, [r1, #4]
 800fb32:	0849      	lsrs	r1, r1, #1
 800fb34:	2000      	movs	r0, #0
 800fb36:	460c      	mov	r4, r1
 800fb38:	4605      	mov	r5, r0
 800fb3a:	eb12 0804 	adds.w	r8, r2, r4
 800fb3e:	eb43 0905 	adc.w	r9, r3, r5
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	469a      	mov	sl, r3
 800fb4a:	4693      	mov	fp, r2
 800fb4c:	4652      	mov	r2, sl
 800fb4e:	465b      	mov	r3, fp
 800fb50:	4640      	mov	r0, r8
 800fb52:	4649      	mov	r1, r9
 800fb54:	f7f1 f8c0 	bl	8000cd8 <__aeabi_uldivmod>
 800fb58:	4602      	mov	r2, r0
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fb60:	6a3b      	ldr	r3, [r7, #32]
 800fb62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb66:	d308      	bcc.n	800fb7a <UART_SetConfig+0x3d2>
 800fb68:	6a3b      	ldr	r3, [r7, #32]
 800fb6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb6e:	d204      	bcs.n	800fb7a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	6a3a      	ldr	r2, [r7, #32]
 800fb76:	60da      	str	r2, [r3, #12]
 800fb78:	e0c8      	b.n	800fd0c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fb80:	e0c4      	b.n	800fd0c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	69db      	ldr	r3, [r3, #28]
 800fb86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb8a:	d167      	bne.n	800fc5c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800fb8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb90:	2b08      	cmp	r3, #8
 800fb92:	d828      	bhi.n	800fbe6 <UART_SetConfig+0x43e>
 800fb94:	a201      	add	r2, pc, #4	; (adr r2, 800fb9c <UART_SetConfig+0x3f4>)
 800fb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb9a:	bf00      	nop
 800fb9c:	0800fbc1 	.word	0x0800fbc1
 800fba0:	0800fbc9 	.word	0x0800fbc9
 800fba4:	0800fbd1 	.word	0x0800fbd1
 800fba8:	0800fbe7 	.word	0x0800fbe7
 800fbac:	0800fbd7 	.word	0x0800fbd7
 800fbb0:	0800fbe7 	.word	0x0800fbe7
 800fbb4:	0800fbe7 	.word	0x0800fbe7
 800fbb8:	0800fbe7 	.word	0x0800fbe7
 800fbbc:	0800fbdf 	.word	0x0800fbdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbc0:	f7fd f85e 	bl	800cc80 <HAL_RCC_GetPCLK1Freq>
 800fbc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fbc6:	e014      	b.n	800fbf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fbc8:	f7fd f870 	bl	800ccac <HAL_RCC_GetPCLK2Freq>
 800fbcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fbce:	e010      	b.n	800fbf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fbd0:	4b5a      	ldr	r3, [pc, #360]	; (800fd3c <UART_SetConfig+0x594>)
 800fbd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fbd4:	e00d      	b.n	800fbf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fbd6:	f7fc ffe5 	bl	800cba4 <HAL_RCC_GetSysClockFreq>
 800fbda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fbdc:	e009      	b.n	800fbf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fbe4:	e005      	b.n	800fbf2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fbea:	2301      	movs	r3, #1
 800fbec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fbf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	f000 8089 	beq.w	800fd0c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbfe:	4a4e      	ldr	r2, [pc, #312]	; (800fd38 <UART_SetConfig+0x590>)
 800fc00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc04:	461a      	mov	r2, r3
 800fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc08:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc0c:	005a      	lsls	r2, r3, #1
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	085b      	lsrs	r3, r3, #1
 800fc14:	441a      	add	r2, r3
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc20:	6a3b      	ldr	r3, [r7, #32]
 800fc22:	2b0f      	cmp	r3, #15
 800fc24:	d916      	bls.n	800fc54 <UART_SetConfig+0x4ac>
 800fc26:	6a3b      	ldr	r3, [r7, #32]
 800fc28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc2c:	d212      	bcs.n	800fc54 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fc2e:	6a3b      	ldr	r3, [r7, #32]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	f023 030f 	bic.w	r3, r3, #15
 800fc36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fc38:	6a3b      	ldr	r3, [r7, #32]
 800fc3a:	085b      	lsrs	r3, r3, #1
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	f003 0307 	and.w	r3, r3, #7
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	8bfb      	ldrh	r3, [r7, #30]
 800fc46:	4313      	orrs	r3, r2
 800fc48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	8bfa      	ldrh	r2, [r7, #30]
 800fc50:	60da      	str	r2, [r3, #12]
 800fc52:	e05b      	b.n	800fd0c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800fc54:	2301      	movs	r3, #1
 800fc56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fc5a:	e057      	b.n	800fd0c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fc5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fc60:	2b08      	cmp	r3, #8
 800fc62:	d828      	bhi.n	800fcb6 <UART_SetConfig+0x50e>
 800fc64:	a201      	add	r2, pc, #4	; (adr r2, 800fc6c <UART_SetConfig+0x4c4>)
 800fc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc6a:	bf00      	nop
 800fc6c:	0800fc91 	.word	0x0800fc91
 800fc70:	0800fc99 	.word	0x0800fc99
 800fc74:	0800fca1 	.word	0x0800fca1
 800fc78:	0800fcb7 	.word	0x0800fcb7
 800fc7c:	0800fca7 	.word	0x0800fca7
 800fc80:	0800fcb7 	.word	0x0800fcb7
 800fc84:	0800fcb7 	.word	0x0800fcb7
 800fc88:	0800fcb7 	.word	0x0800fcb7
 800fc8c:	0800fcaf 	.word	0x0800fcaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc90:	f7fc fff6 	bl	800cc80 <HAL_RCC_GetPCLK1Freq>
 800fc94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fc96:	e014      	b.n	800fcc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc98:	f7fd f808 	bl	800ccac <HAL_RCC_GetPCLK2Freq>
 800fc9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fc9e:	e010      	b.n	800fcc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fca0:	4b26      	ldr	r3, [pc, #152]	; (800fd3c <UART_SetConfig+0x594>)
 800fca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fca4:	e00d      	b.n	800fcc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fca6:	f7fc ff7d 	bl	800cba4 <HAL_RCC_GetSysClockFreq>
 800fcaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fcac:	e009      	b.n	800fcc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fcae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fcb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fcb4:	e005      	b.n	800fcc2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fcc0:	bf00      	nop
    }

    if (pclk != 0U)
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d021      	beq.n	800fd0c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fccc:	4a1a      	ldr	r2, [pc, #104]	; (800fd38 <UART_SetConfig+0x590>)
 800fcce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd6:	fbb3 f2f2 	udiv	r2, r3, r2
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	085b      	lsrs	r3, r3, #1
 800fce0:	441a      	add	r2, r3
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fcec:	6a3b      	ldr	r3, [r7, #32]
 800fcee:	2b0f      	cmp	r3, #15
 800fcf0:	d909      	bls.n	800fd06 <UART_SetConfig+0x55e>
 800fcf2:	6a3b      	ldr	r3, [r7, #32]
 800fcf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcf8:	d205      	bcs.n	800fd06 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fcfa:	6a3b      	ldr	r3, [r7, #32]
 800fcfc:	b29a      	uxth	r2, r3
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	60da      	str	r2, [r3, #12]
 800fd04:	e002      	b.n	800fd0c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800fd06:	2301      	movs	r3, #1
 800fd08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	2201      	movs	r2, #1
 800fd18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	2200      	movs	r2, #0
 800fd26:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fd28:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3730      	adds	r7, #48	; 0x30
 800fd30:	46bd      	mov	sp, r7
 800fd32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fd36:	bf00      	nop
 800fd38:	0801b7f8 	.word	0x0801b7f8
 800fd3c:	00f42400 	.word	0x00f42400

0800fd40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b083      	sub	sp, #12
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd4c:	f003 0308 	and.w	r3, r3, #8
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d00a      	beq.n	800fd6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	430a      	orrs	r2, r1
 800fd68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd6e:	f003 0301 	and.w	r3, r3, #1
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d00a      	beq.n	800fd8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	430a      	orrs	r2, r1
 800fd8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd90:	f003 0302 	and.w	r3, r3, #2
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d00a      	beq.n	800fdae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	430a      	orrs	r2, r1
 800fdac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdb2:	f003 0304 	and.w	r3, r3, #4
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d00a      	beq.n	800fdd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	430a      	orrs	r2, r1
 800fdce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd4:	f003 0310 	and.w	r3, r3, #16
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d00a      	beq.n	800fdf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	430a      	orrs	r2, r1
 800fdf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdf6:	f003 0320 	and.w	r3, r3, #32
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d00a      	beq.n	800fe14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	430a      	orrs	r2, r1
 800fe12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d01a      	beq.n	800fe56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	430a      	orrs	r2, r1
 800fe34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe3e:	d10a      	bne.n	800fe56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	430a      	orrs	r2, r1
 800fe54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d00a      	beq.n	800fe78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	430a      	orrs	r2, r1
 800fe76:	605a      	str	r2, [r3, #4]
  }
}
 800fe78:	bf00      	nop
 800fe7a:	370c      	adds	r7, #12
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr

0800fe84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b098      	sub	sp, #96	; 0x60
 800fe88:	af02      	add	r7, sp, #8
 800fe8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fe94:	f7f6 fd94 	bl	80069c0 <HAL_GetTick>
 800fe98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f003 0308 	and.w	r3, r3, #8
 800fea4:	2b08      	cmp	r3, #8
 800fea6:	d12f      	bne.n	800ff08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800feac:	9300      	str	r3, [sp, #0]
 800feae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feb0:	2200      	movs	r2, #0
 800feb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 f88e 	bl	800ffd8 <UART_WaitOnFlagUntilTimeout>
 800febc:	4603      	mov	r3, r0
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d022      	beq.n	800ff08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feca:	e853 3f00 	ldrex	r3, [r3]
 800fece:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fed6:	653b      	str	r3, [r7, #80]	; 0x50
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	461a      	mov	r2, r3
 800fede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fee0:	647b      	str	r3, [r7, #68]	; 0x44
 800fee2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fee4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fee8:	e841 2300 	strex	r3, r2, [r1]
 800feec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800feee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d1e6      	bne.n	800fec2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2220      	movs	r2, #32
 800fef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2200      	movs	r2, #0
 800ff00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff04:	2303      	movs	r3, #3
 800ff06:	e063      	b.n	800ffd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f003 0304 	and.w	r3, r3, #4
 800ff12:	2b04      	cmp	r3, #4
 800ff14:	d149      	bne.n	800ffaa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ff1a:	9300      	str	r3, [sp, #0]
 800ff1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 f857 	bl	800ffd8 <UART_WaitOnFlagUntilTimeout>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d03c      	beq.n	800ffaa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff38:	e853 3f00 	ldrex	r3, [r3]
 800ff3c:	623b      	str	r3, [r7, #32]
   return(result);
 800ff3e:	6a3b      	ldr	r3, [r7, #32]
 800ff40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ff44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff4e:	633b      	str	r3, [r7, #48]	; 0x30
 800ff50:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff56:	e841 2300 	strex	r3, r2, [r1]
 800ff5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d1e6      	bne.n	800ff30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	3308      	adds	r3, #8
 800ff68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	e853 3f00 	ldrex	r3, [r3]
 800ff70:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	f023 0301 	bic.w	r3, r3, #1
 800ff78:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	3308      	adds	r3, #8
 800ff80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff82:	61fa      	str	r2, [r7, #28]
 800ff84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff86:	69b9      	ldr	r1, [r7, #24]
 800ff88:	69fa      	ldr	r2, [r7, #28]
 800ff8a:	e841 2300 	strex	r3, r2, [r1]
 800ff8e:	617b      	str	r3, [r7, #20]
   return(result);
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d1e5      	bne.n	800ff62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2220      	movs	r2, #32
 800ff9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ffa6:	2303      	movs	r3, #3
 800ffa8:	e012      	b.n	800ffd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2220      	movs	r2, #32
 800ffae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2220      	movs	r2, #32
 800ffb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3758      	adds	r7, #88	; 0x58
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	603b      	str	r3, [r7, #0]
 800ffe4:	4613      	mov	r3, r2
 800ffe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ffe8:	e04f      	b.n	801008a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ffea:	69bb      	ldr	r3, [r7, #24]
 800ffec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fff0:	d04b      	beq.n	801008a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fff2:	f7f6 fce5 	bl	80069c0 <HAL_GetTick>
 800fff6:	4602      	mov	r2, r0
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	1ad3      	subs	r3, r2, r3
 800fffc:	69ba      	ldr	r2, [r7, #24]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d302      	bcc.n	8010008 <UART_WaitOnFlagUntilTimeout+0x30>
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d101      	bne.n	801000c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010008:	2303      	movs	r3, #3
 801000a:	e04e      	b.n	80100aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f003 0304 	and.w	r3, r3, #4
 8010016:	2b00      	cmp	r3, #0
 8010018:	d037      	beq.n	801008a <UART_WaitOnFlagUntilTimeout+0xb2>
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	2b80      	cmp	r3, #128	; 0x80
 801001e:	d034      	beq.n	801008a <UART_WaitOnFlagUntilTimeout+0xb2>
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	2b40      	cmp	r3, #64	; 0x40
 8010024:	d031      	beq.n	801008a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	69db      	ldr	r3, [r3, #28]
 801002c:	f003 0308 	and.w	r3, r3, #8
 8010030:	2b08      	cmp	r3, #8
 8010032:	d110      	bne.n	8010056 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2208      	movs	r2, #8
 801003a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801003c:	68f8      	ldr	r0, [r7, #12]
 801003e:	f000 f838 	bl	80100b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2208      	movs	r2, #8
 8010046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2200      	movs	r2, #0
 801004e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8010052:	2301      	movs	r3, #1
 8010054:	e029      	b.n	80100aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	69db      	ldr	r3, [r3, #28]
 801005c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010064:	d111      	bne.n	801008a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801006e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	f000 f81e 	bl	80100b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2220      	movs	r2, #32
 801007a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	2200      	movs	r2, #0
 8010082:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8010086:	2303      	movs	r3, #3
 8010088:	e00f      	b.n	80100aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	69da      	ldr	r2, [r3, #28]
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	4013      	ands	r3, r2
 8010094:	68ba      	ldr	r2, [r7, #8]
 8010096:	429a      	cmp	r2, r3
 8010098:	bf0c      	ite	eq
 801009a:	2301      	moveq	r3, #1
 801009c:	2300      	movne	r3, #0
 801009e:	b2db      	uxtb	r3, r3
 80100a0:	461a      	mov	r2, r3
 80100a2:	79fb      	ldrb	r3, [r7, #7]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d0a0      	beq.n	800ffea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80100a8:	2300      	movs	r3, #0
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80100b2:	b480      	push	{r7}
 80100b4:	b095      	sub	sp, #84	; 0x54
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100c2:	e853 3f00 	ldrex	r3, [r3]
 80100c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80100c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80100ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	461a      	mov	r2, r3
 80100d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100d8:	643b      	str	r3, [r7, #64]	; 0x40
 80100da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80100de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80100e0:	e841 2300 	strex	r3, r2, [r1]
 80100e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80100e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d1e6      	bne.n	80100ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	3308      	adds	r3, #8
 80100f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100f4:	6a3b      	ldr	r3, [r7, #32]
 80100f6:	e853 3f00 	ldrex	r3, [r3]
 80100fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010102:	f023 0301 	bic.w	r3, r3, #1
 8010106:	64bb      	str	r3, [r7, #72]	; 0x48
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	3308      	adds	r3, #8
 801010e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010110:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010118:	e841 2300 	strex	r3, r2, [r1]
 801011c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801011e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010120:	2b00      	cmp	r3, #0
 8010122:	d1e3      	bne.n	80100ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010128:	2b01      	cmp	r3, #1
 801012a:	d118      	bne.n	801015e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	e853 3f00 	ldrex	r3, [r3]
 8010138:	60bb      	str	r3, [r7, #8]
   return(result);
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	f023 0310 	bic.w	r3, r3, #16
 8010140:	647b      	str	r3, [r7, #68]	; 0x44
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	461a      	mov	r2, r3
 8010148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801014a:	61bb      	str	r3, [r7, #24]
 801014c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801014e:	6979      	ldr	r1, [r7, #20]
 8010150:	69ba      	ldr	r2, [r7, #24]
 8010152:	e841 2300 	strex	r3, r2, [r1]
 8010156:	613b      	str	r3, [r7, #16]
   return(result);
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d1e6      	bne.n	801012c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2220      	movs	r2, #32
 8010162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2200      	movs	r2, #0
 801016a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2200      	movs	r2, #0
 8010170:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010172:	bf00      	nop
 8010174:	3754      	adds	r7, #84	; 0x54
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr

0801017e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801017e:	b480      	push	{r7}
 8010180:	b085      	sub	sp, #20
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801018c:	2b01      	cmp	r3, #1
 801018e:	d101      	bne.n	8010194 <HAL_UARTEx_DisableFifoMode+0x16>
 8010190:	2302      	movs	r3, #2
 8010192:	e027      	b.n	80101e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2201      	movs	r2, #1
 8010198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2224      	movs	r2, #36	; 0x24
 80101a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f022 0201 	bic.w	r2, r2, #1
 80101ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80101c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2200      	movs	r2, #0
 80101c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2220      	movs	r2, #32
 80101d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2200      	movs	r2, #0
 80101de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3714      	adds	r7, #20
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010200:	2b01      	cmp	r3, #1
 8010202:	d101      	bne.n	8010208 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010204:	2302      	movs	r3, #2
 8010206:	e02d      	b.n	8010264 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2201      	movs	r2, #1
 801020c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2224      	movs	r2, #36	; 0x24
 8010214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f022 0201 	bic.w	r2, r2, #1
 801022e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	689b      	ldr	r3, [r3, #8]
 8010236:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	683a      	ldr	r2, [r7, #0]
 8010240:	430a      	orrs	r2, r1
 8010242:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 f84f 	bl	80102e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	68fa      	ldr	r2, [r7, #12]
 8010250:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2220      	movs	r2, #32
 8010256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2200      	movs	r2, #0
 801025e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010262:	2300      	movs	r3, #0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3710      	adds	r7, #16
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801027c:	2b01      	cmp	r3, #1
 801027e:	d101      	bne.n	8010284 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010280:	2302      	movs	r3, #2
 8010282:	e02d      	b.n	80102e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2201      	movs	r2, #1
 8010288:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2224      	movs	r2, #36	; 0x24
 8010290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f022 0201 	bic.w	r2, r2, #1
 80102aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	689b      	ldr	r3, [r3, #8]
 80102b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	683a      	ldr	r2, [r7, #0]
 80102bc:	430a      	orrs	r2, r1
 80102be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f000 f811 	bl	80102e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2220      	movs	r2, #32
 80102d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2200      	movs	r2, #0
 80102da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80102de:	2300      	movs	r3, #0
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3710      	adds	r7, #16
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d108      	bne.n	801030a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2201      	movs	r2, #1
 80102fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2201      	movs	r2, #1
 8010304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010308:	e031      	b.n	801036e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801030a:	2308      	movs	r3, #8
 801030c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801030e:	2308      	movs	r3, #8
 8010310:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	689b      	ldr	r3, [r3, #8]
 8010318:	0e5b      	lsrs	r3, r3, #25
 801031a:	b2db      	uxtb	r3, r3
 801031c:	f003 0307 	and.w	r3, r3, #7
 8010320:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	0f5b      	lsrs	r3, r3, #29
 801032a:	b2db      	uxtb	r3, r3
 801032c:	f003 0307 	and.w	r3, r3, #7
 8010330:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010332:	7bbb      	ldrb	r3, [r7, #14]
 8010334:	7b3a      	ldrb	r2, [r7, #12]
 8010336:	4911      	ldr	r1, [pc, #68]	; (801037c <UARTEx_SetNbDataToProcess+0x94>)
 8010338:	5c8a      	ldrb	r2, [r1, r2]
 801033a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801033e:	7b3a      	ldrb	r2, [r7, #12]
 8010340:	490f      	ldr	r1, [pc, #60]	; (8010380 <UARTEx_SetNbDataToProcess+0x98>)
 8010342:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010344:	fb93 f3f2 	sdiv	r3, r3, r2
 8010348:	b29a      	uxth	r2, r3
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010350:	7bfb      	ldrb	r3, [r7, #15]
 8010352:	7b7a      	ldrb	r2, [r7, #13]
 8010354:	4909      	ldr	r1, [pc, #36]	; (801037c <UARTEx_SetNbDataToProcess+0x94>)
 8010356:	5c8a      	ldrb	r2, [r1, r2]
 8010358:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801035c:	7b7a      	ldrb	r2, [r7, #13]
 801035e:	4908      	ldr	r1, [pc, #32]	; (8010380 <UARTEx_SetNbDataToProcess+0x98>)
 8010360:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010362:	fb93 f3f2 	sdiv	r3, r3, r2
 8010366:	b29a      	uxth	r2, r3
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801036e:	bf00      	nop
 8010370:	3714      	adds	r7, #20
 8010372:	46bd      	mov	sp, r7
 8010374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010378:	4770      	bx	lr
 801037a:	bf00      	nop
 801037c:	0801b810 	.word	0x0801b810
 8010380:	0801b818 	.word	0x0801b818

08010384 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010384:	b480      	push	{r7}
 8010386:	b085      	sub	sp, #20
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2200      	movs	r2, #0
 8010390:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010394:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010398:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	b29a      	uxth	r2, r3
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80103a4:	2300      	movs	r3, #0
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3714      	adds	r7, #20
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr

080103b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80103b2:	b480      	push	{r7}
 80103b4:	b085      	sub	sp, #20
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80103ba:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80103be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80103c6:	b29a      	uxth	r2, r3
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	43db      	mvns	r3, r3
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	4013      	ands	r3, r2
 80103d2:	b29a      	uxth	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80103da:	2300      	movs	r3, #0
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3714      	adds	r7, #20
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b085      	sub	sp, #20
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	1d3b      	adds	r3, r7, #4
 80103f2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2201      	movs	r2, #1
 80103fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2200      	movs	r2, #0
 8010402:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2200      	movs	r2, #0
 801040a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2200      	movs	r2, #0
 8010412:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8010416:	2300      	movs	r3, #0
}
 8010418:	4618      	mov	r0, r3
 801041a:	3714      	adds	r7, #20
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr

08010424 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010424:	b480      	push	{r7}
 8010426:	b09d      	sub	sp, #116	; 0x74
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801042e:	2300      	movs	r3, #0
 8010430:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010434:	687a      	ldr	r2, [r7, #4]
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	4413      	add	r3, r2
 801043e:	881b      	ldrh	r3, [r3, #0]
 8010440:	b29b      	uxth	r3, r3
 8010442:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8010446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801044a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	78db      	ldrb	r3, [r3, #3]
 8010452:	2b03      	cmp	r3, #3
 8010454:	d81f      	bhi.n	8010496 <USB_ActivateEndpoint+0x72>
 8010456:	a201      	add	r2, pc, #4	; (adr r2, 801045c <USB_ActivateEndpoint+0x38>)
 8010458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801045c:	0801046d 	.word	0x0801046d
 8010460:	08010489 	.word	0x08010489
 8010464:	0801049f 	.word	0x0801049f
 8010468:	0801047b 	.word	0x0801047b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801046c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010474:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010478:	e012      	b.n	80104a0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801047a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801047e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8010482:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010486:	e00b      	b.n	80104a0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010488:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801048c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010490:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010494:	e004      	b.n	80104a0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010496:	2301      	movs	r3, #1
 8010498:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 801049c:	e000      	b.n	80104a0 <USB_ActivateEndpoint+0x7c>
      break;
 801049e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	009b      	lsls	r3, r3, #2
 80104a8:	441a      	add	r2, r3
 80104aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80104ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104be:	b29b      	uxth	r3, r3
 80104c0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	009b      	lsls	r3, r3, #2
 80104ca:	4413      	add	r3, r2
 80104cc:	881b      	ldrh	r3, [r3, #0]
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	b21b      	sxth	r3, r3
 80104d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104da:	b21a      	sxth	r2, r3
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	b21b      	sxth	r3, r3
 80104e2:	4313      	orrs	r3, r2
 80104e4:	b21b      	sxth	r3, r3
 80104e6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	441a      	add	r2, r3
 80104f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80104f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010508:	b29b      	uxth	r3, r3
 801050a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	7b1b      	ldrb	r3, [r3, #12]
 8010510:	2b00      	cmp	r3, #0
 8010512:	f040 8178 	bne.w	8010806 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	785b      	ldrb	r3, [r3, #1]
 801051a:	2b00      	cmp	r3, #0
 801051c:	f000 8084 	beq.w	8010628 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	61bb      	str	r3, [r7, #24]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801052a:	b29b      	uxth	r3, r3
 801052c:	461a      	mov	r2, r3
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	4413      	add	r3, r2
 8010532:	61bb      	str	r3, [r7, #24]
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	00da      	lsls	r2, r3, #3
 801053a:	69bb      	ldr	r3, [r7, #24]
 801053c:	4413      	add	r3, r2
 801053e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010542:	617b      	str	r3, [r7, #20]
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	88db      	ldrh	r3, [r3, #6]
 8010548:	085b      	lsrs	r3, r3, #1
 801054a:	b29b      	uxth	r3, r3
 801054c:	005b      	lsls	r3, r3, #1
 801054e:	b29a      	uxth	r2, r3
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	4413      	add	r3, r2
 801055e:	881b      	ldrh	r3, [r3, #0]
 8010560:	827b      	strh	r3, [r7, #18]
 8010562:	8a7b      	ldrh	r3, [r7, #18]
 8010564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010568:	2b00      	cmp	r3, #0
 801056a:	d01b      	beq.n	80105a4 <USB_ActivateEndpoint+0x180>
 801056c:	687a      	ldr	r2, [r7, #4]
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4413      	add	r3, r2
 8010576:	881b      	ldrh	r3, [r3, #0]
 8010578:	b29b      	uxth	r3, r3
 801057a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801057e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010582:	823b      	strh	r3, [r7, #16]
 8010584:	687a      	ldr	r2, [r7, #4]
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	441a      	add	r2, r3
 801058e:	8a3b      	ldrh	r3, [r7, #16]
 8010590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801059c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	78db      	ldrb	r3, [r3, #3]
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	d020      	beq.n	80105ee <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80105ac:	687a      	ldr	r2, [r7, #4]
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	4413      	add	r3, r2
 80105b6:	881b      	ldrh	r3, [r3, #0]
 80105b8:	b29b      	uxth	r3, r3
 80105ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105c2:	81bb      	strh	r3, [r7, #12]
 80105c4:	89bb      	ldrh	r3, [r7, #12]
 80105c6:	f083 0320 	eor.w	r3, r3, #32
 80105ca:	81bb      	strh	r3, [r7, #12]
 80105cc:	687a      	ldr	r2, [r7, #4]
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	009b      	lsls	r3, r3, #2
 80105d4:	441a      	add	r2, r3
 80105d6:	89bb      	ldrh	r3, [r7, #12]
 80105d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	8013      	strh	r3, [r2, #0]
 80105ec:	e2d5      	b.n	8010b9a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80105ee:	687a      	ldr	r2, [r7, #4]
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	4413      	add	r3, r2
 80105f8:	881b      	ldrh	r3, [r3, #0]
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010604:	81fb      	strh	r3, [r7, #14]
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	009b      	lsls	r3, r3, #2
 801060e:	441a      	add	r2, r3
 8010610:	89fb      	ldrh	r3, [r7, #14]
 8010612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801061a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801061e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010622:	b29b      	uxth	r3, r3
 8010624:	8013      	strh	r3, [r2, #0]
 8010626:	e2b8      	b.n	8010b9a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	633b      	str	r3, [r7, #48]	; 0x30
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010632:	b29b      	uxth	r3, r3
 8010634:	461a      	mov	r2, r3
 8010636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010638:	4413      	add	r3, r2
 801063a:	633b      	str	r3, [r7, #48]	; 0x30
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	00da      	lsls	r2, r3, #3
 8010642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010644:	4413      	add	r3, r2
 8010646:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801064a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	88db      	ldrh	r3, [r3, #6]
 8010650:	085b      	lsrs	r3, r3, #1
 8010652:	b29b      	uxth	r3, r3
 8010654:	005b      	lsls	r3, r3, #1
 8010656:	b29a      	uxth	r2, r3
 8010658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010666:	b29b      	uxth	r3, r3
 8010668:	461a      	mov	r2, r3
 801066a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066c:	4413      	add	r3, r2
 801066e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	00da      	lsls	r2, r3, #3
 8010676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010678:	4413      	add	r3, r2
 801067a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801067e:	627b      	str	r3, [r7, #36]	; 0x24
 8010680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010682:	881b      	ldrh	r3, [r3, #0]
 8010684:	b29b      	uxth	r3, r3
 8010686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801068a:	b29a      	uxth	r2, r3
 801068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068e:	801a      	strh	r2, [r3, #0]
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	691b      	ldr	r3, [r3, #16]
 8010694:	2b3e      	cmp	r3, #62	; 0x3e
 8010696:	d91d      	bls.n	80106d4 <USB_ActivateEndpoint+0x2b0>
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	095b      	lsrs	r3, r3, #5
 801069e:	66bb      	str	r3, [r7, #104]	; 0x68
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	691b      	ldr	r3, [r3, #16]
 80106a4:	f003 031f 	and.w	r3, r3, #31
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d102      	bne.n	80106b2 <USB_ActivateEndpoint+0x28e>
 80106ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106ae:	3b01      	subs	r3, #1
 80106b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80106b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b4:	881b      	ldrh	r3, [r3, #0]
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	029b      	lsls	r3, r3, #10
 80106be:	b29b      	uxth	r3, r3
 80106c0:	4313      	orrs	r3, r2
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d0:	801a      	strh	r2, [r3, #0]
 80106d2:	e026      	b.n	8010722 <USB_ActivateEndpoint+0x2fe>
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	691b      	ldr	r3, [r3, #16]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10a      	bne.n	80106f2 <USB_ActivateEndpoint+0x2ce>
 80106dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106de:	881b      	ldrh	r3, [r3, #0]
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106ea:	b29a      	uxth	r2, r3
 80106ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ee:	801a      	strh	r2, [r3, #0]
 80106f0:	e017      	b.n	8010722 <USB_ActivateEndpoint+0x2fe>
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	691b      	ldr	r3, [r3, #16]
 80106f6:	085b      	lsrs	r3, r3, #1
 80106f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	691b      	ldr	r3, [r3, #16]
 80106fe:	f003 0301 	and.w	r3, r3, #1
 8010702:	2b00      	cmp	r3, #0
 8010704:	d002      	beq.n	801070c <USB_ActivateEndpoint+0x2e8>
 8010706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010708:	3301      	adds	r3, #1
 801070a:	66bb      	str	r3, [r7, #104]	; 0x68
 801070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070e:	881b      	ldrh	r3, [r3, #0]
 8010710:	b29a      	uxth	r2, r3
 8010712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010714:	b29b      	uxth	r3, r3
 8010716:	029b      	lsls	r3, r3, #10
 8010718:	b29b      	uxth	r3, r3
 801071a:	4313      	orrs	r3, r2
 801071c:	b29a      	uxth	r2, r3
 801071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010720:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	4413      	add	r3, r2
 801072c:	881b      	ldrh	r3, [r3, #0]
 801072e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010730:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010736:	2b00      	cmp	r3, #0
 8010738:	d01b      	beq.n	8010772 <USB_ActivateEndpoint+0x34e>
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	009b      	lsls	r3, r3, #2
 8010742:	4413      	add	r3, r2
 8010744:	881b      	ldrh	r3, [r3, #0]
 8010746:	b29b      	uxth	r3, r3
 8010748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801074c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010750:	843b      	strh	r3, [r7, #32]
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	009b      	lsls	r3, r3, #2
 801075a:	441a      	add	r2, r3
 801075c:	8c3b      	ldrh	r3, [r7, #32]
 801075e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801076a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801076e:	b29b      	uxth	r3, r3
 8010770:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d124      	bne.n	80107c4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801077a:	687a      	ldr	r2, [r7, #4]
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	009b      	lsls	r3, r3, #2
 8010782:	4413      	add	r3, r2
 8010784:	881b      	ldrh	r3, [r3, #0]
 8010786:	b29b      	uxth	r3, r3
 8010788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801078c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010790:	83bb      	strh	r3, [r7, #28]
 8010792:	8bbb      	ldrh	r3, [r7, #28]
 8010794:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010798:	83bb      	strh	r3, [r7, #28]
 801079a:	8bbb      	ldrh	r3, [r7, #28]
 801079c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80107a0:	83bb      	strh	r3, [r7, #28]
 80107a2:	687a      	ldr	r2, [r7, #4]
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	009b      	lsls	r3, r3, #2
 80107aa:	441a      	add	r2, r3
 80107ac:	8bbb      	ldrh	r3, [r7, #28]
 80107ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107be:	b29b      	uxth	r3, r3
 80107c0:	8013      	strh	r3, [r2, #0]
 80107c2:	e1ea      	b.n	8010b9a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	4413      	add	r3, r2
 80107ce:	881b      	ldrh	r3, [r3, #0]
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80107d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107da:	83fb      	strh	r3, [r7, #30]
 80107dc:	8bfb      	ldrh	r3, [r7, #30]
 80107de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80107e2:	83fb      	strh	r3, [r7, #30]
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	009b      	lsls	r3, r3, #2
 80107ec:	441a      	add	r2, r3
 80107ee:	8bfb      	ldrh	r3, [r7, #30]
 80107f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010800:	b29b      	uxth	r3, r3
 8010802:	8013      	strh	r3, [r2, #0]
 8010804:	e1c9      	b.n	8010b9a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	78db      	ldrb	r3, [r3, #3]
 801080a:	2b02      	cmp	r3, #2
 801080c:	d11e      	bne.n	801084c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	4413      	add	r3, r2
 8010818:	881b      	ldrh	r3, [r3, #0]
 801081a:	b29b      	uxth	r3, r3
 801081c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010824:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010828:	687a      	ldr	r2, [r7, #4]
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	441a      	add	r2, r3
 8010832:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801083a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801083e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010846:	b29b      	uxth	r3, r3
 8010848:	8013      	strh	r3, [r2, #0]
 801084a:	e01d      	b.n	8010888 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801084c:	687a      	ldr	r2, [r7, #4]
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	009b      	lsls	r3, r3, #2
 8010854:	4413      	add	r3, r2
 8010856:	881b      	ldrh	r3, [r3, #0]
 8010858:	b29b      	uxth	r3, r3
 801085a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801085e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010862:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	441a      	add	r2, r3
 8010870:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801087c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010884:	b29b      	uxth	r3, r3
 8010886:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010892:	b29b      	uxth	r3, r3
 8010894:	461a      	mov	r2, r3
 8010896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010898:	4413      	add	r3, r2
 801089a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	00da      	lsls	r2, r3, #3
 80108a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108a4:	4413      	add	r3, r2
 80108a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80108aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	891b      	ldrh	r3, [r3, #8]
 80108b0:	085b      	lsrs	r3, r3, #1
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	005b      	lsls	r3, r3, #1
 80108b6:	b29a      	uxth	r2, r3
 80108b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108ba:	801a      	strh	r2, [r3, #0]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	657b      	str	r3, [r7, #84]	; 0x54
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	461a      	mov	r2, r3
 80108ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108cc:	4413      	add	r3, r2
 80108ce:	657b      	str	r3, [r7, #84]	; 0x54
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	00da      	lsls	r2, r3, #3
 80108d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108d8:	4413      	add	r3, r2
 80108da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80108de:	653b      	str	r3, [r7, #80]	; 0x50
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	895b      	ldrh	r3, [r3, #10]
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	005b      	lsls	r3, r3, #1
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	785b      	ldrb	r3, [r3, #1]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	f040 8093 	bne.w	8010a20 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80108fa:	687a      	ldr	r2, [r7, #4]
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	009b      	lsls	r3, r3, #2
 8010902:	4413      	add	r3, r2
 8010904:	881b      	ldrh	r3, [r3, #0]
 8010906:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801090a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010912:	2b00      	cmp	r3, #0
 8010914:	d01b      	beq.n	801094e <USB_ActivateEndpoint+0x52a>
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	009b      	lsls	r3, r3, #2
 801091e:	4413      	add	r3, r2
 8010920:	881b      	ldrh	r3, [r3, #0]
 8010922:	b29b      	uxth	r3, r3
 8010924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801092c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	009b      	lsls	r3, r3, #2
 8010936:	441a      	add	r2, r3
 8010938:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801093a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801093e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801094a:	b29b      	uxth	r3, r3
 801094c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	009b      	lsls	r3, r3, #2
 8010956:	4413      	add	r3, r2
 8010958:	881b      	ldrh	r3, [r3, #0]
 801095a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801095c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801095e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010962:	2b00      	cmp	r3, #0
 8010964:	d01b      	beq.n	801099e <USB_ActivateEndpoint+0x57a>
 8010966:	687a      	ldr	r2, [r7, #4]
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	009b      	lsls	r3, r3, #2
 801096e:	4413      	add	r3, r2
 8010970:	881b      	ldrh	r3, [r3, #0]
 8010972:	b29b      	uxth	r3, r3
 8010974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801097c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	441a      	add	r2, r3
 8010988:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801098a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801098e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010996:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801099a:	b29b      	uxth	r3, r3
 801099c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	009b      	lsls	r3, r3, #2
 80109a6:	4413      	add	r3, r2
 80109a8:	881b      	ldrh	r3, [r3, #0]
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80109b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80109b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80109b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80109bc:	873b      	strh	r3, [r7, #56]	; 0x38
 80109be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80109c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80109c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80109c6:	687a      	ldr	r2, [r7, #4]
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	441a      	add	r2, r3
 80109d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80109d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80109d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80109da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80109de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	4413      	add	r3, r2
 80109f0:	881b      	ldrh	r3, [r3, #0]
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	441a      	add	r2, r3
 8010a08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	8013      	strh	r3, [r2, #0]
 8010a1e:	e0bc      	b.n	8010b9a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010a20:	687a      	ldr	r2, [r7, #4]
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	009b      	lsls	r3, r3, #2
 8010a28:	4413      	add	r3, r2
 8010a2a:	881b      	ldrh	r3, [r3, #0]
 8010a2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010a30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d01d      	beq.n	8010a78 <USB_ActivateEndpoint+0x654>
 8010a3c:	687a      	ldr	r2, [r7, #4]
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4413      	add	r3, r2
 8010a46:	881b      	ldrh	r3, [r3, #0]
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a52:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010a56:	687a      	ldr	r2, [r7, #4]
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	009b      	lsls	r3, r3, #2
 8010a5e:	441a      	add	r2, r3
 8010a60:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a74:	b29b      	uxth	r3, r3
 8010a76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	4413      	add	r3, r2
 8010a82:	881b      	ldrh	r3, [r3, #0]
 8010a84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010a88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8010a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d01d      	beq.n	8010ad0 <USB_ActivateEndpoint+0x6ac>
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	009b      	lsls	r3, r3, #2
 8010a9c:	4413      	add	r3, r2
 8010a9e:	881b      	ldrh	r3, [r3, #0]
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010aaa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	009b      	lsls	r3, r3, #2
 8010ab6:	441a      	add	r2, r3
 8010ab8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ac8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010acc:	b29b      	uxth	r3, r3
 8010ace:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	78db      	ldrb	r3, [r3, #3]
 8010ad4:	2b01      	cmp	r3, #1
 8010ad6:	d024      	beq.n	8010b22 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	009b      	lsls	r3, r3, #2
 8010ae0:	4413      	add	r3, r2
 8010ae2:	881b      	ldrh	r3, [r3, #0]
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010aee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010af2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010af6:	f083 0320 	eor.w	r3, r3, #32
 8010afa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010afe:	687a      	ldr	r2, [r7, #4]
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	009b      	lsls	r3, r3, #2
 8010b06:	441a      	add	r2, r3
 8010b08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	8013      	strh	r3, [r2, #0]
 8010b20:	e01d      	b.n	8010b5e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	4413      	add	r3, r2
 8010b2c:	881b      	ldrh	r3, [r3, #0]
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	441a      	add	r2, r3
 8010b46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	009b      	lsls	r3, r3, #2
 8010b66:	4413      	add	r3, r2
 8010b68:	881b      	ldrh	r3, [r3, #0]
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	781b      	ldrb	r3, [r3, #0]
 8010b7e:	009b      	lsls	r3, r3, #2
 8010b80:	441a      	add	r2, r3
 8010b82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010b9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3774      	adds	r7, #116	; 0x74
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop

08010bac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b08d      	sub	sp, #52	; 0x34
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	7b1b      	ldrb	r3, [r3, #12]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	f040 808e 	bne.w	8010cdc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	785b      	ldrb	r3, [r3, #1]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d044      	beq.n	8010c52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010bc8:	687a      	ldr	r2, [r7, #4]
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	4413      	add	r3, r2
 8010bd2:	881b      	ldrh	r3, [r3, #0]
 8010bd4:	81bb      	strh	r3, [r7, #12]
 8010bd6:	89bb      	ldrh	r3, [r7, #12]
 8010bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d01b      	beq.n	8010c18 <USB_DeactivateEndpoint+0x6c>
 8010be0:	687a      	ldr	r2, [r7, #4]
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	781b      	ldrb	r3, [r3, #0]
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	4413      	add	r3, r2
 8010bea:	881b      	ldrh	r3, [r3, #0]
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010bf6:	817b      	strh	r3, [r7, #10]
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	781b      	ldrb	r3, [r3, #0]
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	441a      	add	r2, r3
 8010c02:	897b      	ldrh	r3, [r7, #10]
 8010c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	4413      	add	r3, r2
 8010c22:	881b      	ldrh	r3, [r3, #0]
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c2e:	813b      	strh	r3, [r7, #8]
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	441a      	add	r2, r3
 8010c3a:	893b      	ldrh	r3, [r7, #8]
 8010c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	8013      	strh	r3, [r2, #0]
 8010c50:	e192      	b.n	8010f78 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	4413      	add	r3, r2
 8010c5c:	881b      	ldrh	r3, [r3, #0]
 8010c5e:	827b      	strh	r3, [r7, #18]
 8010c60:	8a7b      	ldrh	r3, [r7, #18]
 8010c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d01b      	beq.n	8010ca2 <USB_DeactivateEndpoint+0xf6>
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	4413      	add	r3, r2
 8010c74:	881b      	ldrh	r3, [r3, #0]
 8010c76:	b29b      	uxth	r3, r3
 8010c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c80:	823b      	strh	r3, [r7, #16]
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	009b      	lsls	r3, r3, #2
 8010c8a:	441a      	add	r2, r3
 8010c8c:	8a3b      	ldrh	r3, [r7, #16]
 8010c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010ca2:	687a      	ldr	r2, [r7, #4]
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	781b      	ldrb	r3, [r3, #0]
 8010ca8:	009b      	lsls	r3, r3, #2
 8010caa:	4413      	add	r3, r2
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cb8:	81fb      	strh	r3, [r7, #14]
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	441a      	add	r2, r3
 8010cc4:	89fb      	ldrh	r3, [r7, #14]
 8010cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	8013      	strh	r3, [r2, #0]
 8010cda:	e14d      	b.n	8010f78 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	785b      	ldrb	r3, [r3, #1]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	f040 80a5 	bne.w	8010e30 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010ce6:	687a      	ldr	r2, [r7, #4]
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4413      	add	r3, r2
 8010cf0:	881b      	ldrh	r3, [r3, #0]
 8010cf2:	843b      	strh	r3, [r7, #32]
 8010cf4:	8c3b      	ldrh	r3, [r7, #32]
 8010cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d01b      	beq.n	8010d36 <USB_DeactivateEndpoint+0x18a>
 8010cfe:	687a      	ldr	r2, [r7, #4]
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	4413      	add	r3, r2
 8010d08:	881b      	ldrh	r3, [r3, #0]
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d14:	83fb      	strh	r3, [r7, #30]
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	009b      	lsls	r3, r3, #2
 8010d1e:	441a      	add	r2, r3
 8010d20:	8bfb      	ldrh	r3, [r7, #30]
 8010d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	009b      	lsls	r3, r3, #2
 8010d3e:	4413      	add	r3, r2
 8010d40:	881b      	ldrh	r3, [r3, #0]
 8010d42:	83bb      	strh	r3, [r7, #28]
 8010d44:	8bbb      	ldrh	r3, [r7, #28]
 8010d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d01b      	beq.n	8010d86 <USB_DeactivateEndpoint+0x1da>
 8010d4e:	687a      	ldr	r2, [r7, #4]
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	009b      	lsls	r3, r3, #2
 8010d56:	4413      	add	r3, r2
 8010d58:	881b      	ldrh	r3, [r3, #0]
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d64:	837b      	strh	r3, [r7, #26]
 8010d66:	687a      	ldr	r2, [r7, #4]
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	009b      	lsls	r3, r3, #2
 8010d6e:	441a      	add	r2, r3
 8010d70:	8b7b      	ldrh	r3, [r7, #26]
 8010d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010d86:	687a      	ldr	r2, [r7, #4]
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	4413      	add	r3, r2
 8010d90:	881b      	ldrh	r3, [r3, #0]
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d9c:	833b      	strh	r3, [r7, #24]
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	009b      	lsls	r3, r3, #2
 8010da6:	441a      	add	r2, r3
 8010da8:	8b3b      	ldrh	r3, [r7, #24]
 8010daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010db6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010dbe:	687a      	ldr	r2, [r7, #4]
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	4413      	add	r3, r2
 8010dc8:	881b      	ldrh	r3, [r3, #0]
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dd4:	82fb      	strh	r3, [r7, #22]
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	009b      	lsls	r3, r3, #2
 8010dde:	441a      	add	r2, r3
 8010de0:	8afb      	ldrh	r3, [r7, #22]
 8010de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	009b      	lsls	r3, r3, #2
 8010dfe:	4413      	add	r3, r2
 8010e00:	881b      	ldrh	r3, [r3, #0]
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e0c:	82bb      	strh	r3, [r7, #20]
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	009b      	lsls	r3, r3, #2
 8010e16:	441a      	add	r2, r3
 8010e18:	8abb      	ldrh	r3, [r7, #20]
 8010e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	8013      	strh	r3, [r2, #0]
 8010e2e:	e0a3      	b.n	8010f78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	4413      	add	r3, r2
 8010e3a:	881b      	ldrh	r3, [r3, #0]
 8010e3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010e3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d01b      	beq.n	8010e80 <USB_DeactivateEndpoint+0x2d4>
 8010e48:	687a      	ldr	r2, [r7, #4]
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	4413      	add	r3, r2
 8010e52:	881b      	ldrh	r3, [r3, #0]
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	009b      	lsls	r3, r3, #2
 8010e68:	441a      	add	r2, r3
 8010e6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	009b      	lsls	r3, r3, #2
 8010e88:	4413      	add	r3, r2
 8010e8a:	881b      	ldrh	r3, [r3, #0]
 8010e8c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010e8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d01b      	beq.n	8010ed0 <USB_DeactivateEndpoint+0x324>
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	781b      	ldrb	r3, [r3, #0]
 8010e9e:	009b      	lsls	r3, r3, #2
 8010ea0:	4413      	add	r3, r2
 8010ea2:	881b      	ldrh	r3, [r3, #0]
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010eae:	853b      	strh	r3, [r7, #40]	; 0x28
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	441a      	add	r2, r3
 8010eba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ec8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010ed0:	687a      	ldr	r2, [r7, #4]
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	4413      	add	r3, r2
 8010eda:	881b      	ldrh	r3, [r3, #0]
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ee6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	441a      	add	r2, r3
 8010ef2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010f08:	687a      	ldr	r2, [r7, #4]
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	009b      	lsls	r3, r3, #2
 8010f10:	4413      	add	r3, r2
 8010f12:	881b      	ldrh	r3, [r3, #0]
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	009b      	lsls	r3, r3, #2
 8010f28:	441a      	add	r2, r3
 8010f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010f40:	687a      	ldr	r2, [r7, #4]
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	009b      	lsls	r3, r3, #2
 8010f48:	4413      	add	r3, r2
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f56:	847b      	strh	r3, [r7, #34]	; 0x22
 8010f58:	687a      	ldr	r2, [r7, #4]
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	009b      	lsls	r3, r3, #2
 8010f60:	441a      	add	r2, r3
 8010f62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f74:	b29b      	uxth	r3, r3
 8010f76:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010f78:	2300      	movs	r3, #0
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3734      	adds	r7, #52	; 0x34
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b0c2      	sub	sp, #264	; 0x108
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f94:	6018      	str	r0, [r3, #0]
 8010f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f9e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	785b      	ldrb	r3, [r3, #1]
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	f040 86b7 	bne.w	8011d20 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	699a      	ldr	r2, [r3, #24]
 8010fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d908      	bls.n	8010fe0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	691b      	ldr	r3, [r3, #16]
 8010fda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010fde:	e007      	b.n	8010ff0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	699b      	ldr	r3, [r3, #24]
 8010fec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	7b1b      	ldrb	r3, [r3, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d13a      	bne.n	8011076 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	6959      	ldr	r1, [r3, #20]
 801100c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	88da      	ldrh	r2, [r3, #6]
 8011018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801101c:	b29b      	uxth	r3, r3
 801101e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011022:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011026:	6800      	ldr	r0, [r0, #0]
 8011028:	f001 fc98 	bl	801295c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801102c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	613b      	str	r3, [r7, #16]
 8011038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801103c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011046:	b29b      	uxth	r3, r3
 8011048:	461a      	mov	r2, r3
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	4413      	add	r3, r2
 801104e:	613b      	str	r3, [r7, #16]
 8011050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	00da      	lsls	r2, r3, #3
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	4413      	add	r3, r2
 8011062:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011066:	60fb      	str	r3, [r7, #12]
 8011068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801106c:	b29a      	uxth	r2, r3
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	801a      	strh	r2, [r3, #0]
 8011072:	f000 be1f 	b.w	8011cb4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801107a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	78db      	ldrb	r3, [r3, #3]
 8011082:	2b02      	cmp	r3, #2
 8011084:	f040 8462 	bne.w	801194c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801108c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	6a1a      	ldr	r2, [r3, #32]
 8011094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	691b      	ldr	r3, [r3, #16]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	f240 83df 	bls.w	8011864 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80110a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	4413      	add	r3, r2
 80110c0:	881b      	ldrh	r3, [r3, #0]
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80110d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	441a      	add	r2, r3
 80110ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80110ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80110fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110fe:	b29b      	uxth	r3, r3
 8011100:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	6a1a      	ldr	r2, [r3, #32]
 801110e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011112:	1ad2      	subs	r2, r2, r3
 8011114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801112e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	009b      	lsls	r3, r3, #2
 8011138:	4413      	add	r3, r2
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	b29b      	uxth	r3, r3
 801113e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011142:	2b00      	cmp	r3, #0
 8011144:	f000 81c7 	beq.w	80114d6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801114c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	633b      	str	r3, [r7, #48]	; 0x30
 8011154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	785b      	ldrb	r3, [r3, #1]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d177      	bne.n	8011254 <USB_EPStartXfer+0x2ce>
 8011164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011168:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801117e:	b29b      	uxth	r3, r3
 8011180:	461a      	mov	r2, r3
 8011182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011184:	4413      	add	r3, r2
 8011186:	62bb      	str	r3, [r7, #40]	; 0x28
 8011188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801118c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	00da      	lsls	r2, r3, #3
 8011196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011198:	4413      	add	r3, r2
 801119a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801119e:	627b      	str	r3, [r7, #36]	; 0x24
 80111a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a2:	881b      	ldrh	r3, [r3, #0]
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80111aa:	b29a      	uxth	r2, r3
 80111ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ae:	801a      	strh	r2, [r3, #0]
 80111b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111b4:	2b3e      	cmp	r3, #62	; 0x3e
 80111b6:	d921      	bls.n	80111fc <USB_EPStartXfer+0x276>
 80111b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111bc:	095b      	lsrs	r3, r3, #5
 80111be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80111c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111c6:	f003 031f 	and.w	r3, r3, #31
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d104      	bne.n	80111d8 <USB_EPStartXfer+0x252>
 80111ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80111d2:	3b01      	subs	r3, #1
 80111d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	881b      	ldrh	r3, [r3, #0]
 80111dc:	b29a      	uxth	r2, r3
 80111de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	029b      	lsls	r3, r3, #10
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	4313      	orrs	r3, r2
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f8:	801a      	strh	r2, [r3, #0]
 80111fa:	e050      	b.n	801129e <USB_EPStartXfer+0x318>
 80111fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011200:	2b00      	cmp	r3, #0
 8011202:	d10a      	bne.n	801121a <USB_EPStartXfer+0x294>
 8011204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011206:	881b      	ldrh	r3, [r3, #0]
 8011208:	b29b      	uxth	r3, r3
 801120a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801120e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011212:	b29a      	uxth	r2, r3
 8011214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011216:	801a      	strh	r2, [r3, #0]
 8011218:	e041      	b.n	801129e <USB_EPStartXfer+0x318>
 801121a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801121e:	085b      	lsrs	r3, r3, #1
 8011220:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011228:	f003 0301 	and.w	r3, r3, #1
 801122c:	2b00      	cmp	r3, #0
 801122e:	d004      	beq.n	801123a <USB_EPStartXfer+0x2b4>
 8011230:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011234:	3301      	adds	r3, #1
 8011236:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123c:	881b      	ldrh	r3, [r3, #0]
 801123e:	b29a      	uxth	r2, r3
 8011240:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011244:	b29b      	uxth	r3, r3
 8011246:	029b      	lsls	r3, r3, #10
 8011248:	b29b      	uxth	r3, r3
 801124a:	4313      	orrs	r3, r2
 801124c:	b29a      	uxth	r2, r3
 801124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011250:	801a      	strh	r2, [r3, #0]
 8011252:	e024      	b.n	801129e <USB_EPStartXfer+0x318>
 8011254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	785b      	ldrb	r3, [r3, #1]
 8011260:	2b01      	cmp	r3, #1
 8011262:	d11c      	bne.n	801129e <USB_EPStartXfer+0x318>
 8011264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011268:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011272:	b29b      	uxth	r3, r3
 8011274:	461a      	mov	r2, r3
 8011276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011278:	4413      	add	r3, r2
 801127a:	633b      	str	r3, [r7, #48]	; 0x30
 801127c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	00da      	lsls	r2, r3, #3
 801128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128c:	4413      	add	r3, r2
 801128e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011298:	b29a      	uxth	r2, r3
 801129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801129e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	895b      	ldrh	r3, [r3, #10]
 80112aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80112ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	6959      	ldr	r1, [r3, #20]
 80112ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112be:	b29b      	uxth	r3, r3
 80112c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80112c4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80112c8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80112cc:	6800      	ldr	r0, [r0, #0]
 80112ce:	f001 fb45 	bl	801295c <USB_WritePMA>
            ep->xfer_buff += len;
 80112d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	695a      	ldr	r2, [r3, #20]
 80112de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112e2:	441a      	add	r2, r3
 80112e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80112f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	6a1a      	ldr	r2, [r3, #32]
 80112fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	691b      	ldr	r3, [r3, #16]
 8011308:	429a      	cmp	r2, r3
 801130a:	d90f      	bls.n	801132c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 801130c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	6a1a      	ldr	r2, [r3, #32]
 8011318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801131c:	1ad2      	subs	r2, r2, r3
 801131e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	621a      	str	r2, [r3, #32]
 801132a:	e00e      	b.n	801134a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 801132c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	6a1b      	ldr	r3, [r3, #32]
 8011338:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801133c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	2200      	movs	r2, #0
 8011348:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801134a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801134e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	785b      	ldrb	r3, [r3, #1]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d177      	bne.n	801144a <USB_EPStartXfer+0x4c4>
 801135a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801135e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	61bb      	str	r3, [r7, #24]
 8011366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801136a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011374:	b29b      	uxth	r3, r3
 8011376:	461a      	mov	r2, r3
 8011378:	69bb      	ldr	r3, [r7, #24]
 801137a:	4413      	add	r3, r2
 801137c:	61bb      	str	r3, [r7, #24]
 801137e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	00da      	lsls	r2, r3, #3
 801138c:	69bb      	ldr	r3, [r7, #24]
 801138e:	4413      	add	r3, r2
 8011390:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011394:	617b      	str	r3, [r7, #20]
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	881b      	ldrh	r3, [r3, #0]
 801139a:	b29b      	uxth	r3, r3
 801139c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80113a0:	b29a      	uxth	r2, r3
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	801a      	strh	r2, [r3, #0]
 80113a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113aa:	2b3e      	cmp	r3, #62	; 0x3e
 80113ac:	d921      	bls.n	80113f2 <USB_EPStartXfer+0x46c>
 80113ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113b2:	095b      	lsrs	r3, r3, #5
 80113b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80113b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113bc:	f003 031f 	and.w	r3, r3, #31
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d104      	bne.n	80113ce <USB_EPStartXfer+0x448>
 80113c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80113c8:	3b01      	subs	r3, #1
 80113ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	881b      	ldrh	r3, [r3, #0]
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80113d8:	b29b      	uxth	r3, r3
 80113da:	029b      	lsls	r3, r3, #10
 80113dc:	b29b      	uxth	r3, r3
 80113de:	4313      	orrs	r3, r2
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80113ea:	b29a      	uxth	r2, r3
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	801a      	strh	r2, [r3, #0]
 80113f0:	e056      	b.n	80114a0 <USB_EPStartXfer+0x51a>
 80113f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d10a      	bne.n	8011410 <USB_EPStartXfer+0x48a>
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	881b      	ldrh	r3, [r3, #0]
 80113fe:	b29b      	uxth	r3, r3
 8011400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011408:	b29a      	uxth	r2, r3
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	801a      	strh	r2, [r3, #0]
 801140e:	e047      	b.n	80114a0 <USB_EPStartXfer+0x51a>
 8011410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011414:	085b      	lsrs	r3, r3, #1
 8011416:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801141a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801141e:	f003 0301 	and.w	r3, r3, #1
 8011422:	2b00      	cmp	r3, #0
 8011424:	d004      	beq.n	8011430 <USB_EPStartXfer+0x4aa>
 8011426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801142a:	3301      	adds	r3, #1
 801142c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	b29a      	uxth	r2, r3
 8011436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801143a:	b29b      	uxth	r3, r3
 801143c:	029b      	lsls	r3, r3, #10
 801143e:	b29b      	uxth	r3, r3
 8011440:	4313      	orrs	r3, r2
 8011442:	b29a      	uxth	r2, r3
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	801a      	strh	r2, [r3, #0]
 8011448:	e02a      	b.n	80114a0 <USB_EPStartXfer+0x51a>
 801144a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801144e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	785b      	ldrb	r3, [r3, #1]
 8011456:	2b01      	cmp	r3, #1
 8011458:	d122      	bne.n	80114a0 <USB_EPStartXfer+0x51a>
 801145a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801145e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	623b      	str	r3, [r7, #32]
 8011466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801146a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011474:	b29b      	uxth	r3, r3
 8011476:	461a      	mov	r2, r3
 8011478:	6a3b      	ldr	r3, [r7, #32]
 801147a:	4413      	add	r3, r2
 801147c:	623b      	str	r3, [r7, #32]
 801147e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	00da      	lsls	r2, r3, #3
 801148c:	6a3b      	ldr	r3, [r7, #32]
 801148e:	4413      	add	r3, r2
 8011490:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011494:	61fb      	str	r3, [r7, #28]
 8011496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801149a:	b29a      	uxth	r2, r3
 801149c:	69fb      	ldr	r3, [r7, #28]
 801149e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80114a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	891b      	ldrh	r3, [r3, #8]
 80114ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80114b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	6959      	ldr	r1, [r3, #20]
 80114bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80114c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80114ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80114ce:	6800      	ldr	r0, [r0, #0]
 80114d0:	f001 fa44 	bl	801295c <USB_WritePMA>
 80114d4:	e3ee      	b.n	8011cb4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80114d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	785b      	ldrb	r3, [r3, #1]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d177      	bne.n	80115d6 <USB_EPStartXfer+0x650>
 80114e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80114f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011500:	b29b      	uxth	r3, r3
 8011502:	461a      	mov	r2, r3
 8011504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011506:	4413      	add	r3, r2
 8011508:	64bb      	str	r3, [r7, #72]	; 0x48
 801150a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801150e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	00da      	lsls	r2, r3, #3
 8011518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801151a:	4413      	add	r3, r2
 801151c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011520:	647b      	str	r3, [r7, #68]	; 0x44
 8011522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011524:	881b      	ldrh	r3, [r3, #0]
 8011526:	b29b      	uxth	r3, r3
 8011528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801152c:	b29a      	uxth	r2, r3
 801152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011530:	801a      	strh	r2, [r3, #0]
 8011532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011536:	2b3e      	cmp	r3, #62	; 0x3e
 8011538:	d921      	bls.n	801157e <USB_EPStartXfer+0x5f8>
 801153a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801153e:	095b      	lsrs	r3, r3, #5
 8011540:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011548:	f003 031f 	and.w	r3, r3, #31
 801154c:	2b00      	cmp	r3, #0
 801154e:	d104      	bne.n	801155a <USB_EPStartXfer+0x5d4>
 8011550:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011554:	3b01      	subs	r3, #1
 8011556:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801155a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801155c:	881b      	ldrh	r3, [r3, #0]
 801155e:	b29a      	uxth	r2, r3
 8011560:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011564:	b29b      	uxth	r3, r3
 8011566:	029b      	lsls	r3, r3, #10
 8011568:	b29b      	uxth	r3, r3
 801156a:	4313      	orrs	r3, r2
 801156c:	b29b      	uxth	r3, r3
 801156e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011576:	b29a      	uxth	r2, r3
 8011578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801157a:	801a      	strh	r2, [r3, #0]
 801157c:	e056      	b.n	801162c <USB_EPStartXfer+0x6a6>
 801157e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011582:	2b00      	cmp	r3, #0
 8011584:	d10a      	bne.n	801159c <USB_EPStartXfer+0x616>
 8011586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011588:	881b      	ldrh	r3, [r3, #0]
 801158a:	b29b      	uxth	r3, r3
 801158c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011594:	b29a      	uxth	r2, r3
 8011596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011598:	801a      	strh	r2, [r3, #0]
 801159a:	e047      	b.n	801162c <USB_EPStartXfer+0x6a6>
 801159c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115a0:	085b      	lsrs	r3, r3, #1
 80115a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80115a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115aa:	f003 0301 	and.w	r3, r3, #1
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d004      	beq.n	80115bc <USB_EPStartXfer+0x636>
 80115b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80115b6:	3301      	adds	r3, #1
 80115b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80115bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115be:	881b      	ldrh	r3, [r3, #0]
 80115c0:	b29a      	uxth	r2, r3
 80115c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	029b      	lsls	r3, r3, #10
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	4313      	orrs	r3, r2
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115d2:	801a      	strh	r2, [r3, #0]
 80115d4:	e02a      	b.n	801162c <USB_EPStartXfer+0x6a6>
 80115d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	785b      	ldrb	r3, [r3, #1]
 80115e2:	2b01      	cmp	r3, #1
 80115e4:	d122      	bne.n	801162c <USB_EPStartXfer+0x6a6>
 80115e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	653b      	str	r3, [r7, #80]	; 0x50
 80115f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011600:	b29b      	uxth	r3, r3
 8011602:	461a      	mov	r2, r3
 8011604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011606:	4413      	add	r3, r2
 8011608:	653b      	str	r3, [r7, #80]	; 0x50
 801160a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801160e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	781b      	ldrb	r3, [r3, #0]
 8011616:	00da      	lsls	r2, r3, #3
 8011618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801161a:	4413      	add	r3, r2
 801161c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011620:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011626:	b29a      	uxth	r2, r3
 8011628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801162a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801162c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	891b      	ldrh	r3, [r3, #8]
 8011638:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801163c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	6959      	ldr	r1, [r3, #20]
 8011648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801164c:	b29b      	uxth	r3, r3
 801164e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011652:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011656:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801165a:	6800      	ldr	r0, [r0, #0]
 801165c:	f001 f97e 	bl	801295c <USB_WritePMA>
            ep->xfer_buff += len;
 8011660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	695a      	ldr	r2, [r3, #20]
 801166c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011670:	441a      	add	r2, r3
 8011672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801167e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	6a1a      	ldr	r2, [r3, #32]
 801168a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801168e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	691b      	ldr	r3, [r3, #16]
 8011696:	429a      	cmp	r2, r3
 8011698:	d90f      	bls.n	80116ba <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 801169a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801169e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	6a1a      	ldr	r2, [r3, #32]
 80116a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116aa:	1ad2      	subs	r2, r2, r3
 80116ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	621a      	str	r2, [r3, #32]
 80116b8:	e00e      	b.n	80116d8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80116ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	6a1b      	ldr	r3, [r3, #32]
 80116c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80116ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2200      	movs	r2, #0
 80116d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80116d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	643b      	str	r3, [r7, #64]	; 0x40
 80116e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	785b      	ldrb	r3, [r3, #1]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d177      	bne.n	80117e4 <USB_EPStartXfer+0x85e>
 80116f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8011700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011704:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801170e:	b29b      	uxth	r3, r3
 8011710:	461a      	mov	r2, r3
 8011712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011714:	4413      	add	r3, r2
 8011716:	63bb      	str	r3, [r7, #56]	; 0x38
 8011718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801171c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	00da      	lsls	r2, r3, #3
 8011726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011728:	4413      	add	r3, r2
 801172a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801172e:	637b      	str	r3, [r7, #52]	; 0x34
 8011730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011732:	881b      	ldrh	r3, [r3, #0]
 8011734:	b29b      	uxth	r3, r3
 8011736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801173a:	b29a      	uxth	r2, r3
 801173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801173e:	801a      	strh	r2, [r3, #0]
 8011740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011744:	2b3e      	cmp	r3, #62	; 0x3e
 8011746:	d921      	bls.n	801178c <USB_EPStartXfer+0x806>
 8011748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801174c:	095b      	lsrs	r3, r3, #5
 801174e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011756:	f003 031f 	and.w	r3, r3, #31
 801175a:	2b00      	cmp	r3, #0
 801175c:	d104      	bne.n	8011768 <USB_EPStartXfer+0x7e2>
 801175e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011762:	3b01      	subs	r3, #1
 8011764:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801176a:	881b      	ldrh	r3, [r3, #0]
 801176c:	b29a      	uxth	r2, r3
 801176e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011772:	b29b      	uxth	r3, r3
 8011774:	029b      	lsls	r3, r3, #10
 8011776:	b29b      	uxth	r3, r3
 8011778:	4313      	orrs	r3, r2
 801177a:	b29b      	uxth	r3, r3
 801177c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011784:	b29a      	uxth	r2, r3
 8011786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011788:	801a      	strh	r2, [r3, #0]
 801178a:	e050      	b.n	801182e <USB_EPStartXfer+0x8a8>
 801178c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011790:	2b00      	cmp	r3, #0
 8011792:	d10a      	bne.n	80117aa <USB_EPStartXfer+0x824>
 8011794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011796:	881b      	ldrh	r3, [r3, #0]
 8011798:	b29b      	uxth	r3, r3
 801179a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801179e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117a6:	801a      	strh	r2, [r3, #0]
 80117a8:	e041      	b.n	801182e <USB_EPStartXfer+0x8a8>
 80117aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117ae:	085b      	lsrs	r3, r3, #1
 80117b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80117b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117b8:	f003 0301 	and.w	r3, r3, #1
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d004      	beq.n	80117ca <USB_EPStartXfer+0x844>
 80117c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80117c4:	3301      	adds	r3, #1
 80117c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80117ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117cc:	881b      	ldrh	r3, [r3, #0]
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	029b      	lsls	r3, r3, #10
 80117d8:	b29b      	uxth	r3, r3
 80117da:	4313      	orrs	r3, r2
 80117dc:	b29a      	uxth	r2, r3
 80117de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117e0:	801a      	strh	r2, [r3, #0]
 80117e2:	e024      	b.n	801182e <USB_EPStartXfer+0x8a8>
 80117e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	785b      	ldrb	r3, [r3, #1]
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	d11c      	bne.n	801182e <USB_EPStartXfer+0x8a8>
 80117f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011802:	b29b      	uxth	r3, r3
 8011804:	461a      	mov	r2, r3
 8011806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011808:	4413      	add	r3, r2
 801180a:	643b      	str	r3, [r7, #64]	; 0x40
 801180c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	00da      	lsls	r2, r3, #3
 801181a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801181c:	4413      	add	r3, r2
 801181e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011828:	b29a      	uxth	r2, r3
 801182a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801182c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801182e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	895b      	ldrh	r3, [r3, #10]
 801183a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801183e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	6959      	ldr	r1, [r3, #20]
 801184a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801184e:	b29b      	uxth	r3, r3
 8011850:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011854:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011858:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801185c:	6800      	ldr	r0, [r0, #0]
 801185e:	f001 f87d 	bl	801295c <USB_WritePMA>
 8011862:	e227      	b.n	8011cb4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	6a1b      	ldr	r3, [r3, #32]
 8011870:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	4413      	add	r3, r2
 801188e:	881b      	ldrh	r3, [r3, #0]
 8011890:	b29b      	uxth	r3, r3
 8011892:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801189a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801189e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	441a      	add	r2, r3
 80118b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80118bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80118c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80118c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80118d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	461a      	mov	r2, r3
 80118ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118f0:	4413      	add	r3, r2
 80118f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	00da      	lsls	r2, r3, #3
 8011902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011904:	4413      	add	r3, r2
 8011906:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801190a:	65bb      	str	r3, [r7, #88]	; 0x58
 801190c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011910:	b29a      	uxth	r2, r3
 8011912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011914:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801191a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	891b      	ldrh	r3, [r3, #8]
 8011922:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801192a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	6959      	ldr	r1, [r3, #20]
 8011932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011936:	b29b      	uxth	r3, r3
 8011938:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801193c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011940:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011944:	6800      	ldr	r0, [r0, #0]
 8011946:	f001 f809 	bl	801295c <USB_WritePMA>
 801194a:	e1b3      	b.n	8011cb4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801194c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	6a1a      	ldr	r2, [r3, #32]
 8011958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801195c:	1ad2      	subs	r2, r2, r3
 801195e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801196a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801196e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011972:	681a      	ldr	r2, [r3, #0]
 8011974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	009b      	lsls	r3, r3, #2
 8011982:	4413      	add	r3, r2
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	b29b      	uxth	r3, r3
 8011988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801198c:	2b00      	cmp	r3, #0
 801198e:	f000 80c6 	beq.w	8011b1e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	673b      	str	r3, [r7, #112]	; 0x70
 801199e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	785b      	ldrb	r3, [r3, #1]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d177      	bne.n	8011a9e <USB_EPStartXfer+0xb18>
 80119ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80119ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	461a      	mov	r2, r3
 80119cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80119ce:	4413      	add	r3, r2
 80119d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80119d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	00da      	lsls	r2, r3, #3
 80119e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80119e2:	4413      	add	r3, r2
 80119e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80119e8:	667b      	str	r3, [r7, #100]	; 0x64
 80119ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119ec:	881b      	ldrh	r3, [r3, #0]
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119f8:	801a      	strh	r2, [r3, #0]
 80119fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119fe:	2b3e      	cmp	r3, #62	; 0x3e
 8011a00:	d921      	bls.n	8011a46 <USB_EPStartXfer+0xac0>
 8011a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a06:	095b      	lsrs	r3, r3, #5
 8011a08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a10:	f003 031f 	and.w	r3, r3, #31
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d104      	bne.n	8011a22 <USB_EPStartXfer+0xa9c>
 8011a18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011a1c:	3b01      	subs	r3, #1
 8011a1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011a22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a24:	881b      	ldrh	r3, [r3, #0]
 8011a26:	b29a      	uxth	r2, r3
 8011a28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	029b      	lsls	r3, r3, #10
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	4313      	orrs	r3, r2
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a42:	801a      	strh	r2, [r3, #0]
 8011a44:	e050      	b.n	8011ae8 <USB_EPStartXfer+0xb62>
 8011a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d10a      	bne.n	8011a64 <USB_EPStartXfer+0xade>
 8011a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a50:	881b      	ldrh	r3, [r3, #0]
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a5c:	b29a      	uxth	r2, r3
 8011a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a60:	801a      	strh	r2, [r3, #0]
 8011a62:	e041      	b.n	8011ae8 <USB_EPStartXfer+0xb62>
 8011a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a68:	085b      	lsrs	r3, r3, #1
 8011a6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a72:	f003 0301 	and.w	r3, r3, #1
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d004      	beq.n	8011a84 <USB_EPStartXfer+0xafe>
 8011a7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011a7e:	3301      	adds	r3, #1
 8011a80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a86:	881b      	ldrh	r3, [r3, #0]
 8011a88:	b29a      	uxth	r2, r3
 8011a8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	029b      	lsls	r3, r3, #10
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	4313      	orrs	r3, r2
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a9a:	801a      	strh	r2, [r3, #0]
 8011a9c:	e024      	b.n	8011ae8 <USB_EPStartXfer+0xb62>
 8011a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	785b      	ldrb	r3, [r3, #1]
 8011aaa:	2b01      	cmp	r3, #1
 8011aac:	d11c      	bne.n	8011ae8 <USB_EPStartXfer+0xb62>
 8011aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	461a      	mov	r2, r3
 8011ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ac2:	4413      	add	r3, r2
 8011ac4:	673b      	str	r3, [r7, #112]	; 0x70
 8011ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	00da      	lsls	r2, r3, #3
 8011ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ad6:	4413      	add	r3, r2
 8011ad8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011adc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ae2:	b29a      	uxth	r2, r3
 8011ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ae6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	895b      	ldrh	r3, [r3, #10]
 8011af4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	6959      	ldr	r1, [r3, #20]
 8011b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011b0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011b12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011b16:	6800      	ldr	r0, [r0, #0]
 8011b18:	f000 ff20 	bl	801295c <USB_WritePMA>
 8011b1c:	e0ca      	b.n	8011cb4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	785b      	ldrb	r3, [r3, #1]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d177      	bne.n	8011c1e <USB_EPStartXfer+0xc98>
 8011b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b4e:	4413      	add	r3, r2
 8011b50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	00da      	lsls	r2, r3, #3
 8011b60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b62:	4413      	add	r3, r2
 8011b64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011b68:	67bb      	str	r3, [r7, #120]	; 0x78
 8011b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b6c:	881b      	ldrh	r3, [r3, #0]
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b74:	b29a      	uxth	r2, r3
 8011b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b78:	801a      	strh	r2, [r3, #0]
 8011b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8011b80:	d921      	bls.n	8011bc6 <USB_EPStartXfer+0xc40>
 8011b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b86:	095b      	lsrs	r3, r3, #5
 8011b88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b90:	f003 031f 	and.w	r3, r3, #31
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d104      	bne.n	8011ba2 <USB_EPStartXfer+0xc1c>
 8011b98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b9c:	3b01      	subs	r3, #1
 8011b9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ba4:	881b      	ldrh	r3, [r3, #0]
 8011ba6:	b29a      	uxth	r2, r3
 8011ba8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	029b      	lsls	r3, r3, #10
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	4313      	orrs	r3, r2
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bbe:	b29a      	uxth	r2, r3
 8011bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011bc2:	801a      	strh	r2, [r3, #0]
 8011bc4:	e05c      	b.n	8011c80 <USB_EPStartXfer+0xcfa>
 8011bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d10a      	bne.n	8011be4 <USB_EPStartXfer+0xc5e>
 8011bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011bd0:	881b      	ldrh	r3, [r3, #0]
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bdc:	b29a      	uxth	r2, r3
 8011bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011be0:	801a      	strh	r2, [r3, #0]
 8011be2:	e04d      	b.n	8011c80 <USB_EPStartXfer+0xcfa>
 8011be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011be8:	085b      	lsrs	r3, r3, #1
 8011bea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bf2:	f003 0301 	and.w	r3, r3, #1
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d004      	beq.n	8011c04 <USB_EPStartXfer+0xc7e>
 8011bfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011bfe:	3301      	adds	r3, #1
 8011c00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c06:	881b      	ldrh	r3, [r3, #0]
 8011c08:	b29a      	uxth	r2, r3
 8011c0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	029b      	lsls	r3, r3, #10
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	4313      	orrs	r3, r2
 8011c16:	b29a      	uxth	r2, r3
 8011c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c1a:	801a      	strh	r2, [r3, #0]
 8011c1c:	e030      	b.n	8011c80 <USB_EPStartXfer+0xcfa>
 8011c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	785b      	ldrb	r3, [r3, #1]
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d128      	bne.n	8011c80 <USB_EPStartXfer+0xcfa>
 8011c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c4a:	b29b      	uxth	r3, r3
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c52:	4413      	add	r3, r2
 8011c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	00da      	lsls	r2, r3, #3
 8011c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c6a:	4413      	add	r3, r2
 8011c6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011c70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011c7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	891b      	ldrh	r3, [r3, #8]
 8011c8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	6959      	ldr	r1, [r3, #20]
 8011c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ca0:	b29b      	uxth	r3, r3
 8011ca2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011ca6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011caa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011cae:	6800      	ldr	r0, [r0, #0]
 8011cb0:	f000 fe54 	bl	801295c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cbc:	681a      	ldr	r2, [r3, #0]
 8011cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	781b      	ldrb	r3, [r3, #0]
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	4413      	add	r3, r2
 8011cce:	881b      	ldrh	r3, [r3, #0]
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011cda:	817b      	strh	r3, [r7, #10]
 8011cdc:	897b      	ldrh	r3, [r7, #10]
 8011cde:	f083 0310 	eor.w	r3, r3, #16
 8011ce2:	817b      	strh	r3, [r7, #10]
 8011ce4:	897b      	ldrh	r3, [r7, #10]
 8011ce6:	f083 0320 	eor.w	r3, r3, #32
 8011cea:	817b      	strh	r3, [r7, #10]
 8011cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cf4:	681a      	ldr	r2, [r3, #0]
 8011cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	009b      	lsls	r3, r3, #2
 8011d04:	441a      	add	r2, r3
 8011d06:	897b      	ldrh	r3, [r7, #10]
 8011d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	8013      	strh	r3, [r2, #0]
 8011d1c:	f000 bcde 	b.w	80126dc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	7b1b      	ldrb	r3, [r3, #12]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	f040 80bb 	bne.w	8011ea8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	699a      	ldr	r2, [r3, #24]
 8011d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	691b      	ldr	r3, [r3, #16]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d917      	bls.n	8011d7e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8011d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	691b      	ldr	r3, [r3, #16]
 8011d5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8011d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	699a      	ldr	r2, [r3, #24]
 8011d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d6e:	1ad2      	subs	r2, r2, r3
 8011d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	619a      	str	r2, [r3, #24]
 8011d7c:	e00e      	b.n	8011d9c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8011d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	699b      	ldr	r3, [r3, #24]
 8011d8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8011d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8011d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	461a      	mov	r2, r3
 8011dbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011dc0:	4413      	add	r3, r2
 8011dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	00da      	lsls	r2, r3, #3
 8011dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011dd8:	4413      	add	r3, r2
 8011dda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011dde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011de6:	881b      	ldrh	r3, [r3, #0]
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011dee:	b29a      	uxth	r2, r3
 8011df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011df4:	801a      	strh	r2, [r3, #0]
 8011df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8011dfc:	d924      	bls.n	8011e48 <USB_EPStartXfer+0xec2>
 8011dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e02:	095b      	lsrs	r3, r3, #5
 8011e04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e0c:	f003 031f 	and.w	r3, r3, #31
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d104      	bne.n	8011e1e <USB_EPStartXfer+0xe98>
 8011e14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e18:	3b01      	subs	r3, #1
 8011e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e22:	881b      	ldrh	r3, [r3, #0]
 8011e24:	b29a      	uxth	r2, r3
 8011e26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	029b      	lsls	r3, r3, #10
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	4313      	orrs	r3, r2
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e3c:	b29a      	uxth	r2, r3
 8011e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e42:	801a      	strh	r2, [r3, #0]
 8011e44:	f000 bc10 	b.w	8012668 <USB_EPStartXfer+0x16e2>
 8011e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d10c      	bne.n	8011e6a <USB_EPStartXfer+0xee4>
 8011e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e54:	881b      	ldrh	r3, [r3, #0]
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e60:	b29a      	uxth	r2, r3
 8011e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e66:	801a      	strh	r2, [r3, #0]
 8011e68:	e3fe      	b.n	8012668 <USB_EPStartXfer+0x16e2>
 8011e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e6e:	085b      	lsrs	r3, r3, #1
 8011e70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e78:	f003 0301 	and.w	r3, r3, #1
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d004      	beq.n	8011e8a <USB_EPStartXfer+0xf04>
 8011e80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e84:	3301      	adds	r3, #1
 8011e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e8e:	881b      	ldrh	r3, [r3, #0]
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	029b      	lsls	r3, r3, #10
 8011e9a:	b29b      	uxth	r3, r3
 8011e9c:	4313      	orrs	r3, r2
 8011e9e:	b29a      	uxth	r2, r3
 8011ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011ea4:	801a      	strh	r2, [r3, #0]
 8011ea6:	e3df      	b.n	8012668 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	78db      	ldrb	r3, [r3, #3]
 8011eb4:	2b02      	cmp	r3, #2
 8011eb6:	f040 8218 	bne.w	80122ea <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	785b      	ldrb	r3, [r3, #1]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	f040 809d 	bne.w	8012006 <USB_EPStartXfer+0x1080>
 8011ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ee8:	b29b      	uxth	r3, r3
 8011eea:	461a      	mov	r2, r3
 8011eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ef0:	4413      	add	r3, r2
 8011ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	00da      	lsls	r2, r3, #3
 8011f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f08:	4413      	add	r3, r2
 8011f0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f16:	881b      	ldrh	r3, [r3, #0]
 8011f18:	b29b      	uxth	r3, r3
 8011f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011f1e:	b29a      	uxth	r2, r3
 8011f20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f24:	801a      	strh	r2, [r3, #0]
 8011f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	691b      	ldr	r3, [r3, #16]
 8011f32:	2b3e      	cmp	r3, #62	; 0x3e
 8011f34:	d92b      	bls.n	8011f8e <USB_EPStartXfer+0x1008>
 8011f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	691b      	ldr	r3, [r3, #16]
 8011f42:	095b      	lsrs	r3, r3, #5
 8011f44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	691b      	ldr	r3, [r3, #16]
 8011f54:	f003 031f 	and.w	r3, r3, #31
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d104      	bne.n	8011f66 <USB_EPStartXfer+0xfe0>
 8011f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011f60:	3b01      	subs	r3, #1
 8011f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011f66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f6a:	881b      	ldrh	r3, [r3, #0]
 8011f6c:	b29a      	uxth	r2, r3
 8011f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	029b      	lsls	r3, r3, #10
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	4313      	orrs	r3, r2
 8011f7a:	b29b      	uxth	r3, r3
 8011f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f84:	b29a      	uxth	r2, r3
 8011f86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f8a:	801a      	strh	r2, [r3, #0]
 8011f8c:	e070      	b.n	8012070 <USB_EPStartXfer+0x10ea>
 8011f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	691b      	ldr	r3, [r3, #16]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d10c      	bne.n	8011fb8 <USB_EPStartXfer+0x1032>
 8011f9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011fa2:	881b      	ldrh	r3, [r3, #0]
 8011fa4:	b29b      	uxth	r3, r3
 8011fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011fae:	b29a      	uxth	r2, r3
 8011fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011fb4:	801a      	strh	r2, [r3, #0]
 8011fb6:	e05b      	b.n	8012070 <USB_EPStartXfer+0x10ea>
 8011fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	691b      	ldr	r3, [r3, #16]
 8011fc4:	085b      	lsrs	r3, r3, #1
 8011fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	691b      	ldr	r3, [r3, #16]
 8011fd6:	f003 0301 	and.w	r3, r3, #1
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d004      	beq.n	8011fe8 <USB_EPStartXfer+0x1062>
 8011fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011fec:	881b      	ldrh	r3, [r3, #0]
 8011fee:	b29a      	uxth	r2, r3
 8011ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	029b      	lsls	r3, r3, #10
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	b29a      	uxth	r2, r3
 8011ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012002:	801a      	strh	r2, [r3, #0]
 8012004:	e034      	b.n	8012070 <USB_EPStartXfer+0x10ea>
 8012006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801200a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	785b      	ldrb	r3, [r3, #1]
 8012012:	2b01      	cmp	r3, #1
 8012014:	d12c      	bne.n	8012070 <USB_EPStartXfer+0x10ea>
 8012016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801201a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012032:	b29b      	uxth	r3, r3
 8012034:	461a      	mov	r2, r3
 8012036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801203a:	4413      	add	r3, r2
 801203c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	00da      	lsls	r2, r3, #3
 801204e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012052:	4413      	add	r3, r2
 8012054:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801205c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	691b      	ldr	r3, [r3, #16]
 8012068:	b29a      	uxth	r2, r3
 801206a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801206e:	801a      	strh	r2, [r3, #0]
 8012070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012074:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801207e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	785b      	ldrb	r3, [r3, #1]
 801208a:	2b00      	cmp	r3, #0
 801208c:	f040 809d 	bne.w	80121ca <USB_EPStartXfer+0x1244>
 8012090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801209e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	461a      	mov	r2, r3
 80120b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80120b4:	4413      	add	r3, r2
 80120b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80120ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	00da      	lsls	r2, r3, #3
 80120c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80120cc:	4413      	add	r3, r2
 80120ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80120d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80120d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80120da:	881b      	ldrh	r3, [r3, #0]
 80120dc:	b29b      	uxth	r3, r3
 80120de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80120e2:	b29a      	uxth	r2, r3
 80120e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80120e8:	801a      	strh	r2, [r3, #0]
 80120ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	691b      	ldr	r3, [r3, #16]
 80120f6:	2b3e      	cmp	r3, #62	; 0x3e
 80120f8:	d92b      	bls.n	8012152 <USB_EPStartXfer+0x11cc>
 80120fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	691b      	ldr	r3, [r3, #16]
 8012106:	095b      	lsrs	r3, r3, #5
 8012108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801210c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	691b      	ldr	r3, [r3, #16]
 8012118:	f003 031f 	and.w	r3, r3, #31
 801211c:	2b00      	cmp	r3, #0
 801211e:	d104      	bne.n	801212a <USB_EPStartXfer+0x11a4>
 8012120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012124:	3b01      	subs	r3, #1
 8012126:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801212a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801212e:	881b      	ldrh	r3, [r3, #0]
 8012130:	b29a      	uxth	r2, r3
 8012132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012136:	b29b      	uxth	r3, r3
 8012138:	029b      	lsls	r3, r3, #10
 801213a:	b29b      	uxth	r3, r3
 801213c:	4313      	orrs	r3, r2
 801213e:	b29b      	uxth	r3, r3
 8012140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012148:	b29a      	uxth	r2, r3
 801214a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801214e:	801a      	strh	r2, [r3, #0]
 8012150:	e069      	b.n	8012226 <USB_EPStartXfer+0x12a0>
 8012152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	691b      	ldr	r3, [r3, #16]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d10c      	bne.n	801217c <USB_EPStartXfer+0x11f6>
 8012162:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012166:	881b      	ldrh	r3, [r3, #0]
 8012168:	b29b      	uxth	r3, r3
 801216a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801216e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012172:	b29a      	uxth	r2, r3
 8012174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012178:	801a      	strh	r2, [r3, #0]
 801217a:	e054      	b.n	8012226 <USB_EPStartXfer+0x12a0>
 801217c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	691b      	ldr	r3, [r3, #16]
 8012188:	085b      	lsrs	r3, r3, #1
 801218a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801218e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	691b      	ldr	r3, [r3, #16]
 801219a:	f003 0301 	and.w	r3, r3, #1
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d004      	beq.n	80121ac <USB_EPStartXfer+0x1226>
 80121a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80121a6:	3301      	adds	r3, #1
 80121a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80121ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80121b0:	881b      	ldrh	r3, [r3, #0]
 80121b2:	b29a      	uxth	r2, r3
 80121b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	029b      	lsls	r3, r3, #10
 80121bc:	b29b      	uxth	r3, r3
 80121be:	4313      	orrs	r3, r2
 80121c0:	b29a      	uxth	r2, r3
 80121c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80121c6:	801a      	strh	r2, [r3, #0]
 80121c8:	e02d      	b.n	8012226 <USB_EPStartXfer+0x12a0>
 80121ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	785b      	ldrb	r3, [r3, #1]
 80121d6:	2b01      	cmp	r3, #1
 80121d8:	d125      	bne.n	8012226 <USB_EPStartXfer+0x12a0>
 80121da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	461a      	mov	r2, r3
 80121ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80121f0:	4413      	add	r3, r2
 80121f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80121f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	00da      	lsls	r2, r3, #3
 8012204:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012208:	4413      	add	r3, r2
 801220a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801220e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	691b      	ldr	r3, [r3, #16]
 801221e:	b29a      	uxth	r2, r3
 8012220:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012224:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801222a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	69db      	ldr	r3, [r3, #28]
 8012232:	2b00      	cmp	r3, #0
 8012234:	f000 8218 	beq.w	8012668 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801223c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012240:	681a      	ldr	r2, [r3, #0]
 8012242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	009b      	lsls	r3, r3, #2
 8012250:	4413      	add	r3, r2
 8012252:	881b      	ldrh	r3, [r3, #0]
 8012254:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012258:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801225c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012260:	2b00      	cmp	r3, #0
 8012262:	d005      	beq.n	8012270 <USB_EPStartXfer+0x12ea>
 8012264:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801226c:	2b00      	cmp	r3, #0
 801226e:	d10d      	bne.n	801228c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012270:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012278:	2b00      	cmp	r3, #0
 801227a:	f040 81f5 	bne.w	8012668 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801227e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012286:	2b00      	cmp	r3, #0
 8012288:	f040 81ee 	bne.w	8012668 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801228c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012294:	681a      	ldr	r2, [r3, #0]
 8012296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801229a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	781b      	ldrb	r3, [r3, #0]
 80122a2:	009b      	lsls	r3, r3, #2
 80122a4:	4413      	add	r3, r2
 80122a6:	881b      	ldrh	r3, [r3, #0]
 80122a8:	b29b      	uxth	r3, r3
 80122aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80122ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80122b2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80122b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122be:	681a      	ldr	r2, [r3, #0]
 80122c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	441a      	add	r2, r3
 80122d0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80122d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80122d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80122dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80122e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	8013      	strh	r3, [r2, #0]
 80122e8:	e1be      	b.n	8012668 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80122ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	78db      	ldrb	r3, [r3, #3]
 80122f6:	2b01      	cmp	r3, #1
 80122f8:	f040 81b4 	bne.w	8012664 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80122fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	699a      	ldr	r2, [r3, #24]
 8012308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801230c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	691b      	ldr	r3, [r3, #16]
 8012314:	429a      	cmp	r2, r3
 8012316:	d917      	bls.n	8012348 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8012318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801231c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	691b      	ldr	r3, [r3, #16]
 8012324:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8012328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801232c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	699a      	ldr	r2, [r3, #24]
 8012334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012338:	1ad2      	subs	r2, r2, r3
 801233a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801233e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	619a      	str	r2, [r3, #24]
 8012346:	e00e      	b.n	8012366 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8012348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801234c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	699b      	ldr	r3, [r3, #24]
 8012354:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8012358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801235c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2200      	movs	r2, #0
 8012364:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8012366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801236a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	785b      	ldrb	r3, [r3, #1]
 8012372:	2b00      	cmp	r3, #0
 8012374:	f040 8085 	bne.w	8012482 <USB_EPStartXfer+0x14fc>
 8012378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801237c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801238a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012394:	b29b      	uxth	r3, r3
 8012396:	461a      	mov	r2, r3
 8012398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801239c:	4413      	add	r3, r2
 801239e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80123a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	00da      	lsls	r2, r3, #3
 80123b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80123b4:	4413      	add	r3, r2
 80123b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80123ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80123be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80123c2:	881b      	ldrh	r3, [r3, #0]
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80123d0:	801a      	strh	r2, [r3, #0]
 80123d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123d6:	2b3e      	cmp	r3, #62	; 0x3e
 80123d8:	d923      	bls.n	8012422 <USB_EPStartXfer+0x149c>
 80123da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123de:	095b      	lsrs	r3, r3, #5
 80123e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80123e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123e8:	f003 031f 	and.w	r3, r3, #31
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d104      	bne.n	80123fa <USB_EPStartXfer+0x1474>
 80123f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80123f4:	3b01      	subs	r3, #1
 80123f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80123fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80123fe:	881b      	ldrh	r3, [r3, #0]
 8012400:	b29a      	uxth	r2, r3
 8012402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012406:	b29b      	uxth	r3, r3
 8012408:	029b      	lsls	r3, r3, #10
 801240a:	b29b      	uxth	r3, r3
 801240c:	4313      	orrs	r3, r2
 801240e:	b29b      	uxth	r3, r3
 8012410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012418:	b29a      	uxth	r2, r3
 801241a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801241e:	801a      	strh	r2, [r3, #0]
 8012420:	e060      	b.n	80124e4 <USB_EPStartXfer+0x155e>
 8012422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012426:	2b00      	cmp	r3, #0
 8012428:	d10c      	bne.n	8012444 <USB_EPStartXfer+0x14be>
 801242a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801242e:	881b      	ldrh	r3, [r3, #0]
 8012430:	b29b      	uxth	r3, r3
 8012432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801243a:	b29a      	uxth	r2, r3
 801243c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012440:	801a      	strh	r2, [r3, #0]
 8012442:	e04f      	b.n	80124e4 <USB_EPStartXfer+0x155e>
 8012444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012448:	085b      	lsrs	r3, r3, #1
 801244a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801244e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012452:	f003 0301 	and.w	r3, r3, #1
 8012456:	2b00      	cmp	r3, #0
 8012458:	d004      	beq.n	8012464 <USB_EPStartXfer+0x14de>
 801245a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801245e:	3301      	adds	r3, #1
 8012460:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012464:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012468:	881b      	ldrh	r3, [r3, #0]
 801246a:	b29a      	uxth	r2, r3
 801246c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012470:	b29b      	uxth	r3, r3
 8012472:	029b      	lsls	r3, r3, #10
 8012474:	b29b      	uxth	r3, r3
 8012476:	4313      	orrs	r3, r2
 8012478:	b29a      	uxth	r2, r3
 801247a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801247e:	801a      	strh	r2, [r3, #0]
 8012480:	e030      	b.n	80124e4 <USB_EPStartXfer+0x155e>
 8012482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	785b      	ldrb	r3, [r3, #1]
 801248e:	2b01      	cmp	r3, #1
 8012490:	d128      	bne.n	80124e4 <USB_EPStartXfer+0x155e>
 8012492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80124a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80124ae:	b29b      	uxth	r3, r3
 80124b0:	461a      	mov	r2, r3
 80124b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80124b6:	4413      	add	r3, r2
 80124b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80124bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	00da      	lsls	r2, r3, #3
 80124ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80124ce:	4413      	add	r3, r2
 80124d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80124d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80124d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124dc:	b29a      	uxth	r2, r3
 80124de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80124e2:	801a      	strh	r2, [r3, #0]
 80124e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80124f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	785b      	ldrb	r3, [r3, #1]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	f040 8085 	bne.w	801260e <USB_EPStartXfer+0x1688>
 8012504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012520:	b29b      	uxth	r3, r3
 8012522:	461a      	mov	r2, r3
 8012524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012528:	4413      	add	r3, r2
 801252a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801252e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	00da      	lsls	r2, r3, #3
 801253c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012540:	4413      	add	r3, r2
 8012542:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012546:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801254a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801254e:	881b      	ldrh	r3, [r3, #0]
 8012550:	b29b      	uxth	r3, r3
 8012552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012556:	b29a      	uxth	r2, r3
 8012558:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801255c:	801a      	strh	r2, [r3, #0]
 801255e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012562:	2b3e      	cmp	r3, #62	; 0x3e
 8012564:	d923      	bls.n	80125ae <USB_EPStartXfer+0x1628>
 8012566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801256a:	095b      	lsrs	r3, r3, #5
 801256c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012574:	f003 031f 	and.w	r3, r3, #31
 8012578:	2b00      	cmp	r3, #0
 801257a:	d104      	bne.n	8012586 <USB_EPStartXfer+0x1600>
 801257c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012580:	3b01      	subs	r3, #1
 8012582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801258a:	881b      	ldrh	r3, [r3, #0]
 801258c:	b29a      	uxth	r2, r3
 801258e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012592:	b29b      	uxth	r3, r3
 8012594:	029b      	lsls	r3, r3, #10
 8012596:	b29b      	uxth	r3, r3
 8012598:	4313      	orrs	r3, r2
 801259a:	b29b      	uxth	r3, r3
 801259c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125a4:	b29a      	uxth	r2, r3
 80125a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80125aa:	801a      	strh	r2, [r3, #0]
 80125ac:	e05c      	b.n	8012668 <USB_EPStartXfer+0x16e2>
 80125ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d10c      	bne.n	80125d0 <USB_EPStartXfer+0x164a>
 80125b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80125ba:	881b      	ldrh	r3, [r3, #0]
 80125bc:	b29b      	uxth	r3, r3
 80125be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125c6:	b29a      	uxth	r2, r3
 80125c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80125cc:	801a      	strh	r2, [r3, #0]
 80125ce:	e04b      	b.n	8012668 <USB_EPStartXfer+0x16e2>
 80125d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125d4:	085b      	lsrs	r3, r3, #1
 80125d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80125da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125de:	f003 0301 	and.w	r3, r3, #1
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d004      	beq.n	80125f0 <USB_EPStartXfer+0x166a>
 80125e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80125ea:	3301      	adds	r3, #1
 80125ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80125f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80125f4:	881b      	ldrh	r3, [r3, #0]
 80125f6:	b29a      	uxth	r2, r3
 80125f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80125fc:	b29b      	uxth	r3, r3
 80125fe:	029b      	lsls	r3, r3, #10
 8012600:	b29b      	uxth	r3, r3
 8012602:	4313      	orrs	r3, r2
 8012604:	b29a      	uxth	r2, r3
 8012606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801260a:	801a      	strh	r2, [r3, #0]
 801260c:	e02c      	b.n	8012668 <USB_EPStartXfer+0x16e2>
 801260e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	785b      	ldrb	r3, [r3, #1]
 801261a:	2b01      	cmp	r3, #1
 801261c:	d124      	bne.n	8012668 <USB_EPStartXfer+0x16e2>
 801261e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801262c:	b29b      	uxth	r3, r3
 801262e:	461a      	mov	r2, r3
 8012630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012634:	4413      	add	r3, r2
 8012636:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801263a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801263e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	00da      	lsls	r2, r3, #3
 8012648:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801264c:	4413      	add	r3, r2
 801264e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801265a:	b29a      	uxth	r2, r3
 801265c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012660:	801a      	strh	r2, [r3, #0]
 8012662:	e001      	b.n	8012668 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8012664:	2301      	movs	r3, #1
 8012666:	e03a      	b.n	80126de <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801266c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	4413      	add	r3, r2
 8012682:	881b      	ldrh	r3, [r3, #0]
 8012684:	b29b      	uxth	r3, r3
 8012686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801268e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012692:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012696:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801269a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801269e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80126a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80126a6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80126aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126b2:	681a      	ldr	r2, [r3, #0]
 80126b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	009b      	lsls	r3, r3, #2
 80126c2:	441a      	add	r2, r3
 80126c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80126c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80126cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80126d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80126d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126d8:	b29b      	uxth	r3, r3
 80126da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80126dc:	2300      	movs	r3, #0
}
 80126de:	4618      	mov	r0, r3
 80126e0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80126e8:	b480      	push	{r7}
 80126ea:	b085      	sub	sp, #20
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	785b      	ldrb	r3, [r3, #1]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d020      	beq.n	801273c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80126fa:	687a      	ldr	r2, [r7, #4]
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	4413      	add	r3, r2
 8012704:	881b      	ldrh	r3, [r3, #0]
 8012706:	b29b      	uxth	r3, r3
 8012708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801270c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012710:	81bb      	strh	r3, [r7, #12]
 8012712:	89bb      	ldrh	r3, [r7, #12]
 8012714:	f083 0310 	eor.w	r3, r3, #16
 8012718:	81bb      	strh	r3, [r7, #12]
 801271a:	687a      	ldr	r2, [r7, #4]
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	781b      	ldrb	r3, [r3, #0]
 8012720:	009b      	lsls	r3, r3, #2
 8012722:	441a      	add	r2, r3
 8012724:	89bb      	ldrh	r3, [r7, #12]
 8012726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801272a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801272e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012736:	b29b      	uxth	r3, r3
 8012738:	8013      	strh	r3, [r2, #0]
 801273a:	e01f      	b.n	801277c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	009b      	lsls	r3, r3, #2
 8012744:	4413      	add	r3, r2
 8012746:	881b      	ldrh	r3, [r3, #0]
 8012748:	b29b      	uxth	r3, r3
 801274a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012752:	81fb      	strh	r3, [r7, #14]
 8012754:	89fb      	ldrh	r3, [r7, #14]
 8012756:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801275a:	81fb      	strh	r3, [r7, #14]
 801275c:	687a      	ldr	r2, [r7, #4]
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	009b      	lsls	r3, r3, #2
 8012764:	441a      	add	r2, r3
 8012766:	89fb      	ldrh	r3, [r7, #14]
 8012768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801276c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012778:	b29b      	uxth	r3, r3
 801277a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801277c:	2300      	movs	r3, #0
}
 801277e:	4618      	mov	r0, r3
 8012780:	3714      	adds	r7, #20
 8012782:	46bd      	mov	sp, r7
 8012784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012788:	4770      	bx	lr

0801278a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801278a:	b480      	push	{r7}
 801278c:	b087      	sub	sp, #28
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
 8012792:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	7b1b      	ldrb	r3, [r3, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	f040 809d 	bne.w	80128d8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	785b      	ldrb	r3, [r3, #1]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d04c      	beq.n	8012840 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80127a6:	687a      	ldr	r2, [r7, #4]
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	009b      	lsls	r3, r3, #2
 80127ae:	4413      	add	r3, r2
 80127b0:	881b      	ldrh	r3, [r3, #0]
 80127b2:	823b      	strh	r3, [r7, #16]
 80127b4:	8a3b      	ldrh	r3, [r7, #16]
 80127b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d01b      	beq.n	80127f6 <USB_EPClearStall+0x6c>
 80127be:	687a      	ldr	r2, [r7, #4]
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	009b      	lsls	r3, r3, #2
 80127c6:	4413      	add	r3, r2
 80127c8:	881b      	ldrh	r3, [r3, #0]
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80127d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80127d4:	81fb      	strh	r3, [r7, #14]
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	009b      	lsls	r3, r3, #2
 80127de:	441a      	add	r2, r3
 80127e0:	89fb      	ldrh	r3, [r7, #14]
 80127e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80127e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80127ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	78db      	ldrb	r3, [r3, #3]
 80127fa:	2b01      	cmp	r3, #1
 80127fc:	d06c      	beq.n	80128d8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80127fe:	687a      	ldr	r2, [r7, #4]
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	009b      	lsls	r3, r3, #2
 8012806:	4413      	add	r3, r2
 8012808:	881b      	ldrh	r3, [r3, #0]
 801280a:	b29b      	uxth	r3, r3
 801280c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012814:	81bb      	strh	r3, [r7, #12]
 8012816:	89bb      	ldrh	r3, [r7, #12]
 8012818:	f083 0320 	eor.w	r3, r3, #32
 801281c:	81bb      	strh	r3, [r7, #12]
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	009b      	lsls	r3, r3, #2
 8012826:	441a      	add	r2, r3
 8012828:	89bb      	ldrh	r3, [r7, #12]
 801282a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801282e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801283a:	b29b      	uxth	r3, r3
 801283c:	8013      	strh	r3, [r2, #0]
 801283e:	e04b      	b.n	80128d8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012840:	687a      	ldr	r2, [r7, #4]
 8012842:	683b      	ldr	r3, [r7, #0]
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	009b      	lsls	r3, r3, #2
 8012848:	4413      	add	r3, r2
 801284a:	881b      	ldrh	r3, [r3, #0]
 801284c:	82fb      	strh	r3, [r7, #22]
 801284e:	8afb      	ldrh	r3, [r7, #22]
 8012850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012854:	2b00      	cmp	r3, #0
 8012856:	d01b      	beq.n	8012890 <USB_EPClearStall+0x106>
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	781b      	ldrb	r3, [r3, #0]
 801285e:	009b      	lsls	r3, r3, #2
 8012860:	4413      	add	r3, r2
 8012862:	881b      	ldrh	r3, [r3, #0]
 8012864:	b29b      	uxth	r3, r3
 8012866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801286e:	82bb      	strh	r3, [r7, #20]
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	781b      	ldrb	r3, [r3, #0]
 8012876:	009b      	lsls	r3, r3, #2
 8012878:	441a      	add	r2, r3
 801287a:	8abb      	ldrh	r3, [r7, #20]
 801287c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801288c:	b29b      	uxth	r3, r3
 801288e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	009b      	lsls	r3, r3, #2
 8012898:	4413      	add	r3, r2
 801289a:	881b      	ldrh	r3, [r3, #0]
 801289c:	b29b      	uxth	r3, r3
 801289e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80128a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80128a6:	827b      	strh	r3, [r7, #18]
 80128a8:	8a7b      	ldrh	r3, [r7, #18]
 80128aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80128ae:	827b      	strh	r3, [r7, #18]
 80128b0:	8a7b      	ldrh	r3, [r7, #18]
 80128b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80128b6:	827b      	strh	r3, [r7, #18]
 80128b8:	687a      	ldr	r2, [r7, #4]
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	781b      	ldrb	r3, [r3, #0]
 80128be:	009b      	lsls	r3, r3, #2
 80128c0:	441a      	add	r2, r3
 80128c2:	8a7b      	ldrh	r3, [r7, #18]
 80128c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80128c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80128cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80128d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80128d8:	2300      	movs	r3, #0
}
 80128da:	4618      	mov	r0, r3
 80128dc:	371c      	adds	r7, #28
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr

080128e6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80128e6:	b480      	push	{r7}
 80128e8:	b083      	sub	sp, #12
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	6078      	str	r0, [r7, #4]
 80128ee:	460b      	mov	r3, r1
 80128f0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80128f2:	78fb      	ldrb	r3, [r7, #3]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d103      	bne.n	8012900 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2280      	movs	r2, #128	; 0x80
 80128fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012900:	2300      	movs	r3, #0
}
 8012902:	4618      	mov	r0, r3
 8012904:	370c      	adds	r7, #12
 8012906:	46bd      	mov	sp, r7
 8012908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290c:	4770      	bx	lr

0801290e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801290e:	b480      	push	{r7}
 8012910:	b083      	sub	sp, #12
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801291c:	b29b      	uxth	r3, r3
 801291e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012926:	b29a      	uxth	r2, r3
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 801292e:	2300      	movs	r3, #0
}
 8012930:	4618      	mov	r0, r3
 8012932:	370c      	adds	r7, #12
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr

0801293c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 801293c:	b480      	push	{r7}
 801293e:	b085      	sub	sp, #20
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801294a:	b29b      	uxth	r3, r3
 801294c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801294e:	68fb      	ldr	r3, [r7, #12]
}
 8012950:	4618      	mov	r0, r3
 8012952:	3714      	adds	r7, #20
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr

0801295c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801295c:	b480      	push	{r7}
 801295e:	b08b      	sub	sp, #44	; 0x2c
 8012960:	af00      	add	r7, sp, #0
 8012962:	60f8      	str	r0, [r7, #12]
 8012964:	60b9      	str	r1, [r7, #8]
 8012966:	4611      	mov	r1, r2
 8012968:	461a      	mov	r2, r3
 801296a:	460b      	mov	r3, r1
 801296c:	80fb      	strh	r3, [r7, #6]
 801296e:	4613      	mov	r3, r2
 8012970:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012972:	88bb      	ldrh	r3, [r7, #4]
 8012974:	3301      	adds	r3, #1
 8012976:	085b      	lsrs	r3, r3, #1
 8012978:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012982:	88fa      	ldrh	r2, [r7, #6]
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	4413      	add	r3, r2
 8012988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801298c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801298e:	69bb      	ldr	r3, [r7, #24]
 8012990:	627b      	str	r3, [r7, #36]	; 0x24
 8012992:	e01b      	b.n	80129cc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	3301      	adds	r3, #1
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	021b      	lsls	r3, r3, #8
 80129a2:	b21a      	sxth	r2, r3
 80129a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80129a8:	4313      	orrs	r3, r2
 80129aa:	b21b      	sxth	r3, r3
 80129ac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80129ae:	6a3b      	ldr	r3, [r7, #32]
 80129b0:	8a7a      	ldrh	r2, [r7, #18]
 80129b2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80129b4:	6a3b      	ldr	r3, [r7, #32]
 80129b6:	3302      	adds	r3, #2
 80129b8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80129ba:	69fb      	ldr	r3, [r7, #28]
 80129bc:	3301      	adds	r3, #1
 80129be:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80129c0:	69fb      	ldr	r3, [r7, #28]
 80129c2:	3301      	adds	r3, #1
 80129c4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80129c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c8:	3b01      	subs	r3, #1
 80129ca:	627b      	str	r3, [r7, #36]	; 0x24
 80129cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d1e0      	bne.n	8012994 <USB_WritePMA+0x38>
  }
}
 80129d2:	bf00      	nop
 80129d4:	bf00      	nop
 80129d6:	372c      	adds	r7, #44	; 0x2c
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr

080129e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80129e0:	b480      	push	{r7}
 80129e2:	b08b      	sub	sp, #44	; 0x2c
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	60f8      	str	r0, [r7, #12]
 80129e8:	60b9      	str	r1, [r7, #8]
 80129ea:	4611      	mov	r1, r2
 80129ec:	461a      	mov	r2, r3
 80129ee:	460b      	mov	r3, r1
 80129f0:	80fb      	strh	r3, [r7, #6]
 80129f2:	4613      	mov	r3, r2
 80129f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80129f6:	88bb      	ldrh	r3, [r7, #4]
 80129f8:	085b      	lsrs	r3, r3, #1
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012a06:	88fa      	ldrh	r2, [r7, #6]
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012a10:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	627b      	str	r3, [r7, #36]	; 0x24
 8012a16:	e018      	b.n	8012a4a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012a18:	6a3b      	ldr	r3, [r7, #32]
 8012a1a:	881b      	ldrh	r3, [r3, #0]
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012a20:	6a3b      	ldr	r3, [r7, #32]
 8012a22:	3302      	adds	r3, #2
 8012a24:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	b2da      	uxtb	r2, r3
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012a2e:	69fb      	ldr	r3, [r7, #28]
 8012a30:	3301      	adds	r3, #1
 8012a32:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	0a1b      	lsrs	r3, r3, #8
 8012a38:	b2da      	uxtb	r2, r3
 8012a3a:	69fb      	ldr	r3, [r7, #28]
 8012a3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012a3e:	69fb      	ldr	r3, [r7, #28]
 8012a40:	3301      	adds	r3, #1
 8012a42:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a46:	3b01      	subs	r3, #1
 8012a48:	627b      	str	r3, [r7, #36]	; 0x24
 8012a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d1e3      	bne.n	8012a18 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012a50:	88bb      	ldrh	r3, [r7, #4]
 8012a52:	f003 0301 	and.w	r3, r3, #1
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d007      	beq.n	8012a6c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012a5c:	6a3b      	ldr	r3, [r7, #32]
 8012a5e:	881b      	ldrh	r3, [r3, #0]
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	b2da      	uxtb	r2, r3
 8012a68:	69fb      	ldr	r3, [r7, #28]
 8012a6a:	701a      	strb	r2, [r3, #0]
  }
}
 8012a6c:	bf00      	nop
 8012a6e:	372c      	adds	r7, #44	; 0x2c
 8012a70:	46bd      	mov	sp, r7
 8012a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a76:	4770      	bx	lr

08012a78 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8012a78:	b480      	push	{r7}
 8012a7a:	b085      	sub	sp, #20
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	1c5a      	adds	r2, r3, #1
 8012a84:	607a      	str	r2, [r7, #4]
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8012a8a:	89fb      	ldrh	r3, [r7, #14]
 8012a8c:	021b      	lsls	r3, r3, #8
 8012a8e:	b21a      	sxth	r2, r3
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	b21b      	sxth	r3, r3
 8012a96:	4313      	orrs	r3, r2
 8012a98:	b21b      	sxth	r3, r3
 8012a9a:	b29b      	uxth	r3, r3
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3714      	adds	r7, #20
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa6:	4770      	bx	lr

08012aa8 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b085      	sub	sp, #20
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	683a      	ldr	r2, [r7, #0]
 8012ab6:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2204      	movs	r2, #4
 8012abc:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2204      	movs	r2, #4
 8012ac2:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012acc:	b29a      	uxth	r2, r3
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012ad4:	b29b      	uxth	r3, r3
 8012ad6:	1ad3      	subs	r3, r2, r3
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	3b01      	subs	r3, #1
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	b21a      	sxth	r2, r3
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012aec:	b29a      	uxth	r2, r3
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012af4:	b29b      	uxth	r3, r3
 8012af6:	1ad3      	subs	r3, r2, r3
 8012af8:	b29b      	uxth	r3, r3
 8012afa:	3b01      	subs	r3, #1
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	b21a      	sxth	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2201      	movs	r2, #1
 8012b24:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2200      	movs	r2, #0
 8012b32:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2200      	movs	r2, #0
 8012b38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2200      	movs	r2, #0
 8012b40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2200      	movs	r2, #0
 8012b48:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2200      	movs	r2, #0
 8012b54:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2200      	movs	r2, #0
 8012b66:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8012b6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2200      	movs	r2, #0
 8012b88:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	2200      	movs	r2, #0
 8012b94:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8012b96:	2300      	movs	r3, #0
 8012b98:	73fb      	strb	r3, [r7, #15]
 8012b9a:	e010      	b.n	8012bbe <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8012b9c:	7bfb      	ldrb	r3, [r7, #15]
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	330a      	adds	r3, #10
 8012ba2:	00db      	lsls	r3, r3, #3
 8012ba4:	4413      	add	r3, r2
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8012baa:	7bfb      	ldrb	r3, [r7, #15]
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	330a      	adds	r3, #10
 8012bb0:	00db      	lsls	r3, r3, #3
 8012bb2:	4413      	add	r3, r2
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8012bb8:	7bfb      	ldrb	r3, [r7, #15]
 8012bba:	3301      	adds	r3, #1
 8012bbc:	73fb      	strb	r3, [r7, #15]
 8012bbe:	7bfb      	ldrb	r3, [r7, #15]
 8012bc0:	2b03      	cmp	r3, #3
 8012bc2:	d9eb      	bls.n	8012b9c <UG_Init+0xf4>
   }

   gui = g;
 8012bc4:	4a04      	ldr	r2, [pc, #16]	; (8012bd8 <UG_Init+0x130>)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6013      	str	r3, [r2, #0]
   return 1;
 8012bca:	2301      	movs	r3, #1
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	3714      	adds	r7, #20
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr
 8012bd8:	200023f0 	.word	0x200023f0

08012bdc <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8012bdc:	b480      	push	{r7}
 8012bde:	b083      	sub	sp, #12
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8012be4:	4b04      	ldr	r3, [pc, #16]	; (8012bf8 <UG_FontSelect+0x1c>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	687a      	ldr	r2, [r7, #4]
 8012bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012bec:	bf00      	nop
 8012bee:	370c      	adds	r7, #12
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf6:	4770      	bx	lr
 8012bf8:	200023f0 	.word	0x200023f0

08012bfc <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af02      	add	r7, sp, #8
 8012c02:	4603      	mov	r3, r0
 8012c04:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8012c06:	4b0e      	ldr	r3, [pc, #56]	; (8012c40 <UG_FillScreen+0x44>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c10:	b29b      	uxth	r3, r3
 8012c12:	3b01      	subs	r3, #1
 8012c14:	b29b      	uxth	r3, r3
 8012c16:	b21a      	sxth	r2, r3
 8012c18:	4b09      	ldr	r3, [pc, #36]	; (8012c40 <UG_FillScreen+0x44>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	3b01      	subs	r3, #1
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	b219      	sxth	r1, r3
 8012c2a:	88fb      	ldrh	r3, [r7, #6]
 8012c2c:	9300      	str	r3, [sp, #0]
 8012c2e:	460b      	mov	r3, r1
 8012c30:	2100      	movs	r1, #0
 8012c32:	2000      	movs	r0, #0
 8012c34:	f000 f806 	bl	8012c44 <UG_FillFrame>
}
 8012c38:	bf00      	nop
 8012c3a:	3708      	adds	r7, #8
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	200023f0 	.word	0x200023f0

08012c44 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012c44:	b5b0      	push	{r4, r5, r7, lr}
 8012c46:	b086      	sub	sp, #24
 8012c48:	af02      	add	r7, sp, #8
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	4608      	mov	r0, r1
 8012c4e:	4611      	mov	r1, r2
 8012c50:	461a      	mov	r2, r3
 8012c52:	4623      	mov	r3, r4
 8012c54:	80fb      	strh	r3, [r7, #6]
 8012c56:	4603      	mov	r3, r0
 8012c58:	80bb      	strh	r3, [r7, #4]
 8012c5a:	460b      	mov	r3, r1
 8012c5c:	807b      	strh	r3, [r7, #2]
 8012c5e:	4613      	mov	r3, r2
 8012c60:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8012c62:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	da05      	bge.n	8012c7a <UG_FillFrame+0x36>
     swap(x1,x2);
 8012c6e:	88fb      	ldrh	r3, [r7, #6]
 8012c70:	817b      	strh	r3, [r7, #10]
 8012c72:	887b      	ldrh	r3, [r7, #2]
 8012c74:	80fb      	strh	r3, [r7, #6]
 8012c76:	897b      	ldrh	r3, [r7, #10]
 8012c78:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8012c7a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012c7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012c82:	429a      	cmp	r2, r3
 8012c84:	da05      	bge.n	8012c92 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8012c86:	88bb      	ldrh	r3, [r7, #4]
 8012c88:	813b      	strh	r3, [r7, #8]
 8012c8a:	883b      	ldrh	r3, [r7, #0]
 8012c8c:	80bb      	strh	r3, [r7, #4]
 8012c8e:	893b      	ldrh	r3, [r7, #8]
 8012c90:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8012c92:	4b24      	ldr	r3, [pc, #144]	; (8012d24 <UG_FillFrame+0xe0>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012c9a:	f003 0302 	and.w	r3, r3, #2
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d012      	beq.n	8012cc8 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012ca2:	4b20      	ldr	r3, [pc, #128]	; (8012d24 <UG_FillFrame+0xe0>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ca8:	461d      	mov	r5, r3
 8012caa:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012cae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012cb2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012cb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012cba:	8c3b      	ldrh	r3, [r7, #32]
 8012cbc:	9300      	str	r3, [sp, #0]
 8012cbe:	4623      	mov	r3, r4
 8012cc0:	47a8      	blx	r5
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d028      	beq.n	8012d1a <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8012cc8:	88bb      	ldrh	r3, [r7, #4]
 8012cca:	81bb      	strh	r3, [r7, #12]
 8012ccc:	e01e      	b.n	8012d0c <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 8012cce:	88fb      	ldrh	r3, [r7, #6]
 8012cd0:	81fb      	strh	r3, [r7, #14]
 8012cd2:	e00f      	b.n	8012cf4 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 8012cd4:	4b13      	ldr	r3, [pc, #76]	; (8012d24 <UG_FillFrame+0xe0>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	685b      	ldr	r3, [r3, #4]
 8012cdc:	8c3a      	ldrh	r2, [r7, #32]
 8012cde:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8012ce2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8012ce6:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8012ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012cec:	b29b      	uxth	r3, r3
 8012cee:	3301      	adds	r3, #1
 8012cf0:	b29b      	uxth	r3, r3
 8012cf2:	81fb      	strh	r3, [r7, #14]
 8012cf4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012cf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	dde9      	ble.n	8012cd4 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8012d00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012d04:	b29b      	uxth	r3, r3
 8012d06:	3301      	adds	r3, #1
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	81bb      	strh	r3, [r7, #12]
 8012d0c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8012d10:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012d14:	429a      	cmp	r2, r3
 8012d16:	ddda      	ble.n	8012cce <UG_FillFrame+0x8a>
 8012d18:	e000      	b.n	8012d1c <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012d1a:	bf00      	nop
      }
   }
}
 8012d1c:	3710      	adds	r7, #16
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bdb0      	pop	{r4, r5, r7, pc}
 8012d22:	bf00      	nop
 8012d24:	200023f0 	.word	0x200023f0

08012d28 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012d28:	b590      	push	{r4, r7, lr}
 8012d2a:	b085      	sub	sp, #20
 8012d2c:	af02      	add	r7, sp, #8
 8012d2e:	4604      	mov	r4, r0
 8012d30:	4608      	mov	r0, r1
 8012d32:	4611      	mov	r1, r2
 8012d34:	461a      	mov	r2, r3
 8012d36:	4623      	mov	r3, r4
 8012d38:	80fb      	strh	r3, [r7, #6]
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	80bb      	strh	r3, [r7, #4]
 8012d3e:	460b      	mov	r3, r1
 8012d40:	807b      	strh	r3, [r7, #2]
 8012d42:	4613      	mov	r3, r2
 8012d44:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 8012d46:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8012d4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012d4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012d52:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012d56:	8b3b      	ldrh	r3, [r7, #24]
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	4623      	mov	r3, r4
 8012d5c:	f000 f912 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 8012d60:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012d64:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012d68:	f9b7 1000 	ldrsh.w	r1, [r7]
 8012d6c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012d70:	8b3b      	ldrh	r3, [r7, #24]
 8012d72:	9300      	str	r3, [sp, #0]
 8012d74:	4623      	mov	r3, r4
 8012d76:	f000 f905 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 8012d7a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012d7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012d82:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012d86:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012d8a:	8b3b      	ldrh	r3, [r7, #24]
 8012d8c:	9300      	str	r3, [sp, #0]
 8012d8e:	4623      	mov	r3, r4
 8012d90:	f000 f8f8 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 8012d94:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012d98:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012d9c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012da0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8012da4:	8b3b      	ldrh	r3, [r7, #24]
 8012da6:	9300      	str	r3, [sp, #0]
 8012da8:	4623      	mov	r3, r4
 8012daa:	f000 f8eb 	bl	8012f84 <UG_DrawLine>
}
 8012dae:	bf00      	nop
 8012db0:	370c      	adds	r7, #12
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd90      	pop	{r4, r7, pc}
	...

08012db8 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8012db8:	b590      	push	{r4, r7, lr}
 8012dba:	b087      	sub	sp, #28
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	4608      	mov	r0, r1
 8012dc2:	4611      	mov	r1, r2
 8012dc4:	461a      	mov	r2, r3
 8012dc6:	4623      	mov	r3, r4
 8012dc8:	80fb      	strh	r3, [r7, #6]
 8012dca:	4603      	mov	r3, r0
 8012dcc:	80bb      	strh	r3, [r7, #4]
 8012dce:	460b      	mov	r3, r1
 8012dd0:	807b      	strh	r3, [r7, #2]
 8012dd2:	4613      	mov	r3, r2
 8012dd4:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 8012dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f2c0 80c8 	blt.w	8012f70 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 8012de0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	f2c0 80c5 	blt.w	8012f74 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 8012dea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	f340 80c2 	ble.w	8012f78 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8012df4:	887b      	ldrh	r3, [r7, #2]
 8012df6:	005b      	lsls	r3, r3, #1
 8012df8:	b29b      	uxth	r3, r3
 8012dfa:	f1c3 0301 	rsb	r3, r3, #1
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	827b      	strh	r3, [r7, #18]
   yd = 0;
 8012e02:	2300      	movs	r3, #0
 8012e04:	823b      	strh	r3, [r7, #16]
   e = 0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	81fb      	strh	r3, [r7, #14]
   x = r;
 8012e0a:	887b      	ldrh	r3, [r7, #2]
 8012e0c:	82fb      	strh	r3, [r7, #22]
   y = 0;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 8012e12:	e0a5      	b.n	8012f60 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 8012e14:	4b5a      	ldr	r3, [pc, #360]	; (8012f80 <UG_DrawCircle+0x1c8>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	88f9      	ldrh	r1, [r7, #6]
 8012e1e:	8afa      	ldrh	r2, [r7, #22]
 8012e20:	1a8a      	subs	r2, r1, r2
 8012e22:	b292      	uxth	r2, r2
 8012e24:	b210      	sxth	r0, r2
 8012e26:	88b9      	ldrh	r1, [r7, #4]
 8012e28:	8aba      	ldrh	r2, [r7, #20]
 8012e2a:	440a      	add	r2, r1
 8012e2c:	b292      	uxth	r2, r2
 8012e2e:	b211      	sxth	r1, r2
 8012e30:	883a      	ldrh	r2, [r7, #0]
 8012e32:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8012e34:	4b52      	ldr	r3, [pc, #328]	; (8012f80 <UG_DrawCircle+0x1c8>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	88f9      	ldrh	r1, [r7, #6]
 8012e3e:	8afa      	ldrh	r2, [r7, #22]
 8012e40:	1a8a      	subs	r2, r1, r2
 8012e42:	b292      	uxth	r2, r2
 8012e44:	b210      	sxth	r0, r2
 8012e46:	88b9      	ldrh	r1, [r7, #4]
 8012e48:	8aba      	ldrh	r2, [r7, #20]
 8012e4a:	1a8a      	subs	r2, r1, r2
 8012e4c:	b292      	uxth	r2, r2
 8012e4e:	b211      	sxth	r1, r2
 8012e50:	883a      	ldrh	r2, [r7, #0]
 8012e52:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8012e54:	4b4a      	ldr	r3, [pc, #296]	; (8012f80 <UG_DrawCircle+0x1c8>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	88f9      	ldrh	r1, [r7, #6]
 8012e5e:	8afa      	ldrh	r2, [r7, #22]
 8012e60:	440a      	add	r2, r1
 8012e62:	b292      	uxth	r2, r2
 8012e64:	b210      	sxth	r0, r2
 8012e66:	88b9      	ldrh	r1, [r7, #4]
 8012e68:	8aba      	ldrh	r2, [r7, #20]
 8012e6a:	440a      	add	r2, r1
 8012e6c:	b292      	uxth	r2, r2
 8012e6e:	b211      	sxth	r1, r2
 8012e70:	883a      	ldrh	r2, [r7, #0]
 8012e72:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8012e74:	4b42      	ldr	r3, [pc, #264]	; (8012f80 <UG_DrawCircle+0x1c8>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	685b      	ldr	r3, [r3, #4]
 8012e7c:	88f9      	ldrh	r1, [r7, #6]
 8012e7e:	8afa      	ldrh	r2, [r7, #22]
 8012e80:	440a      	add	r2, r1
 8012e82:	b292      	uxth	r2, r2
 8012e84:	b210      	sxth	r0, r2
 8012e86:	88b9      	ldrh	r1, [r7, #4]
 8012e88:	8aba      	ldrh	r2, [r7, #20]
 8012e8a:	1a8a      	subs	r2, r1, r2
 8012e8c:	b292      	uxth	r2, r2
 8012e8e:	b211      	sxth	r1, r2
 8012e90:	883a      	ldrh	r2, [r7, #0]
 8012e92:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 8012e94:	4b3a      	ldr	r3, [pc, #232]	; (8012f80 <UG_DrawCircle+0x1c8>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	88f9      	ldrh	r1, [r7, #6]
 8012e9e:	8aba      	ldrh	r2, [r7, #20]
 8012ea0:	1a8a      	subs	r2, r1, r2
 8012ea2:	b292      	uxth	r2, r2
 8012ea4:	b210      	sxth	r0, r2
 8012ea6:	88b9      	ldrh	r1, [r7, #4]
 8012ea8:	8afa      	ldrh	r2, [r7, #22]
 8012eaa:	440a      	add	r2, r1
 8012eac:	b292      	uxth	r2, r2
 8012eae:	b211      	sxth	r1, r2
 8012eb0:	883a      	ldrh	r2, [r7, #0]
 8012eb2:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8012eb4:	4b32      	ldr	r3, [pc, #200]	; (8012f80 <UG_DrawCircle+0x1c8>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	685b      	ldr	r3, [r3, #4]
 8012ebc:	88f9      	ldrh	r1, [r7, #6]
 8012ebe:	8aba      	ldrh	r2, [r7, #20]
 8012ec0:	1a8a      	subs	r2, r1, r2
 8012ec2:	b292      	uxth	r2, r2
 8012ec4:	b210      	sxth	r0, r2
 8012ec6:	88b9      	ldrh	r1, [r7, #4]
 8012ec8:	8afa      	ldrh	r2, [r7, #22]
 8012eca:	1a8a      	subs	r2, r1, r2
 8012ecc:	b292      	uxth	r2, r2
 8012ece:	b211      	sxth	r1, r2
 8012ed0:	883a      	ldrh	r2, [r7, #0]
 8012ed2:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8012ed4:	4b2a      	ldr	r3, [pc, #168]	; (8012f80 <UG_DrawCircle+0x1c8>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	685b      	ldr	r3, [r3, #4]
 8012edc:	88f9      	ldrh	r1, [r7, #6]
 8012ede:	8aba      	ldrh	r2, [r7, #20]
 8012ee0:	440a      	add	r2, r1
 8012ee2:	b292      	uxth	r2, r2
 8012ee4:	b210      	sxth	r0, r2
 8012ee6:	88b9      	ldrh	r1, [r7, #4]
 8012ee8:	8afa      	ldrh	r2, [r7, #22]
 8012eea:	440a      	add	r2, r1
 8012eec:	b292      	uxth	r2, r2
 8012eee:	b211      	sxth	r1, r2
 8012ef0:	883a      	ldrh	r2, [r7, #0]
 8012ef2:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8012ef4:	4b22      	ldr	r3, [pc, #136]	; (8012f80 <UG_DrawCircle+0x1c8>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	88f9      	ldrh	r1, [r7, #6]
 8012efe:	8aba      	ldrh	r2, [r7, #20]
 8012f00:	440a      	add	r2, r1
 8012f02:	b292      	uxth	r2, r2
 8012f04:	b210      	sxth	r0, r2
 8012f06:	88b9      	ldrh	r1, [r7, #4]
 8012f08:	8afa      	ldrh	r2, [r7, #22]
 8012f0a:	1a8a      	subs	r2, r1, r2
 8012f0c:	b292      	uxth	r2, r2
 8012f0e:	b211      	sxth	r1, r2
 8012f10:	883a      	ldrh	r2, [r7, #0]
 8012f12:	4798      	blx	r3

      y++;
 8012f14:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012f18:	b29b      	uxth	r3, r3
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8012f20:	89fa      	ldrh	r2, [r7, #14]
 8012f22:	8a3b      	ldrh	r3, [r7, #16]
 8012f24:	4413      	add	r3, r2
 8012f26:	b29b      	uxth	r3, r3
 8012f28:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8012f2a:	8a3b      	ldrh	r3, [r7, #16]
 8012f2c:	3302      	adds	r3, #2
 8012f2e:	b29b      	uxth	r3, r3
 8012f30:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8012f32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f36:	005a      	lsls	r2, r3, #1
 8012f38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f3c:	4413      	add	r3, r2
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	dd0e      	ble.n	8012f60 <UG_DrawCircle+0x1a8>
      {
         x--;
 8012f42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	3b01      	subs	r3, #1
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8012f4e:	89fa      	ldrh	r2, [r7, #14]
 8012f50:	8a7b      	ldrh	r3, [r7, #18]
 8012f52:	4413      	add	r3, r2
 8012f54:	b29b      	uxth	r3, r3
 8012f56:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8012f58:	8a7b      	ldrh	r3, [r7, #18]
 8012f5a:	3302      	adds	r3, #2
 8012f5c:	b29b      	uxth	r3, r3
 8012f5e:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8012f60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	f6bf af53 	bge.w	8012e14 <UG_DrawCircle+0x5c>
 8012f6e:	e004      	b.n	8012f7a <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8012f70:	bf00      	nop
 8012f72:	e002      	b.n	8012f7a <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8012f74:	bf00      	nop
 8012f76:	e000      	b.n	8012f7a <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8012f78:	bf00      	nop
      }
   }
}
 8012f7a:	371c      	adds	r7, #28
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd90      	pop	{r4, r7, pc}
 8012f80:	200023f0 	.word	0x200023f0

08012f84 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012f84:	b5b0      	push	{r4, r5, r7, lr}
 8012f86:	b08a      	sub	sp, #40	; 0x28
 8012f88:	af02      	add	r7, sp, #8
 8012f8a:	4604      	mov	r4, r0
 8012f8c:	4608      	mov	r0, r1
 8012f8e:	4611      	mov	r1, r2
 8012f90:	461a      	mov	r2, r3
 8012f92:	4623      	mov	r3, r4
 8012f94:	80fb      	strh	r3, [r7, #6]
 8012f96:	4603      	mov	r3, r0
 8012f98:	80bb      	strh	r3, [r7, #4]
 8012f9a:	460b      	mov	r3, r1
 8012f9c:	807b      	strh	r3, [r7, #2]
 8012f9e:	4613      	mov	r3, r2
 8012fa0:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8012fa2:	4b67      	ldr	r3, [pc, #412]	; (8013140 <UG_DrawLine+0x1bc>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012faa:	f003 0302 	and.w	r3, r3, #2
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d013      	beq.n	8012fda <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012fb2:	4b63      	ldr	r3, [pc, #396]	; (8013140 <UG_DrawLine+0x1bc>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fb8:	461d      	mov	r5, r3
 8012fba:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012fbe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012fc2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012fc6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012fca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012fcc:	9300      	str	r3, [sp, #0]
 8012fce:	4623      	mov	r3, r4
 8012fd0:	47a8      	blx	r5
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	f000 80ae 	beq.w	8013136 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8012fda:	887a      	ldrh	r2, [r7, #2]
 8012fdc:	88fb      	ldrh	r3, [r7, #6]
 8012fde:	1ad3      	subs	r3, r2, r3
 8012fe0:	b29b      	uxth	r3, r3
 8012fe2:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8012fe4:	883a      	ldrh	r2, [r7, #0]
 8012fe6:	88bb      	ldrh	r3, [r7, #4]
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8012fee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	bfb8      	it	lt
 8012ff6:	425b      	neglt	r3, r3
 8012ff8:	b29b      	uxth	r3, r3
 8012ffa:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8012ffc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013000:	2b00      	cmp	r3, #0
 8013002:	bfb8      	it	lt
 8013004:	425b      	neglt	r3, r3
 8013006:	b29b      	uxth	r3, r3
 8013008:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 801300a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801300e:	2b00      	cmp	r3, #0
 8013010:	dd01      	ble.n	8013016 <UG_DrawLine+0x92>
 8013012:	2301      	movs	r3, #1
 8013014:	e001      	b.n	801301a <UG_DrawLine+0x96>
 8013016:	f04f 33ff 	mov.w	r3, #4294967295
 801301a:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 801301c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013020:	2b00      	cmp	r3, #0
 8013022:	dd01      	ble.n	8013028 <UG_DrawLine+0xa4>
 8013024:	2301      	movs	r3, #1
 8013026:	e001      	b.n	801302c <UG_DrawLine+0xa8>
 8013028:	f04f 33ff 	mov.w	r3, #4294967295
 801302c:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 801302e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013032:	105b      	asrs	r3, r3, #1
 8013034:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8013036:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801303a:	105b      	asrs	r3, r3, #1
 801303c:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 801303e:	88fb      	ldrh	r3, [r7, #6]
 8013040:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8013042:	88bb      	ldrh	r3, [r7, #4]
 8013044:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8013046:	4b3e      	ldr	r3, [pc, #248]	; (8013140 <UG_DrawLine+0x1bc>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8013050:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8013054:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8013058:	4798      	blx	r3

   if( dxabs >= dyabs )
 801305a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801305e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013062:	429a      	cmp	r2, r3
 8013064:	db33      	blt.n	80130ce <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8013066:	2300      	movs	r3, #0
 8013068:	83fb      	strh	r3, [r7, #30]
 801306a:	e029      	b.n	80130c0 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 801306c:	8b7a      	ldrh	r2, [r7, #26]
 801306e:	89fb      	ldrh	r3, [r7, #14]
 8013070:	4413      	add	r3, r2
 8013072:	b29b      	uxth	r3, r3
 8013074:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8013076:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801307a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801307e:	429a      	cmp	r2, r3
 8013080:	db09      	blt.n	8013096 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8013082:	8b7a      	ldrh	r2, [r7, #26]
 8013084:	8a3b      	ldrh	r3, [r7, #16]
 8013086:	1ad3      	subs	r3, r2, r3
 8013088:	b29b      	uxth	r3, r3
 801308a:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 801308c:	8afa      	ldrh	r2, [r7, #22]
 801308e:	897b      	ldrh	r3, [r7, #10]
 8013090:	4413      	add	r3, r2
 8013092:	b29b      	uxth	r3, r3
 8013094:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8013096:	8b3a      	ldrh	r2, [r7, #24]
 8013098:	89bb      	ldrh	r3, [r7, #12]
 801309a:	4413      	add	r3, r2
 801309c:	b29b      	uxth	r3, r3
 801309e:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 80130a0:	4b27      	ldr	r3, [pc, #156]	; (8013140 <UG_DrawLine+0x1bc>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80130aa:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80130ae:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80130b2:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 80130b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80130b8:	b29b      	uxth	r3, r3
 80130ba:	3301      	adds	r3, #1
 80130bc:	b29b      	uxth	r3, r3
 80130be:	83fb      	strh	r3, [r7, #30]
 80130c0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80130c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	dbcf      	blt.n	801306c <UG_DrawLine+0xe8>
 80130cc:	e034      	b.n	8013138 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 80130ce:	2300      	movs	r3, #0
 80130d0:	83fb      	strh	r3, [r7, #30]
 80130d2:	e029      	b.n	8013128 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 80130d4:	8bba      	ldrh	r2, [r7, #28]
 80130d6:	8a3b      	ldrh	r3, [r7, #16]
 80130d8:	4413      	add	r3, r2
 80130da:	b29b      	uxth	r3, r3
 80130dc:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 80130de:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80130e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	db09      	blt.n	80130fe <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 80130ea:	8bba      	ldrh	r2, [r7, #28]
 80130ec:	89fb      	ldrh	r3, [r7, #14]
 80130ee:	1ad3      	subs	r3, r2, r3
 80130f0:	b29b      	uxth	r3, r3
 80130f2:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 80130f4:	8b3a      	ldrh	r2, [r7, #24]
 80130f6:	89bb      	ldrh	r3, [r7, #12]
 80130f8:	4413      	add	r3, r2
 80130fa:	b29b      	uxth	r3, r3
 80130fc:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 80130fe:	8afa      	ldrh	r2, [r7, #22]
 8013100:	897b      	ldrh	r3, [r7, #10]
 8013102:	4413      	add	r3, r2
 8013104:	b29b      	uxth	r3, r3
 8013106:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8013108:	4b0d      	ldr	r3, [pc, #52]	; (8013140 <UG_DrawLine+0x1bc>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8013112:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8013116:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 801311a:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 801311c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013120:	b29b      	uxth	r3, r3
 8013122:	3301      	adds	r3, #1
 8013124:	b29b      	uxth	r3, r3
 8013126:	83fb      	strh	r3, [r7, #30]
 8013128:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801312c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013130:	429a      	cmp	r2, r3
 8013132:	dbcf      	blt.n	80130d4 <UG_DrawLine+0x150>
 8013134:	e000      	b.n	8013138 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8013136:	bf00      	nop
      }
   }  
}
 8013138:	3720      	adds	r7, #32
 801313a:	46bd      	mov	sp, r7
 801313c:	bdb0      	pop	{r4, r5, r7, pc}
 801313e:	bf00      	nop
 8013140:	200023f0 	.word	0x200023f0

08013144 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8013144:	b590      	push	{r4, r7, lr}
 8013146:	b087      	sub	sp, #28
 8013148:	af02      	add	r7, sp, #8
 801314a:	4603      	mov	r3, r0
 801314c:	603a      	str	r2, [r7, #0]
 801314e:	80fb      	strh	r3, [r7, #6]
 8013150:	460b      	mov	r3, r1
 8013152:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8013154:	88fb      	ldrh	r3, [r7, #6]
 8013156:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8013158:	88bb      	ldrh	r3, [r7, #4]
 801315a:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 801315c:	4b44      	ldr	r3, [pc, #272]	; (8013270 <UG_PutString+0x12c>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013162:	4618      	mov	r0, r3
 8013164:	f000 fa96 	bl	8013694 <_UG_FontSelect>
   while ( *str != 0 )
 8013168:	e064      	b.n	8013234 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801316a:	4b41      	ldr	r3, [pc, #260]	; (8013270 <UG_PutString+0x12c>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013172:	2b00      	cmp	r3, #0
 8013174:	d106      	bne.n	8013184 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8013176:	463b      	mov	r3, r7
 8013178:	4618      	mov	r0, r3
 801317a:	f000 f8c7 	bl	801330c <_UG_DecodeUTF8>
 801317e:	4603      	mov	r3, r0
 8013180:	817b      	strh	r3, [r7, #10]
 8013182:	e004      	b.n	801318e <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	1c5a      	adds	r2, r3, #1
 8013188:	603a      	str	r2, [r7, #0]
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 801318e:	897b      	ldrh	r3, [r7, #10]
 8013190:	2b0a      	cmp	r3, #10
 8013192:	d105      	bne.n	80131a0 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8013194:	4b36      	ldr	r3, [pc, #216]	; (8013270 <UG_PutString+0x12c>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	881b      	ldrh	r3, [r3, #0]
 801319c:	81fb      	strh	r3, [r7, #14]
         continue;
 801319e:	e049      	b.n	8013234 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80131a0:	897b      	ldrh	r3, [r7, #10]
 80131a2:	2100      	movs	r1, #0
 80131a4:	4618      	mov	r0, r3
 80131a6:	f000 f929 	bl	80133fc <_UG_GetCharData>
 80131aa:	4603      	mov	r3, r0
 80131ac:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80131ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80131b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131b6:	d100      	bne.n	80131ba <UG_PutString+0x76>
 80131b8:	e03c      	b.n	8013234 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 80131ba:	4b2d      	ldr	r3, [pc, #180]	; (8013270 <UG_PutString+0x12c>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80131c4:	4619      	mov	r1, r3
 80131c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80131ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80131ce:	4413      	add	r3, r2
 80131d0:	4299      	cmp	r1, r3
 80131d2:	dc12      	bgt.n	80131fa <UG_PutString+0xb6>
      {
         xp = x;
 80131d4:	88fb      	ldrh	r3, [r7, #6]
 80131d6:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 80131d8:	4b25      	ldr	r3, [pc, #148]	; (8013270 <UG_PutString+0x12c>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80131e0:	b21a      	sxth	r2, r3
 80131e2:	4b23      	ldr	r3, [pc, #140]	; (8013270 <UG_PutString+0x12c>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 80131ea:	b21b      	sxth	r3, r3
 80131ec:	4413      	add	r3, r2
 80131ee:	b21b      	sxth	r3, r3
 80131f0:	b29a      	uxth	r2, r3
 80131f2:	89bb      	ldrh	r3, [r7, #12]
 80131f4:	4413      	add	r3, r2
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80131fa:	4b1d      	ldr	r3, [pc, #116]	; (8013270 <UG_PutString+0x12c>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 8013202:	4b1b      	ldr	r3, [pc, #108]	; (8013270 <UG_PutString+0x12c>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801320a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801320e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8013212:	8978      	ldrh	r0, [r7, #10]
 8013214:	9300      	str	r3, [sp, #0]
 8013216:	4623      	mov	r3, r4
 8013218:	f000 fabe 	bl	8013798 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 801321c:	4b14      	ldr	r3, [pc, #80]	; (8013270 <UG_PutString+0x12c>)
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 8013224:	b29a      	uxth	r2, r3
 8013226:	893b      	ldrh	r3, [r7, #8]
 8013228:	4413      	add	r3, r2
 801322a:	b29a      	uxth	r2, r3
 801322c:	89fb      	ldrh	r3, [r7, #14]
 801322e:	4413      	add	r3, r2
 8013230:	b29b      	uxth	r3, r3
 8013232:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d196      	bne.n	801316a <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 801323c:	4b0c      	ldr	r3, [pc, #48]	; (8013270 <UG_PutString+0x12c>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8013244:	f003 0302 	and.w	r3, r3, #2
 8013248:	2b00      	cmp	r3, #0
 801324a:	d00c      	beq.n	8013266 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 801324c:	4b08      	ldr	r3, [pc, #32]	; (8013270 <UG_PutString+0x12c>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013252:	461c      	mov	r4, r3
 8013254:	f04f 33ff 	mov.w	r3, #4294967295
 8013258:	f04f 32ff 	mov.w	r2, #4294967295
 801325c:	f04f 31ff 	mov.w	r1, #4294967295
 8013260:	f04f 30ff 	mov.w	r0, #4294967295
 8013264:	47a0      	blx	r4
}
 8013266:	bf00      	nop
 8013268:	3714      	adds	r7, #20
 801326a:	46bd      	mov	sp, r7
 801326c:	bd90      	pop	{r4, r7, pc}
 801326e:	bf00      	nop
 8013270:	200023f0 	.word	0x200023f0

08013274 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8013274:	b480      	push	{r7}
 8013276:	b083      	sub	sp, #12
 8013278:	af00      	add	r7, sp, #0
 801327a:	4603      	mov	r3, r0
 801327c:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 801327e:	4b05      	ldr	r3, [pc, #20]	; (8013294 <UG_SetForecolor+0x20>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	88fa      	ldrh	r2, [r7, #6]
 8013284:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8013288:	bf00      	nop
 801328a:	370c      	adds	r7, #12
 801328c:	46bd      	mov	sp, r7
 801328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013292:	4770      	bx	lr
 8013294:	200023f0 	.word	0x200023f0

08013298 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
 801329e:	4603      	mov	r3, r0
 80132a0:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80132a2:	4b05      	ldr	r3, [pc, #20]	; (80132b8 <UG_SetBackcolor+0x20>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	88fa      	ldrh	r2, [r7, #6]
 80132a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80132ac:	bf00      	nop
 80132ae:	370c      	adds	r7, #12
 80132b0:	46bd      	mov	sp, r7
 80132b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b6:	4770      	bx	lr
 80132b8:	200023f0 	.word	0x200023f0

080132bc <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	4603      	mov	r3, r0
 80132c4:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80132c6:	4b06      	ldr	r3, [pc, #24]	; (80132e0 <UG_FontSetHSpace+0x24>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	88fa      	ldrh	r2, [r7, #6]
 80132cc:	b252      	sxtb	r2, r2
 80132ce:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 80132d2:	bf00      	nop
 80132d4:	370c      	adds	r7, #12
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	200023f0 	.word	0x200023f0

080132e4 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80132e4:	b480      	push	{r7}
 80132e6:	b083      	sub	sp, #12
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	4603      	mov	r3, r0
 80132ec:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80132ee:	4b06      	ldr	r3, [pc, #24]	; (8013308 <UG_FontSetVSpace+0x24>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	88fa      	ldrh	r2, [r7, #6]
 80132f4:	b252      	sxtb	r2, r2
 80132f6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 80132fa:	bf00      	nop
 80132fc:	370c      	adds	r7, #12
 80132fe:	46bd      	mov	sp, r7
 8013300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013304:	4770      	bx	lr
 8013306:	bf00      	nop
 8013308:	200023f0 	.word	0x200023f0

0801330c <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 801330c:	b480      	push	{r7}
 801330e:	b085      	sub	sp, #20
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]

  char c=**str;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 801331c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013320:	2b00      	cmp	r3, #0
 8013322:	db07      	blt.n	8013334 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	1c5a      	adds	r2, r3, #1
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	601a      	str	r2, [r3, #0]
    return c;
 801332e:	7bfb      	ldrb	r3, [r7, #15]
 8013330:	b29b      	uxth	r3, r3
 8013332:	e05c      	b.n	80133ee <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8013334:	2300      	movs	r3, #0
 8013336:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8013338:	2300      	movs	r3, #0
 801333a:	81bb      	strh	r3, [r7, #12]

  while(**str)
 801333c:	e04f      	b.n	80133de <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	1c5a      	adds	r2, r3, #1
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8013350:	7bbb      	ldrb	r3, [r7, #14]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d130      	bne.n	80133b8 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8013356:	7bfb      	ldrb	r3, [r7, #15]
 8013358:	2bdf      	cmp	r3, #223	; 0xdf
 801335a:	d806      	bhi.n	801336a <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 801335c:	2301      	movs	r3, #1
 801335e:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8013360:	7bfb      	ldrb	r3, [r7, #15]
 8013362:	f003 031f 	and.w	r3, r3, #31
 8013366:	73fb      	strb	r3, [r7, #15]
 8013368:	e023      	b.n	80133b2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 801336a:	7bfb      	ldrb	r3, [r7, #15]
 801336c:	2bef      	cmp	r3, #239	; 0xef
 801336e:	d806      	bhi.n	801337e <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8013370:	2302      	movs	r3, #2
 8013372:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8013374:	7bfb      	ldrb	r3, [r7, #15]
 8013376:	f003 030f 	and.w	r3, r3, #15
 801337a:	73fb      	strb	r3, [r7, #15]
 801337c:	e019      	b.n	80133b2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 801337e:	7bfb      	ldrb	r3, [r7, #15]
 8013380:	2bf7      	cmp	r3, #247	; 0xf7
 8013382:	d806      	bhi.n	8013392 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8013384:	2303      	movs	r3, #3
 8013386:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8013388:	7bfb      	ldrb	r3, [r7, #15]
 801338a:	f003 0307 	and.w	r3, r3, #7
 801338e:	73fb      	strb	r3, [r7, #15]
 8013390:	e00f      	b.n	80133b2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8013392:	7bfb      	ldrb	r3, [r7, #15]
 8013394:	2bfb      	cmp	r3, #251	; 0xfb
 8013396:	d806      	bhi.n	80133a6 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8013398:	2304      	movs	r3, #4
 801339a:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 801339c:	7bfb      	ldrb	r3, [r7, #15]
 801339e:	f003 0303 	and.w	r3, r3, #3
 80133a2:	73fb      	strb	r3, [r7, #15]
 80133a4:	e005      	b.n	80133b2 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 80133a6:	2305      	movs	r3, #5
 80133a8:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 80133aa:	7bfb      	ldrb	r3, [r7, #15]
 80133ac:	f003 0301 	and.w	r3, r3, #1
 80133b0:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 80133b2:	7bfb      	ldrb	r3, [r7, #15]
 80133b4:	81bb      	strh	r3, [r7, #12]
 80133b6:	e012      	b.n	80133de <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 80133b8:	89bb      	ldrh	r3, [r7, #12]
 80133ba:	019b      	lsls	r3, r3, #6
 80133bc:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 80133be:	7bfb      	ldrb	r3, [r7, #15]
 80133c0:	b21b      	sxth	r3, r3
 80133c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133c6:	b21a      	sxth	r2, r3
 80133c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80133cc:	4313      	orrs	r3, r2
 80133ce:	b21b      	sxth	r3, r3
 80133d0:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 80133d2:	7bbb      	ldrb	r3, [r7, #14]
 80133d4:	3b01      	subs	r3, #1
 80133d6:	73bb      	strb	r3, [r7, #14]
 80133d8:	7bbb      	ldrb	r3, [r7, #14]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d005      	beq.n	80133ea <_UG_DecodeUTF8+0xde>
  while(**str)
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d1aa      	bne.n	801333e <_UG_DecodeUTF8+0x32>
 80133e8:	e000      	b.n	80133ec <_UG_DecodeUTF8+0xe0>
        break;
 80133ea:	bf00      	nop
    }
  }
  return encoding;
 80133ec:	89bb      	ldrh	r3, [r7, #12]
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3714      	adds	r7, #20
 80133f2:	46bd      	mov	sp, r7
 80133f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f8:	4770      	bx	lr
	...

080133fc <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b086      	sub	sp, #24
 8013400:	af00      	add	r7, sp, #0
 8013402:	4603      	mov	r3, r0
 8013404:	6039      	str	r1, [r7, #0]
 8013406:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8013408:	2300      	movs	r3, #0
 801340a:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 801340c:	2300      	movs	r3, #0
 801340e:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8013410:	2300      	movs	r3, #0
 8013412:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8013414:	2300      	movs	r3, #0
 8013416:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8013418:	2300      	movs	r3, #0
 801341a:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 801341c:	4b98      	ldr	r3, [pc, #608]	; (8013680 <_UG_GetCharData+0x284>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013422:	4b98      	ldr	r3, [pc, #608]	; (8013684 <_UG_GetCharData+0x288>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	429a      	cmp	r2, r3
 8013428:	d10f      	bne.n	801344a <_UG_GetCharData+0x4e>
 801342a:	4b97      	ldr	r3, [pc, #604]	; (8013688 <_UG_GetCharData+0x28c>)
 801342c:	881b      	ldrh	r3, [r3, #0]
 801342e:	88fa      	ldrh	r2, [r7, #6]
 8013430:	429a      	cmp	r2, r3
 8013432:	d10a      	bne.n	801344a <_UG_GetCharData+0x4e>
    if(p){
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d003      	beq.n	8013442 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 801343a:	4b94      	ldr	r3, [pc, #592]	; (801368c <_UG_GetCharData+0x290>)
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8013442:	4b93      	ldr	r3, [pc, #588]	; (8013690 <_UG_GetCharData+0x294>)
 8013444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013448:	e116      	b.n	8013678 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 801344a:	4b8d      	ldr	r3, [pc, #564]	; (8013680 <_UG_GetCharData+0x284>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013452:	2b00      	cmp	r3, #0
 8013454:	f000 80cc 	beq.w	80135f0 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8013458:	88fb      	ldrh	r3, [r7, #6]
 801345a:	2bfc      	cmp	r3, #252	; 0xfc
 801345c:	f300 80c8 	bgt.w	80135f0 <_UG_GetCharData+0x1f4>
 8013460:	2bd6      	cmp	r3, #214	; 0xd6
 8013462:	da09      	bge.n	8013478 <_UG_GetCharData+0x7c>
 8013464:	2bc4      	cmp	r3, #196	; 0xc4
 8013466:	d06c      	beq.n	8013542 <_UG_GetCharData+0x146>
 8013468:	2bc4      	cmp	r3, #196	; 0xc4
 801346a:	f300 80c1 	bgt.w	80135f0 <_UG_GetCharData+0x1f4>
 801346e:	2bb0      	cmp	r3, #176	; 0xb0
 8013470:	d06d      	beq.n	801354e <_UG_GetCharData+0x152>
 8013472:	2bb5      	cmp	r3, #181	; 0xb5
 8013474:	d068      	beq.n	8013548 <_UG_GetCharData+0x14c>
 8013476:	e06e      	b.n	8013556 <_UG_GetCharData+0x15a>
 8013478:	3bd6      	subs	r3, #214	; 0xd6
 801347a:	2b26      	cmp	r3, #38	; 0x26
 801347c:	f200 80b8 	bhi.w	80135f0 <_UG_GetCharData+0x1f4>
 8013480:	a201      	add	r2, pc, #4	; (adr r2, 8013488 <_UG_GetCharData+0x8c>)
 8013482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013486:	bf00      	nop
 8013488:	0801352b 	.word	0x0801352b
 801348c:	080135f1 	.word	0x080135f1
 8013490:	080135f1 	.word	0x080135f1
 8013494:	080135f1 	.word	0x080135f1
 8013498:	080135f1 	.word	0x080135f1
 801349c:	080135f1 	.word	0x080135f1
 80134a0:	08013537 	.word	0x08013537
 80134a4:	080135f1 	.word	0x080135f1
 80134a8:	080135f1 	.word	0x080135f1
 80134ac:	080135f1 	.word	0x080135f1
 80134b0:	080135f1 	.word	0x080135f1
 80134b4:	080135f1 	.word	0x080135f1
 80134b8:	080135f1 	.word	0x080135f1
 80134bc:	080135f1 	.word	0x080135f1
 80134c0:	0801353d 	.word	0x0801353d
 80134c4:	080135f1 	.word	0x080135f1
 80134c8:	080135f1 	.word	0x080135f1
 80134cc:	080135f1 	.word	0x080135f1
 80134d0:	080135f1 	.word	0x080135f1
 80134d4:	080135f1 	.word	0x080135f1
 80134d8:	080135f1 	.word	0x080135f1
 80134dc:	080135f1 	.word	0x080135f1
 80134e0:	080135f1 	.word	0x080135f1
 80134e4:	080135f1 	.word	0x080135f1
 80134e8:	080135f1 	.word	0x080135f1
 80134ec:	080135f1 	.word	0x080135f1
 80134f0:	080135f1 	.word	0x080135f1
 80134f4:	080135f1 	.word	0x080135f1
 80134f8:	080135f1 	.word	0x080135f1
 80134fc:	080135f1 	.word	0x080135f1
 8013500:	080135f1 	.word	0x080135f1
 8013504:	080135f1 	.word	0x080135f1
 8013508:	08013525 	.word	0x08013525
 801350c:	080135f1 	.word	0x080135f1
 8013510:	080135f1 	.word	0x080135f1
 8013514:	080135f1 	.word	0x080135f1
 8013518:	080135f1 	.word	0x080135f1
 801351c:	080135f1 	.word	0x080135f1
 8013520:	08013531 	.word	0x08013531
    {
       case 0xF6: encoding = 0x94; break; // ö
 8013524:	2394      	movs	r3, #148	; 0x94
 8013526:	80fb      	strh	r3, [r7, #6]
 8013528:	e015      	b.n	8013556 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 801352a:	2399      	movs	r3, #153	; 0x99
 801352c:	80fb      	strh	r3, [r7, #6]
 801352e:	e012      	b.n	8013556 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8013530:	2381      	movs	r3, #129	; 0x81
 8013532:	80fb      	strh	r3, [r7, #6]
 8013534:	e00f      	b.n	8013556 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8013536:	239a      	movs	r3, #154	; 0x9a
 8013538:	80fb      	strh	r3, [r7, #6]
 801353a:	e00c      	b.n	8013556 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 801353c:	2384      	movs	r3, #132	; 0x84
 801353e:	80fb      	strh	r3, [r7, #6]
 8013540:	e009      	b.n	8013556 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8013542:	238e      	movs	r3, #142	; 0x8e
 8013544:	80fb      	strh	r3, [r7, #6]
 8013546:	e006      	b.n	8013556 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8013548:	23e6      	movs	r3, #230	; 0xe6
 801354a:	80fb      	strh	r3, [r7, #6]
 801354c:	e003      	b.n	8013556 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 801354e:	23f8      	movs	r3, #248	; 0xf8
 8013550:	80fb      	strh	r3, [r7, #6]
 8013552:	bf00      	nop
 8013554:	e04c      	b.n	80135f0 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8013556:	e04b      	b.n	80135f0 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8013558:	4b49      	ldr	r3, [pc, #292]	; (8013680 <_UG_GetCharData+0x284>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801355e:	8a7a      	ldrh	r2, [r7, #18]
 8013560:	0052      	lsls	r2, r2, #1
 8013562:	4413      	add	r3, r2
 8013564:	4618      	mov	r0, r3
 8013566:	f7ff fa87 	bl	8012a78 <ptr_8to16>
 801356a:	4603      	mov	r3, r0
 801356c:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 801356e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013572:	2b00      	cmp	r3, #0
 8013574:	da06      	bge.n	8013584 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8013576:	89fb      	ldrh	r3, [r7, #14]
 8013578:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801357c:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 801357e:	2301      	movs	r3, #1
 8013580:	747b      	strb	r3, [r7, #17]
 8013582:	e032      	b.n	80135ea <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8013584:	7c7b      	ldrb	r3, [r7, #17]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d021      	beq.n	80135ce <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 801358a:	88fa      	ldrh	r2, [r7, #6]
 801358c:	8afb      	ldrh	r3, [r7, #22]
 801358e:	429a      	cmp	r2, r3
 8013590:	d30d      	bcc.n	80135ae <_UG_GetCharData+0x1b2>
 8013592:	88fa      	ldrh	r2, [r7, #6]
 8013594:	89fb      	ldrh	r3, [r7, #14]
 8013596:	429a      	cmp	r2, r3
 8013598:	d809      	bhi.n	80135ae <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 801359a:	88fa      	ldrh	r2, [r7, #6]
 801359c:	8afb      	ldrh	r3, [r7, #22]
 801359e:	1ad3      	subs	r3, r2, r3
 80135a0:	b29a      	uxth	r2, r3
 80135a2:	8abb      	ldrh	r3, [r7, #20]
 80135a4:	4413      	add	r3, r2
 80135a6:	82bb      	strh	r3, [r7, #20]
        found=1;
 80135a8:	2301      	movs	r3, #1
 80135aa:	743b      	strb	r3, [r7, #16]
        break;
 80135ac:	e02a      	b.n	8013604 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 80135ae:	88fa      	ldrh	r2, [r7, #6]
 80135b0:	8afb      	ldrh	r3, [r7, #22]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d323      	bcc.n	80135fe <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 80135b6:	89fa      	ldrh	r2, [r7, #14]
 80135b8:	8afb      	ldrh	r3, [r7, #22]
 80135ba:	1ad3      	subs	r3, r2, r3
 80135bc:	b29a      	uxth	r2, r3
 80135be:	8abb      	ldrh	r3, [r7, #20]
 80135c0:	4413      	add	r3, r2
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	3301      	adds	r3, #1
 80135c6:	82bb      	strh	r3, [r7, #20]
      range=0;
 80135c8:	2300      	movs	r3, #0
 80135ca:	747b      	strb	r3, [r7, #17]
 80135cc:	e00d      	b.n	80135ea <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 80135ce:	88fa      	ldrh	r2, [r7, #6]
 80135d0:	89fb      	ldrh	r3, [r7, #14]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d102      	bne.n	80135dc <_UG_GetCharData+0x1e0>
      {
        found=1;
 80135d6:	2301      	movs	r3, #1
 80135d8:	743b      	strb	r3, [r7, #16]
        break;
 80135da:	e013      	b.n	8013604 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 80135dc:	88fa      	ldrh	r2, [r7, #6]
 80135de:	89fb      	ldrh	r3, [r7, #14]
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d30e      	bcc.n	8013602 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80135e4:	8abb      	ldrh	r3, [r7, #20]
 80135e6:	3301      	adds	r3, #1
 80135e8:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80135ea:	8a7b      	ldrh	r3, [r7, #18]
 80135ec:	3301      	adds	r3, #1
 80135ee:	827b      	strh	r3, [r7, #18]
 80135f0:	4b23      	ldr	r3, [pc, #140]	; (8013680 <_UG_GetCharData+0x284>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80135f6:	8a7a      	ldrh	r2, [r7, #18]
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d3ad      	bcc.n	8013558 <_UG_GetCharData+0x15c>
 80135fc:	e002      	b.n	8013604 <_UG_GetCharData+0x208>
        break;
 80135fe:	bf00      	nop
 8013600:	e000      	b.n	8013604 <_UG_GetCharData+0x208>
        break;
 8013602:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8013604:	7c3b      	ldrb	r3, [r7, #16]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d034      	beq.n	8013674 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 801360a:	4b1d      	ldr	r3, [pc, #116]	; (8013680 <_UG_GetCharData+0x284>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013610:	4a1c      	ldr	r2, [pc, #112]	; (8013684 <_UG_GetCharData+0x288>)
 8013612:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8013614:	4a1c      	ldr	r2, [pc, #112]	; (8013688 <_UG_GetCharData+0x28c>)
 8013616:	88fb      	ldrh	r3, [r7, #6]
 8013618:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 801361a:	4b19      	ldr	r3, [pc, #100]	; (8013680 <_UG_GetCharData+0x284>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013620:	8aba      	ldrh	r2, [r7, #20]
 8013622:	4917      	ldr	r1, [pc, #92]	; (8013680 <_UG_GetCharData+0x284>)
 8013624:	6809      	ldr	r1, [r1, #0]
 8013626:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8013628:	fb01 f202 	mul.w	r2, r1, r2
 801362c:	4413      	add	r3, r2
 801362e:	4a17      	ldr	r2, [pc, #92]	; (801368c <_UG_GetCharData+0x290>)
 8013630:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8013632:	4b13      	ldr	r3, [pc, #76]	; (8013680 <_UG_GetCharData+0x284>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013638:	2b00      	cmp	r3, #0
 801363a:	d009      	beq.n	8013650 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 801363c:	4b10      	ldr	r3, [pc, #64]	; (8013680 <_UG_GetCharData+0x284>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013642:	8abb      	ldrh	r3, [r7, #20]
 8013644:	4413      	add	r3, r2
 8013646:	781b      	ldrb	r3, [r3, #0]
 8013648:	b21a      	sxth	r2, r3
 801364a:	4b11      	ldr	r3, [pc, #68]	; (8013690 <_UG_GetCharData+0x294>)
 801364c:	801a      	strh	r2, [r3, #0]
 801364e:	e006      	b.n	801365e <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8013650:	4b0b      	ldr	r3, [pc, #44]	; (8013680 <_UG_GetCharData+0x284>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013658:	b21a      	sxth	r2, r3
 801365a:	4b0d      	ldr	r3, [pc, #52]	; (8013690 <_UG_GetCharData+0x294>)
 801365c:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d003      	beq.n	801366c <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8013664:	4b09      	ldr	r3, [pc, #36]	; (801368c <_UG_GetCharData+0x290>)
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 801366c:	4b08      	ldr	r3, [pc, #32]	; (8013690 <_UG_GetCharData+0x294>)
 801366e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013672:	e001      	b.n	8013678 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8013674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013678:	4618      	mov	r0, r3
 801367a:	3718      	adds	r7, #24
 801367c:	46bd      	mov	sp, r7
 801367e:	bd80      	pop	{r7, pc}
 8013680:	200023f0 	.word	0x200023f0
 8013684:	200023f4 	.word	0x200023f4
 8013688:	200023f8 	.word	0x200023f8
 801368c:	200023fc 	.word	0x200023fc
 8013690:	20002400 	.word	0x20002400

08013694 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8013694:	b590      	push	{r4, r7, lr}
 8013696:	b083      	sub	sp, #12
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 801369c:	4b3d      	ldr	r3, [pc, #244]	; (8013794 <_UG_FontSelect+0x100>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d070      	beq.n	801378a <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 80136a8:	4b3a      	ldr	r3, [pc, #232]	; (8013794 <_UG_FontSelect+0x100>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	781a      	ldrb	r2, [r3, #0]
 80136b4:	4b37      	ldr	r3, [pc, #220]	; (8013794 <_UG_FontSelect+0x100>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80136bc:	b2d2      	uxtb	r2, r2
 80136be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	1c5a      	adds	r2, r3, #1
 80136c6:	607a      	str	r2, [r7, #4]
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	b25b      	sxtb	r3, r3
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	da01      	bge.n	80136d4 <_UG_FontSelect+0x40>
 80136d0:	2201      	movs	r2, #1
 80136d2:	e000      	b.n	80136d6 <_UG_FontSelect+0x42>
 80136d4:	2200      	movs	r2, #0
 80136d6:	4b2f      	ldr	r3, [pc, #188]	; (8013794 <_UG_FontSelect+0x100>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	b2d2      	uxtb	r2, r2
 80136dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	1c5a      	adds	r2, r3, #1
 80136e4:	607a      	str	r2, [r7, #4]
 80136e6:	4a2b      	ldr	r2, [pc, #172]	; (8013794 <_UG_FontSelect+0x100>)
 80136e8:	6812      	ldr	r2, [r2, #0]
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	1c5a      	adds	r2, r3, #1
 80136f4:	607a      	str	r2, [r7, #4]
 80136f6:	4a27      	ldr	r2, [pc, #156]	; (8013794 <_UG_FontSelect+0x100>)
 80136f8:	6812      	ldr	r2, [r2, #0]
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8013700:	4b24      	ldr	r3, [pc, #144]	; (8013794 <_UG_FontSelect+0x100>)
 8013702:	681c      	ldr	r4, [r3, #0]
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f7ff f9b7 	bl	8012a78 <ptr_8to16>
 801370a:	4603      	mov	r3, r0
 801370c:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	3302      	adds	r3, #2
 8013712:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8013714:	4b1f      	ldr	r3, [pc, #124]	; (8013794 <_UG_FontSelect+0x100>)
 8013716:	681c      	ldr	r4, [r3, #0]
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f7ff f9ad 	bl	8012a78 <ptr_8to16>
 801371e:	4603      	mov	r3, r0
 8013720:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	3302      	adds	r3, #2
 8013726:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8013728:	4b1a      	ldr	r3, [pc, #104]	; (8013794 <_UG_FontSelect+0x100>)
 801372a:	681c      	ldr	r4, [r3, #0]
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f7ff f9a3 	bl	8012a78 <ptr_8to16>
 8013732:	4603      	mov	r3, r0
 8013734:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	3302      	adds	r3, #2
 801373a:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	1c5a      	adds	r2, r3, #1
 8013740:	607a      	str	r2, [r7, #4]
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d00b      	beq.n	8013760 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8013748:	4b12      	ldr	r3, [pc, #72]	; (8013794 <_UG_FontSelect+0x100>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	687a      	ldr	r2, [r7, #4]
 801374e:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8013750:	4b10      	ldr	r3, [pc, #64]	; (8013794 <_UG_FontSelect+0x100>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013756:	461a      	mov	r2, r3
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	4413      	add	r3, r2
 801375c:	607b      	str	r3, [r7, #4]
 801375e:	e003      	b.n	8013768 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8013760:	4b0c      	ldr	r3, [pc, #48]	; (8013794 <_UG_FontSelect+0x100>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	2200      	movs	r2, #0
 8013766:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8013768:	4b0a      	ldr	r3, [pc, #40]	; (8013794 <_UG_FontSelect+0x100>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	687a      	ldr	r2, [r7, #4]
 801376e:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8013770:	4b08      	ldr	r3, [pc, #32]	; (8013794 <_UG_FontSelect+0x100>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8013776:	005b      	lsls	r3, r3, #1
 8013778:	461a      	mov	r2, r3
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4413      	add	r3, r2
 801377e:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8013780:	4b04      	ldr	r3, [pc, #16]	; (8013794 <_UG_FontSelect+0x100>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	687a      	ldr	r2, [r7, #4]
 8013786:	641a      	str	r2, [r3, #64]	; 0x40
 8013788:	e000      	b.n	801378c <_UG_FontSelect+0xf8>
    return;
 801378a:	bf00      	nop
}
 801378c:	370c      	adds	r7, #12
 801378e:	46bd      	mov	sp, r7
 8013790:	bd90      	pop	{r4, r7, pc}
 8013792:	bf00      	nop
 8013794:	200023f0 	.word	0x200023f0

08013798 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8013798:	b5b0      	push	{r4, r5, r7, lr}
 801379a:	b08c      	sub	sp, #48	; 0x30
 801379c:	af00      	add	r7, sp, #0
 801379e:	4604      	mov	r4, r0
 80137a0:	4608      	mov	r0, r1
 80137a2:	4611      	mov	r1, r2
 80137a4:	461a      	mov	r2, r3
 80137a6:	4623      	mov	r3, r4
 80137a8:	80fb      	strh	r3, [r7, #6]
 80137aa:	4603      	mov	r3, r0
 80137ac:	80bb      	strh	r3, [r7, #4]
 80137ae:	460b      	mov	r3, r1
 80137b0:	807b      	strh	r3, [r7, #2]
 80137b2:	4613      	mov	r3, r2
 80137b4:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80137b6:	2300      	movs	r3, #0
 80137b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80137ba:	2300      	movs	r3, #0
 80137bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80137be:	2300      	movs	r3, #0
 80137c0:	847b      	strh	r3, [r7, #34]	; 0x22
 80137c2:	2300      	movs	r3, #0
 80137c4:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 80137c6:	4b8c      	ldr	r3, [pc, #560]	; (80139f8 <_UG_PutChar+0x260>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80137ce:	75fb      	strb	r3, [r7, #23]
 80137d0:	4b89      	ldr	r3, [pc, #548]	; (80139f8 <_UG_PutChar+0x260>)
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80137d8:	f003 0302 	and.w	r3, r3, #2
 80137dc:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 80137de:	2300      	movs	r3, #0
 80137e0:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 80137e2:	f107 0208 	add.w	r2, r7, #8
 80137e6:	88fb      	ldrh	r3, [r7, #6]
 80137e8:	4611      	mov	r1, r2
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7ff fe06 	bl	80133fc <_UG_GetCharData>
 80137f0:	4603      	mov	r3, r0
 80137f2:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 80137f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80137f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137fc:	d102      	bne.n	8013804 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 80137fe:	f04f 33ff 	mov.w	r3, #4294967295
 8013802:	e226      	b.n	8013c52 <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8013804:	4b7c      	ldr	r3, [pc, #496]	; (80139f8 <_UG_PutChar+0x260>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801380c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 801380e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013810:	2b00      	cmp	r3, #0
 8013812:	d101      	bne.n	8013818 <_UG_PutChar+0x80>
     return 0;
 8013814:	2300      	movs	r3, #0
 8013816:	e21c      	b.n	8013c52 <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8013818:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801381a:	08db      	lsrs	r3, r3, #3
 801381c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 801381e:	4b76      	ldr	r3, [pc, #472]	; (80139f8 <_UG_PutChar+0x260>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013826:	f003 0307 	and.w	r3, r3, #7
 801382a:	b2db      	uxtb	r3, r3
 801382c:	2b00      	cmp	r3, #0
 801382e:	d002      	beq.n	8013836 <_UG_PutChar+0x9e>
 8013830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013832:	3301      	adds	r3, #1
 8013834:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8013836:	7dbb      	ldrb	r3, [r7, #22]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d01d      	beq.n	8013878 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 801383c:	4b6e      	ldr	r3, [pc, #440]	; (80139f8 <_UG_PutChar+0x260>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013842:	461d      	mov	r5, r3
 8013844:	88ba      	ldrh	r2, [r7, #4]
 8013846:	8abb      	ldrh	r3, [r7, #20]
 8013848:	4413      	add	r3, r2
 801384a:	b29b      	uxth	r3, r3
 801384c:	3b01      	subs	r3, #1
 801384e:	b29b      	uxth	r3, r3
 8013850:	b21c      	sxth	r4, r3
 8013852:	4b69      	ldr	r3, [pc, #420]	; (80139f8 <_UG_PutChar+0x260>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801385a:	b29a      	uxth	r2, r3
 801385c:	887b      	ldrh	r3, [r7, #2]
 801385e:	4413      	add	r3, r2
 8013860:	b29b      	uxth	r3, r3
 8013862:	3b01      	subs	r3, #1
 8013864:	b29b      	uxth	r3, r3
 8013866:	b21b      	sxth	r3, r3
 8013868:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801386c:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8013870:	4622      	mov	r2, r4
 8013872:	47a8      	blx	r5
 8013874:	4603      	mov	r3, r0
 8013876:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8013878:	4b5f      	ldr	r3, [pc, #380]	; (80139f8 <_UG_PutChar+0x260>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013880:	2b00      	cmp	r3, #0
 8013882:	f040 8172 	bne.w	8013b6a <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013886:	2300      	movs	r3, #0
 8013888:	853b      	strh	r3, [r7, #40]	; 0x28
 801388a:	e0ec      	b.n	8013a66 <_UG_PutChar+0x2ce>
     {
       c=0;
 801388c:	2300      	movs	r3, #0
 801388e:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8013890:	2300      	movs	r3, #0
 8013892:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013894:	e0df      	b.n	8013a56 <_UG_PutChar+0x2be>
       {
         b = *data++;
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	1c5a      	adds	r2, r3, #1
 801389a:	60ba      	str	r2, [r7, #8]
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80138a0:	2300      	movs	r3, #0
 80138a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80138a4:	e0ca      	b.n	8013a3c <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 80138a6:	7f7b      	ldrb	r3, [r7, #29]
 80138a8:	f003 0301 	and.w	r3, r3, #1
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d033      	beq.n	8013918 <_UG_PutChar+0x180>
           {
             if(driver)
 80138b0:	7dbb      	ldrb	r3, [r7, #22]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d01f      	beq.n	80138f6 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 80138b6:	8c3b      	ldrh	r3, [r7, #32]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d00a      	beq.n	80138d2 <_UG_PutChar+0x13a>
 80138bc:	7dfb      	ldrb	r3, [r7, #23]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d107      	bne.n	80138d2 <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80138c2:	8c3a      	ldrh	r2, [r7, #32]
 80138c4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	4610      	mov	r0, r2
 80138cc:	4798      	blx	r3
                 bpixels=0;
 80138ce:	2300      	movs	r3, #0
 80138d0:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 80138d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d10a      	bne.n	80138ee <_UG_PutChar+0x156>
 80138d8:	7dfb      	ldrb	r3, [r7, #23]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d007      	beq.n	80138ee <_UG_PutChar+0x156>
               {
                 x0=x+c;
 80138de:	88ba      	ldrh	r2, [r7, #4]
 80138e0:	8bfb      	ldrh	r3, [r7, #30]
 80138e2:	4413      	add	r3, r2
 80138e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 80138e6:	887a      	ldrh	r2, [r7, #2]
 80138e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80138ea:	4413      	add	r3, r2
 80138ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 80138ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80138f0:	3301      	adds	r3, #1
 80138f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80138f4:	e096      	b.n	8013a24 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 80138f6:	4b40      	ldr	r3, [pc, #256]	; (80139f8 <_UG_PutChar+0x260>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	88b9      	ldrh	r1, [r7, #4]
 8013900:	8bfa      	ldrh	r2, [r7, #30]
 8013902:	440a      	add	r2, r1
 8013904:	b292      	uxth	r2, r2
 8013906:	b210      	sxth	r0, r2
 8013908:	8879      	ldrh	r1, [r7, #2]
 801390a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801390c:	440a      	add	r2, r1
 801390e:	b292      	uxth	r2, r2
 8013910:	b211      	sxth	r1, r2
 8013912:	883a      	ldrh	r2, [r7, #0]
 8013914:	4798      	blx	r3
 8013916:	e085      	b.n	8013a24 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8013918:	7dbb      	ldrb	r3, [r7, #22]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d06e      	beq.n	80139fc <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 801391e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013920:	2b00      	cmp	r3, #0
 8013922:	d064      	beq.n	80139ee <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8013924:	7dfb      	ldrb	r3, [r7, #23]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d15e      	bne.n	80139e8 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 801392a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801392c:	8839      	ldrh	r1, [r7, #0]
 801392e:	69bb      	ldr	r3, [r7, #24]
 8013930:	4610      	mov	r0, r2
 8013932:	4798      	blx	r3
                   fpixels=0;
 8013934:	2300      	movs	r3, #0
 8013936:	847b      	strh	r3, [r7, #34]	; 0x22
 8013938:	e059      	b.n	80139ee <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 801393a:	88ba      	ldrh	r2, [r7, #4]
 801393c:	8abb      	ldrh	r3, [r7, #20]
 801393e:	4413      	add	r3, r2
 8013940:	b29a      	uxth	r2, r3
 8013942:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013944:	1ad3      	subs	r3, r2, r3
 8013946:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8013948:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801394a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801394e:	429a      	cmp	r2, r3
 8013950:	d003      	beq.n	801395a <_UG_PutChar+0x1c2>
 8013952:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013954:	89fb      	ldrh	r3, [r7, #14]
 8013956:	429a      	cmp	r2, r3
 8013958:	d224      	bcs.n	80139a4 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 801395a:	4b27      	ldr	r3, [pc, #156]	; (80139f8 <_UG_PutChar+0x260>)
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013960:	461d      	mov	r5, r3
 8013962:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013966:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801396a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801396c:	89fb      	ldrh	r3, [r7, #14]
 801396e:	4413      	add	r3, r2
 8013970:	b29b      	uxth	r3, r3
 8013972:	3b01      	subs	r3, #1
 8013974:	b29b      	uxth	r3, r3
 8013976:	b21c      	sxth	r4, r3
 8013978:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801397a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801397e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013982:	b29a      	uxth	r2, r3
 8013984:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013986:	4413      	add	r3, r2
 8013988:	b29b      	uxth	r3, r3
 801398a:	b21b      	sxth	r3, r3
 801398c:	4622      	mov	r2, r4
 801398e:	47a8      	blx	r5
 8013990:	4603      	mov	r3, r0
 8013992:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8013994:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013996:	8839      	ldrh	r1, [r7, #0]
 8013998:	69bb      	ldr	r3, [r7, #24]
 801399a:	4610      	mov	r0, r2
 801399c:	4798      	blx	r3
                       fpixels=0;
 801399e:	2300      	movs	r3, #0
 80139a0:	847b      	strh	r3, [r7, #34]	; 0x22
 80139a2:	e021      	b.n	80139e8 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80139a4:	4b14      	ldr	r3, [pc, #80]	; (80139f8 <_UG_PutChar+0x260>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80139aa:	461c      	mov	r4, r3
 80139ac:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80139b0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80139b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80139b6:	89fb      	ldrh	r3, [r7, #14]
 80139b8:	4413      	add	r3, r2
 80139ba:	b29b      	uxth	r3, r3
 80139bc:	3b01      	subs	r3, #1
 80139be:	b29b      	uxth	r3, r3
 80139c0:	b21a      	sxth	r2, r3
 80139c2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80139c6:	47a0      	blx	r4
 80139c8:	4603      	mov	r3, r0
 80139ca:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80139cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80139ce:	8839      	ldrh	r1, [r7, #0]
 80139d0:	69bb      	ldr	r3, [r7, #24]
 80139d2:	4610      	mov	r0, r2
 80139d4:	4798      	blx	r3
                       fpixels -= width;
 80139d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80139d8:	89fb      	ldrh	r3, [r7, #14]
 80139da:	1ad3      	subs	r3, r2, r3
 80139dc:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 80139de:	88bb      	ldrh	r3, [r7, #4]
 80139e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 80139e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80139e4:	3301      	adds	r3, #1
 80139e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 80139e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d1a5      	bne.n	801393a <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 80139ee:	8c3b      	ldrh	r3, [r7, #32]
 80139f0:	3301      	adds	r3, #1
 80139f2:	843b      	strh	r3, [r7, #32]
 80139f4:	e016      	b.n	8013a24 <_UG_PutChar+0x28c>
 80139f6:	bf00      	nop
 80139f8:	200023f0 	.word	0x200023f0
             }
             else if(!trans)                           // Not accelerated output
 80139fc:	7dfb      	ldrb	r3, [r7, #23]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d110      	bne.n	8013a24 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 8013a02:	4b96      	ldr	r3, [pc, #600]	; (8013c5c <_UG_PutChar+0x4c4>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	685b      	ldr	r3, [r3, #4]
 8013a0a:	88b9      	ldrh	r1, [r7, #4]
 8013a0c:	8bfa      	ldrh	r2, [r7, #30]
 8013a0e:	440a      	add	r2, r1
 8013a10:	b292      	uxth	r2, r2
 8013a12:	b210      	sxth	r0, r2
 8013a14:	8879      	ldrh	r1, [r7, #2]
 8013a16:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013a18:	440a      	add	r2, r1
 8013a1a:	b292      	uxth	r2, r2
 8013a1c:	b211      	sxth	r1, r2
 8013a1e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013a22:	4798      	blx	r3
             }
           }
           b >>= 1;
 8013a24:	7f7b      	ldrb	r3, [r7, #29]
 8013a26:	085b      	lsrs	r3, r3, #1
 8013a28:	777b      	strb	r3, [r7, #29]
           c++;
 8013a2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	3301      	adds	r3, #1
 8013a32:	b29b      	uxth	r3, r3
 8013a34:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8013a36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013a38:	3301      	adds	r3, #1
 8013a3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013a3e:	2b07      	cmp	r3, #7
 8013a40:	d806      	bhi.n	8013a50 <_UG_PutChar+0x2b8>
 8013a42:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8013a46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	f6ff af2b 	blt.w	80138a6 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 8013a50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a52:	3301      	adds	r3, #1
 8013a54:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013a56:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	f4ff af1b 	bcc.w	8013896 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013a60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a62:	3301      	adds	r3, #1
 8013a64:	853b      	strh	r3, [r7, #40]	; 0x28
 8013a66:	4b7d      	ldr	r3, [pc, #500]	; (8013c5c <_UG_PutChar+0x4c4>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013a6e:	b29b      	uxth	r3, r3
 8013a70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013a72:	429a      	cmp	r2, r3
 8013a74:	f4ff af0a 	bcc.w	801388c <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8013a78:	7dbb      	ldrb	r3, [r7, #22]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	f000 80e7 	beq.w	8013c4e <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8013a80:	8c3b      	ldrh	r3, [r7, #32]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d009      	beq.n	8013a9a <_UG_PutChar+0x302>
 8013a86:	7dfb      	ldrb	r3, [r7, #23]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d106      	bne.n	8013a9a <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8013a8c:	8c3a      	ldrh	r2, [r7, #32]
 8013a8e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8013a92:	69bb      	ldr	r3, [r7, #24]
 8013a94:	4610      	mov	r0, r2
 8013a96:	4798      	blx	r3
 8013a98:	e0d9      	b.n	8013c4e <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8013a9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	f000 80d6 	beq.w	8013c4e <_UG_PutChar+0x4b6>
       {
         if(!trans)
 8013aa2:	7dfb      	ldrb	r3, [r7, #23]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d15c      	bne.n	8013b62 <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8013aa8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013aaa:	8839      	ldrh	r1, [r7, #0]
 8013aac:	69bb      	ldr	r3, [r7, #24]
 8013aae:	4610      	mov	r0, r2
 8013ab0:	4798      	blx	r3
 8013ab2:	e0cc      	b.n	8013c4e <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8013ab4:	88ba      	ldrh	r2, [r7, #4]
 8013ab6:	8abb      	ldrh	r3, [r7, #20]
 8013ab8:	4413      	add	r3, r2
 8013aba:	b29a      	uxth	r2, r3
 8013abc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013abe:	1ad3      	subs	r3, r2, r3
 8013ac0:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8013ac2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013ac4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d003      	beq.n	8013ad4 <_UG_PutChar+0x33c>
 8013acc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013ace:	8a3b      	ldrh	r3, [r7, #16]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d224      	bcs.n	8013b1e <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8013ad4:	4b61      	ldr	r3, [pc, #388]	; (8013c5c <_UG_PutChar+0x4c4>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013ada:	461d      	mov	r5, r3
 8013adc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013ae0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013ae4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013ae6:	8a3b      	ldrh	r3, [r7, #16]
 8013ae8:	4413      	add	r3, r2
 8013aea:	b29b      	uxth	r3, r3
 8013aec:	3b01      	subs	r3, #1
 8013aee:	b29b      	uxth	r3, r3
 8013af0:	b21c      	sxth	r4, r3
 8013af2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013af4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013af8:	fb92 f3f3 	sdiv	r3, r2, r3
 8013afc:	b29a      	uxth	r2, r3
 8013afe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b00:	4413      	add	r3, r2
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	b21b      	sxth	r3, r3
 8013b06:	4622      	mov	r2, r4
 8013b08:	47a8      	blx	r5
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8013b0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013b10:	8839      	ldrh	r1, [r7, #0]
 8013b12:	69bb      	ldr	r3, [r7, #24]
 8013b14:	4610      	mov	r0, r2
 8013b16:	4798      	blx	r3
               fpixels=0;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8013b1c:	e021      	b.n	8013b62 <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8013b1e:	4b4f      	ldr	r3, [pc, #316]	; (8013c5c <_UG_PutChar+0x4c4>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013b24:	461c      	mov	r4, r3
 8013b26:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013b2a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013b2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013b30:	8a3b      	ldrh	r3, [r7, #16]
 8013b32:	4413      	add	r3, r2
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	3b01      	subs	r3, #1
 8013b38:	b29b      	uxth	r3, r3
 8013b3a:	b21a      	sxth	r2, r3
 8013b3c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8013b40:	47a0      	blx	r4
 8013b42:	4603      	mov	r3, r0
 8013b44:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8013b46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013b48:	8839      	ldrh	r1, [r7, #0]
 8013b4a:	69bb      	ldr	r3, [r7, #24]
 8013b4c:	4610      	mov	r0, r2
 8013b4e:	4798      	blx	r3
               fpixels -= width;
 8013b50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013b52:	8a3b      	ldrh	r3, [r7, #16]
 8013b54:	1ad3      	subs	r3, r2, r3
 8013b56:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8013b58:	88bb      	ldrh	r3, [r7, #4]
 8013b5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8013b5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b5e:	3301      	adds	r3, #1
 8013b60:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8013b62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d1a5      	bne.n	8013ab4 <_UG_PutChar+0x31c>
 8013b68:	e071      	b.n	8013c4e <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8013b6a:	4b3c      	ldr	r3, [pc, #240]	; (8013c5c <_UG_PutChar+0x4c4>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d16b      	bne.n	8013c4e <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013b76:	2300      	movs	r3, #0
 8013b78:	853b      	strh	r3, [r7, #40]	; 0x28
 8013b7a:	e060      	b.n	8013c3e <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013b80:	e04a      	b.n	8013c18 <_UG_PutChar+0x480>
       {
         b = *data++;
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	1c5a      	adds	r2, r3, #1
 8013b86:	60ba      	str	r2, [r7, #8]
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8013b8c:	883b      	ldrh	r3, [r7, #0]
 8013b8e:	b2db      	uxtb	r3, r3
 8013b90:	7f7a      	ldrb	r2, [r7, #29]
 8013b92:	fb03 f202 	mul.w	r2, r3, r2
 8013b96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013b9a:	b2db      	uxtb	r3, r3
 8013b9c:	7f79      	ldrb	r1, [r7, #29]
 8013b9e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8013ba2:	fb01 f303 	mul.w	r3, r1, r3
 8013ba6:	4413      	add	r3, r2
 8013ba8:	121b      	asrs	r3, r3, #8
 8013baa:	b21b      	sxth	r3, r3
 8013bac:	b2db      	uxtb	r3, r3
 8013bae:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8013bb0:	883b      	ldrh	r3, [r7, #0]
 8013bb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013bb6:	7f79      	ldrb	r1, [r7, #29]
 8013bb8:	fb03 f101 	mul.w	r1, r3, r1
 8013bbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013bc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013bc4:	7f78      	ldrb	r0, [r7, #29]
 8013bc6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013bca:	fb00 f303 	mul.w	r3, r0, r3
 8013bce:	440b      	add	r3, r1
 8013bd0:	121b      	asrs	r3, r3, #8
 8013bd2:	b21b      	sxth	r3, r3
 8013bd4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013bd8:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8013bda:	4313      	orrs	r3, r2
 8013bdc:	b21b      	sxth	r3, r3
 8013bde:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8013be0:	7dbb      	ldrb	r3, [r7, #22]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d005      	beq.n	8013bf2 <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8013be6:	8a7a      	ldrh	r2, [r7, #18]
 8013be8:	69bb      	ldr	r3, [r7, #24]
 8013bea:	4611      	mov	r1, r2
 8013bec:	2001      	movs	r0, #1
 8013bee:	4798      	blx	r3
 8013bf0:	e00f      	b.n	8013c12 <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8013bf2:	4b1a      	ldr	r3, [pc, #104]	; (8013c5c <_UG_PutChar+0x4c4>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	88b9      	ldrh	r1, [r7, #4]
 8013bfc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013bfe:	440a      	add	r2, r1
 8013c00:	b292      	uxth	r2, r2
 8013c02:	b210      	sxth	r0, r2
 8013c04:	8879      	ldrh	r1, [r7, #2]
 8013c06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013c08:	440a      	add	r2, r1
 8013c0a:	b292      	uxth	r2, r2
 8013c0c:	b211      	sxth	r1, r2
 8013c0e:	8a7a      	ldrh	r2, [r7, #18]
 8013c10:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8013c12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013c14:	3301      	adds	r3, #1
 8013c16:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013c18:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013c1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013c1e:	429a      	cmp	r2, r3
 8013c20:	dbaf      	blt.n	8013b82 <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	4a0d      	ldr	r2, [pc, #52]	; (8013c5c <_UG_PutChar+0x4c4>)
 8013c26:	6812      	ldr	r2, [r2, #0]
 8013c28:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8013c2c:	4611      	mov	r1, r2
 8013c2e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8013c32:	1a8a      	subs	r2, r1, r2
 8013c34:	4413      	add	r3, r2
 8013c36:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013c38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013c3a:	3301      	adds	r3, #1
 8013c3c:	853b      	strh	r3, [r7, #40]	; 0x28
 8013c3e:	4b07      	ldr	r3, [pc, #28]	; (8013c5c <_UG_PutChar+0x4c4>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013c46:	b29b      	uxth	r3, r3
 8013c48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d396      	bcc.n	8013b7c <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 8013c4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3730      	adds	r7, #48	; 0x30
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bdb0      	pop	{r4, r5, r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	200023f0 	.word	0x200023f0

08013c60 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8013c60:	b480      	push	{r7}
 8013c62:	b089      	sub	sp, #36	; 0x24
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8013c68:	4b57      	ldr	r3, [pc, #348]	; (8013dc8 <_UG_ProcessTouchData+0x168>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	88db      	ldrh	r3, [r3, #6]
 8013c6e:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8013c70:	4b55      	ldr	r3, [pc, #340]	; (8013dc8 <_UG_ProcessTouchData+0x168>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	891b      	ldrh	r3, [r3, #8]
 8013c76:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8013c78:	4b53      	ldr	r3, [pc, #332]	; (8013dc8 <_UG_ProcessTouchData+0x168>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	791b      	ldrb	r3, [r3, #4]
 8013c7e:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	781b      	ldrb	r3, [r3, #0]
 8013c84:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8013c86:	2300      	movs	r3, #0
 8013c88:	83fb      	strh	r3, [r7, #30]
 8013c8a:	e090      	b.n	8013dae <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	685a      	ldr	r2, [r3, #4]
 8013c90:	8bfb      	ldrh	r3, [r7, #30]
 8013c92:	015b      	lsls	r3, r3, #5
 8013c94:	4413      	add	r3, r2
 8013c96:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	781b      	ldrb	r3, [r3, #0]
 8013c9c:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	785b      	ldrb	r3, [r3, #1]
 8013ca2:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8013ca4:	7bfb      	ldrb	r3, [r7, #15]
 8013ca6:	f003 0301 	and.w	r3, r3, #1
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d179      	bne.n	8013da2 <_UG_ProcessTouchData+0x142>
 8013cae:	7bfb      	ldrb	r3, [r7, #15]
 8013cb0:	f003 0302 	and.w	r3, r3, #2
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d074      	beq.n	8013da2 <_UG_ProcessTouchData+0x142>
 8013cb8:	7bfb      	ldrb	r3, [r7, #15]
 8013cba:	f003 0308 	and.w	r3, r3, #8
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d06f      	beq.n	8013da2 <_UG_ProcessTouchData+0x142>
 8013cc2:	7bfb      	ldrb	r3, [r7, #15]
 8013cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d16a      	bne.n	8013da2 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8013ccc:	7dfb      	ldrb	r3, [r7, #23]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d047      	beq.n	8013d62 <_UG_ProcessTouchData+0x102>
 8013cd2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cda:	d042      	beq.n	8013d62 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8013cdc:	7f7b      	ldrb	r3, [r7, #29]
 8013cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d107      	bne.n	8013cf6 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8013ce6:	7f7b      	ldrb	r3, [r7, #29]
 8013ce8:	f043 0305 	orr.w	r3, r3, #5
 8013cec:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8013cee:	7f7b      	ldrb	r3, [r7, #29]
 8013cf0:	f023 0318 	bic.w	r3, r3, #24
 8013cf4:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8013cf6:	7f7b      	ldrb	r3, [r7, #29]
 8013cf8:	f023 0320 	bic.w	r3, r3, #32
 8013cfc:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013d04:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	db25      	blt.n	8013d58 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8013d0c:	693b      	ldr	r3, [r7, #16]
 8013d0e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013d12:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013d16:	429a      	cmp	r2, r3
 8013d18:	dc1e      	bgt.n	8013d58 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8013d1a:	693b      	ldr	r3, [r7, #16]
 8013d1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013d20:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	db17      	blt.n	8013d58 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013d2e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	dc10      	bgt.n	8013d58 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8013d36:	7f7b      	ldrb	r3, [r7, #29]
 8013d38:	f043 0320 	orr.w	r3, r3, #32
 8013d3c:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8013d3e:	7f7b      	ldrb	r3, [r7, #29]
 8013d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d107      	bne.n	8013d58 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8013d48:	7f7b      	ldrb	r3, [r7, #29]
 8013d4a:	f023 0304 	bic.w	r3, r3, #4
 8013d4e:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8013d50:	7f7b      	ldrb	r3, [r7, #29]
 8013d52:	f043 0302 	orr.w	r3, r3, #2
 8013d56:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8013d58:	7f7b      	ldrb	r3, [r7, #29]
 8013d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d5e:	777b      	strb	r3, [r7, #29]
 8013d60:	e01f      	b.n	8013da2 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8013d62:	7f7b      	ldrb	r3, [r7, #29]
 8013d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d01a      	beq.n	8013da2 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8013d6c:	7f7b      	ldrb	r3, [r7, #29]
 8013d6e:	f003 0320 	and.w	r3, r3, #32
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d004      	beq.n	8013d80 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8013d76:	7f7b      	ldrb	r3, [r7, #29]
 8013d78:	f043 0308 	orr.w	r3, r3, #8
 8013d7c:	777b      	strb	r3, [r7, #29]
 8013d7e:	e003      	b.n	8013d88 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8013d80:	7f7b      	ldrb	r3, [r7, #29]
 8013d82:	f043 0310 	orr.w	r3, r3, #16
 8013d86:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8013d88:	7f7b      	ldrb	r3, [r7, #29]
 8013d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d003      	beq.n	8013d9a <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8013d92:	7f7b      	ldrb	r3, [r7, #29]
 8013d94:	f043 0301 	orr.w	r3, r3, #1
 8013d98:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8013d9a:	7f7b      	ldrb	r3, [r7, #29]
 8013d9c:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8013da0:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8013da2:	693b      	ldr	r3, [r7, #16]
 8013da4:	7f7a      	ldrb	r2, [r7, #29]
 8013da6:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8013da8:	8bfb      	ldrh	r3, [r7, #30]
 8013daa:	3301      	adds	r3, #1
 8013dac:	83fb      	strh	r3, [r7, #30]
 8013dae:	8bfa      	ldrh	r2, [r7, #30]
 8013db0:	8abb      	ldrh	r3, [r7, #20]
 8013db2:	429a      	cmp	r2, r3
 8013db4:	f4ff af6a 	bcc.w	8013c8c <_UG_ProcessTouchData+0x2c>
   }
}
 8013db8:	bf00      	nop
 8013dba:	bf00      	nop
 8013dbc:	3724      	adds	r7, #36	; 0x24
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr
 8013dc6:	bf00      	nop
 8013dc8:	200023f0 	.word	0x200023f0

08013dcc <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b086      	sub	sp, #24
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8013dda:	2300      	movs	r3, #0
 8013ddc:	82fb      	strh	r3, [r7, #22]
 8013dde:	e035      	b.n	8013e4c <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	685a      	ldr	r2, [r3, #4]
 8013de4:	8afb      	ldrh	r3, [r7, #22]
 8013de6:	015b      	lsls	r3, r3, #5
 8013de8:	4413      	add	r3, r2
 8013dea:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8013df2:	693b      	ldr	r3, [r7, #16]
 8013df4:	785b      	ldrb	r3, [r3, #1]
 8013df6:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8013df8:	7bfb      	ldrb	r3, [r7, #15]
 8013dfa:	f003 0301 	and.w	r3, r3, #1
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d121      	bne.n	8013e46 <_UG_UpdateObjects+0x7a>
 8013e02:	7bfb      	ldrb	r3, [r7, #15]
 8013e04:	f003 0302 	and.w	r3, r3, #2
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d01c      	beq.n	8013e46 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8013e0c:	7bfb      	ldrb	r3, [r7, #15]
 8013e0e:	f003 0320 	and.w	r3, r3, #32
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d004      	beq.n	8013e20 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	6939      	ldr	r1, [r7, #16]
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8013e20:	7bfb      	ldrb	r3, [r7, #15]
 8013e22:	f003 0308 	and.w	r3, r3, #8
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d00d      	beq.n	8013e46 <_UG_UpdateObjects+0x7a>
 8013e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	da09      	bge.n	8013e46 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8013e32:	7bbb      	ldrb	r3, [r7, #14]
 8013e34:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d004      	beq.n	8013e46 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8013e3c:	693b      	ldr	r3, [r7, #16]
 8013e3e:	685b      	ldr	r3, [r3, #4]
 8013e40:	6939      	ldr	r1, [r7, #16]
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8013e46:	8afb      	ldrh	r3, [r7, #22]
 8013e48:	3301      	adds	r3, #1
 8013e4a:	82fb      	strh	r3, [r7, #22]
 8013e4c:	8afa      	ldrh	r2, [r7, #22]
 8013e4e:	8abb      	ldrh	r3, [r7, #20]
 8013e50:	429a      	cmp	r2, r3
 8013e52:	d3c5      	bcc.n	8013de0 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8013e54:	bf00      	nop
 8013e56:	bf00      	nop
 8013e58:	3718      	adds	r7, #24
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
	...

08013e60 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b086      	sub	sp, #24
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8013e68:	4b22      	ldr	r3, [pc, #136]	; (8013ef4 <_UG_HandleEvents+0x94>)
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8013e6e:	4b21      	ldr	r3, [pc, #132]	; (8013ef4 <_UG_HandleEvents+0x94>)
 8013e70:	2202      	movs	r2, #2
 8013e72:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	781b      	ldrb	r3, [r3, #0]
 8013e78:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	82fb      	strh	r3, [r7, #22]
 8013e7e:	e02f      	b.n	8013ee0 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	685a      	ldr	r2, [r3, #4]
 8013e84:	8afb      	ldrh	r3, [r7, #22]
 8013e86:	015b      	lsls	r3, r3, #5
 8013e88:	4413      	add	r3, r2
 8013e8a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8013e92:	7bfb      	ldrb	r3, [r7, #15]
 8013e94:	f003 0301 	and.w	r3, r3, #1
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d11e      	bne.n	8013eda <_UG_HandleEvents+0x7a>
 8013e9c:	7bfb      	ldrb	r3, [r7, #15]
 8013e9e:	f003 0302 	and.w	r3, r3, #2
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d019      	beq.n	8013eda <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	7e9b      	ldrb	r3, [r3, #26]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d015      	beq.n	8013eda <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8013eae:	4a11      	ldr	r2, [pc, #68]	; (8013ef4 <_UG_HandleEvents+0x94>)
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	7e1a      	ldrb	r2, [r3, #24]
 8013eb8:	4b0e      	ldr	r3, [pc, #56]	; (8013ef4 <_UG_HandleEvents+0x94>)
 8013eba:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	7e5a      	ldrb	r2, [r3, #25]
 8013ec0:	4b0c      	ldr	r3, [pc, #48]	; (8013ef4 <_UG_HandleEvents+0x94>)
 8013ec2:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	7e9a      	ldrb	r2, [r3, #26]
 8013ec8:	4b0a      	ldr	r3, [pc, #40]	; (8013ef4 <_UG_HandleEvents+0x94>)
 8013eca:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ed0:	4808      	ldr	r0, [pc, #32]	; (8013ef4 <_UG_HandleEvents+0x94>)
 8013ed2:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8013ed4:	693b      	ldr	r3, [r7, #16]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8013eda:	8afb      	ldrh	r3, [r7, #22]
 8013edc:	3301      	adds	r3, #1
 8013ede:	82fb      	strh	r3, [r7, #22]
 8013ee0:	8afa      	ldrh	r2, [r7, #22]
 8013ee2:	8abb      	ldrh	r3, [r7, #20]
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d3cb      	bcc.n	8013e80 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8013ee8:	bf00      	nop
 8013eea:	bf00      	nop
 8013eec:	3718      	adds	r7, #24
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}
 8013ef2:	bf00      	nop
 8013ef4:	20002404 	.word	0x20002404

08013ef8 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8013ef8:	b590      	push	{r4, r7, lr}
 8013efa:	b08f      	sub	sp, #60	; 0x3c
 8013efc:	af02      	add	r7, sp, #8
 8013efe:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	685b      	ldr	r3, [r3, #4]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f000 812c 	beq.w	8014162 <_UG_PutText+0x26a>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	f000 8127 	beq.w	8014162 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	89db      	ldrh	r3, [r3, #14]
 8013f18:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	895b      	ldrh	r3, [r3, #10]
 8013f1e:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	3302      	adds	r3, #2
 8013f26:	781b      	ldrb	r3, [r3, #0]
 8013f28:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8013f2a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8013f2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f32:	1ad2      	subs	r2, r2, r3
 8013f34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	f2c0 8114 	blt.w	8014166 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	891b      	ldrh	r3, [r3, #8]
 8013f42:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	899b      	ldrh	r3, [r3, #12]
 8013f48:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	7d1b      	ldrb	r3, [r3, #20]
 8013f4e:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	8adb      	ldrh	r3, [r3, #22]
 8013f54:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	8b1b      	ldrh	r3, [r3, #24]
 8013f5a:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	685b      	ldr	r3, [r3, #4]
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7ff fb92 	bl	8013694 <_UG_FontSelect>

   rc=1;
 8013f70:	2301      	movs	r3, #1
 8013f72:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013f78:	4b80      	ldr	r3, [pc, #512]	; (801417c <_UG_PutText+0x284>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d107      	bne.n	8013f94 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8013f84:	f107 0308 	add.w	r3, r7, #8
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7ff f9bf 	bl	801330c <_UG_DecodeUTF8>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013f92:	e004      	b.n	8013f9e <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	1c5a      	adds	r2, r3, #1
 8013f98:	60ba      	str	r2, [r7, #8]
 8013f9a:	781b      	ldrb	r3, [r3, #0]
 8013f9c:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8013f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d006      	beq.n	8013fb2 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8013fa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fa6:	2b0a      	cmp	r3, #10
 8013fa8:	d1e6      	bne.n	8013f78 <_UG_PutText+0x80>
 8013faa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013fac:	3301      	adds	r3, #1
 8013fae:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013fb0:	e7e2      	b.n	8013f78 <_UG_PutText+0x80>
     if(!chr) break;
 8013fb2:	bf00      	nop
   }

   yp = 0;
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8013fb8:	7e7b      	ldrb	r3, [r7, #25]
 8013fba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d01f      	beq.n	8014002 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8013fc2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013fc4:	8c3b      	ldrh	r3, [r7, #32]
 8013fc6:	1ad3      	subs	r3, r2, r3
 8013fc8:	b29b      	uxth	r3, r3
 8013fca:	3301      	adds	r3, #1
 8013fcc:	b29b      	uxth	r3, r3
 8013fce:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8013fd0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013fd2:	8bfb      	ldrh	r3, [r7, #30]
 8013fd4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8013fd6:	fb11 f303 	smulbb	r3, r1, r3
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	1ad3      	subs	r3, r2, r3
 8013fde:	b29b      	uxth	r3, r3
 8013fe0:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8013fe2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013fe4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013fe6:	3b01      	subs	r3, #1
 8013fe8:	b299      	uxth	r1, r3
 8013fea:	8abb      	ldrh	r3, [r7, #20]
 8013fec:	fb11 f303 	smulbb	r3, r1, r3
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	1ad3      	subs	r3, r2, r3
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8013ff8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	f2c0 80b4 	blt.w	801416a <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8014002:	7e7b      	ldrb	r3, [r7, #25]
 8014004:	f003 0310 	and.w	r3, r3, #16
 8014008:	2b00      	cmp	r3, #0
 801400a:	d003      	beq.n	8014014 <_UG_PutText+0x11c>
 801400c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014010:	105b      	asrs	r3, r3, #1
 8014012:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8014014:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014016:	8c3b      	ldrh	r3, [r7, #32]
 8014018:	4413      	add	r3, r2
 801401a:	b29b      	uxth	r3, r3
 801401c:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 801401e:	2300      	movs	r3, #0
 8014020:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8014026:	2300      	movs	r3, #0
 8014028:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801402a:	4b54      	ldr	r3, [pc, #336]	; (801417c <_UG_PutText+0x284>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014032:	2b00      	cmp	r3, #0
 8014034:	d107      	bne.n	8014046 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8014036:	f107 0308 	add.w	r3, r7, #8
 801403a:	4618      	mov	r0, r3
 801403c:	f7ff f966 	bl	801330c <_UG_DecodeUTF8>
 8014040:	4603      	mov	r3, r0
 8014042:	84bb      	strh	r3, [r7, #36]	; 0x24
 8014044:	e004      	b.n	8014050 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	1c5a      	adds	r2, r3, #1
 801404a:	60ba      	str	r2, [r7, #8]
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8014050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014052:	2b00      	cmp	r3, #0
 8014054:	d01b      	beq.n	801408e <_UG_PutText+0x196>
 8014056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014058:	2b0a      	cmp	r3, #10
 801405a:	d018      	beq.n	801408e <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 801405c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801405e:	2100      	movs	r1, #0
 8014060:	4618      	mov	r0, r3
 8014062:	f7ff f9cb 	bl	80133fc <_UG_GetCharData>
 8014066:	4603      	mov	r3, r0
 8014068:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 801406a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014072:	d00a      	beq.n	801408a <_UG_PutText+0x192>
         sl++;
 8014074:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014076:	3301      	adds	r3, #1
 8014078:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 801407a:	8a7a      	ldrh	r2, [r7, #18]
 801407c:	8afb      	ldrh	r3, [r7, #22]
 801407e:	4413      	add	r3, r2
 8014080:	b29a      	uxth	r2, r3
 8014082:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014084:	4413      	add	r3, r2
 8014086:	857b      	strh	r3, [r7, #42]	; 0x2a
 8014088:	e7cf      	b.n	801402a <_UG_PutText+0x132>
         if (w == -1){continue;}
 801408a:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801408c:	e7cd      	b.n	801402a <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 801408e:	8afb      	ldrh	r3, [r7, #22]
 8014090:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8014092:	1ad3      	subs	r3, r2, r3
 8014094:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8014096:	8b7a      	ldrh	r2, [r7, #26]
 8014098:	8bbb      	ldrh	r3, [r7, #28]
 801409a:	1ad3      	subs	r3, r2, r3
 801409c:	b29b      	uxth	r3, r3
 801409e:	3301      	adds	r3, #1
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 80140a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80140a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80140a8:	1ad3      	subs	r3, r2, r3
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 80140ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	db5b      	blt.n	801416e <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 80140b6:	7e7b      	ldrb	r3, [r7, #25]
 80140b8:	f003 0301 	and.w	r3, r3, #1
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d002      	beq.n	80140c6 <_UG_PutText+0x1ce>
 80140c0:	2300      	movs	r3, #0
 80140c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80140c4:	e008      	b.n	80140d8 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 80140c6:	7e7b      	ldrb	r3, [r7, #25]
 80140c8:	f003 0302 	and.w	r3, r3, #2
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d003      	beq.n	80140d8 <_UG_PutText+0x1e0>
 80140d0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80140d4:	105b      	asrs	r3, r3, #1
 80140d6:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 80140d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80140da:	8bbb      	ldrh	r3, [r7, #28]
 80140dc:	4413      	add	r3, r2
 80140de:	b29b      	uxth	r3, r3
 80140e0:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80140e2:	4b26      	ldr	r3, [pc, #152]	; (801417c <_UG_PutText+0x284>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d107      	bne.n	80140fe <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 80140ee:	f107 030c 	add.w	r3, r7, #12
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7ff f90a 	bl	801330c <_UG_DecodeUTF8>
 80140f8:	4603      	mov	r3, r0
 80140fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80140fc:	e004      	b.n	8014108 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	1c5a      	adds	r2, r3, #1
 8014102:	60fa      	str	r2, [r7, #12]
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8014108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801410a:	2b00      	cmp	r3, #0
 801410c:	d031      	beq.n	8014172 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 801410e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014110:	2b0a      	cmp	r3, #10
 8014112:	d01c      	beq.n	801414e <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	8a1c      	ldrh	r4, [r3, #16]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	8a5b      	ldrh	r3, [r3, #18]
 801411c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8014120:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8014124:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8014126:	9300      	str	r3, [sp, #0]
 8014128:	4623      	mov	r3, r4
 801412a:	f7ff fb35 	bl	8013798 <_UG_PutChar>
 801412e:	4603      	mov	r3, r0
 8014130:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8014132:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801413a:	d0d2      	beq.n	80140e2 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 801413c:	8a7a      	ldrh	r2, [r7, #18]
 801413e:	8afb      	ldrh	r3, [r7, #22]
 8014140:	4413      	add	r3, r2
 8014142:	b29a      	uxth	r2, r3
 8014144:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014146:	4413      	add	r3, r2
 8014148:	b29b      	uxth	r3, r3
 801414a:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801414c:	e7c9      	b.n	80140e2 <_UG_PutText+0x1ea>
           break;
 801414e:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8014150:	8bfa      	ldrh	r2, [r7, #30]
 8014152:	8abb      	ldrh	r3, [r7, #20]
 8014154:	4413      	add	r3, r2
 8014156:	b29a      	uxth	r2, r3
 8014158:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801415a:	4413      	add	r3, r2
 801415c:	b29b      	uxth	r3, r3
 801415e:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8014160:	e75d      	b.n	801401e <_UG_PutText+0x126>
     return;
 8014162:	bf00      	nop
 8014164:	e006      	b.n	8014174 <_UG_PutText+0x27c>
     return;
 8014166:	bf00      	nop
 8014168:	e004      	b.n	8014174 <_UG_PutText+0x27c>
        return;
 801416a:	bf00      	nop
 801416c:	e002      	b.n	8014174 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 801416e:	bf00      	nop
 8014170:	e000      	b.n	8014174 <_UG_PutText+0x27c>
           return;
 8014172:	bf00      	nop
   }
}
 8014174:	3734      	adds	r7, #52	; 0x34
 8014176:	46bd      	mov	sp, r7
 8014178:	bd90      	pop	{r4, r7, pc}
 801417a:	bf00      	nop
 801417c:	200023f0 	.word	0x200023f0

08014180 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8014180:	b5b0      	push	{r4, r5, r7, lr}
 8014182:	b084      	sub	sp, #16
 8014184:	af02      	add	r7, sp, #8
 8014186:	4604      	mov	r4, r0
 8014188:	4608      	mov	r0, r1
 801418a:	4611      	mov	r1, r2
 801418c:	461a      	mov	r2, r3
 801418e:	4623      	mov	r3, r4
 8014190:	80fb      	strh	r3, [r7, #6]
 8014192:	4603      	mov	r3, r0
 8014194:	80bb      	strh	r3, [r7, #4]
 8014196:	460b      	mov	r3, r1
 8014198:	807b      	strh	r3, [r7, #2]
 801419a:	4613      	mov	r3, r2
 801419c:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 801419e:	887b      	ldrh	r3, [r7, #2]
 80141a0:	3b01      	subs	r3, #1
 80141a2:	b29b      	uxth	r3, r3
 80141a4:	b21c      	sxth	r4, r3
 80141a6:	69bb      	ldr	r3, [r7, #24]
 80141a8:	1c9a      	adds	r2, r3, #2
 80141aa:	61ba      	str	r2, [r7, #24]
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80141b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80141b6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80141ba:	9300      	str	r3, [sp, #0]
 80141bc:	4613      	mov	r3, r2
 80141be:	4622      	mov	r2, r4
 80141c0:	f7fe fee0 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 80141c4:	88bb      	ldrh	r3, [r7, #4]
 80141c6:	3301      	adds	r3, #1
 80141c8:	b29b      	uxth	r3, r3
 80141ca:	b219      	sxth	r1, r3
 80141cc:	883b      	ldrh	r3, [r7, #0]
 80141ce:	3b01      	subs	r3, #1
 80141d0:	b29b      	uxth	r3, r3
 80141d2:	b21c      	sxth	r4, r3
 80141d4:	69bb      	ldr	r3, [r7, #24]
 80141d6:	1c9a      	adds	r2, r3, #2
 80141d8:	61ba      	str	r2, [r7, #24]
 80141da:	881b      	ldrh	r3, [r3, #0]
 80141dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80141e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80141e4:	9300      	str	r3, [sp, #0]
 80141e6:	4623      	mov	r3, r4
 80141e8:	f7fe fecc 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80141ec:	69bb      	ldr	r3, [r7, #24]
 80141ee:	1c9a      	adds	r2, r3, #2
 80141f0:	61ba      	str	r2, [r7, #24]
 80141f2:	881b      	ldrh	r3, [r3, #0]
 80141f4:	f9b7 4000 	ldrsh.w	r4, [r7]
 80141f8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80141fc:	f9b7 1000 	ldrsh.w	r1, [r7]
 8014200:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8014204:	9300      	str	r3, [sp, #0]
 8014206:	4623      	mov	r3, r4
 8014208:	f7fe febc 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 801420c:	883b      	ldrh	r3, [r7, #0]
 801420e:	3b01      	subs	r3, #1
 8014210:	b29b      	uxth	r3, r3
 8014212:	b21c      	sxth	r4, r3
 8014214:	69bb      	ldr	r3, [r7, #24]
 8014216:	1c9a      	adds	r2, r3, #2
 8014218:	61ba      	str	r2, [r7, #24]
 801421a:	881b      	ldrh	r3, [r3, #0]
 801421c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014220:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8014224:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8014228:	9300      	str	r3, [sp, #0]
 801422a:	4623      	mov	r3, r4
 801422c:	f7fe feaa 	bl	8012f84 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8014230:	88fb      	ldrh	r3, [r7, #6]
 8014232:	3301      	adds	r3, #1
 8014234:	b29b      	uxth	r3, r3
 8014236:	b218      	sxth	r0, r3
 8014238:	88bb      	ldrh	r3, [r7, #4]
 801423a:	3301      	adds	r3, #1
 801423c:	b29b      	uxth	r3, r3
 801423e:	b219      	sxth	r1, r3
 8014240:	887b      	ldrh	r3, [r7, #2]
 8014242:	3b02      	subs	r3, #2
 8014244:	b29b      	uxth	r3, r3
 8014246:	b21c      	sxth	r4, r3
 8014248:	88bb      	ldrh	r3, [r7, #4]
 801424a:	3301      	adds	r3, #1
 801424c:	b29b      	uxth	r3, r3
 801424e:	b21d      	sxth	r5, r3
 8014250:	69bb      	ldr	r3, [r7, #24]
 8014252:	1c9a      	adds	r2, r3, #2
 8014254:	61ba      	str	r2, [r7, #24]
 8014256:	881b      	ldrh	r3, [r3, #0]
 8014258:	9300      	str	r3, [sp, #0]
 801425a:	462b      	mov	r3, r5
 801425c:	4622      	mov	r2, r4
 801425e:	f7fe fe91 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8014262:	88fb      	ldrh	r3, [r7, #6]
 8014264:	3301      	adds	r3, #1
 8014266:	b29b      	uxth	r3, r3
 8014268:	b218      	sxth	r0, r3
 801426a:	88bb      	ldrh	r3, [r7, #4]
 801426c:	3302      	adds	r3, #2
 801426e:	b29b      	uxth	r3, r3
 8014270:	b219      	sxth	r1, r3
 8014272:	88fb      	ldrh	r3, [r7, #6]
 8014274:	3301      	adds	r3, #1
 8014276:	b29b      	uxth	r3, r3
 8014278:	b21c      	sxth	r4, r3
 801427a:	883b      	ldrh	r3, [r7, #0]
 801427c:	3b02      	subs	r3, #2
 801427e:	b29b      	uxth	r3, r3
 8014280:	b21d      	sxth	r5, r3
 8014282:	69bb      	ldr	r3, [r7, #24]
 8014284:	1c9a      	adds	r2, r3, #2
 8014286:	61ba      	str	r2, [r7, #24]
 8014288:	881b      	ldrh	r3, [r3, #0]
 801428a:	9300      	str	r3, [sp, #0]
 801428c:	462b      	mov	r3, r5
 801428e:	4622      	mov	r2, r4
 8014290:	f7fe fe78 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8014294:	88fb      	ldrh	r3, [r7, #6]
 8014296:	3301      	adds	r3, #1
 8014298:	b29b      	uxth	r3, r3
 801429a:	b218      	sxth	r0, r3
 801429c:	883b      	ldrh	r3, [r7, #0]
 801429e:	3b01      	subs	r3, #1
 80142a0:	b29b      	uxth	r3, r3
 80142a2:	b219      	sxth	r1, r3
 80142a4:	887b      	ldrh	r3, [r7, #2]
 80142a6:	3b01      	subs	r3, #1
 80142a8:	b29b      	uxth	r3, r3
 80142aa:	b21c      	sxth	r4, r3
 80142ac:	883b      	ldrh	r3, [r7, #0]
 80142ae:	3b01      	subs	r3, #1
 80142b0:	b29b      	uxth	r3, r3
 80142b2:	b21d      	sxth	r5, r3
 80142b4:	69bb      	ldr	r3, [r7, #24]
 80142b6:	1c9a      	adds	r2, r3, #2
 80142b8:	61ba      	str	r2, [r7, #24]
 80142ba:	881b      	ldrh	r3, [r3, #0]
 80142bc:	9300      	str	r3, [sp, #0]
 80142be:	462b      	mov	r3, r5
 80142c0:	4622      	mov	r2, r4
 80142c2:	f7fe fe5f 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 80142c6:	887b      	ldrh	r3, [r7, #2]
 80142c8:	3b01      	subs	r3, #1
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	b218      	sxth	r0, r3
 80142ce:	88bb      	ldrh	r3, [r7, #4]
 80142d0:	3301      	adds	r3, #1
 80142d2:	b29b      	uxth	r3, r3
 80142d4:	b219      	sxth	r1, r3
 80142d6:	887b      	ldrh	r3, [r7, #2]
 80142d8:	3b01      	subs	r3, #1
 80142da:	b29b      	uxth	r3, r3
 80142dc:	b21c      	sxth	r4, r3
 80142de:	883b      	ldrh	r3, [r7, #0]
 80142e0:	3b02      	subs	r3, #2
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	b21d      	sxth	r5, r3
 80142e6:	69bb      	ldr	r3, [r7, #24]
 80142e8:	1c9a      	adds	r2, r3, #2
 80142ea:	61ba      	str	r2, [r7, #24]
 80142ec:	881b      	ldrh	r3, [r3, #0]
 80142ee:	9300      	str	r3, [sp, #0]
 80142f0:	462b      	mov	r3, r5
 80142f2:	4622      	mov	r2, r4
 80142f4:	f7fe fe46 	bl	8012f84 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80142f8:	88fb      	ldrh	r3, [r7, #6]
 80142fa:	3302      	adds	r3, #2
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	b218      	sxth	r0, r3
 8014300:	88bb      	ldrh	r3, [r7, #4]
 8014302:	3302      	adds	r3, #2
 8014304:	b29b      	uxth	r3, r3
 8014306:	b219      	sxth	r1, r3
 8014308:	887b      	ldrh	r3, [r7, #2]
 801430a:	3b03      	subs	r3, #3
 801430c:	b29b      	uxth	r3, r3
 801430e:	b21c      	sxth	r4, r3
 8014310:	88bb      	ldrh	r3, [r7, #4]
 8014312:	3302      	adds	r3, #2
 8014314:	b29b      	uxth	r3, r3
 8014316:	b21d      	sxth	r5, r3
 8014318:	69bb      	ldr	r3, [r7, #24]
 801431a:	1c9a      	adds	r2, r3, #2
 801431c:	61ba      	str	r2, [r7, #24]
 801431e:	881b      	ldrh	r3, [r3, #0]
 8014320:	9300      	str	r3, [sp, #0]
 8014322:	462b      	mov	r3, r5
 8014324:	4622      	mov	r2, r4
 8014326:	f7fe fe2d 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 801432a:	88fb      	ldrh	r3, [r7, #6]
 801432c:	3302      	adds	r3, #2
 801432e:	b29b      	uxth	r3, r3
 8014330:	b218      	sxth	r0, r3
 8014332:	88bb      	ldrh	r3, [r7, #4]
 8014334:	3303      	adds	r3, #3
 8014336:	b29b      	uxth	r3, r3
 8014338:	b219      	sxth	r1, r3
 801433a:	88fb      	ldrh	r3, [r7, #6]
 801433c:	3302      	adds	r3, #2
 801433e:	b29b      	uxth	r3, r3
 8014340:	b21c      	sxth	r4, r3
 8014342:	883b      	ldrh	r3, [r7, #0]
 8014344:	3b03      	subs	r3, #3
 8014346:	b29b      	uxth	r3, r3
 8014348:	b21d      	sxth	r5, r3
 801434a:	69bb      	ldr	r3, [r7, #24]
 801434c:	1c9a      	adds	r2, r3, #2
 801434e:	61ba      	str	r2, [r7, #24]
 8014350:	881b      	ldrh	r3, [r3, #0]
 8014352:	9300      	str	r3, [sp, #0]
 8014354:	462b      	mov	r3, r5
 8014356:	4622      	mov	r2, r4
 8014358:	f7fe fe14 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 801435c:	88fb      	ldrh	r3, [r7, #6]
 801435e:	3302      	adds	r3, #2
 8014360:	b29b      	uxth	r3, r3
 8014362:	b218      	sxth	r0, r3
 8014364:	883b      	ldrh	r3, [r7, #0]
 8014366:	3b02      	subs	r3, #2
 8014368:	b29b      	uxth	r3, r3
 801436a:	b219      	sxth	r1, r3
 801436c:	887b      	ldrh	r3, [r7, #2]
 801436e:	3b02      	subs	r3, #2
 8014370:	b29b      	uxth	r3, r3
 8014372:	b21c      	sxth	r4, r3
 8014374:	883b      	ldrh	r3, [r7, #0]
 8014376:	3b02      	subs	r3, #2
 8014378:	b29b      	uxth	r3, r3
 801437a:	b21d      	sxth	r5, r3
 801437c:	69bb      	ldr	r3, [r7, #24]
 801437e:	1c9a      	adds	r2, r3, #2
 8014380:	61ba      	str	r2, [r7, #24]
 8014382:	881b      	ldrh	r3, [r3, #0]
 8014384:	9300      	str	r3, [sp, #0]
 8014386:	462b      	mov	r3, r5
 8014388:	4622      	mov	r2, r4
 801438a:	f7fe fdfb 	bl	8012f84 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 801438e:	887b      	ldrh	r3, [r7, #2]
 8014390:	3b02      	subs	r3, #2
 8014392:	b29b      	uxth	r3, r3
 8014394:	b218      	sxth	r0, r3
 8014396:	88bb      	ldrh	r3, [r7, #4]
 8014398:	3302      	adds	r3, #2
 801439a:	b29b      	uxth	r3, r3
 801439c:	b219      	sxth	r1, r3
 801439e:	887b      	ldrh	r3, [r7, #2]
 80143a0:	3b02      	subs	r3, #2
 80143a2:	b29b      	uxth	r3, r3
 80143a4:	b21a      	sxth	r2, r3
 80143a6:	883b      	ldrh	r3, [r7, #0]
 80143a8:	3b03      	subs	r3, #3
 80143aa:	b29b      	uxth	r3, r3
 80143ac:	b21c      	sxth	r4, r3
 80143ae:	69bb      	ldr	r3, [r7, #24]
 80143b0:	881b      	ldrh	r3, [r3, #0]
 80143b2:	9300      	str	r3, [sp, #0]
 80143b4:	4623      	mov	r3, r4
 80143b6:	f7fe fde5 	bl	8012f84 <UG_DrawLine>
}
 80143ba:	bf00      	nop
 80143bc:	3708      	adds	r7, #8
 80143be:	46bd      	mov	sp, r7
 80143c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080143c4 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80143c4:	b480      	push	{r7}
 80143c6:	b083      	sub	sp, #12
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	4603      	mov	r3, r0
 80143cc:	6039      	str	r1, [r7, #0]
 80143ce:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80143d0:	79fb      	ldrb	r3, [r7, #7]
 80143d2:	2b03      	cmp	r3, #3
 80143d4:	d810      	bhi.n	80143f8 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80143d6:	4b0b      	ldr	r3, [pc, #44]	; (8014404 <UG_DriverRegister+0x40>)
 80143d8:	681a      	ldr	r2, [r3, #0]
 80143da:	79fb      	ldrb	r3, [r7, #7]
 80143dc:	330a      	adds	r3, #10
 80143de:	00db      	lsls	r3, r3, #3
 80143e0:	4413      	add	r3, r2
 80143e2:	683a      	ldr	r2, [r7, #0]
 80143e4:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80143e6:	4b07      	ldr	r3, [pc, #28]	; (8014404 <UG_DriverRegister+0x40>)
 80143e8:	681a      	ldr	r2, [r3, #0]
 80143ea:	79fb      	ldrb	r3, [r7, #7]
 80143ec:	330a      	adds	r3, #10
 80143ee:	00db      	lsls	r3, r3, #3
 80143f0:	4413      	add	r3, r2
 80143f2:	2203      	movs	r2, #3
 80143f4:	721a      	strb	r2, [r3, #8]
 80143f6:	e000      	b.n	80143fa <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80143f8:	bf00      	nop
}
 80143fa:	370c      	adds	r7, #12
 80143fc:	46bd      	mov	sp, r7
 80143fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014402:	4770      	bx	lr
 8014404:	200023f0 	.word	0x200023f0

08014408 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b082      	sub	sp, #8
 801440c:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 801440e:	4b5e      	ldr	r3, [pc, #376]	; (8014588 <UG_Update+0x180>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8014416:	f003 0301 	and.w	r3, r3, #1
 801441a:	2b00      	cmp	r3, #0
 801441c:	d00a      	beq.n	8014434 <UG_Update+0x2c>
 801441e:	4b5a      	ldr	r3, [pc, #360]	; (8014588 <UG_Update+0x180>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8014426:	4b58      	ldr	r3, [pc, #352]	; (8014588 <UG_Update+0x180>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	f022 0201 	bic.w	r2, r2, #1
 801442e:	b2d2      	uxtb	r2, r2
 8014430:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8014434:	4b54      	ldr	r3, [pc, #336]	; (8014588 <UG_Update+0x180>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	68da      	ldr	r2, [r3, #12]
 801443a:	4b53      	ldr	r3, [pc, #332]	; (8014588 <UG_Update+0x180>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	691b      	ldr	r3, [r3, #16]
 8014440:	429a      	cmp	r2, r3
 8014442:	d071      	beq.n	8014528 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8014444:	4b50      	ldr	r3, [pc, #320]	; (8014588 <UG_Update+0x180>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d06c      	beq.n	8014528 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 801444e:	4b4e      	ldr	r3, [pc, #312]	; (8014588 <UG_Update+0x180>)
 8014450:	681a      	ldr	r2, [r3, #0]
 8014452:	4b4d      	ldr	r3, [pc, #308]	; (8014588 <UG_Update+0x180>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	6912      	ldr	r2, [r2, #16]
 8014458:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 801445a:	4b4b      	ldr	r3, [pc, #300]	; (8014588 <UG_Update+0x180>)
 801445c:	681a      	ldr	r2, [r3, #0]
 801445e:	4b4a      	ldr	r3, [pc, #296]	; (8014588 <UG_Update+0x180>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	68d2      	ldr	r2, [r2, #12]
 8014464:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8014466:	4b48      	ldr	r3, [pc, #288]	; (8014588 <UG_Update+0x180>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	695b      	ldr	r3, [r3, #20]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d045      	beq.n	80144fc <UG_Update+0xf4>
 8014470:	4b45      	ldr	r3, [pc, #276]	; (8014588 <UG_Update+0x180>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	695b      	ldr	r3, [r3, #20]
 8014476:	7d9b      	ldrb	r3, [r3, #22]
 8014478:	f003 0302 	and.w	r3, r3, #2
 801447c:	2b00      	cmp	r3, #0
 801447e:	d03d      	beq.n	80144fc <UG_Update+0xf4>
 8014480:	4b41      	ldr	r3, [pc, #260]	; (8014588 <UG_Update+0x180>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	695b      	ldr	r3, [r3, #20]
 8014486:	7a1b      	ldrb	r3, [r3, #8]
 8014488:	f003 0308 	and.w	r3, r3, #8
 801448c:	2b00      	cmp	r3, #0
 801448e:	d035      	beq.n	80144fc <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8014490:	4b3d      	ldr	r3, [pc, #244]	; (8014588 <UG_Update+0x180>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	695b      	ldr	r3, [r3, #20]
 8014496:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 801449a:	4b3b      	ldr	r3, [pc, #236]	; (8014588 <UG_Update+0x180>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	691b      	ldr	r3, [r3, #16]
 80144a0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80144a4:	429a      	cmp	r2, r3
 80144a6:	d123      	bne.n	80144f0 <UG_Update+0xe8>
 80144a8:	4b37      	ldr	r3, [pc, #220]	; (8014588 <UG_Update+0x180>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	695b      	ldr	r3, [r3, #20]
 80144ae:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80144b2:	4b35      	ldr	r3, [pc, #212]	; (8014588 <UG_Update+0x180>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	691b      	ldr	r3, [r3, #16]
 80144b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80144bc:	429a      	cmp	r2, r3
 80144be:	d117      	bne.n	80144f0 <UG_Update+0xe8>
 80144c0:	4b31      	ldr	r3, [pc, #196]	; (8014588 <UG_Update+0x180>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	695b      	ldr	r3, [r3, #20]
 80144c6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80144ca:	4b2f      	ldr	r3, [pc, #188]	; (8014588 <UG_Update+0x180>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	691b      	ldr	r3, [r3, #16]
 80144d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80144d4:	429a      	cmp	r2, r3
 80144d6:	d10b      	bne.n	80144f0 <UG_Update+0xe8>
 80144d8:	4b2b      	ldr	r3, [pc, #172]	; (8014588 <UG_Update+0x180>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	695b      	ldr	r3, [r3, #20]
 80144de:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80144e2:	4b29      	ldr	r3, [pc, #164]	; (8014588 <UG_Update+0x180>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	691b      	ldr	r3, [r3, #16]
 80144e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80144ec:	429a      	cmp	r2, r3
 80144ee:	d005      	beq.n	80144fc <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 80144f0:	4b25      	ldr	r3, [pc, #148]	; (8014588 <UG_Update+0x180>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	695b      	ldr	r3, [r3, #20]
 80144f6:	4618      	mov	r0, r3
 80144f8:	f000 f848 	bl	801458c <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80144fc:	4b22      	ldr	r3, [pc, #136]	; (8014588 <UG_Update+0x180>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	691b      	ldr	r3, [r3, #16]
 8014502:	7a1a      	ldrb	r2, [r3, #8]
 8014504:	4b20      	ldr	r3, [pc, #128]	; (8014588 <UG_Update+0x180>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	691b      	ldr	r3, [r3, #16]
 801450a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801450e:	b2d2      	uxtb	r2, r2
 8014510:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8014512:	4b1d      	ldr	r3, [pc, #116]	; (8014588 <UG_Update+0x180>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	691b      	ldr	r3, [r3, #16]
 8014518:	7a1a      	ldrb	r2, [r3, #8]
 801451a:	4b1b      	ldr	r3, [pc, #108]	; (8014588 <UG_Update+0x180>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	691b      	ldr	r3, [r3, #16]
 8014520:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8014524:	b2d2      	uxtb	r2, r2
 8014526:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8014528:	4b17      	ldr	r3, [pc, #92]	; (8014588 <UG_Update+0x180>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	691b      	ldr	r3, [r3, #16]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d01b      	beq.n	801456a <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8014532:	4b15      	ldr	r3, [pc, #84]	; (8014588 <UG_Update+0x180>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	691b      	ldr	r3, [r3, #16]
 8014538:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	7a1b      	ldrb	r3, [r3, #8]
 801453e:	f003 0320 	and.w	r3, r3, #32
 8014542:	2b00      	cmp	r3, #0
 8014544:	d002      	beq.n	801454c <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f000 f8ca 	bl	80146e0 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	7a1b      	ldrb	r3, [r3, #8]
 8014550:	f003 0308 	and.w	r3, r3, #8
 8014554:	2b00      	cmp	r3, #0
 8014556:	d008      	beq.n	801456a <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8014558:	6878      	ldr	r0, [r7, #4]
 801455a:	f7ff fb81 	bl	8013c60 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f7ff fc34 	bl	8013dcc <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f7ff fc7b 	bl	8013e60 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 801456a:	4b07      	ldr	r3, [pc, #28]	; (8014588 <UG_Update+0x180>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	689b      	ldr	r3, [r3, #8]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d004      	beq.n	8014580 <UG_Update+0x178>
     gui->device->flush();
 8014576:	4b04      	ldr	r3, [pc, #16]	; (8014588 <UG_Update+0x180>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	689b      	ldr	r3, [r3, #8]
 801457e:	4798      	blx	r3
   }
}
 8014580:	bf00      	nop
 8014582:	3708      	adds	r7, #8
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	200023f0 	.word	0x200023f0

0801458c <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 801458c:	b590      	push	{r4, r7, lr}
 801458e:	b08f      	sub	sp, #60	; 0x3c
 8014590:	af02      	add	r7, sp, #8
 8014592:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2b00      	cmp	r3, #0
 8014598:	f000 809a 	beq.w	80146d0 <_UG_WindowDrawTitle+0x144>
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	7a1b      	ldrb	r3, [r3, #8]
 80145a0:	f003 0302 	and.w	r3, r3, #2
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	f000 8093 	beq.w	80146d0 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	89db      	ldrh	r3, [r3, #14]
 80145ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	8a1b      	ldrh	r3, [r3, #16]
 80145b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	8a5b      	ldrh	r3, [r3, #18]
 80145ba:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	8a9b      	ldrh	r3, [r3, #20]
 80145c0:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	7d9b      	ldrb	r3, [r3, #22]
 80145c6:	f003 0301 	and.w	r3, r3, #1
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d00f      	beq.n	80145ee <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 80145ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80145d0:	3303      	adds	r3, #3
 80145d2:	b29b      	uxth	r3, r3
 80145d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 80145d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80145d8:	3303      	adds	r3, #3
 80145da:	b29b      	uxth	r3, r3
 80145dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 80145de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80145e0:	3b03      	subs	r3, #3
 80145e2:	b29b      	uxth	r3, r3
 80145e4:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 80145e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80145e8:	3b03      	subs	r3, #3
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 80145ee:	4b3b      	ldr	r3, [pc, #236]	; (80146dc <_UG_WindowDrawTitle+0x150>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	691b      	ldr	r3, [r3, #16]
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d106      	bne.n	8014608 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80145fe:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014604:	83bb      	strh	r3, [r7, #28]
 8014606:	e005      	b.n	8014614 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801460c:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014612:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801461a:	b29a      	uxth	r2, r3
 801461c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801461e:	4413      	add	r3, r2
 8014620:	b29b      	uxth	r3, r3
 8014622:	3b01      	subs	r3, #1
 8014624:	b29b      	uxth	r3, r3
 8014626:	b21c      	sxth	r4, r3
 8014628:	8bfb      	ldrh	r3, [r7, #30]
 801462a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801462e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8014632:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8014636:	9300      	str	r3, [sp, #0]
 8014638:	4623      	mov	r3, r4
 801463a:	f7fe fb03 	bl	8012c44 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	699b      	ldr	r3, [r3, #24]
 8014642:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	69db      	ldr	r3, [r3, #28]
 8014648:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 801464a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801464c:	3303      	adds	r3, #3
 801464e:	b29b      	uxth	r3, r3
 8014650:	b21b      	sxth	r3, r3
 8014652:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8014654:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014656:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8014658:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801465a:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014662:	b29a      	uxth	r2, r3
 8014664:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014666:	4413      	add	r3, r2
 8014668:	b29b      	uxth	r3, r3
 801466a:	3b01      	subs	r3, #1
 801466c:	b29b      	uxth	r3, r3
 801466e:	b21b      	sxth	r3, r3
 8014670:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8014678:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8014682:	b21b      	sxth	r3, r3
 8014684:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 801468c:	b21b      	sxth	r3, r3
 801468e:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8014690:	f107 030c 	add.w	r3, r7, #12
 8014694:	4618      	mov	r0, r3
 8014696:	f7ff fc2f 	bl	8013ef8 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80146a0:	b29a      	uxth	r2, r3
 80146a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80146a4:	4413      	add	r3, r2
 80146a6:	b29b      	uxth	r3, r3
 80146a8:	b219      	sxth	r1, r3
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80146b4:	4413      	add	r3, r2
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	b21b      	sxth	r3, r3
 80146ba:	f649 5413 	movw	r4, #40211	; 0x9d13
 80146be:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80146c2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80146c6:	9400      	str	r4, [sp, #0]
 80146c8:	f7fe fc5c 	bl	8012f84 <UG_DrawLine>
      return UG_RESULT_OK;
 80146cc:	2300      	movs	r3, #0
 80146ce:	e001      	b.n	80146d4 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 80146d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	3734      	adds	r7, #52	; 0x34
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd90      	pop	{r4, r7, pc}
 80146dc:	200023f0 	.word	0x200023f0

080146e0 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 80146e0:	b590      	push	{r4, r7, lr}
 80146e2:	b089      	sub	sp, #36	; 0x24
 80146e4:	af02      	add	r7, sp, #8
 80146e6:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	89db      	ldrh	r3, [r3, #14]
 80146ec:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	8a1b      	ldrh	r3, [r3, #16]
 80146f2:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	8a5b      	ldrh	r3, [r3, #18]
 80146f8:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	8a9b      	ldrh	r3, [r3, #20]
 80146fe:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	7a1b      	ldrb	r3, [r3, #8]
 8014704:	f023 0320 	bic.w	r3, r3, #32
 8014708:	b2da      	uxtb	r2, r3
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	7a1b      	ldrb	r3, [r3, #8]
 8014712:	f003 0308 	and.w	r3, r3, #8
 8014716:	2b00      	cmp	r3, #0
 8014718:	f000 8084 	beq.w	8014824 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	7d9b      	ldrb	r3, [r3, #22]
 8014720:	f003 0301 	and.w	r3, r3, #1
 8014724:	2b00      	cmp	r3, #0
 8014726:	d021      	beq.n	801476c <_UG_WindowUpdate+0x8c>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	7a1b      	ldrb	r3, [r3, #8]
 801472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014730:	2b00      	cmp	r3, #0
 8014732:	d11b      	bne.n	801476c <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8014734:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014738:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801473c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8014740:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8014744:	4c43      	ldr	r4, [pc, #268]	; (8014854 <_UG_WindowUpdate+0x174>)
 8014746:	9400      	str	r4, [sp, #0]
 8014748:	f7ff fd1a 	bl	8014180 <_UG_DrawObjectFrame>
         xs+=3;
 801474c:	8abb      	ldrh	r3, [r7, #20]
 801474e:	3303      	adds	r3, #3
 8014750:	b29b      	uxth	r3, r3
 8014752:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8014754:	8a7b      	ldrh	r3, [r7, #18]
 8014756:	3303      	adds	r3, #3
 8014758:	b29b      	uxth	r3, r3
 801475a:	827b      	strh	r3, [r7, #18]
         xe-=3;
 801475c:	8a3b      	ldrh	r3, [r7, #16]
 801475e:	3b03      	subs	r3, #3
 8014760:	b29b      	uxth	r3, r3
 8014762:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8014764:	89fb      	ldrh	r3, [r7, #14]
 8014766:	3b03      	subs	r3, #3
 8014768:	b29b      	uxth	r3, r3
 801476a:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	7d9b      	ldrb	r3, [r3, #22]
 8014770:	f003 0302 	and.w	r3, r3, #2
 8014774:	2b00      	cmp	r3, #0
 8014776:	d01a      	beq.n	80147ae <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f7ff ff07 	bl	801458c <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014784:	b29a      	uxth	r2, r3
 8014786:	8a7b      	ldrh	r3, [r7, #18]
 8014788:	4413      	add	r3, r2
 801478a:	b29b      	uxth	r3, r3
 801478c:	3301      	adds	r3, #1
 801478e:	b29b      	uxth	r3, r3
 8014790:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	7a1b      	ldrb	r3, [r3, #8]
 8014796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801479a:	2b00      	cmp	r3, #0
 801479c:	d007      	beq.n	80147ae <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	7a1b      	ldrb	r3, [r3, #8]
 80147a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80147a6:	b2da      	uxtb	r2, r3
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	721a      	strb	r2, [r3, #8]
            return;
 80147ac:	e04e      	b.n	801484c <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	899b      	ldrh	r3, [r3, #12]
 80147b2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80147b6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80147ba:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80147be:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80147c2:	9300      	str	r3, [sp, #0]
 80147c4:	4623      	mov	r3, r4
 80147c6:	f7fe fa3d 	bl	8012c44 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 80147d0:	2300      	movs	r3, #0
 80147d2:	82fb      	strh	r3, [r7, #22]
 80147d4:	e021      	b.n	801481a <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	685a      	ldr	r2, [r3, #4]
 80147da:	8afb      	ldrh	r3, [r7, #22]
 80147dc:	015b      	lsls	r3, r3, #5
 80147de:	4413      	add	r3, r2
 80147e0:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	f003 0301 	and.w	r3, r3, #1
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d112      	bne.n	8014814 <_UG_WindowUpdate+0x134>
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	f003 0302 	and.w	r3, r3, #2
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d00c      	beq.n	8014814 <_UG_WindowUpdate+0x134>
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	f003 0308 	and.w	r3, r3, #8
 8014802:	2b00      	cmp	r3, #0
 8014804:	d006      	beq.n	8014814 <_UG_WindowUpdate+0x134>
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801480e:	b2da      	uxtb	r2, r3
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8014814:	8afb      	ldrh	r3, [r7, #22]
 8014816:	3301      	adds	r3, #1
 8014818:	82fb      	strh	r3, [r7, #22]
 801481a:	8afa      	ldrh	r2, [r7, #22]
 801481c:	89bb      	ldrh	r3, [r7, #12]
 801481e:	429a      	cmp	r2, r3
 8014820:	d3d9      	bcc.n	80147d6 <_UG_WindowUpdate+0xf6>
 8014822:	e013      	b.n	801484c <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 801483c:	4b06      	ldr	r3, [pc, #24]	; (8014858 <_UG_WindowUpdate+0x178>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014844:	9300      	str	r3, [sp, #0]
 8014846:	4623      	mov	r3, r4
 8014848:	f7fe f9fc 	bl	8012c44 <UG_FillFrame>
   }
}
 801484c:	371c      	adds	r7, #28
 801484e:	46bd      	mov	sp, r7
 8014850:	bd90      	pop	{r4, r7, pc}
 8014852:	bf00      	nop
 8014854:	0801dfb0 	.word	0x0801dfb0
 8014858:	200023f0 	.word	0x200023f0

0801485c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	460b      	mov	r3, r1
 8014866:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014868:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801486c:	f002 f8fc 	bl	8016a68 <USBD_static_malloc>
 8014870:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d105      	bne.n	8014884 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2200      	movs	r2, #0
 801487c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014880:	2302      	movs	r3, #2
 8014882:	e066      	b.n	8014952 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	68fa      	ldr	r2, [r7, #12]
 8014888:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	7c1b      	ldrb	r3, [r3, #16]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d119      	bne.n	80148c8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014898:	2202      	movs	r2, #2
 801489a:	2181      	movs	r1, #129	; 0x81
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f001 ff8a 	bl	80167b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2201      	movs	r2, #1
 80148a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80148a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80148ac:	2202      	movs	r2, #2
 80148ae:	2101      	movs	r1, #1
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f001 ff80 	bl	80167b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2201      	movs	r2, #1
 80148ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	2210      	movs	r2, #16
 80148c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80148c6:	e016      	b.n	80148f6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80148c8:	2340      	movs	r3, #64	; 0x40
 80148ca:	2202      	movs	r2, #2
 80148cc:	2181      	movs	r1, #129	; 0x81
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f001 ff71 	bl	80167b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2201      	movs	r2, #1
 80148d8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80148da:	2340      	movs	r3, #64	; 0x40
 80148dc:	2202      	movs	r2, #2
 80148de:	2101      	movs	r1, #1
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f001 ff68 	bl	80167b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	2201      	movs	r2, #1
 80148ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2210      	movs	r2, #16
 80148f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80148f6:	2308      	movs	r3, #8
 80148f8:	2203      	movs	r2, #3
 80148fa:	2182      	movs	r1, #130	; 0x82
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f001 ff5a 	bl	80167b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	2201      	movs	r2, #1
 8014906:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	2200      	movs	r2, #0
 8014918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2200      	movs	r2, #0
 8014920:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	7c1b      	ldrb	r3, [r3, #16]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d109      	bne.n	8014940 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014936:	2101      	movs	r1, #1
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f002 f82b 	bl	8016994 <USBD_LL_PrepareReceive>
 801493e:	e007      	b.n	8014950 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014946:	2340      	movs	r3, #64	; 0x40
 8014948:	2101      	movs	r1, #1
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f002 f822 	bl	8016994 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014950:	2300      	movs	r3, #0
}
 8014952:	4618      	mov	r0, r3
 8014954:	3710      	adds	r7, #16
 8014956:	46bd      	mov	sp, r7
 8014958:	bd80      	pop	{r7, pc}

0801495a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801495a:	b580      	push	{r7, lr}
 801495c:	b082      	sub	sp, #8
 801495e:	af00      	add	r7, sp, #0
 8014960:	6078      	str	r0, [r7, #4]
 8014962:	460b      	mov	r3, r1
 8014964:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014966:	2181      	movs	r1, #129	; 0x81
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f001 ff4a 	bl	8016802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2200      	movs	r2, #0
 8014972:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014974:	2101      	movs	r1, #1
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f001 ff43 	bl	8016802 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2200      	movs	r2, #0
 8014980:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014984:	2182      	movs	r1, #130	; 0x82
 8014986:	6878      	ldr	r0, [r7, #4]
 8014988:	f001 ff3b 	bl	8016802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2200      	movs	r2, #0
 8014990:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2200      	movs	r2, #0
 8014998:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d00e      	beq.n	80149c4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80149ac:	685b      	ldr	r3, [r3, #4]
 80149ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80149b6:	4618      	mov	r0, r3
 80149b8:	f002 f864 	bl	8016a84 <USBD_static_free>
    pdev->pClassData = NULL;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2200      	movs	r2, #0
 80149c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80149c4:	2300      	movs	r3, #0
}
 80149c6:	4618      	mov	r0, r3
 80149c8:	3708      	adds	r7, #8
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}
	...

080149d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b086      	sub	sp, #24
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80149e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80149e2:	2300      	movs	r3, #0
 80149e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80149e6:	2300      	movs	r3, #0
 80149e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80149ea:	2300      	movs	r3, #0
 80149ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d101      	bne.n	80149f8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80149f4:	2303      	movs	r3, #3
 80149f6:	e0af      	b.n	8014b58 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80149f8:	683b      	ldr	r3, [r7, #0]
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d03f      	beq.n	8014a84 <USBD_CDC_Setup+0xb4>
 8014a04:	2b20      	cmp	r3, #32
 8014a06:	f040 809f 	bne.w	8014b48 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	88db      	ldrh	r3, [r3, #6]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d02e      	beq.n	8014a70 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	b25b      	sxtb	r3, r3
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	da16      	bge.n	8014a4a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a22:	689b      	ldr	r3, [r3, #8]
 8014a24:	683a      	ldr	r2, [r7, #0]
 8014a26:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8014a28:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014a2a:	683a      	ldr	r2, [r7, #0]
 8014a2c:	88d2      	ldrh	r2, [r2, #6]
 8014a2e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	88db      	ldrh	r3, [r3, #6]
 8014a34:	2b07      	cmp	r3, #7
 8014a36:	bf28      	it	cs
 8014a38:	2307      	movcs	r3, #7
 8014a3a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014a3c:	693b      	ldr	r3, [r7, #16]
 8014a3e:	89fa      	ldrh	r2, [r7, #14]
 8014a40:	4619      	mov	r1, r3
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f001 facf 	bl	8015fe6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8014a48:	e085      	b.n	8014b56 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	785a      	ldrb	r2, [r3, #1]
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	88db      	ldrh	r3, [r3, #6]
 8014a58:	b2da      	uxtb	r2, r3
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8014a60:	6939      	ldr	r1, [r7, #16]
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	88db      	ldrh	r3, [r3, #6]
 8014a66:	461a      	mov	r2, r3
 8014a68:	6878      	ldr	r0, [r7, #4]
 8014a6a:	f001 fae8 	bl	801603e <USBD_CtlPrepareRx>
      break;
 8014a6e:	e072      	b.n	8014b56 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a76:	689b      	ldr	r3, [r3, #8]
 8014a78:	683a      	ldr	r2, [r7, #0]
 8014a7a:	7850      	ldrb	r0, [r2, #1]
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	6839      	ldr	r1, [r7, #0]
 8014a80:	4798      	blx	r3
      break;
 8014a82:	e068      	b.n	8014b56 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	785b      	ldrb	r3, [r3, #1]
 8014a88:	2b0b      	cmp	r3, #11
 8014a8a:	d852      	bhi.n	8014b32 <USBD_CDC_Setup+0x162>
 8014a8c:	a201      	add	r2, pc, #4	; (adr r2, 8014a94 <USBD_CDC_Setup+0xc4>)
 8014a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a92:	bf00      	nop
 8014a94:	08014ac5 	.word	0x08014ac5
 8014a98:	08014b41 	.word	0x08014b41
 8014a9c:	08014b33 	.word	0x08014b33
 8014aa0:	08014b33 	.word	0x08014b33
 8014aa4:	08014b33 	.word	0x08014b33
 8014aa8:	08014b33 	.word	0x08014b33
 8014aac:	08014b33 	.word	0x08014b33
 8014ab0:	08014b33 	.word	0x08014b33
 8014ab4:	08014b33 	.word	0x08014b33
 8014ab8:	08014b33 	.word	0x08014b33
 8014abc:	08014aef 	.word	0x08014aef
 8014ac0:	08014b19 	.word	0x08014b19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014aca:	b2db      	uxtb	r3, r3
 8014acc:	2b03      	cmp	r3, #3
 8014ace:	d107      	bne.n	8014ae0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014ad0:	f107 030a 	add.w	r3, r7, #10
 8014ad4:	2202      	movs	r2, #2
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f001 fa84 	bl	8015fe6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014ade:	e032      	b.n	8014b46 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014ae0:	6839      	ldr	r1, [r7, #0]
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f001 fa0e 	bl	8015f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8014ae8:	2303      	movs	r3, #3
 8014aea:	75fb      	strb	r3, [r7, #23]
          break;
 8014aec:	e02b      	b.n	8014b46 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014af4:	b2db      	uxtb	r3, r3
 8014af6:	2b03      	cmp	r3, #3
 8014af8:	d107      	bne.n	8014b0a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014afa:	f107 030d 	add.w	r3, r7, #13
 8014afe:	2201      	movs	r2, #1
 8014b00:	4619      	mov	r1, r3
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f001 fa6f 	bl	8015fe6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014b08:	e01d      	b.n	8014b46 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014b0a:	6839      	ldr	r1, [r7, #0]
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f001 f9f9 	bl	8015f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8014b12:	2303      	movs	r3, #3
 8014b14:	75fb      	strb	r3, [r7, #23]
          break;
 8014b16:	e016      	b.n	8014b46 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b1e:	b2db      	uxtb	r3, r3
 8014b20:	2b03      	cmp	r3, #3
 8014b22:	d00f      	beq.n	8014b44 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8014b24:	6839      	ldr	r1, [r7, #0]
 8014b26:	6878      	ldr	r0, [r7, #4]
 8014b28:	f001 f9ec 	bl	8015f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8014b2c:	2303      	movs	r3, #3
 8014b2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014b30:	e008      	b.n	8014b44 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014b32:	6839      	ldr	r1, [r7, #0]
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f001 f9e5 	bl	8015f04 <USBD_CtlError>
          ret = USBD_FAIL;
 8014b3a:	2303      	movs	r3, #3
 8014b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8014b3e:	e002      	b.n	8014b46 <USBD_CDC_Setup+0x176>
          break;
 8014b40:	bf00      	nop
 8014b42:	e008      	b.n	8014b56 <USBD_CDC_Setup+0x186>
          break;
 8014b44:	bf00      	nop
      }
      break;
 8014b46:	e006      	b.n	8014b56 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8014b48:	6839      	ldr	r1, [r7, #0]
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f001 f9da 	bl	8015f04 <USBD_CtlError>
      ret = USBD_FAIL;
 8014b50:	2303      	movs	r3, #3
 8014b52:	75fb      	strb	r3, [r7, #23]
      break;
 8014b54:	bf00      	nop
  }

  return (uint8_t)ret;
 8014b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b58:	4618      	mov	r0, r3
 8014b5a:	3718      	adds	r7, #24
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}

08014b60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b084      	sub	sp, #16
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
 8014b68:	460b      	mov	r3, r1
 8014b6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014b72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d101      	bne.n	8014b82 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014b7e:	2303      	movs	r3, #3
 8014b80:	e04f      	b.n	8014c22 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014b88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014b8a:	78fa      	ldrb	r2, [r7, #3]
 8014b8c:	6879      	ldr	r1, [r7, #4]
 8014b8e:	4613      	mov	r3, r2
 8014b90:	009b      	lsls	r3, r3, #2
 8014b92:	4413      	add	r3, r2
 8014b94:	009b      	lsls	r3, r3, #2
 8014b96:	440b      	add	r3, r1
 8014b98:	3318      	adds	r3, #24
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d029      	beq.n	8014bf4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014ba0:	78fa      	ldrb	r2, [r7, #3]
 8014ba2:	6879      	ldr	r1, [r7, #4]
 8014ba4:	4613      	mov	r3, r2
 8014ba6:	009b      	lsls	r3, r3, #2
 8014ba8:	4413      	add	r3, r2
 8014baa:	009b      	lsls	r3, r3, #2
 8014bac:	440b      	add	r3, r1
 8014bae:	3318      	adds	r3, #24
 8014bb0:	681a      	ldr	r2, [r3, #0]
 8014bb2:	78f9      	ldrb	r1, [r7, #3]
 8014bb4:	68f8      	ldr	r0, [r7, #12]
 8014bb6:	460b      	mov	r3, r1
 8014bb8:	009b      	lsls	r3, r3, #2
 8014bba:	440b      	add	r3, r1
 8014bbc:	00db      	lsls	r3, r3, #3
 8014bbe:	4403      	add	r3, r0
 8014bc0:	3320      	adds	r3, #32
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	fbb2 f1f3 	udiv	r1, r2, r3
 8014bc8:	fb01 f303 	mul.w	r3, r1, r3
 8014bcc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d110      	bne.n	8014bf4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8014bd2:	78fa      	ldrb	r2, [r7, #3]
 8014bd4:	6879      	ldr	r1, [r7, #4]
 8014bd6:	4613      	mov	r3, r2
 8014bd8:	009b      	lsls	r3, r3, #2
 8014bda:	4413      	add	r3, r2
 8014bdc:	009b      	lsls	r3, r3, #2
 8014bde:	440b      	add	r3, r1
 8014be0:	3318      	adds	r3, #24
 8014be2:	2200      	movs	r2, #0
 8014be4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014be6:	78f9      	ldrb	r1, [r7, #3]
 8014be8:	2300      	movs	r3, #0
 8014bea:	2200      	movs	r2, #0
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f001 feb0 	bl	8016952 <USBD_LL_Transmit>
 8014bf2:	e015      	b.n	8014c20 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c02:	691b      	ldr	r3, [r3, #16]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d00b      	beq.n	8014c20 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c0e:	691b      	ldr	r3, [r3, #16]
 8014c10:	68ba      	ldr	r2, [r7, #8]
 8014c12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014c16:	68ba      	ldr	r2, [r7, #8]
 8014c18:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014c1c:	78fa      	ldrb	r2, [r7, #3]
 8014c1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014c20:	2300      	movs	r3, #0
}
 8014c22:	4618      	mov	r0, r3
 8014c24:	3710      	adds	r7, #16
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bd80      	pop	{r7, pc}

08014c2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014c2a:	b580      	push	{r7, lr}
 8014c2c:	b084      	sub	sp, #16
 8014c2e:	af00      	add	r7, sp, #0
 8014c30:	6078      	str	r0, [r7, #4]
 8014c32:	460b      	mov	r3, r1
 8014c34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d101      	bne.n	8014c4c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014c48:	2303      	movs	r3, #3
 8014c4a:	e015      	b.n	8014c78 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014c4c:	78fb      	ldrb	r3, [r7, #3]
 8014c4e:	4619      	mov	r1, r3
 8014c50:	6878      	ldr	r0, [r7, #4]
 8014c52:	f001 fec0 	bl	80169d6 <USBD_LL_GetRxDataSize>
 8014c56:	4602      	mov	r2, r0
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c64:	68db      	ldr	r3, [r3, #12]
 8014c66:	68fa      	ldr	r2, [r7, #12]
 8014c68:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014c6c:	68fa      	ldr	r2, [r7, #12]
 8014c6e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014c72:	4611      	mov	r1, r2
 8014c74:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014c76:	2300      	movs	r3, #0
}
 8014c78:	4618      	mov	r0, r3
 8014c7a:	3710      	adds	r7, #16
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}

08014c80 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d101      	bne.n	8014c9a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8014c96:	2303      	movs	r3, #3
 8014c98:	e01b      	b.n	8014cd2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d015      	beq.n	8014cd0 <USBD_CDC_EP0_RxReady+0x50>
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014caa:	2bff      	cmp	r3, #255	; 0xff
 8014cac:	d010      	beq.n	8014cd0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014cb4:	689b      	ldr	r3, [r3, #8]
 8014cb6:	68fa      	ldr	r2, [r7, #12]
 8014cb8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8014cbc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8014cbe:	68fa      	ldr	r2, [r7, #12]
 8014cc0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014cc4:	b292      	uxth	r2, r2
 8014cc6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	22ff      	movs	r2, #255	; 0xff
 8014ccc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014cd0:	2300      	movs	r3, #0
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	3710      	adds	r7, #16
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
	...

08014cdc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014cdc:	b480      	push	{r7}
 8014cde:	b083      	sub	sp, #12
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2243      	movs	r2, #67	; 0x43
 8014ce8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8014cea:	4b03      	ldr	r3, [pc, #12]	; (8014cf8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8014cec:	4618      	mov	r0, r3
 8014cee:	370c      	adds	r7, #12
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf6:	4770      	bx	lr
 8014cf8:	200002a4 	.word	0x200002a4

08014cfc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	2243      	movs	r2, #67	; 0x43
 8014d08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8014d0a:	4b03      	ldr	r3, [pc, #12]	; (8014d18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	370c      	adds	r7, #12
 8014d10:	46bd      	mov	sp, r7
 8014d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d16:	4770      	bx	lr
 8014d18:	20000260 	.word	0x20000260

08014d1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	b083      	sub	sp, #12
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2243      	movs	r2, #67	; 0x43
 8014d28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8014d2a:	4b03      	ldr	r3, [pc, #12]	; (8014d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	370c      	adds	r7, #12
 8014d30:	46bd      	mov	sp, r7
 8014d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d36:	4770      	bx	lr
 8014d38:	200002e8 	.word	0x200002e8

08014d3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	220a      	movs	r2, #10
 8014d48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014d4a:	4b03      	ldr	r3, [pc, #12]	; (8014d58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	370c      	adds	r7, #12
 8014d50:	46bd      	mov	sp, r7
 8014d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d56:	4770      	bx	lr
 8014d58:	2000021c 	.word	0x2000021c

08014d5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014d5c:	b480      	push	{r7}
 8014d5e:	b083      	sub	sp, #12
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d101      	bne.n	8014d70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014d6c:	2303      	movs	r3, #3
 8014d6e:	e004      	b.n	8014d7a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	683a      	ldr	r2, [r7, #0]
 8014d74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8014d78:	2300      	movs	r3, #0
}
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	370c      	adds	r7, #12
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d84:	4770      	bx	lr

08014d86 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014d86:	b480      	push	{r7}
 8014d88:	b087      	sub	sp, #28
 8014d8a:	af00      	add	r7, sp, #0
 8014d8c:	60f8      	str	r0, [r7, #12]
 8014d8e:	60b9      	str	r1, [r7, #8]
 8014d90:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d98:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8014d9a:	697b      	ldr	r3, [r7, #20]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d101      	bne.n	8014da4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8014da0:	2303      	movs	r3, #3
 8014da2:	e008      	b.n	8014db6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	68ba      	ldr	r2, [r7, #8]
 8014da8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	687a      	ldr	r2, [r7, #4]
 8014db0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014db4:	2300      	movs	r3, #0
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	371c      	adds	r7, #28
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc0:	4770      	bx	lr

08014dc2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014dc2:	b480      	push	{r7}
 8014dc4:	b085      	sub	sp, #20
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	6078      	str	r0, [r7, #4]
 8014dca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014dd2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d101      	bne.n	8014dde <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8014dda:	2303      	movs	r3, #3
 8014ddc:	e004      	b.n	8014de8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	683a      	ldr	r2, [r7, #0]
 8014de2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014de6:	2300      	movs	r3, #0
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3714      	adds	r7, #20
 8014dec:	46bd      	mov	sp, r7
 8014dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df2:	4770      	bx	lr

08014df4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8014e04:	2301      	movs	r3, #1
 8014e06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d101      	bne.n	8014e16 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014e12:	2303      	movs	r3, #3
 8014e14:	e01a      	b.n	8014e4c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d114      	bne.n	8014e4a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014e20:	68bb      	ldr	r3, [r7, #8]
 8014e22:	2201      	movs	r2, #1
 8014e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014e3e:	2181      	movs	r1, #129	; 0x81
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f001 fd86 	bl	8016952 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014e46:	2300      	movs	r3, #0
 8014e48:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3710      	adds	r7, #16
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b084      	sub	sp, #16
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d101      	bne.n	8014e72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8014e6e:	2303      	movs	r3, #3
 8014e70:	e016      	b.n	8014ea0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	7c1b      	ldrb	r3, [r3, #16]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d109      	bne.n	8014e8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014e84:	2101      	movs	r1, #1
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f001 fd84 	bl	8016994 <USBD_LL_PrepareReceive>
 8014e8c:	e007      	b.n	8014e9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014e94:	2340      	movs	r3, #64	; 0x40
 8014e96:	2101      	movs	r1, #1
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f001 fd7b 	bl	8016994 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014e9e:	2300      	movs	r3, #0
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3710      	adds	r7, #16
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}

08014ea8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b086      	sub	sp, #24
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	4613      	mov	r3, r2
 8014eb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d101      	bne.n	8014ec0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014ebc:	2303      	movs	r3, #3
 8014ebe:	e01f      	b.n	8014f00 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d003      	beq.n	8014ee6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	68ba      	ldr	r2, [r7, #8]
 8014ee2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2201      	movs	r2, #1
 8014eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	79fa      	ldrb	r2, [r7, #7]
 8014ef2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014ef4:	68f8      	ldr	r0, [r7, #12]
 8014ef6:	f001 fbe3 	bl	80166c0 <USBD_LL_Init>
 8014efa:	4603      	mov	r3, r0
 8014efc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f00:	4618      	mov	r0, r3
 8014f02:	3718      	adds	r7, #24
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}

08014f08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b084      	sub	sp, #16
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014f12:	2300      	movs	r3, #0
 8014f14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d101      	bne.n	8014f20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8014f1c:	2303      	movs	r3, #3
 8014f1e:	e016      	b.n	8014f4e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	683a      	ldr	r2, [r7, #0]
 8014f24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d00b      	beq.n	8014f4c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f3c:	f107 020e 	add.w	r2, r7, #14
 8014f40:	4610      	mov	r0, r2
 8014f42:	4798      	blx	r3
 8014f44:	4602      	mov	r2, r0
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8014f4c:	2300      	movs	r3, #0
}
 8014f4e:	4618      	mov	r0, r3
 8014f50:	3710      	adds	r7, #16
 8014f52:	46bd      	mov	sp, r7
 8014f54:	bd80      	pop	{r7, pc}

08014f56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014f56:	b580      	push	{r7, lr}
 8014f58:	b082      	sub	sp, #8
 8014f5a:	af00      	add	r7, sp, #0
 8014f5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014f5e:	6878      	ldr	r0, [r7, #4]
 8014f60:	f001 fc0e 	bl	8016780 <USBD_LL_Start>
 8014f64:	4603      	mov	r3, r0
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	3708      	adds	r7, #8
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}

08014f6e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014f6e:	b480      	push	{r7}
 8014f70:	b083      	sub	sp, #12
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014f76:	2300      	movs	r3, #0
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	370c      	adds	r7, #12
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f82:	4770      	bx	lr

08014f84 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	460b      	mov	r3, r1
 8014f8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014f90:	2303      	movs	r3, #3
 8014f92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d009      	beq.n	8014fb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	78fa      	ldrb	r2, [r7, #3]
 8014fa8:	4611      	mov	r1, r2
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	4798      	blx	r3
 8014fae:	4603      	mov	r3, r0
 8014fb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	3710      	adds	r7, #16
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}

08014fbc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b082      	sub	sp, #8
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
 8014fc4:	460b      	mov	r3, r1
 8014fc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d007      	beq.n	8014fe2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fd8:	685b      	ldr	r3, [r3, #4]
 8014fda:	78fa      	ldrb	r2, [r7, #3]
 8014fdc:	4611      	mov	r1, r2
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	4798      	blx	r3
  }

  return USBD_OK;
 8014fe2:	2300      	movs	r3, #0
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b084      	sub	sp, #16
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014ffc:	6839      	ldr	r1, [r7, #0]
 8014ffe:	4618      	mov	r0, r3
 8015000:	f000 ff46 	bl	8015e90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2201      	movs	r2, #1
 8015008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015012:	461a      	mov	r2, r3
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015020:	f003 031f 	and.w	r3, r3, #31
 8015024:	2b02      	cmp	r3, #2
 8015026:	d01a      	beq.n	801505e <USBD_LL_SetupStage+0x72>
 8015028:	2b02      	cmp	r3, #2
 801502a:	d822      	bhi.n	8015072 <USBD_LL_SetupStage+0x86>
 801502c:	2b00      	cmp	r3, #0
 801502e:	d002      	beq.n	8015036 <USBD_LL_SetupStage+0x4a>
 8015030:	2b01      	cmp	r3, #1
 8015032:	d00a      	beq.n	801504a <USBD_LL_SetupStage+0x5e>
 8015034:	e01d      	b.n	8015072 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801503c:	4619      	mov	r1, r3
 801503e:	6878      	ldr	r0, [r7, #4]
 8015040:	f000 f9ee 	bl	8015420 <USBD_StdDevReq>
 8015044:	4603      	mov	r3, r0
 8015046:	73fb      	strb	r3, [r7, #15]
      break;
 8015048:	e020      	b.n	801508c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015050:	4619      	mov	r1, r3
 8015052:	6878      	ldr	r0, [r7, #4]
 8015054:	f000 fa52 	bl	80154fc <USBD_StdItfReq>
 8015058:	4603      	mov	r3, r0
 801505a:	73fb      	strb	r3, [r7, #15]
      break;
 801505c:	e016      	b.n	801508c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015064:	4619      	mov	r1, r3
 8015066:	6878      	ldr	r0, [r7, #4]
 8015068:	f000 fa91 	bl	801558e <USBD_StdEPReq>
 801506c:	4603      	mov	r3, r0
 801506e:	73fb      	strb	r3, [r7, #15]
      break;
 8015070:	e00c      	b.n	801508c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015078:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801507c:	b2db      	uxtb	r3, r3
 801507e:	4619      	mov	r1, r3
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f001 fbdd 	bl	8016840 <USBD_LL_StallEP>
 8015086:	4603      	mov	r3, r0
 8015088:	73fb      	strb	r3, [r7, #15]
      break;
 801508a:	bf00      	nop
  }

  return ret;
 801508c:	7bfb      	ldrb	r3, [r7, #15]
}
 801508e:	4618      	mov	r0, r3
 8015090:	3710      	adds	r7, #16
 8015092:	46bd      	mov	sp, r7
 8015094:	bd80      	pop	{r7, pc}

08015096 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015096:	b580      	push	{r7, lr}
 8015098:	b086      	sub	sp, #24
 801509a:	af00      	add	r7, sp, #0
 801509c:	60f8      	str	r0, [r7, #12]
 801509e:	460b      	mov	r3, r1
 80150a0:	607a      	str	r2, [r7, #4]
 80150a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80150a4:	7afb      	ldrb	r3, [r7, #11]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d138      	bne.n	801511c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80150b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80150b8:	2b03      	cmp	r3, #3
 80150ba:	d14a      	bne.n	8015152 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	689a      	ldr	r2, [r3, #8]
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	68db      	ldr	r3, [r3, #12]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d913      	bls.n	80150f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	689a      	ldr	r2, [r3, #8]
 80150cc:	693b      	ldr	r3, [r7, #16]
 80150ce:	68db      	ldr	r3, [r3, #12]
 80150d0:	1ad2      	subs	r2, r2, r3
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	68da      	ldr	r2, [r3, #12]
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	689b      	ldr	r3, [r3, #8]
 80150de:	4293      	cmp	r3, r2
 80150e0:	bf28      	it	cs
 80150e2:	4613      	movcs	r3, r2
 80150e4:	461a      	mov	r2, r3
 80150e6:	6879      	ldr	r1, [r7, #4]
 80150e8:	68f8      	ldr	r0, [r7, #12]
 80150ea:	f000 ffc5 	bl	8016078 <USBD_CtlContinueRx>
 80150ee:	e030      	b.n	8015152 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150f6:	b2db      	uxtb	r3, r3
 80150f8:	2b03      	cmp	r3, #3
 80150fa:	d10b      	bne.n	8015114 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015102:	691b      	ldr	r3, [r3, #16]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d005      	beq.n	8015114 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801510e:	691b      	ldr	r3, [r3, #16]
 8015110:	68f8      	ldr	r0, [r7, #12]
 8015112:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015114:	68f8      	ldr	r0, [r7, #12]
 8015116:	f000 ffc0 	bl	801609a <USBD_CtlSendStatus>
 801511a:	e01a      	b.n	8015152 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015122:	b2db      	uxtb	r3, r3
 8015124:	2b03      	cmp	r3, #3
 8015126:	d114      	bne.n	8015152 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801512e:	699b      	ldr	r3, [r3, #24]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d00e      	beq.n	8015152 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801513a:	699b      	ldr	r3, [r3, #24]
 801513c:	7afa      	ldrb	r2, [r7, #11]
 801513e:	4611      	mov	r1, r2
 8015140:	68f8      	ldr	r0, [r7, #12]
 8015142:	4798      	blx	r3
 8015144:	4603      	mov	r3, r0
 8015146:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8015148:	7dfb      	ldrb	r3, [r7, #23]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d001      	beq.n	8015152 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801514e:	7dfb      	ldrb	r3, [r7, #23]
 8015150:	e000      	b.n	8015154 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8015152:	2300      	movs	r3, #0
}
 8015154:	4618      	mov	r0, r3
 8015156:	3718      	adds	r7, #24
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}

0801515c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b086      	sub	sp, #24
 8015160:	af00      	add	r7, sp, #0
 8015162:	60f8      	str	r0, [r7, #12]
 8015164:	460b      	mov	r3, r1
 8015166:	607a      	str	r2, [r7, #4]
 8015168:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801516a:	7afb      	ldrb	r3, [r7, #11]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d16b      	bne.n	8015248 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	3314      	adds	r3, #20
 8015174:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801517c:	2b02      	cmp	r3, #2
 801517e:	d156      	bne.n	801522e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	689a      	ldr	r2, [r3, #8]
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	68db      	ldr	r3, [r3, #12]
 8015188:	429a      	cmp	r2, r3
 801518a:	d914      	bls.n	80151b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	689a      	ldr	r2, [r3, #8]
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	68db      	ldr	r3, [r3, #12]
 8015194:	1ad2      	subs	r2, r2, r3
 8015196:	693b      	ldr	r3, [r7, #16]
 8015198:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801519a:	693b      	ldr	r3, [r7, #16]
 801519c:	689b      	ldr	r3, [r3, #8]
 801519e:	461a      	mov	r2, r3
 80151a0:	6879      	ldr	r1, [r7, #4]
 80151a2:	68f8      	ldr	r0, [r7, #12]
 80151a4:	f000 ff3a 	bl	801601c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151a8:	2300      	movs	r3, #0
 80151aa:	2200      	movs	r2, #0
 80151ac:	2100      	movs	r1, #0
 80151ae:	68f8      	ldr	r0, [r7, #12]
 80151b0:	f001 fbf0 	bl	8016994 <USBD_LL_PrepareReceive>
 80151b4:	e03b      	b.n	801522e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	68da      	ldr	r2, [r3, #12]
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	689b      	ldr	r3, [r3, #8]
 80151be:	429a      	cmp	r2, r3
 80151c0:	d11c      	bne.n	80151fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	685a      	ldr	r2, [r3, #4]
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80151ca:	429a      	cmp	r2, r3
 80151cc:	d316      	bcc.n	80151fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80151ce:	693b      	ldr	r3, [r7, #16]
 80151d0:	685a      	ldr	r2, [r3, #4]
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80151d8:	429a      	cmp	r2, r3
 80151da:	d20f      	bcs.n	80151fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80151dc:	2200      	movs	r2, #0
 80151de:	2100      	movs	r1, #0
 80151e0:	68f8      	ldr	r0, [r7, #12]
 80151e2:	f000 ff1b 	bl	801601c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	2200      	movs	r2, #0
 80151ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151ee:	2300      	movs	r3, #0
 80151f0:	2200      	movs	r2, #0
 80151f2:	2100      	movs	r1, #0
 80151f4:	68f8      	ldr	r0, [r7, #12]
 80151f6:	f001 fbcd 	bl	8016994 <USBD_LL_PrepareReceive>
 80151fa:	e018      	b.n	801522e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015202:	b2db      	uxtb	r3, r3
 8015204:	2b03      	cmp	r3, #3
 8015206:	d10b      	bne.n	8015220 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801520e:	68db      	ldr	r3, [r3, #12]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d005      	beq.n	8015220 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801521a:	68db      	ldr	r3, [r3, #12]
 801521c:	68f8      	ldr	r0, [r7, #12]
 801521e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015220:	2180      	movs	r1, #128	; 0x80
 8015222:	68f8      	ldr	r0, [r7, #12]
 8015224:	f001 fb0c 	bl	8016840 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015228:	68f8      	ldr	r0, [r7, #12]
 801522a:	f000 ff49 	bl	80160c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015234:	2b01      	cmp	r3, #1
 8015236:	d122      	bne.n	801527e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015238:	68f8      	ldr	r0, [r7, #12]
 801523a:	f7ff fe98 	bl	8014f6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2200      	movs	r2, #0
 8015242:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015246:	e01a      	b.n	801527e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801524e:	b2db      	uxtb	r3, r3
 8015250:	2b03      	cmp	r3, #3
 8015252:	d114      	bne.n	801527e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801525a:	695b      	ldr	r3, [r3, #20]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d00e      	beq.n	801527e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015266:	695b      	ldr	r3, [r3, #20]
 8015268:	7afa      	ldrb	r2, [r7, #11]
 801526a:	4611      	mov	r1, r2
 801526c:	68f8      	ldr	r0, [r7, #12]
 801526e:	4798      	blx	r3
 8015270:	4603      	mov	r3, r0
 8015272:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8015274:	7dfb      	ldrb	r3, [r7, #23]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d001      	beq.n	801527e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801527a:	7dfb      	ldrb	r3, [r7, #23]
 801527c:	e000      	b.n	8015280 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801527e:	2300      	movs	r3, #0
}
 8015280:	4618      	mov	r0, r3
 8015282:	3718      	adds	r7, #24
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}

08015288 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	2201      	movs	r2, #1
 8015294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2200      	movs	r2, #0
 801529c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2200      	movs	r2, #0
 80152a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	2200      	movs	r2, #0
 80152aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d101      	bne.n	80152bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80152b8:	2303      	movs	r3, #3
 80152ba:	e02f      	b.n	801531c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d00f      	beq.n	80152e6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152cc:	685b      	ldr	r3, [r3, #4]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d009      	beq.n	80152e6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	687a      	ldr	r2, [r7, #4]
 80152dc:	6852      	ldr	r2, [r2, #4]
 80152de:	b2d2      	uxtb	r2, r2
 80152e0:	4611      	mov	r1, r2
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80152e6:	2340      	movs	r3, #64	; 0x40
 80152e8:	2200      	movs	r2, #0
 80152ea:	2100      	movs	r1, #0
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f001 fa62 	bl	80167b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2201      	movs	r2, #1
 80152f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	2240      	movs	r2, #64	; 0x40
 80152fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015302:	2340      	movs	r3, #64	; 0x40
 8015304:	2200      	movs	r2, #0
 8015306:	2180      	movs	r1, #128	; 0x80
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f001 fa54 	bl	80167b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	2201      	movs	r2, #1
 8015312:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	2240      	movs	r2, #64	; 0x40
 8015318:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801531a:	2300      	movs	r3, #0
}
 801531c:	4618      	mov	r0, r3
 801531e:	3708      	adds	r7, #8
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015324:	b480      	push	{r7}
 8015326:	b083      	sub	sp, #12
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	460b      	mov	r3, r1
 801532e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	78fa      	ldrb	r2, [r7, #3]
 8015334:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015336:	2300      	movs	r3, #0
}
 8015338:	4618      	mov	r0, r3
 801533a:	370c      	adds	r7, #12
 801533c:	46bd      	mov	sp, r7
 801533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015342:	4770      	bx	lr

08015344 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015344:	b480      	push	{r7}
 8015346:	b083      	sub	sp, #12
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015352:	b2da      	uxtb	r2, r3
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	2204      	movs	r2, #4
 801535e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015362:	2300      	movs	r3, #0
}
 8015364:	4618      	mov	r0, r3
 8015366:	370c      	adds	r7, #12
 8015368:	46bd      	mov	sp, r7
 801536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536e:	4770      	bx	lr

08015370 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015370:	b480      	push	{r7}
 8015372:	b083      	sub	sp, #12
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801537e:	b2db      	uxtb	r3, r3
 8015380:	2b04      	cmp	r3, #4
 8015382:	d106      	bne.n	8015392 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801538a:	b2da      	uxtb	r2, r3
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015392:	2300      	movs	r3, #0
}
 8015394:	4618      	mov	r0, r3
 8015396:	370c      	adds	r7, #12
 8015398:	46bd      	mov	sp, r7
 801539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539e:	4770      	bx	lr

080153a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b082      	sub	sp, #8
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d101      	bne.n	80153b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80153b2:	2303      	movs	r3, #3
 80153b4:	e012      	b.n	80153dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153bc:	b2db      	uxtb	r3, r3
 80153be:	2b03      	cmp	r3, #3
 80153c0:	d10b      	bne.n	80153da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153c8:	69db      	ldr	r3, [r3, #28]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d005      	beq.n	80153da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153d4:	69db      	ldr	r3, [r3, #28]
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80153da:	2300      	movs	r3, #0
}
 80153dc:	4618      	mov	r0, r3
 80153de:	3708      	adds	r7, #8
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80153e4:	b480      	push	{r7}
 80153e6:	b087      	sub	sp, #28
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80153f0:	697b      	ldr	r3, [r7, #20]
 80153f2:	781b      	ldrb	r3, [r3, #0]
 80153f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80153f6:	697b      	ldr	r3, [r7, #20]
 80153f8:	3301      	adds	r3, #1
 80153fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80153fc:	697b      	ldr	r3, [r7, #20]
 80153fe:	781b      	ldrb	r3, [r3, #0]
 8015400:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015402:	8a3b      	ldrh	r3, [r7, #16]
 8015404:	021b      	lsls	r3, r3, #8
 8015406:	b21a      	sxth	r2, r3
 8015408:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801540c:	4313      	orrs	r3, r2
 801540e:	b21b      	sxth	r3, r3
 8015410:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015412:	89fb      	ldrh	r3, [r7, #14]
}
 8015414:	4618      	mov	r0, r3
 8015416:	371c      	adds	r7, #28
 8015418:	46bd      	mov	sp, r7
 801541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541e:	4770      	bx	lr

08015420 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
 8015428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801542a:	2300      	movs	r3, #0
 801542c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	781b      	ldrb	r3, [r3, #0]
 8015432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015436:	2b40      	cmp	r3, #64	; 0x40
 8015438:	d005      	beq.n	8015446 <USBD_StdDevReq+0x26>
 801543a:	2b40      	cmp	r3, #64	; 0x40
 801543c:	d853      	bhi.n	80154e6 <USBD_StdDevReq+0xc6>
 801543e:	2b00      	cmp	r3, #0
 8015440:	d00b      	beq.n	801545a <USBD_StdDevReq+0x3a>
 8015442:	2b20      	cmp	r3, #32
 8015444:	d14f      	bne.n	80154e6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801544c:	689b      	ldr	r3, [r3, #8]
 801544e:	6839      	ldr	r1, [r7, #0]
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	4798      	blx	r3
 8015454:	4603      	mov	r3, r0
 8015456:	73fb      	strb	r3, [r7, #15]
      break;
 8015458:	e04a      	b.n	80154f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	785b      	ldrb	r3, [r3, #1]
 801545e:	2b09      	cmp	r3, #9
 8015460:	d83b      	bhi.n	80154da <USBD_StdDevReq+0xba>
 8015462:	a201      	add	r2, pc, #4	; (adr r2, 8015468 <USBD_StdDevReq+0x48>)
 8015464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015468:	080154bd 	.word	0x080154bd
 801546c:	080154d1 	.word	0x080154d1
 8015470:	080154db 	.word	0x080154db
 8015474:	080154c7 	.word	0x080154c7
 8015478:	080154db 	.word	0x080154db
 801547c:	0801549b 	.word	0x0801549b
 8015480:	08015491 	.word	0x08015491
 8015484:	080154db 	.word	0x080154db
 8015488:	080154b3 	.word	0x080154b3
 801548c:	080154a5 	.word	0x080154a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015490:	6839      	ldr	r1, [r7, #0]
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f000 f9de 	bl	8015854 <USBD_GetDescriptor>
          break;
 8015498:	e024      	b.n	80154e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801549a:	6839      	ldr	r1, [r7, #0]
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f000 fb6d 	bl	8015b7c <USBD_SetAddress>
          break;
 80154a2:	e01f      	b.n	80154e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80154a4:	6839      	ldr	r1, [r7, #0]
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f000 fbac 	bl	8015c04 <USBD_SetConfig>
 80154ac:	4603      	mov	r3, r0
 80154ae:	73fb      	strb	r3, [r7, #15]
          break;
 80154b0:	e018      	b.n	80154e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80154b2:	6839      	ldr	r1, [r7, #0]
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f000 fc4b 	bl	8015d50 <USBD_GetConfig>
          break;
 80154ba:	e013      	b.n	80154e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80154bc:	6839      	ldr	r1, [r7, #0]
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f000 fc7c 	bl	8015dbc <USBD_GetStatus>
          break;
 80154c4:	e00e      	b.n	80154e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80154c6:	6839      	ldr	r1, [r7, #0]
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f000 fcab 	bl	8015e24 <USBD_SetFeature>
          break;
 80154ce:	e009      	b.n	80154e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80154d0:	6839      	ldr	r1, [r7, #0]
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f000 fcba 	bl	8015e4c <USBD_ClrFeature>
          break;
 80154d8:	e004      	b.n	80154e4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80154da:	6839      	ldr	r1, [r7, #0]
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f000 fd11 	bl	8015f04 <USBD_CtlError>
          break;
 80154e2:	bf00      	nop
      }
      break;
 80154e4:	e004      	b.n	80154f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80154e6:	6839      	ldr	r1, [r7, #0]
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	f000 fd0b 	bl	8015f04 <USBD_CtlError>
      break;
 80154ee:	bf00      	nop
  }

  return ret;
 80154f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3710      	adds	r7, #16
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
 80154fa:	bf00      	nop

080154fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b084      	sub	sp, #16
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015506:	2300      	movs	r3, #0
 8015508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	781b      	ldrb	r3, [r3, #0]
 801550e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015512:	2b40      	cmp	r3, #64	; 0x40
 8015514:	d005      	beq.n	8015522 <USBD_StdItfReq+0x26>
 8015516:	2b40      	cmp	r3, #64	; 0x40
 8015518:	d82f      	bhi.n	801557a <USBD_StdItfReq+0x7e>
 801551a:	2b00      	cmp	r3, #0
 801551c:	d001      	beq.n	8015522 <USBD_StdItfReq+0x26>
 801551e:	2b20      	cmp	r3, #32
 8015520:	d12b      	bne.n	801557a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015528:	b2db      	uxtb	r3, r3
 801552a:	3b01      	subs	r3, #1
 801552c:	2b02      	cmp	r3, #2
 801552e:	d81d      	bhi.n	801556c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	889b      	ldrh	r3, [r3, #4]
 8015534:	b2db      	uxtb	r3, r3
 8015536:	2b01      	cmp	r3, #1
 8015538:	d813      	bhi.n	8015562 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015540:	689b      	ldr	r3, [r3, #8]
 8015542:	6839      	ldr	r1, [r7, #0]
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	4798      	blx	r3
 8015548:	4603      	mov	r3, r0
 801554a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	88db      	ldrh	r3, [r3, #6]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d110      	bne.n	8015576 <USBD_StdItfReq+0x7a>
 8015554:	7bfb      	ldrb	r3, [r7, #15]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d10d      	bne.n	8015576 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f000 fd9d 	bl	801609a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015560:	e009      	b.n	8015576 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8015562:	6839      	ldr	r1, [r7, #0]
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f000 fccd 	bl	8015f04 <USBD_CtlError>
          break;
 801556a:	e004      	b.n	8015576 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801556c:	6839      	ldr	r1, [r7, #0]
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f000 fcc8 	bl	8015f04 <USBD_CtlError>
          break;
 8015574:	e000      	b.n	8015578 <USBD_StdItfReq+0x7c>
          break;
 8015576:	bf00      	nop
      }
      break;
 8015578:	e004      	b.n	8015584 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801557a:	6839      	ldr	r1, [r7, #0]
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f000 fcc1 	bl	8015f04 <USBD_CtlError>
      break;
 8015582:	bf00      	nop
  }

  return ret;
 8015584:	7bfb      	ldrb	r3, [r7, #15]
}
 8015586:	4618      	mov	r0, r3
 8015588:	3710      	adds	r7, #16
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}

0801558e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801558e:	b580      	push	{r7, lr}
 8015590:	b084      	sub	sp, #16
 8015592:	af00      	add	r7, sp, #0
 8015594:	6078      	str	r0, [r7, #4]
 8015596:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015598:	2300      	movs	r3, #0
 801559a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	889b      	ldrh	r3, [r3, #4]
 80155a0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	781b      	ldrb	r3, [r3, #0]
 80155a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80155aa:	2b40      	cmp	r3, #64	; 0x40
 80155ac:	d007      	beq.n	80155be <USBD_StdEPReq+0x30>
 80155ae:	2b40      	cmp	r3, #64	; 0x40
 80155b0:	f200 8145 	bhi.w	801583e <USBD_StdEPReq+0x2b0>
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d00c      	beq.n	80155d2 <USBD_StdEPReq+0x44>
 80155b8:	2b20      	cmp	r3, #32
 80155ba:	f040 8140 	bne.w	801583e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155c4:	689b      	ldr	r3, [r3, #8]
 80155c6:	6839      	ldr	r1, [r7, #0]
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	4798      	blx	r3
 80155cc:	4603      	mov	r3, r0
 80155ce:	73fb      	strb	r3, [r7, #15]
      break;
 80155d0:	e13a      	b.n	8015848 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80155d2:	683b      	ldr	r3, [r7, #0]
 80155d4:	785b      	ldrb	r3, [r3, #1]
 80155d6:	2b03      	cmp	r3, #3
 80155d8:	d007      	beq.n	80155ea <USBD_StdEPReq+0x5c>
 80155da:	2b03      	cmp	r3, #3
 80155dc:	f300 8129 	bgt.w	8015832 <USBD_StdEPReq+0x2a4>
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d07f      	beq.n	80156e4 <USBD_StdEPReq+0x156>
 80155e4:	2b01      	cmp	r3, #1
 80155e6:	d03c      	beq.n	8015662 <USBD_StdEPReq+0xd4>
 80155e8:	e123      	b.n	8015832 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155f0:	b2db      	uxtb	r3, r3
 80155f2:	2b02      	cmp	r3, #2
 80155f4:	d002      	beq.n	80155fc <USBD_StdEPReq+0x6e>
 80155f6:	2b03      	cmp	r3, #3
 80155f8:	d016      	beq.n	8015628 <USBD_StdEPReq+0x9a>
 80155fa:	e02c      	b.n	8015656 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80155fc:	7bbb      	ldrb	r3, [r7, #14]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d00d      	beq.n	801561e <USBD_StdEPReq+0x90>
 8015602:	7bbb      	ldrb	r3, [r7, #14]
 8015604:	2b80      	cmp	r3, #128	; 0x80
 8015606:	d00a      	beq.n	801561e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015608:	7bbb      	ldrb	r3, [r7, #14]
 801560a:	4619      	mov	r1, r3
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	f001 f917 	bl	8016840 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015612:	2180      	movs	r1, #128	; 0x80
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f001 f913 	bl	8016840 <USBD_LL_StallEP>
 801561a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801561c:	e020      	b.n	8015660 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801561e:	6839      	ldr	r1, [r7, #0]
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f000 fc6f 	bl	8015f04 <USBD_CtlError>
              break;
 8015626:	e01b      	b.n	8015660 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	885b      	ldrh	r3, [r3, #2]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d10e      	bne.n	801564e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015630:	7bbb      	ldrb	r3, [r7, #14]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d00b      	beq.n	801564e <USBD_StdEPReq+0xc0>
 8015636:	7bbb      	ldrb	r3, [r7, #14]
 8015638:	2b80      	cmp	r3, #128	; 0x80
 801563a:	d008      	beq.n	801564e <USBD_StdEPReq+0xc0>
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	88db      	ldrh	r3, [r3, #6]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d104      	bne.n	801564e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015644:	7bbb      	ldrb	r3, [r7, #14]
 8015646:	4619      	mov	r1, r3
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f001 f8f9 	bl	8016840 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f000 fd23 	bl	801609a <USBD_CtlSendStatus>

              break;
 8015654:	e004      	b.n	8015660 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8015656:	6839      	ldr	r1, [r7, #0]
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f000 fc53 	bl	8015f04 <USBD_CtlError>
              break;
 801565e:	bf00      	nop
          }
          break;
 8015660:	e0ec      	b.n	801583c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015668:	b2db      	uxtb	r3, r3
 801566a:	2b02      	cmp	r3, #2
 801566c:	d002      	beq.n	8015674 <USBD_StdEPReq+0xe6>
 801566e:	2b03      	cmp	r3, #3
 8015670:	d016      	beq.n	80156a0 <USBD_StdEPReq+0x112>
 8015672:	e030      	b.n	80156d6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015674:	7bbb      	ldrb	r3, [r7, #14]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d00d      	beq.n	8015696 <USBD_StdEPReq+0x108>
 801567a:	7bbb      	ldrb	r3, [r7, #14]
 801567c:	2b80      	cmp	r3, #128	; 0x80
 801567e:	d00a      	beq.n	8015696 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015680:	7bbb      	ldrb	r3, [r7, #14]
 8015682:	4619      	mov	r1, r3
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f001 f8db 	bl	8016840 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801568a:	2180      	movs	r1, #128	; 0x80
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f001 f8d7 	bl	8016840 <USBD_LL_StallEP>
 8015692:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015694:	e025      	b.n	80156e2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8015696:	6839      	ldr	r1, [r7, #0]
 8015698:	6878      	ldr	r0, [r7, #4]
 801569a:	f000 fc33 	bl	8015f04 <USBD_CtlError>
              break;
 801569e:	e020      	b.n	80156e2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	885b      	ldrh	r3, [r3, #2]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d11b      	bne.n	80156e0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80156a8:	7bbb      	ldrb	r3, [r7, #14]
 80156aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d004      	beq.n	80156bc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80156b2:	7bbb      	ldrb	r3, [r7, #14]
 80156b4:	4619      	mov	r1, r3
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	f001 f8e1 	bl	801687e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f000 fcec 	bl	801609a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156c8:	689b      	ldr	r3, [r3, #8]
 80156ca:	6839      	ldr	r1, [r7, #0]
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	4798      	blx	r3
 80156d0:	4603      	mov	r3, r0
 80156d2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80156d4:	e004      	b.n	80156e0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80156d6:	6839      	ldr	r1, [r7, #0]
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f000 fc13 	bl	8015f04 <USBD_CtlError>
              break;
 80156de:	e000      	b.n	80156e2 <USBD_StdEPReq+0x154>
              break;
 80156e0:	bf00      	nop
          }
          break;
 80156e2:	e0ab      	b.n	801583c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156ea:	b2db      	uxtb	r3, r3
 80156ec:	2b02      	cmp	r3, #2
 80156ee:	d002      	beq.n	80156f6 <USBD_StdEPReq+0x168>
 80156f0:	2b03      	cmp	r3, #3
 80156f2:	d032      	beq.n	801575a <USBD_StdEPReq+0x1cc>
 80156f4:	e097      	b.n	8015826 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80156f6:	7bbb      	ldrb	r3, [r7, #14]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d007      	beq.n	801570c <USBD_StdEPReq+0x17e>
 80156fc:	7bbb      	ldrb	r3, [r7, #14]
 80156fe:	2b80      	cmp	r3, #128	; 0x80
 8015700:	d004      	beq.n	801570c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8015702:	6839      	ldr	r1, [r7, #0]
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f000 fbfd 	bl	8015f04 <USBD_CtlError>
                break;
 801570a:	e091      	b.n	8015830 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801570c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015710:	2b00      	cmp	r3, #0
 8015712:	da0b      	bge.n	801572c <USBD_StdEPReq+0x19e>
 8015714:	7bbb      	ldrb	r3, [r7, #14]
 8015716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801571a:	4613      	mov	r3, r2
 801571c:	009b      	lsls	r3, r3, #2
 801571e:	4413      	add	r3, r2
 8015720:	009b      	lsls	r3, r3, #2
 8015722:	3310      	adds	r3, #16
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	4413      	add	r3, r2
 8015728:	3304      	adds	r3, #4
 801572a:	e00b      	b.n	8015744 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801572c:	7bbb      	ldrb	r3, [r7, #14]
 801572e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015732:	4613      	mov	r3, r2
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	4413      	add	r3, r2
 8015738:	009b      	lsls	r3, r3, #2
 801573a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801573e:	687a      	ldr	r2, [r7, #4]
 8015740:	4413      	add	r3, r2
 8015742:	3304      	adds	r3, #4
 8015744:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	2200      	movs	r2, #0
 801574a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	2202      	movs	r2, #2
 8015750:	4619      	mov	r1, r3
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	f000 fc47 	bl	8015fe6 <USBD_CtlSendData>
              break;
 8015758:	e06a      	b.n	8015830 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801575a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801575e:	2b00      	cmp	r3, #0
 8015760:	da11      	bge.n	8015786 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015762:	7bbb      	ldrb	r3, [r7, #14]
 8015764:	f003 020f 	and.w	r2, r3, #15
 8015768:	6879      	ldr	r1, [r7, #4]
 801576a:	4613      	mov	r3, r2
 801576c:	009b      	lsls	r3, r3, #2
 801576e:	4413      	add	r3, r2
 8015770:	009b      	lsls	r3, r3, #2
 8015772:	440b      	add	r3, r1
 8015774:	3324      	adds	r3, #36	; 0x24
 8015776:	881b      	ldrh	r3, [r3, #0]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d117      	bne.n	80157ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801577c:	6839      	ldr	r1, [r7, #0]
 801577e:	6878      	ldr	r0, [r7, #4]
 8015780:	f000 fbc0 	bl	8015f04 <USBD_CtlError>
                  break;
 8015784:	e054      	b.n	8015830 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015786:	7bbb      	ldrb	r3, [r7, #14]
 8015788:	f003 020f 	and.w	r2, r3, #15
 801578c:	6879      	ldr	r1, [r7, #4]
 801578e:	4613      	mov	r3, r2
 8015790:	009b      	lsls	r3, r3, #2
 8015792:	4413      	add	r3, r2
 8015794:	009b      	lsls	r3, r3, #2
 8015796:	440b      	add	r3, r1
 8015798:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801579c:	881b      	ldrh	r3, [r3, #0]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d104      	bne.n	80157ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80157a2:	6839      	ldr	r1, [r7, #0]
 80157a4:	6878      	ldr	r0, [r7, #4]
 80157a6:	f000 fbad 	bl	8015f04 <USBD_CtlError>
                  break;
 80157aa:	e041      	b.n	8015830 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80157ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	da0b      	bge.n	80157cc <USBD_StdEPReq+0x23e>
 80157b4:	7bbb      	ldrb	r3, [r7, #14]
 80157b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80157ba:	4613      	mov	r3, r2
 80157bc:	009b      	lsls	r3, r3, #2
 80157be:	4413      	add	r3, r2
 80157c0:	009b      	lsls	r3, r3, #2
 80157c2:	3310      	adds	r3, #16
 80157c4:	687a      	ldr	r2, [r7, #4]
 80157c6:	4413      	add	r3, r2
 80157c8:	3304      	adds	r3, #4
 80157ca:	e00b      	b.n	80157e4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80157cc:	7bbb      	ldrb	r3, [r7, #14]
 80157ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80157d2:	4613      	mov	r3, r2
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	4413      	add	r3, r2
 80157d8:	009b      	lsls	r3, r3, #2
 80157da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80157de:	687a      	ldr	r2, [r7, #4]
 80157e0:	4413      	add	r3, r2
 80157e2:	3304      	adds	r3, #4
 80157e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80157e6:	7bbb      	ldrb	r3, [r7, #14]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d002      	beq.n	80157f2 <USBD_StdEPReq+0x264>
 80157ec:	7bbb      	ldrb	r3, [r7, #14]
 80157ee:	2b80      	cmp	r3, #128	; 0x80
 80157f0:	d103      	bne.n	80157fa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	2200      	movs	r2, #0
 80157f6:	601a      	str	r2, [r3, #0]
 80157f8:	e00e      	b.n	8015818 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80157fa:	7bbb      	ldrb	r3, [r7, #14]
 80157fc:	4619      	mov	r1, r3
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f001 f85c 	bl	80168bc <USBD_LL_IsStallEP>
 8015804:	4603      	mov	r3, r0
 8015806:	2b00      	cmp	r3, #0
 8015808:	d003      	beq.n	8015812 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	2201      	movs	r2, #1
 801580e:	601a      	str	r2, [r3, #0]
 8015810:	e002      	b.n	8015818 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	2200      	movs	r2, #0
 8015816:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	2202      	movs	r2, #2
 801581c:	4619      	mov	r1, r3
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f000 fbe1 	bl	8015fe6 <USBD_CtlSendData>
              break;
 8015824:	e004      	b.n	8015830 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8015826:	6839      	ldr	r1, [r7, #0]
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f000 fb6b 	bl	8015f04 <USBD_CtlError>
              break;
 801582e:	bf00      	nop
          }
          break;
 8015830:	e004      	b.n	801583c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8015832:	6839      	ldr	r1, [r7, #0]
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f000 fb65 	bl	8015f04 <USBD_CtlError>
          break;
 801583a:	bf00      	nop
      }
      break;
 801583c:	e004      	b.n	8015848 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801583e:	6839      	ldr	r1, [r7, #0]
 8015840:	6878      	ldr	r0, [r7, #4]
 8015842:	f000 fb5f 	bl	8015f04 <USBD_CtlError>
      break;
 8015846:	bf00      	nop
  }

  return ret;
 8015848:	7bfb      	ldrb	r3, [r7, #15]
}
 801584a:	4618      	mov	r0, r3
 801584c:	3710      	adds	r7, #16
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}
	...

08015854 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b084      	sub	sp, #16
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801585e:	2300      	movs	r3, #0
 8015860:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015862:	2300      	movs	r3, #0
 8015864:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015866:	2300      	movs	r3, #0
 8015868:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	885b      	ldrh	r3, [r3, #2]
 801586e:	0a1b      	lsrs	r3, r3, #8
 8015870:	b29b      	uxth	r3, r3
 8015872:	3b01      	subs	r3, #1
 8015874:	2b0e      	cmp	r3, #14
 8015876:	f200 8152 	bhi.w	8015b1e <USBD_GetDescriptor+0x2ca>
 801587a:	a201      	add	r2, pc, #4	; (adr r2, 8015880 <USBD_GetDescriptor+0x2c>)
 801587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015880:	080158f1 	.word	0x080158f1
 8015884:	08015909 	.word	0x08015909
 8015888:	08015949 	.word	0x08015949
 801588c:	08015b1f 	.word	0x08015b1f
 8015890:	08015b1f 	.word	0x08015b1f
 8015894:	08015abf 	.word	0x08015abf
 8015898:	08015aeb 	.word	0x08015aeb
 801589c:	08015b1f 	.word	0x08015b1f
 80158a0:	08015b1f 	.word	0x08015b1f
 80158a4:	08015b1f 	.word	0x08015b1f
 80158a8:	08015b1f 	.word	0x08015b1f
 80158ac:	08015b1f 	.word	0x08015b1f
 80158b0:	08015b1f 	.word	0x08015b1f
 80158b4:	08015b1f 	.word	0x08015b1f
 80158b8:	080158bd 	.word	0x080158bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158c2:	69db      	ldr	r3, [r3, #28]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d00b      	beq.n	80158e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158ce:	69db      	ldr	r3, [r3, #28]
 80158d0:	687a      	ldr	r2, [r7, #4]
 80158d2:	7c12      	ldrb	r2, [r2, #16]
 80158d4:	f107 0108 	add.w	r1, r7, #8
 80158d8:	4610      	mov	r0, r2
 80158da:	4798      	blx	r3
 80158dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80158de:	e126      	b.n	8015b2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80158e0:	6839      	ldr	r1, [r7, #0]
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f000 fb0e 	bl	8015f04 <USBD_CtlError>
        err++;
 80158e8:	7afb      	ldrb	r3, [r7, #11]
 80158ea:	3301      	adds	r3, #1
 80158ec:	72fb      	strb	r3, [r7, #11]
      break;
 80158ee:	e11e      	b.n	8015b2e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	687a      	ldr	r2, [r7, #4]
 80158fa:	7c12      	ldrb	r2, [r2, #16]
 80158fc:	f107 0108 	add.w	r1, r7, #8
 8015900:	4610      	mov	r0, r2
 8015902:	4798      	blx	r3
 8015904:	60f8      	str	r0, [r7, #12]
      break;
 8015906:	e112      	b.n	8015b2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	7c1b      	ldrb	r3, [r3, #16]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d10d      	bne.n	801592c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015918:	f107 0208 	add.w	r2, r7, #8
 801591c:	4610      	mov	r0, r2
 801591e:	4798      	blx	r3
 8015920:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	3301      	adds	r3, #1
 8015926:	2202      	movs	r2, #2
 8015928:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801592a:	e100      	b.n	8015b2e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015934:	f107 0208 	add.w	r2, r7, #8
 8015938:	4610      	mov	r0, r2
 801593a:	4798      	blx	r3
 801593c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	3301      	adds	r3, #1
 8015942:	2202      	movs	r2, #2
 8015944:	701a      	strb	r2, [r3, #0]
      break;
 8015946:	e0f2      	b.n	8015b2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	885b      	ldrh	r3, [r3, #2]
 801594c:	b2db      	uxtb	r3, r3
 801594e:	2b05      	cmp	r3, #5
 8015950:	f200 80ac 	bhi.w	8015aac <USBD_GetDescriptor+0x258>
 8015954:	a201      	add	r2, pc, #4	; (adr r2, 801595c <USBD_GetDescriptor+0x108>)
 8015956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801595a:	bf00      	nop
 801595c:	08015975 	.word	0x08015975
 8015960:	080159a9 	.word	0x080159a9
 8015964:	080159dd 	.word	0x080159dd
 8015968:	08015a11 	.word	0x08015a11
 801596c:	08015a45 	.word	0x08015a45
 8015970:	08015a79 	.word	0x08015a79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801597a:	685b      	ldr	r3, [r3, #4]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d00b      	beq.n	8015998 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015986:	685b      	ldr	r3, [r3, #4]
 8015988:	687a      	ldr	r2, [r7, #4]
 801598a:	7c12      	ldrb	r2, [r2, #16]
 801598c:	f107 0108 	add.w	r1, r7, #8
 8015990:	4610      	mov	r0, r2
 8015992:	4798      	blx	r3
 8015994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015996:	e091      	b.n	8015abc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015998:	6839      	ldr	r1, [r7, #0]
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	f000 fab2 	bl	8015f04 <USBD_CtlError>
            err++;
 80159a0:	7afb      	ldrb	r3, [r7, #11]
 80159a2:	3301      	adds	r3, #1
 80159a4:	72fb      	strb	r3, [r7, #11]
          break;
 80159a6:	e089      	b.n	8015abc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159ae:	689b      	ldr	r3, [r3, #8]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d00b      	beq.n	80159cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159ba:	689b      	ldr	r3, [r3, #8]
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	7c12      	ldrb	r2, [r2, #16]
 80159c0:	f107 0108 	add.w	r1, r7, #8
 80159c4:	4610      	mov	r0, r2
 80159c6:	4798      	blx	r3
 80159c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159ca:	e077      	b.n	8015abc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80159cc:	6839      	ldr	r1, [r7, #0]
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f000 fa98 	bl	8015f04 <USBD_CtlError>
            err++;
 80159d4:	7afb      	ldrb	r3, [r7, #11]
 80159d6:	3301      	adds	r3, #1
 80159d8:	72fb      	strb	r3, [r7, #11]
          break;
 80159da:	e06f      	b.n	8015abc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159e2:	68db      	ldr	r3, [r3, #12]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d00b      	beq.n	8015a00 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	687a      	ldr	r2, [r7, #4]
 80159f2:	7c12      	ldrb	r2, [r2, #16]
 80159f4:	f107 0108 	add.w	r1, r7, #8
 80159f8:	4610      	mov	r0, r2
 80159fa:	4798      	blx	r3
 80159fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159fe:	e05d      	b.n	8015abc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015a00:	6839      	ldr	r1, [r7, #0]
 8015a02:	6878      	ldr	r0, [r7, #4]
 8015a04:	f000 fa7e 	bl	8015f04 <USBD_CtlError>
            err++;
 8015a08:	7afb      	ldrb	r3, [r7, #11]
 8015a0a:	3301      	adds	r3, #1
 8015a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8015a0e:	e055      	b.n	8015abc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a16:	691b      	ldr	r3, [r3, #16]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d00b      	beq.n	8015a34 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a22:	691b      	ldr	r3, [r3, #16]
 8015a24:	687a      	ldr	r2, [r7, #4]
 8015a26:	7c12      	ldrb	r2, [r2, #16]
 8015a28:	f107 0108 	add.w	r1, r7, #8
 8015a2c:	4610      	mov	r0, r2
 8015a2e:	4798      	blx	r3
 8015a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a32:	e043      	b.n	8015abc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015a34:	6839      	ldr	r1, [r7, #0]
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f000 fa64 	bl	8015f04 <USBD_CtlError>
            err++;
 8015a3c:	7afb      	ldrb	r3, [r7, #11]
 8015a3e:	3301      	adds	r3, #1
 8015a40:	72fb      	strb	r3, [r7, #11]
          break;
 8015a42:	e03b      	b.n	8015abc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a4a:	695b      	ldr	r3, [r3, #20]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d00b      	beq.n	8015a68 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a56:	695b      	ldr	r3, [r3, #20]
 8015a58:	687a      	ldr	r2, [r7, #4]
 8015a5a:	7c12      	ldrb	r2, [r2, #16]
 8015a5c:	f107 0108 	add.w	r1, r7, #8
 8015a60:	4610      	mov	r0, r2
 8015a62:	4798      	blx	r3
 8015a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a66:	e029      	b.n	8015abc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015a68:	6839      	ldr	r1, [r7, #0]
 8015a6a:	6878      	ldr	r0, [r7, #4]
 8015a6c:	f000 fa4a 	bl	8015f04 <USBD_CtlError>
            err++;
 8015a70:	7afb      	ldrb	r3, [r7, #11]
 8015a72:	3301      	adds	r3, #1
 8015a74:	72fb      	strb	r3, [r7, #11]
          break;
 8015a76:	e021      	b.n	8015abc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a7e:	699b      	ldr	r3, [r3, #24]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d00b      	beq.n	8015a9c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a8a:	699b      	ldr	r3, [r3, #24]
 8015a8c:	687a      	ldr	r2, [r7, #4]
 8015a8e:	7c12      	ldrb	r2, [r2, #16]
 8015a90:	f107 0108 	add.w	r1, r7, #8
 8015a94:	4610      	mov	r0, r2
 8015a96:	4798      	blx	r3
 8015a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a9a:	e00f      	b.n	8015abc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015a9c:	6839      	ldr	r1, [r7, #0]
 8015a9e:	6878      	ldr	r0, [r7, #4]
 8015aa0:	f000 fa30 	bl	8015f04 <USBD_CtlError>
            err++;
 8015aa4:	7afb      	ldrb	r3, [r7, #11]
 8015aa6:	3301      	adds	r3, #1
 8015aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8015aaa:	e007      	b.n	8015abc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015aac:	6839      	ldr	r1, [r7, #0]
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f000 fa28 	bl	8015f04 <USBD_CtlError>
          err++;
 8015ab4:	7afb      	ldrb	r3, [r7, #11]
 8015ab6:	3301      	adds	r3, #1
 8015ab8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8015aba:	bf00      	nop
      }
      break;
 8015abc:	e037      	b.n	8015b2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	7c1b      	ldrb	r3, [r3, #16]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d109      	bne.n	8015ada <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ace:	f107 0208 	add.w	r2, r7, #8
 8015ad2:	4610      	mov	r0, r2
 8015ad4:	4798      	blx	r3
 8015ad6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015ad8:	e029      	b.n	8015b2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015ada:	6839      	ldr	r1, [r7, #0]
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f000 fa11 	bl	8015f04 <USBD_CtlError>
        err++;
 8015ae2:	7afb      	ldrb	r3, [r7, #11]
 8015ae4:	3301      	adds	r3, #1
 8015ae6:	72fb      	strb	r3, [r7, #11]
      break;
 8015ae8:	e021      	b.n	8015b2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	7c1b      	ldrb	r3, [r3, #16]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d10d      	bne.n	8015b0e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015afa:	f107 0208 	add.w	r2, r7, #8
 8015afe:	4610      	mov	r0, r2
 8015b00:	4798      	blx	r3
 8015b02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	3301      	adds	r3, #1
 8015b08:	2207      	movs	r2, #7
 8015b0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015b0c:	e00f      	b.n	8015b2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015b0e:	6839      	ldr	r1, [r7, #0]
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f000 f9f7 	bl	8015f04 <USBD_CtlError>
        err++;
 8015b16:	7afb      	ldrb	r3, [r7, #11]
 8015b18:	3301      	adds	r3, #1
 8015b1a:	72fb      	strb	r3, [r7, #11]
      break;
 8015b1c:	e007      	b.n	8015b2e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015b1e:	6839      	ldr	r1, [r7, #0]
 8015b20:	6878      	ldr	r0, [r7, #4]
 8015b22:	f000 f9ef 	bl	8015f04 <USBD_CtlError>
      err++;
 8015b26:	7afb      	ldrb	r3, [r7, #11]
 8015b28:	3301      	adds	r3, #1
 8015b2a:	72fb      	strb	r3, [r7, #11]
      break;
 8015b2c:	bf00      	nop
  }

  if (err != 0U)
 8015b2e:	7afb      	ldrb	r3, [r7, #11]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d11e      	bne.n	8015b72 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015b34:	683b      	ldr	r3, [r7, #0]
 8015b36:	88db      	ldrh	r3, [r3, #6]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d016      	beq.n	8015b6a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015b3c:	893b      	ldrh	r3, [r7, #8]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d00e      	beq.n	8015b60 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015b42:	683b      	ldr	r3, [r7, #0]
 8015b44:	88da      	ldrh	r2, [r3, #6]
 8015b46:	893b      	ldrh	r3, [r7, #8]
 8015b48:	4293      	cmp	r3, r2
 8015b4a:	bf28      	it	cs
 8015b4c:	4613      	movcs	r3, r2
 8015b4e:	b29b      	uxth	r3, r3
 8015b50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015b52:	893b      	ldrh	r3, [r7, #8]
 8015b54:	461a      	mov	r2, r3
 8015b56:	68f9      	ldr	r1, [r7, #12]
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f000 fa44 	bl	8015fe6 <USBD_CtlSendData>
 8015b5e:	e009      	b.n	8015b74 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015b60:	6839      	ldr	r1, [r7, #0]
 8015b62:	6878      	ldr	r0, [r7, #4]
 8015b64:	f000 f9ce 	bl	8015f04 <USBD_CtlError>
 8015b68:	e004      	b.n	8015b74 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f000 fa95 	bl	801609a <USBD_CtlSendStatus>
 8015b70:	e000      	b.n	8015b74 <USBD_GetDescriptor+0x320>
    return;
 8015b72:	bf00      	nop
  }
}
 8015b74:	3710      	adds	r7, #16
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}
 8015b7a:	bf00      	nop

08015b7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b084      	sub	sp, #16
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
 8015b84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	889b      	ldrh	r3, [r3, #4]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d131      	bne.n	8015bf2 <USBD_SetAddress+0x76>
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	88db      	ldrh	r3, [r3, #6]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d12d      	bne.n	8015bf2 <USBD_SetAddress+0x76>
 8015b96:	683b      	ldr	r3, [r7, #0]
 8015b98:	885b      	ldrh	r3, [r3, #2]
 8015b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8015b9c:	d829      	bhi.n	8015bf2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	885b      	ldrh	r3, [r3, #2]
 8015ba2:	b2db      	uxtb	r3, r3
 8015ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ba8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bb0:	b2db      	uxtb	r3, r3
 8015bb2:	2b03      	cmp	r3, #3
 8015bb4:	d104      	bne.n	8015bc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015bb6:	6839      	ldr	r1, [r7, #0]
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	f000 f9a3 	bl	8015f04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bbe:	e01d      	b.n	8015bfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	7bfa      	ldrb	r2, [r7, #15]
 8015bc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015bc8:	7bfb      	ldrb	r3, [r7, #15]
 8015bca:	4619      	mov	r1, r3
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f000 fea1 	bl	8016914 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015bd2:	6878      	ldr	r0, [r7, #4]
 8015bd4:	f000 fa61 	bl	801609a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015bd8:	7bfb      	ldrb	r3, [r7, #15]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d004      	beq.n	8015be8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2202      	movs	r2, #2
 8015be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015be6:	e009      	b.n	8015bfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2201      	movs	r2, #1
 8015bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bf0:	e004      	b.n	8015bfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015bf2:	6839      	ldr	r1, [r7, #0]
 8015bf4:	6878      	ldr	r0, [r7, #4]
 8015bf6:	f000 f985 	bl	8015f04 <USBD_CtlError>
  }
}
 8015bfa:	bf00      	nop
 8015bfc:	bf00      	nop
 8015bfe:	3710      	adds	r7, #16
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b084      	sub	sp, #16
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	885b      	ldrh	r3, [r3, #2]
 8015c16:	b2da      	uxtb	r2, r3
 8015c18:	4b4c      	ldr	r3, [pc, #304]	; (8015d4c <USBD_SetConfig+0x148>)
 8015c1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015c1c:	4b4b      	ldr	r3, [pc, #300]	; (8015d4c <USBD_SetConfig+0x148>)
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	2b01      	cmp	r3, #1
 8015c22:	d905      	bls.n	8015c30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015c24:	6839      	ldr	r1, [r7, #0]
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f000 f96c 	bl	8015f04 <USBD_CtlError>
    return USBD_FAIL;
 8015c2c:	2303      	movs	r3, #3
 8015c2e:	e088      	b.n	8015d42 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c36:	b2db      	uxtb	r3, r3
 8015c38:	2b02      	cmp	r3, #2
 8015c3a:	d002      	beq.n	8015c42 <USBD_SetConfig+0x3e>
 8015c3c:	2b03      	cmp	r3, #3
 8015c3e:	d025      	beq.n	8015c8c <USBD_SetConfig+0x88>
 8015c40:	e071      	b.n	8015d26 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015c42:	4b42      	ldr	r3, [pc, #264]	; (8015d4c <USBD_SetConfig+0x148>)
 8015c44:	781b      	ldrb	r3, [r3, #0]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d01c      	beq.n	8015c84 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8015c4a:	4b40      	ldr	r3, [pc, #256]	; (8015d4c <USBD_SetConfig+0x148>)
 8015c4c:	781b      	ldrb	r3, [r3, #0]
 8015c4e:	461a      	mov	r2, r3
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015c54:	4b3d      	ldr	r3, [pc, #244]	; (8015d4c <USBD_SetConfig+0x148>)
 8015c56:	781b      	ldrb	r3, [r3, #0]
 8015c58:	4619      	mov	r1, r3
 8015c5a:	6878      	ldr	r0, [r7, #4]
 8015c5c:	f7ff f992 	bl	8014f84 <USBD_SetClassConfig>
 8015c60:	4603      	mov	r3, r0
 8015c62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015c64:	7bfb      	ldrb	r3, [r7, #15]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d004      	beq.n	8015c74 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8015c6a:	6839      	ldr	r1, [r7, #0]
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f000 f949 	bl	8015f04 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015c72:	e065      	b.n	8015d40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	f000 fa10 	bl	801609a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	2203      	movs	r2, #3
 8015c7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015c82:	e05d      	b.n	8015d40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f000 fa08 	bl	801609a <USBD_CtlSendStatus>
      break;
 8015c8a:	e059      	b.n	8015d40 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015c8c:	4b2f      	ldr	r3, [pc, #188]	; (8015d4c <USBD_SetConfig+0x148>)
 8015c8e:	781b      	ldrb	r3, [r3, #0]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d112      	bne.n	8015cba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	2202      	movs	r2, #2
 8015c98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015c9c:	4b2b      	ldr	r3, [pc, #172]	; (8015d4c <USBD_SetConfig+0x148>)
 8015c9e:	781b      	ldrb	r3, [r3, #0]
 8015ca0:	461a      	mov	r2, r3
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015ca6:	4b29      	ldr	r3, [pc, #164]	; (8015d4c <USBD_SetConfig+0x148>)
 8015ca8:	781b      	ldrb	r3, [r3, #0]
 8015caa:	4619      	mov	r1, r3
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f7ff f985 	bl	8014fbc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f000 f9f1 	bl	801609a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015cb8:	e042      	b.n	8015d40 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8015cba:	4b24      	ldr	r3, [pc, #144]	; (8015d4c <USBD_SetConfig+0x148>)
 8015cbc:	781b      	ldrb	r3, [r3, #0]
 8015cbe:	461a      	mov	r2, r3
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	685b      	ldr	r3, [r3, #4]
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	d02a      	beq.n	8015d1e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	685b      	ldr	r3, [r3, #4]
 8015ccc:	b2db      	uxtb	r3, r3
 8015cce:	4619      	mov	r1, r3
 8015cd0:	6878      	ldr	r0, [r7, #4]
 8015cd2:	f7ff f973 	bl	8014fbc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015cd6:	4b1d      	ldr	r3, [pc, #116]	; (8015d4c <USBD_SetConfig+0x148>)
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	461a      	mov	r2, r3
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015ce0:	4b1a      	ldr	r3, [pc, #104]	; (8015d4c <USBD_SetConfig+0x148>)
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	6878      	ldr	r0, [r7, #4]
 8015ce8:	f7ff f94c 	bl	8014f84 <USBD_SetClassConfig>
 8015cec:	4603      	mov	r3, r0
 8015cee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015cf0:	7bfb      	ldrb	r3, [r7, #15]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d00f      	beq.n	8015d16 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8015cf6:	6839      	ldr	r1, [r7, #0]
 8015cf8:	6878      	ldr	r0, [r7, #4]
 8015cfa:	f000 f903 	bl	8015f04 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	685b      	ldr	r3, [r3, #4]
 8015d02:	b2db      	uxtb	r3, r3
 8015d04:	4619      	mov	r1, r3
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	f7ff f958 	bl	8014fbc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	2202      	movs	r2, #2
 8015d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015d14:	e014      	b.n	8015d40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f000 f9bf 	bl	801609a <USBD_CtlSendStatus>
      break;
 8015d1c:	e010      	b.n	8015d40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	f000 f9bb 	bl	801609a <USBD_CtlSendStatus>
      break;
 8015d24:	e00c      	b.n	8015d40 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8015d26:	6839      	ldr	r1, [r7, #0]
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f000 f8eb 	bl	8015f04 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015d2e:	4b07      	ldr	r3, [pc, #28]	; (8015d4c <USBD_SetConfig+0x148>)
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	4619      	mov	r1, r3
 8015d34:	6878      	ldr	r0, [r7, #4]
 8015d36:	f7ff f941 	bl	8014fbc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015d3a:	2303      	movs	r3, #3
 8015d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8015d3e:	bf00      	nop
  }

  return ret;
 8015d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d42:	4618      	mov	r0, r3
 8015d44:	3710      	adds	r7, #16
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}
 8015d4a:	bf00      	nop
 8015d4c:	2000240c 	.word	0x2000240c

08015d50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b082      	sub	sp, #8
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
 8015d58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015d5a:	683b      	ldr	r3, [r7, #0]
 8015d5c:	88db      	ldrh	r3, [r3, #6]
 8015d5e:	2b01      	cmp	r3, #1
 8015d60:	d004      	beq.n	8015d6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015d62:	6839      	ldr	r1, [r7, #0]
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	f000 f8cd 	bl	8015f04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015d6a:	e023      	b.n	8015db4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	2b02      	cmp	r3, #2
 8015d76:	dc02      	bgt.n	8015d7e <USBD_GetConfig+0x2e>
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	dc03      	bgt.n	8015d84 <USBD_GetConfig+0x34>
 8015d7c:	e015      	b.n	8015daa <USBD_GetConfig+0x5a>
 8015d7e:	2b03      	cmp	r3, #3
 8015d80:	d00b      	beq.n	8015d9a <USBD_GetConfig+0x4a>
 8015d82:	e012      	b.n	8015daa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2200      	movs	r2, #0
 8015d88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	3308      	adds	r3, #8
 8015d8e:	2201      	movs	r2, #1
 8015d90:	4619      	mov	r1, r3
 8015d92:	6878      	ldr	r0, [r7, #4]
 8015d94:	f000 f927 	bl	8015fe6 <USBD_CtlSendData>
        break;
 8015d98:	e00c      	b.n	8015db4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	3304      	adds	r3, #4
 8015d9e:	2201      	movs	r2, #1
 8015da0:	4619      	mov	r1, r3
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f000 f91f 	bl	8015fe6 <USBD_CtlSendData>
        break;
 8015da8:	e004      	b.n	8015db4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015daa:	6839      	ldr	r1, [r7, #0]
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f000 f8a9 	bl	8015f04 <USBD_CtlError>
        break;
 8015db2:	bf00      	nop
}
 8015db4:	bf00      	nop
 8015db6:	3708      	adds	r7, #8
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b082      	sub	sp, #8
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
 8015dc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dcc:	b2db      	uxtb	r3, r3
 8015dce:	3b01      	subs	r3, #1
 8015dd0:	2b02      	cmp	r3, #2
 8015dd2:	d81e      	bhi.n	8015e12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	88db      	ldrh	r3, [r3, #6]
 8015dd8:	2b02      	cmp	r3, #2
 8015dda:	d004      	beq.n	8015de6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015ddc:	6839      	ldr	r1, [r7, #0]
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f000 f890 	bl	8015f04 <USBD_CtlError>
        break;
 8015de4:	e01a      	b.n	8015e1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	2201      	movs	r2, #1
 8015dea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d005      	beq.n	8015e02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	68db      	ldr	r3, [r3, #12]
 8015dfa:	f043 0202 	orr.w	r2, r3, #2
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	330c      	adds	r3, #12
 8015e06:	2202      	movs	r2, #2
 8015e08:	4619      	mov	r1, r3
 8015e0a:	6878      	ldr	r0, [r7, #4]
 8015e0c:	f000 f8eb 	bl	8015fe6 <USBD_CtlSendData>
      break;
 8015e10:	e004      	b.n	8015e1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015e12:	6839      	ldr	r1, [r7, #0]
 8015e14:	6878      	ldr	r0, [r7, #4]
 8015e16:	f000 f875 	bl	8015f04 <USBD_CtlError>
      break;
 8015e1a:	bf00      	nop
  }
}
 8015e1c:	bf00      	nop
 8015e1e:	3708      	adds	r7, #8
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}

08015e24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
 8015e2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	885b      	ldrh	r3, [r3, #2]
 8015e32:	2b01      	cmp	r3, #1
 8015e34:	d106      	bne.n	8015e44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2201      	movs	r2, #1
 8015e3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f000 f92b 	bl	801609a <USBD_CtlSendStatus>
  }
}
 8015e44:	bf00      	nop
 8015e46:	3708      	adds	r7, #8
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd80      	pop	{r7, pc}

08015e4c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b082      	sub	sp, #8
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e5c:	b2db      	uxtb	r3, r3
 8015e5e:	3b01      	subs	r3, #1
 8015e60:	2b02      	cmp	r3, #2
 8015e62:	d80b      	bhi.n	8015e7c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015e64:	683b      	ldr	r3, [r7, #0]
 8015e66:	885b      	ldrh	r3, [r3, #2]
 8015e68:	2b01      	cmp	r3, #1
 8015e6a:	d10c      	bne.n	8015e86 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f000 f910 	bl	801609a <USBD_CtlSendStatus>
      }
      break;
 8015e7a:	e004      	b.n	8015e86 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015e7c:	6839      	ldr	r1, [r7, #0]
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f000 f840 	bl	8015f04 <USBD_CtlError>
      break;
 8015e84:	e000      	b.n	8015e88 <USBD_ClrFeature+0x3c>
      break;
 8015e86:	bf00      	nop
  }
}
 8015e88:	bf00      	nop
 8015e8a:	3708      	adds	r7, #8
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	bd80      	pop	{r7, pc}

08015e90 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b084      	sub	sp, #16
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	781a      	ldrb	r2, [r3, #0]
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	781a      	ldrb	r2, [r3, #0]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	3301      	adds	r3, #1
 8015eb8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015eba:	68f8      	ldr	r0, [r7, #12]
 8015ebc:	f7ff fa92 	bl	80153e4 <SWAPBYTE>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	3301      	adds	r3, #1
 8015ecc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	3301      	adds	r3, #1
 8015ed2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015ed4:	68f8      	ldr	r0, [r7, #12]
 8015ed6:	f7ff fa85 	bl	80153e4 <SWAPBYTE>
 8015eda:	4603      	mov	r3, r0
 8015edc:	461a      	mov	r2, r3
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	3301      	adds	r3, #1
 8015ee6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	3301      	adds	r3, #1
 8015eec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015eee:	68f8      	ldr	r0, [r7, #12]
 8015ef0:	f7ff fa78 	bl	80153e4 <SWAPBYTE>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	461a      	mov	r2, r3
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	80da      	strh	r2, [r3, #6]
}
 8015efc:	bf00      	nop
 8015efe:	3710      	adds	r7, #16
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}

08015f04 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b082      	sub	sp, #8
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
 8015f0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015f0e:	2180      	movs	r1, #128	; 0x80
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f000 fc95 	bl	8016840 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015f16:	2100      	movs	r1, #0
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f000 fc91 	bl	8016840 <USBD_LL_StallEP>
}
 8015f1e:	bf00      	nop
 8015f20:	3708      	adds	r7, #8
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}

08015f26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015f26:	b580      	push	{r7, lr}
 8015f28:	b086      	sub	sp, #24
 8015f2a:	af00      	add	r7, sp, #0
 8015f2c:	60f8      	str	r0, [r7, #12]
 8015f2e:	60b9      	str	r1, [r7, #8]
 8015f30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015f32:	2300      	movs	r3, #0
 8015f34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d036      	beq.n	8015faa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015f40:	6938      	ldr	r0, [r7, #16]
 8015f42:	f000 f836 	bl	8015fb2 <USBD_GetLen>
 8015f46:	4603      	mov	r3, r0
 8015f48:	3301      	adds	r3, #1
 8015f4a:	b29b      	uxth	r3, r3
 8015f4c:	005b      	lsls	r3, r3, #1
 8015f4e:	b29a      	uxth	r2, r3
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015f54:	7dfb      	ldrb	r3, [r7, #23]
 8015f56:	68ba      	ldr	r2, [r7, #8]
 8015f58:	4413      	add	r3, r2
 8015f5a:	687a      	ldr	r2, [r7, #4]
 8015f5c:	7812      	ldrb	r2, [r2, #0]
 8015f5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8015f60:	7dfb      	ldrb	r3, [r7, #23]
 8015f62:	3301      	adds	r3, #1
 8015f64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015f66:	7dfb      	ldrb	r3, [r7, #23]
 8015f68:	68ba      	ldr	r2, [r7, #8]
 8015f6a:	4413      	add	r3, r2
 8015f6c:	2203      	movs	r2, #3
 8015f6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8015f70:	7dfb      	ldrb	r3, [r7, #23]
 8015f72:	3301      	adds	r3, #1
 8015f74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015f76:	e013      	b.n	8015fa0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015f78:	7dfb      	ldrb	r3, [r7, #23]
 8015f7a:	68ba      	ldr	r2, [r7, #8]
 8015f7c:	4413      	add	r3, r2
 8015f7e:	693a      	ldr	r2, [r7, #16]
 8015f80:	7812      	ldrb	r2, [r2, #0]
 8015f82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	3301      	adds	r3, #1
 8015f88:	613b      	str	r3, [r7, #16]
    idx++;
 8015f8a:	7dfb      	ldrb	r3, [r7, #23]
 8015f8c:	3301      	adds	r3, #1
 8015f8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015f90:	7dfb      	ldrb	r3, [r7, #23]
 8015f92:	68ba      	ldr	r2, [r7, #8]
 8015f94:	4413      	add	r3, r2
 8015f96:	2200      	movs	r2, #0
 8015f98:	701a      	strb	r2, [r3, #0]
    idx++;
 8015f9a:	7dfb      	ldrb	r3, [r7, #23]
 8015f9c:	3301      	adds	r3, #1
 8015f9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015fa0:	693b      	ldr	r3, [r7, #16]
 8015fa2:	781b      	ldrb	r3, [r3, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d1e7      	bne.n	8015f78 <USBD_GetString+0x52>
 8015fa8:	e000      	b.n	8015fac <USBD_GetString+0x86>
    return;
 8015faa:	bf00      	nop
  }
}
 8015fac:	3718      	adds	r7, #24
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}

08015fb2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015fb2:	b480      	push	{r7}
 8015fb4:	b085      	sub	sp, #20
 8015fb6:	af00      	add	r7, sp, #0
 8015fb8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015fc2:	e005      	b.n	8015fd0 <USBD_GetLen+0x1e>
  {
    len++;
 8015fc4:	7bfb      	ldrb	r3, [r7, #15]
 8015fc6:	3301      	adds	r3, #1
 8015fc8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015fca:	68bb      	ldr	r3, [r7, #8]
 8015fcc:	3301      	adds	r3, #1
 8015fce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015fd0:	68bb      	ldr	r3, [r7, #8]
 8015fd2:	781b      	ldrb	r3, [r3, #0]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d1f5      	bne.n	8015fc4 <USBD_GetLen+0x12>
  }

  return len;
 8015fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fda:	4618      	mov	r0, r3
 8015fdc:	3714      	adds	r7, #20
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe4:	4770      	bx	lr

08015fe6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015fe6:	b580      	push	{r7, lr}
 8015fe8:	b084      	sub	sp, #16
 8015fea:	af00      	add	r7, sp, #0
 8015fec:	60f8      	str	r0, [r7, #12]
 8015fee:	60b9      	str	r1, [r7, #8]
 8015ff0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	2202      	movs	r2, #2
 8015ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	687a      	ldr	r2, [r7, #4]
 8015ffe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	687a      	ldr	r2, [r7, #4]
 8016004:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	68ba      	ldr	r2, [r7, #8]
 801600a:	2100      	movs	r1, #0
 801600c:	68f8      	ldr	r0, [r7, #12]
 801600e:	f000 fca0 	bl	8016952 <USBD_LL_Transmit>

  return USBD_OK;
 8016012:	2300      	movs	r3, #0
}
 8016014:	4618      	mov	r0, r3
 8016016:	3710      	adds	r7, #16
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}

0801601c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b084      	sub	sp, #16
 8016020:	af00      	add	r7, sp, #0
 8016022:	60f8      	str	r0, [r7, #12]
 8016024:	60b9      	str	r1, [r7, #8]
 8016026:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	68ba      	ldr	r2, [r7, #8]
 801602c:	2100      	movs	r1, #0
 801602e:	68f8      	ldr	r0, [r7, #12]
 8016030:	f000 fc8f 	bl	8016952 <USBD_LL_Transmit>

  return USBD_OK;
 8016034:	2300      	movs	r3, #0
}
 8016036:	4618      	mov	r0, r3
 8016038:	3710      	adds	r7, #16
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}

0801603e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801603e:	b580      	push	{r7, lr}
 8016040:	b084      	sub	sp, #16
 8016042:	af00      	add	r7, sp, #0
 8016044:	60f8      	str	r0, [r7, #12]
 8016046:	60b9      	str	r1, [r7, #8]
 8016048:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	2203      	movs	r2, #3
 801604e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	687a      	ldr	r2, [r7, #4]
 8016056:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	687a      	ldr	r2, [r7, #4]
 801605e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	68ba      	ldr	r2, [r7, #8]
 8016066:	2100      	movs	r1, #0
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f000 fc93 	bl	8016994 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801606e:	2300      	movs	r3, #0
}
 8016070:	4618      	mov	r0, r3
 8016072:	3710      	adds	r7, #16
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}

08016078 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b084      	sub	sp, #16
 801607c:	af00      	add	r7, sp, #0
 801607e:	60f8      	str	r0, [r7, #12]
 8016080:	60b9      	str	r1, [r7, #8]
 8016082:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	68ba      	ldr	r2, [r7, #8]
 8016088:	2100      	movs	r1, #0
 801608a:	68f8      	ldr	r0, [r7, #12]
 801608c:	f000 fc82 	bl	8016994 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016090:	2300      	movs	r3, #0
}
 8016092:	4618      	mov	r0, r3
 8016094:	3710      	adds	r7, #16
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}

0801609a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801609a:	b580      	push	{r7, lr}
 801609c:	b082      	sub	sp, #8
 801609e:	af00      	add	r7, sp, #0
 80160a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	2204      	movs	r2, #4
 80160a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80160aa:	2300      	movs	r3, #0
 80160ac:	2200      	movs	r2, #0
 80160ae:	2100      	movs	r1, #0
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f000 fc4e 	bl	8016952 <USBD_LL_Transmit>

  return USBD_OK;
 80160b6:	2300      	movs	r3, #0
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3708      	adds	r7, #8
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b082      	sub	sp, #8
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	2205      	movs	r2, #5
 80160cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80160d0:	2300      	movs	r3, #0
 80160d2:	2200      	movs	r2, #0
 80160d4:	2100      	movs	r1, #0
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f000 fc5c 	bl	8016994 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80160dc:	2300      	movs	r3, #0
}
 80160de:	4618      	mov	r0, r3
 80160e0:	3708      	adds	r7, #8
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}
	...

080160e8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80160ec:	2200      	movs	r2, #0
 80160ee:	4912      	ldr	r1, [pc, #72]	; (8016138 <MX_USB_Device_Init+0x50>)
 80160f0:	4812      	ldr	r0, [pc, #72]	; (801613c <MX_USB_Device_Init+0x54>)
 80160f2:	f7fe fed9 	bl	8014ea8 <USBD_Init>
 80160f6:	4603      	mov	r3, r0
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d001      	beq.n	8016100 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80160fc:	f7ee fd78 	bl	8004bf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8016100:	490f      	ldr	r1, [pc, #60]	; (8016140 <MX_USB_Device_Init+0x58>)
 8016102:	480e      	ldr	r0, [pc, #56]	; (801613c <MX_USB_Device_Init+0x54>)
 8016104:	f7fe ff00 	bl	8014f08 <USBD_RegisterClass>
 8016108:	4603      	mov	r3, r0
 801610a:	2b00      	cmp	r3, #0
 801610c:	d001      	beq.n	8016112 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801610e:	f7ee fd6f 	bl	8004bf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8016112:	490c      	ldr	r1, [pc, #48]	; (8016144 <MX_USB_Device_Init+0x5c>)
 8016114:	4809      	ldr	r0, [pc, #36]	; (801613c <MX_USB_Device_Init+0x54>)
 8016116:	f7fe fe21 	bl	8014d5c <USBD_CDC_RegisterInterface>
 801611a:	4603      	mov	r3, r0
 801611c:	2b00      	cmp	r3, #0
 801611e:	d001      	beq.n	8016124 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8016120:	f7ee fd66 	bl	8004bf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8016124:	4805      	ldr	r0, [pc, #20]	; (801613c <MX_USB_Device_Init+0x54>)
 8016126:	f7fe ff16 	bl	8014f56 <USBD_Start>
 801612a:	4603      	mov	r3, r0
 801612c:	2b00      	cmp	r3, #0
 801612e:	d001      	beq.n	8016134 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8016130:	f7ee fd5e 	bl	8004bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8016134:	bf00      	nop
 8016136:	bd80      	pop	{r7, pc}
 8016138:	20000340 	.word	0x20000340
 801613c:	20002410 	.word	0x20002410
 8016140:	20000228 	.word	0x20000228
 8016144:	2000032c 	.word	0x2000032c

08016148 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801614c:	2200      	movs	r2, #0
 801614e:	4905      	ldr	r1, [pc, #20]	; (8016164 <CDC_Init_FS+0x1c>)
 8016150:	4805      	ldr	r0, [pc, #20]	; (8016168 <CDC_Init_FS+0x20>)
 8016152:	f7fe fe18 	bl	8014d86 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016156:	4905      	ldr	r1, [pc, #20]	; (801616c <CDC_Init_FS+0x24>)
 8016158:	4803      	ldr	r0, [pc, #12]	; (8016168 <CDC_Init_FS+0x20>)
 801615a:	f7fe fe32 	bl	8014dc2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801615e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016160:	4618      	mov	r0, r3
 8016162:	bd80      	pop	{r7, pc}
 8016164:	20002ae0 	.word	0x20002ae0
 8016168:	20002410 	.word	0x20002410
 801616c:	200026e0 	.word	0x200026e0

08016170 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016170:	b480      	push	{r7}
 8016172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016174:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016176:	4618      	mov	r0, r3
 8016178:	46bd      	mov	sp, r7
 801617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617e:	4770      	bx	lr

08016180 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016180:	b480      	push	{r7}
 8016182:	b083      	sub	sp, #12
 8016184:	af00      	add	r7, sp, #0
 8016186:	4603      	mov	r3, r0
 8016188:	6039      	str	r1, [r7, #0]
 801618a:	71fb      	strb	r3, [r7, #7]
 801618c:	4613      	mov	r3, r2
 801618e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016190:	79fb      	ldrb	r3, [r7, #7]
 8016192:	2b23      	cmp	r3, #35	; 0x23
 8016194:	d84a      	bhi.n	801622c <CDC_Control_FS+0xac>
 8016196:	a201      	add	r2, pc, #4	; (adr r2, 801619c <CDC_Control_FS+0x1c>)
 8016198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801619c:	0801622d 	.word	0x0801622d
 80161a0:	0801622d 	.word	0x0801622d
 80161a4:	0801622d 	.word	0x0801622d
 80161a8:	0801622d 	.word	0x0801622d
 80161ac:	0801622d 	.word	0x0801622d
 80161b0:	0801622d 	.word	0x0801622d
 80161b4:	0801622d 	.word	0x0801622d
 80161b8:	0801622d 	.word	0x0801622d
 80161bc:	0801622d 	.word	0x0801622d
 80161c0:	0801622d 	.word	0x0801622d
 80161c4:	0801622d 	.word	0x0801622d
 80161c8:	0801622d 	.word	0x0801622d
 80161cc:	0801622d 	.word	0x0801622d
 80161d0:	0801622d 	.word	0x0801622d
 80161d4:	0801622d 	.word	0x0801622d
 80161d8:	0801622d 	.word	0x0801622d
 80161dc:	0801622d 	.word	0x0801622d
 80161e0:	0801622d 	.word	0x0801622d
 80161e4:	0801622d 	.word	0x0801622d
 80161e8:	0801622d 	.word	0x0801622d
 80161ec:	0801622d 	.word	0x0801622d
 80161f0:	0801622d 	.word	0x0801622d
 80161f4:	0801622d 	.word	0x0801622d
 80161f8:	0801622d 	.word	0x0801622d
 80161fc:	0801622d 	.word	0x0801622d
 8016200:	0801622d 	.word	0x0801622d
 8016204:	0801622d 	.word	0x0801622d
 8016208:	0801622d 	.word	0x0801622d
 801620c:	0801622d 	.word	0x0801622d
 8016210:	0801622d 	.word	0x0801622d
 8016214:	0801622d 	.word	0x0801622d
 8016218:	0801622d 	.word	0x0801622d
 801621c:	0801622d 	.word	0x0801622d
 8016220:	0801622d 	.word	0x0801622d
 8016224:	0801622d 	.word	0x0801622d
 8016228:	0801622d 	.word	0x0801622d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801622c:	bf00      	nop
  }

  return (USBD_OK);
 801622e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016230:	4618      	mov	r0, r3
 8016232:	370c      	adds	r7, #12
 8016234:	46bd      	mov	sp, r7
 8016236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801623a:	4770      	bx	lr

0801623c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b082      	sub	sp, #8
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
 8016244:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016246:	6879      	ldr	r1, [r7, #4]
 8016248:	4805      	ldr	r0, [pc, #20]	; (8016260 <CDC_Receive_FS+0x24>)
 801624a:	f7fe fdba 	bl	8014dc2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801624e:	4804      	ldr	r0, [pc, #16]	; (8016260 <CDC_Receive_FS+0x24>)
 8016250:	f7fe fe00 	bl	8014e54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016254:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016256:	4618      	mov	r0, r3
 8016258:	3708      	adds	r7, #8
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}
 801625e:	bf00      	nop
 8016260:	20002410 	.word	0x20002410

08016264 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	460b      	mov	r3, r1
 801626e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016270:	2300      	movs	r3, #0
 8016272:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016274:	4b0d      	ldr	r3, [pc, #52]	; (80162ac <CDC_Transmit_FS+0x48>)
 8016276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801627a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016282:	2b00      	cmp	r3, #0
 8016284:	d001      	beq.n	801628a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016286:	2301      	movs	r3, #1
 8016288:	e00b      	b.n	80162a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801628a:	887b      	ldrh	r3, [r7, #2]
 801628c:	461a      	mov	r2, r3
 801628e:	6879      	ldr	r1, [r7, #4]
 8016290:	4806      	ldr	r0, [pc, #24]	; (80162ac <CDC_Transmit_FS+0x48>)
 8016292:	f7fe fd78 	bl	8014d86 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016296:	4805      	ldr	r0, [pc, #20]	; (80162ac <CDC_Transmit_FS+0x48>)
 8016298:	f7fe fdac 	bl	8014df4 <USBD_CDC_TransmitPacket>
 801629c:	4603      	mov	r3, r0
 801629e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80162a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80162a2:	4618      	mov	r0, r3
 80162a4:	3710      	adds	r7, #16
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}
 80162aa:	bf00      	nop
 80162ac:	20002410 	.word	0x20002410

080162b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80162b0:	b480      	push	{r7}
 80162b2:	b087      	sub	sp, #28
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	60b9      	str	r1, [r7, #8]
 80162ba:	4613      	mov	r3, r2
 80162bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80162be:	2300      	movs	r3, #0
 80162c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80162c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162c6:	4618      	mov	r0, r3
 80162c8:	371c      	adds	r7, #28
 80162ca:	46bd      	mov	sp, r7
 80162cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d0:	4770      	bx	lr
	...

080162d4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162d4:	b480      	push	{r7}
 80162d6:	b083      	sub	sp, #12
 80162d8:	af00      	add	r7, sp, #0
 80162da:	4603      	mov	r3, r0
 80162dc:	6039      	str	r1, [r7, #0]
 80162de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80162e0:	683b      	ldr	r3, [r7, #0]
 80162e2:	2212      	movs	r2, #18
 80162e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80162e6:	4b03      	ldr	r3, [pc, #12]	; (80162f4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	370c      	adds	r7, #12
 80162ec:	46bd      	mov	sp, r7
 80162ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f2:	4770      	bx	lr
 80162f4:	20000360 	.word	0x20000360

080162f8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162f8:	b480      	push	{r7}
 80162fa:	b083      	sub	sp, #12
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	4603      	mov	r3, r0
 8016300:	6039      	str	r1, [r7, #0]
 8016302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016304:	683b      	ldr	r3, [r7, #0]
 8016306:	2204      	movs	r2, #4
 8016308:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801630a:	4b03      	ldr	r3, [pc, #12]	; (8016318 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801630c:	4618      	mov	r0, r3
 801630e:	370c      	adds	r7, #12
 8016310:	46bd      	mov	sp, r7
 8016312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016316:	4770      	bx	lr
 8016318:	20000374 	.word	0x20000374

0801631c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b082      	sub	sp, #8
 8016320:	af00      	add	r7, sp, #0
 8016322:	4603      	mov	r3, r0
 8016324:	6039      	str	r1, [r7, #0]
 8016326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016328:	79fb      	ldrb	r3, [r7, #7]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d105      	bne.n	801633a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801632e:	683a      	ldr	r2, [r7, #0]
 8016330:	4907      	ldr	r1, [pc, #28]	; (8016350 <USBD_CDC_ProductStrDescriptor+0x34>)
 8016332:	4808      	ldr	r0, [pc, #32]	; (8016354 <USBD_CDC_ProductStrDescriptor+0x38>)
 8016334:	f7ff fdf7 	bl	8015f26 <USBD_GetString>
 8016338:	e004      	b.n	8016344 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801633a:	683a      	ldr	r2, [r7, #0]
 801633c:	4904      	ldr	r1, [pc, #16]	; (8016350 <USBD_CDC_ProductStrDescriptor+0x34>)
 801633e:	4805      	ldr	r0, [pc, #20]	; (8016354 <USBD_CDC_ProductStrDescriptor+0x38>)
 8016340:	f7ff fdf1 	bl	8015f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016344:	4b02      	ldr	r3, [pc, #8]	; (8016350 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8016346:	4618      	mov	r0, r3
 8016348:	3708      	adds	r7, #8
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}
 801634e:	bf00      	nop
 8016350:	20002ee0 	.word	0x20002ee0
 8016354:	0801b74c 	.word	0x0801b74c

08016358 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b082      	sub	sp, #8
 801635c:	af00      	add	r7, sp, #0
 801635e:	4603      	mov	r3, r0
 8016360:	6039      	str	r1, [r7, #0]
 8016362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016364:	683a      	ldr	r2, [r7, #0]
 8016366:	4904      	ldr	r1, [pc, #16]	; (8016378 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8016368:	4804      	ldr	r0, [pc, #16]	; (801637c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801636a:	f7ff fddc 	bl	8015f26 <USBD_GetString>
  return USBD_StrDesc;
 801636e:	4b02      	ldr	r3, [pc, #8]	; (8016378 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8016370:	4618      	mov	r0, r3
 8016372:	3708      	adds	r7, #8
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	20002ee0 	.word	0x20002ee0
 801637c:	0801b764 	.word	0x0801b764

08016380 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af00      	add	r7, sp, #0
 8016386:	4603      	mov	r3, r0
 8016388:	6039      	str	r1, [r7, #0]
 801638a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	221a      	movs	r2, #26
 8016390:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016392:	f000 f843 	bl	801641c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016396:	4b02      	ldr	r3, [pc, #8]	; (80163a0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8016398:	4618      	mov	r0, r3
 801639a:	3708      	adds	r7, #8
 801639c:	46bd      	mov	sp, r7
 801639e:	bd80      	pop	{r7, pc}
 80163a0:	20000378 	.word	0x20000378

080163a4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b082      	sub	sp, #8
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	4603      	mov	r3, r0
 80163ac:	6039      	str	r1, [r7, #0]
 80163ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80163b0:	79fb      	ldrb	r3, [r7, #7]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d105      	bne.n	80163c2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80163b6:	683a      	ldr	r2, [r7, #0]
 80163b8:	4907      	ldr	r1, [pc, #28]	; (80163d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80163ba:	4808      	ldr	r0, [pc, #32]	; (80163dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80163bc:	f7ff fdb3 	bl	8015f26 <USBD_GetString>
 80163c0:	e004      	b.n	80163cc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80163c2:	683a      	ldr	r2, [r7, #0]
 80163c4:	4904      	ldr	r1, [pc, #16]	; (80163d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80163c6:	4805      	ldr	r0, [pc, #20]	; (80163dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80163c8:	f7ff fdad 	bl	8015f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80163cc:	4b02      	ldr	r3, [pc, #8]	; (80163d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80163ce:	4618      	mov	r0, r3
 80163d0:	3708      	adds	r7, #8
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd80      	pop	{r7, pc}
 80163d6:	bf00      	nop
 80163d8:	20002ee0 	.word	0x20002ee0
 80163dc:	0801b778 	.word	0x0801b778

080163e0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	4603      	mov	r3, r0
 80163e8:	6039      	str	r1, [r7, #0]
 80163ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80163ec:	79fb      	ldrb	r3, [r7, #7]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d105      	bne.n	80163fe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80163f2:	683a      	ldr	r2, [r7, #0]
 80163f4:	4907      	ldr	r1, [pc, #28]	; (8016414 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80163f6:	4808      	ldr	r0, [pc, #32]	; (8016418 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80163f8:	f7ff fd95 	bl	8015f26 <USBD_GetString>
 80163fc:	e004      	b.n	8016408 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80163fe:	683a      	ldr	r2, [r7, #0]
 8016400:	4904      	ldr	r1, [pc, #16]	; (8016414 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8016402:	4805      	ldr	r0, [pc, #20]	; (8016418 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8016404:	f7ff fd8f 	bl	8015f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016408:	4b02      	ldr	r3, [pc, #8]	; (8016414 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801640a:	4618      	mov	r0, r3
 801640c:	3708      	adds	r7, #8
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}
 8016412:	bf00      	nop
 8016414:	20002ee0 	.word	0x20002ee0
 8016418:	0801b784 	.word	0x0801b784

0801641c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b084      	sub	sp, #16
 8016420:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016422:	4b0f      	ldr	r3, [pc, #60]	; (8016460 <Get_SerialNum+0x44>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016428:	4b0e      	ldr	r3, [pc, #56]	; (8016464 <Get_SerialNum+0x48>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801642e:	4b0e      	ldr	r3, [pc, #56]	; (8016468 <Get_SerialNum+0x4c>)
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016434:	68fa      	ldr	r2, [r7, #12]
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	4413      	add	r3, r2
 801643a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d009      	beq.n	8016456 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016442:	2208      	movs	r2, #8
 8016444:	4909      	ldr	r1, [pc, #36]	; (801646c <Get_SerialNum+0x50>)
 8016446:	68f8      	ldr	r0, [r7, #12]
 8016448:	f000 f814 	bl	8016474 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801644c:	2204      	movs	r2, #4
 801644e:	4908      	ldr	r1, [pc, #32]	; (8016470 <Get_SerialNum+0x54>)
 8016450:	68b8      	ldr	r0, [r7, #8]
 8016452:	f000 f80f 	bl	8016474 <IntToUnicode>
  }
}
 8016456:	bf00      	nop
 8016458:	3710      	adds	r7, #16
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	1fff7590 	.word	0x1fff7590
 8016464:	1fff7594 	.word	0x1fff7594
 8016468:	1fff7598 	.word	0x1fff7598
 801646c:	2000037a 	.word	0x2000037a
 8016470:	2000038a 	.word	0x2000038a

08016474 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016474:	b480      	push	{r7}
 8016476:	b087      	sub	sp, #28
 8016478:	af00      	add	r7, sp, #0
 801647a:	60f8      	str	r0, [r7, #12]
 801647c:	60b9      	str	r1, [r7, #8]
 801647e:	4613      	mov	r3, r2
 8016480:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016482:	2300      	movs	r3, #0
 8016484:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016486:	2300      	movs	r3, #0
 8016488:	75fb      	strb	r3, [r7, #23]
 801648a:	e027      	b.n	80164dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	0f1b      	lsrs	r3, r3, #28
 8016490:	2b09      	cmp	r3, #9
 8016492:	d80b      	bhi.n	80164ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	0f1b      	lsrs	r3, r3, #28
 8016498:	b2da      	uxtb	r2, r3
 801649a:	7dfb      	ldrb	r3, [r7, #23]
 801649c:	005b      	lsls	r3, r3, #1
 801649e:	4619      	mov	r1, r3
 80164a0:	68bb      	ldr	r3, [r7, #8]
 80164a2:	440b      	add	r3, r1
 80164a4:	3230      	adds	r2, #48	; 0x30
 80164a6:	b2d2      	uxtb	r2, r2
 80164a8:	701a      	strb	r2, [r3, #0]
 80164aa:	e00a      	b.n	80164c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	0f1b      	lsrs	r3, r3, #28
 80164b0:	b2da      	uxtb	r2, r3
 80164b2:	7dfb      	ldrb	r3, [r7, #23]
 80164b4:	005b      	lsls	r3, r3, #1
 80164b6:	4619      	mov	r1, r3
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	440b      	add	r3, r1
 80164bc:	3237      	adds	r2, #55	; 0x37
 80164be:	b2d2      	uxtb	r2, r2
 80164c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	011b      	lsls	r3, r3, #4
 80164c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80164c8:	7dfb      	ldrb	r3, [r7, #23]
 80164ca:	005b      	lsls	r3, r3, #1
 80164cc:	3301      	adds	r3, #1
 80164ce:	68ba      	ldr	r2, [r7, #8]
 80164d0:	4413      	add	r3, r2
 80164d2:	2200      	movs	r2, #0
 80164d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80164d6:	7dfb      	ldrb	r3, [r7, #23]
 80164d8:	3301      	adds	r3, #1
 80164da:	75fb      	strb	r3, [r7, #23]
 80164dc:	7dfa      	ldrb	r2, [r7, #23]
 80164de:	79fb      	ldrb	r3, [r7, #7]
 80164e0:	429a      	cmp	r2, r3
 80164e2:	d3d3      	bcc.n	801648c <IntToUnicode+0x18>
  }
}
 80164e4:	bf00      	nop
 80164e6:	bf00      	nop
 80164e8:	371c      	adds	r7, #28
 80164ea:	46bd      	mov	sp, r7
 80164ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f0:	4770      	bx	lr
	...

080164f4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b094      	sub	sp, #80	; 0x50
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80164fc:	f107 030c 	add.w	r3, r7, #12
 8016500:	2244      	movs	r2, #68	; 0x44
 8016502:	2100      	movs	r1, #0
 8016504:	4618      	mov	r0, r3
 8016506:	f001 fa94 	bl	8017a32 <memset>
  if(pcdHandle->Instance==USB)
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	4a15      	ldr	r2, [pc, #84]	; (8016564 <HAL_PCD_MspInit+0x70>)
 8016510:	4293      	cmp	r3, r2
 8016512:	d122      	bne.n	801655a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016518:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801651a:	2300      	movs	r3, #0
 801651c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801651e:	f107 030c 	add.w	r3, r7, #12
 8016522:	4618      	mov	r0, r3
 8016524:	f7f6 fc1e 	bl	800cd64 <HAL_RCCEx_PeriphCLKConfig>
 8016528:	4603      	mov	r3, r0
 801652a:	2b00      	cmp	r3, #0
 801652c:	d001      	beq.n	8016532 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801652e:	f7ee fb5f 	bl	8004bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8016532:	4b0d      	ldr	r3, [pc, #52]	; (8016568 <HAL_PCD_MspInit+0x74>)
 8016534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016536:	4a0c      	ldr	r2, [pc, #48]	; (8016568 <HAL_PCD_MspInit+0x74>)
 8016538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801653c:	6593      	str	r3, [r2, #88]	; 0x58
 801653e:	4b0a      	ldr	r3, [pc, #40]	; (8016568 <HAL_PCD_MspInit+0x74>)
 8016540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016546:	60bb      	str	r3, [r7, #8]
 8016548:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801654a:	2200      	movs	r2, #0
 801654c:	2100      	movs	r1, #0
 801654e:	2014      	movs	r0, #20
 8016550:	f7f2 fe65 	bl	800921e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8016554:	2014      	movs	r0, #20
 8016556:	f7f2 fe7c 	bl	8009252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801655a:	bf00      	nop
 801655c:	3750      	adds	r7, #80	; 0x50
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}
 8016562:	bf00      	nop
 8016564:	40005c00 	.word	0x40005c00
 8016568:	40021000 	.word	0x40021000

0801656c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b082      	sub	sp, #8
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8016580:	4619      	mov	r1, r3
 8016582:	4610      	mov	r0, r2
 8016584:	f7fe fd32 	bl	8014fec <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8016588:	bf00      	nop
 801658a:	3708      	adds	r7, #8
 801658c:	46bd      	mov	sp, r7
 801658e:	bd80      	pop	{r7, pc}

08016590 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	460b      	mov	r3, r1
 801659a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80165a2:	78fa      	ldrb	r2, [r7, #3]
 80165a4:	6879      	ldr	r1, [r7, #4]
 80165a6:	4613      	mov	r3, r2
 80165a8:	009b      	lsls	r3, r3, #2
 80165aa:	4413      	add	r3, r2
 80165ac:	00db      	lsls	r3, r3, #3
 80165ae:	440b      	add	r3, r1
 80165b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80165b4:	681a      	ldr	r2, [r3, #0]
 80165b6:	78fb      	ldrb	r3, [r7, #3]
 80165b8:	4619      	mov	r1, r3
 80165ba:	f7fe fd6c 	bl	8015096 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80165be:	bf00      	nop
 80165c0:	3708      	adds	r7, #8
 80165c2:	46bd      	mov	sp, r7
 80165c4:	bd80      	pop	{r7, pc}

080165c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165c6:	b580      	push	{r7, lr}
 80165c8:	b082      	sub	sp, #8
 80165ca:	af00      	add	r7, sp, #0
 80165cc:	6078      	str	r0, [r7, #4]
 80165ce:	460b      	mov	r3, r1
 80165d0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80165d8:	78fa      	ldrb	r2, [r7, #3]
 80165da:	6879      	ldr	r1, [r7, #4]
 80165dc:	4613      	mov	r3, r2
 80165de:	009b      	lsls	r3, r3, #2
 80165e0:	4413      	add	r3, r2
 80165e2:	00db      	lsls	r3, r3, #3
 80165e4:	440b      	add	r3, r1
 80165e6:	3324      	adds	r3, #36	; 0x24
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	78fb      	ldrb	r3, [r7, #3]
 80165ec:	4619      	mov	r1, r3
 80165ee:	f7fe fdb5 	bl	801515c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80165f2:	bf00      	nop
 80165f4:	3708      	adds	r7, #8
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bd80      	pop	{r7, pc}

080165fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165fa:	b580      	push	{r7, lr}
 80165fc:	b082      	sub	sp, #8
 80165fe:	af00      	add	r7, sp, #0
 8016600:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016608:	4618      	mov	r0, r3
 801660a:	f7fe fec9 	bl	80153a0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801660e:	bf00      	nop
 8016610:	3708      	adds	r7, #8
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}

08016616 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016616:	b580      	push	{r7, lr}
 8016618:	b084      	sub	sp, #16
 801661a:	af00      	add	r7, sp, #0
 801661c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801661e:	2301      	movs	r3, #1
 8016620:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	795b      	ldrb	r3, [r3, #5]
 8016626:	2b02      	cmp	r3, #2
 8016628:	d001      	beq.n	801662e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801662a:	f7ee fae1 	bl	8004bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016634:	7bfa      	ldrb	r2, [r7, #15]
 8016636:	4611      	mov	r1, r2
 8016638:	4618      	mov	r0, r3
 801663a:	f7fe fe73 	bl	8015324 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016644:	4618      	mov	r0, r3
 8016646:	f7fe fe1f 	bl	8015288 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801664a:	bf00      	nop
 801664c:	3710      	adds	r7, #16
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}
	...

08016654 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b082      	sub	sp, #8
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016662:	4618      	mov	r0, r3
 8016664:	f7fe fe6e 	bl	8015344 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	7a5b      	ldrb	r3, [r3, #9]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d005      	beq.n	801667c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016670:	4b04      	ldr	r3, [pc, #16]	; (8016684 <HAL_PCD_SuspendCallback+0x30>)
 8016672:	691b      	ldr	r3, [r3, #16]
 8016674:	4a03      	ldr	r2, [pc, #12]	; (8016684 <HAL_PCD_SuspendCallback+0x30>)
 8016676:	f043 0306 	orr.w	r3, r3, #6
 801667a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801667c:	bf00      	nop
 801667e:	3708      	adds	r7, #8
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}
 8016684:	e000ed00 	.word	0xe000ed00

08016688 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b082      	sub	sp, #8
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	7a5b      	ldrb	r3, [r3, #9]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d007      	beq.n	80166a8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016698:	4b08      	ldr	r3, [pc, #32]	; (80166bc <HAL_PCD_ResumeCallback+0x34>)
 801669a:	691b      	ldr	r3, [r3, #16]
 801669c:	4a07      	ldr	r2, [pc, #28]	; (80166bc <HAL_PCD_ResumeCallback+0x34>)
 801669e:	f023 0306 	bic.w	r3, r3, #6
 80166a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80166a4:	f000 f9f8 	bl	8016a98 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80166ae:	4618      	mov	r0, r3
 80166b0:	f7fe fe5e 	bl	8015370 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80166b4:	bf00      	nop
 80166b6:	3708      	adds	r7, #8
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}
 80166bc:	e000ed00 	.word	0xe000ed00

080166c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80166c8:	4a2b      	ldr	r2, [pc, #172]	; (8016778 <USBD_LL_Init+0xb8>)
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	4a29      	ldr	r2, [pc, #164]	; (8016778 <USBD_LL_Init+0xb8>)
 80166d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80166d8:	4b27      	ldr	r3, [pc, #156]	; (8016778 <USBD_LL_Init+0xb8>)
 80166da:	4a28      	ldr	r2, [pc, #160]	; (801677c <USBD_LL_Init+0xbc>)
 80166dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80166de:	4b26      	ldr	r3, [pc, #152]	; (8016778 <USBD_LL_Init+0xb8>)
 80166e0:	2208      	movs	r2, #8
 80166e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80166e4:	4b24      	ldr	r3, [pc, #144]	; (8016778 <USBD_LL_Init+0xb8>)
 80166e6:	2202      	movs	r2, #2
 80166e8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80166ea:	4b23      	ldr	r3, [pc, #140]	; (8016778 <USBD_LL_Init+0xb8>)
 80166ec:	2202      	movs	r2, #2
 80166ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80166f0:	4b21      	ldr	r3, [pc, #132]	; (8016778 <USBD_LL_Init+0xb8>)
 80166f2:	2200      	movs	r2, #0
 80166f4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80166f6:	4b20      	ldr	r3, [pc, #128]	; (8016778 <USBD_LL_Init+0xb8>)
 80166f8:	2200      	movs	r2, #0
 80166fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80166fc:	4b1e      	ldr	r3, [pc, #120]	; (8016778 <USBD_LL_Init+0xb8>)
 80166fe:	2200      	movs	r2, #0
 8016700:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8016702:	4b1d      	ldr	r3, [pc, #116]	; (8016778 <USBD_LL_Init+0xb8>)
 8016704:	2200      	movs	r2, #0
 8016706:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016708:	481b      	ldr	r0, [pc, #108]	; (8016778 <USBD_LL_Init+0xb8>)
 801670a:	f7f4 f815 	bl	800a738 <HAL_PCD_Init>
 801670e:	4603      	mov	r3, r0
 8016710:	2b00      	cmp	r3, #0
 8016712:	d001      	beq.n	8016718 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8016714:	f7ee fa6c 	bl	8004bf0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801671e:	2318      	movs	r3, #24
 8016720:	2200      	movs	r2, #0
 8016722:	2100      	movs	r1, #0
 8016724:	f7f5 fccf 	bl	800c0c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801672e:	2358      	movs	r3, #88	; 0x58
 8016730:	2200      	movs	r2, #0
 8016732:	2180      	movs	r1, #128	; 0x80
 8016734:	f7f5 fcc7 	bl	800c0c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801673e:	23c0      	movs	r3, #192	; 0xc0
 8016740:	2200      	movs	r2, #0
 8016742:	2181      	movs	r1, #129	; 0x81
 8016744:	f7f5 fcbf 	bl	800c0c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801674e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016752:	2200      	movs	r2, #0
 8016754:	2101      	movs	r1, #1
 8016756:	f7f5 fcb6 	bl	800c0c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016764:	2200      	movs	r2, #0
 8016766:	2182      	movs	r1, #130	; 0x82
 8016768:	f7f5 fcad 	bl	800c0c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801676c:	2300      	movs	r3, #0
}
 801676e:	4618      	mov	r0, r3
 8016770:	3708      	adds	r7, #8
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}
 8016776:	bf00      	nop
 8016778:	200030e0 	.word	0x200030e0
 801677c:	40005c00 	.word	0x40005c00

08016780 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016788:	2300      	movs	r3, #0
 801678a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801678c:	2300      	movs	r3, #0
 801678e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016796:	4618      	mov	r0, r3
 8016798:	f7f4 f89c 	bl	800a8d4 <HAL_PCD_Start>
 801679c:	4603      	mov	r3, r0
 801679e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167a0:	7bfb      	ldrb	r3, [r7, #15]
 80167a2:	4618      	mov	r0, r3
 80167a4:	f000 f97e 	bl	8016aa4 <USBD_Get_USB_Status>
 80167a8:	4603      	mov	r3, r0
 80167aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80167ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80167ae:	4618      	mov	r0, r3
 80167b0:	3710      	adds	r7, #16
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}

080167b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80167b6:	b580      	push	{r7, lr}
 80167b8:	b084      	sub	sp, #16
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	6078      	str	r0, [r7, #4]
 80167be:	4608      	mov	r0, r1
 80167c0:	4611      	mov	r1, r2
 80167c2:	461a      	mov	r2, r3
 80167c4:	4603      	mov	r3, r0
 80167c6:	70fb      	strb	r3, [r7, #3]
 80167c8:	460b      	mov	r3, r1
 80167ca:	70bb      	strb	r3, [r7, #2]
 80167cc:	4613      	mov	r3, r2
 80167ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167d0:	2300      	movs	r3, #0
 80167d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167d4:	2300      	movs	r3, #0
 80167d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80167de:	78bb      	ldrb	r3, [r7, #2]
 80167e0:	883a      	ldrh	r2, [r7, #0]
 80167e2:	78f9      	ldrb	r1, [r7, #3]
 80167e4:	f7f4 f9e3 	bl	800abae <HAL_PCD_EP_Open>
 80167e8:	4603      	mov	r3, r0
 80167ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167ec:	7bfb      	ldrb	r3, [r7, #15]
 80167ee:	4618      	mov	r0, r3
 80167f0:	f000 f958 	bl	8016aa4 <USBD_Get_USB_Status>
 80167f4:	4603      	mov	r3, r0
 80167f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80167f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80167fa:	4618      	mov	r0, r3
 80167fc:	3710      	adds	r7, #16
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}

08016802 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016802:	b580      	push	{r7, lr}
 8016804:	b084      	sub	sp, #16
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]
 801680a:	460b      	mov	r3, r1
 801680c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801680e:	2300      	movs	r3, #0
 8016810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016812:	2300      	movs	r3, #0
 8016814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801681c:	78fa      	ldrb	r2, [r7, #3]
 801681e:	4611      	mov	r1, r2
 8016820:	4618      	mov	r0, r3
 8016822:	f7f4 fa21 	bl	800ac68 <HAL_PCD_EP_Close>
 8016826:	4603      	mov	r3, r0
 8016828:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801682a:	7bfb      	ldrb	r3, [r7, #15]
 801682c:	4618      	mov	r0, r3
 801682e:	f000 f939 	bl	8016aa4 <USBD_Get_USB_Status>
 8016832:	4603      	mov	r3, r0
 8016834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016836:	7bbb      	ldrb	r3, [r7, #14]
}
 8016838:	4618      	mov	r0, r3
 801683a:	3710      	adds	r7, #16
 801683c:	46bd      	mov	sp, r7
 801683e:	bd80      	pop	{r7, pc}

08016840 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b084      	sub	sp, #16
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
 8016848:	460b      	mov	r3, r1
 801684a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801684c:	2300      	movs	r3, #0
 801684e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016850:	2300      	movs	r3, #0
 8016852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801685a:	78fa      	ldrb	r2, [r7, #3]
 801685c:	4611      	mov	r1, r2
 801685e:	4618      	mov	r0, r3
 8016860:	f7f4 faca 	bl	800adf8 <HAL_PCD_EP_SetStall>
 8016864:	4603      	mov	r3, r0
 8016866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016868:	7bfb      	ldrb	r3, [r7, #15]
 801686a:	4618      	mov	r0, r3
 801686c:	f000 f91a 	bl	8016aa4 <USBD_Get_USB_Status>
 8016870:	4603      	mov	r3, r0
 8016872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016874:	7bbb      	ldrb	r3, [r7, #14]
}
 8016876:	4618      	mov	r0, r3
 8016878:	3710      	adds	r7, #16
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}

0801687e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801687e:	b580      	push	{r7, lr}
 8016880:	b084      	sub	sp, #16
 8016882:	af00      	add	r7, sp, #0
 8016884:	6078      	str	r0, [r7, #4]
 8016886:	460b      	mov	r3, r1
 8016888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801688a:	2300      	movs	r3, #0
 801688c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801688e:	2300      	movs	r3, #0
 8016890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016898:	78fa      	ldrb	r2, [r7, #3]
 801689a:	4611      	mov	r1, r2
 801689c:	4618      	mov	r0, r3
 801689e:	f7f4 fafd 	bl	800ae9c <HAL_PCD_EP_ClrStall>
 80168a2:	4603      	mov	r3, r0
 80168a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168a6:	7bfb      	ldrb	r3, [r7, #15]
 80168a8:	4618      	mov	r0, r3
 80168aa:	f000 f8fb 	bl	8016aa4 <USBD_Get_USB_Status>
 80168ae:	4603      	mov	r3, r0
 80168b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80168b4:	4618      	mov	r0, r3
 80168b6:	3710      	adds	r7, #16
 80168b8:	46bd      	mov	sp, r7
 80168ba:	bd80      	pop	{r7, pc}

080168bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168bc:	b480      	push	{r7}
 80168be:	b085      	sub	sp, #20
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]
 80168c4:	460b      	mov	r3, r1
 80168c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80168ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80168d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	da0b      	bge.n	80168f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80168d8:	78fb      	ldrb	r3, [r7, #3]
 80168da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80168de:	68f9      	ldr	r1, [r7, #12]
 80168e0:	4613      	mov	r3, r2
 80168e2:	009b      	lsls	r3, r3, #2
 80168e4:	4413      	add	r3, r2
 80168e6:	00db      	lsls	r3, r3, #3
 80168e8:	440b      	add	r3, r1
 80168ea:	3312      	adds	r3, #18
 80168ec:	781b      	ldrb	r3, [r3, #0]
 80168ee:	e00b      	b.n	8016908 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80168f0:	78fb      	ldrb	r3, [r7, #3]
 80168f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80168f6:	68f9      	ldr	r1, [r7, #12]
 80168f8:	4613      	mov	r3, r2
 80168fa:	009b      	lsls	r3, r3, #2
 80168fc:	4413      	add	r3, r2
 80168fe:	00db      	lsls	r3, r3, #3
 8016900:	440b      	add	r3, r1
 8016902:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8016906:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016908:	4618      	mov	r0, r3
 801690a:	3714      	adds	r7, #20
 801690c:	46bd      	mov	sp, r7
 801690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016912:	4770      	bx	lr

08016914 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b084      	sub	sp, #16
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
 801691c:	460b      	mov	r3, r1
 801691e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016920:	2300      	movs	r3, #0
 8016922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016924:	2300      	movs	r3, #0
 8016926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801692e:	78fa      	ldrb	r2, [r7, #3]
 8016930:	4611      	mov	r1, r2
 8016932:	4618      	mov	r0, r3
 8016934:	f7f4 f917 	bl	800ab66 <HAL_PCD_SetAddress>
 8016938:	4603      	mov	r3, r0
 801693a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801693c:	7bfb      	ldrb	r3, [r7, #15]
 801693e:	4618      	mov	r0, r3
 8016940:	f000 f8b0 	bl	8016aa4 <USBD_Get_USB_Status>
 8016944:	4603      	mov	r3, r0
 8016946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016948:	7bbb      	ldrb	r3, [r7, #14]
}
 801694a:	4618      	mov	r0, r3
 801694c:	3710      	adds	r7, #16
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}

08016952 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016952:	b580      	push	{r7, lr}
 8016954:	b086      	sub	sp, #24
 8016956:	af00      	add	r7, sp, #0
 8016958:	60f8      	str	r0, [r7, #12]
 801695a:	607a      	str	r2, [r7, #4]
 801695c:	603b      	str	r3, [r7, #0]
 801695e:	460b      	mov	r3, r1
 8016960:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016962:	2300      	movs	r3, #0
 8016964:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016966:	2300      	movs	r3, #0
 8016968:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016970:	7af9      	ldrb	r1, [r7, #11]
 8016972:	683b      	ldr	r3, [r7, #0]
 8016974:	687a      	ldr	r2, [r7, #4]
 8016976:	f7f4 fa08 	bl	800ad8a <HAL_PCD_EP_Transmit>
 801697a:	4603      	mov	r3, r0
 801697c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801697e:	7dfb      	ldrb	r3, [r7, #23]
 8016980:	4618      	mov	r0, r3
 8016982:	f000 f88f 	bl	8016aa4 <USBD_Get_USB_Status>
 8016986:	4603      	mov	r3, r0
 8016988:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801698a:	7dbb      	ldrb	r3, [r7, #22]
}
 801698c:	4618      	mov	r0, r3
 801698e:	3718      	adds	r7, #24
 8016990:	46bd      	mov	sp, r7
 8016992:	bd80      	pop	{r7, pc}

08016994 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b086      	sub	sp, #24
 8016998:	af00      	add	r7, sp, #0
 801699a:	60f8      	str	r0, [r7, #12]
 801699c:	607a      	str	r2, [r7, #4]
 801699e:	603b      	str	r3, [r7, #0]
 80169a0:	460b      	mov	r3, r1
 80169a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169a4:	2300      	movs	r3, #0
 80169a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169a8:	2300      	movs	r3, #0
 80169aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80169b2:	7af9      	ldrb	r1, [r7, #11]
 80169b4:	683b      	ldr	r3, [r7, #0]
 80169b6:	687a      	ldr	r2, [r7, #4]
 80169b8:	f7f4 f99e 	bl	800acf8 <HAL_PCD_EP_Receive>
 80169bc:	4603      	mov	r3, r0
 80169be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169c0:	7dfb      	ldrb	r3, [r7, #23]
 80169c2:	4618      	mov	r0, r3
 80169c4:	f000 f86e 	bl	8016aa4 <USBD_Get_USB_Status>
 80169c8:	4603      	mov	r3, r0
 80169ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80169cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80169ce:	4618      	mov	r0, r3
 80169d0:	3718      	adds	r7, #24
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}

080169d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169d6:	b580      	push	{r7, lr}
 80169d8:	b082      	sub	sp, #8
 80169da:	af00      	add	r7, sp, #0
 80169dc:	6078      	str	r0, [r7, #4]
 80169de:	460b      	mov	r3, r1
 80169e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80169e8:	78fa      	ldrb	r2, [r7, #3]
 80169ea:	4611      	mov	r1, r2
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7f4 f9b4 	bl	800ad5a <HAL_PCD_EP_GetRxCount>
 80169f2:	4603      	mov	r3, r0
}
 80169f4:	4618      	mov	r0, r3
 80169f6:	3708      	adds	r7, #8
 80169f8:	46bd      	mov	sp, r7
 80169fa:	bd80      	pop	{r7, pc}

080169fc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b082      	sub	sp, #8
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
 8016a04:	460b      	mov	r3, r1
 8016a06:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8016a08:	78fb      	ldrb	r3, [r7, #3]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d002      	beq.n	8016a14 <HAL_PCDEx_LPM_Callback+0x18>
 8016a0e:	2b01      	cmp	r3, #1
 8016a10:	d013      	beq.n	8016a3a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8016a12:	e023      	b.n	8016a5c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	7a5b      	ldrb	r3, [r3, #9]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d007      	beq.n	8016a2c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8016a1c:	f000 f83c 	bl	8016a98 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016a20:	4b10      	ldr	r3, [pc, #64]	; (8016a64 <HAL_PCDEx_LPM_Callback+0x68>)
 8016a22:	691b      	ldr	r3, [r3, #16]
 8016a24:	4a0f      	ldr	r2, [pc, #60]	; (8016a64 <HAL_PCDEx_LPM_Callback+0x68>)
 8016a26:	f023 0306 	bic.w	r3, r3, #6
 8016a2a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7fe fc9c 	bl	8015370 <USBD_LL_Resume>
    break;
 8016a38:	e010      	b.n	8016a5c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7fe fc7f 	bl	8015344 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	7a5b      	ldrb	r3, [r3, #9]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d005      	beq.n	8016a5a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016a4e:	4b05      	ldr	r3, [pc, #20]	; (8016a64 <HAL_PCDEx_LPM_Callback+0x68>)
 8016a50:	691b      	ldr	r3, [r3, #16]
 8016a52:	4a04      	ldr	r2, [pc, #16]	; (8016a64 <HAL_PCDEx_LPM_Callback+0x68>)
 8016a54:	f043 0306 	orr.w	r3, r3, #6
 8016a58:	6113      	str	r3, [r2, #16]
    break;
 8016a5a:	bf00      	nop
}
 8016a5c:	bf00      	nop
 8016a5e:	3708      	adds	r7, #8
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}
 8016a64:	e000ed00 	.word	0xe000ed00

08016a68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016a68:	b480      	push	{r7}
 8016a6a:	b083      	sub	sp, #12
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016a70:	4b03      	ldr	r3, [pc, #12]	; (8016a80 <USBD_static_malloc+0x18>)
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	370c      	adds	r7, #12
 8016a76:	46bd      	mov	sp, r7
 8016a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7c:	4770      	bx	lr
 8016a7e:	bf00      	nop
 8016a80:	200033bc 	.word	0x200033bc

08016a84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016a84:	b480      	push	{r7}
 8016a86:	b083      	sub	sp, #12
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]

}
 8016a8c:	bf00      	nop
 8016a8e:	370c      	adds	r7, #12
 8016a90:	46bd      	mov	sp, r7
 8016a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a96:	4770      	bx	lr

08016a98 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016a9c:	f7ed fafa 	bl	8004094 <SystemClock_Config>
}
 8016aa0:	bf00      	nop
 8016aa2:	bd80      	pop	{r7, pc}

08016aa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016aa4:	b480      	push	{r7}
 8016aa6:	b085      	sub	sp, #20
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	4603      	mov	r3, r0
 8016aac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016ab2:	79fb      	ldrb	r3, [r7, #7]
 8016ab4:	2b03      	cmp	r3, #3
 8016ab6:	d817      	bhi.n	8016ae8 <USBD_Get_USB_Status+0x44>
 8016ab8:	a201      	add	r2, pc, #4	; (adr r2, 8016ac0 <USBD_Get_USB_Status+0x1c>)
 8016aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016abe:	bf00      	nop
 8016ac0:	08016ad1 	.word	0x08016ad1
 8016ac4:	08016ad7 	.word	0x08016ad7
 8016ac8:	08016add 	.word	0x08016add
 8016acc:	08016ae3 	.word	0x08016ae3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8016ad4:	e00b      	b.n	8016aee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016ad6:	2303      	movs	r3, #3
 8016ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8016ada:	e008      	b.n	8016aee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016adc:	2301      	movs	r3, #1
 8016ade:	73fb      	strb	r3, [r7, #15]
    break;
 8016ae0:	e005      	b.n	8016aee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016ae2:	2303      	movs	r3, #3
 8016ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8016ae6:	e002      	b.n	8016aee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016ae8:	2303      	movs	r3, #3
 8016aea:	73fb      	strb	r3, [r7, #15]
    break;
 8016aec:	bf00      	nop
  }
  return usb_status;
 8016aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8016af0:	4618      	mov	r0, r3
 8016af2:	3714      	adds	r7, #20
 8016af4:	46bd      	mov	sp, r7
 8016af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afa:	4770      	bx	lr

08016afc <__cvt>:
 8016afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016b00:	ec55 4b10 	vmov	r4, r5, d0
 8016b04:	2d00      	cmp	r5, #0
 8016b06:	460e      	mov	r6, r1
 8016b08:	4619      	mov	r1, r3
 8016b0a:	462b      	mov	r3, r5
 8016b0c:	bfbb      	ittet	lt
 8016b0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016b12:	461d      	movlt	r5, r3
 8016b14:	2300      	movge	r3, #0
 8016b16:	232d      	movlt	r3, #45	; 0x2d
 8016b18:	700b      	strb	r3, [r1, #0]
 8016b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016b20:	4691      	mov	r9, r2
 8016b22:	f023 0820 	bic.w	r8, r3, #32
 8016b26:	bfbc      	itt	lt
 8016b28:	4622      	movlt	r2, r4
 8016b2a:	4614      	movlt	r4, r2
 8016b2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016b30:	d005      	beq.n	8016b3e <__cvt+0x42>
 8016b32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016b36:	d100      	bne.n	8016b3a <__cvt+0x3e>
 8016b38:	3601      	adds	r6, #1
 8016b3a:	2102      	movs	r1, #2
 8016b3c:	e000      	b.n	8016b40 <__cvt+0x44>
 8016b3e:	2103      	movs	r1, #3
 8016b40:	ab03      	add	r3, sp, #12
 8016b42:	9301      	str	r3, [sp, #4]
 8016b44:	ab02      	add	r3, sp, #8
 8016b46:	9300      	str	r3, [sp, #0]
 8016b48:	ec45 4b10 	vmov	d0, r4, r5
 8016b4c:	4653      	mov	r3, sl
 8016b4e:	4632      	mov	r2, r6
 8016b50:	f001 f88e 	bl	8017c70 <_dtoa_r>
 8016b54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016b58:	4607      	mov	r7, r0
 8016b5a:	d102      	bne.n	8016b62 <__cvt+0x66>
 8016b5c:	f019 0f01 	tst.w	r9, #1
 8016b60:	d022      	beq.n	8016ba8 <__cvt+0xac>
 8016b62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016b66:	eb07 0906 	add.w	r9, r7, r6
 8016b6a:	d110      	bne.n	8016b8e <__cvt+0x92>
 8016b6c:	783b      	ldrb	r3, [r7, #0]
 8016b6e:	2b30      	cmp	r3, #48	; 0x30
 8016b70:	d10a      	bne.n	8016b88 <__cvt+0x8c>
 8016b72:	2200      	movs	r2, #0
 8016b74:	2300      	movs	r3, #0
 8016b76:	4620      	mov	r0, r4
 8016b78:	4629      	mov	r1, r5
 8016b7a:	f7e9 ffcd 	bl	8000b18 <__aeabi_dcmpeq>
 8016b7e:	b918      	cbnz	r0, 8016b88 <__cvt+0x8c>
 8016b80:	f1c6 0601 	rsb	r6, r6, #1
 8016b84:	f8ca 6000 	str.w	r6, [sl]
 8016b88:	f8da 3000 	ldr.w	r3, [sl]
 8016b8c:	4499      	add	r9, r3
 8016b8e:	2200      	movs	r2, #0
 8016b90:	2300      	movs	r3, #0
 8016b92:	4620      	mov	r0, r4
 8016b94:	4629      	mov	r1, r5
 8016b96:	f7e9 ffbf 	bl	8000b18 <__aeabi_dcmpeq>
 8016b9a:	b108      	cbz	r0, 8016ba0 <__cvt+0xa4>
 8016b9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8016ba0:	2230      	movs	r2, #48	; 0x30
 8016ba2:	9b03      	ldr	r3, [sp, #12]
 8016ba4:	454b      	cmp	r3, r9
 8016ba6:	d307      	bcc.n	8016bb8 <__cvt+0xbc>
 8016ba8:	9b03      	ldr	r3, [sp, #12]
 8016baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016bac:	1bdb      	subs	r3, r3, r7
 8016bae:	4638      	mov	r0, r7
 8016bb0:	6013      	str	r3, [r2, #0]
 8016bb2:	b004      	add	sp, #16
 8016bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bb8:	1c59      	adds	r1, r3, #1
 8016bba:	9103      	str	r1, [sp, #12]
 8016bbc:	701a      	strb	r2, [r3, #0]
 8016bbe:	e7f0      	b.n	8016ba2 <__cvt+0xa6>

08016bc0 <__exponent>:
 8016bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	2900      	cmp	r1, #0
 8016bc6:	bfb8      	it	lt
 8016bc8:	4249      	neglt	r1, r1
 8016bca:	f803 2b02 	strb.w	r2, [r3], #2
 8016bce:	bfb4      	ite	lt
 8016bd0:	222d      	movlt	r2, #45	; 0x2d
 8016bd2:	222b      	movge	r2, #43	; 0x2b
 8016bd4:	2909      	cmp	r1, #9
 8016bd6:	7042      	strb	r2, [r0, #1]
 8016bd8:	dd2a      	ble.n	8016c30 <__exponent+0x70>
 8016bda:	f10d 0207 	add.w	r2, sp, #7
 8016bde:	4617      	mov	r7, r2
 8016be0:	260a      	movs	r6, #10
 8016be2:	4694      	mov	ip, r2
 8016be4:	fb91 f5f6 	sdiv	r5, r1, r6
 8016be8:	fb06 1415 	mls	r4, r6, r5, r1
 8016bec:	3430      	adds	r4, #48	; 0x30
 8016bee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016bf2:	460c      	mov	r4, r1
 8016bf4:	2c63      	cmp	r4, #99	; 0x63
 8016bf6:	f102 32ff 	add.w	r2, r2, #4294967295
 8016bfa:	4629      	mov	r1, r5
 8016bfc:	dcf1      	bgt.n	8016be2 <__exponent+0x22>
 8016bfe:	3130      	adds	r1, #48	; 0x30
 8016c00:	f1ac 0402 	sub.w	r4, ip, #2
 8016c04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016c08:	1c41      	adds	r1, r0, #1
 8016c0a:	4622      	mov	r2, r4
 8016c0c:	42ba      	cmp	r2, r7
 8016c0e:	d30a      	bcc.n	8016c26 <__exponent+0x66>
 8016c10:	f10d 0209 	add.w	r2, sp, #9
 8016c14:	eba2 020c 	sub.w	r2, r2, ip
 8016c18:	42bc      	cmp	r4, r7
 8016c1a:	bf88      	it	hi
 8016c1c:	2200      	movhi	r2, #0
 8016c1e:	4413      	add	r3, r2
 8016c20:	1a18      	subs	r0, r3, r0
 8016c22:	b003      	add	sp, #12
 8016c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c26:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016c2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016c2e:	e7ed      	b.n	8016c0c <__exponent+0x4c>
 8016c30:	2330      	movs	r3, #48	; 0x30
 8016c32:	3130      	adds	r1, #48	; 0x30
 8016c34:	7083      	strb	r3, [r0, #2]
 8016c36:	70c1      	strb	r1, [r0, #3]
 8016c38:	1d03      	adds	r3, r0, #4
 8016c3a:	e7f1      	b.n	8016c20 <__exponent+0x60>

08016c3c <_printf_float>:
 8016c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c40:	ed2d 8b02 	vpush	{d8}
 8016c44:	b08d      	sub	sp, #52	; 0x34
 8016c46:	460c      	mov	r4, r1
 8016c48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016c4c:	4616      	mov	r6, r2
 8016c4e:	461f      	mov	r7, r3
 8016c50:	4605      	mov	r5, r0
 8016c52:	f000 fef7 	bl	8017a44 <_localeconv_r>
 8016c56:	f8d0 a000 	ldr.w	sl, [r0]
 8016c5a:	4650      	mov	r0, sl
 8016c5c:	f7e9 fb30 	bl	80002c0 <strlen>
 8016c60:	2300      	movs	r3, #0
 8016c62:	930a      	str	r3, [sp, #40]	; 0x28
 8016c64:	6823      	ldr	r3, [r4, #0]
 8016c66:	9305      	str	r3, [sp, #20]
 8016c68:	f8d8 3000 	ldr.w	r3, [r8]
 8016c6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016c70:	3307      	adds	r3, #7
 8016c72:	f023 0307 	bic.w	r3, r3, #7
 8016c76:	f103 0208 	add.w	r2, r3, #8
 8016c7a:	f8c8 2000 	str.w	r2, [r8]
 8016c7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016c82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016c86:	9307      	str	r3, [sp, #28]
 8016c88:	f8cd 8018 	str.w	r8, [sp, #24]
 8016c8c:	ee08 0a10 	vmov	s16, r0
 8016c90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016c98:	4b9e      	ldr	r3, [pc, #632]	; (8016f14 <_printf_float+0x2d8>)
 8016c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8016c9e:	f7e9 ff6d 	bl	8000b7c <__aeabi_dcmpun>
 8016ca2:	bb88      	cbnz	r0, 8016d08 <_printf_float+0xcc>
 8016ca4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016ca8:	4b9a      	ldr	r3, [pc, #616]	; (8016f14 <_printf_float+0x2d8>)
 8016caa:	f04f 32ff 	mov.w	r2, #4294967295
 8016cae:	f7e9 ff47 	bl	8000b40 <__aeabi_dcmple>
 8016cb2:	bb48      	cbnz	r0, 8016d08 <_printf_float+0xcc>
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	4640      	mov	r0, r8
 8016cba:	4649      	mov	r1, r9
 8016cbc:	f7e9 ff36 	bl	8000b2c <__aeabi_dcmplt>
 8016cc0:	b110      	cbz	r0, 8016cc8 <_printf_float+0x8c>
 8016cc2:	232d      	movs	r3, #45	; 0x2d
 8016cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016cc8:	4a93      	ldr	r2, [pc, #588]	; (8016f18 <_printf_float+0x2dc>)
 8016cca:	4b94      	ldr	r3, [pc, #592]	; (8016f1c <_printf_float+0x2e0>)
 8016ccc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016cd0:	bf94      	ite	ls
 8016cd2:	4690      	movls	r8, r2
 8016cd4:	4698      	movhi	r8, r3
 8016cd6:	2303      	movs	r3, #3
 8016cd8:	6123      	str	r3, [r4, #16]
 8016cda:	9b05      	ldr	r3, [sp, #20]
 8016cdc:	f023 0304 	bic.w	r3, r3, #4
 8016ce0:	6023      	str	r3, [r4, #0]
 8016ce2:	f04f 0900 	mov.w	r9, #0
 8016ce6:	9700      	str	r7, [sp, #0]
 8016ce8:	4633      	mov	r3, r6
 8016cea:	aa0b      	add	r2, sp, #44	; 0x2c
 8016cec:	4621      	mov	r1, r4
 8016cee:	4628      	mov	r0, r5
 8016cf0:	f000 f9da 	bl	80170a8 <_printf_common>
 8016cf4:	3001      	adds	r0, #1
 8016cf6:	f040 8090 	bne.w	8016e1a <_printf_float+0x1de>
 8016cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8016cfe:	b00d      	add	sp, #52	; 0x34
 8016d00:	ecbd 8b02 	vpop	{d8}
 8016d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d08:	4642      	mov	r2, r8
 8016d0a:	464b      	mov	r3, r9
 8016d0c:	4640      	mov	r0, r8
 8016d0e:	4649      	mov	r1, r9
 8016d10:	f7e9 ff34 	bl	8000b7c <__aeabi_dcmpun>
 8016d14:	b140      	cbz	r0, 8016d28 <_printf_float+0xec>
 8016d16:	464b      	mov	r3, r9
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	bfbc      	itt	lt
 8016d1c:	232d      	movlt	r3, #45	; 0x2d
 8016d1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016d22:	4a7f      	ldr	r2, [pc, #508]	; (8016f20 <_printf_float+0x2e4>)
 8016d24:	4b7f      	ldr	r3, [pc, #508]	; (8016f24 <_printf_float+0x2e8>)
 8016d26:	e7d1      	b.n	8016ccc <_printf_float+0x90>
 8016d28:	6863      	ldr	r3, [r4, #4]
 8016d2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016d2e:	9206      	str	r2, [sp, #24]
 8016d30:	1c5a      	adds	r2, r3, #1
 8016d32:	d13f      	bne.n	8016db4 <_printf_float+0x178>
 8016d34:	2306      	movs	r3, #6
 8016d36:	6063      	str	r3, [r4, #4]
 8016d38:	9b05      	ldr	r3, [sp, #20]
 8016d3a:	6861      	ldr	r1, [r4, #4]
 8016d3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016d40:	2300      	movs	r3, #0
 8016d42:	9303      	str	r3, [sp, #12]
 8016d44:	ab0a      	add	r3, sp, #40	; 0x28
 8016d46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016d4a:	ab09      	add	r3, sp, #36	; 0x24
 8016d4c:	ec49 8b10 	vmov	d0, r8, r9
 8016d50:	9300      	str	r3, [sp, #0]
 8016d52:	6022      	str	r2, [r4, #0]
 8016d54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016d58:	4628      	mov	r0, r5
 8016d5a:	f7ff fecf 	bl	8016afc <__cvt>
 8016d5e:	9b06      	ldr	r3, [sp, #24]
 8016d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016d62:	2b47      	cmp	r3, #71	; 0x47
 8016d64:	4680      	mov	r8, r0
 8016d66:	d108      	bne.n	8016d7a <_printf_float+0x13e>
 8016d68:	1cc8      	adds	r0, r1, #3
 8016d6a:	db02      	blt.n	8016d72 <_printf_float+0x136>
 8016d6c:	6863      	ldr	r3, [r4, #4]
 8016d6e:	4299      	cmp	r1, r3
 8016d70:	dd41      	ble.n	8016df6 <_printf_float+0x1ba>
 8016d72:	f1ab 0302 	sub.w	r3, fp, #2
 8016d76:	fa5f fb83 	uxtb.w	fp, r3
 8016d7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016d7e:	d820      	bhi.n	8016dc2 <_printf_float+0x186>
 8016d80:	3901      	subs	r1, #1
 8016d82:	465a      	mov	r2, fp
 8016d84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016d88:	9109      	str	r1, [sp, #36]	; 0x24
 8016d8a:	f7ff ff19 	bl	8016bc0 <__exponent>
 8016d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d90:	1813      	adds	r3, r2, r0
 8016d92:	2a01      	cmp	r2, #1
 8016d94:	4681      	mov	r9, r0
 8016d96:	6123      	str	r3, [r4, #16]
 8016d98:	dc02      	bgt.n	8016da0 <_printf_float+0x164>
 8016d9a:	6822      	ldr	r2, [r4, #0]
 8016d9c:	07d2      	lsls	r2, r2, #31
 8016d9e:	d501      	bpl.n	8016da4 <_printf_float+0x168>
 8016da0:	3301      	adds	r3, #1
 8016da2:	6123      	str	r3, [r4, #16]
 8016da4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d09c      	beq.n	8016ce6 <_printf_float+0xaa>
 8016dac:	232d      	movs	r3, #45	; 0x2d
 8016dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016db2:	e798      	b.n	8016ce6 <_printf_float+0xaa>
 8016db4:	9a06      	ldr	r2, [sp, #24]
 8016db6:	2a47      	cmp	r2, #71	; 0x47
 8016db8:	d1be      	bne.n	8016d38 <_printf_float+0xfc>
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d1bc      	bne.n	8016d38 <_printf_float+0xfc>
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	e7b9      	b.n	8016d36 <_printf_float+0xfa>
 8016dc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016dc6:	d118      	bne.n	8016dfa <_printf_float+0x1be>
 8016dc8:	2900      	cmp	r1, #0
 8016dca:	6863      	ldr	r3, [r4, #4]
 8016dcc:	dd0b      	ble.n	8016de6 <_printf_float+0x1aa>
 8016dce:	6121      	str	r1, [r4, #16]
 8016dd0:	b913      	cbnz	r3, 8016dd8 <_printf_float+0x19c>
 8016dd2:	6822      	ldr	r2, [r4, #0]
 8016dd4:	07d0      	lsls	r0, r2, #31
 8016dd6:	d502      	bpl.n	8016dde <_printf_float+0x1a2>
 8016dd8:	3301      	adds	r3, #1
 8016dda:	440b      	add	r3, r1
 8016ddc:	6123      	str	r3, [r4, #16]
 8016dde:	65a1      	str	r1, [r4, #88]	; 0x58
 8016de0:	f04f 0900 	mov.w	r9, #0
 8016de4:	e7de      	b.n	8016da4 <_printf_float+0x168>
 8016de6:	b913      	cbnz	r3, 8016dee <_printf_float+0x1b2>
 8016de8:	6822      	ldr	r2, [r4, #0]
 8016dea:	07d2      	lsls	r2, r2, #31
 8016dec:	d501      	bpl.n	8016df2 <_printf_float+0x1b6>
 8016dee:	3302      	adds	r3, #2
 8016df0:	e7f4      	b.n	8016ddc <_printf_float+0x1a0>
 8016df2:	2301      	movs	r3, #1
 8016df4:	e7f2      	b.n	8016ddc <_printf_float+0x1a0>
 8016df6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dfc:	4299      	cmp	r1, r3
 8016dfe:	db05      	blt.n	8016e0c <_printf_float+0x1d0>
 8016e00:	6823      	ldr	r3, [r4, #0]
 8016e02:	6121      	str	r1, [r4, #16]
 8016e04:	07d8      	lsls	r0, r3, #31
 8016e06:	d5ea      	bpl.n	8016dde <_printf_float+0x1a2>
 8016e08:	1c4b      	adds	r3, r1, #1
 8016e0a:	e7e7      	b.n	8016ddc <_printf_float+0x1a0>
 8016e0c:	2900      	cmp	r1, #0
 8016e0e:	bfd4      	ite	le
 8016e10:	f1c1 0202 	rsble	r2, r1, #2
 8016e14:	2201      	movgt	r2, #1
 8016e16:	4413      	add	r3, r2
 8016e18:	e7e0      	b.n	8016ddc <_printf_float+0x1a0>
 8016e1a:	6823      	ldr	r3, [r4, #0]
 8016e1c:	055a      	lsls	r2, r3, #21
 8016e1e:	d407      	bmi.n	8016e30 <_printf_float+0x1f4>
 8016e20:	6923      	ldr	r3, [r4, #16]
 8016e22:	4642      	mov	r2, r8
 8016e24:	4631      	mov	r1, r6
 8016e26:	4628      	mov	r0, r5
 8016e28:	47b8      	blx	r7
 8016e2a:	3001      	adds	r0, #1
 8016e2c:	d12c      	bne.n	8016e88 <_printf_float+0x24c>
 8016e2e:	e764      	b.n	8016cfa <_printf_float+0xbe>
 8016e30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016e34:	f240 80e0 	bls.w	8016ff8 <_printf_float+0x3bc>
 8016e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	2300      	movs	r3, #0
 8016e40:	f7e9 fe6a 	bl	8000b18 <__aeabi_dcmpeq>
 8016e44:	2800      	cmp	r0, #0
 8016e46:	d034      	beq.n	8016eb2 <_printf_float+0x276>
 8016e48:	4a37      	ldr	r2, [pc, #220]	; (8016f28 <_printf_float+0x2ec>)
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	4631      	mov	r1, r6
 8016e4e:	4628      	mov	r0, r5
 8016e50:	47b8      	blx	r7
 8016e52:	3001      	adds	r0, #1
 8016e54:	f43f af51 	beq.w	8016cfa <_printf_float+0xbe>
 8016e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016e5c:	429a      	cmp	r2, r3
 8016e5e:	db02      	blt.n	8016e66 <_printf_float+0x22a>
 8016e60:	6823      	ldr	r3, [r4, #0]
 8016e62:	07d8      	lsls	r0, r3, #31
 8016e64:	d510      	bpl.n	8016e88 <_printf_float+0x24c>
 8016e66:	ee18 3a10 	vmov	r3, s16
 8016e6a:	4652      	mov	r2, sl
 8016e6c:	4631      	mov	r1, r6
 8016e6e:	4628      	mov	r0, r5
 8016e70:	47b8      	blx	r7
 8016e72:	3001      	adds	r0, #1
 8016e74:	f43f af41 	beq.w	8016cfa <_printf_float+0xbe>
 8016e78:	f04f 0800 	mov.w	r8, #0
 8016e7c:	f104 091a 	add.w	r9, r4, #26
 8016e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e82:	3b01      	subs	r3, #1
 8016e84:	4543      	cmp	r3, r8
 8016e86:	dc09      	bgt.n	8016e9c <_printf_float+0x260>
 8016e88:	6823      	ldr	r3, [r4, #0]
 8016e8a:	079b      	lsls	r3, r3, #30
 8016e8c:	f100 8107 	bmi.w	801709e <_printf_float+0x462>
 8016e90:	68e0      	ldr	r0, [r4, #12]
 8016e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e94:	4298      	cmp	r0, r3
 8016e96:	bfb8      	it	lt
 8016e98:	4618      	movlt	r0, r3
 8016e9a:	e730      	b.n	8016cfe <_printf_float+0xc2>
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	464a      	mov	r2, r9
 8016ea0:	4631      	mov	r1, r6
 8016ea2:	4628      	mov	r0, r5
 8016ea4:	47b8      	blx	r7
 8016ea6:	3001      	adds	r0, #1
 8016ea8:	f43f af27 	beq.w	8016cfa <_printf_float+0xbe>
 8016eac:	f108 0801 	add.w	r8, r8, #1
 8016eb0:	e7e6      	b.n	8016e80 <_printf_float+0x244>
 8016eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	dc39      	bgt.n	8016f2c <_printf_float+0x2f0>
 8016eb8:	4a1b      	ldr	r2, [pc, #108]	; (8016f28 <_printf_float+0x2ec>)
 8016eba:	2301      	movs	r3, #1
 8016ebc:	4631      	mov	r1, r6
 8016ebe:	4628      	mov	r0, r5
 8016ec0:	47b8      	blx	r7
 8016ec2:	3001      	adds	r0, #1
 8016ec4:	f43f af19 	beq.w	8016cfa <_printf_float+0xbe>
 8016ec8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016ecc:	4313      	orrs	r3, r2
 8016ece:	d102      	bne.n	8016ed6 <_printf_float+0x29a>
 8016ed0:	6823      	ldr	r3, [r4, #0]
 8016ed2:	07d9      	lsls	r1, r3, #31
 8016ed4:	d5d8      	bpl.n	8016e88 <_printf_float+0x24c>
 8016ed6:	ee18 3a10 	vmov	r3, s16
 8016eda:	4652      	mov	r2, sl
 8016edc:	4631      	mov	r1, r6
 8016ede:	4628      	mov	r0, r5
 8016ee0:	47b8      	blx	r7
 8016ee2:	3001      	adds	r0, #1
 8016ee4:	f43f af09 	beq.w	8016cfa <_printf_float+0xbe>
 8016ee8:	f04f 0900 	mov.w	r9, #0
 8016eec:	f104 0a1a 	add.w	sl, r4, #26
 8016ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ef2:	425b      	negs	r3, r3
 8016ef4:	454b      	cmp	r3, r9
 8016ef6:	dc01      	bgt.n	8016efc <_printf_float+0x2c0>
 8016ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016efa:	e792      	b.n	8016e22 <_printf_float+0x1e6>
 8016efc:	2301      	movs	r3, #1
 8016efe:	4652      	mov	r2, sl
 8016f00:	4631      	mov	r1, r6
 8016f02:	4628      	mov	r0, r5
 8016f04:	47b8      	blx	r7
 8016f06:	3001      	adds	r0, #1
 8016f08:	f43f aef7 	beq.w	8016cfa <_printf_float+0xbe>
 8016f0c:	f109 0901 	add.w	r9, r9, #1
 8016f10:	e7ee      	b.n	8016ef0 <_printf_float+0x2b4>
 8016f12:	bf00      	nop
 8016f14:	7fefffff 	.word	0x7fefffff
 8016f18:	0801dfc8 	.word	0x0801dfc8
 8016f1c:	0801dfcc 	.word	0x0801dfcc
 8016f20:	0801dfd0 	.word	0x0801dfd0
 8016f24:	0801dfd4 	.word	0x0801dfd4
 8016f28:	0801dfd8 	.word	0x0801dfd8
 8016f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016f30:	429a      	cmp	r2, r3
 8016f32:	bfa8      	it	ge
 8016f34:	461a      	movge	r2, r3
 8016f36:	2a00      	cmp	r2, #0
 8016f38:	4691      	mov	r9, r2
 8016f3a:	dc37      	bgt.n	8016fac <_printf_float+0x370>
 8016f3c:	f04f 0b00 	mov.w	fp, #0
 8016f40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016f44:	f104 021a 	add.w	r2, r4, #26
 8016f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016f4a:	9305      	str	r3, [sp, #20]
 8016f4c:	eba3 0309 	sub.w	r3, r3, r9
 8016f50:	455b      	cmp	r3, fp
 8016f52:	dc33      	bgt.n	8016fbc <_printf_float+0x380>
 8016f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016f58:	429a      	cmp	r2, r3
 8016f5a:	db3b      	blt.n	8016fd4 <_printf_float+0x398>
 8016f5c:	6823      	ldr	r3, [r4, #0]
 8016f5e:	07da      	lsls	r2, r3, #31
 8016f60:	d438      	bmi.n	8016fd4 <_printf_float+0x398>
 8016f62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016f66:	eba2 0903 	sub.w	r9, r2, r3
 8016f6a:	9b05      	ldr	r3, [sp, #20]
 8016f6c:	1ad2      	subs	r2, r2, r3
 8016f6e:	4591      	cmp	r9, r2
 8016f70:	bfa8      	it	ge
 8016f72:	4691      	movge	r9, r2
 8016f74:	f1b9 0f00 	cmp.w	r9, #0
 8016f78:	dc35      	bgt.n	8016fe6 <_printf_float+0x3aa>
 8016f7a:	f04f 0800 	mov.w	r8, #0
 8016f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016f82:	f104 0a1a 	add.w	sl, r4, #26
 8016f86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016f8a:	1a9b      	subs	r3, r3, r2
 8016f8c:	eba3 0309 	sub.w	r3, r3, r9
 8016f90:	4543      	cmp	r3, r8
 8016f92:	f77f af79 	ble.w	8016e88 <_printf_float+0x24c>
 8016f96:	2301      	movs	r3, #1
 8016f98:	4652      	mov	r2, sl
 8016f9a:	4631      	mov	r1, r6
 8016f9c:	4628      	mov	r0, r5
 8016f9e:	47b8      	blx	r7
 8016fa0:	3001      	adds	r0, #1
 8016fa2:	f43f aeaa 	beq.w	8016cfa <_printf_float+0xbe>
 8016fa6:	f108 0801 	add.w	r8, r8, #1
 8016faa:	e7ec      	b.n	8016f86 <_printf_float+0x34a>
 8016fac:	4613      	mov	r3, r2
 8016fae:	4631      	mov	r1, r6
 8016fb0:	4642      	mov	r2, r8
 8016fb2:	4628      	mov	r0, r5
 8016fb4:	47b8      	blx	r7
 8016fb6:	3001      	adds	r0, #1
 8016fb8:	d1c0      	bne.n	8016f3c <_printf_float+0x300>
 8016fba:	e69e      	b.n	8016cfa <_printf_float+0xbe>
 8016fbc:	2301      	movs	r3, #1
 8016fbe:	4631      	mov	r1, r6
 8016fc0:	4628      	mov	r0, r5
 8016fc2:	9205      	str	r2, [sp, #20]
 8016fc4:	47b8      	blx	r7
 8016fc6:	3001      	adds	r0, #1
 8016fc8:	f43f ae97 	beq.w	8016cfa <_printf_float+0xbe>
 8016fcc:	9a05      	ldr	r2, [sp, #20]
 8016fce:	f10b 0b01 	add.w	fp, fp, #1
 8016fd2:	e7b9      	b.n	8016f48 <_printf_float+0x30c>
 8016fd4:	ee18 3a10 	vmov	r3, s16
 8016fd8:	4652      	mov	r2, sl
 8016fda:	4631      	mov	r1, r6
 8016fdc:	4628      	mov	r0, r5
 8016fde:	47b8      	blx	r7
 8016fe0:	3001      	adds	r0, #1
 8016fe2:	d1be      	bne.n	8016f62 <_printf_float+0x326>
 8016fe4:	e689      	b.n	8016cfa <_printf_float+0xbe>
 8016fe6:	9a05      	ldr	r2, [sp, #20]
 8016fe8:	464b      	mov	r3, r9
 8016fea:	4442      	add	r2, r8
 8016fec:	4631      	mov	r1, r6
 8016fee:	4628      	mov	r0, r5
 8016ff0:	47b8      	blx	r7
 8016ff2:	3001      	adds	r0, #1
 8016ff4:	d1c1      	bne.n	8016f7a <_printf_float+0x33e>
 8016ff6:	e680      	b.n	8016cfa <_printf_float+0xbe>
 8016ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ffa:	2a01      	cmp	r2, #1
 8016ffc:	dc01      	bgt.n	8017002 <_printf_float+0x3c6>
 8016ffe:	07db      	lsls	r3, r3, #31
 8017000:	d53a      	bpl.n	8017078 <_printf_float+0x43c>
 8017002:	2301      	movs	r3, #1
 8017004:	4642      	mov	r2, r8
 8017006:	4631      	mov	r1, r6
 8017008:	4628      	mov	r0, r5
 801700a:	47b8      	blx	r7
 801700c:	3001      	adds	r0, #1
 801700e:	f43f ae74 	beq.w	8016cfa <_printf_float+0xbe>
 8017012:	ee18 3a10 	vmov	r3, s16
 8017016:	4652      	mov	r2, sl
 8017018:	4631      	mov	r1, r6
 801701a:	4628      	mov	r0, r5
 801701c:	47b8      	blx	r7
 801701e:	3001      	adds	r0, #1
 8017020:	f43f ae6b 	beq.w	8016cfa <_printf_float+0xbe>
 8017024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017028:	2200      	movs	r2, #0
 801702a:	2300      	movs	r3, #0
 801702c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8017030:	f7e9 fd72 	bl	8000b18 <__aeabi_dcmpeq>
 8017034:	b9d8      	cbnz	r0, 801706e <_printf_float+0x432>
 8017036:	f10a 33ff 	add.w	r3, sl, #4294967295
 801703a:	f108 0201 	add.w	r2, r8, #1
 801703e:	4631      	mov	r1, r6
 8017040:	4628      	mov	r0, r5
 8017042:	47b8      	blx	r7
 8017044:	3001      	adds	r0, #1
 8017046:	d10e      	bne.n	8017066 <_printf_float+0x42a>
 8017048:	e657      	b.n	8016cfa <_printf_float+0xbe>
 801704a:	2301      	movs	r3, #1
 801704c:	4652      	mov	r2, sl
 801704e:	4631      	mov	r1, r6
 8017050:	4628      	mov	r0, r5
 8017052:	47b8      	blx	r7
 8017054:	3001      	adds	r0, #1
 8017056:	f43f ae50 	beq.w	8016cfa <_printf_float+0xbe>
 801705a:	f108 0801 	add.w	r8, r8, #1
 801705e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017060:	3b01      	subs	r3, #1
 8017062:	4543      	cmp	r3, r8
 8017064:	dcf1      	bgt.n	801704a <_printf_float+0x40e>
 8017066:	464b      	mov	r3, r9
 8017068:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801706c:	e6da      	b.n	8016e24 <_printf_float+0x1e8>
 801706e:	f04f 0800 	mov.w	r8, #0
 8017072:	f104 0a1a 	add.w	sl, r4, #26
 8017076:	e7f2      	b.n	801705e <_printf_float+0x422>
 8017078:	2301      	movs	r3, #1
 801707a:	4642      	mov	r2, r8
 801707c:	e7df      	b.n	801703e <_printf_float+0x402>
 801707e:	2301      	movs	r3, #1
 8017080:	464a      	mov	r2, r9
 8017082:	4631      	mov	r1, r6
 8017084:	4628      	mov	r0, r5
 8017086:	47b8      	blx	r7
 8017088:	3001      	adds	r0, #1
 801708a:	f43f ae36 	beq.w	8016cfa <_printf_float+0xbe>
 801708e:	f108 0801 	add.w	r8, r8, #1
 8017092:	68e3      	ldr	r3, [r4, #12]
 8017094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017096:	1a5b      	subs	r3, r3, r1
 8017098:	4543      	cmp	r3, r8
 801709a:	dcf0      	bgt.n	801707e <_printf_float+0x442>
 801709c:	e6f8      	b.n	8016e90 <_printf_float+0x254>
 801709e:	f04f 0800 	mov.w	r8, #0
 80170a2:	f104 0919 	add.w	r9, r4, #25
 80170a6:	e7f4      	b.n	8017092 <_printf_float+0x456>

080170a8 <_printf_common>:
 80170a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170ac:	4616      	mov	r6, r2
 80170ae:	4699      	mov	r9, r3
 80170b0:	688a      	ldr	r2, [r1, #8]
 80170b2:	690b      	ldr	r3, [r1, #16]
 80170b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80170b8:	4293      	cmp	r3, r2
 80170ba:	bfb8      	it	lt
 80170bc:	4613      	movlt	r3, r2
 80170be:	6033      	str	r3, [r6, #0]
 80170c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80170c4:	4607      	mov	r7, r0
 80170c6:	460c      	mov	r4, r1
 80170c8:	b10a      	cbz	r2, 80170ce <_printf_common+0x26>
 80170ca:	3301      	adds	r3, #1
 80170cc:	6033      	str	r3, [r6, #0]
 80170ce:	6823      	ldr	r3, [r4, #0]
 80170d0:	0699      	lsls	r1, r3, #26
 80170d2:	bf42      	ittt	mi
 80170d4:	6833      	ldrmi	r3, [r6, #0]
 80170d6:	3302      	addmi	r3, #2
 80170d8:	6033      	strmi	r3, [r6, #0]
 80170da:	6825      	ldr	r5, [r4, #0]
 80170dc:	f015 0506 	ands.w	r5, r5, #6
 80170e0:	d106      	bne.n	80170f0 <_printf_common+0x48>
 80170e2:	f104 0a19 	add.w	sl, r4, #25
 80170e6:	68e3      	ldr	r3, [r4, #12]
 80170e8:	6832      	ldr	r2, [r6, #0]
 80170ea:	1a9b      	subs	r3, r3, r2
 80170ec:	42ab      	cmp	r3, r5
 80170ee:	dc26      	bgt.n	801713e <_printf_common+0x96>
 80170f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80170f4:	1e13      	subs	r3, r2, #0
 80170f6:	6822      	ldr	r2, [r4, #0]
 80170f8:	bf18      	it	ne
 80170fa:	2301      	movne	r3, #1
 80170fc:	0692      	lsls	r2, r2, #26
 80170fe:	d42b      	bmi.n	8017158 <_printf_common+0xb0>
 8017100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017104:	4649      	mov	r1, r9
 8017106:	4638      	mov	r0, r7
 8017108:	47c0      	blx	r8
 801710a:	3001      	adds	r0, #1
 801710c:	d01e      	beq.n	801714c <_printf_common+0xa4>
 801710e:	6823      	ldr	r3, [r4, #0]
 8017110:	6922      	ldr	r2, [r4, #16]
 8017112:	f003 0306 	and.w	r3, r3, #6
 8017116:	2b04      	cmp	r3, #4
 8017118:	bf02      	ittt	eq
 801711a:	68e5      	ldreq	r5, [r4, #12]
 801711c:	6833      	ldreq	r3, [r6, #0]
 801711e:	1aed      	subeq	r5, r5, r3
 8017120:	68a3      	ldr	r3, [r4, #8]
 8017122:	bf0c      	ite	eq
 8017124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017128:	2500      	movne	r5, #0
 801712a:	4293      	cmp	r3, r2
 801712c:	bfc4      	itt	gt
 801712e:	1a9b      	subgt	r3, r3, r2
 8017130:	18ed      	addgt	r5, r5, r3
 8017132:	2600      	movs	r6, #0
 8017134:	341a      	adds	r4, #26
 8017136:	42b5      	cmp	r5, r6
 8017138:	d11a      	bne.n	8017170 <_printf_common+0xc8>
 801713a:	2000      	movs	r0, #0
 801713c:	e008      	b.n	8017150 <_printf_common+0xa8>
 801713e:	2301      	movs	r3, #1
 8017140:	4652      	mov	r2, sl
 8017142:	4649      	mov	r1, r9
 8017144:	4638      	mov	r0, r7
 8017146:	47c0      	blx	r8
 8017148:	3001      	adds	r0, #1
 801714a:	d103      	bne.n	8017154 <_printf_common+0xac>
 801714c:	f04f 30ff 	mov.w	r0, #4294967295
 8017150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017154:	3501      	adds	r5, #1
 8017156:	e7c6      	b.n	80170e6 <_printf_common+0x3e>
 8017158:	18e1      	adds	r1, r4, r3
 801715a:	1c5a      	adds	r2, r3, #1
 801715c:	2030      	movs	r0, #48	; 0x30
 801715e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017162:	4422      	add	r2, r4
 8017164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801716c:	3302      	adds	r3, #2
 801716e:	e7c7      	b.n	8017100 <_printf_common+0x58>
 8017170:	2301      	movs	r3, #1
 8017172:	4622      	mov	r2, r4
 8017174:	4649      	mov	r1, r9
 8017176:	4638      	mov	r0, r7
 8017178:	47c0      	blx	r8
 801717a:	3001      	adds	r0, #1
 801717c:	d0e6      	beq.n	801714c <_printf_common+0xa4>
 801717e:	3601      	adds	r6, #1
 8017180:	e7d9      	b.n	8017136 <_printf_common+0x8e>
	...

08017184 <_printf_i>:
 8017184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017188:	7e0f      	ldrb	r7, [r1, #24]
 801718a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801718c:	2f78      	cmp	r7, #120	; 0x78
 801718e:	4691      	mov	r9, r2
 8017190:	4680      	mov	r8, r0
 8017192:	460c      	mov	r4, r1
 8017194:	469a      	mov	sl, r3
 8017196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801719a:	d807      	bhi.n	80171ac <_printf_i+0x28>
 801719c:	2f62      	cmp	r7, #98	; 0x62
 801719e:	d80a      	bhi.n	80171b6 <_printf_i+0x32>
 80171a0:	2f00      	cmp	r7, #0
 80171a2:	f000 80d4 	beq.w	801734e <_printf_i+0x1ca>
 80171a6:	2f58      	cmp	r7, #88	; 0x58
 80171a8:	f000 80c0 	beq.w	801732c <_printf_i+0x1a8>
 80171ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80171b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80171b4:	e03a      	b.n	801722c <_printf_i+0xa8>
 80171b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80171ba:	2b15      	cmp	r3, #21
 80171bc:	d8f6      	bhi.n	80171ac <_printf_i+0x28>
 80171be:	a101      	add	r1, pc, #4	; (adr r1, 80171c4 <_printf_i+0x40>)
 80171c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80171c4:	0801721d 	.word	0x0801721d
 80171c8:	08017231 	.word	0x08017231
 80171cc:	080171ad 	.word	0x080171ad
 80171d0:	080171ad 	.word	0x080171ad
 80171d4:	080171ad 	.word	0x080171ad
 80171d8:	080171ad 	.word	0x080171ad
 80171dc:	08017231 	.word	0x08017231
 80171e0:	080171ad 	.word	0x080171ad
 80171e4:	080171ad 	.word	0x080171ad
 80171e8:	080171ad 	.word	0x080171ad
 80171ec:	080171ad 	.word	0x080171ad
 80171f0:	08017335 	.word	0x08017335
 80171f4:	0801725d 	.word	0x0801725d
 80171f8:	080172ef 	.word	0x080172ef
 80171fc:	080171ad 	.word	0x080171ad
 8017200:	080171ad 	.word	0x080171ad
 8017204:	08017357 	.word	0x08017357
 8017208:	080171ad 	.word	0x080171ad
 801720c:	0801725d 	.word	0x0801725d
 8017210:	080171ad 	.word	0x080171ad
 8017214:	080171ad 	.word	0x080171ad
 8017218:	080172f7 	.word	0x080172f7
 801721c:	682b      	ldr	r3, [r5, #0]
 801721e:	1d1a      	adds	r2, r3, #4
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	602a      	str	r2, [r5, #0]
 8017224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801722c:	2301      	movs	r3, #1
 801722e:	e09f      	b.n	8017370 <_printf_i+0x1ec>
 8017230:	6820      	ldr	r0, [r4, #0]
 8017232:	682b      	ldr	r3, [r5, #0]
 8017234:	0607      	lsls	r7, r0, #24
 8017236:	f103 0104 	add.w	r1, r3, #4
 801723a:	6029      	str	r1, [r5, #0]
 801723c:	d501      	bpl.n	8017242 <_printf_i+0xbe>
 801723e:	681e      	ldr	r6, [r3, #0]
 8017240:	e003      	b.n	801724a <_printf_i+0xc6>
 8017242:	0646      	lsls	r6, r0, #25
 8017244:	d5fb      	bpl.n	801723e <_printf_i+0xba>
 8017246:	f9b3 6000 	ldrsh.w	r6, [r3]
 801724a:	2e00      	cmp	r6, #0
 801724c:	da03      	bge.n	8017256 <_printf_i+0xd2>
 801724e:	232d      	movs	r3, #45	; 0x2d
 8017250:	4276      	negs	r6, r6
 8017252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017256:	485a      	ldr	r0, [pc, #360]	; (80173c0 <_printf_i+0x23c>)
 8017258:	230a      	movs	r3, #10
 801725a:	e012      	b.n	8017282 <_printf_i+0xfe>
 801725c:	682b      	ldr	r3, [r5, #0]
 801725e:	6820      	ldr	r0, [r4, #0]
 8017260:	1d19      	adds	r1, r3, #4
 8017262:	6029      	str	r1, [r5, #0]
 8017264:	0605      	lsls	r5, r0, #24
 8017266:	d501      	bpl.n	801726c <_printf_i+0xe8>
 8017268:	681e      	ldr	r6, [r3, #0]
 801726a:	e002      	b.n	8017272 <_printf_i+0xee>
 801726c:	0641      	lsls	r1, r0, #25
 801726e:	d5fb      	bpl.n	8017268 <_printf_i+0xe4>
 8017270:	881e      	ldrh	r6, [r3, #0]
 8017272:	4853      	ldr	r0, [pc, #332]	; (80173c0 <_printf_i+0x23c>)
 8017274:	2f6f      	cmp	r7, #111	; 0x6f
 8017276:	bf0c      	ite	eq
 8017278:	2308      	moveq	r3, #8
 801727a:	230a      	movne	r3, #10
 801727c:	2100      	movs	r1, #0
 801727e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017282:	6865      	ldr	r5, [r4, #4]
 8017284:	60a5      	str	r5, [r4, #8]
 8017286:	2d00      	cmp	r5, #0
 8017288:	bfa2      	ittt	ge
 801728a:	6821      	ldrge	r1, [r4, #0]
 801728c:	f021 0104 	bicge.w	r1, r1, #4
 8017290:	6021      	strge	r1, [r4, #0]
 8017292:	b90e      	cbnz	r6, 8017298 <_printf_i+0x114>
 8017294:	2d00      	cmp	r5, #0
 8017296:	d04b      	beq.n	8017330 <_printf_i+0x1ac>
 8017298:	4615      	mov	r5, r2
 801729a:	fbb6 f1f3 	udiv	r1, r6, r3
 801729e:	fb03 6711 	mls	r7, r3, r1, r6
 80172a2:	5dc7      	ldrb	r7, [r0, r7]
 80172a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80172a8:	4637      	mov	r7, r6
 80172aa:	42bb      	cmp	r3, r7
 80172ac:	460e      	mov	r6, r1
 80172ae:	d9f4      	bls.n	801729a <_printf_i+0x116>
 80172b0:	2b08      	cmp	r3, #8
 80172b2:	d10b      	bne.n	80172cc <_printf_i+0x148>
 80172b4:	6823      	ldr	r3, [r4, #0]
 80172b6:	07de      	lsls	r6, r3, #31
 80172b8:	d508      	bpl.n	80172cc <_printf_i+0x148>
 80172ba:	6923      	ldr	r3, [r4, #16]
 80172bc:	6861      	ldr	r1, [r4, #4]
 80172be:	4299      	cmp	r1, r3
 80172c0:	bfde      	ittt	le
 80172c2:	2330      	movle	r3, #48	; 0x30
 80172c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80172c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80172cc:	1b52      	subs	r2, r2, r5
 80172ce:	6122      	str	r2, [r4, #16]
 80172d0:	f8cd a000 	str.w	sl, [sp]
 80172d4:	464b      	mov	r3, r9
 80172d6:	aa03      	add	r2, sp, #12
 80172d8:	4621      	mov	r1, r4
 80172da:	4640      	mov	r0, r8
 80172dc:	f7ff fee4 	bl	80170a8 <_printf_common>
 80172e0:	3001      	adds	r0, #1
 80172e2:	d14a      	bne.n	801737a <_printf_i+0x1f6>
 80172e4:	f04f 30ff 	mov.w	r0, #4294967295
 80172e8:	b004      	add	sp, #16
 80172ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172ee:	6823      	ldr	r3, [r4, #0]
 80172f0:	f043 0320 	orr.w	r3, r3, #32
 80172f4:	6023      	str	r3, [r4, #0]
 80172f6:	4833      	ldr	r0, [pc, #204]	; (80173c4 <_printf_i+0x240>)
 80172f8:	2778      	movs	r7, #120	; 0x78
 80172fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80172fe:	6823      	ldr	r3, [r4, #0]
 8017300:	6829      	ldr	r1, [r5, #0]
 8017302:	061f      	lsls	r7, r3, #24
 8017304:	f851 6b04 	ldr.w	r6, [r1], #4
 8017308:	d402      	bmi.n	8017310 <_printf_i+0x18c>
 801730a:	065f      	lsls	r7, r3, #25
 801730c:	bf48      	it	mi
 801730e:	b2b6      	uxthmi	r6, r6
 8017310:	07df      	lsls	r7, r3, #31
 8017312:	bf48      	it	mi
 8017314:	f043 0320 	orrmi.w	r3, r3, #32
 8017318:	6029      	str	r1, [r5, #0]
 801731a:	bf48      	it	mi
 801731c:	6023      	strmi	r3, [r4, #0]
 801731e:	b91e      	cbnz	r6, 8017328 <_printf_i+0x1a4>
 8017320:	6823      	ldr	r3, [r4, #0]
 8017322:	f023 0320 	bic.w	r3, r3, #32
 8017326:	6023      	str	r3, [r4, #0]
 8017328:	2310      	movs	r3, #16
 801732a:	e7a7      	b.n	801727c <_printf_i+0xf8>
 801732c:	4824      	ldr	r0, [pc, #144]	; (80173c0 <_printf_i+0x23c>)
 801732e:	e7e4      	b.n	80172fa <_printf_i+0x176>
 8017330:	4615      	mov	r5, r2
 8017332:	e7bd      	b.n	80172b0 <_printf_i+0x12c>
 8017334:	682b      	ldr	r3, [r5, #0]
 8017336:	6826      	ldr	r6, [r4, #0]
 8017338:	6961      	ldr	r1, [r4, #20]
 801733a:	1d18      	adds	r0, r3, #4
 801733c:	6028      	str	r0, [r5, #0]
 801733e:	0635      	lsls	r5, r6, #24
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	d501      	bpl.n	8017348 <_printf_i+0x1c4>
 8017344:	6019      	str	r1, [r3, #0]
 8017346:	e002      	b.n	801734e <_printf_i+0x1ca>
 8017348:	0670      	lsls	r0, r6, #25
 801734a:	d5fb      	bpl.n	8017344 <_printf_i+0x1c0>
 801734c:	8019      	strh	r1, [r3, #0]
 801734e:	2300      	movs	r3, #0
 8017350:	6123      	str	r3, [r4, #16]
 8017352:	4615      	mov	r5, r2
 8017354:	e7bc      	b.n	80172d0 <_printf_i+0x14c>
 8017356:	682b      	ldr	r3, [r5, #0]
 8017358:	1d1a      	adds	r2, r3, #4
 801735a:	602a      	str	r2, [r5, #0]
 801735c:	681d      	ldr	r5, [r3, #0]
 801735e:	6862      	ldr	r2, [r4, #4]
 8017360:	2100      	movs	r1, #0
 8017362:	4628      	mov	r0, r5
 8017364:	f7e8 ff5c 	bl	8000220 <memchr>
 8017368:	b108      	cbz	r0, 801736e <_printf_i+0x1ea>
 801736a:	1b40      	subs	r0, r0, r5
 801736c:	6060      	str	r0, [r4, #4]
 801736e:	6863      	ldr	r3, [r4, #4]
 8017370:	6123      	str	r3, [r4, #16]
 8017372:	2300      	movs	r3, #0
 8017374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017378:	e7aa      	b.n	80172d0 <_printf_i+0x14c>
 801737a:	6923      	ldr	r3, [r4, #16]
 801737c:	462a      	mov	r2, r5
 801737e:	4649      	mov	r1, r9
 8017380:	4640      	mov	r0, r8
 8017382:	47d0      	blx	sl
 8017384:	3001      	adds	r0, #1
 8017386:	d0ad      	beq.n	80172e4 <_printf_i+0x160>
 8017388:	6823      	ldr	r3, [r4, #0]
 801738a:	079b      	lsls	r3, r3, #30
 801738c:	d413      	bmi.n	80173b6 <_printf_i+0x232>
 801738e:	68e0      	ldr	r0, [r4, #12]
 8017390:	9b03      	ldr	r3, [sp, #12]
 8017392:	4298      	cmp	r0, r3
 8017394:	bfb8      	it	lt
 8017396:	4618      	movlt	r0, r3
 8017398:	e7a6      	b.n	80172e8 <_printf_i+0x164>
 801739a:	2301      	movs	r3, #1
 801739c:	4632      	mov	r2, r6
 801739e:	4649      	mov	r1, r9
 80173a0:	4640      	mov	r0, r8
 80173a2:	47d0      	blx	sl
 80173a4:	3001      	adds	r0, #1
 80173a6:	d09d      	beq.n	80172e4 <_printf_i+0x160>
 80173a8:	3501      	adds	r5, #1
 80173aa:	68e3      	ldr	r3, [r4, #12]
 80173ac:	9903      	ldr	r1, [sp, #12]
 80173ae:	1a5b      	subs	r3, r3, r1
 80173b0:	42ab      	cmp	r3, r5
 80173b2:	dcf2      	bgt.n	801739a <_printf_i+0x216>
 80173b4:	e7eb      	b.n	801738e <_printf_i+0x20a>
 80173b6:	2500      	movs	r5, #0
 80173b8:	f104 0619 	add.w	r6, r4, #25
 80173bc:	e7f5      	b.n	80173aa <_printf_i+0x226>
 80173be:	bf00      	nop
 80173c0:	0801dfda 	.word	0x0801dfda
 80173c4:	0801dfeb 	.word	0x0801dfeb

080173c8 <_scanf_float>:
 80173c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173cc:	b087      	sub	sp, #28
 80173ce:	4617      	mov	r7, r2
 80173d0:	9303      	str	r3, [sp, #12]
 80173d2:	688b      	ldr	r3, [r1, #8]
 80173d4:	1e5a      	subs	r2, r3, #1
 80173d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80173da:	bf83      	ittte	hi
 80173dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80173e0:	195b      	addhi	r3, r3, r5
 80173e2:	9302      	strhi	r3, [sp, #8]
 80173e4:	2300      	movls	r3, #0
 80173e6:	bf86      	itte	hi
 80173e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80173ec:	608b      	strhi	r3, [r1, #8]
 80173ee:	9302      	strls	r3, [sp, #8]
 80173f0:	680b      	ldr	r3, [r1, #0]
 80173f2:	468b      	mov	fp, r1
 80173f4:	2500      	movs	r5, #0
 80173f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80173fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80173fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017402:	4680      	mov	r8, r0
 8017404:	460c      	mov	r4, r1
 8017406:	465e      	mov	r6, fp
 8017408:	46aa      	mov	sl, r5
 801740a:	46a9      	mov	r9, r5
 801740c:	9501      	str	r5, [sp, #4]
 801740e:	68a2      	ldr	r2, [r4, #8]
 8017410:	b152      	cbz	r2, 8017428 <_scanf_float+0x60>
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	2b4e      	cmp	r3, #78	; 0x4e
 8017418:	d864      	bhi.n	80174e4 <_scanf_float+0x11c>
 801741a:	2b40      	cmp	r3, #64	; 0x40
 801741c:	d83c      	bhi.n	8017498 <_scanf_float+0xd0>
 801741e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017422:	b2c8      	uxtb	r0, r1
 8017424:	280e      	cmp	r0, #14
 8017426:	d93a      	bls.n	801749e <_scanf_float+0xd6>
 8017428:	f1b9 0f00 	cmp.w	r9, #0
 801742c:	d003      	beq.n	8017436 <_scanf_float+0x6e>
 801742e:	6823      	ldr	r3, [r4, #0]
 8017430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017434:	6023      	str	r3, [r4, #0]
 8017436:	f10a 3aff 	add.w	sl, sl, #4294967295
 801743a:	f1ba 0f01 	cmp.w	sl, #1
 801743e:	f200 8113 	bhi.w	8017668 <_scanf_float+0x2a0>
 8017442:	455e      	cmp	r6, fp
 8017444:	f200 8105 	bhi.w	8017652 <_scanf_float+0x28a>
 8017448:	2501      	movs	r5, #1
 801744a:	4628      	mov	r0, r5
 801744c:	b007      	add	sp, #28
 801744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017452:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017456:	2a0d      	cmp	r2, #13
 8017458:	d8e6      	bhi.n	8017428 <_scanf_float+0x60>
 801745a:	a101      	add	r1, pc, #4	; (adr r1, 8017460 <_scanf_float+0x98>)
 801745c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017460:	0801759f 	.word	0x0801759f
 8017464:	08017429 	.word	0x08017429
 8017468:	08017429 	.word	0x08017429
 801746c:	08017429 	.word	0x08017429
 8017470:	080175ff 	.word	0x080175ff
 8017474:	080175d7 	.word	0x080175d7
 8017478:	08017429 	.word	0x08017429
 801747c:	08017429 	.word	0x08017429
 8017480:	080175ad 	.word	0x080175ad
 8017484:	08017429 	.word	0x08017429
 8017488:	08017429 	.word	0x08017429
 801748c:	08017429 	.word	0x08017429
 8017490:	08017429 	.word	0x08017429
 8017494:	08017565 	.word	0x08017565
 8017498:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801749c:	e7db      	b.n	8017456 <_scanf_float+0x8e>
 801749e:	290e      	cmp	r1, #14
 80174a0:	d8c2      	bhi.n	8017428 <_scanf_float+0x60>
 80174a2:	a001      	add	r0, pc, #4	; (adr r0, 80174a8 <_scanf_float+0xe0>)
 80174a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80174a8:	08017557 	.word	0x08017557
 80174ac:	08017429 	.word	0x08017429
 80174b0:	08017557 	.word	0x08017557
 80174b4:	080175eb 	.word	0x080175eb
 80174b8:	08017429 	.word	0x08017429
 80174bc:	08017505 	.word	0x08017505
 80174c0:	08017541 	.word	0x08017541
 80174c4:	08017541 	.word	0x08017541
 80174c8:	08017541 	.word	0x08017541
 80174cc:	08017541 	.word	0x08017541
 80174d0:	08017541 	.word	0x08017541
 80174d4:	08017541 	.word	0x08017541
 80174d8:	08017541 	.word	0x08017541
 80174dc:	08017541 	.word	0x08017541
 80174e0:	08017541 	.word	0x08017541
 80174e4:	2b6e      	cmp	r3, #110	; 0x6e
 80174e6:	d809      	bhi.n	80174fc <_scanf_float+0x134>
 80174e8:	2b60      	cmp	r3, #96	; 0x60
 80174ea:	d8b2      	bhi.n	8017452 <_scanf_float+0x8a>
 80174ec:	2b54      	cmp	r3, #84	; 0x54
 80174ee:	d077      	beq.n	80175e0 <_scanf_float+0x218>
 80174f0:	2b59      	cmp	r3, #89	; 0x59
 80174f2:	d199      	bne.n	8017428 <_scanf_float+0x60>
 80174f4:	2d07      	cmp	r5, #7
 80174f6:	d197      	bne.n	8017428 <_scanf_float+0x60>
 80174f8:	2508      	movs	r5, #8
 80174fa:	e029      	b.n	8017550 <_scanf_float+0x188>
 80174fc:	2b74      	cmp	r3, #116	; 0x74
 80174fe:	d06f      	beq.n	80175e0 <_scanf_float+0x218>
 8017500:	2b79      	cmp	r3, #121	; 0x79
 8017502:	e7f6      	b.n	80174f2 <_scanf_float+0x12a>
 8017504:	6821      	ldr	r1, [r4, #0]
 8017506:	05c8      	lsls	r0, r1, #23
 8017508:	d51a      	bpl.n	8017540 <_scanf_float+0x178>
 801750a:	9b02      	ldr	r3, [sp, #8]
 801750c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017510:	6021      	str	r1, [r4, #0]
 8017512:	f109 0901 	add.w	r9, r9, #1
 8017516:	b11b      	cbz	r3, 8017520 <_scanf_float+0x158>
 8017518:	3b01      	subs	r3, #1
 801751a:	3201      	adds	r2, #1
 801751c:	9302      	str	r3, [sp, #8]
 801751e:	60a2      	str	r2, [r4, #8]
 8017520:	68a3      	ldr	r3, [r4, #8]
 8017522:	3b01      	subs	r3, #1
 8017524:	60a3      	str	r3, [r4, #8]
 8017526:	6923      	ldr	r3, [r4, #16]
 8017528:	3301      	adds	r3, #1
 801752a:	6123      	str	r3, [r4, #16]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	3b01      	subs	r3, #1
 8017530:	2b00      	cmp	r3, #0
 8017532:	607b      	str	r3, [r7, #4]
 8017534:	f340 8084 	ble.w	8017640 <_scanf_float+0x278>
 8017538:	683b      	ldr	r3, [r7, #0]
 801753a:	3301      	adds	r3, #1
 801753c:	603b      	str	r3, [r7, #0]
 801753e:	e766      	b.n	801740e <_scanf_float+0x46>
 8017540:	eb1a 0f05 	cmn.w	sl, r5
 8017544:	f47f af70 	bne.w	8017428 <_scanf_float+0x60>
 8017548:	6822      	ldr	r2, [r4, #0]
 801754a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801754e:	6022      	str	r2, [r4, #0]
 8017550:	f806 3b01 	strb.w	r3, [r6], #1
 8017554:	e7e4      	b.n	8017520 <_scanf_float+0x158>
 8017556:	6822      	ldr	r2, [r4, #0]
 8017558:	0610      	lsls	r0, r2, #24
 801755a:	f57f af65 	bpl.w	8017428 <_scanf_float+0x60>
 801755e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017562:	e7f4      	b.n	801754e <_scanf_float+0x186>
 8017564:	f1ba 0f00 	cmp.w	sl, #0
 8017568:	d10e      	bne.n	8017588 <_scanf_float+0x1c0>
 801756a:	f1b9 0f00 	cmp.w	r9, #0
 801756e:	d10e      	bne.n	801758e <_scanf_float+0x1c6>
 8017570:	6822      	ldr	r2, [r4, #0]
 8017572:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017576:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801757a:	d108      	bne.n	801758e <_scanf_float+0x1c6>
 801757c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017580:	6022      	str	r2, [r4, #0]
 8017582:	f04f 0a01 	mov.w	sl, #1
 8017586:	e7e3      	b.n	8017550 <_scanf_float+0x188>
 8017588:	f1ba 0f02 	cmp.w	sl, #2
 801758c:	d055      	beq.n	801763a <_scanf_float+0x272>
 801758e:	2d01      	cmp	r5, #1
 8017590:	d002      	beq.n	8017598 <_scanf_float+0x1d0>
 8017592:	2d04      	cmp	r5, #4
 8017594:	f47f af48 	bne.w	8017428 <_scanf_float+0x60>
 8017598:	3501      	adds	r5, #1
 801759a:	b2ed      	uxtb	r5, r5
 801759c:	e7d8      	b.n	8017550 <_scanf_float+0x188>
 801759e:	f1ba 0f01 	cmp.w	sl, #1
 80175a2:	f47f af41 	bne.w	8017428 <_scanf_float+0x60>
 80175a6:	f04f 0a02 	mov.w	sl, #2
 80175aa:	e7d1      	b.n	8017550 <_scanf_float+0x188>
 80175ac:	b97d      	cbnz	r5, 80175ce <_scanf_float+0x206>
 80175ae:	f1b9 0f00 	cmp.w	r9, #0
 80175b2:	f47f af3c 	bne.w	801742e <_scanf_float+0x66>
 80175b6:	6822      	ldr	r2, [r4, #0]
 80175b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80175bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80175c0:	f47f af39 	bne.w	8017436 <_scanf_float+0x6e>
 80175c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80175c8:	6022      	str	r2, [r4, #0]
 80175ca:	2501      	movs	r5, #1
 80175cc:	e7c0      	b.n	8017550 <_scanf_float+0x188>
 80175ce:	2d03      	cmp	r5, #3
 80175d0:	d0e2      	beq.n	8017598 <_scanf_float+0x1d0>
 80175d2:	2d05      	cmp	r5, #5
 80175d4:	e7de      	b.n	8017594 <_scanf_float+0x1cc>
 80175d6:	2d02      	cmp	r5, #2
 80175d8:	f47f af26 	bne.w	8017428 <_scanf_float+0x60>
 80175dc:	2503      	movs	r5, #3
 80175de:	e7b7      	b.n	8017550 <_scanf_float+0x188>
 80175e0:	2d06      	cmp	r5, #6
 80175e2:	f47f af21 	bne.w	8017428 <_scanf_float+0x60>
 80175e6:	2507      	movs	r5, #7
 80175e8:	e7b2      	b.n	8017550 <_scanf_float+0x188>
 80175ea:	6822      	ldr	r2, [r4, #0]
 80175ec:	0591      	lsls	r1, r2, #22
 80175ee:	f57f af1b 	bpl.w	8017428 <_scanf_float+0x60>
 80175f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80175f6:	6022      	str	r2, [r4, #0]
 80175f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80175fc:	e7a8      	b.n	8017550 <_scanf_float+0x188>
 80175fe:	6822      	ldr	r2, [r4, #0]
 8017600:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017604:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017608:	d006      	beq.n	8017618 <_scanf_float+0x250>
 801760a:	0550      	lsls	r0, r2, #21
 801760c:	f57f af0c 	bpl.w	8017428 <_scanf_float+0x60>
 8017610:	f1b9 0f00 	cmp.w	r9, #0
 8017614:	f43f af0f 	beq.w	8017436 <_scanf_float+0x6e>
 8017618:	0591      	lsls	r1, r2, #22
 801761a:	bf58      	it	pl
 801761c:	9901      	ldrpl	r1, [sp, #4]
 801761e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017622:	bf58      	it	pl
 8017624:	eba9 0101 	subpl.w	r1, r9, r1
 8017628:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801762c:	bf58      	it	pl
 801762e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017632:	6022      	str	r2, [r4, #0]
 8017634:	f04f 0900 	mov.w	r9, #0
 8017638:	e78a      	b.n	8017550 <_scanf_float+0x188>
 801763a:	f04f 0a03 	mov.w	sl, #3
 801763e:	e787      	b.n	8017550 <_scanf_float+0x188>
 8017640:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017644:	4639      	mov	r1, r7
 8017646:	4640      	mov	r0, r8
 8017648:	4798      	blx	r3
 801764a:	2800      	cmp	r0, #0
 801764c:	f43f aedf 	beq.w	801740e <_scanf_float+0x46>
 8017650:	e6ea      	b.n	8017428 <_scanf_float+0x60>
 8017652:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017656:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801765a:	463a      	mov	r2, r7
 801765c:	4640      	mov	r0, r8
 801765e:	4798      	blx	r3
 8017660:	6923      	ldr	r3, [r4, #16]
 8017662:	3b01      	subs	r3, #1
 8017664:	6123      	str	r3, [r4, #16]
 8017666:	e6ec      	b.n	8017442 <_scanf_float+0x7a>
 8017668:	1e6b      	subs	r3, r5, #1
 801766a:	2b06      	cmp	r3, #6
 801766c:	d825      	bhi.n	80176ba <_scanf_float+0x2f2>
 801766e:	2d02      	cmp	r5, #2
 8017670:	d836      	bhi.n	80176e0 <_scanf_float+0x318>
 8017672:	455e      	cmp	r6, fp
 8017674:	f67f aee8 	bls.w	8017448 <_scanf_float+0x80>
 8017678:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801767c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017680:	463a      	mov	r2, r7
 8017682:	4640      	mov	r0, r8
 8017684:	4798      	blx	r3
 8017686:	6923      	ldr	r3, [r4, #16]
 8017688:	3b01      	subs	r3, #1
 801768a:	6123      	str	r3, [r4, #16]
 801768c:	e7f1      	b.n	8017672 <_scanf_float+0x2aa>
 801768e:	9802      	ldr	r0, [sp, #8]
 8017690:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017694:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017698:	9002      	str	r0, [sp, #8]
 801769a:	463a      	mov	r2, r7
 801769c:	4640      	mov	r0, r8
 801769e:	4798      	blx	r3
 80176a0:	6923      	ldr	r3, [r4, #16]
 80176a2:	3b01      	subs	r3, #1
 80176a4:	6123      	str	r3, [r4, #16]
 80176a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176aa:	fa5f fa8a 	uxtb.w	sl, sl
 80176ae:	f1ba 0f02 	cmp.w	sl, #2
 80176b2:	d1ec      	bne.n	801768e <_scanf_float+0x2c6>
 80176b4:	3d03      	subs	r5, #3
 80176b6:	b2ed      	uxtb	r5, r5
 80176b8:	1b76      	subs	r6, r6, r5
 80176ba:	6823      	ldr	r3, [r4, #0]
 80176bc:	05da      	lsls	r2, r3, #23
 80176be:	d52f      	bpl.n	8017720 <_scanf_float+0x358>
 80176c0:	055b      	lsls	r3, r3, #21
 80176c2:	d510      	bpl.n	80176e6 <_scanf_float+0x31e>
 80176c4:	455e      	cmp	r6, fp
 80176c6:	f67f aebf 	bls.w	8017448 <_scanf_float+0x80>
 80176ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80176ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80176d2:	463a      	mov	r2, r7
 80176d4:	4640      	mov	r0, r8
 80176d6:	4798      	blx	r3
 80176d8:	6923      	ldr	r3, [r4, #16]
 80176da:	3b01      	subs	r3, #1
 80176dc:	6123      	str	r3, [r4, #16]
 80176de:	e7f1      	b.n	80176c4 <_scanf_float+0x2fc>
 80176e0:	46aa      	mov	sl, r5
 80176e2:	9602      	str	r6, [sp, #8]
 80176e4:	e7df      	b.n	80176a6 <_scanf_float+0x2de>
 80176e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80176ea:	6923      	ldr	r3, [r4, #16]
 80176ec:	2965      	cmp	r1, #101	; 0x65
 80176ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80176f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80176f6:	6123      	str	r3, [r4, #16]
 80176f8:	d00c      	beq.n	8017714 <_scanf_float+0x34c>
 80176fa:	2945      	cmp	r1, #69	; 0x45
 80176fc:	d00a      	beq.n	8017714 <_scanf_float+0x34c>
 80176fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017702:	463a      	mov	r2, r7
 8017704:	4640      	mov	r0, r8
 8017706:	4798      	blx	r3
 8017708:	6923      	ldr	r3, [r4, #16]
 801770a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801770e:	3b01      	subs	r3, #1
 8017710:	1eb5      	subs	r5, r6, #2
 8017712:	6123      	str	r3, [r4, #16]
 8017714:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017718:	463a      	mov	r2, r7
 801771a:	4640      	mov	r0, r8
 801771c:	4798      	blx	r3
 801771e:	462e      	mov	r6, r5
 8017720:	6825      	ldr	r5, [r4, #0]
 8017722:	f015 0510 	ands.w	r5, r5, #16
 8017726:	d158      	bne.n	80177da <_scanf_float+0x412>
 8017728:	7035      	strb	r5, [r6, #0]
 801772a:	6823      	ldr	r3, [r4, #0]
 801772c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017734:	d11c      	bne.n	8017770 <_scanf_float+0x3a8>
 8017736:	9b01      	ldr	r3, [sp, #4]
 8017738:	454b      	cmp	r3, r9
 801773a:	eba3 0209 	sub.w	r2, r3, r9
 801773e:	d124      	bne.n	801778a <_scanf_float+0x3c2>
 8017740:	2200      	movs	r2, #0
 8017742:	4659      	mov	r1, fp
 8017744:	4640      	mov	r0, r8
 8017746:	f002 fc3f 	bl	8019fc8 <_strtod_r>
 801774a:	9b03      	ldr	r3, [sp, #12]
 801774c:	6821      	ldr	r1, [r4, #0]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	f011 0f02 	tst.w	r1, #2
 8017754:	ec57 6b10 	vmov	r6, r7, d0
 8017758:	f103 0204 	add.w	r2, r3, #4
 801775c:	d020      	beq.n	80177a0 <_scanf_float+0x3d8>
 801775e:	9903      	ldr	r1, [sp, #12]
 8017760:	600a      	str	r2, [r1, #0]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	e9c3 6700 	strd	r6, r7, [r3]
 8017768:	68e3      	ldr	r3, [r4, #12]
 801776a:	3301      	adds	r3, #1
 801776c:	60e3      	str	r3, [r4, #12]
 801776e:	e66c      	b.n	801744a <_scanf_float+0x82>
 8017770:	9b04      	ldr	r3, [sp, #16]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d0e4      	beq.n	8017740 <_scanf_float+0x378>
 8017776:	9905      	ldr	r1, [sp, #20]
 8017778:	230a      	movs	r3, #10
 801777a:	462a      	mov	r2, r5
 801777c:	3101      	adds	r1, #1
 801777e:	4640      	mov	r0, r8
 8017780:	f002 fcaa 	bl	801a0d8 <_strtol_r>
 8017784:	9b04      	ldr	r3, [sp, #16]
 8017786:	9e05      	ldr	r6, [sp, #20]
 8017788:	1ac2      	subs	r2, r0, r3
 801778a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801778e:	429e      	cmp	r6, r3
 8017790:	bf28      	it	cs
 8017792:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017796:	4912      	ldr	r1, [pc, #72]	; (80177e0 <_scanf_float+0x418>)
 8017798:	4630      	mov	r0, r6
 801779a:	f000 f8e7 	bl	801796c <siprintf>
 801779e:	e7cf      	b.n	8017740 <_scanf_float+0x378>
 80177a0:	f011 0f04 	tst.w	r1, #4
 80177a4:	9903      	ldr	r1, [sp, #12]
 80177a6:	600a      	str	r2, [r1, #0]
 80177a8:	d1db      	bne.n	8017762 <_scanf_float+0x39a>
 80177aa:	f8d3 8000 	ldr.w	r8, [r3]
 80177ae:	ee10 2a10 	vmov	r2, s0
 80177b2:	ee10 0a10 	vmov	r0, s0
 80177b6:	463b      	mov	r3, r7
 80177b8:	4639      	mov	r1, r7
 80177ba:	f7e9 f9df 	bl	8000b7c <__aeabi_dcmpun>
 80177be:	b128      	cbz	r0, 80177cc <_scanf_float+0x404>
 80177c0:	4808      	ldr	r0, [pc, #32]	; (80177e4 <_scanf_float+0x41c>)
 80177c2:	f000 f9c5 	bl	8017b50 <nanf>
 80177c6:	ed88 0a00 	vstr	s0, [r8]
 80177ca:	e7cd      	b.n	8017768 <_scanf_float+0x3a0>
 80177cc:	4630      	mov	r0, r6
 80177ce:	4639      	mov	r1, r7
 80177d0:	f7e9 fa32 	bl	8000c38 <__aeabi_d2f>
 80177d4:	f8c8 0000 	str.w	r0, [r8]
 80177d8:	e7c6      	b.n	8017768 <_scanf_float+0x3a0>
 80177da:	2500      	movs	r5, #0
 80177dc:	e635      	b.n	801744a <_scanf_float+0x82>
 80177de:	bf00      	nop
 80177e0:	0801dffc 	.word	0x0801dffc
 80177e4:	0801e38d 	.word	0x0801e38d

080177e8 <std>:
 80177e8:	2300      	movs	r3, #0
 80177ea:	b510      	push	{r4, lr}
 80177ec:	4604      	mov	r4, r0
 80177ee:	e9c0 3300 	strd	r3, r3, [r0]
 80177f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80177f6:	6083      	str	r3, [r0, #8]
 80177f8:	8181      	strh	r1, [r0, #12]
 80177fa:	6643      	str	r3, [r0, #100]	; 0x64
 80177fc:	81c2      	strh	r2, [r0, #14]
 80177fe:	6183      	str	r3, [r0, #24]
 8017800:	4619      	mov	r1, r3
 8017802:	2208      	movs	r2, #8
 8017804:	305c      	adds	r0, #92	; 0x5c
 8017806:	f000 f914 	bl	8017a32 <memset>
 801780a:	4b0d      	ldr	r3, [pc, #52]	; (8017840 <std+0x58>)
 801780c:	6263      	str	r3, [r4, #36]	; 0x24
 801780e:	4b0d      	ldr	r3, [pc, #52]	; (8017844 <std+0x5c>)
 8017810:	62a3      	str	r3, [r4, #40]	; 0x28
 8017812:	4b0d      	ldr	r3, [pc, #52]	; (8017848 <std+0x60>)
 8017814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017816:	4b0d      	ldr	r3, [pc, #52]	; (801784c <std+0x64>)
 8017818:	6323      	str	r3, [r4, #48]	; 0x30
 801781a:	4b0d      	ldr	r3, [pc, #52]	; (8017850 <std+0x68>)
 801781c:	6224      	str	r4, [r4, #32]
 801781e:	429c      	cmp	r4, r3
 8017820:	d006      	beq.n	8017830 <std+0x48>
 8017822:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017826:	4294      	cmp	r4, r2
 8017828:	d002      	beq.n	8017830 <std+0x48>
 801782a:	33d0      	adds	r3, #208	; 0xd0
 801782c:	429c      	cmp	r4, r3
 801782e:	d105      	bne.n	801783c <std+0x54>
 8017830:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017838:	f000 b978 	b.w	8017b2c <__retarget_lock_init_recursive>
 801783c:	bd10      	pop	{r4, pc}
 801783e:	bf00      	nop
 8017840:	080179ad 	.word	0x080179ad
 8017844:	080179cf 	.word	0x080179cf
 8017848:	08017a07 	.word	0x08017a07
 801784c:	08017a2b 	.word	0x08017a2b
 8017850:	200035dc 	.word	0x200035dc

08017854 <stdio_exit_handler>:
 8017854:	4a02      	ldr	r2, [pc, #8]	; (8017860 <stdio_exit_handler+0xc>)
 8017856:	4903      	ldr	r1, [pc, #12]	; (8017864 <stdio_exit_handler+0x10>)
 8017858:	4803      	ldr	r0, [pc, #12]	; (8017868 <stdio_exit_handler+0x14>)
 801785a:	f000 b869 	b.w	8017930 <_fwalk_sglue>
 801785e:	bf00      	nop
 8017860:	20000394 	.word	0x20000394
 8017864:	0801a499 	.word	0x0801a499
 8017868:	200003a0 	.word	0x200003a0

0801786c <cleanup_stdio>:
 801786c:	6841      	ldr	r1, [r0, #4]
 801786e:	4b0c      	ldr	r3, [pc, #48]	; (80178a0 <cleanup_stdio+0x34>)
 8017870:	4299      	cmp	r1, r3
 8017872:	b510      	push	{r4, lr}
 8017874:	4604      	mov	r4, r0
 8017876:	d001      	beq.n	801787c <cleanup_stdio+0x10>
 8017878:	f002 fe0e 	bl	801a498 <_fflush_r>
 801787c:	68a1      	ldr	r1, [r4, #8]
 801787e:	4b09      	ldr	r3, [pc, #36]	; (80178a4 <cleanup_stdio+0x38>)
 8017880:	4299      	cmp	r1, r3
 8017882:	d002      	beq.n	801788a <cleanup_stdio+0x1e>
 8017884:	4620      	mov	r0, r4
 8017886:	f002 fe07 	bl	801a498 <_fflush_r>
 801788a:	68e1      	ldr	r1, [r4, #12]
 801788c:	4b06      	ldr	r3, [pc, #24]	; (80178a8 <cleanup_stdio+0x3c>)
 801788e:	4299      	cmp	r1, r3
 8017890:	d004      	beq.n	801789c <cleanup_stdio+0x30>
 8017892:	4620      	mov	r0, r4
 8017894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017898:	f002 bdfe 	b.w	801a498 <_fflush_r>
 801789c:	bd10      	pop	{r4, pc}
 801789e:	bf00      	nop
 80178a0:	200035dc 	.word	0x200035dc
 80178a4:	20003644 	.word	0x20003644
 80178a8:	200036ac 	.word	0x200036ac

080178ac <global_stdio_init.part.0>:
 80178ac:	b510      	push	{r4, lr}
 80178ae:	4b0b      	ldr	r3, [pc, #44]	; (80178dc <global_stdio_init.part.0+0x30>)
 80178b0:	4c0b      	ldr	r4, [pc, #44]	; (80178e0 <global_stdio_init.part.0+0x34>)
 80178b2:	4a0c      	ldr	r2, [pc, #48]	; (80178e4 <global_stdio_init.part.0+0x38>)
 80178b4:	601a      	str	r2, [r3, #0]
 80178b6:	4620      	mov	r0, r4
 80178b8:	2200      	movs	r2, #0
 80178ba:	2104      	movs	r1, #4
 80178bc:	f7ff ff94 	bl	80177e8 <std>
 80178c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80178c4:	2201      	movs	r2, #1
 80178c6:	2109      	movs	r1, #9
 80178c8:	f7ff ff8e 	bl	80177e8 <std>
 80178cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80178d0:	2202      	movs	r2, #2
 80178d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178d6:	2112      	movs	r1, #18
 80178d8:	f7ff bf86 	b.w	80177e8 <std>
 80178dc:	20003714 	.word	0x20003714
 80178e0:	200035dc 	.word	0x200035dc
 80178e4:	08017855 	.word	0x08017855

080178e8 <__sfp_lock_acquire>:
 80178e8:	4801      	ldr	r0, [pc, #4]	; (80178f0 <__sfp_lock_acquire+0x8>)
 80178ea:	f000 b920 	b.w	8017b2e <__retarget_lock_acquire_recursive>
 80178ee:	bf00      	nop
 80178f0:	2000371d 	.word	0x2000371d

080178f4 <__sfp_lock_release>:
 80178f4:	4801      	ldr	r0, [pc, #4]	; (80178fc <__sfp_lock_release+0x8>)
 80178f6:	f000 b91b 	b.w	8017b30 <__retarget_lock_release_recursive>
 80178fa:	bf00      	nop
 80178fc:	2000371d 	.word	0x2000371d

08017900 <__sinit>:
 8017900:	b510      	push	{r4, lr}
 8017902:	4604      	mov	r4, r0
 8017904:	f7ff fff0 	bl	80178e8 <__sfp_lock_acquire>
 8017908:	6a23      	ldr	r3, [r4, #32]
 801790a:	b11b      	cbz	r3, 8017914 <__sinit+0x14>
 801790c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017910:	f7ff bff0 	b.w	80178f4 <__sfp_lock_release>
 8017914:	4b04      	ldr	r3, [pc, #16]	; (8017928 <__sinit+0x28>)
 8017916:	6223      	str	r3, [r4, #32]
 8017918:	4b04      	ldr	r3, [pc, #16]	; (801792c <__sinit+0x2c>)
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d1f5      	bne.n	801790c <__sinit+0xc>
 8017920:	f7ff ffc4 	bl	80178ac <global_stdio_init.part.0>
 8017924:	e7f2      	b.n	801790c <__sinit+0xc>
 8017926:	bf00      	nop
 8017928:	0801786d 	.word	0x0801786d
 801792c:	20003714 	.word	0x20003714

08017930 <_fwalk_sglue>:
 8017930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017934:	4607      	mov	r7, r0
 8017936:	4688      	mov	r8, r1
 8017938:	4614      	mov	r4, r2
 801793a:	2600      	movs	r6, #0
 801793c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017940:	f1b9 0901 	subs.w	r9, r9, #1
 8017944:	d505      	bpl.n	8017952 <_fwalk_sglue+0x22>
 8017946:	6824      	ldr	r4, [r4, #0]
 8017948:	2c00      	cmp	r4, #0
 801794a:	d1f7      	bne.n	801793c <_fwalk_sglue+0xc>
 801794c:	4630      	mov	r0, r6
 801794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017952:	89ab      	ldrh	r3, [r5, #12]
 8017954:	2b01      	cmp	r3, #1
 8017956:	d907      	bls.n	8017968 <_fwalk_sglue+0x38>
 8017958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801795c:	3301      	adds	r3, #1
 801795e:	d003      	beq.n	8017968 <_fwalk_sglue+0x38>
 8017960:	4629      	mov	r1, r5
 8017962:	4638      	mov	r0, r7
 8017964:	47c0      	blx	r8
 8017966:	4306      	orrs	r6, r0
 8017968:	3568      	adds	r5, #104	; 0x68
 801796a:	e7e9      	b.n	8017940 <_fwalk_sglue+0x10>

0801796c <siprintf>:
 801796c:	b40e      	push	{r1, r2, r3}
 801796e:	b500      	push	{lr}
 8017970:	b09c      	sub	sp, #112	; 0x70
 8017972:	ab1d      	add	r3, sp, #116	; 0x74
 8017974:	9002      	str	r0, [sp, #8]
 8017976:	9006      	str	r0, [sp, #24]
 8017978:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801797c:	4809      	ldr	r0, [pc, #36]	; (80179a4 <siprintf+0x38>)
 801797e:	9107      	str	r1, [sp, #28]
 8017980:	9104      	str	r1, [sp, #16]
 8017982:	4909      	ldr	r1, [pc, #36]	; (80179a8 <siprintf+0x3c>)
 8017984:	f853 2b04 	ldr.w	r2, [r3], #4
 8017988:	9105      	str	r1, [sp, #20]
 801798a:	6800      	ldr	r0, [r0, #0]
 801798c:	9301      	str	r3, [sp, #4]
 801798e:	a902      	add	r1, sp, #8
 8017990:	f002 fbfe 	bl	801a190 <_svfiprintf_r>
 8017994:	9b02      	ldr	r3, [sp, #8]
 8017996:	2200      	movs	r2, #0
 8017998:	701a      	strb	r2, [r3, #0]
 801799a:	b01c      	add	sp, #112	; 0x70
 801799c:	f85d eb04 	ldr.w	lr, [sp], #4
 80179a0:	b003      	add	sp, #12
 80179a2:	4770      	bx	lr
 80179a4:	200003ec 	.word	0x200003ec
 80179a8:	ffff0208 	.word	0xffff0208

080179ac <__sread>:
 80179ac:	b510      	push	{r4, lr}
 80179ae:	460c      	mov	r4, r1
 80179b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179b4:	f000 f86c 	bl	8017a90 <_read_r>
 80179b8:	2800      	cmp	r0, #0
 80179ba:	bfab      	itete	ge
 80179bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80179be:	89a3      	ldrhlt	r3, [r4, #12]
 80179c0:	181b      	addge	r3, r3, r0
 80179c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80179c6:	bfac      	ite	ge
 80179c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80179ca:	81a3      	strhlt	r3, [r4, #12]
 80179cc:	bd10      	pop	{r4, pc}

080179ce <__swrite>:
 80179ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179d2:	461f      	mov	r7, r3
 80179d4:	898b      	ldrh	r3, [r1, #12]
 80179d6:	05db      	lsls	r3, r3, #23
 80179d8:	4605      	mov	r5, r0
 80179da:	460c      	mov	r4, r1
 80179dc:	4616      	mov	r6, r2
 80179de:	d505      	bpl.n	80179ec <__swrite+0x1e>
 80179e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179e4:	2302      	movs	r3, #2
 80179e6:	2200      	movs	r2, #0
 80179e8:	f000 f840 	bl	8017a6c <_lseek_r>
 80179ec:	89a3      	ldrh	r3, [r4, #12]
 80179ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80179f6:	81a3      	strh	r3, [r4, #12]
 80179f8:	4632      	mov	r2, r6
 80179fa:	463b      	mov	r3, r7
 80179fc:	4628      	mov	r0, r5
 80179fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a02:	f000 b857 	b.w	8017ab4 <_write_r>

08017a06 <__sseek>:
 8017a06:	b510      	push	{r4, lr}
 8017a08:	460c      	mov	r4, r1
 8017a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a0e:	f000 f82d 	bl	8017a6c <_lseek_r>
 8017a12:	1c43      	adds	r3, r0, #1
 8017a14:	89a3      	ldrh	r3, [r4, #12]
 8017a16:	bf15      	itete	ne
 8017a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8017a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017a22:	81a3      	strheq	r3, [r4, #12]
 8017a24:	bf18      	it	ne
 8017a26:	81a3      	strhne	r3, [r4, #12]
 8017a28:	bd10      	pop	{r4, pc}

08017a2a <__sclose>:
 8017a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a2e:	f000 b80d 	b.w	8017a4c <_close_r>

08017a32 <memset>:
 8017a32:	4402      	add	r2, r0
 8017a34:	4603      	mov	r3, r0
 8017a36:	4293      	cmp	r3, r2
 8017a38:	d100      	bne.n	8017a3c <memset+0xa>
 8017a3a:	4770      	bx	lr
 8017a3c:	f803 1b01 	strb.w	r1, [r3], #1
 8017a40:	e7f9      	b.n	8017a36 <memset+0x4>
	...

08017a44 <_localeconv_r>:
 8017a44:	4800      	ldr	r0, [pc, #0]	; (8017a48 <_localeconv_r+0x4>)
 8017a46:	4770      	bx	lr
 8017a48:	200004e0 	.word	0x200004e0

08017a4c <_close_r>:
 8017a4c:	b538      	push	{r3, r4, r5, lr}
 8017a4e:	4d06      	ldr	r5, [pc, #24]	; (8017a68 <_close_r+0x1c>)
 8017a50:	2300      	movs	r3, #0
 8017a52:	4604      	mov	r4, r0
 8017a54:	4608      	mov	r0, r1
 8017a56:	602b      	str	r3, [r5, #0]
 8017a58:	f7ee fa85 	bl	8005f66 <_close>
 8017a5c:	1c43      	adds	r3, r0, #1
 8017a5e:	d102      	bne.n	8017a66 <_close_r+0x1a>
 8017a60:	682b      	ldr	r3, [r5, #0]
 8017a62:	b103      	cbz	r3, 8017a66 <_close_r+0x1a>
 8017a64:	6023      	str	r3, [r4, #0]
 8017a66:	bd38      	pop	{r3, r4, r5, pc}
 8017a68:	20003718 	.word	0x20003718

08017a6c <_lseek_r>:
 8017a6c:	b538      	push	{r3, r4, r5, lr}
 8017a6e:	4d07      	ldr	r5, [pc, #28]	; (8017a8c <_lseek_r+0x20>)
 8017a70:	4604      	mov	r4, r0
 8017a72:	4608      	mov	r0, r1
 8017a74:	4611      	mov	r1, r2
 8017a76:	2200      	movs	r2, #0
 8017a78:	602a      	str	r2, [r5, #0]
 8017a7a:	461a      	mov	r2, r3
 8017a7c:	f7ee fa9a 	bl	8005fb4 <_lseek>
 8017a80:	1c43      	adds	r3, r0, #1
 8017a82:	d102      	bne.n	8017a8a <_lseek_r+0x1e>
 8017a84:	682b      	ldr	r3, [r5, #0]
 8017a86:	b103      	cbz	r3, 8017a8a <_lseek_r+0x1e>
 8017a88:	6023      	str	r3, [r4, #0]
 8017a8a:	bd38      	pop	{r3, r4, r5, pc}
 8017a8c:	20003718 	.word	0x20003718

08017a90 <_read_r>:
 8017a90:	b538      	push	{r3, r4, r5, lr}
 8017a92:	4d07      	ldr	r5, [pc, #28]	; (8017ab0 <_read_r+0x20>)
 8017a94:	4604      	mov	r4, r0
 8017a96:	4608      	mov	r0, r1
 8017a98:	4611      	mov	r1, r2
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	602a      	str	r2, [r5, #0]
 8017a9e:	461a      	mov	r2, r3
 8017aa0:	f7ee fa28 	bl	8005ef4 <_read>
 8017aa4:	1c43      	adds	r3, r0, #1
 8017aa6:	d102      	bne.n	8017aae <_read_r+0x1e>
 8017aa8:	682b      	ldr	r3, [r5, #0]
 8017aaa:	b103      	cbz	r3, 8017aae <_read_r+0x1e>
 8017aac:	6023      	str	r3, [r4, #0]
 8017aae:	bd38      	pop	{r3, r4, r5, pc}
 8017ab0:	20003718 	.word	0x20003718

08017ab4 <_write_r>:
 8017ab4:	b538      	push	{r3, r4, r5, lr}
 8017ab6:	4d07      	ldr	r5, [pc, #28]	; (8017ad4 <_write_r+0x20>)
 8017ab8:	4604      	mov	r4, r0
 8017aba:	4608      	mov	r0, r1
 8017abc:	4611      	mov	r1, r2
 8017abe:	2200      	movs	r2, #0
 8017ac0:	602a      	str	r2, [r5, #0]
 8017ac2:	461a      	mov	r2, r3
 8017ac4:	f7ee fa33 	bl	8005f2e <_write>
 8017ac8:	1c43      	adds	r3, r0, #1
 8017aca:	d102      	bne.n	8017ad2 <_write_r+0x1e>
 8017acc:	682b      	ldr	r3, [r5, #0]
 8017ace:	b103      	cbz	r3, 8017ad2 <_write_r+0x1e>
 8017ad0:	6023      	str	r3, [r4, #0]
 8017ad2:	bd38      	pop	{r3, r4, r5, pc}
 8017ad4:	20003718 	.word	0x20003718

08017ad8 <__errno>:
 8017ad8:	4b01      	ldr	r3, [pc, #4]	; (8017ae0 <__errno+0x8>)
 8017ada:	6818      	ldr	r0, [r3, #0]
 8017adc:	4770      	bx	lr
 8017ade:	bf00      	nop
 8017ae0:	200003ec 	.word	0x200003ec

08017ae4 <__libc_init_array>:
 8017ae4:	b570      	push	{r4, r5, r6, lr}
 8017ae6:	4d0d      	ldr	r5, [pc, #52]	; (8017b1c <__libc_init_array+0x38>)
 8017ae8:	4c0d      	ldr	r4, [pc, #52]	; (8017b20 <__libc_init_array+0x3c>)
 8017aea:	1b64      	subs	r4, r4, r5
 8017aec:	10a4      	asrs	r4, r4, #2
 8017aee:	2600      	movs	r6, #0
 8017af0:	42a6      	cmp	r6, r4
 8017af2:	d109      	bne.n	8017b08 <__libc_init_array+0x24>
 8017af4:	4d0b      	ldr	r5, [pc, #44]	; (8017b24 <__libc_init_array+0x40>)
 8017af6:	4c0c      	ldr	r4, [pc, #48]	; (8017b28 <__libc_init_array+0x44>)
 8017af8:	f003 fd5a 	bl	801b5b0 <_init>
 8017afc:	1b64      	subs	r4, r4, r5
 8017afe:	10a4      	asrs	r4, r4, #2
 8017b00:	2600      	movs	r6, #0
 8017b02:	42a6      	cmp	r6, r4
 8017b04:	d105      	bne.n	8017b12 <__libc_init_array+0x2e>
 8017b06:	bd70      	pop	{r4, r5, r6, pc}
 8017b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b0c:	4798      	blx	r3
 8017b0e:	3601      	adds	r6, #1
 8017b10:	e7ee      	b.n	8017af0 <__libc_init_array+0xc>
 8017b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b16:	4798      	blx	r3
 8017b18:	3601      	adds	r6, #1
 8017b1a:	e7f2      	b.n	8017b02 <__libc_init_array+0x1e>
 8017b1c:	0801e408 	.word	0x0801e408
 8017b20:	0801e408 	.word	0x0801e408
 8017b24:	0801e408 	.word	0x0801e408
 8017b28:	0801e40c 	.word	0x0801e40c

08017b2c <__retarget_lock_init_recursive>:
 8017b2c:	4770      	bx	lr

08017b2e <__retarget_lock_acquire_recursive>:
 8017b2e:	4770      	bx	lr

08017b30 <__retarget_lock_release_recursive>:
 8017b30:	4770      	bx	lr

08017b32 <memcpy>:
 8017b32:	440a      	add	r2, r1
 8017b34:	4291      	cmp	r1, r2
 8017b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8017b3a:	d100      	bne.n	8017b3e <memcpy+0xc>
 8017b3c:	4770      	bx	lr
 8017b3e:	b510      	push	{r4, lr}
 8017b40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b48:	4291      	cmp	r1, r2
 8017b4a:	d1f9      	bne.n	8017b40 <memcpy+0xe>
 8017b4c:	bd10      	pop	{r4, pc}
	...

08017b50 <nanf>:
 8017b50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017b58 <nanf+0x8>
 8017b54:	4770      	bx	lr
 8017b56:	bf00      	nop
 8017b58:	7fc00000 	.word	0x7fc00000

08017b5c <quorem>:
 8017b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b60:	6903      	ldr	r3, [r0, #16]
 8017b62:	690c      	ldr	r4, [r1, #16]
 8017b64:	42a3      	cmp	r3, r4
 8017b66:	4607      	mov	r7, r0
 8017b68:	db7e      	blt.n	8017c68 <quorem+0x10c>
 8017b6a:	3c01      	subs	r4, #1
 8017b6c:	f101 0814 	add.w	r8, r1, #20
 8017b70:	f100 0514 	add.w	r5, r0, #20
 8017b74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017b78:	9301      	str	r3, [sp, #4]
 8017b7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017b7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017b82:	3301      	adds	r3, #1
 8017b84:	429a      	cmp	r2, r3
 8017b86:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017b8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017b8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8017b92:	d331      	bcc.n	8017bf8 <quorem+0x9c>
 8017b94:	f04f 0e00 	mov.w	lr, #0
 8017b98:	4640      	mov	r0, r8
 8017b9a:	46ac      	mov	ip, r5
 8017b9c:	46f2      	mov	sl, lr
 8017b9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017ba2:	b293      	uxth	r3, r2
 8017ba4:	fb06 e303 	mla	r3, r6, r3, lr
 8017ba8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017bac:	0c1a      	lsrs	r2, r3, #16
 8017bae:	b29b      	uxth	r3, r3
 8017bb0:	ebaa 0303 	sub.w	r3, sl, r3
 8017bb4:	f8dc a000 	ldr.w	sl, [ip]
 8017bb8:	fa13 f38a 	uxtah	r3, r3, sl
 8017bbc:	fb06 220e 	mla	r2, r6, lr, r2
 8017bc0:	9300      	str	r3, [sp, #0]
 8017bc2:	9b00      	ldr	r3, [sp, #0]
 8017bc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017bc8:	b292      	uxth	r2, r2
 8017bca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017bce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017bd2:	f8bd 3000 	ldrh.w	r3, [sp]
 8017bd6:	4581      	cmp	r9, r0
 8017bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017bdc:	f84c 3b04 	str.w	r3, [ip], #4
 8017be0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017be4:	d2db      	bcs.n	8017b9e <quorem+0x42>
 8017be6:	f855 300b 	ldr.w	r3, [r5, fp]
 8017bea:	b92b      	cbnz	r3, 8017bf8 <quorem+0x9c>
 8017bec:	9b01      	ldr	r3, [sp, #4]
 8017bee:	3b04      	subs	r3, #4
 8017bf0:	429d      	cmp	r5, r3
 8017bf2:	461a      	mov	r2, r3
 8017bf4:	d32c      	bcc.n	8017c50 <quorem+0xf4>
 8017bf6:	613c      	str	r4, [r7, #16]
 8017bf8:	4638      	mov	r0, r7
 8017bfa:	f001 f9f1 	bl	8018fe0 <__mcmp>
 8017bfe:	2800      	cmp	r0, #0
 8017c00:	db22      	blt.n	8017c48 <quorem+0xec>
 8017c02:	3601      	adds	r6, #1
 8017c04:	4629      	mov	r1, r5
 8017c06:	2000      	movs	r0, #0
 8017c08:	f858 2b04 	ldr.w	r2, [r8], #4
 8017c0c:	f8d1 c000 	ldr.w	ip, [r1]
 8017c10:	b293      	uxth	r3, r2
 8017c12:	1ac3      	subs	r3, r0, r3
 8017c14:	0c12      	lsrs	r2, r2, #16
 8017c16:	fa13 f38c 	uxtah	r3, r3, ip
 8017c1a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017c1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017c22:	b29b      	uxth	r3, r3
 8017c24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c28:	45c1      	cmp	r9, r8
 8017c2a:	f841 3b04 	str.w	r3, [r1], #4
 8017c2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017c32:	d2e9      	bcs.n	8017c08 <quorem+0xac>
 8017c34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017c38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017c3c:	b922      	cbnz	r2, 8017c48 <quorem+0xec>
 8017c3e:	3b04      	subs	r3, #4
 8017c40:	429d      	cmp	r5, r3
 8017c42:	461a      	mov	r2, r3
 8017c44:	d30a      	bcc.n	8017c5c <quorem+0x100>
 8017c46:	613c      	str	r4, [r7, #16]
 8017c48:	4630      	mov	r0, r6
 8017c4a:	b003      	add	sp, #12
 8017c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c50:	6812      	ldr	r2, [r2, #0]
 8017c52:	3b04      	subs	r3, #4
 8017c54:	2a00      	cmp	r2, #0
 8017c56:	d1ce      	bne.n	8017bf6 <quorem+0x9a>
 8017c58:	3c01      	subs	r4, #1
 8017c5a:	e7c9      	b.n	8017bf0 <quorem+0x94>
 8017c5c:	6812      	ldr	r2, [r2, #0]
 8017c5e:	3b04      	subs	r3, #4
 8017c60:	2a00      	cmp	r2, #0
 8017c62:	d1f0      	bne.n	8017c46 <quorem+0xea>
 8017c64:	3c01      	subs	r4, #1
 8017c66:	e7eb      	b.n	8017c40 <quorem+0xe4>
 8017c68:	2000      	movs	r0, #0
 8017c6a:	e7ee      	b.n	8017c4a <quorem+0xee>
 8017c6c:	0000      	movs	r0, r0
	...

08017c70 <_dtoa_r>:
 8017c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c74:	ed2d 8b04 	vpush	{d8-d9}
 8017c78:	69c5      	ldr	r5, [r0, #28]
 8017c7a:	b093      	sub	sp, #76	; 0x4c
 8017c7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017c80:	ec57 6b10 	vmov	r6, r7, d0
 8017c84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017c88:	9107      	str	r1, [sp, #28]
 8017c8a:	4604      	mov	r4, r0
 8017c8c:	920a      	str	r2, [sp, #40]	; 0x28
 8017c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8017c90:	b975      	cbnz	r5, 8017cb0 <_dtoa_r+0x40>
 8017c92:	2010      	movs	r0, #16
 8017c94:	f000 fe2a 	bl	80188ec <malloc>
 8017c98:	4602      	mov	r2, r0
 8017c9a:	61e0      	str	r0, [r4, #28]
 8017c9c:	b920      	cbnz	r0, 8017ca8 <_dtoa_r+0x38>
 8017c9e:	4bae      	ldr	r3, [pc, #696]	; (8017f58 <_dtoa_r+0x2e8>)
 8017ca0:	21ef      	movs	r1, #239	; 0xef
 8017ca2:	48ae      	ldr	r0, [pc, #696]	; (8017f5c <_dtoa_r+0x2ec>)
 8017ca4:	f002 fc64 	bl	801a570 <__assert_func>
 8017ca8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017cac:	6005      	str	r5, [r0, #0]
 8017cae:	60c5      	str	r5, [r0, #12]
 8017cb0:	69e3      	ldr	r3, [r4, #28]
 8017cb2:	6819      	ldr	r1, [r3, #0]
 8017cb4:	b151      	cbz	r1, 8017ccc <_dtoa_r+0x5c>
 8017cb6:	685a      	ldr	r2, [r3, #4]
 8017cb8:	604a      	str	r2, [r1, #4]
 8017cba:	2301      	movs	r3, #1
 8017cbc:	4093      	lsls	r3, r2
 8017cbe:	608b      	str	r3, [r1, #8]
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f000 ff07 	bl	8018ad4 <_Bfree>
 8017cc6:	69e3      	ldr	r3, [r4, #28]
 8017cc8:	2200      	movs	r2, #0
 8017cca:	601a      	str	r2, [r3, #0]
 8017ccc:	1e3b      	subs	r3, r7, #0
 8017cce:	bfbb      	ittet	lt
 8017cd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017cd4:	9303      	strlt	r3, [sp, #12]
 8017cd6:	2300      	movge	r3, #0
 8017cd8:	2201      	movlt	r2, #1
 8017cda:	bfac      	ite	ge
 8017cdc:	f8c8 3000 	strge.w	r3, [r8]
 8017ce0:	f8c8 2000 	strlt.w	r2, [r8]
 8017ce4:	4b9e      	ldr	r3, [pc, #632]	; (8017f60 <_dtoa_r+0x2f0>)
 8017ce6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017cea:	ea33 0308 	bics.w	r3, r3, r8
 8017cee:	d11b      	bne.n	8017d28 <_dtoa_r+0xb8>
 8017cf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017cf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8017cf6:	6013      	str	r3, [r2, #0]
 8017cf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017cfc:	4333      	orrs	r3, r6
 8017cfe:	f000 8593 	beq.w	8018828 <_dtoa_r+0xbb8>
 8017d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d04:	b963      	cbnz	r3, 8017d20 <_dtoa_r+0xb0>
 8017d06:	4b97      	ldr	r3, [pc, #604]	; (8017f64 <_dtoa_r+0x2f4>)
 8017d08:	e027      	b.n	8017d5a <_dtoa_r+0xea>
 8017d0a:	4b97      	ldr	r3, [pc, #604]	; (8017f68 <_dtoa_r+0x2f8>)
 8017d0c:	9300      	str	r3, [sp, #0]
 8017d0e:	3308      	adds	r3, #8
 8017d10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017d12:	6013      	str	r3, [r2, #0]
 8017d14:	9800      	ldr	r0, [sp, #0]
 8017d16:	b013      	add	sp, #76	; 0x4c
 8017d18:	ecbd 8b04 	vpop	{d8-d9}
 8017d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d20:	4b90      	ldr	r3, [pc, #576]	; (8017f64 <_dtoa_r+0x2f4>)
 8017d22:	9300      	str	r3, [sp, #0]
 8017d24:	3303      	adds	r3, #3
 8017d26:	e7f3      	b.n	8017d10 <_dtoa_r+0xa0>
 8017d28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	ec51 0b17 	vmov	r0, r1, d7
 8017d32:	eeb0 8a47 	vmov.f32	s16, s14
 8017d36:	eef0 8a67 	vmov.f32	s17, s15
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	f7e8 feec 	bl	8000b18 <__aeabi_dcmpeq>
 8017d40:	4681      	mov	r9, r0
 8017d42:	b160      	cbz	r0, 8017d5e <_dtoa_r+0xee>
 8017d44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017d46:	2301      	movs	r3, #1
 8017d48:	6013      	str	r3, [r2, #0]
 8017d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	f000 8568 	beq.w	8018822 <_dtoa_r+0xbb2>
 8017d52:	4b86      	ldr	r3, [pc, #536]	; (8017f6c <_dtoa_r+0x2fc>)
 8017d54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017d56:	6013      	str	r3, [r2, #0]
 8017d58:	3b01      	subs	r3, #1
 8017d5a:	9300      	str	r3, [sp, #0]
 8017d5c:	e7da      	b.n	8017d14 <_dtoa_r+0xa4>
 8017d5e:	aa10      	add	r2, sp, #64	; 0x40
 8017d60:	a911      	add	r1, sp, #68	; 0x44
 8017d62:	4620      	mov	r0, r4
 8017d64:	eeb0 0a48 	vmov.f32	s0, s16
 8017d68:	eef0 0a68 	vmov.f32	s1, s17
 8017d6c:	f001 fa4e 	bl	801920c <__d2b>
 8017d70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017d74:	4682      	mov	sl, r0
 8017d76:	2d00      	cmp	r5, #0
 8017d78:	d07f      	beq.n	8017e7a <_dtoa_r+0x20a>
 8017d7a:	ee18 3a90 	vmov	r3, s17
 8017d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017d82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017d86:	ec51 0b18 	vmov	r0, r1, d8
 8017d8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017d8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017d92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017d96:	4619      	mov	r1, r3
 8017d98:	2200      	movs	r2, #0
 8017d9a:	4b75      	ldr	r3, [pc, #468]	; (8017f70 <_dtoa_r+0x300>)
 8017d9c:	f7e8 fa9c 	bl	80002d8 <__aeabi_dsub>
 8017da0:	a367      	add	r3, pc, #412	; (adr r3, 8017f40 <_dtoa_r+0x2d0>)
 8017da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017da6:	f7e8 fc4f 	bl	8000648 <__aeabi_dmul>
 8017daa:	a367      	add	r3, pc, #412	; (adr r3, 8017f48 <_dtoa_r+0x2d8>)
 8017dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017db0:	f7e8 fa94 	bl	80002dc <__adddf3>
 8017db4:	4606      	mov	r6, r0
 8017db6:	4628      	mov	r0, r5
 8017db8:	460f      	mov	r7, r1
 8017dba:	f7e8 fbdb 	bl	8000574 <__aeabi_i2d>
 8017dbe:	a364      	add	r3, pc, #400	; (adr r3, 8017f50 <_dtoa_r+0x2e0>)
 8017dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dc4:	f7e8 fc40 	bl	8000648 <__aeabi_dmul>
 8017dc8:	4602      	mov	r2, r0
 8017dca:	460b      	mov	r3, r1
 8017dcc:	4630      	mov	r0, r6
 8017dce:	4639      	mov	r1, r7
 8017dd0:	f7e8 fa84 	bl	80002dc <__adddf3>
 8017dd4:	4606      	mov	r6, r0
 8017dd6:	460f      	mov	r7, r1
 8017dd8:	f7e8 fee6 	bl	8000ba8 <__aeabi_d2iz>
 8017ddc:	2200      	movs	r2, #0
 8017dde:	4683      	mov	fp, r0
 8017de0:	2300      	movs	r3, #0
 8017de2:	4630      	mov	r0, r6
 8017de4:	4639      	mov	r1, r7
 8017de6:	f7e8 fea1 	bl	8000b2c <__aeabi_dcmplt>
 8017dea:	b148      	cbz	r0, 8017e00 <_dtoa_r+0x190>
 8017dec:	4658      	mov	r0, fp
 8017dee:	f7e8 fbc1 	bl	8000574 <__aeabi_i2d>
 8017df2:	4632      	mov	r2, r6
 8017df4:	463b      	mov	r3, r7
 8017df6:	f7e8 fe8f 	bl	8000b18 <__aeabi_dcmpeq>
 8017dfa:	b908      	cbnz	r0, 8017e00 <_dtoa_r+0x190>
 8017dfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017e00:	f1bb 0f16 	cmp.w	fp, #22
 8017e04:	d857      	bhi.n	8017eb6 <_dtoa_r+0x246>
 8017e06:	4b5b      	ldr	r3, [pc, #364]	; (8017f74 <_dtoa_r+0x304>)
 8017e08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e10:	ec51 0b18 	vmov	r0, r1, d8
 8017e14:	f7e8 fe8a 	bl	8000b2c <__aeabi_dcmplt>
 8017e18:	2800      	cmp	r0, #0
 8017e1a:	d04e      	beq.n	8017eba <_dtoa_r+0x24a>
 8017e1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017e20:	2300      	movs	r3, #0
 8017e22:	930c      	str	r3, [sp, #48]	; 0x30
 8017e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e26:	1b5b      	subs	r3, r3, r5
 8017e28:	1e5a      	subs	r2, r3, #1
 8017e2a:	bf45      	ittet	mi
 8017e2c:	f1c3 0301 	rsbmi	r3, r3, #1
 8017e30:	9305      	strmi	r3, [sp, #20]
 8017e32:	2300      	movpl	r3, #0
 8017e34:	2300      	movmi	r3, #0
 8017e36:	9206      	str	r2, [sp, #24]
 8017e38:	bf54      	ite	pl
 8017e3a:	9305      	strpl	r3, [sp, #20]
 8017e3c:	9306      	strmi	r3, [sp, #24]
 8017e3e:	f1bb 0f00 	cmp.w	fp, #0
 8017e42:	db3c      	blt.n	8017ebe <_dtoa_r+0x24e>
 8017e44:	9b06      	ldr	r3, [sp, #24]
 8017e46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017e4a:	445b      	add	r3, fp
 8017e4c:	9306      	str	r3, [sp, #24]
 8017e4e:	2300      	movs	r3, #0
 8017e50:	9308      	str	r3, [sp, #32]
 8017e52:	9b07      	ldr	r3, [sp, #28]
 8017e54:	2b09      	cmp	r3, #9
 8017e56:	d868      	bhi.n	8017f2a <_dtoa_r+0x2ba>
 8017e58:	2b05      	cmp	r3, #5
 8017e5a:	bfc4      	itt	gt
 8017e5c:	3b04      	subgt	r3, #4
 8017e5e:	9307      	strgt	r3, [sp, #28]
 8017e60:	9b07      	ldr	r3, [sp, #28]
 8017e62:	f1a3 0302 	sub.w	r3, r3, #2
 8017e66:	bfcc      	ite	gt
 8017e68:	2500      	movgt	r5, #0
 8017e6a:	2501      	movle	r5, #1
 8017e6c:	2b03      	cmp	r3, #3
 8017e6e:	f200 8085 	bhi.w	8017f7c <_dtoa_r+0x30c>
 8017e72:	e8df f003 	tbb	[pc, r3]
 8017e76:	3b2e      	.short	0x3b2e
 8017e78:	5839      	.short	0x5839
 8017e7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017e7e:	441d      	add	r5, r3
 8017e80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017e84:	2b20      	cmp	r3, #32
 8017e86:	bfc1      	itttt	gt
 8017e88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017e8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8017e90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017e94:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017e98:	bfd6      	itet	le
 8017e9a:	f1c3 0320 	rsble	r3, r3, #32
 8017e9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8017ea2:	fa06 f003 	lslle.w	r0, r6, r3
 8017ea6:	f7e8 fb55 	bl	8000554 <__aeabi_ui2d>
 8017eaa:	2201      	movs	r2, #1
 8017eac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017eb0:	3d01      	subs	r5, #1
 8017eb2:	920e      	str	r2, [sp, #56]	; 0x38
 8017eb4:	e76f      	b.n	8017d96 <_dtoa_r+0x126>
 8017eb6:	2301      	movs	r3, #1
 8017eb8:	e7b3      	b.n	8017e22 <_dtoa_r+0x1b2>
 8017eba:	900c      	str	r0, [sp, #48]	; 0x30
 8017ebc:	e7b2      	b.n	8017e24 <_dtoa_r+0x1b4>
 8017ebe:	9b05      	ldr	r3, [sp, #20]
 8017ec0:	eba3 030b 	sub.w	r3, r3, fp
 8017ec4:	9305      	str	r3, [sp, #20]
 8017ec6:	f1cb 0300 	rsb	r3, fp, #0
 8017eca:	9308      	str	r3, [sp, #32]
 8017ecc:	2300      	movs	r3, #0
 8017ece:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ed0:	e7bf      	b.n	8017e52 <_dtoa_r+0x1e2>
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	dc52      	bgt.n	8017f82 <_dtoa_r+0x312>
 8017edc:	2301      	movs	r3, #1
 8017ede:	9301      	str	r3, [sp, #4]
 8017ee0:	9304      	str	r3, [sp, #16]
 8017ee2:	461a      	mov	r2, r3
 8017ee4:	920a      	str	r2, [sp, #40]	; 0x28
 8017ee6:	e00b      	b.n	8017f00 <_dtoa_r+0x290>
 8017ee8:	2301      	movs	r3, #1
 8017eea:	e7f3      	b.n	8017ed4 <_dtoa_r+0x264>
 8017eec:	2300      	movs	r3, #0
 8017eee:	9309      	str	r3, [sp, #36]	; 0x24
 8017ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ef2:	445b      	add	r3, fp
 8017ef4:	9301      	str	r3, [sp, #4]
 8017ef6:	3301      	adds	r3, #1
 8017ef8:	2b01      	cmp	r3, #1
 8017efa:	9304      	str	r3, [sp, #16]
 8017efc:	bfb8      	it	lt
 8017efe:	2301      	movlt	r3, #1
 8017f00:	69e0      	ldr	r0, [r4, #28]
 8017f02:	2100      	movs	r1, #0
 8017f04:	2204      	movs	r2, #4
 8017f06:	f102 0614 	add.w	r6, r2, #20
 8017f0a:	429e      	cmp	r6, r3
 8017f0c:	d93d      	bls.n	8017f8a <_dtoa_r+0x31a>
 8017f0e:	6041      	str	r1, [r0, #4]
 8017f10:	4620      	mov	r0, r4
 8017f12:	f000 fd9f 	bl	8018a54 <_Balloc>
 8017f16:	9000      	str	r0, [sp, #0]
 8017f18:	2800      	cmp	r0, #0
 8017f1a:	d139      	bne.n	8017f90 <_dtoa_r+0x320>
 8017f1c:	4b16      	ldr	r3, [pc, #88]	; (8017f78 <_dtoa_r+0x308>)
 8017f1e:	4602      	mov	r2, r0
 8017f20:	f240 11af 	movw	r1, #431	; 0x1af
 8017f24:	e6bd      	b.n	8017ca2 <_dtoa_r+0x32>
 8017f26:	2301      	movs	r3, #1
 8017f28:	e7e1      	b.n	8017eee <_dtoa_r+0x27e>
 8017f2a:	2501      	movs	r5, #1
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	9307      	str	r3, [sp, #28]
 8017f30:	9509      	str	r5, [sp, #36]	; 0x24
 8017f32:	f04f 33ff 	mov.w	r3, #4294967295
 8017f36:	9301      	str	r3, [sp, #4]
 8017f38:	9304      	str	r3, [sp, #16]
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	2312      	movs	r3, #18
 8017f3e:	e7d1      	b.n	8017ee4 <_dtoa_r+0x274>
 8017f40:	636f4361 	.word	0x636f4361
 8017f44:	3fd287a7 	.word	0x3fd287a7
 8017f48:	8b60c8b3 	.word	0x8b60c8b3
 8017f4c:	3fc68a28 	.word	0x3fc68a28
 8017f50:	509f79fb 	.word	0x509f79fb
 8017f54:	3fd34413 	.word	0x3fd34413
 8017f58:	0801e00e 	.word	0x0801e00e
 8017f5c:	0801e025 	.word	0x0801e025
 8017f60:	7ff00000 	.word	0x7ff00000
 8017f64:	0801e00a 	.word	0x0801e00a
 8017f68:	0801e001 	.word	0x0801e001
 8017f6c:	0801dfd9 	.word	0x0801dfd9
 8017f70:	3ff80000 	.word	0x3ff80000
 8017f74:	0801e110 	.word	0x0801e110
 8017f78:	0801e07d 	.word	0x0801e07d
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8017f80:	e7d7      	b.n	8017f32 <_dtoa_r+0x2c2>
 8017f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f84:	9301      	str	r3, [sp, #4]
 8017f86:	9304      	str	r3, [sp, #16]
 8017f88:	e7ba      	b.n	8017f00 <_dtoa_r+0x290>
 8017f8a:	3101      	adds	r1, #1
 8017f8c:	0052      	lsls	r2, r2, #1
 8017f8e:	e7ba      	b.n	8017f06 <_dtoa_r+0x296>
 8017f90:	69e3      	ldr	r3, [r4, #28]
 8017f92:	9a00      	ldr	r2, [sp, #0]
 8017f94:	601a      	str	r2, [r3, #0]
 8017f96:	9b04      	ldr	r3, [sp, #16]
 8017f98:	2b0e      	cmp	r3, #14
 8017f9a:	f200 80a8 	bhi.w	80180ee <_dtoa_r+0x47e>
 8017f9e:	2d00      	cmp	r5, #0
 8017fa0:	f000 80a5 	beq.w	80180ee <_dtoa_r+0x47e>
 8017fa4:	f1bb 0f00 	cmp.w	fp, #0
 8017fa8:	dd38      	ble.n	801801c <_dtoa_r+0x3ac>
 8017faa:	4bc0      	ldr	r3, [pc, #768]	; (80182ac <_dtoa_r+0x63c>)
 8017fac:	f00b 020f 	and.w	r2, fp, #15
 8017fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017fb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017fb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017fbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017fc0:	d019      	beq.n	8017ff6 <_dtoa_r+0x386>
 8017fc2:	4bbb      	ldr	r3, [pc, #748]	; (80182b0 <_dtoa_r+0x640>)
 8017fc4:	ec51 0b18 	vmov	r0, r1, d8
 8017fc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017fcc:	f7e8 fc66 	bl	800089c <__aeabi_ddiv>
 8017fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017fd4:	f008 080f 	and.w	r8, r8, #15
 8017fd8:	2503      	movs	r5, #3
 8017fda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80182b0 <_dtoa_r+0x640>
 8017fde:	f1b8 0f00 	cmp.w	r8, #0
 8017fe2:	d10a      	bne.n	8017ffa <_dtoa_r+0x38a>
 8017fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017fe8:	4632      	mov	r2, r6
 8017fea:	463b      	mov	r3, r7
 8017fec:	f7e8 fc56 	bl	800089c <__aeabi_ddiv>
 8017ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ff4:	e02b      	b.n	801804e <_dtoa_r+0x3de>
 8017ff6:	2502      	movs	r5, #2
 8017ff8:	e7ef      	b.n	8017fda <_dtoa_r+0x36a>
 8017ffa:	f018 0f01 	tst.w	r8, #1
 8017ffe:	d008      	beq.n	8018012 <_dtoa_r+0x3a2>
 8018000:	4630      	mov	r0, r6
 8018002:	4639      	mov	r1, r7
 8018004:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018008:	f7e8 fb1e 	bl	8000648 <__aeabi_dmul>
 801800c:	3501      	adds	r5, #1
 801800e:	4606      	mov	r6, r0
 8018010:	460f      	mov	r7, r1
 8018012:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018016:	f109 0908 	add.w	r9, r9, #8
 801801a:	e7e0      	b.n	8017fde <_dtoa_r+0x36e>
 801801c:	f000 809f 	beq.w	801815e <_dtoa_r+0x4ee>
 8018020:	f1cb 0600 	rsb	r6, fp, #0
 8018024:	4ba1      	ldr	r3, [pc, #644]	; (80182ac <_dtoa_r+0x63c>)
 8018026:	4fa2      	ldr	r7, [pc, #648]	; (80182b0 <_dtoa_r+0x640>)
 8018028:	f006 020f 	and.w	r2, r6, #15
 801802c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018034:	ec51 0b18 	vmov	r0, r1, d8
 8018038:	f7e8 fb06 	bl	8000648 <__aeabi_dmul>
 801803c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018040:	1136      	asrs	r6, r6, #4
 8018042:	2300      	movs	r3, #0
 8018044:	2502      	movs	r5, #2
 8018046:	2e00      	cmp	r6, #0
 8018048:	d17e      	bne.n	8018148 <_dtoa_r+0x4d8>
 801804a:	2b00      	cmp	r3, #0
 801804c:	d1d0      	bne.n	8017ff0 <_dtoa_r+0x380>
 801804e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018050:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018054:	2b00      	cmp	r3, #0
 8018056:	f000 8084 	beq.w	8018162 <_dtoa_r+0x4f2>
 801805a:	4b96      	ldr	r3, [pc, #600]	; (80182b4 <_dtoa_r+0x644>)
 801805c:	2200      	movs	r2, #0
 801805e:	4640      	mov	r0, r8
 8018060:	4649      	mov	r1, r9
 8018062:	f7e8 fd63 	bl	8000b2c <__aeabi_dcmplt>
 8018066:	2800      	cmp	r0, #0
 8018068:	d07b      	beq.n	8018162 <_dtoa_r+0x4f2>
 801806a:	9b04      	ldr	r3, [sp, #16]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d078      	beq.n	8018162 <_dtoa_r+0x4f2>
 8018070:	9b01      	ldr	r3, [sp, #4]
 8018072:	2b00      	cmp	r3, #0
 8018074:	dd39      	ble.n	80180ea <_dtoa_r+0x47a>
 8018076:	4b90      	ldr	r3, [pc, #576]	; (80182b8 <_dtoa_r+0x648>)
 8018078:	2200      	movs	r2, #0
 801807a:	4640      	mov	r0, r8
 801807c:	4649      	mov	r1, r9
 801807e:	f7e8 fae3 	bl	8000648 <__aeabi_dmul>
 8018082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018086:	9e01      	ldr	r6, [sp, #4]
 8018088:	f10b 37ff 	add.w	r7, fp, #4294967295
 801808c:	3501      	adds	r5, #1
 801808e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018092:	4628      	mov	r0, r5
 8018094:	f7e8 fa6e 	bl	8000574 <__aeabi_i2d>
 8018098:	4642      	mov	r2, r8
 801809a:	464b      	mov	r3, r9
 801809c:	f7e8 fad4 	bl	8000648 <__aeabi_dmul>
 80180a0:	4b86      	ldr	r3, [pc, #536]	; (80182bc <_dtoa_r+0x64c>)
 80180a2:	2200      	movs	r2, #0
 80180a4:	f7e8 f91a 	bl	80002dc <__adddf3>
 80180a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80180ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80180b0:	9303      	str	r3, [sp, #12]
 80180b2:	2e00      	cmp	r6, #0
 80180b4:	d158      	bne.n	8018168 <_dtoa_r+0x4f8>
 80180b6:	4b82      	ldr	r3, [pc, #520]	; (80182c0 <_dtoa_r+0x650>)
 80180b8:	2200      	movs	r2, #0
 80180ba:	4640      	mov	r0, r8
 80180bc:	4649      	mov	r1, r9
 80180be:	f7e8 f90b 	bl	80002d8 <__aeabi_dsub>
 80180c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80180c6:	4680      	mov	r8, r0
 80180c8:	4689      	mov	r9, r1
 80180ca:	f7e8 fd4d 	bl	8000b68 <__aeabi_dcmpgt>
 80180ce:	2800      	cmp	r0, #0
 80180d0:	f040 8296 	bne.w	8018600 <_dtoa_r+0x990>
 80180d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80180d8:	4640      	mov	r0, r8
 80180da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80180de:	4649      	mov	r1, r9
 80180e0:	f7e8 fd24 	bl	8000b2c <__aeabi_dcmplt>
 80180e4:	2800      	cmp	r0, #0
 80180e6:	f040 8289 	bne.w	80185fc <_dtoa_r+0x98c>
 80180ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80180ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	f2c0 814e 	blt.w	8018392 <_dtoa_r+0x722>
 80180f6:	f1bb 0f0e 	cmp.w	fp, #14
 80180fa:	f300 814a 	bgt.w	8018392 <_dtoa_r+0x722>
 80180fe:	4b6b      	ldr	r3, [pc, #428]	; (80182ac <_dtoa_r+0x63c>)
 8018100:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018104:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801810a:	2b00      	cmp	r3, #0
 801810c:	f280 80dc 	bge.w	80182c8 <_dtoa_r+0x658>
 8018110:	9b04      	ldr	r3, [sp, #16]
 8018112:	2b00      	cmp	r3, #0
 8018114:	f300 80d8 	bgt.w	80182c8 <_dtoa_r+0x658>
 8018118:	f040 826f 	bne.w	80185fa <_dtoa_r+0x98a>
 801811c:	4b68      	ldr	r3, [pc, #416]	; (80182c0 <_dtoa_r+0x650>)
 801811e:	2200      	movs	r2, #0
 8018120:	4640      	mov	r0, r8
 8018122:	4649      	mov	r1, r9
 8018124:	f7e8 fa90 	bl	8000648 <__aeabi_dmul>
 8018128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801812c:	f7e8 fd12 	bl	8000b54 <__aeabi_dcmpge>
 8018130:	9e04      	ldr	r6, [sp, #16]
 8018132:	4637      	mov	r7, r6
 8018134:	2800      	cmp	r0, #0
 8018136:	f040 8245 	bne.w	80185c4 <_dtoa_r+0x954>
 801813a:	9d00      	ldr	r5, [sp, #0]
 801813c:	2331      	movs	r3, #49	; 0x31
 801813e:	f805 3b01 	strb.w	r3, [r5], #1
 8018142:	f10b 0b01 	add.w	fp, fp, #1
 8018146:	e241      	b.n	80185cc <_dtoa_r+0x95c>
 8018148:	07f2      	lsls	r2, r6, #31
 801814a:	d505      	bpl.n	8018158 <_dtoa_r+0x4e8>
 801814c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018150:	f7e8 fa7a 	bl	8000648 <__aeabi_dmul>
 8018154:	3501      	adds	r5, #1
 8018156:	2301      	movs	r3, #1
 8018158:	1076      	asrs	r6, r6, #1
 801815a:	3708      	adds	r7, #8
 801815c:	e773      	b.n	8018046 <_dtoa_r+0x3d6>
 801815e:	2502      	movs	r5, #2
 8018160:	e775      	b.n	801804e <_dtoa_r+0x3de>
 8018162:	9e04      	ldr	r6, [sp, #16]
 8018164:	465f      	mov	r7, fp
 8018166:	e792      	b.n	801808e <_dtoa_r+0x41e>
 8018168:	9900      	ldr	r1, [sp, #0]
 801816a:	4b50      	ldr	r3, [pc, #320]	; (80182ac <_dtoa_r+0x63c>)
 801816c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018170:	4431      	add	r1, r6
 8018172:	9102      	str	r1, [sp, #8]
 8018174:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018176:	eeb0 9a47 	vmov.f32	s18, s14
 801817a:	eef0 9a67 	vmov.f32	s19, s15
 801817e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8018182:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018186:	2900      	cmp	r1, #0
 8018188:	d044      	beq.n	8018214 <_dtoa_r+0x5a4>
 801818a:	494e      	ldr	r1, [pc, #312]	; (80182c4 <_dtoa_r+0x654>)
 801818c:	2000      	movs	r0, #0
 801818e:	f7e8 fb85 	bl	800089c <__aeabi_ddiv>
 8018192:	ec53 2b19 	vmov	r2, r3, d9
 8018196:	f7e8 f89f 	bl	80002d8 <__aeabi_dsub>
 801819a:	9d00      	ldr	r5, [sp, #0]
 801819c:	ec41 0b19 	vmov	d9, r0, r1
 80181a0:	4649      	mov	r1, r9
 80181a2:	4640      	mov	r0, r8
 80181a4:	f7e8 fd00 	bl	8000ba8 <__aeabi_d2iz>
 80181a8:	4606      	mov	r6, r0
 80181aa:	f7e8 f9e3 	bl	8000574 <__aeabi_i2d>
 80181ae:	4602      	mov	r2, r0
 80181b0:	460b      	mov	r3, r1
 80181b2:	4640      	mov	r0, r8
 80181b4:	4649      	mov	r1, r9
 80181b6:	f7e8 f88f 	bl	80002d8 <__aeabi_dsub>
 80181ba:	3630      	adds	r6, #48	; 0x30
 80181bc:	f805 6b01 	strb.w	r6, [r5], #1
 80181c0:	ec53 2b19 	vmov	r2, r3, d9
 80181c4:	4680      	mov	r8, r0
 80181c6:	4689      	mov	r9, r1
 80181c8:	f7e8 fcb0 	bl	8000b2c <__aeabi_dcmplt>
 80181cc:	2800      	cmp	r0, #0
 80181ce:	d164      	bne.n	801829a <_dtoa_r+0x62a>
 80181d0:	4642      	mov	r2, r8
 80181d2:	464b      	mov	r3, r9
 80181d4:	4937      	ldr	r1, [pc, #220]	; (80182b4 <_dtoa_r+0x644>)
 80181d6:	2000      	movs	r0, #0
 80181d8:	f7e8 f87e 	bl	80002d8 <__aeabi_dsub>
 80181dc:	ec53 2b19 	vmov	r2, r3, d9
 80181e0:	f7e8 fca4 	bl	8000b2c <__aeabi_dcmplt>
 80181e4:	2800      	cmp	r0, #0
 80181e6:	f040 80b6 	bne.w	8018356 <_dtoa_r+0x6e6>
 80181ea:	9b02      	ldr	r3, [sp, #8]
 80181ec:	429d      	cmp	r5, r3
 80181ee:	f43f af7c 	beq.w	80180ea <_dtoa_r+0x47a>
 80181f2:	4b31      	ldr	r3, [pc, #196]	; (80182b8 <_dtoa_r+0x648>)
 80181f4:	ec51 0b19 	vmov	r0, r1, d9
 80181f8:	2200      	movs	r2, #0
 80181fa:	f7e8 fa25 	bl	8000648 <__aeabi_dmul>
 80181fe:	4b2e      	ldr	r3, [pc, #184]	; (80182b8 <_dtoa_r+0x648>)
 8018200:	ec41 0b19 	vmov	d9, r0, r1
 8018204:	2200      	movs	r2, #0
 8018206:	4640      	mov	r0, r8
 8018208:	4649      	mov	r1, r9
 801820a:	f7e8 fa1d 	bl	8000648 <__aeabi_dmul>
 801820e:	4680      	mov	r8, r0
 8018210:	4689      	mov	r9, r1
 8018212:	e7c5      	b.n	80181a0 <_dtoa_r+0x530>
 8018214:	ec51 0b17 	vmov	r0, r1, d7
 8018218:	f7e8 fa16 	bl	8000648 <__aeabi_dmul>
 801821c:	9b02      	ldr	r3, [sp, #8]
 801821e:	9d00      	ldr	r5, [sp, #0]
 8018220:	930f      	str	r3, [sp, #60]	; 0x3c
 8018222:	ec41 0b19 	vmov	d9, r0, r1
 8018226:	4649      	mov	r1, r9
 8018228:	4640      	mov	r0, r8
 801822a:	f7e8 fcbd 	bl	8000ba8 <__aeabi_d2iz>
 801822e:	4606      	mov	r6, r0
 8018230:	f7e8 f9a0 	bl	8000574 <__aeabi_i2d>
 8018234:	3630      	adds	r6, #48	; 0x30
 8018236:	4602      	mov	r2, r0
 8018238:	460b      	mov	r3, r1
 801823a:	4640      	mov	r0, r8
 801823c:	4649      	mov	r1, r9
 801823e:	f7e8 f84b 	bl	80002d8 <__aeabi_dsub>
 8018242:	f805 6b01 	strb.w	r6, [r5], #1
 8018246:	9b02      	ldr	r3, [sp, #8]
 8018248:	429d      	cmp	r5, r3
 801824a:	4680      	mov	r8, r0
 801824c:	4689      	mov	r9, r1
 801824e:	f04f 0200 	mov.w	r2, #0
 8018252:	d124      	bne.n	801829e <_dtoa_r+0x62e>
 8018254:	4b1b      	ldr	r3, [pc, #108]	; (80182c4 <_dtoa_r+0x654>)
 8018256:	ec51 0b19 	vmov	r0, r1, d9
 801825a:	f7e8 f83f 	bl	80002dc <__adddf3>
 801825e:	4602      	mov	r2, r0
 8018260:	460b      	mov	r3, r1
 8018262:	4640      	mov	r0, r8
 8018264:	4649      	mov	r1, r9
 8018266:	f7e8 fc7f 	bl	8000b68 <__aeabi_dcmpgt>
 801826a:	2800      	cmp	r0, #0
 801826c:	d173      	bne.n	8018356 <_dtoa_r+0x6e6>
 801826e:	ec53 2b19 	vmov	r2, r3, d9
 8018272:	4914      	ldr	r1, [pc, #80]	; (80182c4 <_dtoa_r+0x654>)
 8018274:	2000      	movs	r0, #0
 8018276:	f7e8 f82f 	bl	80002d8 <__aeabi_dsub>
 801827a:	4602      	mov	r2, r0
 801827c:	460b      	mov	r3, r1
 801827e:	4640      	mov	r0, r8
 8018280:	4649      	mov	r1, r9
 8018282:	f7e8 fc53 	bl	8000b2c <__aeabi_dcmplt>
 8018286:	2800      	cmp	r0, #0
 8018288:	f43f af2f 	beq.w	80180ea <_dtoa_r+0x47a>
 801828c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801828e:	1e6b      	subs	r3, r5, #1
 8018290:	930f      	str	r3, [sp, #60]	; 0x3c
 8018292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018296:	2b30      	cmp	r3, #48	; 0x30
 8018298:	d0f8      	beq.n	801828c <_dtoa_r+0x61c>
 801829a:	46bb      	mov	fp, r7
 801829c:	e04a      	b.n	8018334 <_dtoa_r+0x6c4>
 801829e:	4b06      	ldr	r3, [pc, #24]	; (80182b8 <_dtoa_r+0x648>)
 80182a0:	f7e8 f9d2 	bl	8000648 <__aeabi_dmul>
 80182a4:	4680      	mov	r8, r0
 80182a6:	4689      	mov	r9, r1
 80182a8:	e7bd      	b.n	8018226 <_dtoa_r+0x5b6>
 80182aa:	bf00      	nop
 80182ac:	0801e110 	.word	0x0801e110
 80182b0:	0801e0e8 	.word	0x0801e0e8
 80182b4:	3ff00000 	.word	0x3ff00000
 80182b8:	40240000 	.word	0x40240000
 80182bc:	401c0000 	.word	0x401c0000
 80182c0:	40140000 	.word	0x40140000
 80182c4:	3fe00000 	.word	0x3fe00000
 80182c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80182cc:	9d00      	ldr	r5, [sp, #0]
 80182ce:	4642      	mov	r2, r8
 80182d0:	464b      	mov	r3, r9
 80182d2:	4630      	mov	r0, r6
 80182d4:	4639      	mov	r1, r7
 80182d6:	f7e8 fae1 	bl	800089c <__aeabi_ddiv>
 80182da:	f7e8 fc65 	bl	8000ba8 <__aeabi_d2iz>
 80182de:	9001      	str	r0, [sp, #4]
 80182e0:	f7e8 f948 	bl	8000574 <__aeabi_i2d>
 80182e4:	4642      	mov	r2, r8
 80182e6:	464b      	mov	r3, r9
 80182e8:	f7e8 f9ae 	bl	8000648 <__aeabi_dmul>
 80182ec:	4602      	mov	r2, r0
 80182ee:	460b      	mov	r3, r1
 80182f0:	4630      	mov	r0, r6
 80182f2:	4639      	mov	r1, r7
 80182f4:	f7e7 fff0 	bl	80002d8 <__aeabi_dsub>
 80182f8:	9e01      	ldr	r6, [sp, #4]
 80182fa:	9f04      	ldr	r7, [sp, #16]
 80182fc:	3630      	adds	r6, #48	; 0x30
 80182fe:	f805 6b01 	strb.w	r6, [r5], #1
 8018302:	9e00      	ldr	r6, [sp, #0]
 8018304:	1bae      	subs	r6, r5, r6
 8018306:	42b7      	cmp	r7, r6
 8018308:	4602      	mov	r2, r0
 801830a:	460b      	mov	r3, r1
 801830c:	d134      	bne.n	8018378 <_dtoa_r+0x708>
 801830e:	f7e7 ffe5 	bl	80002dc <__adddf3>
 8018312:	4642      	mov	r2, r8
 8018314:	464b      	mov	r3, r9
 8018316:	4606      	mov	r6, r0
 8018318:	460f      	mov	r7, r1
 801831a:	f7e8 fc25 	bl	8000b68 <__aeabi_dcmpgt>
 801831e:	b9c8      	cbnz	r0, 8018354 <_dtoa_r+0x6e4>
 8018320:	4642      	mov	r2, r8
 8018322:	464b      	mov	r3, r9
 8018324:	4630      	mov	r0, r6
 8018326:	4639      	mov	r1, r7
 8018328:	f7e8 fbf6 	bl	8000b18 <__aeabi_dcmpeq>
 801832c:	b110      	cbz	r0, 8018334 <_dtoa_r+0x6c4>
 801832e:	9b01      	ldr	r3, [sp, #4]
 8018330:	07db      	lsls	r3, r3, #31
 8018332:	d40f      	bmi.n	8018354 <_dtoa_r+0x6e4>
 8018334:	4651      	mov	r1, sl
 8018336:	4620      	mov	r0, r4
 8018338:	f000 fbcc 	bl	8018ad4 <_Bfree>
 801833c:	2300      	movs	r3, #0
 801833e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018340:	702b      	strb	r3, [r5, #0]
 8018342:	f10b 0301 	add.w	r3, fp, #1
 8018346:	6013      	str	r3, [r2, #0]
 8018348:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801834a:	2b00      	cmp	r3, #0
 801834c:	f43f ace2 	beq.w	8017d14 <_dtoa_r+0xa4>
 8018350:	601d      	str	r5, [r3, #0]
 8018352:	e4df      	b.n	8017d14 <_dtoa_r+0xa4>
 8018354:	465f      	mov	r7, fp
 8018356:	462b      	mov	r3, r5
 8018358:	461d      	mov	r5, r3
 801835a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801835e:	2a39      	cmp	r2, #57	; 0x39
 8018360:	d106      	bne.n	8018370 <_dtoa_r+0x700>
 8018362:	9a00      	ldr	r2, [sp, #0]
 8018364:	429a      	cmp	r2, r3
 8018366:	d1f7      	bne.n	8018358 <_dtoa_r+0x6e8>
 8018368:	9900      	ldr	r1, [sp, #0]
 801836a:	2230      	movs	r2, #48	; 0x30
 801836c:	3701      	adds	r7, #1
 801836e:	700a      	strb	r2, [r1, #0]
 8018370:	781a      	ldrb	r2, [r3, #0]
 8018372:	3201      	adds	r2, #1
 8018374:	701a      	strb	r2, [r3, #0]
 8018376:	e790      	b.n	801829a <_dtoa_r+0x62a>
 8018378:	4ba3      	ldr	r3, [pc, #652]	; (8018608 <_dtoa_r+0x998>)
 801837a:	2200      	movs	r2, #0
 801837c:	f7e8 f964 	bl	8000648 <__aeabi_dmul>
 8018380:	2200      	movs	r2, #0
 8018382:	2300      	movs	r3, #0
 8018384:	4606      	mov	r6, r0
 8018386:	460f      	mov	r7, r1
 8018388:	f7e8 fbc6 	bl	8000b18 <__aeabi_dcmpeq>
 801838c:	2800      	cmp	r0, #0
 801838e:	d09e      	beq.n	80182ce <_dtoa_r+0x65e>
 8018390:	e7d0      	b.n	8018334 <_dtoa_r+0x6c4>
 8018392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018394:	2a00      	cmp	r2, #0
 8018396:	f000 80ca 	beq.w	801852e <_dtoa_r+0x8be>
 801839a:	9a07      	ldr	r2, [sp, #28]
 801839c:	2a01      	cmp	r2, #1
 801839e:	f300 80ad 	bgt.w	80184fc <_dtoa_r+0x88c>
 80183a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80183a4:	2a00      	cmp	r2, #0
 80183a6:	f000 80a5 	beq.w	80184f4 <_dtoa_r+0x884>
 80183aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80183ae:	9e08      	ldr	r6, [sp, #32]
 80183b0:	9d05      	ldr	r5, [sp, #20]
 80183b2:	9a05      	ldr	r2, [sp, #20]
 80183b4:	441a      	add	r2, r3
 80183b6:	9205      	str	r2, [sp, #20]
 80183b8:	9a06      	ldr	r2, [sp, #24]
 80183ba:	2101      	movs	r1, #1
 80183bc:	441a      	add	r2, r3
 80183be:	4620      	mov	r0, r4
 80183c0:	9206      	str	r2, [sp, #24]
 80183c2:	f000 fc87 	bl	8018cd4 <__i2b>
 80183c6:	4607      	mov	r7, r0
 80183c8:	b165      	cbz	r5, 80183e4 <_dtoa_r+0x774>
 80183ca:	9b06      	ldr	r3, [sp, #24]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	dd09      	ble.n	80183e4 <_dtoa_r+0x774>
 80183d0:	42ab      	cmp	r3, r5
 80183d2:	9a05      	ldr	r2, [sp, #20]
 80183d4:	bfa8      	it	ge
 80183d6:	462b      	movge	r3, r5
 80183d8:	1ad2      	subs	r2, r2, r3
 80183da:	9205      	str	r2, [sp, #20]
 80183dc:	9a06      	ldr	r2, [sp, #24]
 80183de:	1aed      	subs	r5, r5, r3
 80183e0:	1ad3      	subs	r3, r2, r3
 80183e2:	9306      	str	r3, [sp, #24]
 80183e4:	9b08      	ldr	r3, [sp, #32]
 80183e6:	b1f3      	cbz	r3, 8018426 <_dtoa_r+0x7b6>
 80183e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	f000 80a3 	beq.w	8018536 <_dtoa_r+0x8c6>
 80183f0:	2e00      	cmp	r6, #0
 80183f2:	dd10      	ble.n	8018416 <_dtoa_r+0x7a6>
 80183f4:	4639      	mov	r1, r7
 80183f6:	4632      	mov	r2, r6
 80183f8:	4620      	mov	r0, r4
 80183fa:	f000 fd2b 	bl	8018e54 <__pow5mult>
 80183fe:	4652      	mov	r2, sl
 8018400:	4601      	mov	r1, r0
 8018402:	4607      	mov	r7, r0
 8018404:	4620      	mov	r0, r4
 8018406:	f000 fc7b 	bl	8018d00 <__multiply>
 801840a:	4651      	mov	r1, sl
 801840c:	4680      	mov	r8, r0
 801840e:	4620      	mov	r0, r4
 8018410:	f000 fb60 	bl	8018ad4 <_Bfree>
 8018414:	46c2      	mov	sl, r8
 8018416:	9b08      	ldr	r3, [sp, #32]
 8018418:	1b9a      	subs	r2, r3, r6
 801841a:	d004      	beq.n	8018426 <_dtoa_r+0x7b6>
 801841c:	4651      	mov	r1, sl
 801841e:	4620      	mov	r0, r4
 8018420:	f000 fd18 	bl	8018e54 <__pow5mult>
 8018424:	4682      	mov	sl, r0
 8018426:	2101      	movs	r1, #1
 8018428:	4620      	mov	r0, r4
 801842a:	f000 fc53 	bl	8018cd4 <__i2b>
 801842e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018430:	2b00      	cmp	r3, #0
 8018432:	4606      	mov	r6, r0
 8018434:	f340 8081 	ble.w	801853a <_dtoa_r+0x8ca>
 8018438:	461a      	mov	r2, r3
 801843a:	4601      	mov	r1, r0
 801843c:	4620      	mov	r0, r4
 801843e:	f000 fd09 	bl	8018e54 <__pow5mult>
 8018442:	9b07      	ldr	r3, [sp, #28]
 8018444:	2b01      	cmp	r3, #1
 8018446:	4606      	mov	r6, r0
 8018448:	dd7a      	ble.n	8018540 <_dtoa_r+0x8d0>
 801844a:	f04f 0800 	mov.w	r8, #0
 801844e:	6933      	ldr	r3, [r6, #16]
 8018450:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018454:	6918      	ldr	r0, [r3, #16]
 8018456:	f000 fbef 	bl	8018c38 <__hi0bits>
 801845a:	f1c0 0020 	rsb	r0, r0, #32
 801845e:	9b06      	ldr	r3, [sp, #24]
 8018460:	4418      	add	r0, r3
 8018462:	f010 001f 	ands.w	r0, r0, #31
 8018466:	f000 8094 	beq.w	8018592 <_dtoa_r+0x922>
 801846a:	f1c0 0320 	rsb	r3, r0, #32
 801846e:	2b04      	cmp	r3, #4
 8018470:	f340 8085 	ble.w	801857e <_dtoa_r+0x90e>
 8018474:	9b05      	ldr	r3, [sp, #20]
 8018476:	f1c0 001c 	rsb	r0, r0, #28
 801847a:	4403      	add	r3, r0
 801847c:	9305      	str	r3, [sp, #20]
 801847e:	9b06      	ldr	r3, [sp, #24]
 8018480:	4403      	add	r3, r0
 8018482:	4405      	add	r5, r0
 8018484:	9306      	str	r3, [sp, #24]
 8018486:	9b05      	ldr	r3, [sp, #20]
 8018488:	2b00      	cmp	r3, #0
 801848a:	dd05      	ble.n	8018498 <_dtoa_r+0x828>
 801848c:	4651      	mov	r1, sl
 801848e:	461a      	mov	r2, r3
 8018490:	4620      	mov	r0, r4
 8018492:	f000 fd39 	bl	8018f08 <__lshift>
 8018496:	4682      	mov	sl, r0
 8018498:	9b06      	ldr	r3, [sp, #24]
 801849a:	2b00      	cmp	r3, #0
 801849c:	dd05      	ble.n	80184aa <_dtoa_r+0x83a>
 801849e:	4631      	mov	r1, r6
 80184a0:	461a      	mov	r2, r3
 80184a2:	4620      	mov	r0, r4
 80184a4:	f000 fd30 	bl	8018f08 <__lshift>
 80184a8:	4606      	mov	r6, r0
 80184aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d072      	beq.n	8018596 <_dtoa_r+0x926>
 80184b0:	4631      	mov	r1, r6
 80184b2:	4650      	mov	r0, sl
 80184b4:	f000 fd94 	bl	8018fe0 <__mcmp>
 80184b8:	2800      	cmp	r0, #0
 80184ba:	da6c      	bge.n	8018596 <_dtoa_r+0x926>
 80184bc:	2300      	movs	r3, #0
 80184be:	4651      	mov	r1, sl
 80184c0:	220a      	movs	r2, #10
 80184c2:	4620      	mov	r0, r4
 80184c4:	f000 fb28 	bl	8018b18 <__multadd>
 80184c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80184ce:	4682      	mov	sl, r0
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	f000 81b0 	beq.w	8018836 <_dtoa_r+0xbc6>
 80184d6:	2300      	movs	r3, #0
 80184d8:	4639      	mov	r1, r7
 80184da:	220a      	movs	r2, #10
 80184dc:	4620      	mov	r0, r4
 80184de:	f000 fb1b 	bl	8018b18 <__multadd>
 80184e2:	9b01      	ldr	r3, [sp, #4]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	4607      	mov	r7, r0
 80184e8:	f300 8096 	bgt.w	8018618 <_dtoa_r+0x9a8>
 80184ec:	9b07      	ldr	r3, [sp, #28]
 80184ee:	2b02      	cmp	r3, #2
 80184f0:	dc59      	bgt.n	80185a6 <_dtoa_r+0x936>
 80184f2:	e091      	b.n	8018618 <_dtoa_r+0x9a8>
 80184f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80184f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80184fa:	e758      	b.n	80183ae <_dtoa_r+0x73e>
 80184fc:	9b04      	ldr	r3, [sp, #16]
 80184fe:	1e5e      	subs	r6, r3, #1
 8018500:	9b08      	ldr	r3, [sp, #32]
 8018502:	42b3      	cmp	r3, r6
 8018504:	bfbf      	itttt	lt
 8018506:	9b08      	ldrlt	r3, [sp, #32]
 8018508:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801850a:	9608      	strlt	r6, [sp, #32]
 801850c:	1af3      	sublt	r3, r6, r3
 801850e:	bfb4      	ite	lt
 8018510:	18d2      	addlt	r2, r2, r3
 8018512:	1b9e      	subge	r6, r3, r6
 8018514:	9b04      	ldr	r3, [sp, #16]
 8018516:	bfbc      	itt	lt
 8018518:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801851a:	2600      	movlt	r6, #0
 801851c:	2b00      	cmp	r3, #0
 801851e:	bfb7      	itett	lt
 8018520:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8018524:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8018528:	1a9d      	sublt	r5, r3, r2
 801852a:	2300      	movlt	r3, #0
 801852c:	e741      	b.n	80183b2 <_dtoa_r+0x742>
 801852e:	9e08      	ldr	r6, [sp, #32]
 8018530:	9d05      	ldr	r5, [sp, #20]
 8018532:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018534:	e748      	b.n	80183c8 <_dtoa_r+0x758>
 8018536:	9a08      	ldr	r2, [sp, #32]
 8018538:	e770      	b.n	801841c <_dtoa_r+0x7ac>
 801853a:	9b07      	ldr	r3, [sp, #28]
 801853c:	2b01      	cmp	r3, #1
 801853e:	dc19      	bgt.n	8018574 <_dtoa_r+0x904>
 8018540:	9b02      	ldr	r3, [sp, #8]
 8018542:	b9bb      	cbnz	r3, 8018574 <_dtoa_r+0x904>
 8018544:	9b03      	ldr	r3, [sp, #12]
 8018546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801854a:	b99b      	cbnz	r3, 8018574 <_dtoa_r+0x904>
 801854c:	9b03      	ldr	r3, [sp, #12]
 801854e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018552:	0d1b      	lsrs	r3, r3, #20
 8018554:	051b      	lsls	r3, r3, #20
 8018556:	b183      	cbz	r3, 801857a <_dtoa_r+0x90a>
 8018558:	9b05      	ldr	r3, [sp, #20]
 801855a:	3301      	adds	r3, #1
 801855c:	9305      	str	r3, [sp, #20]
 801855e:	9b06      	ldr	r3, [sp, #24]
 8018560:	3301      	adds	r3, #1
 8018562:	9306      	str	r3, [sp, #24]
 8018564:	f04f 0801 	mov.w	r8, #1
 8018568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801856a:	2b00      	cmp	r3, #0
 801856c:	f47f af6f 	bne.w	801844e <_dtoa_r+0x7de>
 8018570:	2001      	movs	r0, #1
 8018572:	e774      	b.n	801845e <_dtoa_r+0x7ee>
 8018574:	f04f 0800 	mov.w	r8, #0
 8018578:	e7f6      	b.n	8018568 <_dtoa_r+0x8f8>
 801857a:	4698      	mov	r8, r3
 801857c:	e7f4      	b.n	8018568 <_dtoa_r+0x8f8>
 801857e:	d082      	beq.n	8018486 <_dtoa_r+0x816>
 8018580:	9a05      	ldr	r2, [sp, #20]
 8018582:	331c      	adds	r3, #28
 8018584:	441a      	add	r2, r3
 8018586:	9205      	str	r2, [sp, #20]
 8018588:	9a06      	ldr	r2, [sp, #24]
 801858a:	441a      	add	r2, r3
 801858c:	441d      	add	r5, r3
 801858e:	9206      	str	r2, [sp, #24]
 8018590:	e779      	b.n	8018486 <_dtoa_r+0x816>
 8018592:	4603      	mov	r3, r0
 8018594:	e7f4      	b.n	8018580 <_dtoa_r+0x910>
 8018596:	9b04      	ldr	r3, [sp, #16]
 8018598:	2b00      	cmp	r3, #0
 801859a:	dc37      	bgt.n	801860c <_dtoa_r+0x99c>
 801859c:	9b07      	ldr	r3, [sp, #28]
 801859e:	2b02      	cmp	r3, #2
 80185a0:	dd34      	ble.n	801860c <_dtoa_r+0x99c>
 80185a2:	9b04      	ldr	r3, [sp, #16]
 80185a4:	9301      	str	r3, [sp, #4]
 80185a6:	9b01      	ldr	r3, [sp, #4]
 80185a8:	b963      	cbnz	r3, 80185c4 <_dtoa_r+0x954>
 80185aa:	4631      	mov	r1, r6
 80185ac:	2205      	movs	r2, #5
 80185ae:	4620      	mov	r0, r4
 80185b0:	f000 fab2 	bl	8018b18 <__multadd>
 80185b4:	4601      	mov	r1, r0
 80185b6:	4606      	mov	r6, r0
 80185b8:	4650      	mov	r0, sl
 80185ba:	f000 fd11 	bl	8018fe0 <__mcmp>
 80185be:	2800      	cmp	r0, #0
 80185c0:	f73f adbb 	bgt.w	801813a <_dtoa_r+0x4ca>
 80185c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80185c6:	9d00      	ldr	r5, [sp, #0]
 80185c8:	ea6f 0b03 	mvn.w	fp, r3
 80185cc:	f04f 0800 	mov.w	r8, #0
 80185d0:	4631      	mov	r1, r6
 80185d2:	4620      	mov	r0, r4
 80185d4:	f000 fa7e 	bl	8018ad4 <_Bfree>
 80185d8:	2f00      	cmp	r7, #0
 80185da:	f43f aeab 	beq.w	8018334 <_dtoa_r+0x6c4>
 80185de:	f1b8 0f00 	cmp.w	r8, #0
 80185e2:	d005      	beq.n	80185f0 <_dtoa_r+0x980>
 80185e4:	45b8      	cmp	r8, r7
 80185e6:	d003      	beq.n	80185f0 <_dtoa_r+0x980>
 80185e8:	4641      	mov	r1, r8
 80185ea:	4620      	mov	r0, r4
 80185ec:	f000 fa72 	bl	8018ad4 <_Bfree>
 80185f0:	4639      	mov	r1, r7
 80185f2:	4620      	mov	r0, r4
 80185f4:	f000 fa6e 	bl	8018ad4 <_Bfree>
 80185f8:	e69c      	b.n	8018334 <_dtoa_r+0x6c4>
 80185fa:	2600      	movs	r6, #0
 80185fc:	4637      	mov	r7, r6
 80185fe:	e7e1      	b.n	80185c4 <_dtoa_r+0x954>
 8018600:	46bb      	mov	fp, r7
 8018602:	4637      	mov	r7, r6
 8018604:	e599      	b.n	801813a <_dtoa_r+0x4ca>
 8018606:	bf00      	nop
 8018608:	40240000 	.word	0x40240000
 801860c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801860e:	2b00      	cmp	r3, #0
 8018610:	f000 80c8 	beq.w	80187a4 <_dtoa_r+0xb34>
 8018614:	9b04      	ldr	r3, [sp, #16]
 8018616:	9301      	str	r3, [sp, #4]
 8018618:	2d00      	cmp	r5, #0
 801861a:	dd05      	ble.n	8018628 <_dtoa_r+0x9b8>
 801861c:	4639      	mov	r1, r7
 801861e:	462a      	mov	r2, r5
 8018620:	4620      	mov	r0, r4
 8018622:	f000 fc71 	bl	8018f08 <__lshift>
 8018626:	4607      	mov	r7, r0
 8018628:	f1b8 0f00 	cmp.w	r8, #0
 801862c:	d05b      	beq.n	80186e6 <_dtoa_r+0xa76>
 801862e:	6879      	ldr	r1, [r7, #4]
 8018630:	4620      	mov	r0, r4
 8018632:	f000 fa0f 	bl	8018a54 <_Balloc>
 8018636:	4605      	mov	r5, r0
 8018638:	b928      	cbnz	r0, 8018646 <_dtoa_r+0x9d6>
 801863a:	4b83      	ldr	r3, [pc, #524]	; (8018848 <_dtoa_r+0xbd8>)
 801863c:	4602      	mov	r2, r0
 801863e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018642:	f7ff bb2e 	b.w	8017ca2 <_dtoa_r+0x32>
 8018646:	693a      	ldr	r2, [r7, #16]
 8018648:	3202      	adds	r2, #2
 801864a:	0092      	lsls	r2, r2, #2
 801864c:	f107 010c 	add.w	r1, r7, #12
 8018650:	300c      	adds	r0, #12
 8018652:	f7ff fa6e 	bl	8017b32 <memcpy>
 8018656:	2201      	movs	r2, #1
 8018658:	4629      	mov	r1, r5
 801865a:	4620      	mov	r0, r4
 801865c:	f000 fc54 	bl	8018f08 <__lshift>
 8018660:	9b00      	ldr	r3, [sp, #0]
 8018662:	3301      	adds	r3, #1
 8018664:	9304      	str	r3, [sp, #16]
 8018666:	e9dd 2300 	ldrd	r2, r3, [sp]
 801866a:	4413      	add	r3, r2
 801866c:	9308      	str	r3, [sp, #32]
 801866e:	9b02      	ldr	r3, [sp, #8]
 8018670:	f003 0301 	and.w	r3, r3, #1
 8018674:	46b8      	mov	r8, r7
 8018676:	9306      	str	r3, [sp, #24]
 8018678:	4607      	mov	r7, r0
 801867a:	9b04      	ldr	r3, [sp, #16]
 801867c:	4631      	mov	r1, r6
 801867e:	3b01      	subs	r3, #1
 8018680:	4650      	mov	r0, sl
 8018682:	9301      	str	r3, [sp, #4]
 8018684:	f7ff fa6a 	bl	8017b5c <quorem>
 8018688:	4641      	mov	r1, r8
 801868a:	9002      	str	r0, [sp, #8]
 801868c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018690:	4650      	mov	r0, sl
 8018692:	f000 fca5 	bl	8018fe0 <__mcmp>
 8018696:	463a      	mov	r2, r7
 8018698:	9005      	str	r0, [sp, #20]
 801869a:	4631      	mov	r1, r6
 801869c:	4620      	mov	r0, r4
 801869e:	f000 fcbb 	bl	8019018 <__mdiff>
 80186a2:	68c2      	ldr	r2, [r0, #12]
 80186a4:	4605      	mov	r5, r0
 80186a6:	bb02      	cbnz	r2, 80186ea <_dtoa_r+0xa7a>
 80186a8:	4601      	mov	r1, r0
 80186aa:	4650      	mov	r0, sl
 80186ac:	f000 fc98 	bl	8018fe0 <__mcmp>
 80186b0:	4602      	mov	r2, r0
 80186b2:	4629      	mov	r1, r5
 80186b4:	4620      	mov	r0, r4
 80186b6:	9209      	str	r2, [sp, #36]	; 0x24
 80186b8:	f000 fa0c 	bl	8018ad4 <_Bfree>
 80186bc:	9b07      	ldr	r3, [sp, #28]
 80186be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186c0:	9d04      	ldr	r5, [sp, #16]
 80186c2:	ea43 0102 	orr.w	r1, r3, r2
 80186c6:	9b06      	ldr	r3, [sp, #24]
 80186c8:	4319      	orrs	r1, r3
 80186ca:	d110      	bne.n	80186ee <_dtoa_r+0xa7e>
 80186cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80186d0:	d029      	beq.n	8018726 <_dtoa_r+0xab6>
 80186d2:	9b05      	ldr	r3, [sp, #20]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	dd02      	ble.n	80186de <_dtoa_r+0xa6e>
 80186d8:	9b02      	ldr	r3, [sp, #8]
 80186da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80186de:	9b01      	ldr	r3, [sp, #4]
 80186e0:	f883 9000 	strb.w	r9, [r3]
 80186e4:	e774      	b.n	80185d0 <_dtoa_r+0x960>
 80186e6:	4638      	mov	r0, r7
 80186e8:	e7ba      	b.n	8018660 <_dtoa_r+0x9f0>
 80186ea:	2201      	movs	r2, #1
 80186ec:	e7e1      	b.n	80186b2 <_dtoa_r+0xa42>
 80186ee:	9b05      	ldr	r3, [sp, #20]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	db04      	blt.n	80186fe <_dtoa_r+0xa8e>
 80186f4:	9907      	ldr	r1, [sp, #28]
 80186f6:	430b      	orrs	r3, r1
 80186f8:	9906      	ldr	r1, [sp, #24]
 80186fa:	430b      	orrs	r3, r1
 80186fc:	d120      	bne.n	8018740 <_dtoa_r+0xad0>
 80186fe:	2a00      	cmp	r2, #0
 8018700:	dded      	ble.n	80186de <_dtoa_r+0xa6e>
 8018702:	4651      	mov	r1, sl
 8018704:	2201      	movs	r2, #1
 8018706:	4620      	mov	r0, r4
 8018708:	f000 fbfe 	bl	8018f08 <__lshift>
 801870c:	4631      	mov	r1, r6
 801870e:	4682      	mov	sl, r0
 8018710:	f000 fc66 	bl	8018fe0 <__mcmp>
 8018714:	2800      	cmp	r0, #0
 8018716:	dc03      	bgt.n	8018720 <_dtoa_r+0xab0>
 8018718:	d1e1      	bne.n	80186de <_dtoa_r+0xa6e>
 801871a:	f019 0f01 	tst.w	r9, #1
 801871e:	d0de      	beq.n	80186de <_dtoa_r+0xa6e>
 8018720:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018724:	d1d8      	bne.n	80186d8 <_dtoa_r+0xa68>
 8018726:	9a01      	ldr	r2, [sp, #4]
 8018728:	2339      	movs	r3, #57	; 0x39
 801872a:	7013      	strb	r3, [r2, #0]
 801872c:	462b      	mov	r3, r5
 801872e:	461d      	mov	r5, r3
 8018730:	3b01      	subs	r3, #1
 8018732:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018736:	2a39      	cmp	r2, #57	; 0x39
 8018738:	d06c      	beq.n	8018814 <_dtoa_r+0xba4>
 801873a:	3201      	adds	r2, #1
 801873c:	701a      	strb	r2, [r3, #0]
 801873e:	e747      	b.n	80185d0 <_dtoa_r+0x960>
 8018740:	2a00      	cmp	r2, #0
 8018742:	dd07      	ble.n	8018754 <_dtoa_r+0xae4>
 8018744:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018748:	d0ed      	beq.n	8018726 <_dtoa_r+0xab6>
 801874a:	9a01      	ldr	r2, [sp, #4]
 801874c:	f109 0301 	add.w	r3, r9, #1
 8018750:	7013      	strb	r3, [r2, #0]
 8018752:	e73d      	b.n	80185d0 <_dtoa_r+0x960>
 8018754:	9b04      	ldr	r3, [sp, #16]
 8018756:	9a08      	ldr	r2, [sp, #32]
 8018758:	f803 9c01 	strb.w	r9, [r3, #-1]
 801875c:	4293      	cmp	r3, r2
 801875e:	d043      	beq.n	80187e8 <_dtoa_r+0xb78>
 8018760:	4651      	mov	r1, sl
 8018762:	2300      	movs	r3, #0
 8018764:	220a      	movs	r2, #10
 8018766:	4620      	mov	r0, r4
 8018768:	f000 f9d6 	bl	8018b18 <__multadd>
 801876c:	45b8      	cmp	r8, r7
 801876e:	4682      	mov	sl, r0
 8018770:	f04f 0300 	mov.w	r3, #0
 8018774:	f04f 020a 	mov.w	r2, #10
 8018778:	4641      	mov	r1, r8
 801877a:	4620      	mov	r0, r4
 801877c:	d107      	bne.n	801878e <_dtoa_r+0xb1e>
 801877e:	f000 f9cb 	bl	8018b18 <__multadd>
 8018782:	4680      	mov	r8, r0
 8018784:	4607      	mov	r7, r0
 8018786:	9b04      	ldr	r3, [sp, #16]
 8018788:	3301      	adds	r3, #1
 801878a:	9304      	str	r3, [sp, #16]
 801878c:	e775      	b.n	801867a <_dtoa_r+0xa0a>
 801878e:	f000 f9c3 	bl	8018b18 <__multadd>
 8018792:	4639      	mov	r1, r7
 8018794:	4680      	mov	r8, r0
 8018796:	2300      	movs	r3, #0
 8018798:	220a      	movs	r2, #10
 801879a:	4620      	mov	r0, r4
 801879c:	f000 f9bc 	bl	8018b18 <__multadd>
 80187a0:	4607      	mov	r7, r0
 80187a2:	e7f0      	b.n	8018786 <_dtoa_r+0xb16>
 80187a4:	9b04      	ldr	r3, [sp, #16]
 80187a6:	9301      	str	r3, [sp, #4]
 80187a8:	9d00      	ldr	r5, [sp, #0]
 80187aa:	4631      	mov	r1, r6
 80187ac:	4650      	mov	r0, sl
 80187ae:	f7ff f9d5 	bl	8017b5c <quorem>
 80187b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80187b6:	9b00      	ldr	r3, [sp, #0]
 80187b8:	f805 9b01 	strb.w	r9, [r5], #1
 80187bc:	1aea      	subs	r2, r5, r3
 80187be:	9b01      	ldr	r3, [sp, #4]
 80187c0:	4293      	cmp	r3, r2
 80187c2:	dd07      	ble.n	80187d4 <_dtoa_r+0xb64>
 80187c4:	4651      	mov	r1, sl
 80187c6:	2300      	movs	r3, #0
 80187c8:	220a      	movs	r2, #10
 80187ca:	4620      	mov	r0, r4
 80187cc:	f000 f9a4 	bl	8018b18 <__multadd>
 80187d0:	4682      	mov	sl, r0
 80187d2:	e7ea      	b.n	80187aa <_dtoa_r+0xb3a>
 80187d4:	9b01      	ldr	r3, [sp, #4]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	bfc8      	it	gt
 80187da:	461d      	movgt	r5, r3
 80187dc:	9b00      	ldr	r3, [sp, #0]
 80187de:	bfd8      	it	le
 80187e0:	2501      	movle	r5, #1
 80187e2:	441d      	add	r5, r3
 80187e4:	f04f 0800 	mov.w	r8, #0
 80187e8:	4651      	mov	r1, sl
 80187ea:	2201      	movs	r2, #1
 80187ec:	4620      	mov	r0, r4
 80187ee:	f000 fb8b 	bl	8018f08 <__lshift>
 80187f2:	4631      	mov	r1, r6
 80187f4:	4682      	mov	sl, r0
 80187f6:	f000 fbf3 	bl	8018fe0 <__mcmp>
 80187fa:	2800      	cmp	r0, #0
 80187fc:	dc96      	bgt.n	801872c <_dtoa_r+0xabc>
 80187fe:	d102      	bne.n	8018806 <_dtoa_r+0xb96>
 8018800:	f019 0f01 	tst.w	r9, #1
 8018804:	d192      	bne.n	801872c <_dtoa_r+0xabc>
 8018806:	462b      	mov	r3, r5
 8018808:	461d      	mov	r5, r3
 801880a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801880e:	2a30      	cmp	r2, #48	; 0x30
 8018810:	d0fa      	beq.n	8018808 <_dtoa_r+0xb98>
 8018812:	e6dd      	b.n	80185d0 <_dtoa_r+0x960>
 8018814:	9a00      	ldr	r2, [sp, #0]
 8018816:	429a      	cmp	r2, r3
 8018818:	d189      	bne.n	801872e <_dtoa_r+0xabe>
 801881a:	f10b 0b01 	add.w	fp, fp, #1
 801881e:	2331      	movs	r3, #49	; 0x31
 8018820:	e796      	b.n	8018750 <_dtoa_r+0xae0>
 8018822:	4b0a      	ldr	r3, [pc, #40]	; (801884c <_dtoa_r+0xbdc>)
 8018824:	f7ff ba99 	b.w	8017d5a <_dtoa_r+0xea>
 8018828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801882a:	2b00      	cmp	r3, #0
 801882c:	f47f aa6d 	bne.w	8017d0a <_dtoa_r+0x9a>
 8018830:	4b07      	ldr	r3, [pc, #28]	; (8018850 <_dtoa_r+0xbe0>)
 8018832:	f7ff ba92 	b.w	8017d5a <_dtoa_r+0xea>
 8018836:	9b01      	ldr	r3, [sp, #4]
 8018838:	2b00      	cmp	r3, #0
 801883a:	dcb5      	bgt.n	80187a8 <_dtoa_r+0xb38>
 801883c:	9b07      	ldr	r3, [sp, #28]
 801883e:	2b02      	cmp	r3, #2
 8018840:	f73f aeb1 	bgt.w	80185a6 <_dtoa_r+0x936>
 8018844:	e7b0      	b.n	80187a8 <_dtoa_r+0xb38>
 8018846:	bf00      	nop
 8018848:	0801e07d 	.word	0x0801e07d
 801884c:	0801dfd8 	.word	0x0801dfd8
 8018850:	0801e001 	.word	0x0801e001

08018854 <_free_r>:
 8018854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018856:	2900      	cmp	r1, #0
 8018858:	d044      	beq.n	80188e4 <_free_r+0x90>
 801885a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801885e:	9001      	str	r0, [sp, #4]
 8018860:	2b00      	cmp	r3, #0
 8018862:	f1a1 0404 	sub.w	r4, r1, #4
 8018866:	bfb8      	it	lt
 8018868:	18e4      	addlt	r4, r4, r3
 801886a:	f000 f8e7 	bl	8018a3c <__malloc_lock>
 801886e:	4a1e      	ldr	r2, [pc, #120]	; (80188e8 <_free_r+0x94>)
 8018870:	9801      	ldr	r0, [sp, #4]
 8018872:	6813      	ldr	r3, [r2, #0]
 8018874:	b933      	cbnz	r3, 8018884 <_free_r+0x30>
 8018876:	6063      	str	r3, [r4, #4]
 8018878:	6014      	str	r4, [r2, #0]
 801887a:	b003      	add	sp, #12
 801887c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018880:	f000 b8e2 	b.w	8018a48 <__malloc_unlock>
 8018884:	42a3      	cmp	r3, r4
 8018886:	d908      	bls.n	801889a <_free_r+0x46>
 8018888:	6825      	ldr	r5, [r4, #0]
 801888a:	1961      	adds	r1, r4, r5
 801888c:	428b      	cmp	r3, r1
 801888e:	bf01      	itttt	eq
 8018890:	6819      	ldreq	r1, [r3, #0]
 8018892:	685b      	ldreq	r3, [r3, #4]
 8018894:	1949      	addeq	r1, r1, r5
 8018896:	6021      	streq	r1, [r4, #0]
 8018898:	e7ed      	b.n	8018876 <_free_r+0x22>
 801889a:	461a      	mov	r2, r3
 801889c:	685b      	ldr	r3, [r3, #4]
 801889e:	b10b      	cbz	r3, 80188a4 <_free_r+0x50>
 80188a0:	42a3      	cmp	r3, r4
 80188a2:	d9fa      	bls.n	801889a <_free_r+0x46>
 80188a4:	6811      	ldr	r1, [r2, #0]
 80188a6:	1855      	adds	r5, r2, r1
 80188a8:	42a5      	cmp	r5, r4
 80188aa:	d10b      	bne.n	80188c4 <_free_r+0x70>
 80188ac:	6824      	ldr	r4, [r4, #0]
 80188ae:	4421      	add	r1, r4
 80188b0:	1854      	adds	r4, r2, r1
 80188b2:	42a3      	cmp	r3, r4
 80188b4:	6011      	str	r1, [r2, #0]
 80188b6:	d1e0      	bne.n	801887a <_free_r+0x26>
 80188b8:	681c      	ldr	r4, [r3, #0]
 80188ba:	685b      	ldr	r3, [r3, #4]
 80188bc:	6053      	str	r3, [r2, #4]
 80188be:	440c      	add	r4, r1
 80188c0:	6014      	str	r4, [r2, #0]
 80188c2:	e7da      	b.n	801887a <_free_r+0x26>
 80188c4:	d902      	bls.n	80188cc <_free_r+0x78>
 80188c6:	230c      	movs	r3, #12
 80188c8:	6003      	str	r3, [r0, #0]
 80188ca:	e7d6      	b.n	801887a <_free_r+0x26>
 80188cc:	6825      	ldr	r5, [r4, #0]
 80188ce:	1961      	adds	r1, r4, r5
 80188d0:	428b      	cmp	r3, r1
 80188d2:	bf04      	itt	eq
 80188d4:	6819      	ldreq	r1, [r3, #0]
 80188d6:	685b      	ldreq	r3, [r3, #4]
 80188d8:	6063      	str	r3, [r4, #4]
 80188da:	bf04      	itt	eq
 80188dc:	1949      	addeq	r1, r1, r5
 80188de:	6021      	streq	r1, [r4, #0]
 80188e0:	6054      	str	r4, [r2, #4]
 80188e2:	e7ca      	b.n	801887a <_free_r+0x26>
 80188e4:	b003      	add	sp, #12
 80188e6:	bd30      	pop	{r4, r5, pc}
 80188e8:	20003720 	.word	0x20003720

080188ec <malloc>:
 80188ec:	4b02      	ldr	r3, [pc, #8]	; (80188f8 <malloc+0xc>)
 80188ee:	4601      	mov	r1, r0
 80188f0:	6818      	ldr	r0, [r3, #0]
 80188f2:	f000 b823 	b.w	801893c <_malloc_r>
 80188f6:	bf00      	nop
 80188f8:	200003ec 	.word	0x200003ec

080188fc <sbrk_aligned>:
 80188fc:	b570      	push	{r4, r5, r6, lr}
 80188fe:	4e0e      	ldr	r6, [pc, #56]	; (8018938 <sbrk_aligned+0x3c>)
 8018900:	460c      	mov	r4, r1
 8018902:	6831      	ldr	r1, [r6, #0]
 8018904:	4605      	mov	r5, r0
 8018906:	b911      	cbnz	r1, 801890e <sbrk_aligned+0x12>
 8018908:	f001 fe1a 	bl	801a540 <_sbrk_r>
 801890c:	6030      	str	r0, [r6, #0]
 801890e:	4621      	mov	r1, r4
 8018910:	4628      	mov	r0, r5
 8018912:	f001 fe15 	bl	801a540 <_sbrk_r>
 8018916:	1c43      	adds	r3, r0, #1
 8018918:	d00a      	beq.n	8018930 <sbrk_aligned+0x34>
 801891a:	1cc4      	adds	r4, r0, #3
 801891c:	f024 0403 	bic.w	r4, r4, #3
 8018920:	42a0      	cmp	r0, r4
 8018922:	d007      	beq.n	8018934 <sbrk_aligned+0x38>
 8018924:	1a21      	subs	r1, r4, r0
 8018926:	4628      	mov	r0, r5
 8018928:	f001 fe0a 	bl	801a540 <_sbrk_r>
 801892c:	3001      	adds	r0, #1
 801892e:	d101      	bne.n	8018934 <sbrk_aligned+0x38>
 8018930:	f04f 34ff 	mov.w	r4, #4294967295
 8018934:	4620      	mov	r0, r4
 8018936:	bd70      	pop	{r4, r5, r6, pc}
 8018938:	20003724 	.word	0x20003724

0801893c <_malloc_r>:
 801893c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018940:	1ccd      	adds	r5, r1, #3
 8018942:	f025 0503 	bic.w	r5, r5, #3
 8018946:	3508      	adds	r5, #8
 8018948:	2d0c      	cmp	r5, #12
 801894a:	bf38      	it	cc
 801894c:	250c      	movcc	r5, #12
 801894e:	2d00      	cmp	r5, #0
 8018950:	4607      	mov	r7, r0
 8018952:	db01      	blt.n	8018958 <_malloc_r+0x1c>
 8018954:	42a9      	cmp	r1, r5
 8018956:	d905      	bls.n	8018964 <_malloc_r+0x28>
 8018958:	230c      	movs	r3, #12
 801895a:	603b      	str	r3, [r7, #0]
 801895c:	2600      	movs	r6, #0
 801895e:	4630      	mov	r0, r6
 8018960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018964:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018a38 <_malloc_r+0xfc>
 8018968:	f000 f868 	bl	8018a3c <__malloc_lock>
 801896c:	f8d8 3000 	ldr.w	r3, [r8]
 8018970:	461c      	mov	r4, r3
 8018972:	bb5c      	cbnz	r4, 80189cc <_malloc_r+0x90>
 8018974:	4629      	mov	r1, r5
 8018976:	4638      	mov	r0, r7
 8018978:	f7ff ffc0 	bl	80188fc <sbrk_aligned>
 801897c:	1c43      	adds	r3, r0, #1
 801897e:	4604      	mov	r4, r0
 8018980:	d155      	bne.n	8018a2e <_malloc_r+0xf2>
 8018982:	f8d8 4000 	ldr.w	r4, [r8]
 8018986:	4626      	mov	r6, r4
 8018988:	2e00      	cmp	r6, #0
 801898a:	d145      	bne.n	8018a18 <_malloc_r+0xdc>
 801898c:	2c00      	cmp	r4, #0
 801898e:	d048      	beq.n	8018a22 <_malloc_r+0xe6>
 8018990:	6823      	ldr	r3, [r4, #0]
 8018992:	4631      	mov	r1, r6
 8018994:	4638      	mov	r0, r7
 8018996:	eb04 0903 	add.w	r9, r4, r3
 801899a:	f001 fdd1 	bl	801a540 <_sbrk_r>
 801899e:	4581      	cmp	r9, r0
 80189a0:	d13f      	bne.n	8018a22 <_malloc_r+0xe6>
 80189a2:	6821      	ldr	r1, [r4, #0]
 80189a4:	1a6d      	subs	r5, r5, r1
 80189a6:	4629      	mov	r1, r5
 80189a8:	4638      	mov	r0, r7
 80189aa:	f7ff ffa7 	bl	80188fc <sbrk_aligned>
 80189ae:	3001      	adds	r0, #1
 80189b0:	d037      	beq.n	8018a22 <_malloc_r+0xe6>
 80189b2:	6823      	ldr	r3, [r4, #0]
 80189b4:	442b      	add	r3, r5
 80189b6:	6023      	str	r3, [r4, #0]
 80189b8:	f8d8 3000 	ldr.w	r3, [r8]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d038      	beq.n	8018a32 <_malloc_r+0xf6>
 80189c0:	685a      	ldr	r2, [r3, #4]
 80189c2:	42a2      	cmp	r2, r4
 80189c4:	d12b      	bne.n	8018a1e <_malloc_r+0xe2>
 80189c6:	2200      	movs	r2, #0
 80189c8:	605a      	str	r2, [r3, #4]
 80189ca:	e00f      	b.n	80189ec <_malloc_r+0xb0>
 80189cc:	6822      	ldr	r2, [r4, #0]
 80189ce:	1b52      	subs	r2, r2, r5
 80189d0:	d41f      	bmi.n	8018a12 <_malloc_r+0xd6>
 80189d2:	2a0b      	cmp	r2, #11
 80189d4:	d917      	bls.n	8018a06 <_malloc_r+0xca>
 80189d6:	1961      	adds	r1, r4, r5
 80189d8:	42a3      	cmp	r3, r4
 80189da:	6025      	str	r5, [r4, #0]
 80189dc:	bf18      	it	ne
 80189de:	6059      	strne	r1, [r3, #4]
 80189e0:	6863      	ldr	r3, [r4, #4]
 80189e2:	bf08      	it	eq
 80189e4:	f8c8 1000 	streq.w	r1, [r8]
 80189e8:	5162      	str	r2, [r4, r5]
 80189ea:	604b      	str	r3, [r1, #4]
 80189ec:	4638      	mov	r0, r7
 80189ee:	f104 060b 	add.w	r6, r4, #11
 80189f2:	f000 f829 	bl	8018a48 <__malloc_unlock>
 80189f6:	f026 0607 	bic.w	r6, r6, #7
 80189fa:	1d23      	adds	r3, r4, #4
 80189fc:	1af2      	subs	r2, r6, r3
 80189fe:	d0ae      	beq.n	801895e <_malloc_r+0x22>
 8018a00:	1b9b      	subs	r3, r3, r6
 8018a02:	50a3      	str	r3, [r4, r2]
 8018a04:	e7ab      	b.n	801895e <_malloc_r+0x22>
 8018a06:	42a3      	cmp	r3, r4
 8018a08:	6862      	ldr	r2, [r4, #4]
 8018a0a:	d1dd      	bne.n	80189c8 <_malloc_r+0x8c>
 8018a0c:	f8c8 2000 	str.w	r2, [r8]
 8018a10:	e7ec      	b.n	80189ec <_malloc_r+0xb0>
 8018a12:	4623      	mov	r3, r4
 8018a14:	6864      	ldr	r4, [r4, #4]
 8018a16:	e7ac      	b.n	8018972 <_malloc_r+0x36>
 8018a18:	4634      	mov	r4, r6
 8018a1a:	6876      	ldr	r6, [r6, #4]
 8018a1c:	e7b4      	b.n	8018988 <_malloc_r+0x4c>
 8018a1e:	4613      	mov	r3, r2
 8018a20:	e7cc      	b.n	80189bc <_malloc_r+0x80>
 8018a22:	230c      	movs	r3, #12
 8018a24:	603b      	str	r3, [r7, #0]
 8018a26:	4638      	mov	r0, r7
 8018a28:	f000 f80e 	bl	8018a48 <__malloc_unlock>
 8018a2c:	e797      	b.n	801895e <_malloc_r+0x22>
 8018a2e:	6025      	str	r5, [r4, #0]
 8018a30:	e7dc      	b.n	80189ec <_malloc_r+0xb0>
 8018a32:	605b      	str	r3, [r3, #4]
 8018a34:	deff      	udf	#255	; 0xff
 8018a36:	bf00      	nop
 8018a38:	20003720 	.word	0x20003720

08018a3c <__malloc_lock>:
 8018a3c:	4801      	ldr	r0, [pc, #4]	; (8018a44 <__malloc_lock+0x8>)
 8018a3e:	f7ff b876 	b.w	8017b2e <__retarget_lock_acquire_recursive>
 8018a42:	bf00      	nop
 8018a44:	2000371c 	.word	0x2000371c

08018a48 <__malloc_unlock>:
 8018a48:	4801      	ldr	r0, [pc, #4]	; (8018a50 <__malloc_unlock+0x8>)
 8018a4a:	f7ff b871 	b.w	8017b30 <__retarget_lock_release_recursive>
 8018a4e:	bf00      	nop
 8018a50:	2000371c 	.word	0x2000371c

08018a54 <_Balloc>:
 8018a54:	b570      	push	{r4, r5, r6, lr}
 8018a56:	69c6      	ldr	r6, [r0, #28]
 8018a58:	4604      	mov	r4, r0
 8018a5a:	460d      	mov	r5, r1
 8018a5c:	b976      	cbnz	r6, 8018a7c <_Balloc+0x28>
 8018a5e:	2010      	movs	r0, #16
 8018a60:	f7ff ff44 	bl	80188ec <malloc>
 8018a64:	4602      	mov	r2, r0
 8018a66:	61e0      	str	r0, [r4, #28]
 8018a68:	b920      	cbnz	r0, 8018a74 <_Balloc+0x20>
 8018a6a:	4b18      	ldr	r3, [pc, #96]	; (8018acc <_Balloc+0x78>)
 8018a6c:	4818      	ldr	r0, [pc, #96]	; (8018ad0 <_Balloc+0x7c>)
 8018a6e:	216b      	movs	r1, #107	; 0x6b
 8018a70:	f001 fd7e 	bl	801a570 <__assert_func>
 8018a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018a78:	6006      	str	r6, [r0, #0]
 8018a7a:	60c6      	str	r6, [r0, #12]
 8018a7c:	69e6      	ldr	r6, [r4, #28]
 8018a7e:	68f3      	ldr	r3, [r6, #12]
 8018a80:	b183      	cbz	r3, 8018aa4 <_Balloc+0x50>
 8018a82:	69e3      	ldr	r3, [r4, #28]
 8018a84:	68db      	ldr	r3, [r3, #12]
 8018a86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018a8a:	b9b8      	cbnz	r0, 8018abc <_Balloc+0x68>
 8018a8c:	2101      	movs	r1, #1
 8018a8e:	fa01 f605 	lsl.w	r6, r1, r5
 8018a92:	1d72      	adds	r2, r6, #5
 8018a94:	0092      	lsls	r2, r2, #2
 8018a96:	4620      	mov	r0, r4
 8018a98:	f001 fd88 	bl	801a5ac <_calloc_r>
 8018a9c:	b160      	cbz	r0, 8018ab8 <_Balloc+0x64>
 8018a9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018aa2:	e00e      	b.n	8018ac2 <_Balloc+0x6e>
 8018aa4:	2221      	movs	r2, #33	; 0x21
 8018aa6:	2104      	movs	r1, #4
 8018aa8:	4620      	mov	r0, r4
 8018aaa:	f001 fd7f 	bl	801a5ac <_calloc_r>
 8018aae:	69e3      	ldr	r3, [r4, #28]
 8018ab0:	60f0      	str	r0, [r6, #12]
 8018ab2:	68db      	ldr	r3, [r3, #12]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d1e4      	bne.n	8018a82 <_Balloc+0x2e>
 8018ab8:	2000      	movs	r0, #0
 8018aba:	bd70      	pop	{r4, r5, r6, pc}
 8018abc:	6802      	ldr	r2, [r0, #0]
 8018abe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ac8:	e7f7      	b.n	8018aba <_Balloc+0x66>
 8018aca:	bf00      	nop
 8018acc:	0801e00e 	.word	0x0801e00e
 8018ad0:	0801e08e 	.word	0x0801e08e

08018ad4 <_Bfree>:
 8018ad4:	b570      	push	{r4, r5, r6, lr}
 8018ad6:	69c6      	ldr	r6, [r0, #28]
 8018ad8:	4605      	mov	r5, r0
 8018ada:	460c      	mov	r4, r1
 8018adc:	b976      	cbnz	r6, 8018afc <_Bfree+0x28>
 8018ade:	2010      	movs	r0, #16
 8018ae0:	f7ff ff04 	bl	80188ec <malloc>
 8018ae4:	4602      	mov	r2, r0
 8018ae6:	61e8      	str	r0, [r5, #28]
 8018ae8:	b920      	cbnz	r0, 8018af4 <_Bfree+0x20>
 8018aea:	4b09      	ldr	r3, [pc, #36]	; (8018b10 <_Bfree+0x3c>)
 8018aec:	4809      	ldr	r0, [pc, #36]	; (8018b14 <_Bfree+0x40>)
 8018aee:	218f      	movs	r1, #143	; 0x8f
 8018af0:	f001 fd3e 	bl	801a570 <__assert_func>
 8018af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018af8:	6006      	str	r6, [r0, #0]
 8018afa:	60c6      	str	r6, [r0, #12]
 8018afc:	b13c      	cbz	r4, 8018b0e <_Bfree+0x3a>
 8018afe:	69eb      	ldr	r3, [r5, #28]
 8018b00:	6862      	ldr	r2, [r4, #4]
 8018b02:	68db      	ldr	r3, [r3, #12]
 8018b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018b08:	6021      	str	r1, [r4, #0]
 8018b0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018b0e:	bd70      	pop	{r4, r5, r6, pc}
 8018b10:	0801e00e 	.word	0x0801e00e
 8018b14:	0801e08e 	.word	0x0801e08e

08018b18 <__multadd>:
 8018b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b1c:	690d      	ldr	r5, [r1, #16]
 8018b1e:	4607      	mov	r7, r0
 8018b20:	460c      	mov	r4, r1
 8018b22:	461e      	mov	r6, r3
 8018b24:	f101 0c14 	add.w	ip, r1, #20
 8018b28:	2000      	movs	r0, #0
 8018b2a:	f8dc 3000 	ldr.w	r3, [ip]
 8018b2e:	b299      	uxth	r1, r3
 8018b30:	fb02 6101 	mla	r1, r2, r1, r6
 8018b34:	0c1e      	lsrs	r6, r3, #16
 8018b36:	0c0b      	lsrs	r3, r1, #16
 8018b38:	fb02 3306 	mla	r3, r2, r6, r3
 8018b3c:	b289      	uxth	r1, r1
 8018b3e:	3001      	adds	r0, #1
 8018b40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018b44:	4285      	cmp	r5, r0
 8018b46:	f84c 1b04 	str.w	r1, [ip], #4
 8018b4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018b4e:	dcec      	bgt.n	8018b2a <__multadd+0x12>
 8018b50:	b30e      	cbz	r6, 8018b96 <__multadd+0x7e>
 8018b52:	68a3      	ldr	r3, [r4, #8]
 8018b54:	42ab      	cmp	r3, r5
 8018b56:	dc19      	bgt.n	8018b8c <__multadd+0x74>
 8018b58:	6861      	ldr	r1, [r4, #4]
 8018b5a:	4638      	mov	r0, r7
 8018b5c:	3101      	adds	r1, #1
 8018b5e:	f7ff ff79 	bl	8018a54 <_Balloc>
 8018b62:	4680      	mov	r8, r0
 8018b64:	b928      	cbnz	r0, 8018b72 <__multadd+0x5a>
 8018b66:	4602      	mov	r2, r0
 8018b68:	4b0c      	ldr	r3, [pc, #48]	; (8018b9c <__multadd+0x84>)
 8018b6a:	480d      	ldr	r0, [pc, #52]	; (8018ba0 <__multadd+0x88>)
 8018b6c:	21ba      	movs	r1, #186	; 0xba
 8018b6e:	f001 fcff 	bl	801a570 <__assert_func>
 8018b72:	6922      	ldr	r2, [r4, #16]
 8018b74:	3202      	adds	r2, #2
 8018b76:	f104 010c 	add.w	r1, r4, #12
 8018b7a:	0092      	lsls	r2, r2, #2
 8018b7c:	300c      	adds	r0, #12
 8018b7e:	f7fe ffd8 	bl	8017b32 <memcpy>
 8018b82:	4621      	mov	r1, r4
 8018b84:	4638      	mov	r0, r7
 8018b86:	f7ff ffa5 	bl	8018ad4 <_Bfree>
 8018b8a:	4644      	mov	r4, r8
 8018b8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018b90:	3501      	adds	r5, #1
 8018b92:	615e      	str	r6, [r3, #20]
 8018b94:	6125      	str	r5, [r4, #16]
 8018b96:	4620      	mov	r0, r4
 8018b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b9c:	0801e07d 	.word	0x0801e07d
 8018ba0:	0801e08e 	.word	0x0801e08e

08018ba4 <__s2b>:
 8018ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ba8:	460c      	mov	r4, r1
 8018baa:	4615      	mov	r5, r2
 8018bac:	461f      	mov	r7, r3
 8018bae:	2209      	movs	r2, #9
 8018bb0:	3308      	adds	r3, #8
 8018bb2:	4606      	mov	r6, r0
 8018bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8018bb8:	2100      	movs	r1, #0
 8018bba:	2201      	movs	r2, #1
 8018bbc:	429a      	cmp	r2, r3
 8018bbe:	db09      	blt.n	8018bd4 <__s2b+0x30>
 8018bc0:	4630      	mov	r0, r6
 8018bc2:	f7ff ff47 	bl	8018a54 <_Balloc>
 8018bc6:	b940      	cbnz	r0, 8018bda <__s2b+0x36>
 8018bc8:	4602      	mov	r2, r0
 8018bca:	4b19      	ldr	r3, [pc, #100]	; (8018c30 <__s2b+0x8c>)
 8018bcc:	4819      	ldr	r0, [pc, #100]	; (8018c34 <__s2b+0x90>)
 8018bce:	21d3      	movs	r1, #211	; 0xd3
 8018bd0:	f001 fcce 	bl	801a570 <__assert_func>
 8018bd4:	0052      	lsls	r2, r2, #1
 8018bd6:	3101      	adds	r1, #1
 8018bd8:	e7f0      	b.n	8018bbc <__s2b+0x18>
 8018bda:	9b08      	ldr	r3, [sp, #32]
 8018bdc:	6143      	str	r3, [r0, #20]
 8018bde:	2d09      	cmp	r5, #9
 8018be0:	f04f 0301 	mov.w	r3, #1
 8018be4:	6103      	str	r3, [r0, #16]
 8018be6:	dd16      	ble.n	8018c16 <__s2b+0x72>
 8018be8:	f104 0909 	add.w	r9, r4, #9
 8018bec:	46c8      	mov	r8, r9
 8018bee:	442c      	add	r4, r5
 8018bf0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018bf4:	4601      	mov	r1, r0
 8018bf6:	3b30      	subs	r3, #48	; 0x30
 8018bf8:	220a      	movs	r2, #10
 8018bfa:	4630      	mov	r0, r6
 8018bfc:	f7ff ff8c 	bl	8018b18 <__multadd>
 8018c00:	45a0      	cmp	r8, r4
 8018c02:	d1f5      	bne.n	8018bf0 <__s2b+0x4c>
 8018c04:	f1a5 0408 	sub.w	r4, r5, #8
 8018c08:	444c      	add	r4, r9
 8018c0a:	1b2d      	subs	r5, r5, r4
 8018c0c:	1963      	adds	r3, r4, r5
 8018c0e:	42bb      	cmp	r3, r7
 8018c10:	db04      	blt.n	8018c1c <__s2b+0x78>
 8018c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c16:	340a      	adds	r4, #10
 8018c18:	2509      	movs	r5, #9
 8018c1a:	e7f6      	b.n	8018c0a <__s2b+0x66>
 8018c1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018c20:	4601      	mov	r1, r0
 8018c22:	3b30      	subs	r3, #48	; 0x30
 8018c24:	220a      	movs	r2, #10
 8018c26:	4630      	mov	r0, r6
 8018c28:	f7ff ff76 	bl	8018b18 <__multadd>
 8018c2c:	e7ee      	b.n	8018c0c <__s2b+0x68>
 8018c2e:	bf00      	nop
 8018c30:	0801e07d 	.word	0x0801e07d
 8018c34:	0801e08e 	.word	0x0801e08e

08018c38 <__hi0bits>:
 8018c38:	0c03      	lsrs	r3, r0, #16
 8018c3a:	041b      	lsls	r3, r3, #16
 8018c3c:	b9d3      	cbnz	r3, 8018c74 <__hi0bits+0x3c>
 8018c3e:	0400      	lsls	r0, r0, #16
 8018c40:	2310      	movs	r3, #16
 8018c42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018c46:	bf04      	itt	eq
 8018c48:	0200      	lsleq	r0, r0, #8
 8018c4a:	3308      	addeq	r3, #8
 8018c4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018c50:	bf04      	itt	eq
 8018c52:	0100      	lsleq	r0, r0, #4
 8018c54:	3304      	addeq	r3, #4
 8018c56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018c5a:	bf04      	itt	eq
 8018c5c:	0080      	lsleq	r0, r0, #2
 8018c5e:	3302      	addeq	r3, #2
 8018c60:	2800      	cmp	r0, #0
 8018c62:	db05      	blt.n	8018c70 <__hi0bits+0x38>
 8018c64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018c68:	f103 0301 	add.w	r3, r3, #1
 8018c6c:	bf08      	it	eq
 8018c6e:	2320      	moveq	r3, #32
 8018c70:	4618      	mov	r0, r3
 8018c72:	4770      	bx	lr
 8018c74:	2300      	movs	r3, #0
 8018c76:	e7e4      	b.n	8018c42 <__hi0bits+0xa>

08018c78 <__lo0bits>:
 8018c78:	6803      	ldr	r3, [r0, #0]
 8018c7a:	f013 0207 	ands.w	r2, r3, #7
 8018c7e:	d00c      	beq.n	8018c9a <__lo0bits+0x22>
 8018c80:	07d9      	lsls	r1, r3, #31
 8018c82:	d422      	bmi.n	8018cca <__lo0bits+0x52>
 8018c84:	079a      	lsls	r2, r3, #30
 8018c86:	bf49      	itett	mi
 8018c88:	085b      	lsrmi	r3, r3, #1
 8018c8a:	089b      	lsrpl	r3, r3, #2
 8018c8c:	6003      	strmi	r3, [r0, #0]
 8018c8e:	2201      	movmi	r2, #1
 8018c90:	bf5c      	itt	pl
 8018c92:	6003      	strpl	r3, [r0, #0]
 8018c94:	2202      	movpl	r2, #2
 8018c96:	4610      	mov	r0, r2
 8018c98:	4770      	bx	lr
 8018c9a:	b299      	uxth	r1, r3
 8018c9c:	b909      	cbnz	r1, 8018ca2 <__lo0bits+0x2a>
 8018c9e:	0c1b      	lsrs	r3, r3, #16
 8018ca0:	2210      	movs	r2, #16
 8018ca2:	b2d9      	uxtb	r1, r3
 8018ca4:	b909      	cbnz	r1, 8018caa <__lo0bits+0x32>
 8018ca6:	3208      	adds	r2, #8
 8018ca8:	0a1b      	lsrs	r3, r3, #8
 8018caa:	0719      	lsls	r1, r3, #28
 8018cac:	bf04      	itt	eq
 8018cae:	091b      	lsreq	r3, r3, #4
 8018cb0:	3204      	addeq	r2, #4
 8018cb2:	0799      	lsls	r1, r3, #30
 8018cb4:	bf04      	itt	eq
 8018cb6:	089b      	lsreq	r3, r3, #2
 8018cb8:	3202      	addeq	r2, #2
 8018cba:	07d9      	lsls	r1, r3, #31
 8018cbc:	d403      	bmi.n	8018cc6 <__lo0bits+0x4e>
 8018cbe:	085b      	lsrs	r3, r3, #1
 8018cc0:	f102 0201 	add.w	r2, r2, #1
 8018cc4:	d003      	beq.n	8018cce <__lo0bits+0x56>
 8018cc6:	6003      	str	r3, [r0, #0]
 8018cc8:	e7e5      	b.n	8018c96 <__lo0bits+0x1e>
 8018cca:	2200      	movs	r2, #0
 8018ccc:	e7e3      	b.n	8018c96 <__lo0bits+0x1e>
 8018cce:	2220      	movs	r2, #32
 8018cd0:	e7e1      	b.n	8018c96 <__lo0bits+0x1e>
	...

08018cd4 <__i2b>:
 8018cd4:	b510      	push	{r4, lr}
 8018cd6:	460c      	mov	r4, r1
 8018cd8:	2101      	movs	r1, #1
 8018cda:	f7ff febb 	bl	8018a54 <_Balloc>
 8018cde:	4602      	mov	r2, r0
 8018ce0:	b928      	cbnz	r0, 8018cee <__i2b+0x1a>
 8018ce2:	4b05      	ldr	r3, [pc, #20]	; (8018cf8 <__i2b+0x24>)
 8018ce4:	4805      	ldr	r0, [pc, #20]	; (8018cfc <__i2b+0x28>)
 8018ce6:	f240 1145 	movw	r1, #325	; 0x145
 8018cea:	f001 fc41 	bl	801a570 <__assert_func>
 8018cee:	2301      	movs	r3, #1
 8018cf0:	6144      	str	r4, [r0, #20]
 8018cf2:	6103      	str	r3, [r0, #16]
 8018cf4:	bd10      	pop	{r4, pc}
 8018cf6:	bf00      	nop
 8018cf8:	0801e07d 	.word	0x0801e07d
 8018cfc:	0801e08e 	.word	0x0801e08e

08018d00 <__multiply>:
 8018d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d04:	4691      	mov	r9, r2
 8018d06:	690a      	ldr	r2, [r1, #16]
 8018d08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018d0c:	429a      	cmp	r2, r3
 8018d0e:	bfb8      	it	lt
 8018d10:	460b      	movlt	r3, r1
 8018d12:	460c      	mov	r4, r1
 8018d14:	bfbc      	itt	lt
 8018d16:	464c      	movlt	r4, r9
 8018d18:	4699      	movlt	r9, r3
 8018d1a:	6927      	ldr	r7, [r4, #16]
 8018d1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018d20:	68a3      	ldr	r3, [r4, #8]
 8018d22:	6861      	ldr	r1, [r4, #4]
 8018d24:	eb07 060a 	add.w	r6, r7, sl
 8018d28:	42b3      	cmp	r3, r6
 8018d2a:	b085      	sub	sp, #20
 8018d2c:	bfb8      	it	lt
 8018d2e:	3101      	addlt	r1, #1
 8018d30:	f7ff fe90 	bl	8018a54 <_Balloc>
 8018d34:	b930      	cbnz	r0, 8018d44 <__multiply+0x44>
 8018d36:	4602      	mov	r2, r0
 8018d38:	4b44      	ldr	r3, [pc, #272]	; (8018e4c <__multiply+0x14c>)
 8018d3a:	4845      	ldr	r0, [pc, #276]	; (8018e50 <__multiply+0x150>)
 8018d3c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018d40:	f001 fc16 	bl	801a570 <__assert_func>
 8018d44:	f100 0514 	add.w	r5, r0, #20
 8018d48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018d4c:	462b      	mov	r3, r5
 8018d4e:	2200      	movs	r2, #0
 8018d50:	4543      	cmp	r3, r8
 8018d52:	d321      	bcc.n	8018d98 <__multiply+0x98>
 8018d54:	f104 0314 	add.w	r3, r4, #20
 8018d58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018d5c:	f109 0314 	add.w	r3, r9, #20
 8018d60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018d64:	9202      	str	r2, [sp, #8]
 8018d66:	1b3a      	subs	r2, r7, r4
 8018d68:	3a15      	subs	r2, #21
 8018d6a:	f022 0203 	bic.w	r2, r2, #3
 8018d6e:	3204      	adds	r2, #4
 8018d70:	f104 0115 	add.w	r1, r4, #21
 8018d74:	428f      	cmp	r7, r1
 8018d76:	bf38      	it	cc
 8018d78:	2204      	movcc	r2, #4
 8018d7a:	9201      	str	r2, [sp, #4]
 8018d7c:	9a02      	ldr	r2, [sp, #8]
 8018d7e:	9303      	str	r3, [sp, #12]
 8018d80:	429a      	cmp	r2, r3
 8018d82:	d80c      	bhi.n	8018d9e <__multiply+0x9e>
 8018d84:	2e00      	cmp	r6, #0
 8018d86:	dd03      	ble.n	8018d90 <__multiply+0x90>
 8018d88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d05b      	beq.n	8018e48 <__multiply+0x148>
 8018d90:	6106      	str	r6, [r0, #16]
 8018d92:	b005      	add	sp, #20
 8018d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d98:	f843 2b04 	str.w	r2, [r3], #4
 8018d9c:	e7d8      	b.n	8018d50 <__multiply+0x50>
 8018d9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8018da2:	f1ba 0f00 	cmp.w	sl, #0
 8018da6:	d024      	beq.n	8018df2 <__multiply+0xf2>
 8018da8:	f104 0e14 	add.w	lr, r4, #20
 8018dac:	46a9      	mov	r9, r5
 8018dae:	f04f 0c00 	mov.w	ip, #0
 8018db2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018db6:	f8d9 1000 	ldr.w	r1, [r9]
 8018dba:	fa1f fb82 	uxth.w	fp, r2
 8018dbe:	b289      	uxth	r1, r1
 8018dc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8018dc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018dc8:	f8d9 2000 	ldr.w	r2, [r9]
 8018dcc:	4461      	add	r1, ip
 8018dce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018dd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8018dd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018dda:	b289      	uxth	r1, r1
 8018ddc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018de0:	4577      	cmp	r7, lr
 8018de2:	f849 1b04 	str.w	r1, [r9], #4
 8018de6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018dea:	d8e2      	bhi.n	8018db2 <__multiply+0xb2>
 8018dec:	9a01      	ldr	r2, [sp, #4]
 8018dee:	f845 c002 	str.w	ip, [r5, r2]
 8018df2:	9a03      	ldr	r2, [sp, #12]
 8018df4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018df8:	3304      	adds	r3, #4
 8018dfa:	f1b9 0f00 	cmp.w	r9, #0
 8018dfe:	d021      	beq.n	8018e44 <__multiply+0x144>
 8018e00:	6829      	ldr	r1, [r5, #0]
 8018e02:	f104 0c14 	add.w	ip, r4, #20
 8018e06:	46ae      	mov	lr, r5
 8018e08:	f04f 0a00 	mov.w	sl, #0
 8018e0c:	f8bc b000 	ldrh.w	fp, [ip]
 8018e10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018e14:	fb09 220b 	mla	r2, r9, fp, r2
 8018e18:	4452      	add	r2, sl
 8018e1a:	b289      	uxth	r1, r1
 8018e1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018e20:	f84e 1b04 	str.w	r1, [lr], #4
 8018e24:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018e28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018e2c:	f8be 1000 	ldrh.w	r1, [lr]
 8018e30:	fb09 110a 	mla	r1, r9, sl, r1
 8018e34:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018e38:	4567      	cmp	r7, ip
 8018e3a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018e3e:	d8e5      	bhi.n	8018e0c <__multiply+0x10c>
 8018e40:	9a01      	ldr	r2, [sp, #4]
 8018e42:	50a9      	str	r1, [r5, r2]
 8018e44:	3504      	adds	r5, #4
 8018e46:	e799      	b.n	8018d7c <__multiply+0x7c>
 8018e48:	3e01      	subs	r6, #1
 8018e4a:	e79b      	b.n	8018d84 <__multiply+0x84>
 8018e4c:	0801e07d 	.word	0x0801e07d
 8018e50:	0801e08e 	.word	0x0801e08e

08018e54 <__pow5mult>:
 8018e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e58:	4615      	mov	r5, r2
 8018e5a:	f012 0203 	ands.w	r2, r2, #3
 8018e5e:	4606      	mov	r6, r0
 8018e60:	460f      	mov	r7, r1
 8018e62:	d007      	beq.n	8018e74 <__pow5mult+0x20>
 8018e64:	4c25      	ldr	r4, [pc, #148]	; (8018efc <__pow5mult+0xa8>)
 8018e66:	3a01      	subs	r2, #1
 8018e68:	2300      	movs	r3, #0
 8018e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018e6e:	f7ff fe53 	bl	8018b18 <__multadd>
 8018e72:	4607      	mov	r7, r0
 8018e74:	10ad      	asrs	r5, r5, #2
 8018e76:	d03d      	beq.n	8018ef4 <__pow5mult+0xa0>
 8018e78:	69f4      	ldr	r4, [r6, #28]
 8018e7a:	b97c      	cbnz	r4, 8018e9c <__pow5mult+0x48>
 8018e7c:	2010      	movs	r0, #16
 8018e7e:	f7ff fd35 	bl	80188ec <malloc>
 8018e82:	4602      	mov	r2, r0
 8018e84:	61f0      	str	r0, [r6, #28]
 8018e86:	b928      	cbnz	r0, 8018e94 <__pow5mult+0x40>
 8018e88:	4b1d      	ldr	r3, [pc, #116]	; (8018f00 <__pow5mult+0xac>)
 8018e8a:	481e      	ldr	r0, [pc, #120]	; (8018f04 <__pow5mult+0xb0>)
 8018e8c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018e90:	f001 fb6e 	bl	801a570 <__assert_func>
 8018e94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018e98:	6004      	str	r4, [r0, #0]
 8018e9a:	60c4      	str	r4, [r0, #12]
 8018e9c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018ea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018ea4:	b94c      	cbnz	r4, 8018eba <__pow5mult+0x66>
 8018ea6:	f240 2171 	movw	r1, #625	; 0x271
 8018eaa:	4630      	mov	r0, r6
 8018eac:	f7ff ff12 	bl	8018cd4 <__i2b>
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8018eb6:	4604      	mov	r4, r0
 8018eb8:	6003      	str	r3, [r0, #0]
 8018eba:	f04f 0900 	mov.w	r9, #0
 8018ebe:	07eb      	lsls	r3, r5, #31
 8018ec0:	d50a      	bpl.n	8018ed8 <__pow5mult+0x84>
 8018ec2:	4639      	mov	r1, r7
 8018ec4:	4622      	mov	r2, r4
 8018ec6:	4630      	mov	r0, r6
 8018ec8:	f7ff ff1a 	bl	8018d00 <__multiply>
 8018ecc:	4639      	mov	r1, r7
 8018ece:	4680      	mov	r8, r0
 8018ed0:	4630      	mov	r0, r6
 8018ed2:	f7ff fdff 	bl	8018ad4 <_Bfree>
 8018ed6:	4647      	mov	r7, r8
 8018ed8:	106d      	asrs	r5, r5, #1
 8018eda:	d00b      	beq.n	8018ef4 <__pow5mult+0xa0>
 8018edc:	6820      	ldr	r0, [r4, #0]
 8018ede:	b938      	cbnz	r0, 8018ef0 <__pow5mult+0x9c>
 8018ee0:	4622      	mov	r2, r4
 8018ee2:	4621      	mov	r1, r4
 8018ee4:	4630      	mov	r0, r6
 8018ee6:	f7ff ff0b 	bl	8018d00 <__multiply>
 8018eea:	6020      	str	r0, [r4, #0]
 8018eec:	f8c0 9000 	str.w	r9, [r0]
 8018ef0:	4604      	mov	r4, r0
 8018ef2:	e7e4      	b.n	8018ebe <__pow5mult+0x6a>
 8018ef4:	4638      	mov	r0, r7
 8018ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018efa:	bf00      	nop
 8018efc:	0801e1d8 	.word	0x0801e1d8
 8018f00:	0801e00e 	.word	0x0801e00e
 8018f04:	0801e08e 	.word	0x0801e08e

08018f08 <__lshift>:
 8018f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f0c:	460c      	mov	r4, r1
 8018f0e:	6849      	ldr	r1, [r1, #4]
 8018f10:	6923      	ldr	r3, [r4, #16]
 8018f12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018f16:	68a3      	ldr	r3, [r4, #8]
 8018f18:	4607      	mov	r7, r0
 8018f1a:	4691      	mov	r9, r2
 8018f1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018f20:	f108 0601 	add.w	r6, r8, #1
 8018f24:	42b3      	cmp	r3, r6
 8018f26:	db0b      	blt.n	8018f40 <__lshift+0x38>
 8018f28:	4638      	mov	r0, r7
 8018f2a:	f7ff fd93 	bl	8018a54 <_Balloc>
 8018f2e:	4605      	mov	r5, r0
 8018f30:	b948      	cbnz	r0, 8018f46 <__lshift+0x3e>
 8018f32:	4602      	mov	r2, r0
 8018f34:	4b28      	ldr	r3, [pc, #160]	; (8018fd8 <__lshift+0xd0>)
 8018f36:	4829      	ldr	r0, [pc, #164]	; (8018fdc <__lshift+0xd4>)
 8018f38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018f3c:	f001 fb18 	bl	801a570 <__assert_func>
 8018f40:	3101      	adds	r1, #1
 8018f42:	005b      	lsls	r3, r3, #1
 8018f44:	e7ee      	b.n	8018f24 <__lshift+0x1c>
 8018f46:	2300      	movs	r3, #0
 8018f48:	f100 0114 	add.w	r1, r0, #20
 8018f4c:	f100 0210 	add.w	r2, r0, #16
 8018f50:	4618      	mov	r0, r3
 8018f52:	4553      	cmp	r3, sl
 8018f54:	db33      	blt.n	8018fbe <__lshift+0xb6>
 8018f56:	6920      	ldr	r0, [r4, #16]
 8018f58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018f5c:	f104 0314 	add.w	r3, r4, #20
 8018f60:	f019 091f 	ands.w	r9, r9, #31
 8018f64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018f68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018f6c:	d02b      	beq.n	8018fc6 <__lshift+0xbe>
 8018f6e:	f1c9 0e20 	rsb	lr, r9, #32
 8018f72:	468a      	mov	sl, r1
 8018f74:	2200      	movs	r2, #0
 8018f76:	6818      	ldr	r0, [r3, #0]
 8018f78:	fa00 f009 	lsl.w	r0, r0, r9
 8018f7c:	4310      	orrs	r0, r2
 8018f7e:	f84a 0b04 	str.w	r0, [sl], #4
 8018f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f86:	459c      	cmp	ip, r3
 8018f88:	fa22 f20e 	lsr.w	r2, r2, lr
 8018f8c:	d8f3      	bhi.n	8018f76 <__lshift+0x6e>
 8018f8e:	ebac 0304 	sub.w	r3, ip, r4
 8018f92:	3b15      	subs	r3, #21
 8018f94:	f023 0303 	bic.w	r3, r3, #3
 8018f98:	3304      	adds	r3, #4
 8018f9a:	f104 0015 	add.w	r0, r4, #21
 8018f9e:	4584      	cmp	ip, r0
 8018fa0:	bf38      	it	cc
 8018fa2:	2304      	movcc	r3, #4
 8018fa4:	50ca      	str	r2, [r1, r3]
 8018fa6:	b10a      	cbz	r2, 8018fac <__lshift+0xa4>
 8018fa8:	f108 0602 	add.w	r6, r8, #2
 8018fac:	3e01      	subs	r6, #1
 8018fae:	4638      	mov	r0, r7
 8018fb0:	612e      	str	r6, [r5, #16]
 8018fb2:	4621      	mov	r1, r4
 8018fb4:	f7ff fd8e 	bl	8018ad4 <_Bfree>
 8018fb8:	4628      	mov	r0, r5
 8018fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8018fc2:	3301      	adds	r3, #1
 8018fc4:	e7c5      	b.n	8018f52 <__lshift+0x4a>
 8018fc6:	3904      	subs	r1, #4
 8018fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8018fd0:	459c      	cmp	ip, r3
 8018fd2:	d8f9      	bhi.n	8018fc8 <__lshift+0xc0>
 8018fd4:	e7ea      	b.n	8018fac <__lshift+0xa4>
 8018fd6:	bf00      	nop
 8018fd8:	0801e07d 	.word	0x0801e07d
 8018fdc:	0801e08e 	.word	0x0801e08e

08018fe0 <__mcmp>:
 8018fe0:	b530      	push	{r4, r5, lr}
 8018fe2:	6902      	ldr	r2, [r0, #16]
 8018fe4:	690c      	ldr	r4, [r1, #16]
 8018fe6:	1b12      	subs	r2, r2, r4
 8018fe8:	d10e      	bne.n	8019008 <__mcmp+0x28>
 8018fea:	f100 0314 	add.w	r3, r0, #20
 8018fee:	3114      	adds	r1, #20
 8018ff0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018ff4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018ff8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018ffc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019000:	42a5      	cmp	r5, r4
 8019002:	d003      	beq.n	801900c <__mcmp+0x2c>
 8019004:	d305      	bcc.n	8019012 <__mcmp+0x32>
 8019006:	2201      	movs	r2, #1
 8019008:	4610      	mov	r0, r2
 801900a:	bd30      	pop	{r4, r5, pc}
 801900c:	4283      	cmp	r3, r0
 801900e:	d3f3      	bcc.n	8018ff8 <__mcmp+0x18>
 8019010:	e7fa      	b.n	8019008 <__mcmp+0x28>
 8019012:	f04f 32ff 	mov.w	r2, #4294967295
 8019016:	e7f7      	b.n	8019008 <__mcmp+0x28>

08019018 <__mdiff>:
 8019018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801901c:	460c      	mov	r4, r1
 801901e:	4606      	mov	r6, r0
 8019020:	4611      	mov	r1, r2
 8019022:	4620      	mov	r0, r4
 8019024:	4690      	mov	r8, r2
 8019026:	f7ff ffdb 	bl	8018fe0 <__mcmp>
 801902a:	1e05      	subs	r5, r0, #0
 801902c:	d110      	bne.n	8019050 <__mdiff+0x38>
 801902e:	4629      	mov	r1, r5
 8019030:	4630      	mov	r0, r6
 8019032:	f7ff fd0f 	bl	8018a54 <_Balloc>
 8019036:	b930      	cbnz	r0, 8019046 <__mdiff+0x2e>
 8019038:	4b3a      	ldr	r3, [pc, #232]	; (8019124 <__mdiff+0x10c>)
 801903a:	4602      	mov	r2, r0
 801903c:	f240 2137 	movw	r1, #567	; 0x237
 8019040:	4839      	ldr	r0, [pc, #228]	; (8019128 <__mdiff+0x110>)
 8019042:	f001 fa95 	bl	801a570 <__assert_func>
 8019046:	2301      	movs	r3, #1
 8019048:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801904c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019050:	bfa4      	itt	ge
 8019052:	4643      	movge	r3, r8
 8019054:	46a0      	movge	r8, r4
 8019056:	4630      	mov	r0, r6
 8019058:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801905c:	bfa6      	itte	ge
 801905e:	461c      	movge	r4, r3
 8019060:	2500      	movge	r5, #0
 8019062:	2501      	movlt	r5, #1
 8019064:	f7ff fcf6 	bl	8018a54 <_Balloc>
 8019068:	b920      	cbnz	r0, 8019074 <__mdiff+0x5c>
 801906a:	4b2e      	ldr	r3, [pc, #184]	; (8019124 <__mdiff+0x10c>)
 801906c:	4602      	mov	r2, r0
 801906e:	f240 2145 	movw	r1, #581	; 0x245
 8019072:	e7e5      	b.n	8019040 <__mdiff+0x28>
 8019074:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019078:	6926      	ldr	r6, [r4, #16]
 801907a:	60c5      	str	r5, [r0, #12]
 801907c:	f104 0914 	add.w	r9, r4, #20
 8019080:	f108 0514 	add.w	r5, r8, #20
 8019084:	f100 0e14 	add.w	lr, r0, #20
 8019088:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801908c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019090:	f108 0210 	add.w	r2, r8, #16
 8019094:	46f2      	mov	sl, lr
 8019096:	2100      	movs	r1, #0
 8019098:	f859 3b04 	ldr.w	r3, [r9], #4
 801909c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80190a0:	fa11 f88b 	uxtah	r8, r1, fp
 80190a4:	b299      	uxth	r1, r3
 80190a6:	0c1b      	lsrs	r3, r3, #16
 80190a8:	eba8 0801 	sub.w	r8, r8, r1
 80190ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80190b0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80190b4:	fa1f f888 	uxth.w	r8, r8
 80190b8:	1419      	asrs	r1, r3, #16
 80190ba:	454e      	cmp	r6, r9
 80190bc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80190c0:	f84a 3b04 	str.w	r3, [sl], #4
 80190c4:	d8e8      	bhi.n	8019098 <__mdiff+0x80>
 80190c6:	1b33      	subs	r3, r6, r4
 80190c8:	3b15      	subs	r3, #21
 80190ca:	f023 0303 	bic.w	r3, r3, #3
 80190ce:	3304      	adds	r3, #4
 80190d0:	3415      	adds	r4, #21
 80190d2:	42a6      	cmp	r6, r4
 80190d4:	bf38      	it	cc
 80190d6:	2304      	movcc	r3, #4
 80190d8:	441d      	add	r5, r3
 80190da:	4473      	add	r3, lr
 80190dc:	469e      	mov	lr, r3
 80190de:	462e      	mov	r6, r5
 80190e0:	4566      	cmp	r6, ip
 80190e2:	d30e      	bcc.n	8019102 <__mdiff+0xea>
 80190e4:	f10c 0203 	add.w	r2, ip, #3
 80190e8:	1b52      	subs	r2, r2, r5
 80190ea:	f022 0203 	bic.w	r2, r2, #3
 80190ee:	3d03      	subs	r5, #3
 80190f0:	45ac      	cmp	ip, r5
 80190f2:	bf38      	it	cc
 80190f4:	2200      	movcc	r2, #0
 80190f6:	4413      	add	r3, r2
 80190f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80190fc:	b17a      	cbz	r2, 801911e <__mdiff+0x106>
 80190fe:	6107      	str	r7, [r0, #16]
 8019100:	e7a4      	b.n	801904c <__mdiff+0x34>
 8019102:	f856 8b04 	ldr.w	r8, [r6], #4
 8019106:	fa11 f288 	uxtah	r2, r1, r8
 801910a:	1414      	asrs	r4, r2, #16
 801910c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019110:	b292      	uxth	r2, r2
 8019112:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019116:	f84e 2b04 	str.w	r2, [lr], #4
 801911a:	1421      	asrs	r1, r4, #16
 801911c:	e7e0      	b.n	80190e0 <__mdiff+0xc8>
 801911e:	3f01      	subs	r7, #1
 8019120:	e7ea      	b.n	80190f8 <__mdiff+0xe0>
 8019122:	bf00      	nop
 8019124:	0801e07d 	.word	0x0801e07d
 8019128:	0801e08e 	.word	0x0801e08e

0801912c <__ulp>:
 801912c:	b082      	sub	sp, #8
 801912e:	ed8d 0b00 	vstr	d0, [sp]
 8019132:	9a01      	ldr	r2, [sp, #4]
 8019134:	4b0f      	ldr	r3, [pc, #60]	; (8019174 <__ulp+0x48>)
 8019136:	4013      	ands	r3, r2
 8019138:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801913c:	2b00      	cmp	r3, #0
 801913e:	dc08      	bgt.n	8019152 <__ulp+0x26>
 8019140:	425b      	negs	r3, r3
 8019142:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8019146:	ea4f 5223 	mov.w	r2, r3, asr #20
 801914a:	da04      	bge.n	8019156 <__ulp+0x2a>
 801914c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019150:	4113      	asrs	r3, r2
 8019152:	2200      	movs	r2, #0
 8019154:	e008      	b.n	8019168 <__ulp+0x3c>
 8019156:	f1a2 0314 	sub.w	r3, r2, #20
 801915a:	2b1e      	cmp	r3, #30
 801915c:	bfda      	itte	le
 801915e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8019162:	40da      	lsrle	r2, r3
 8019164:	2201      	movgt	r2, #1
 8019166:	2300      	movs	r3, #0
 8019168:	4619      	mov	r1, r3
 801916a:	4610      	mov	r0, r2
 801916c:	ec41 0b10 	vmov	d0, r0, r1
 8019170:	b002      	add	sp, #8
 8019172:	4770      	bx	lr
 8019174:	7ff00000 	.word	0x7ff00000

08019178 <__b2d>:
 8019178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801917c:	6906      	ldr	r6, [r0, #16]
 801917e:	f100 0814 	add.w	r8, r0, #20
 8019182:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019186:	1f37      	subs	r7, r6, #4
 8019188:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801918c:	4610      	mov	r0, r2
 801918e:	f7ff fd53 	bl	8018c38 <__hi0bits>
 8019192:	f1c0 0320 	rsb	r3, r0, #32
 8019196:	280a      	cmp	r0, #10
 8019198:	600b      	str	r3, [r1, #0]
 801919a:	491b      	ldr	r1, [pc, #108]	; (8019208 <__b2d+0x90>)
 801919c:	dc15      	bgt.n	80191ca <__b2d+0x52>
 801919e:	f1c0 0c0b 	rsb	ip, r0, #11
 80191a2:	fa22 f30c 	lsr.w	r3, r2, ip
 80191a6:	45b8      	cmp	r8, r7
 80191a8:	ea43 0501 	orr.w	r5, r3, r1
 80191ac:	bf34      	ite	cc
 80191ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80191b2:	2300      	movcs	r3, #0
 80191b4:	3015      	adds	r0, #21
 80191b6:	fa02 f000 	lsl.w	r0, r2, r0
 80191ba:	fa23 f30c 	lsr.w	r3, r3, ip
 80191be:	4303      	orrs	r3, r0
 80191c0:	461c      	mov	r4, r3
 80191c2:	ec45 4b10 	vmov	d0, r4, r5
 80191c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191ca:	45b8      	cmp	r8, r7
 80191cc:	bf3a      	itte	cc
 80191ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80191d2:	f1a6 0708 	subcc.w	r7, r6, #8
 80191d6:	2300      	movcs	r3, #0
 80191d8:	380b      	subs	r0, #11
 80191da:	d012      	beq.n	8019202 <__b2d+0x8a>
 80191dc:	f1c0 0120 	rsb	r1, r0, #32
 80191e0:	fa23 f401 	lsr.w	r4, r3, r1
 80191e4:	4082      	lsls	r2, r0
 80191e6:	4322      	orrs	r2, r4
 80191e8:	4547      	cmp	r7, r8
 80191ea:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80191ee:	bf8c      	ite	hi
 80191f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80191f4:	2200      	movls	r2, #0
 80191f6:	4083      	lsls	r3, r0
 80191f8:	40ca      	lsrs	r2, r1
 80191fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80191fe:	4313      	orrs	r3, r2
 8019200:	e7de      	b.n	80191c0 <__b2d+0x48>
 8019202:	ea42 0501 	orr.w	r5, r2, r1
 8019206:	e7db      	b.n	80191c0 <__b2d+0x48>
 8019208:	3ff00000 	.word	0x3ff00000

0801920c <__d2b>:
 801920c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019210:	460f      	mov	r7, r1
 8019212:	2101      	movs	r1, #1
 8019214:	ec59 8b10 	vmov	r8, r9, d0
 8019218:	4616      	mov	r6, r2
 801921a:	f7ff fc1b 	bl	8018a54 <_Balloc>
 801921e:	4604      	mov	r4, r0
 8019220:	b930      	cbnz	r0, 8019230 <__d2b+0x24>
 8019222:	4602      	mov	r2, r0
 8019224:	4b24      	ldr	r3, [pc, #144]	; (80192b8 <__d2b+0xac>)
 8019226:	4825      	ldr	r0, [pc, #148]	; (80192bc <__d2b+0xb0>)
 8019228:	f240 310f 	movw	r1, #783	; 0x30f
 801922c:	f001 f9a0 	bl	801a570 <__assert_func>
 8019230:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019234:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019238:	bb2d      	cbnz	r5, 8019286 <__d2b+0x7a>
 801923a:	9301      	str	r3, [sp, #4]
 801923c:	f1b8 0300 	subs.w	r3, r8, #0
 8019240:	d026      	beq.n	8019290 <__d2b+0x84>
 8019242:	4668      	mov	r0, sp
 8019244:	9300      	str	r3, [sp, #0]
 8019246:	f7ff fd17 	bl	8018c78 <__lo0bits>
 801924a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801924e:	b1e8      	cbz	r0, 801928c <__d2b+0x80>
 8019250:	f1c0 0320 	rsb	r3, r0, #32
 8019254:	fa02 f303 	lsl.w	r3, r2, r3
 8019258:	430b      	orrs	r3, r1
 801925a:	40c2      	lsrs	r2, r0
 801925c:	6163      	str	r3, [r4, #20]
 801925e:	9201      	str	r2, [sp, #4]
 8019260:	9b01      	ldr	r3, [sp, #4]
 8019262:	61a3      	str	r3, [r4, #24]
 8019264:	2b00      	cmp	r3, #0
 8019266:	bf14      	ite	ne
 8019268:	2202      	movne	r2, #2
 801926a:	2201      	moveq	r2, #1
 801926c:	6122      	str	r2, [r4, #16]
 801926e:	b1bd      	cbz	r5, 80192a0 <__d2b+0x94>
 8019270:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019274:	4405      	add	r5, r0
 8019276:	603d      	str	r5, [r7, #0]
 8019278:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801927c:	6030      	str	r0, [r6, #0]
 801927e:	4620      	mov	r0, r4
 8019280:	b003      	add	sp, #12
 8019282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801928a:	e7d6      	b.n	801923a <__d2b+0x2e>
 801928c:	6161      	str	r1, [r4, #20]
 801928e:	e7e7      	b.n	8019260 <__d2b+0x54>
 8019290:	a801      	add	r0, sp, #4
 8019292:	f7ff fcf1 	bl	8018c78 <__lo0bits>
 8019296:	9b01      	ldr	r3, [sp, #4]
 8019298:	6163      	str	r3, [r4, #20]
 801929a:	3020      	adds	r0, #32
 801929c:	2201      	movs	r2, #1
 801929e:	e7e5      	b.n	801926c <__d2b+0x60>
 80192a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80192a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80192a8:	6038      	str	r0, [r7, #0]
 80192aa:	6918      	ldr	r0, [r3, #16]
 80192ac:	f7ff fcc4 	bl	8018c38 <__hi0bits>
 80192b0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80192b4:	e7e2      	b.n	801927c <__d2b+0x70>
 80192b6:	bf00      	nop
 80192b8:	0801e07d 	.word	0x0801e07d
 80192bc:	0801e08e 	.word	0x0801e08e

080192c0 <__ratio>:
 80192c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192c4:	4688      	mov	r8, r1
 80192c6:	4669      	mov	r1, sp
 80192c8:	4681      	mov	r9, r0
 80192ca:	f7ff ff55 	bl	8019178 <__b2d>
 80192ce:	a901      	add	r1, sp, #4
 80192d0:	4640      	mov	r0, r8
 80192d2:	ec55 4b10 	vmov	r4, r5, d0
 80192d6:	f7ff ff4f 	bl	8019178 <__b2d>
 80192da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80192de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80192e2:	eba3 0c02 	sub.w	ip, r3, r2
 80192e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80192ea:	1a9b      	subs	r3, r3, r2
 80192ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80192f0:	ec51 0b10 	vmov	r0, r1, d0
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	bfd6      	itet	le
 80192f8:	460a      	movle	r2, r1
 80192fa:	462a      	movgt	r2, r5
 80192fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019300:	468b      	mov	fp, r1
 8019302:	462f      	mov	r7, r5
 8019304:	bfd4      	ite	le
 8019306:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801930a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801930e:	4620      	mov	r0, r4
 8019310:	ee10 2a10 	vmov	r2, s0
 8019314:	465b      	mov	r3, fp
 8019316:	4639      	mov	r1, r7
 8019318:	f7e7 fac0 	bl	800089c <__aeabi_ddiv>
 801931c:	ec41 0b10 	vmov	d0, r0, r1
 8019320:	b003      	add	sp, #12
 8019322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019326 <__copybits>:
 8019326:	3901      	subs	r1, #1
 8019328:	b570      	push	{r4, r5, r6, lr}
 801932a:	1149      	asrs	r1, r1, #5
 801932c:	6914      	ldr	r4, [r2, #16]
 801932e:	3101      	adds	r1, #1
 8019330:	f102 0314 	add.w	r3, r2, #20
 8019334:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019338:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801933c:	1f05      	subs	r5, r0, #4
 801933e:	42a3      	cmp	r3, r4
 8019340:	d30c      	bcc.n	801935c <__copybits+0x36>
 8019342:	1aa3      	subs	r3, r4, r2
 8019344:	3b11      	subs	r3, #17
 8019346:	f023 0303 	bic.w	r3, r3, #3
 801934a:	3211      	adds	r2, #17
 801934c:	42a2      	cmp	r2, r4
 801934e:	bf88      	it	hi
 8019350:	2300      	movhi	r3, #0
 8019352:	4418      	add	r0, r3
 8019354:	2300      	movs	r3, #0
 8019356:	4288      	cmp	r0, r1
 8019358:	d305      	bcc.n	8019366 <__copybits+0x40>
 801935a:	bd70      	pop	{r4, r5, r6, pc}
 801935c:	f853 6b04 	ldr.w	r6, [r3], #4
 8019360:	f845 6f04 	str.w	r6, [r5, #4]!
 8019364:	e7eb      	b.n	801933e <__copybits+0x18>
 8019366:	f840 3b04 	str.w	r3, [r0], #4
 801936a:	e7f4      	b.n	8019356 <__copybits+0x30>

0801936c <__any_on>:
 801936c:	f100 0214 	add.w	r2, r0, #20
 8019370:	6900      	ldr	r0, [r0, #16]
 8019372:	114b      	asrs	r3, r1, #5
 8019374:	4298      	cmp	r0, r3
 8019376:	b510      	push	{r4, lr}
 8019378:	db11      	blt.n	801939e <__any_on+0x32>
 801937a:	dd0a      	ble.n	8019392 <__any_on+0x26>
 801937c:	f011 011f 	ands.w	r1, r1, #31
 8019380:	d007      	beq.n	8019392 <__any_on+0x26>
 8019382:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019386:	fa24 f001 	lsr.w	r0, r4, r1
 801938a:	fa00 f101 	lsl.w	r1, r0, r1
 801938e:	428c      	cmp	r4, r1
 8019390:	d10b      	bne.n	80193aa <__any_on+0x3e>
 8019392:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019396:	4293      	cmp	r3, r2
 8019398:	d803      	bhi.n	80193a2 <__any_on+0x36>
 801939a:	2000      	movs	r0, #0
 801939c:	bd10      	pop	{r4, pc}
 801939e:	4603      	mov	r3, r0
 80193a0:	e7f7      	b.n	8019392 <__any_on+0x26>
 80193a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80193a6:	2900      	cmp	r1, #0
 80193a8:	d0f5      	beq.n	8019396 <__any_on+0x2a>
 80193aa:	2001      	movs	r0, #1
 80193ac:	e7f6      	b.n	801939c <__any_on+0x30>

080193ae <sulp>:
 80193ae:	b570      	push	{r4, r5, r6, lr}
 80193b0:	4604      	mov	r4, r0
 80193b2:	460d      	mov	r5, r1
 80193b4:	ec45 4b10 	vmov	d0, r4, r5
 80193b8:	4616      	mov	r6, r2
 80193ba:	f7ff feb7 	bl	801912c <__ulp>
 80193be:	ec51 0b10 	vmov	r0, r1, d0
 80193c2:	b17e      	cbz	r6, 80193e4 <sulp+0x36>
 80193c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80193c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	dd09      	ble.n	80193e4 <sulp+0x36>
 80193d0:	051b      	lsls	r3, r3, #20
 80193d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80193d6:	2400      	movs	r4, #0
 80193d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80193dc:	4622      	mov	r2, r4
 80193de:	462b      	mov	r3, r5
 80193e0:	f7e7 f932 	bl	8000648 <__aeabi_dmul>
 80193e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080193e8 <_strtod_l>:
 80193e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193ec:	ed2d 8b02 	vpush	{d8}
 80193f0:	b09b      	sub	sp, #108	; 0x6c
 80193f2:	4604      	mov	r4, r0
 80193f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80193f6:	2200      	movs	r2, #0
 80193f8:	9216      	str	r2, [sp, #88]	; 0x58
 80193fa:	460d      	mov	r5, r1
 80193fc:	f04f 0800 	mov.w	r8, #0
 8019400:	f04f 0900 	mov.w	r9, #0
 8019404:	460a      	mov	r2, r1
 8019406:	9215      	str	r2, [sp, #84]	; 0x54
 8019408:	7811      	ldrb	r1, [r2, #0]
 801940a:	292b      	cmp	r1, #43	; 0x2b
 801940c:	d04c      	beq.n	80194a8 <_strtod_l+0xc0>
 801940e:	d83a      	bhi.n	8019486 <_strtod_l+0x9e>
 8019410:	290d      	cmp	r1, #13
 8019412:	d834      	bhi.n	801947e <_strtod_l+0x96>
 8019414:	2908      	cmp	r1, #8
 8019416:	d834      	bhi.n	8019482 <_strtod_l+0x9a>
 8019418:	2900      	cmp	r1, #0
 801941a:	d03d      	beq.n	8019498 <_strtod_l+0xb0>
 801941c:	2200      	movs	r2, #0
 801941e:	920a      	str	r2, [sp, #40]	; 0x28
 8019420:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019422:	7832      	ldrb	r2, [r6, #0]
 8019424:	2a30      	cmp	r2, #48	; 0x30
 8019426:	f040 80b4 	bne.w	8019592 <_strtod_l+0x1aa>
 801942a:	7872      	ldrb	r2, [r6, #1]
 801942c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019430:	2a58      	cmp	r2, #88	; 0x58
 8019432:	d170      	bne.n	8019516 <_strtod_l+0x12e>
 8019434:	9302      	str	r3, [sp, #8]
 8019436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019438:	9301      	str	r3, [sp, #4]
 801943a:	ab16      	add	r3, sp, #88	; 0x58
 801943c:	9300      	str	r3, [sp, #0]
 801943e:	4a8e      	ldr	r2, [pc, #568]	; (8019678 <_strtod_l+0x290>)
 8019440:	ab17      	add	r3, sp, #92	; 0x5c
 8019442:	a915      	add	r1, sp, #84	; 0x54
 8019444:	4620      	mov	r0, r4
 8019446:	f001 f92f 	bl	801a6a8 <__gethex>
 801944a:	f010 070f 	ands.w	r7, r0, #15
 801944e:	4605      	mov	r5, r0
 8019450:	d005      	beq.n	801945e <_strtod_l+0x76>
 8019452:	2f06      	cmp	r7, #6
 8019454:	d12a      	bne.n	80194ac <_strtod_l+0xc4>
 8019456:	3601      	adds	r6, #1
 8019458:	2300      	movs	r3, #0
 801945a:	9615      	str	r6, [sp, #84]	; 0x54
 801945c:	930a      	str	r3, [sp, #40]	; 0x28
 801945e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019460:	2b00      	cmp	r3, #0
 8019462:	f040 857f 	bne.w	8019f64 <_strtod_l+0xb7c>
 8019466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019468:	b1db      	cbz	r3, 80194a2 <_strtod_l+0xba>
 801946a:	4642      	mov	r2, r8
 801946c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019470:	ec43 2b10 	vmov	d0, r2, r3
 8019474:	b01b      	add	sp, #108	; 0x6c
 8019476:	ecbd 8b02 	vpop	{d8}
 801947a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801947e:	2920      	cmp	r1, #32
 8019480:	d1cc      	bne.n	801941c <_strtod_l+0x34>
 8019482:	3201      	adds	r2, #1
 8019484:	e7bf      	b.n	8019406 <_strtod_l+0x1e>
 8019486:	292d      	cmp	r1, #45	; 0x2d
 8019488:	d1c8      	bne.n	801941c <_strtod_l+0x34>
 801948a:	2101      	movs	r1, #1
 801948c:	910a      	str	r1, [sp, #40]	; 0x28
 801948e:	1c51      	adds	r1, r2, #1
 8019490:	9115      	str	r1, [sp, #84]	; 0x54
 8019492:	7852      	ldrb	r2, [r2, #1]
 8019494:	2a00      	cmp	r2, #0
 8019496:	d1c3      	bne.n	8019420 <_strtod_l+0x38>
 8019498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801949a:	9515      	str	r5, [sp, #84]	; 0x54
 801949c:	2b00      	cmp	r3, #0
 801949e:	f040 855f 	bne.w	8019f60 <_strtod_l+0xb78>
 80194a2:	4642      	mov	r2, r8
 80194a4:	464b      	mov	r3, r9
 80194a6:	e7e3      	b.n	8019470 <_strtod_l+0x88>
 80194a8:	2100      	movs	r1, #0
 80194aa:	e7ef      	b.n	801948c <_strtod_l+0xa4>
 80194ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80194ae:	b13a      	cbz	r2, 80194c0 <_strtod_l+0xd8>
 80194b0:	2135      	movs	r1, #53	; 0x35
 80194b2:	a818      	add	r0, sp, #96	; 0x60
 80194b4:	f7ff ff37 	bl	8019326 <__copybits>
 80194b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80194ba:	4620      	mov	r0, r4
 80194bc:	f7ff fb0a 	bl	8018ad4 <_Bfree>
 80194c0:	3f01      	subs	r7, #1
 80194c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80194c4:	2f04      	cmp	r7, #4
 80194c6:	d806      	bhi.n	80194d6 <_strtod_l+0xee>
 80194c8:	e8df f007 	tbb	[pc, r7]
 80194cc:	201d0314 	.word	0x201d0314
 80194d0:	14          	.byte	0x14
 80194d1:	00          	.byte	0x00
 80194d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80194d6:	05e9      	lsls	r1, r5, #23
 80194d8:	bf48      	it	mi
 80194da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80194de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80194e2:	0d1b      	lsrs	r3, r3, #20
 80194e4:	051b      	lsls	r3, r3, #20
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d1b9      	bne.n	801945e <_strtod_l+0x76>
 80194ea:	f7fe faf5 	bl	8017ad8 <__errno>
 80194ee:	2322      	movs	r3, #34	; 0x22
 80194f0:	6003      	str	r3, [r0, #0]
 80194f2:	e7b4      	b.n	801945e <_strtod_l+0x76>
 80194f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80194f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80194fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019500:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8019504:	e7e7      	b.n	80194d6 <_strtod_l+0xee>
 8019506:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8019680 <_strtod_l+0x298>
 801950a:	e7e4      	b.n	80194d6 <_strtod_l+0xee>
 801950c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019510:	f04f 38ff 	mov.w	r8, #4294967295
 8019514:	e7df      	b.n	80194d6 <_strtod_l+0xee>
 8019516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019518:	1c5a      	adds	r2, r3, #1
 801951a:	9215      	str	r2, [sp, #84]	; 0x54
 801951c:	785b      	ldrb	r3, [r3, #1]
 801951e:	2b30      	cmp	r3, #48	; 0x30
 8019520:	d0f9      	beq.n	8019516 <_strtod_l+0x12e>
 8019522:	2b00      	cmp	r3, #0
 8019524:	d09b      	beq.n	801945e <_strtod_l+0x76>
 8019526:	2301      	movs	r3, #1
 8019528:	f04f 0a00 	mov.w	sl, #0
 801952c:	9304      	str	r3, [sp, #16]
 801952e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019530:	930b      	str	r3, [sp, #44]	; 0x2c
 8019532:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019536:	46d3      	mov	fp, sl
 8019538:	220a      	movs	r2, #10
 801953a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801953c:	7806      	ldrb	r6, [r0, #0]
 801953e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8019542:	b2d9      	uxtb	r1, r3
 8019544:	2909      	cmp	r1, #9
 8019546:	d926      	bls.n	8019596 <_strtod_l+0x1ae>
 8019548:	494c      	ldr	r1, [pc, #304]	; (801967c <_strtod_l+0x294>)
 801954a:	2201      	movs	r2, #1
 801954c:	f000 ffe6 	bl	801a51c <strncmp>
 8019550:	2800      	cmp	r0, #0
 8019552:	d030      	beq.n	80195b6 <_strtod_l+0x1ce>
 8019554:	2000      	movs	r0, #0
 8019556:	4632      	mov	r2, r6
 8019558:	9005      	str	r0, [sp, #20]
 801955a:	465e      	mov	r6, fp
 801955c:	4603      	mov	r3, r0
 801955e:	2a65      	cmp	r2, #101	; 0x65
 8019560:	d001      	beq.n	8019566 <_strtod_l+0x17e>
 8019562:	2a45      	cmp	r2, #69	; 0x45
 8019564:	d113      	bne.n	801958e <_strtod_l+0x1a6>
 8019566:	b91e      	cbnz	r6, 8019570 <_strtod_l+0x188>
 8019568:	9a04      	ldr	r2, [sp, #16]
 801956a:	4302      	orrs	r2, r0
 801956c:	d094      	beq.n	8019498 <_strtod_l+0xb0>
 801956e:	2600      	movs	r6, #0
 8019570:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019572:	1c6a      	adds	r2, r5, #1
 8019574:	9215      	str	r2, [sp, #84]	; 0x54
 8019576:	786a      	ldrb	r2, [r5, #1]
 8019578:	2a2b      	cmp	r2, #43	; 0x2b
 801957a:	d074      	beq.n	8019666 <_strtod_l+0x27e>
 801957c:	2a2d      	cmp	r2, #45	; 0x2d
 801957e:	d078      	beq.n	8019672 <_strtod_l+0x28a>
 8019580:	f04f 0c00 	mov.w	ip, #0
 8019584:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019588:	2909      	cmp	r1, #9
 801958a:	d97f      	bls.n	801968c <_strtod_l+0x2a4>
 801958c:	9515      	str	r5, [sp, #84]	; 0x54
 801958e:	2700      	movs	r7, #0
 8019590:	e09e      	b.n	80196d0 <_strtod_l+0x2e8>
 8019592:	2300      	movs	r3, #0
 8019594:	e7c8      	b.n	8019528 <_strtod_l+0x140>
 8019596:	f1bb 0f08 	cmp.w	fp, #8
 801959a:	bfd8      	it	le
 801959c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801959e:	f100 0001 	add.w	r0, r0, #1
 80195a2:	bfda      	itte	le
 80195a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80195a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80195aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80195ae:	f10b 0b01 	add.w	fp, fp, #1
 80195b2:	9015      	str	r0, [sp, #84]	; 0x54
 80195b4:	e7c1      	b.n	801953a <_strtod_l+0x152>
 80195b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80195b8:	1c5a      	adds	r2, r3, #1
 80195ba:	9215      	str	r2, [sp, #84]	; 0x54
 80195bc:	785a      	ldrb	r2, [r3, #1]
 80195be:	f1bb 0f00 	cmp.w	fp, #0
 80195c2:	d037      	beq.n	8019634 <_strtod_l+0x24c>
 80195c4:	9005      	str	r0, [sp, #20]
 80195c6:	465e      	mov	r6, fp
 80195c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80195cc:	2b09      	cmp	r3, #9
 80195ce:	d912      	bls.n	80195f6 <_strtod_l+0x20e>
 80195d0:	2301      	movs	r3, #1
 80195d2:	e7c4      	b.n	801955e <_strtod_l+0x176>
 80195d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80195d6:	1c5a      	adds	r2, r3, #1
 80195d8:	9215      	str	r2, [sp, #84]	; 0x54
 80195da:	785a      	ldrb	r2, [r3, #1]
 80195dc:	3001      	adds	r0, #1
 80195de:	2a30      	cmp	r2, #48	; 0x30
 80195e0:	d0f8      	beq.n	80195d4 <_strtod_l+0x1ec>
 80195e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80195e6:	2b08      	cmp	r3, #8
 80195e8:	f200 84c1 	bhi.w	8019f6e <_strtod_l+0xb86>
 80195ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80195ee:	9005      	str	r0, [sp, #20]
 80195f0:	2000      	movs	r0, #0
 80195f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80195f4:	4606      	mov	r6, r0
 80195f6:	3a30      	subs	r2, #48	; 0x30
 80195f8:	f100 0301 	add.w	r3, r0, #1
 80195fc:	d014      	beq.n	8019628 <_strtod_l+0x240>
 80195fe:	9905      	ldr	r1, [sp, #20]
 8019600:	4419      	add	r1, r3
 8019602:	9105      	str	r1, [sp, #20]
 8019604:	4633      	mov	r3, r6
 8019606:	eb00 0c06 	add.w	ip, r0, r6
 801960a:	210a      	movs	r1, #10
 801960c:	4563      	cmp	r3, ip
 801960e:	d113      	bne.n	8019638 <_strtod_l+0x250>
 8019610:	1833      	adds	r3, r6, r0
 8019612:	2b08      	cmp	r3, #8
 8019614:	f106 0601 	add.w	r6, r6, #1
 8019618:	4406      	add	r6, r0
 801961a:	dc1a      	bgt.n	8019652 <_strtod_l+0x26a>
 801961c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801961e:	230a      	movs	r3, #10
 8019620:	fb03 2301 	mla	r3, r3, r1, r2
 8019624:	9309      	str	r3, [sp, #36]	; 0x24
 8019626:	2300      	movs	r3, #0
 8019628:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801962a:	1c51      	adds	r1, r2, #1
 801962c:	9115      	str	r1, [sp, #84]	; 0x54
 801962e:	7852      	ldrb	r2, [r2, #1]
 8019630:	4618      	mov	r0, r3
 8019632:	e7c9      	b.n	80195c8 <_strtod_l+0x1e0>
 8019634:	4658      	mov	r0, fp
 8019636:	e7d2      	b.n	80195de <_strtod_l+0x1f6>
 8019638:	2b08      	cmp	r3, #8
 801963a:	f103 0301 	add.w	r3, r3, #1
 801963e:	dc03      	bgt.n	8019648 <_strtod_l+0x260>
 8019640:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019642:	434f      	muls	r7, r1
 8019644:	9709      	str	r7, [sp, #36]	; 0x24
 8019646:	e7e1      	b.n	801960c <_strtod_l+0x224>
 8019648:	2b10      	cmp	r3, #16
 801964a:	bfd8      	it	le
 801964c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8019650:	e7dc      	b.n	801960c <_strtod_l+0x224>
 8019652:	2e10      	cmp	r6, #16
 8019654:	bfdc      	itt	le
 8019656:	230a      	movle	r3, #10
 8019658:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801965c:	e7e3      	b.n	8019626 <_strtod_l+0x23e>
 801965e:	2300      	movs	r3, #0
 8019660:	9305      	str	r3, [sp, #20]
 8019662:	2301      	movs	r3, #1
 8019664:	e780      	b.n	8019568 <_strtod_l+0x180>
 8019666:	f04f 0c00 	mov.w	ip, #0
 801966a:	1caa      	adds	r2, r5, #2
 801966c:	9215      	str	r2, [sp, #84]	; 0x54
 801966e:	78aa      	ldrb	r2, [r5, #2]
 8019670:	e788      	b.n	8019584 <_strtod_l+0x19c>
 8019672:	f04f 0c01 	mov.w	ip, #1
 8019676:	e7f8      	b.n	801966a <_strtod_l+0x282>
 8019678:	0801e1e8 	.word	0x0801e1e8
 801967c:	0801e1e4 	.word	0x0801e1e4
 8019680:	7ff00000 	.word	0x7ff00000
 8019684:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019686:	1c51      	adds	r1, r2, #1
 8019688:	9115      	str	r1, [sp, #84]	; 0x54
 801968a:	7852      	ldrb	r2, [r2, #1]
 801968c:	2a30      	cmp	r2, #48	; 0x30
 801968e:	d0f9      	beq.n	8019684 <_strtod_l+0x29c>
 8019690:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8019694:	2908      	cmp	r1, #8
 8019696:	f63f af7a 	bhi.w	801958e <_strtod_l+0x1a6>
 801969a:	3a30      	subs	r2, #48	; 0x30
 801969c:	9208      	str	r2, [sp, #32]
 801969e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80196a0:	920c      	str	r2, [sp, #48]	; 0x30
 80196a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80196a4:	1c57      	adds	r7, r2, #1
 80196a6:	9715      	str	r7, [sp, #84]	; 0x54
 80196a8:	7852      	ldrb	r2, [r2, #1]
 80196aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80196ae:	f1be 0f09 	cmp.w	lr, #9
 80196b2:	d938      	bls.n	8019726 <_strtod_l+0x33e>
 80196b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80196b6:	1a7f      	subs	r7, r7, r1
 80196b8:	2f08      	cmp	r7, #8
 80196ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80196be:	dc03      	bgt.n	80196c8 <_strtod_l+0x2e0>
 80196c0:	9908      	ldr	r1, [sp, #32]
 80196c2:	428f      	cmp	r7, r1
 80196c4:	bfa8      	it	ge
 80196c6:	460f      	movge	r7, r1
 80196c8:	f1bc 0f00 	cmp.w	ip, #0
 80196cc:	d000      	beq.n	80196d0 <_strtod_l+0x2e8>
 80196ce:	427f      	negs	r7, r7
 80196d0:	2e00      	cmp	r6, #0
 80196d2:	d14f      	bne.n	8019774 <_strtod_l+0x38c>
 80196d4:	9904      	ldr	r1, [sp, #16]
 80196d6:	4301      	orrs	r1, r0
 80196d8:	f47f aec1 	bne.w	801945e <_strtod_l+0x76>
 80196dc:	2b00      	cmp	r3, #0
 80196de:	f47f aedb 	bne.w	8019498 <_strtod_l+0xb0>
 80196e2:	2a69      	cmp	r2, #105	; 0x69
 80196e4:	d029      	beq.n	801973a <_strtod_l+0x352>
 80196e6:	dc26      	bgt.n	8019736 <_strtod_l+0x34e>
 80196e8:	2a49      	cmp	r2, #73	; 0x49
 80196ea:	d026      	beq.n	801973a <_strtod_l+0x352>
 80196ec:	2a4e      	cmp	r2, #78	; 0x4e
 80196ee:	f47f aed3 	bne.w	8019498 <_strtod_l+0xb0>
 80196f2:	499b      	ldr	r1, [pc, #620]	; (8019960 <_strtod_l+0x578>)
 80196f4:	a815      	add	r0, sp, #84	; 0x54
 80196f6:	f001 fa17 	bl	801ab28 <__match>
 80196fa:	2800      	cmp	r0, #0
 80196fc:	f43f aecc 	beq.w	8019498 <_strtod_l+0xb0>
 8019700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019702:	781b      	ldrb	r3, [r3, #0]
 8019704:	2b28      	cmp	r3, #40	; 0x28
 8019706:	d12f      	bne.n	8019768 <_strtod_l+0x380>
 8019708:	4996      	ldr	r1, [pc, #600]	; (8019964 <_strtod_l+0x57c>)
 801970a:	aa18      	add	r2, sp, #96	; 0x60
 801970c:	a815      	add	r0, sp, #84	; 0x54
 801970e:	f001 fa1f 	bl	801ab50 <__hexnan>
 8019712:	2805      	cmp	r0, #5
 8019714:	d128      	bne.n	8019768 <_strtod_l+0x380>
 8019716:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019718:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801971c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019720:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019724:	e69b      	b.n	801945e <_strtod_l+0x76>
 8019726:	9f08      	ldr	r7, [sp, #32]
 8019728:	210a      	movs	r1, #10
 801972a:	fb01 2107 	mla	r1, r1, r7, r2
 801972e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019732:	9208      	str	r2, [sp, #32]
 8019734:	e7b5      	b.n	80196a2 <_strtod_l+0x2ba>
 8019736:	2a6e      	cmp	r2, #110	; 0x6e
 8019738:	e7d9      	b.n	80196ee <_strtod_l+0x306>
 801973a:	498b      	ldr	r1, [pc, #556]	; (8019968 <_strtod_l+0x580>)
 801973c:	a815      	add	r0, sp, #84	; 0x54
 801973e:	f001 f9f3 	bl	801ab28 <__match>
 8019742:	2800      	cmp	r0, #0
 8019744:	f43f aea8 	beq.w	8019498 <_strtod_l+0xb0>
 8019748:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801974a:	4988      	ldr	r1, [pc, #544]	; (801996c <_strtod_l+0x584>)
 801974c:	3b01      	subs	r3, #1
 801974e:	a815      	add	r0, sp, #84	; 0x54
 8019750:	9315      	str	r3, [sp, #84]	; 0x54
 8019752:	f001 f9e9 	bl	801ab28 <__match>
 8019756:	b910      	cbnz	r0, 801975e <_strtod_l+0x376>
 8019758:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801975a:	3301      	adds	r3, #1
 801975c:	9315      	str	r3, [sp, #84]	; 0x54
 801975e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801997c <_strtod_l+0x594>
 8019762:	f04f 0800 	mov.w	r8, #0
 8019766:	e67a      	b.n	801945e <_strtod_l+0x76>
 8019768:	4881      	ldr	r0, [pc, #516]	; (8019970 <_strtod_l+0x588>)
 801976a:	f000 fef9 	bl	801a560 <nan>
 801976e:	ec59 8b10 	vmov	r8, r9, d0
 8019772:	e674      	b.n	801945e <_strtod_l+0x76>
 8019774:	9b05      	ldr	r3, [sp, #20]
 8019776:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019778:	1afb      	subs	r3, r7, r3
 801977a:	f1bb 0f00 	cmp.w	fp, #0
 801977e:	bf08      	it	eq
 8019780:	46b3      	moveq	fp, r6
 8019782:	2e10      	cmp	r6, #16
 8019784:	9308      	str	r3, [sp, #32]
 8019786:	4635      	mov	r5, r6
 8019788:	bfa8      	it	ge
 801978a:	2510      	movge	r5, #16
 801978c:	f7e6 fee2 	bl	8000554 <__aeabi_ui2d>
 8019790:	2e09      	cmp	r6, #9
 8019792:	4680      	mov	r8, r0
 8019794:	4689      	mov	r9, r1
 8019796:	dd13      	ble.n	80197c0 <_strtod_l+0x3d8>
 8019798:	4b76      	ldr	r3, [pc, #472]	; (8019974 <_strtod_l+0x58c>)
 801979a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801979e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80197a2:	f7e6 ff51 	bl	8000648 <__aeabi_dmul>
 80197a6:	4680      	mov	r8, r0
 80197a8:	4650      	mov	r0, sl
 80197aa:	4689      	mov	r9, r1
 80197ac:	f7e6 fed2 	bl	8000554 <__aeabi_ui2d>
 80197b0:	4602      	mov	r2, r0
 80197b2:	460b      	mov	r3, r1
 80197b4:	4640      	mov	r0, r8
 80197b6:	4649      	mov	r1, r9
 80197b8:	f7e6 fd90 	bl	80002dc <__adddf3>
 80197bc:	4680      	mov	r8, r0
 80197be:	4689      	mov	r9, r1
 80197c0:	2e0f      	cmp	r6, #15
 80197c2:	dc38      	bgt.n	8019836 <_strtod_l+0x44e>
 80197c4:	9b08      	ldr	r3, [sp, #32]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	f43f ae49 	beq.w	801945e <_strtod_l+0x76>
 80197cc:	dd24      	ble.n	8019818 <_strtod_l+0x430>
 80197ce:	2b16      	cmp	r3, #22
 80197d0:	dc0b      	bgt.n	80197ea <_strtod_l+0x402>
 80197d2:	4968      	ldr	r1, [pc, #416]	; (8019974 <_strtod_l+0x58c>)
 80197d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80197d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197dc:	4642      	mov	r2, r8
 80197de:	464b      	mov	r3, r9
 80197e0:	f7e6 ff32 	bl	8000648 <__aeabi_dmul>
 80197e4:	4680      	mov	r8, r0
 80197e6:	4689      	mov	r9, r1
 80197e8:	e639      	b.n	801945e <_strtod_l+0x76>
 80197ea:	9a08      	ldr	r2, [sp, #32]
 80197ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80197f0:	4293      	cmp	r3, r2
 80197f2:	db20      	blt.n	8019836 <_strtod_l+0x44e>
 80197f4:	4c5f      	ldr	r4, [pc, #380]	; (8019974 <_strtod_l+0x58c>)
 80197f6:	f1c6 060f 	rsb	r6, r6, #15
 80197fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80197fe:	4642      	mov	r2, r8
 8019800:	464b      	mov	r3, r9
 8019802:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019806:	f7e6 ff1f 	bl	8000648 <__aeabi_dmul>
 801980a:	9b08      	ldr	r3, [sp, #32]
 801980c:	1b9e      	subs	r6, r3, r6
 801980e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8019812:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019816:	e7e3      	b.n	80197e0 <_strtod_l+0x3f8>
 8019818:	9b08      	ldr	r3, [sp, #32]
 801981a:	3316      	adds	r3, #22
 801981c:	db0b      	blt.n	8019836 <_strtod_l+0x44e>
 801981e:	9b05      	ldr	r3, [sp, #20]
 8019820:	1bdf      	subs	r7, r3, r7
 8019822:	4b54      	ldr	r3, [pc, #336]	; (8019974 <_strtod_l+0x58c>)
 8019824:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8019828:	e9d7 2300 	ldrd	r2, r3, [r7]
 801982c:	4640      	mov	r0, r8
 801982e:	4649      	mov	r1, r9
 8019830:	f7e7 f834 	bl	800089c <__aeabi_ddiv>
 8019834:	e7d6      	b.n	80197e4 <_strtod_l+0x3fc>
 8019836:	9b08      	ldr	r3, [sp, #32]
 8019838:	1b75      	subs	r5, r6, r5
 801983a:	441d      	add	r5, r3
 801983c:	2d00      	cmp	r5, #0
 801983e:	dd70      	ble.n	8019922 <_strtod_l+0x53a>
 8019840:	f015 030f 	ands.w	r3, r5, #15
 8019844:	d00a      	beq.n	801985c <_strtod_l+0x474>
 8019846:	494b      	ldr	r1, [pc, #300]	; (8019974 <_strtod_l+0x58c>)
 8019848:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801984c:	4642      	mov	r2, r8
 801984e:	464b      	mov	r3, r9
 8019850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019854:	f7e6 fef8 	bl	8000648 <__aeabi_dmul>
 8019858:	4680      	mov	r8, r0
 801985a:	4689      	mov	r9, r1
 801985c:	f035 050f 	bics.w	r5, r5, #15
 8019860:	d04d      	beq.n	80198fe <_strtod_l+0x516>
 8019862:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8019866:	dd22      	ble.n	80198ae <_strtod_l+0x4c6>
 8019868:	2500      	movs	r5, #0
 801986a:	46ab      	mov	fp, r5
 801986c:	9509      	str	r5, [sp, #36]	; 0x24
 801986e:	9505      	str	r5, [sp, #20]
 8019870:	2322      	movs	r3, #34	; 0x22
 8019872:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801997c <_strtod_l+0x594>
 8019876:	6023      	str	r3, [r4, #0]
 8019878:	f04f 0800 	mov.w	r8, #0
 801987c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801987e:	2b00      	cmp	r3, #0
 8019880:	f43f aded 	beq.w	801945e <_strtod_l+0x76>
 8019884:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019886:	4620      	mov	r0, r4
 8019888:	f7ff f924 	bl	8018ad4 <_Bfree>
 801988c:	9905      	ldr	r1, [sp, #20]
 801988e:	4620      	mov	r0, r4
 8019890:	f7ff f920 	bl	8018ad4 <_Bfree>
 8019894:	4659      	mov	r1, fp
 8019896:	4620      	mov	r0, r4
 8019898:	f7ff f91c 	bl	8018ad4 <_Bfree>
 801989c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801989e:	4620      	mov	r0, r4
 80198a0:	f7ff f918 	bl	8018ad4 <_Bfree>
 80198a4:	4629      	mov	r1, r5
 80198a6:	4620      	mov	r0, r4
 80198a8:	f7ff f914 	bl	8018ad4 <_Bfree>
 80198ac:	e5d7      	b.n	801945e <_strtod_l+0x76>
 80198ae:	4b32      	ldr	r3, [pc, #200]	; (8019978 <_strtod_l+0x590>)
 80198b0:	9304      	str	r3, [sp, #16]
 80198b2:	2300      	movs	r3, #0
 80198b4:	112d      	asrs	r5, r5, #4
 80198b6:	4640      	mov	r0, r8
 80198b8:	4649      	mov	r1, r9
 80198ba:	469a      	mov	sl, r3
 80198bc:	2d01      	cmp	r5, #1
 80198be:	dc21      	bgt.n	8019904 <_strtod_l+0x51c>
 80198c0:	b10b      	cbz	r3, 80198c6 <_strtod_l+0x4de>
 80198c2:	4680      	mov	r8, r0
 80198c4:	4689      	mov	r9, r1
 80198c6:	492c      	ldr	r1, [pc, #176]	; (8019978 <_strtod_l+0x590>)
 80198c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80198cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80198d0:	4642      	mov	r2, r8
 80198d2:	464b      	mov	r3, r9
 80198d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80198d8:	f7e6 feb6 	bl	8000648 <__aeabi_dmul>
 80198dc:	4b27      	ldr	r3, [pc, #156]	; (801997c <_strtod_l+0x594>)
 80198de:	460a      	mov	r2, r1
 80198e0:	400b      	ands	r3, r1
 80198e2:	4927      	ldr	r1, [pc, #156]	; (8019980 <_strtod_l+0x598>)
 80198e4:	428b      	cmp	r3, r1
 80198e6:	4680      	mov	r8, r0
 80198e8:	d8be      	bhi.n	8019868 <_strtod_l+0x480>
 80198ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80198ee:	428b      	cmp	r3, r1
 80198f0:	bf86      	itte	hi
 80198f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8019984 <_strtod_l+0x59c>
 80198f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80198fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80198fe:	2300      	movs	r3, #0
 8019900:	9304      	str	r3, [sp, #16]
 8019902:	e07b      	b.n	80199fc <_strtod_l+0x614>
 8019904:	07ea      	lsls	r2, r5, #31
 8019906:	d505      	bpl.n	8019914 <_strtod_l+0x52c>
 8019908:	9b04      	ldr	r3, [sp, #16]
 801990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801990e:	f7e6 fe9b 	bl	8000648 <__aeabi_dmul>
 8019912:	2301      	movs	r3, #1
 8019914:	9a04      	ldr	r2, [sp, #16]
 8019916:	3208      	adds	r2, #8
 8019918:	f10a 0a01 	add.w	sl, sl, #1
 801991c:	106d      	asrs	r5, r5, #1
 801991e:	9204      	str	r2, [sp, #16]
 8019920:	e7cc      	b.n	80198bc <_strtod_l+0x4d4>
 8019922:	d0ec      	beq.n	80198fe <_strtod_l+0x516>
 8019924:	426d      	negs	r5, r5
 8019926:	f015 020f 	ands.w	r2, r5, #15
 801992a:	d00a      	beq.n	8019942 <_strtod_l+0x55a>
 801992c:	4b11      	ldr	r3, [pc, #68]	; (8019974 <_strtod_l+0x58c>)
 801992e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019932:	4640      	mov	r0, r8
 8019934:	4649      	mov	r1, r9
 8019936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801993a:	f7e6 ffaf 	bl	800089c <__aeabi_ddiv>
 801993e:	4680      	mov	r8, r0
 8019940:	4689      	mov	r9, r1
 8019942:	112d      	asrs	r5, r5, #4
 8019944:	d0db      	beq.n	80198fe <_strtod_l+0x516>
 8019946:	2d1f      	cmp	r5, #31
 8019948:	dd1e      	ble.n	8019988 <_strtod_l+0x5a0>
 801994a:	2500      	movs	r5, #0
 801994c:	46ab      	mov	fp, r5
 801994e:	9509      	str	r5, [sp, #36]	; 0x24
 8019950:	9505      	str	r5, [sp, #20]
 8019952:	2322      	movs	r3, #34	; 0x22
 8019954:	f04f 0800 	mov.w	r8, #0
 8019958:	f04f 0900 	mov.w	r9, #0
 801995c:	6023      	str	r3, [r4, #0]
 801995e:	e78d      	b.n	801987c <_strtod_l+0x494>
 8019960:	0801dfd5 	.word	0x0801dfd5
 8019964:	0801e1fc 	.word	0x0801e1fc
 8019968:	0801dfcd 	.word	0x0801dfcd
 801996c:	0801e004 	.word	0x0801e004
 8019970:	0801e38d 	.word	0x0801e38d
 8019974:	0801e110 	.word	0x0801e110
 8019978:	0801e0e8 	.word	0x0801e0e8
 801997c:	7ff00000 	.word	0x7ff00000
 8019980:	7ca00000 	.word	0x7ca00000
 8019984:	7fefffff 	.word	0x7fefffff
 8019988:	f015 0310 	ands.w	r3, r5, #16
 801998c:	bf18      	it	ne
 801998e:	236a      	movne	r3, #106	; 0x6a
 8019990:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8019d34 <_strtod_l+0x94c>
 8019994:	9304      	str	r3, [sp, #16]
 8019996:	4640      	mov	r0, r8
 8019998:	4649      	mov	r1, r9
 801999a:	2300      	movs	r3, #0
 801999c:	07ea      	lsls	r2, r5, #31
 801999e:	d504      	bpl.n	80199aa <_strtod_l+0x5c2>
 80199a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80199a4:	f7e6 fe50 	bl	8000648 <__aeabi_dmul>
 80199a8:	2301      	movs	r3, #1
 80199aa:	106d      	asrs	r5, r5, #1
 80199ac:	f10a 0a08 	add.w	sl, sl, #8
 80199b0:	d1f4      	bne.n	801999c <_strtod_l+0x5b4>
 80199b2:	b10b      	cbz	r3, 80199b8 <_strtod_l+0x5d0>
 80199b4:	4680      	mov	r8, r0
 80199b6:	4689      	mov	r9, r1
 80199b8:	9b04      	ldr	r3, [sp, #16]
 80199ba:	b1bb      	cbz	r3, 80199ec <_strtod_l+0x604>
 80199bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80199c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	4649      	mov	r1, r9
 80199c8:	dd10      	ble.n	80199ec <_strtod_l+0x604>
 80199ca:	2b1f      	cmp	r3, #31
 80199cc:	f340 811e 	ble.w	8019c0c <_strtod_l+0x824>
 80199d0:	2b34      	cmp	r3, #52	; 0x34
 80199d2:	bfde      	ittt	le
 80199d4:	f04f 33ff 	movle.w	r3, #4294967295
 80199d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80199dc:	4093      	lslle	r3, r2
 80199de:	f04f 0800 	mov.w	r8, #0
 80199e2:	bfcc      	ite	gt
 80199e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80199e8:	ea03 0901 	andle.w	r9, r3, r1
 80199ec:	2200      	movs	r2, #0
 80199ee:	2300      	movs	r3, #0
 80199f0:	4640      	mov	r0, r8
 80199f2:	4649      	mov	r1, r9
 80199f4:	f7e7 f890 	bl	8000b18 <__aeabi_dcmpeq>
 80199f8:	2800      	cmp	r0, #0
 80199fa:	d1a6      	bne.n	801994a <_strtod_l+0x562>
 80199fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199fe:	9300      	str	r3, [sp, #0]
 8019a00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019a02:	4633      	mov	r3, r6
 8019a04:	465a      	mov	r2, fp
 8019a06:	4620      	mov	r0, r4
 8019a08:	f7ff f8cc 	bl	8018ba4 <__s2b>
 8019a0c:	9009      	str	r0, [sp, #36]	; 0x24
 8019a0e:	2800      	cmp	r0, #0
 8019a10:	f43f af2a 	beq.w	8019868 <_strtod_l+0x480>
 8019a14:	9a08      	ldr	r2, [sp, #32]
 8019a16:	9b05      	ldr	r3, [sp, #20]
 8019a18:	2a00      	cmp	r2, #0
 8019a1a:	eba3 0307 	sub.w	r3, r3, r7
 8019a1e:	bfa8      	it	ge
 8019a20:	2300      	movge	r3, #0
 8019a22:	930c      	str	r3, [sp, #48]	; 0x30
 8019a24:	2500      	movs	r5, #0
 8019a26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019a2a:	9312      	str	r3, [sp, #72]	; 0x48
 8019a2c:	46ab      	mov	fp, r5
 8019a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a30:	4620      	mov	r0, r4
 8019a32:	6859      	ldr	r1, [r3, #4]
 8019a34:	f7ff f80e 	bl	8018a54 <_Balloc>
 8019a38:	9005      	str	r0, [sp, #20]
 8019a3a:	2800      	cmp	r0, #0
 8019a3c:	f43f af18 	beq.w	8019870 <_strtod_l+0x488>
 8019a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a42:	691a      	ldr	r2, [r3, #16]
 8019a44:	3202      	adds	r2, #2
 8019a46:	f103 010c 	add.w	r1, r3, #12
 8019a4a:	0092      	lsls	r2, r2, #2
 8019a4c:	300c      	adds	r0, #12
 8019a4e:	f7fe f870 	bl	8017b32 <memcpy>
 8019a52:	ec49 8b10 	vmov	d0, r8, r9
 8019a56:	aa18      	add	r2, sp, #96	; 0x60
 8019a58:	a917      	add	r1, sp, #92	; 0x5c
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	f7ff fbd6 	bl	801920c <__d2b>
 8019a60:	ec49 8b18 	vmov	d8, r8, r9
 8019a64:	9016      	str	r0, [sp, #88]	; 0x58
 8019a66:	2800      	cmp	r0, #0
 8019a68:	f43f af02 	beq.w	8019870 <_strtod_l+0x488>
 8019a6c:	2101      	movs	r1, #1
 8019a6e:	4620      	mov	r0, r4
 8019a70:	f7ff f930 	bl	8018cd4 <__i2b>
 8019a74:	4683      	mov	fp, r0
 8019a76:	2800      	cmp	r0, #0
 8019a78:	f43f aefa 	beq.w	8019870 <_strtod_l+0x488>
 8019a7c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8019a7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019a80:	2e00      	cmp	r6, #0
 8019a82:	bfab      	itete	ge
 8019a84:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8019a86:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8019a88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8019a8a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8019a8e:	bfac      	ite	ge
 8019a90:	eb06 0a03 	addge.w	sl, r6, r3
 8019a94:	1b9f      	sublt	r7, r3, r6
 8019a96:	9b04      	ldr	r3, [sp, #16]
 8019a98:	1af6      	subs	r6, r6, r3
 8019a9a:	4416      	add	r6, r2
 8019a9c:	4ba0      	ldr	r3, [pc, #640]	; (8019d20 <_strtod_l+0x938>)
 8019a9e:	3e01      	subs	r6, #1
 8019aa0:	429e      	cmp	r6, r3
 8019aa2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019aa6:	f280 80c4 	bge.w	8019c32 <_strtod_l+0x84a>
 8019aaa:	1b9b      	subs	r3, r3, r6
 8019aac:	2b1f      	cmp	r3, #31
 8019aae:	eba2 0203 	sub.w	r2, r2, r3
 8019ab2:	f04f 0101 	mov.w	r1, #1
 8019ab6:	f300 80b0 	bgt.w	8019c1a <_strtod_l+0x832>
 8019aba:	fa01 f303 	lsl.w	r3, r1, r3
 8019abe:	930e      	str	r3, [sp, #56]	; 0x38
 8019ac0:	2300      	movs	r3, #0
 8019ac2:	930d      	str	r3, [sp, #52]	; 0x34
 8019ac4:	eb0a 0602 	add.w	r6, sl, r2
 8019ac8:	9b04      	ldr	r3, [sp, #16]
 8019aca:	45b2      	cmp	sl, r6
 8019acc:	4417      	add	r7, r2
 8019ace:	441f      	add	r7, r3
 8019ad0:	4653      	mov	r3, sl
 8019ad2:	bfa8      	it	ge
 8019ad4:	4633      	movge	r3, r6
 8019ad6:	42bb      	cmp	r3, r7
 8019ad8:	bfa8      	it	ge
 8019ada:	463b      	movge	r3, r7
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	bfc2      	ittt	gt
 8019ae0:	1af6      	subgt	r6, r6, r3
 8019ae2:	1aff      	subgt	r7, r7, r3
 8019ae4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8019ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	dd17      	ble.n	8019b1e <_strtod_l+0x736>
 8019aee:	4659      	mov	r1, fp
 8019af0:	461a      	mov	r2, r3
 8019af2:	4620      	mov	r0, r4
 8019af4:	f7ff f9ae 	bl	8018e54 <__pow5mult>
 8019af8:	4683      	mov	fp, r0
 8019afa:	2800      	cmp	r0, #0
 8019afc:	f43f aeb8 	beq.w	8019870 <_strtod_l+0x488>
 8019b00:	4601      	mov	r1, r0
 8019b02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019b04:	4620      	mov	r0, r4
 8019b06:	f7ff f8fb 	bl	8018d00 <__multiply>
 8019b0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8019b0c:	2800      	cmp	r0, #0
 8019b0e:	f43f aeaf 	beq.w	8019870 <_strtod_l+0x488>
 8019b12:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019b14:	4620      	mov	r0, r4
 8019b16:	f7fe ffdd 	bl	8018ad4 <_Bfree>
 8019b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b1c:	9316      	str	r3, [sp, #88]	; 0x58
 8019b1e:	2e00      	cmp	r6, #0
 8019b20:	f300 808c 	bgt.w	8019c3c <_strtod_l+0x854>
 8019b24:	9b08      	ldr	r3, [sp, #32]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	dd08      	ble.n	8019b3c <_strtod_l+0x754>
 8019b2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019b2c:	9905      	ldr	r1, [sp, #20]
 8019b2e:	4620      	mov	r0, r4
 8019b30:	f7ff f990 	bl	8018e54 <__pow5mult>
 8019b34:	9005      	str	r0, [sp, #20]
 8019b36:	2800      	cmp	r0, #0
 8019b38:	f43f ae9a 	beq.w	8019870 <_strtod_l+0x488>
 8019b3c:	2f00      	cmp	r7, #0
 8019b3e:	dd08      	ble.n	8019b52 <_strtod_l+0x76a>
 8019b40:	9905      	ldr	r1, [sp, #20]
 8019b42:	463a      	mov	r2, r7
 8019b44:	4620      	mov	r0, r4
 8019b46:	f7ff f9df 	bl	8018f08 <__lshift>
 8019b4a:	9005      	str	r0, [sp, #20]
 8019b4c:	2800      	cmp	r0, #0
 8019b4e:	f43f ae8f 	beq.w	8019870 <_strtod_l+0x488>
 8019b52:	f1ba 0f00 	cmp.w	sl, #0
 8019b56:	dd08      	ble.n	8019b6a <_strtod_l+0x782>
 8019b58:	4659      	mov	r1, fp
 8019b5a:	4652      	mov	r2, sl
 8019b5c:	4620      	mov	r0, r4
 8019b5e:	f7ff f9d3 	bl	8018f08 <__lshift>
 8019b62:	4683      	mov	fp, r0
 8019b64:	2800      	cmp	r0, #0
 8019b66:	f43f ae83 	beq.w	8019870 <_strtod_l+0x488>
 8019b6a:	9a05      	ldr	r2, [sp, #20]
 8019b6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019b6e:	4620      	mov	r0, r4
 8019b70:	f7ff fa52 	bl	8019018 <__mdiff>
 8019b74:	4605      	mov	r5, r0
 8019b76:	2800      	cmp	r0, #0
 8019b78:	f43f ae7a 	beq.w	8019870 <_strtod_l+0x488>
 8019b7c:	68c3      	ldr	r3, [r0, #12]
 8019b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b80:	2300      	movs	r3, #0
 8019b82:	60c3      	str	r3, [r0, #12]
 8019b84:	4659      	mov	r1, fp
 8019b86:	f7ff fa2b 	bl	8018fe0 <__mcmp>
 8019b8a:	2800      	cmp	r0, #0
 8019b8c:	da60      	bge.n	8019c50 <_strtod_l+0x868>
 8019b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b90:	ea53 0308 	orrs.w	r3, r3, r8
 8019b94:	f040 8084 	bne.w	8019ca0 <_strtod_l+0x8b8>
 8019b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d17f      	bne.n	8019ca0 <_strtod_l+0x8b8>
 8019ba0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019ba4:	0d1b      	lsrs	r3, r3, #20
 8019ba6:	051b      	lsls	r3, r3, #20
 8019ba8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019bac:	d978      	bls.n	8019ca0 <_strtod_l+0x8b8>
 8019bae:	696b      	ldr	r3, [r5, #20]
 8019bb0:	b913      	cbnz	r3, 8019bb8 <_strtod_l+0x7d0>
 8019bb2:	692b      	ldr	r3, [r5, #16]
 8019bb4:	2b01      	cmp	r3, #1
 8019bb6:	dd73      	ble.n	8019ca0 <_strtod_l+0x8b8>
 8019bb8:	4629      	mov	r1, r5
 8019bba:	2201      	movs	r2, #1
 8019bbc:	4620      	mov	r0, r4
 8019bbe:	f7ff f9a3 	bl	8018f08 <__lshift>
 8019bc2:	4659      	mov	r1, fp
 8019bc4:	4605      	mov	r5, r0
 8019bc6:	f7ff fa0b 	bl	8018fe0 <__mcmp>
 8019bca:	2800      	cmp	r0, #0
 8019bcc:	dd68      	ble.n	8019ca0 <_strtod_l+0x8b8>
 8019bce:	9904      	ldr	r1, [sp, #16]
 8019bd0:	4a54      	ldr	r2, [pc, #336]	; (8019d24 <_strtod_l+0x93c>)
 8019bd2:	464b      	mov	r3, r9
 8019bd4:	2900      	cmp	r1, #0
 8019bd6:	f000 8084 	beq.w	8019ce2 <_strtod_l+0x8fa>
 8019bda:	ea02 0109 	and.w	r1, r2, r9
 8019bde:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019be2:	dc7e      	bgt.n	8019ce2 <_strtod_l+0x8fa>
 8019be4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019be8:	f77f aeb3 	ble.w	8019952 <_strtod_l+0x56a>
 8019bec:	4b4e      	ldr	r3, [pc, #312]	; (8019d28 <_strtod_l+0x940>)
 8019bee:	4640      	mov	r0, r8
 8019bf0:	4649      	mov	r1, r9
 8019bf2:	2200      	movs	r2, #0
 8019bf4:	f7e6 fd28 	bl	8000648 <__aeabi_dmul>
 8019bf8:	4b4a      	ldr	r3, [pc, #296]	; (8019d24 <_strtod_l+0x93c>)
 8019bfa:	400b      	ands	r3, r1
 8019bfc:	4680      	mov	r8, r0
 8019bfe:	4689      	mov	r9, r1
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	f47f ae3f 	bne.w	8019884 <_strtod_l+0x49c>
 8019c06:	2322      	movs	r3, #34	; 0x22
 8019c08:	6023      	str	r3, [r4, #0]
 8019c0a:	e63b      	b.n	8019884 <_strtod_l+0x49c>
 8019c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8019c10:	fa02 f303 	lsl.w	r3, r2, r3
 8019c14:	ea03 0808 	and.w	r8, r3, r8
 8019c18:	e6e8      	b.n	80199ec <_strtod_l+0x604>
 8019c1a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8019c1e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8019c22:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8019c26:	36e2      	adds	r6, #226	; 0xe2
 8019c28:	fa01 f306 	lsl.w	r3, r1, r6
 8019c2c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8019c30:	e748      	b.n	8019ac4 <_strtod_l+0x6dc>
 8019c32:	2100      	movs	r1, #0
 8019c34:	2301      	movs	r3, #1
 8019c36:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8019c3a:	e743      	b.n	8019ac4 <_strtod_l+0x6dc>
 8019c3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019c3e:	4632      	mov	r2, r6
 8019c40:	4620      	mov	r0, r4
 8019c42:	f7ff f961 	bl	8018f08 <__lshift>
 8019c46:	9016      	str	r0, [sp, #88]	; 0x58
 8019c48:	2800      	cmp	r0, #0
 8019c4a:	f47f af6b 	bne.w	8019b24 <_strtod_l+0x73c>
 8019c4e:	e60f      	b.n	8019870 <_strtod_l+0x488>
 8019c50:	46ca      	mov	sl, r9
 8019c52:	d171      	bne.n	8019d38 <_strtod_l+0x950>
 8019c54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019c56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019c5a:	b352      	cbz	r2, 8019cb2 <_strtod_l+0x8ca>
 8019c5c:	4a33      	ldr	r2, [pc, #204]	; (8019d2c <_strtod_l+0x944>)
 8019c5e:	4293      	cmp	r3, r2
 8019c60:	d12a      	bne.n	8019cb8 <_strtod_l+0x8d0>
 8019c62:	9b04      	ldr	r3, [sp, #16]
 8019c64:	4641      	mov	r1, r8
 8019c66:	b1fb      	cbz	r3, 8019ca8 <_strtod_l+0x8c0>
 8019c68:	4b2e      	ldr	r3, [pc, #184]	; (8019d24 <_strtod_l+0x93c>)
 8019c6a:	ea09 0303 	and.w	r3, r9, r3
 8019c6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019c72:	f04f 32ff 	mov.w	r2, #4294967295
 8019c76:	d81a      	bhi.n	8019cae <_strtod_l+0x8c6>
 8019c78:	0d1b      	lsrs	r3, r3, #20
 8019c7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8019c82:	4299      	cmp	r1, r3
 8019c84:	d118      	bne.n	8019cb8 <_strtod_l+0x8d0>
 8019c86:	4b2a      	ldr	r3, [pc, #168]	; (8019d30 <_strtod_l+0x948>)
 8019c88:	459a      	cmp	sl, r3
 8019c8a:	d102      	bne.n	8019c92 <_strtod_l+0x8aa>
 8019c8c:	3101      	adds	r1, #1
 8019c8e:	f43f adef 	beq.w	8019870 <_strtod_l+0x488>
 8019c92:	4b24      	ldr	r3, [pc, #144]	; (8019d24 <_strtod_l+0x93c>)
 8019c94:	ea0a 0303 	and.w	r3, sl, r3
 8019c98:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8019c9c:	f04f 0800 	mov.w	r8, #0
 8019ca0:	9b04      	ldr	r3, [sp, #16]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d1a2      	bne.n	8019bec <_strtod_l+0x804>
 8019ca6:	e5ed      	b.n	8019884 <_strtod_l+0x49c>
 8019ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8019cac:	e7e9      	b.n	8019c82 <_strtod_l+0x89a>
 8019cae:	4613      	mov	r3, r2
 8019cb0:	e7e7      	b.n	8019c82 <_strtod_l+0x89a>
 8019cb2:	ea53 0308 	orrs.w	r3, r3, r8
 8019cb6:	d08a      	beq.n	8019bce <_strtod_l+0x7e6>
 8019cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019cba:	b1e3      	cbz	r3, 8019cf6 <_strtod_l+0x90e>
 8019cbc:	ea13 0f0a 	tst.w	r3, sl
 8019cc0:	d0ee      	beq.n	8019ca0 <_strtod_l+0x8b8>
 8019cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019cc4:	9a04      	ldr	r2, [sp, #16]
 8019cc6:	4640      	mov	r0, r8
 8019cc8:	4649      	mov	r1, r9
 8019cca:	b1c3      	cbz	r3, 8019cfe <_strtod_l+0x916>
 8019ccc:	f7ff fb6f 	bl	80193ae <sulp>
 8019cd0:	4602      	mov	r2, r0
 8019cd2:	460b      	mov	r3, r1
 8019cd4:	ec51 0b18 	vmov	r0, r1, d8
 8019cd8:	f7e6 fb00 	bl	80002dc <__adddf3>
 8019cdc:	4680      	mov	r8, r0
 8019cde:	4689      	mov	r9, r1
 8019ce0:	e7de      	b.n	8019ca0 <_strtod_l+0x8b8>
 8019ce2:	4013      	ands	r3, r2
 8019ce4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8019ce8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8019cec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019cf0:	f04f 38ff 	mov.w	r8, #4294967295
 8019cf4:	e7d4      	b.n	8019ca0 <_strtod_l+0x8b8>
 8019cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019cf8:	ea13 0f08 	tst.w	r3, r8
 8019cfc:	e7e0      	b.n	8019cc0 <_strtod_l+0x8d8>
 8019cfe:	f7ff fb56 	bl	80193ae <sulp>
 8019d02:	4602      	mov	r2, r0
 8019d04:	460b      	mov	r3, r1
 8019d06:	ec51 0b18 	vmov	r0, r1, d8
 8019d0a:	f7e6 fae5 	bl	80002d8 <__aeabi_dsub>
 8019d0e:	2200      	movs	r2, #0
 8019d10:	2300      	movs	r3, #0
 8019d12:	4680      	mov	r8, r0
 8019d14:	4689      	mov	r9, r1
 8019d16:	f7e6 feff 	bl	8000b18 <__aeabi_dcmpeq>
 8019d1a:	2800      	cmp	r0, #0
 8019d1c:	d0c0      	beq.n	8019ca0 <_strtod_l+0x8b8>
 8019d1e:	e618      	b.n	8019952 <_strtod_l+0x56a>
 8019d20:	fffffc02 	.word	0xfffffc02
 8019d24:	7ff00000 	.word	0x7ff00000
 8019d28:	39500000 	.word	0x39500000
 8019d2c:	000fffff 	.word	0x000fffff
 8019d30:	7fefffff 	.word	0x7fefffff
 8019d34:	0801e210 	.word	0x0801e210
 8019d38:	4659      	mov	r1, fp
 8019d3a:	4628      	mov	r0, r5
 8019d3c:	f7ff fac0 	bl	80192c0 <__ratio>
 8019d40:	ec57 6b10 	vmov	r6, r7, d0
 8019d44:	ee10 0a10 	vmov	r0, s0
 8019d48:	2200      	movs	r2, #0
 8019d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019d4e:	4639      	mov	r1, r7
 8019d50:	f7e6 fef6 	bl	8000b40 <__aeabi_dcmple>
 8019d54:	2800      	cmp	r0, #0
 8019d56:	d071      	beq.n	8019e3c <_strtod_l+0xa54>
 8019d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d17c      	bne.n	8019e58 <_strtod_l+0xa70>
 8019d5e:	f1b8 0f00 	cmp.w	r8, #0
 8019d62:	d15a      	bne.n	8019e1a <_strtod_l+0xa32>
 8019d64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d15d      	bne.n	8019e28 <_strtod_l+0xa40>
 8019d6c:	4b90      	ldr	r3, [pc, #576]	; (8019fb0 <_strtod_l+0xbc8>)
 8019d6e:	2200      	movs	r2, #0
 8019d70:	4630      	mov	r0, r6
 8019d72:	4639      	mov	r1, r7
 8019d74:	f7e6 feda 	bl	8000b2c <__aeabi_dcmplt>
 8019d78:	2800      	cmp	r0, #0
 8019d7a:	d15c      	bne.n	8019e36 <_strtod_l+0xa4e>
 8019d7c:	4630      	mov	r0, r6
 8019d7e:	4639      	mov	r1, r7
 8019d80:	4b8c      	ldr	r3, [pc, #560]	; (8019fb4 <_strtod_l+0xbcc>)
 8019d82:	2200      	movs	r2, #0
 8019d84:	f7e6 fc60 	bl	8000648 <__aeabi_dmul>
 8019d88:	4606      	mov	r6, r0
 8019d8a:	460f      	mov	r7, r1
 8019d8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8019d90:	9606      	str	r6, [sp, #24]
 8019d92:	9307      	str	r3, [sp, #28]
 8019d94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019d98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019d9c:	4b86      	ldr	r3, [pc, #536]	; (8019fb8 <_strtod_l+0xbd0>)
 8019d9e:	ea0a 0303 	and.w	r3, sl, r3
 8019da2:	930d      	str	r3, [sp, #52]	; 0x34
 8019da4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019da6:	4b85      	ldr	r3, [pc, #532]	; (8019fbc <_strtod_l+0xbd4>)
 8019da8:	429a      	cmp	r2, r3
 8019daa:	f040 8090 	bne.w	8019ece <_strtod_l+0xae6>
 8019dae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8019db2:	ec49 8b10 	vmov	d0, r8, r9
 8019db6:	f7ff f9b9 	bl	801912c <__ulp>
 8019dba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019dbe:	ec51 0b10 	vmov	r0, r1, d0
 8019dc2:	f7e6 fc41 	bl	8000648 <__aeabi_dmul>
 8019dc6:	4642      	mov	r2, r8
 8019dc8:	464b      	mov	r3, r9
 8019dca:	f7e6 fa87 	bl	80002dc <__adddf3>
 8019dce:	460b      	mov	r3, r1
 8019dd0:	4979      	ldr	r1, [pc, #484]	; (8019fb8 <_strtod_l+0xbd0>)
 8019dd2:	4a7b      	ldr	r2, [pc, #492]	; (8019fc0 <_strtod_l+0xbd8>)
 8019dd4:	4019      	ands	r1, r3
 8019dd6:	4291      	cmp	r1, r2
 8019dd8:	4680      	mov	r8, r0
 8019dda:	d944      	bls.n	8019e66 <_strtod_l+0xa7e>
 8019ddc:	ee18 2a90 	vmov	r2, s17
 8019de0:	4b78      	ldr	r3, [pc, #480]	; (8019fc4 <_strtod_l+0xbdc>)
 8019de2:	429a      	cmp	r2, r3
 8019de4:	d104      	bne.n	8019df0 <_strtod_l+0xa08>
 8019de6:	ee18 3a10 	vmov	r3, s16
 8019dea:	3301      	adds	r3, #1
 8019dec:	f43f ad40 	beq.w	8019870 <_strtod_l+0x488>
 8019df0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8019fc4 <_strtod_l+0xbdc>
 8019df4:	f04f 38ff 	mov.w	r8, #4294967295
 8019df8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019dfa:	4620      	mov	r0, r4
 8019dfc:	f7fe fe6a 	bl	8018ad4 <_Bfree>
 8019e00:	9905      	ldr	r1, [sp, #20]
 8019e02:	4620      	mov	r0, r4
 8019e04:	f7fe fe66 	bl	8018ad4 <_Bfree>
 8019e08:	4659      	mov	r1, fp
 8019e0a:	4620      	mov	r0, r4
 8019e0c:	f7fe fe62 	bl	8018ad4 <_Bfree>
 8019e10:	4629      	mov	r1, r5
 8019e12:	4620      	mov	r0, r4
 8019e14:	f7fe fe5e 	bl	8018ad4 <_Bfree>
 8019e18:	e609      	b.n	8019a2e <_strtod_l+0x646>
 8019e1a:	f1b8 0f01 	cmp.w	r8, #1
 8019e1e:	d103      	bne.n	8019e28 <_strtod_l+0xa40>
 8019e20:	f1b9 0f00 	cmp.w	r9, #0
 8019e24:	f43f ad95 	beq.w	8019952 <_strtod_l+0x56a>
 8019e28:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8019f80 <_strtod_l+0xb98>
 8019e2c:	4f60      	ldr	r7, [pc, #384]	; (8019fb0 <_strtod_l+0xbc8>)
 8019e2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019e32:	2600      	movs	r6, #0
 8019e34:	e7ae      	b.n	8019d94 <_strtod_l+0x9ac>
 8019e36:	4f5f      	ldr	r7, [pc, #380]	; (8019fb4 <_strtod_l+0xbcc>)
 8019e38:	2600      	movs	r6, #0
 8019e3a:	e7a7      	b.n	8019d8c <_strtod_l+0x9a4>
 8019e3c:	4b5d      	ldr	r3, [pc, #372]	; (8019fb4 <_strtod_l+0xbcc>)
 8019e3e:	4630      	mov	r0, r6
 8019e40:	4639      	mov	r1, r7
 8019e42:	2200      	movs	r2, #0
 8019e44:	f7e6 fc00 	bl	8000648 <__aeabi_dmul>
 8019e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e4a:	4606      	mov	r6, r0
 8019e4c:	460f      	mov	r7, r1
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d09c      	beq.n	8019d8c <_strtod_l+0x9a4>
 8019e52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8019e56:	e79d      	b.n	8019d94 <_strtod_l+0x9ac>
 8019e58:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8019f88 <_strtod_l+0xba0>
 8019e5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019e60:	ec57 6b17 	vmov	r6, r7, d7
 8019e64:	e796      	b.n	8019d94 <_strtod_l+0x9ac>
 8019e66:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8019e6a:	9b04      	ldr	r3, [sp, #16]
 8019e6c:	46ca      	mov	sl, r9
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d1c2      	bne.n	8019df8 <_strtod_l+0xa10>
 8019e72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019e76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019e78:	0d1b      	lsrs	r3, r3, #20
 8019e7a:	051b      	lsls	r3, r3, #20
 8019e7c:	429a      	cmp	r2, r3
 8019e7e:	d1bb      	bne.n	8019df8 <_strtod_l+0xa10>
 8019e80:	4630      	mov	r0, r6
 8019e82:	4639      	mov	r1, r7
 8019e84:	f7e6 ff40 	bl	8000d08 <__aeabi_d2lz>
 8019e88:	f7e6 fbb0 	bl	80005ec <__aeabi_l2d>
 8019e8c:	4602      	mov	r2, r0
 8019e8e:	460b      	mov	r3, r1
 8019e90:	4630      	mov	r0, r6
 8019e92:	4639      	mov	r1, r7
 8019e94:	f7e6 fa20 	bl	80002d8 <__aeabi_dsub>
 8019e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019e9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019e9e:	ea43 0308 	orr.w	r3, r3, r8
 8019ea2:	4313      	orrs	r3, r2
 8019ea4:	4606      	mov	r6, r0
 8019ea6:	460f      	mov	r7, r1
 8019ea8:	d054      	beq.n	8019f54 <_strtod_l+0xb6c>
 8019eaa:	a339      	add	r3, pc, #228	; (adr r3, 8019f90 <_strtod_l+0xba8>)
 8019eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eb0:	f7e6 fe3c 	bl	8000b2c <__aeabi_dcmplt>
 8019eb4:	2800      	cmp	r0, #0
 8019eb6:	f47f ace5 	bne.w	8019884 <_strtod_l+0x49c>
 8019eba:	a337      	add	r3, pc, #220	; (adr r3, 8019f98 <_strtod_l+0xbb0>)
 8019ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ec0:	4630      	mov	r0, r6
 8019ec2:	4639      	mov	r1, r7
 8019ec4:	f7e6 fe50 	bl	8000b68 <__aeabi_dcmpgt>
 8019ec8:	2800      	cmp	r0, #0
 8019eca:	d095      	beq.n	8019df8 <_strtod_l+0xa10>
 8019ecc:	e4da      	b.n	8019884 <_strtod_l+0x49c>
 8019ece:	9b04      	ldr	r3, [sp, #16]
 8019ed0:	b333      	cbz	r3, 8019f20 <_strtod_l+0xb38>
 8019ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ed4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019ed8:	d822      	bhi.n	8019f20 <_strtod_l+0xb38>
 8019eda:	a331      	add	r3, pc, #196	; (adr r3, 8019fa0 <_strtod_l+0xbb8>)
 8019edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ee0:	4630      	mov	r0, r6
 8019ee2:	4639      	mov	r1, r7
 8019ee4:	f7e6 fe2c 	bl	8000b40 <__aeabi_dcmple>
 8019ee8:	b1a0      	cbz	r0, 8019f14 <_strtod_l+0xb2c>
 8019eea:	4639      	mov	r1, r7
 8019eec:	4630      	mov	r0, r6
 8019eee:	f7e6 fe83 	bl	8000bf8 <__aeabi_d2uiz>
 8019ef2:	2801      	cmp	r0, #1
 8019ef4:	bf38      	it	cc
 8019ef6:	2001      	movcc	r0, #1
 8019ef8:	f7e6 fb2c 	bl	8000554 <__aeabi_ui2d>
 8019efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019efe:	4606      	mov	r6, r0
 8019f00:	460f      	mov	r7, r1
 8019f02:	bb23      	cbnz	r3, 8019f4e <_strtod_l+0xb66>
 8019f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019f08:	9010      	str	r0, [sp, #64]	; 0x40
 8019f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8019f0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019f10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019f18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8019f1c:	1a9b      	subs	r3, r3, r2
 8019f1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019f20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019f24:	eeb0 0a48 	vmov.f32	s0, s16
 8019f28:	eef0 0a68 	vmov.f32	s1, s17
 8019f2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019f30:	f7ff f8fc 	bl	801912c <__ulp>
 8019f34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019f38:	ec53 2b10 	vmov	r2, r3, d0
 8019f3c:	f7e6 fb84 	bl	8000648 <__aeabi_dmul>
 8019f40:	ec53 2b18 	vmov	r2, r3, d8
 8019f44:	f7e6 f9ca 	bl	80002dc <__adddf3>
 8019f48:	4680      	mov	r8, r0
 8019f4a:	4689      	mov	r9, r1
 8019f4c:	e78d      	b.n	8019e6a <_strtod_l+0xa82>
 8019f4e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8019f52:	e7db      	b.n	8019f0c <_strtod_l+0xb24>
 8019f54:	a314      	add	r3, pc, #80	; (adr r3, 8019fa8 <_strtod_l+0xbc0>)
 8019f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f5a:	f7e6 fde7 	bl	8000b2c <__aeabi_dcmplt>
 8019f5e:	e7b3      	b.n	8019ec8 <_strtod_l+0xae0>
 8019f60:	2300      	movs	r3, #0
 8019f62:	930a      	str	r3, [sp, #40]	; 0x28
 8019f64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f68:	6013      	str	r3, [r2, #0]
 8019f6a:	f7ff ba7c 	b.w	8019466 <_strtod_l+0x7e>
 8019f6e:	2a65      	cmp	r2, #101	; 0x65
 8019f70:	f43f ab75 	beq.w	801965e <_strtod_l+0x276>
 8019f74:	2a45      	cmp	r2, #69	; 0x45
 8019f76:	f43f ab72 	beq.w	801965e <_strtod_l+0x276>
 8019f7a:	2301      	movs	r3, #1
 8019f7c:	f7ff bbaa 	b.w	80196d4 <_strtod_l+0x2ec>
 8019f80:	00000000 	.word	0x00000000
 8019f84:	bff00000 	.word	0xbff00000
 8019f88:	00000000 	.word	0x00000000
 8019f8c:	3ff00000 	.word	0x3ff00000
 8019f90:	94a03595 	.word	0x94a03595
 8019f94:	3fdfffff 	.word	0x3fdfffff
 8019f98:	35afe535 	.word	0x35afe535
 8019f9c:	3fe00000 	.word	0x3fe00000
 8019fa0:	ffc00000 	.word	0xffc00000
 8019fa4:	41dfffff 	.word	0x41dfffff
 8019fa8:	94a03595 	.word	0x94a03595
 8019fac:	3fcfffff 	.word	0x3fcfffff
 8019fb0:	3ff00000 	.word	0x3ff00000
 8019fb4:	3fe00000 	.word	0x3fe00000
 8019fb8:	7ff00000 	.word	0x7ff00000
 8019fbc:	7fe00000 	.word	0x7fe00000
 8019fc0:	7c9fffff 	.word	0x7c9fffff
 8019fc4:	7fefffff 	.word	0x7fefffff

08019fc8 <_strtod_r>:
 8019fc8:	4b01      	ldr	r3, [pc, #4]	; (8019fd0 <_strtod_r+0x8>)
 8019fca:	f7ff ba0d 	b.w	80193e8 <_strtod_l>
 8019fce:	bf00      	nop
 8019fd0:	200003f0 	.word	0x200003f0

08019fd4 <_strtol_l.constprop.0>:
 8019fd4:	2b01      	cmp	r3, #1
 8019fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fda:	d001      	beq.n	8019fe0 <_strtol_l.constprop.0+0xc>
 8019fdc:	2b24      	cmp	r3, #36	; 0x24
 8019fde:	d906      	bls.n	8019fee <_strtol_l.constprop.0+0x1a>
 8019fe0:	f7fd fd7a 	bl	8017ad8 <__errno>
 8019fe4:	2316      	movs	r3, #22
 8019fe6:	6003      	str	r3, [r0, #0]
 8019fe8:	2000      	movs	r0, #0
 8019fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a0d4 <_strtol_l.constprop.0+0x100>
 8019ff2:	460d      	mov	r5, r1
 8019ff4:	462e      	mov	r6, r5
 8019ff6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019ffa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8019ffe:	f017 0708 	ands.w	r7, r7, #8
 801a002:	d1f7      	bne.n	8019ff4 <_strtol_l.constprop.0+0x20>
 801a004:	2c2d      	cmp	r4, #45	; 0x2d
 801a006:	d132      	bne.n	801a06e <_strtol_l.constprop.0+0x9a>
 801a008:	782c      	ldrb	r4, [r5, #0]
 801a00a:	2701      	movs	r7, #1
 801a00c:	1cb5      	adds	r5, r6, #2
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d05b      	beq.n	801a0ca <_strtol_l.constprop.0+0xf6>
 801a012:	2b10      	cmp	r3, #16
 801a014:	d109      	bne.n	801a02a <_strtol_l.constprop.0+0x56>
 801a016:	2c30      	cmp	r4, #48	; 0x30
 801a018:	d107      	bne.n	801a02a <_strtol_l.constprop.0+0x56>
 801a01a:	782c      	ldrb	r4, [r5, #0]
 801a01c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a020:	2c58      	cmp	r4, #88	; 0x58
 801a022:	d14d      	bne.n	801a0c0 <_strtol_l.constprop.0+0xec>
 801a024:	786c      	ldrb	r4, [r5, #1]
 801a026:	2310      	movs	r3, #16
 801a028:	3502      	adds	r5, #2
 801a02a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a02e:	f108 38ff 	add.w	r8, r8, #4294967295
 801a032:	f04f 0e00 	mov.w	lr, #0
 801a036:	fbb8 f9f3 	udiv	r9, r8, r3
 801a03a:	4676      	mov	r6, lr
 801a03c:	fb03 8a19 	mls	sl, r3, r9, r8
 801a040:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a044:	f1bc 0f09 	cmp.w	ip, #9
 801a048:	d816      	bhi.n	801a078 <_strtol_l.constprop.0+0xa4>
 801a04a:	4664      	mov	r4, ip
 801a04c:	42a3      	cmp	r3, r4
 801a04e:	dd24      	ble.n	801a09a <_strtol_l.constprop.0+0xc6>
 801a050:	f1be 3fff 	cmp.w	lr, #4294967295
 801a054:	d008      	beq.n	801a068 <_strtol_l.constprop.0+0x94>
 801a056:	45b1      	cmp	r9, r6
 801a058:	d31c      	bcc.n	801a094 <_strtol_l.constprop.0+0xc0>
 801a05a:	d101      	bne.n	801a060 <_strtol_l.constprop.0+0x8c>
 801a05c:	45a2      	cmp	sl, r4
 801a05e:	db19      	blt.n	801a094 <_strtol_l.constprop.0+0xc0>
 801a060:	fb06 4603 	mla	r6, r6, r3, r4
 801a064:	f04f 0e01 	mov.w	lr, #1
 801a068:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a06c:	e7e8      	b.n	801a040 <_strtol_l.constprop.0+0x6c>
 801a06e:	2c2b      	cmp	r4, #43	; 0x2b
 801a070:	bf04      	itt	eq
 801a072:	782c      	ldrbeq	r4, [r5, #0]
 801a074:	1cb5      	addeq	r5, r6, #2
 801a076:	e7ca      	b.n	801a00e <_strtol_l.constprop.0+0x3a>
 801a078:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a07c:	f1bc 0f19 	cmp.w	ip, #25
 801a080:	d801      	bhi.n	801a086 <_strtol_l.constprop.0+0xb2>
 801a082:	3c37      	subs	r4, #55	; 0x37
 801a084:	e7e2      	b.n	801a04c <_strtol_l.constprop.0+0x78>
 801a086:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a08a:	f1bc 0f19 	cmp.w	ip, #25
 801a08e:	d804      	bhi.n	801a09a <_strtol_l.constprop.0+0xc6>
 801a090:	3c57      	subs	r4, #87	; 0x57
 801a092:	e7db      	b.n	801a04c <_strtol_l.constprop.0+0x78>
 801a094:	f04f 3eff 	mov.w	lr, #4294967295
 801a098:	e7e6      	b.n	801a068 <_strtol_l.constprop.0+0x94>
 801a09a:	f1be 3fff 	cmp.w	lr, #4294967295
 801a09e:	d105      	bne.n	801a0ac <_strtol_l.constprop.0+0xd8>
 801a0a0:	2322      	movs	r3, #34	; 0x22
 801a0a2:	6003      	str	r3, [r0, #0]
 801a0a4:	4646      	mov	r6, r8
 801a0a6:	b942      	cbnz	r2, 801a0ba <_strtol_l.constprop.0+0xe6>
 801a0a8:	4630      	mov	r0, r6
 801a0aa:	e79e      	b.n	8019fea <_strtol_l.constprop.0+0x16>
 801a0ac:	b107      	cbz	r7, 801a0b0 <_strtol_l.constprop.0+0xdc>
 801a0ae:	4276      	negs	r6, r6
 801a0b0:	2a00      	cmp	r2, #0
 801a0b2:	d0f9      	beq.n	801a0a8 <_strtol_l.constprop.0+0xd4>
 801a0b4:	f1be 0f00 	cmp.w	lr, #0
 801a0b8:	d000      	beq.n	801a0bc <_strtol_l.constprop.0+0xe8>
 801a0ba:	1e69      	subs	r1, r5, #1
 801a0bc:	6011      	str	r1, [r2, #0]
 801a0be:	e7f3      	b.n	801a0a8 <_strtol_l.constprop.0+0xd4>
 801a0c0:	2430      	movs	r4, #48	; 0x30
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d1b1      	bne.n	801a02a <_strtol_l.constprop.0+0x56>
 801a0c6:	2308      	movs	r3, #8
 801a0c8:	e7af      	b.n	801a02a <_strtol_l.constprop.0+0x56>
 801a0ca:	2c30      	cmp	r4, #48	; 0x30
 801a0cc:	d0a5      	beq.n	801a01a <_strtol_l.constprop.0+0x46>
 801a0ce:	230a      	movs	r3, #10
 801a0d0:	e7ab      	b.n	801a02a <_strtol_l.constprop.0+0x56>
 801a0d2:	bf00      	nop
 801a0d4:	0801e239 	.word	0x0801e239

0801a0d8 <_strtol_r>:
 801a0d8:	f7ff bf7c 	b.w	8019fd4 <_strtol_l.constprop.0>

0801a0dc <__ssputs_r>:
 801a0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0e0:	688e      	ldr	r6, [r1, #8]
 801a0e2:	461f      	mov	r7, r3
 801a0e4:	42be      	cmp	r6, r7
 801a0e6:	680b      	ldr	r3, [r1, #0]
 801a0e8:	4682      	mov	sl, r0
 801a0ea:	460c      	mov	r4, r1
 801a0ec:	4690      	mov	r8, r2
 801a0ee:	d82c      	bhi.n	801a14a <__ssputs_r+0x6e>
 801a0f0:	898a      	ldrh	r2, [r1, #12]
 801a0f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a0f6:	d026      	beq.n	801a146 <__ssputs_r+0x6a>
 801a0f8:	6965      	ldr	r5, [r4, #20]
 801a0fa:	6909      	ldr	r1, [r1, #16]
 801a0fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a100:	eba3 0901 	sub.w	r9, r3, r1
 801a104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a108:	1c7b      	adds	r3, r7, #1
 801a10a:	444b      	add	r3, r9
 801a10c:	106d      	asrs	r5, r5, #1
 801a10e:	429d      	cmp	r5, r3
 801a110:	bf38      	it	cc
 801a112:	461d      	movcc	r5, r3
 801a114:	0553      	lsls	r3, r2, #21
 801a116:	d527      	bpl.n	801a168 <__ssputs_r+0x8c>
 801a118:	4629      	mov	r1, r5
 801a11a:	f7fe fc0f 	bl	801893c <_malloc_r>
 801a11e:	4606      	mov	r6, r0
 801a120:	b360      	cbz	r0, 801a17c <__ssputs_r+0xa0>
 801a122:	6921      	ldr	r1, [r4, #16]
 801a124:	464a      	mov	r2, r9
 801a126:	f7fd fd04 	bl	8017b32 <memcpy>
 801a12a:	89a3      	ldrh	r3, [r4, #12]
 801a12c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a134:	81a3      	strh	r3, [r4, #12]
 801a136:	6126      	str	r6, [r4, #16]
 801a138:	6165      	str	r5, [r4, #20]
 801a13a:	444e      	add	r6, r9
 801a13c:	eba5 0509 	sub.w	r5, r5, r9
 801a140:	6026      	str	r6, [r4, #0]
 801a142:	60a5      	str	r5, [r4, #8]
 801a144:	463e      	mov	r6, r7
 801a146:	42be      	cmp	r6, r7
 801a148:	d900      	bls.n	801a14c <__ssputs_r+0x70>
 801a14a:	463e      	mov	r6, r7
 801a14c:	6820      	ldr	r0, [r4, #0]
 801a14e:	4632      	mov	r2, r6
 801a150:	4641      	mov	r1, r8
 801a152:	f000 f9c9 	bl	801a4e8 <memmove>
 801a156:	68a3      	ldr	r3, [r4, #8]
 801a158:	1b9b      	subs	r3, r3, r6
 801a15a:	60a3      	str	r3, [r4, #8]
 801a15c:	6823      	ldr	r3, [r4, #0]
 801a15e:	4433      	add	r3, r6
 801a160:	6023      	str	r3, [r4, #0]
 801a162:	2000      	movs	r0, #0
 801a164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a168:	462a      	mov	r2, r5
 801a16a:	f000 fd9e 	bl	801acaa <_realloc_r>
 801a16e:	4606      	mov	r6, r0
 801a170:	2800      	cmp	r0, #0
 801a172:	d1e0      	bne.n	801a136 <__ssputs_r+0x5a>
 801a174:	6921      	ldr	r1, [r4, #16]
 801a176:	4650      	mov	r0, sl
 801a178:	f7fe fb6c 	bl	8018854 <_free_r>
 801a17c:	230c      	movs	r3, #12
 801a17e:	f8ca 3000 	str.w	r3, [sl]
 801a182:	89a3      	ldrh	r3, [r4, #12]
 801a184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a188:	81a3      	strh	r3, [r4, #12]
 801a18a:	f04f 30ff 	mov.w	r0, #4294967295
 801a18e:	e7e9      	b.n	801a164 <__ssputs_r+0x88>

0801a190 <_svfiprintf_r>:
 801a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a194:	4698      	mov	r8, r3
 801a196:	898b      	ldrh	r3, [r1, #12]
 801a198:	061b      	lsls	r3, r3, #24
 801a19a:	b09d      	sub	sp, #116	; 0x74
 801a19c:	4607      	mov	r7, r0
 801a19e:	460d      	mov	r5, r1
 801a1a0:	4614      	mov	r4, r2
 801a1a2:	d50e      	bpl.n	801a1c2 <_svfiprintf_r+0x32>
 801a1a4:	690b      	ldr	r3, [r1, #16]
 801a1a6:	b963      	cbnz	r3, 801a1c2 <_svfiprintf_r+0x32>
 801a1a8:	2140      	movs	r1, #64	; 0x40
 801a1aa:	f7fe fbc7 	bl	801893c <_malloc_r>
 801a1ae:	6028      	str	r0, [r5, #0]
 801a1b0:	6128      	str	r0, [r5, #16]
 801a1b2:	b920      	cbnz	r0, 801a1be <_svfiprintf_r+0x2e>
 801a1b4:	230c      	movs	r3, #12
 801a1b6:	603b      	str	r3, [r7, #0]
 801a1b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a1bc:	e0d0      	b.n	801a360 <_svfiprintf_r+0x1d0>
 801a1be:	2340      	movs	r3, #64	; 0x40
 801a1c0:	616b      	str	r3, [r5, #20]
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	9309      	str	r3, [sp, #36]	; 0x24
 801a1c6:	2320      	movs	r3, #32
 801a1c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a1cc:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1d0:	2330      	movs	r3, #48	; 0x30
 801a1d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a378 <_svfiprintf_r+0x1e8>
 801a1d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a1da:	f04f 0901 	mov.w	r9, #1
 801a1de:	4623      	mov	r3, r4
 801a1e0:	469a      	mov	sl, r3
 801a1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a1e6:	b10a      	cbz	r2, 801a1ec <_svfiprintf_r+0x5c>
 801a1e8:	2a25      	cmp	r2, #37	; 0x25
 801a1ea:	d1f9      	bne.n	801a1e0 <_svfiprintf_r+0x50>
 801a1ec:	ebba 0b04 	subs.w	fp, sl, r4
 801a1f0:	d00b      	beq.n	801a20a <_svfiprintf_r+0x7a>
 801a1f2:	465b      	mov	r3, fp
 801a1f4:	4622      	mov	r2, r4
 801a1f6:	4629      	mov	r1, r5
 801a1f8:	4638      	mov	r0, r7
 801a1fa:	f7ff ff6f 	bl	801a0dc <__ssputs_r>
 801a1fe:	3001      	adds	r0, #1
 801a200:	f000 80a9 	beq.w	801a356 <_svfiprintf_r+0x1c6>
 801a204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a206:	445a      	add	r2, fp
 801a208:	9209      	str	r2, [sp, #36]	; 0x24
 801a20a:	f89a 3000 	ldrb.w	r3, [sl]
 801a20e:	2b00      	cmp	r3, #0
 801a210:	f000 80a1 	beq.w	801a356 <_svfiprintf_r+0x1c6>
 801a214:	2300      	movs	r3, #0
 801a216:	f04f 32ff 	mov.w	r2, #4294967295
 801a21a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a21e:	f10a 0a01 	add.w	sl, sl, #1
 801a222:	9304      	str	r3, [sp, #16]
 801a224:	9307      	str	r3, [sp, #28]
 801a226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a22a:	931a      	str	r3, [sp, #104]	; 0x68
 801a22c:	4654      	mov	r4, sl
 801a22e:	2205      	movs	r2, #5
 801a230:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a234:	4850      	ldr	r0, [pc, #320]	; (801a378 <_svfiprintf_r+0x1e8>)
 801a236:	f7e5 fff3 	bl	8000220 <memchr>
 801a23a:	9a04      	ldr	r2, [sp, #16]
 801a23c:	b9d8      	cbnz	r0, 801a276 <_svfiprintf_r+0xe6>
 801a23e:	06d0      	lsls	r0, r2, #27
 801a240:	bf44      	itt	mi
 801a242:	2320      	movmi	r3, #32
 801a244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a248:	0711      	lsls	r1, r2, #28
 801a24a:	bf44      	itt	mi
 801a24c:	232b      	movmi	r3, #43	; 0x2b
 801a24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a252:	f89a 3000 	ldrb.w	r3, [sl]
 801a256:	2b2a      	cmp	r3, #42	; 0x2a
 801a258:	d015      	beq.n	801a286 <_svfiprintf_r+0xf6>
 801a25a:	9a07      	ldr	r2, [sp, #28]
 801a25c:	4654      	mov	r4, sl
 801a25e:	2000      	movs	r0, #0
 801a260:	f04f 0c0a 	mov.w	ip, #10
 801a264:	4621      	mov	r1, r4
 801a266:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a26a:	3b30      	subs	r3, #48	; 0x30
 801a26c:	2b09      	cmp	r3, #9
 801a26e:	d94d      	bls.n	801a30c <_svfiprintf_r+0x17c>
 801a270:	b1b0      	cbz	r0, 801a2a0 <_svfiprintf_r+0x110>
 801a272:	9207      	str	r2, [sp, #28]
 801a274:	e014      	b.n	801a2a0 <_svfiprintf_r+0x110>
 801a276:	eba0 0308 	sub.w	r3, r0, r8
 801a27a:	fa09 f303 	lsl.w	r3, r9, r3
 801a27e:	4313      	orrs	r3, r2
 801a280:	9304      	str	r3, [sp, #16]
 801a282:	46a2      	mov	sl, r4
 801a284:	e7d2      	b.n	801a22c <_svfiprintf_r+0x9c>
 801a286:	9b03      	ldr	r3, [sp, #12]
 801a288:	1d19      	adds	r1, r3, #4
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	9103      	str	r1, [sp, #12]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	bfbb      	ittet	lt
 801a292:	425b      	neglt	r3, r3
 801a294:	f042 0202 	orrlt.w	r2, r2, #2
 801a298:	9307      	strge	r3, [sp, #28]
 801a29a:	9307      	strlt	r3, [sp, #28]
 801a29c:	bfb8      	it	lt
 801a29e:	9204      	strlt	r2, [sp, #16]
 801a2a0:	7823      	ldrb	r3, [r4, #0]
 801a2a2:	2b2e      	cmp	r3, #46	; 0x2e
 801a2a4:	d10c      	bne.n	801a2c0 <_svfiprintf_r+0x130>
 801a2a6:	7863      	ldrb	r3, [r4, #1]
 801a2a8:	2b2a      	cmp	r3, #42	; 0x2a
 801a2aa:	d134      	bne.n	801a316 <_svfiprintf_r+0x186>
 801a2ac:	9b03      	ldr	r3, [sp, #12]
 801a2ae:	1d1a      	adds	r2, r3, #4
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	9203      	str	r2, [sp, #12]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	bfb8      	it	lt
 801a2b8:	f04f 33ff 	movlt.w	r3, #4294967295
 801a2bc:	3402      	adds	r4, #2
 801a2be:	9305      	str	r3, [sp, #20]
 801a2c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801a388 <_svfiprintf_r+0x1f8>
 801a2c4:	7821      	ldrb	r1, [r4, #0]
 801a2c6:	2203      	movs	r2, #3
 801a2c8:	4650      	mov	r0, sl
 801a2ca:	f7e5 ffa9 	bl	8000220 <memchr>
 801a2ce:	b138      	cbz	r0, 801a2e0 <_svfiprintf_r+0x150>
 801a2d0:	9b04      	ldr	r3, [sp, #16]
 801a2d2:	eba0 000a 	sub.w	r0, r0, sl
 801a2d6:	2240      	movs	r2, #64	; 0x40
 801a2d8:	4082      	lsls	r2, r0
 801a2da:	4313      	orrs	r3, r2
 801a2dc:	3401      	adds	r4, #1
 801a2de:	9304      	str	r3, [sp, #16]
 801a2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2e4:	4825      	ldr	r0, [pc, #148]	; (801a37c <_svfiprintf_r+0x1ec>)
 801a2e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a2ea:	2206      	movs	r2, #6
 801a2ec:	f7e5 ff98 	bl	8000220 <memchr>
 801a2f0:	2800      	cmp	r0, #0
 801a2f2:	d038      	beq.n	801a366 <_svfiprintf_r+0x1d6>
 801a2f4:	4b22      	ldr	r3, [pc, #136]	; (801a380 <_svfiprintf_r+0x1f0>)
 801a2f6:	bb1b      	cbnz	r3, 801a340 <_svfiprintf_r+0x1b0>
 801a2f8:	9b03      	ldr	r3, [sp, #12]
 801a2fa:	3307      	adds	r3, #7
 801a2fc:	f023 0307 	bic.w	r3, r3, #7
 801a300:	3308      	adds	r3, #8
 801a302:	9303      	str	r3, [sp, #12]
 801a304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a306:	4433      	add	r3, r6
 801a308:	9309      	str	r3, [sp, #36]	; 0x24
 801a30a:	e768      	b.n	801a1de <_svfiprintf_r+0x4e>
 801a30c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a310:	460c      	mov	r4, r1
 801a312:	2001      	movs	r0, #1
 801a314:	e7a6      	b.n	801a264 <_svfiprintf_r+0xd4>
 801a316:	2300      	movs	r3, #0
 801a318:	3401      	adds	r4, #1
 801a31a:	9305      	str	r3, [sp, #20]
 801a31c:	4619      	mov	r1, r3
 801a31e:	f04f 0c0a 	mov.w	ip, #10
 801a322:	4620      	mov	r0, r4
 801a324:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a328:	3a30      	subs	r2, #48	; 0x30
 801a32a:	2a09      	cmp	r2, #9
 801a32c:	d903      	bls.n	801a336 <_svfiprintf_r+0x1a6>
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d0c6      	beq.n	801a2c0 <_svfiprintf_r+0x130>
 801a332:	9105      	str	r1, [sp, #20]
 801a334:	e7c4      	b.n	801a2c0 <_svfiprintf_r+0x130>
 801a336:	fb0c 2101 	mla	r1, ip, r1, r2
 801a33a:	4604      	mov	r4, r0
 801a33c:	2301      	movs	r3, #1
 801a33e:	e7f0      	b.n	801a322 <_svfiprintf_r+0x192>
 801a340:	ab03      	add	r3, sp, #12
 801a342:	9300      	str	r3, [sp, #0]
 801a344:	462a      	mov	r2, r5
 801a346:	4b0f      	ldr	r3, [pc, #60]	; (801a384 <_svfiprintf_r+0x1f4>)
 801a348:	a904      	add	r1, sp, #16
 801a34a:	4638      	mov	r0, r7
 801a34c:	f7fc fc76 	bl	8016c3c <_printf_float>
 801a350:	1c42      	adds	r2, r0, #1
 801a352:	4606      	mov	r6, r0
 801a354:	d1d6      	bne.n	801a304 <_svfiprintf_r+0x174>
 801a356:	89ab      	ldrh	r3, [r5, #12]
 801a358:	065b      	lsls	r3, r3, #25
 801a35a:	f53f af2d 	bmi.w	801a1b8 <_svfiprintf_r+0x28>
 801a35e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a360:	b01d      	add	sp, #116	; 0x74
 801a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a366:	ab03      	add	r3, sp, #12
 801a368:	9300      	str	r3, [sp, #0]
 801a36a:	462a      	mov	r2, r5
 801a36c:	4b05      	ldr	r3, [pc, #20]	; (801a384 <_svfiprintf_r+0x1f4>)
 801a36e:	a904      	add	r1, sp, #16
 801a370:	4638      	mov	r0, r7
 801a372:	f7fc ff07 	bl	8017184 <_printf_i>
 801a376:	e7eb      	b.n	801a350 <_svfiprintf_r+0x1c0>
 801a378:	0801e339 	.word	0x0801e339
 801a37c:	0801e343 	.word	0x0801e343
 801a380:	08016c3d 	.word	0x08016c3d
 801a384:	0801a0dd 	.word	0x0801a0dd
 801a388:	0801e33f 	.word	0x0801e33f

0801a38c <__sflush_r>:
 801a38c:	898a      	ldrh	r2, [r1, #12]
 801a38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a392:	4605      	mov	r5, r0
 801a394:	0710      	lsls	r0, r2, #28
 801a396:	460c      	mov	r4, r1
 801a398:	d458      	bmi.n	801a44c <__sflush_r+0xc0>
 801a39a:	684b      	ldr	r3, [r1, #4]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	dc05      	bgt.n	801a3ac <__sflush_r+0x20>
 801a3a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	dc02      	bgt.n	801a3ac <__sflush_r+0x20>
 801a3a6:	2000      	movs	r0, #0
 801a3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a3ae:	2e00      	cmp	r6, #0
 801a3b0:	d0f9      	beq.n	801a3a6 <__sflush_r+0x1a>
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a3b8:	682f      	ldr	r7, [r5, #0]
 801a3ba:	6a21      	ldr	r1, [r4, #32]
 801a3bc:	602b      	str	r3, [r5, #0]
 801a3be:	d032      	beq.n	801a426 <__sflush_r+0x9a>
 801a3c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a3c2:	89a3      	ldrh	r3, [r4, #12]
 801a3c4:	075a      	lsls	r2, r3, #29
 801a3c6:	d505      	bpl.n	801a3d4 <__sflush_r+0x48>
 801a3c8:	6863      	ldr	r3, [r4, #4]
 801a3ca:	1ac0      	subs	r0, r0, r3
 801a3cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a3ce:	b10b      	cbz	r3, 801a3d4 <__sflush_r+0x48>
 801a3d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a3d2:	1ac0      	subs	r0, r0, r3
 801a3d4:	2300      	movs	r3, #0
 801a3d6:	4602      	mov	r2, r0
 801a3d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a3da:	6a21      	ldr	r1, [r4, #32]
 801a3dc:	4628      	mov	r0, r5
 801a3de:	47b0      	blx	r6
 801a3e0:	1c43      	adds	r3, r0, #1
 801a3e2:	89a3      	ldrh	r3, [r4, #12]
 801a3e4:	d106      	bne.n	801a3f4 <__sflush_r+0x68>
 801a3e6:	6829      	ldr	r1, [r5, #0]
 801a3e8:	291d      	cmp	r1, #29
 801a3ea:	d82b      	bhi.n	801a444 <__sflush_r+0xb8>
 801a3ec:	4a29      	ldr	r2, [pc, #164]	; (801a494 <__sflush_r+0x108>)
 801a3ee:	410a      	asrs	r2, r1
 801a3f0:	07d6      	lsls	r6, r2, #31
 801a3f2:	d427      	bmi.n	801a444 <__sflush_r+0xb8>
 801a3f4:	2200      	movs	r2, #0
 801a3f6:	6062      	str	r2, [r4, #4]
 801a3f8:	04d9      	lsls	r1, r3, #19
 801a3fa:	6922      	ldr	r2, [r4, #16]
 801a3fc:	6022      	str	r2, [r4, #0]
 801a3fe:	d504      	bpl.n	801a40a <__sflush_r+0x7e>
 801a400:	1c42      	adds	r2, r0, #1
 801a402:	d101      	bne.n	801a408 <__sflush_r+0x7c>
 801a404:	682b      	ldr	r3, [r5, #0]
 801a406:	b903      	cbnz	r3, 801a40a <__sflush_r+0x7e>
 801a408:	6560      	str	r0, [r4, #84]	; 0x54
 801a40a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a40c:	602f      	str	r7, [r5, #0]
 801a40e:	2900      	cmp	r1, #0
 801a410:	d0c9      	beq.n	801a3a6 <__sflush_r+0x1a>
 801a412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a416:	4299      	cmp	r1, r3
 801a418:	d002      	beq.n	801a420 <__sflush_r+0x94>
 801a41a:	4628      	mov	r0, r5
 801a41c:	f7fe fa1a 	bl	8018854 <_free_r>
 801a420:	2000      	movs	r0, #0
 801a422:	6360      	str	r0, [r4, #52]	; 0x34
 801a424:	e7c0      	b.n	801a3a8 <__sflush_r+0x1c>
 801a426:	2301      	movs	r3, #1
 801a428:	4628      	mov	r0, r5
 801a42a:	47b0      	blx	r6
 801a42c:	1c41      	adds	r1, r0, #1
 801a42e:	d1c8      	bne.n	801a3c2 <__sflush_r+0x36>
 801a430:	682b      	ldr	r3, [r5, #0]
 801a432:	2b00      	cmp	r3, #0
 801a434:	d0c5      	beq.n	801a3c2 <__sflush_r+0x36>
 801a436:	2b1d      	cmp	r3, #29
 801a438:	d001      	beq.n	801a43e <__sflush_r+0xb2>
 801a43a:	2b16      	cmp	r3, #22
 801a43c:	d101      	bne.n	801a442 <__sflush_r+0xb6>
 801a43e:	602f      	str	r7, [r5, #0]
 801a440:	e7b1      	b.n	801a3a6 <__sflush_r+0x1a>
 801a442:	89a3      	ldrh	r3, [r4, #12]
 801a444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a448:	81a3      	strh	r3, [r4, #12]
 801a44a:	e7ad      	b.n	801a3a8 <__sflush_r+0x1c>
 801a44c:	690f      	ldr	r7, [r1, #16]
 801a44e:	2f00      	cmp	r7, #0
 801a450:	d0a9      	beq.n	801a3a6 <__sflush_r+0x1a>
 801a452:	0793      	lsls	r3, r2, #30
 801a454:	680e      	ldr	r6, [r1, #0]
 801a456:	bf08      	it	eq
 801a458:	694b      	ldreq	r3, [r1, #20]
 801a45a:	600f      	str	r7, [r1, #0]
 801a45c:	bf18      	it	ne
 801a45e:	2300      	movne	r3, #0
 801a460:	eba6 0807 	sub.w	r8, r6, r7
 801a464:	608b      	str	r3, [r1, #8]
 801a466:	f1b8 0f00 	cmp.w	r8, #0
 801a46a:	dd9c      	ble.n	801a3a6 <__sflush_r+0x1a>
 801a46c:	6a21      	ldr	r1, [r4, #32]
 801a46e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a470:	4643      	mov	r3, r8
 801a472:	463a      	mov	r2, r7
 801a474:	4628      	mov	r0, r5
 801a476:	47b0      	blx	r6
 801a478:	2800      	cmp	r0, #0
 801a47a:	dc06      	bgt.n	801a48a <__sflush_r+0xfe>
 801a47c:	89a3      	ldrh	r3, [r4, #12]
 801a47e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a482:	81a3      	strh	r3, [r4, #12]
 801a484:	f04f 30ff 	mov.w	r0, #4294967295
 801a488:	e78e      	b.n	801a3a8 <__sflush_r+0x1c>
 801a48a:	4407      	add	r7, r0
 801a48c:	eba8 0800 	sub.w	r8, r8, r0
 801a490:	e7e9      	b.n	801a466 <__sflush_r+0xda>
 801a492:	bf00      	nop
 801a494:	dfbffffe 	.word	0xdfbffffe

0801a498 <_fflush_r>:
 801a498:	b538      	push	{r3, r4, r5, lr}
 801a49a:	690b      	ldr	r3, [r1, #16]
 801a49c:	4605      	mov	r5, r0
 801a49e:	460c      	mov	r4, r1
 801a4a0:	b913      	cbnz	r3, 801a4a8 <_fflush_r+0x10>
 801a4a2:	2500      	movs	r5, #0
 801a4a4:	4628      	mov	r0, r5
 801a4a6:	bd38      	pop	{r3, r4, r5, pc}
 801a4a8:	b118      	cbz	r0, 801a4b2 <_fflush_r+0x1a>
 801a4aa:	6a03      	ldr	r3, [r0, #32]
 801a4ac:	b90b      	cbnz	r3, 801a4b2 <_fflush_r+0x1a>
 801a4ae:	f7fd fa27 	bl	8017900 <__sinit>
 801a4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d0f3      	beq.n	801a4a2 <_fflush_r+0xa>
 801a4ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a4bc:	07d0      	lsls	r0, r2, #31
 801a4be:	d404      	bmi.n	801a4ca <_fflush_r+0x32>
 801a4c0:	0599      	lsls	r1, r3, #22
 801a4c2:	d402      	bmi.n	801a4ca <_fflush_r+0x32>
 801a4c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a4c6:	f7fd fb32 	bl	8017b2e <__retarget_lock_acquire_recursive>
 801a4ca:	4628      	mov	r0, r5
 801a4cc:	4621      	mov	r1, r4
 801a4ce:	f7ff ff5d 	bl	801a38c <__sflush_r>
 801a4d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a4d4:	07da      	lsls	r2, r3, #31
 801a4d6:	4605      	mov	r5, r0
 801a4d8:	d4e4      	bmi.n	801a4a4 <_fflush_r+0xc>
 801a4da:	89a3      	ldrh	r3, [r4, #12]
 801a4dc:	059b      	lsls	r3, r3, #22
 801a4de:	d4e1      	bmi.n	801a4a4 <_fflush_r+0xc>
 801a4e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a4e2:	f7fd fb25 	bl	8017b30 <__retarget_lock_release_recursive>
 801a4e6:	e7dd      	b.n	801a4a4 <_fflush_r+0xc>

0801a4e8 <memmove>:
 801a4e8:	4288      	cmp	r0, r1
 801a4ea:	b510      	push	{r4, lr}
 801a4ec:	eb01 0402 	add.w	r4, r1, r2
 801a4f0:	d902      	bls.n	801a4f8 <memmove+0x10>
 801a4f2:	4284      	cmp	r4, r0
 801a4f4:	4623      	mov	r3, r4
 801a4f6:	d807      	bhi.n	801a508 <memmove+0x20>
 801a4f8:	1e43      	subs	r3, r0, #1
 801a4fa:	42a1      	cmp	r1, r4
 801a4fc:	d008      	beq.n	801a510 <memmove+0x28>
 801a4fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a502:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a506:	e7f8      	b.n	801a4fa <memmove+0x12>
 801a508:	4402      	add	r2, r0
 801a50a:	4601      	mov	r1, r0
 801a50c:	428a      	cmp	r2, r1
 801a50e:	d100      	bne.n	801a512 <memmove+0x2a>
 801a510:	bd10      	pop	{r4, pc}
 801a512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a51a:	e7f7      	b.n	801a50c <memmove+0x24>

0801a51c <strncmp>:
 801a51c:	b510      	push	{r4, lr}
 801a51e:	b16a      	cbz	r2, 801a53c <strncmp+0x20>
 801a520:	3901      	subs	r1, #1
 801a522:	1884      	adds	r4, r0, r2
 801a524:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a528:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a52c:	429a      	cmp	r2, r3
 801a52e:	d103      	bne.n	801a538 <strncmp+0x1c>
 801a530:	42a0      	cmp	r0, r4
 801a532:	d001      	beq.n	801a538 <strncmp+0x1c>
 801a534:	2a00      	cmp	r2, #0
 801a536:	d1f5      	bne.n	801a524 <strncmp+0x8>
 801a538:	1ad0      	subs	r0, r2, r3
 801a53a:	bd10      	pop	{r4, pc}
 801a53c:	4610      	mov	r0, r2
 801a53e:	e7fc      	b.n	801a53a <strncmp+0x1e>

0801a540 <_sbrk_r>:
 801a540:	b538      	push	{r3, r4, r5, lr}
 801a542:	4d06      	ldr	r5, [pc, #24]	; (801a55c <_sbrk_r+0x1c>)
 801a544:	2300      	movs	r3, #0
 801a546:	4604      	mov	r4, r0
 801a548:	4608      	mov	r0, r1
 801a54a:	602b      	str	r3, [r5, #0]
 801a54c:	f7eb fd40 	bl	8005fd0 <_sbrk>
 801a550:	1c43      	adds	r3, r0, #1
 801a552:	d102      	bne.n	801a55a <_sbrk_r+0x1a>
 801a554:	682b      	ldr	r3, [r5, #0]
 801a556:	b103      	cbz	r3, 801a55a <_sbrk_r+0x1a>
 801a558:	6023      	str	r3, [r4, #0]
 801a55a:	bd38      	pop	{r3, r4, r5, pc}
 801a55c:	20003718 	.word	0x20003718

0801a560 <nan>:
 801a560:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a568 <nan+0x8>
 801a564:	4770      	bx	lr
 801a566:	bf00      	nop
 801a568:	00000000 	.word	0x00000000
 801a56c:	7ff80000 	.word	0x7ff80000

0801a570 <__assert_func>:
 801a570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a572:	4614      	mov	r4, r2
 801a574:	461a      	mov	r2, r3
 801a576:	4b09      	ldr	r3, [pc, #36]	; (801a59c <__assert_func+0x2c>)
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	4605      	mov	r5, r0
 801a57c:	68d8      	ldr	r0, [r3, #12]
 801a57e:	b14c      	cbz	r4, 801a594 <__assert_func+0x24>
 801a580:	4b07      	ldr	r3, [pc, #28]	; (801a5a0 <__assert_func+0x30>)
 801a582:	9100      	str	r1, [sp, #0]
 801a584:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a588:	4906      	ldr	r1, [pc, #24]	; (801a5a4 <__assert_func+0x34>)
 801a58a:	462b      	mov	r3, r5
 801a58c:	f000 fbca 	bl	801ad24 <fiprintf>
 801a590:	f000 fbda 	bl	801ad48 <abort>
 801a594:	4b04      	ldr	r3, [pc, #16]	; (801a5a8 <__assert_func+0x38>)
 801a596:	461c      	mov	r4, r3
 801a598:	e7f3      	b.n	801a582 <__assert_func+0x12>
 801a59a:	bf00      	nop
 801a59c:	200003ec 	.word	0x200003ec
 801a5a0:	0801e352 	.word	0x0801e352
 801a5a4:	0801e35f 	.word	0x0801e35f
 801a5a8:	0801e38d 	.word	0x0801e38d

0801a5ac <_calloc_r>:
 801a5ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a5ae:	fba1 2402 	umull	r2, r4, r1, r2
 801a5b2:	b94c      	cbnz	r4, 801a5c8 <_calloc_r+0x1c>
 801a5b4:	4611      	mov	r1, r2
 801a5b6:	9201      	str	r2, [sp, #4]
 801a5b8:	f7fe f9c0 	bl	801893c <_malloc_r>
 801a5bc:	9a01      	ldr	r2, [sp, #4]
 801a5be:	4605      	mov	r5, r0
 801a5c0:	b930      	cbnz	r0, 801a5d0 <_calloc_r+0x24>
 801a5c2:	4628      	mov	r0, r5
 801a5c4:	b003      	add	sp, #12
 801a5c6:	bd30      	pop	{r4, r5, pc}
 801a5c8:	220c      	movs	r2, #12
 801a5ca:	6002      	str	r2, [r0, #0]
 801a5cc:	2500      	movs	r5, #0
 801a5ce:	e7f8      	b.n	801a5c2 <_calloc_r+0x16>
 801a5d0:	4621      	mov	r1, r4
 801a5d2:	f7fd fa2e 	bl	8017a32 <memset>
 801a5d6:	e7f4      	b.n	801a5c2 <_calloc_r+0x16>

0801a5d8 <rshift>:
 801a5d8:	6903      	ldr	r3, [r0, #16]
 801a5da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a5de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a5e6:	f100 0414 	add.w	r4, r0, #20
 801a5ea:	dd45      	ble.n	801a678 <rshift+0xa0>
 801a5ec:	f011 011f 	ands.w	r1, r1, #31
 801a5f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a5f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a5f8:	d10c      	bne.n	801a614 <rshift+0x3c>
 801a5fa:	f100 0710 	add.w	r7, r0, #16
 801a5fe:	4629      	mov	r1, r5
 801a600:	42b1      	cmp	r1, r6
 801a602:	d334      	bcc.n	801a66e <rshift+0x96>
 801a604:	1a9b      	subs	r3, r3, r2
 801a606:	009b      	lsls	r3, r3, #2
 801a608:	1eea      	subs	r2, r5, #3
 801a60a:	4296      	cmp	r6, r2
 801a60c:	bf38      	it	cc
 801a60e:	2300      	movcc	r3, #0
 801a610:	4423      	add	r3, r4
 801a612:	e015      	b.n	801a640 <rshift+0x68>
 801a614:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a618:	f1c1 0820 	rsb	r8, r1, #32
 801a61c:	40cf      	lsrs	r7, r1
 801a61e:	f105 0e04 	add.w	lr, r5, #4
 801a622:	46a1      	mov	r9, r4
 801a624:	4576      	cmp	r6, lr
 801a626:	46f4      	mov	ip, lr
 801a628:	d815      	bhi.n	801a656 <rshift+0x7e>
 801a62a:	1a9a      	subs	r2, r3, r2
 801a62c:	0092      	lsls	r2, r2, #2
 801a62e:	3a04      	subs	r2, #4
 801a630:	3501      	adds	r5, #1
 801a632:	42ae      	cmp	r6, r5
 801a634:	bf38      	it	cc
 801a636:	2200      	movcc	r2, #0
 801a638:	18a3      	adds	r3, r4, r2
 801a63a:	50a7      	str	r7, [r4, r2]
 801a63c:	b107      	cbz	r7, 801a640 <rshift+0x68>
 801a63e:	3304      	adds	r3, #4
 801a640:	1b1a      	subs	r2, r3, r4
 801a642:	42a3      	cmp	r3, r4
 801a644:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a648:	bf08      	it	eq
 801a64a:	2300      	moveq	r3, #0
 801a64c:	6102      	str	r2, [r0, #16]
 801a64e:	bf08      	it	eq
 801a650:	6143      	streq	r3, [r0, #20]
 801a652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a656:	f8dc c000 	ldr.w	ip, [ip]
 801a65a:	fa0c fc08 	lsl.w	ip, ip, r8
 801a65e:	ea4c 0707 	orr.w	r7, ip, r7
 801a662:	f849 7b04 	str.w	r7, [r9], #4
 801a666:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a66a:	40cf      	lsrs	r7, r1
 801a66c:	e7da      	b.n	801a624 <rshift+0x4c>
 801a66e:	f851 cb04 	ldr.w	ip, [r1], #4
 801a672:	f847 cf04 	str.w	ip, [r7, #4]!
 801a676:	e7c3      	b.n	801a600 <rshift+0x28>
 801a678:	4623      	mov	r3, r4
 801a67a:	e7e1      	b.n	801a640 <rshift+0x68>

0801a67c <__hexdig_fun>:
 801a67c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a680:	2b09      	cmp	r3, #9
 801a682:	d802      	bhi.n	801a68a <__hexdig_fun+0xe>
 801a684:	3820      	subs	r0, #32
 801a686:	b2c0      	uxtb	r0, r0
 801a688:	4770      	bx	lr
 801a68a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a68e:	2b05      	cmp	r3, #5
 801a690:	d801      	bhi.n	801a696 <__hexdig_fun+0x1a>
 801a692:	3847      	subs	r0, #71	; 0x47
 801a694:	e7f7      	b.n	801a686 <__hexdig_fun+0xa>
 801a696:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a69a:	2b05      	cmp	r3, #5
 801a69c:	d801      	bhi.n	801a6a2 <__hexdig_fun+0x26>
 801a69e:	3827      	subs	r0, #39	; 0x27
 801a6a0:	e7f1      	b.n	801a686 <__hexdig_fun+0xa>
 801a6a2:	2000      	movs	r0, #0
 801a6a4:	4770      	bx	lr
	...

0801a6a8 <__gethex>:
 801a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6ac:	4617      	mov	r7, r2
 801a6ae:	680a      	ldr	r2, [r1, #0]
 801a6b0:	b085      	sub	sp, #20
 801a6b2:	f102 0b02 	add.w	fp, r2, #2
 801a6b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a6ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a6be:	4681      	mov	r9, r0
 801a6c0:	468a      	mov	sl, r1
 801a6c2:	9302      	str	r3, [sp, #8]
 801a6c4:	32fe      	adds	r2, #254	; 0xfe
 801a6c6:	eb02 030b 	add.w	r3, r2, fp
 801a6ca:	46d8      	mov	r8, fp
 801a6cc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801a6d0:	9301      	str	r3, [sp, #4]
 801a6d2:	2830      	cmp	r0, #48	; 0x30
 801a6d4:	d0f7      	beq.n	801a6c6 <__gethex+0x1e>
 801a6d6:	f7ff ffd1 	bl	801a67c <__hexdig_fun>
 801a6da:	4604      	mov	r4, r0
 801a6dc:	2800      	cmp	r0, #0
 801a6de:	d138      	bne.n	801a752 <__gethex+0xaa>
 801a6e0:	49a7      	ldr	r1, [pc, #668]	; (801a980 <__gethex+0x2d8>)
 801a6e2:	2201      	movs	r2, #1
 801a6e4:	4640      	mov	r0, r8
 801a6e6:	f7ff ff19 	bl	801a51c <strncmp>
 801a6ea:	4606      	mov	r6, r0
 801a6ec:	2800      	cmp	r0, #0
 801a6ee:	d169      	bne.n	801a7c4 <__gethex+0x11c>
 801a6f0:	f898 0001 	ldrb.w	r0, [r8, #1]
 801a6f4:	465d      	mov	r5, fp
 801a6f6:	f7ff ffc1 	bl	801a67c <__hexdig_fun>
 801a6fa:	2800      	cmp	r0, #0
 801a6fc:	d064      	beq.n	801a7c8 <__gethex+0x120>
 801a6fe:	465a      	mov	r2, fp
 801a700:	7810      	ldrb	r0, [r2, #0]
 801a702:	2830      	cmp	r0, #48	; 0x30
 801a704:	4690      	mov	r8, r2
 801a706:	f102 0201 	add.w	r2, r2, #1
 801a70a:	d0f9      	beq.n	801a700 <__gethex+0x58>
 801a70c:	f7ff ffb6 	bl	801a67c <__hexdig_fun>
 801a710:	2301      	movs	r3, #1
 801a712:	fab0 f480 	clz	r4, r0
 801a716:	0964      	lsrs	r4, r4, #5
 801a718:	465e      	mov	r6, fp
 801a71a:	9301      	str	r3, [sp, #4]
 801a71c:	4642      	mov	r2, r8
 801a71e:	4615      	mov	r5, r2
 801a720:	3201      	adds	r2, #1
 801a722:	7828      	ldrb	r0, [r5, #0]
 801a724:	f7ff ffaa 	bl	801a67c <__hexdig_fun>
 801a728:	2800      	cmp	r0, #0
 801a72a:	d1f8      	bne.n	801a71e <__gethex+0x76>
 801a72c:	4994      	ldr	r1, [pc, #592]	; (801a980 <__gethex+0x2d8>)
 801a72e:	2201      	movs	r2, #1
 801a730:	4628      	mov	r0, r5
 801a732:	f7ff fef3 	bl	801a51c <strncmp>
 801a736:	b978      	cbnz	r0, 801a758 <__gethex+0xb0>
 801a738:	b946      	cbnz	r6, 801a74c <__gethex+0xa4>
 801a73a:	1c6e      	adds	r6, r5, #1
 801a73c:	4632      	mov	r2, r6
 801a73e:	4615      	mov	r5, r2
 801a740:	3201      	adds	r2, #1
 801a742:	7828      	ldrb	r0, [r5, #0]
 801a744:	f7ff ff9a 	bl	801a67c <__hexdig_fun>
 801a748:	2800      	cmp	r0, #0
 801a74a:	d1f8      	bne.n	801a73e <__gethex+0x96>
 801a74c:	1b73      	subs	r3, r6, r5
 801a74e:	009e      	lsls	r6, r3, #2
 801a750:	e004      	b.n	801a75c <__gethex+0xb4>
 801a752:	2400      	movs	r4, #0
 801a754:	4626      	mov	r6, r4
 801a756:	e7e1      	b.n	801a71c <__gethex+0x74>
 801a758:	2e00      	cmp	r6, #0
 801a75a:	d1f7      	bne.n	801a74c <__gethex+0xa4>
 801a75c:	782b      	ldrb	r3, [r5, #0]
 801a75e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a762:	2b50      	cmp	r3, #80	; 0x50
 801a764:	d13d      	bne.n	801a7e2 <__gethex+0x13a>
 801a766:	786b      	ldrb	r3, [r5, #1]
 801a768:	2b2b      	cmp	r3, #43	; 0x2b
 801a76a:	d02f      	beq.n	801a7cc <__gethex+0x124>
 801a76c:	2b2d      	cmp	r3, #45	; 0x2d
 801a76e:	d031      	beq.n	801a7d4 <__gethex+0x12c>
 801a770:	1c69      	adds	r1, r5, #1
 801a772:	f04f 0b00 	mov.w	fp, #0
 801a776:	7808      	ldrb	r0, [r1, #0]
 801a778:	f7ff ff80 	bl	801a67c <__hexdig_fun>
 801a77c:	1e42      	subs	r2, r0, #1
 801a77e:	b2d2      	uxtb	r2, r2
 801a780:	2a18      	cmp	r2, #24
 801a782:	d82e      	bhi.n	801a7e2 <__gethex+0x13a>
 801a784:	f1a0 0210 	sub.w	r2, r0, #16
 801a788:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a78c:	f7ff ff76 	bl	801a67c <__hexdig_fun>
 801a790:	f100 3cff 	add.w	ip, r0, #4294967295
 801a794:	fa5f fc8c 	uxtb.w	ip, ip
 801a798:	f1bc 0f18 	cmp.w	ip, #24
 801a79c:	d91d      	bls.n	801a7da <__gethex+0x132>
 801a79e:	f1bb 0f00 	cmp.w	fp, #0
 801a7a2:	d000      	beq.n	801a7a6 <__gethex+0xfe>
 801a7a4:	4252      	negs	r2, r2
 801a7a6:	4416      	add	r6, r2
 801a7a8:	f8ca 1000 	str.w	r1, [sl]
 801a7ac:	b1dc      	cbz	r4, 801a7e6 <__gethex+0x13e>
 801a7ae:	9b01      	ldr	r3, [sp, #4]
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	bf14      	ite	ne
 801a7b4:	f04f 0800 	movne.w	r8, #0
 801a7b8:	f04f 0806 	moveq.w	r8, #6
 801a7bc:	4640      	mov	r0, r8
 801a7be:	b005      	add	sp, #20
 801a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7c4:	4645      	mov	r5, r8
 801a7c6:	4626      	mov	r6, r4
 801a7c8:	2401      	movs	r4, #1
 801a7ca:	e7c7      	b.n	801a75c <__gethex+0xb4>
 801a7cc:	f04f 0b00 	mov.w	fp, #0
 801a7d0:	1ca9      	adds	r1, r5, #2
 801a7d2:	e7d0      	b.n	801a776 <__gethex+0xce>
 801a7d4:	f04f 0b01 	mov.w	fp, #1
 801a7d8:	e7fa      	b.n	801a7d0 <__gethex+0x128>
 801a7da:	230a      	movs	r3, #10
 801a7dc:	fb03 0002 	mla	r0, r3, r2, r0
 801a7e0:	e7d0      	b.n	801a784 <__gethex+0xdc>
 801a7e2:	4629      	mov	r1, r5
 801a7e4:	e7e0      	b.n	801a7a8 <__gethex+0x100>
 801a7e6:	eba5 0308 	sub.w	r3, r5, r8
 801a7ea:	3b01      	subs	r3, #1
 801a7ec:	4621      	mov	r1, r4
 801a7ee:	2b07      	cmp	r3, #7
 801a7f0:	dc0a      	bgt.n	801a808 <__gethex+0x160>
 801a7f2:	4648      	mov	r0, r9
 801a7f4:	f7fe f92e 	bl	8018a54 <_Balloc>
 801a7f8:	4604      	mov	r4, r0
 801a7fa:	b940      	cbnz	r0, 801a80e <__gethex+0x166>
 801a7fc:	4b61      	ldr	r3, [pc, #388]	; (801a984 <__gethex+0x2dc>)
 801a7fe:	4602      	mov	r2, r0
 801a800:	21e4      	movs	r1, #228	; 0xe4
 801a802:	4861      	ldr	r0, [pc, #388]	; (801a988 <__gethex+0x2e0>)
 801a804:	f7ff feb4 	bl	801a570 <__assert_func>
 801a808:	3101      	adds	r1, #1
 801a80a:	105b      	asrs	r3, r3, #1
 801a80c:	e7ef      	b.n	801a7ee <__gethex+0x146>
 801a80e:	f100 0a14 	add.w	sl, r0, #20
 801a812:	2300      	movs	r3, #0
 801a814:	495a      	ldr	r1, [pc, #360]	; (801a980 <__gethex+0x2d8>)
 801a816:	f8cd a004 	str.w	sl, [sp, #4]
 801a81a:	469b      	mov	fp, r3
 801a81c:	45a8      	cmp	r8, r5
 801a81e:	d342      	bcc.n	801a8a6 <__gethex+0x1fe>
 801a820:	9801      	ldr	r0, [sp, #4]
 801a822:	f840 bb04 	str.w	fp, [r0], #4
 801a826:	eba0 000a 	sub.w	r0, r0, sl
 801a82a:	1080      	asrs	r0, r0, #2
 801a82c:	6120      	str	r0, [r4, #16]
 801a82e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801a832:	4658      	mov	r0, fp
 801a834:	f7fe fa00 	bl	8018c38 <__hi0bits>
 801a838:	683d      	ldr	r5, [r7, #0]
 801a83a:	eba8 0000 	sub.w	r0, r8, r0
 801a83e:	42a8      	cmp	r0, r5
 801a840:	dd59      	ble.n	801a8f6 <__gethex+0x24e>
 801a842:	eba0 0805 	sub.w	r8, r0, r5
 801a846:	4641      	mov	r1, r8
 801a848:	4620      	mov	r0, r4
 801a84a:	f7fe fd8f 	bl	801936c <__any_on>
 801a84e:	4683      	mov	fp, r0
 801a850:	b1b8      	cbz	r0, 801a882 <__gethex+0x1da>
 801a852:	f108 33ff 	add.w	r3, r8, #4294967295
 801a856:	1159      	asrs	r1, r3, #5
 801a858:	f003 021f 	and.w	r2, r3, #31
 801a85c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801a860:	f04f 0b01 	mov.w	fp, #1
 801a864:	fa0b f202 	lsl.w	r2, fp, r2
 801a868:	420a      	tst	r2, r1
 801a86a:	d00a      	beq.n	801a882 <__gethex+0x1da>
 801a86c:	455b      	cmp	r3, fp
 801a86e:	dd06      	ble.n	801a87e <__gethex+0x1d6>
 801a870:	f1a8 0102 	sub.w	r1, r8, #2
 801a874:	4620      	mov	r0, r4
 801a876:	f7fe fd79 	bl	801936c <__any_on>
 801a87a:	2800      	cmp	r0, #0
 801a87c:	d138      	bne.n	801a8f0 <__gethex+0x248>
 801a87e:	f04f 0b02 	mov.w	fp, #2
 801a882:	4641      	mov	r1, r8
 801a884:	4620      	mov	r0, r4
 801a886:	f7ff fea7 	bl	801a5d8 <rshift>
 801a88a:	4446      	add	r6, r8
 801a88c:	68bb      	ldr	r3, [r7, #8]
 801a88e:	42b3      	cmp	r3, r6
 801a890:	da41      	bge.n	801a916 <__gethex+0x26e>
 801a892:	4621      	mov	r1, r4
 801a894:	4648      	mov	r0, r9
 801a896:	f7fe f91d 	bl	8018ad4 <_Bfree>
 801a89a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a89c:	2300      	movs	r3, #0
 801a89e:	6013      	str	r3, [r2, #0]
 801a8a0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801a8a4:	e78a      	b.n	801a7bc <__gethex+0x114>
 801a8a6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801a8aa:	2a2e      	cmp	r2, #46	; 0x2e
 801a8ac:	d014      	beq.n	801a8d8 <__gethex+0x230>
 801a8ae:	2b20      	cmp	r3, #32
 801a8b0:	d106      	bne.n	801a8c0 <__gethex+0x218>
 801a8b2:	9b01      	ldr	r3, [sp, #4]
 801a8b4:	f843 bb04 	str.w	fp, [r3], #4
 801a8b8:	f04f 0b00 	mov.w	fp, #0
 801a8bc:	9301      	str	r3, [sp, #4]
 801a8be:	465b      	mov	r3, fp
 801a8c0:	7828      	ldrb	r0, [r5, #0]
 801a8c2:	9303      	str	r3, [sp, #12]
 801a8c4:	f7ff feda 	bl	801a67c <__hexdig_fun>
 801a8c8:	9b03      	ldr	r3, [sp, #12]
 801a8ca:	f000 000f 	and.w	r0, r0, #15
 801a8ce:	4098      	lsls	r0, r3
 801a8d0:	ea4b 0b00 	orr.w	fp, fp, r0
 801a8d4:	3304      	adds	r3, #4
 801a8d6:	e7a1      	b.n	801a81c <__gethex+0x174>
 801a8d8:	45a8      	cmp	r8, r5
 801a8da:	d8e8      	bhi.n	801a8ae <__gethex+0x206>
 801a8dc:	2201      	movs	r2, #1
 801a8de:	4628      	mov	r0, r5
 801a8e0:	9303      	str	r3, [sp, #12]
 801a8e2:	f7ff fe1b 	bl	801a51c <strncmp>
 801a8e6:	4926      	ldr	r1, [pc, #152]	; (801a980 <__gethex+0x2d8>)
 801a8e8:	9b03      	ldr	r3, [sp, #12]
 801a8ea:	2800      	cmp	r0, #0
 801a8ec:	d1df      	bne.n	801a8ae <__gethex+0x206>
 801a8ee:	e795      	b.n	801a81c <__gethex+0x174>
 801a8f0:	f04f 0b03 	mov.w	fp, #3
 801a8f4:	e7c5      	b.n	801a882 <__gethex+0x1da>
 801a8f6:	da0b      	bge.n	801a910 <__gethex+0x268>
 801a8f8:	eba5 0800 	sub.w	r8, r5, r0
 801a8fc:	4621      	mov	r1, r4
 801a8fe:	4642      	mov	r2, r8
 801a900:	4648      	mov	r0, r9
 801a902:	f7fe fb01 	bl	8018f08 <__lshift>
 801a906:	eba6 0608 	sub.w	r6, r6, r8
 801a90a:	4604      	mov	r4, r0
 801a90c:	f100 0a14 	add.w	sl, r0, #20
 801a910:	f04f 0b00 	mov.w	fp, #0
 801a914:	e7ba      	b.n	801a88c <__gethex+0x1e4>
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	42b3      	cmp	r3, r6
 801a91a:	dd73      	ble.n	801aa04 <__gethex+0x35c>
 801a91c:	1b9e      	subs	r6, r3, r6
 801a91e:	42b5      	cmp	r5, r6
 801a920:	dc34      	bgt.n	801a98c <__gethex+0x2e4>
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	2b02      	cmp	r3, #2
 801a926:	d023      	beq.n	801a970 <__gethex+0x2c8>
 801a928:	2b03      	cmp	r3, #3
 801a92a:	d025      	beq.n	801a978 <__gethex+0x2d0>
 801a92c:	2b01      	cmp	r3, #1
 801a92e:	d115      	bne.n	801a95c <__gethex+0x2b4>
 801a930:	42b5      	cmp	r5, r6
 801a932:	d113      	bne.n	801a95c <__gethex+0x2b4>
 801a934:	2d01      	cmp	r5, #1
 801a936:	d10b      	bne.n	801a950 <__gethex+0x2a8>
 801a938:	9a02      	ldr	r2, [sp, #8]
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	6013      	str	r3, [r2, #0]
 801a93e:	2301      	movs	r3, #1
 801a940:	6123      	str	r3, [r4, #16]
 801a942:	f8ca 3000 	str.w	r3, [sl]
 801a946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a948:	f04f 0862 	mov.w	r8, #98	; 0x62
 801a94c:	601c      	str	r4, [r3, #0]
 801a94e:	e735      	b.n	801a7bc <__gethex+0x114>
 801a950:	1e69      	subs	r1, r5, #1
 801a952:	4620      	mov	r0, r4
 801a954:	f7fe fd0a 	bl	801936c <__any_on>
 801a958:	2800      	cmp	r0, #0
 801a95a:	d1ed      	bne.n	801a938 <__gethex+0x290>
 801a95c:	4621      	mov	r1, r4
 801a95e:	4648      	mov	r0, r9
 801a960:	f7fe f8b8 	bl	8018ad4 <_Bfree>
 801a964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a966:	2300      	movs	r3, #0
 801a968:	6013      	str	r3, [r2, #0]
 801a96a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801a96e:	e725      	b.n	801a7bc <__gethex+0x114>
 801a970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a972:	2b00      	cmp	r3, #0
 801a974:	d1f2      	bne.n	801a95c <__gethex+0x2b4>
 801a976:	e7df      	b.n	801a938 <__gethex+0x290>
 801a978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d1dc      	bne.n	801a938 <__gethex+0x290>
 801a97e:	e7ed      	b.n	801a95c <__gethex+0x2b4>
 801a980:	0801e1e4 	.word	0x0801e1e4
 801a984:	0801e07d 	.word	0x0801e07d
 801a988:	0801e38e 	.word	0x0801e38e
 801a98c:	f106 38ff 	add.w	r8, r6, #4294967295
 801a990:	f1bb 0f00 	cmp.w	fp, #0
 801a994:	d133      	bne.n	801a9fe <__gethex+0x356>
 801a996:	f1b8 0f00 	cmp.w	r8, #0
 801a99a:	d004      	beq.n	801a9a6 <__gethex+0x2fe>
 801a99c:	4641      	mov	r1, r8
 801a99e:	4620      	mov	r0, r4
 801a9a0:	f7fe fce4 	bl	801936c <__any_on>
 801a9a4:	4683      	mov	fp, r0
 801a9a6:	ea4f 1268 	mov.w	r2, r8, asr #5
 801a9aa:	2301      	movs	r3, #1
 801a9ac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801a9b0:	f008 081f 	and.w	r8, r8, #31
 801a9b4:	fa03 f308 	lsl.w	r3, r3, r8
 801a9b8:	4213      	tst	r3, r2
 801a9ba:	4631      	mov	r1, r6
 801a9bc:	4620      	mov	r0, r4
 801a9be:	bf18      	it	ne
 801a9c0:	f04b 0b02 	orrne.w	fp, fp, #2
 801a9c4:	1bad      	subs	r5, r5, r6
 801a9c6:	f7ff fe07 	bl	801a5d8 <rshift>
 801a9ca:	687e      	ldr	r6, [r7, #4]
 801a9cc:	f04f 0802 	mov.w	r8, #2
 801a9d0:	f1bb 0f00 	cmp.w	fp, #0
 801a9d4:	d04a      	beq.n	801aa6c <__gethex+0x3c4>
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	2b02      	cmp	r3, #2
 801a9da:	d016      	beq.n	801aa0a <__gethex+0x362>
 801a9dc:	2b03      	cmp	r3, #3
 801a9de:	d018      	beq.n	801aa12 <__gethex+0x36a>
 801a9e0:	2b01      	cmp	r3, #1
 801a9e2:	d109      	bne.n	801a9f8 <__gethex+0x350>
 801a9e4:	f01b 0f02 	tst.w	fp, #2
 801a9e8:	d006      	beq.n	801a9f8 <__gethex+0x350>
 801a9ea:	f8da 3000 	ldr.w	r3, [sl]
 801a9ee:	ea4b 0b03 	orr.w	fp, fp, r3
 801a9f2:	f01b 0f01 	tst.w	fp, #1
 801a9f6:	d10f      	bne.n	801aa18 <__gethex+0x370>
 801a9f8:	f048 0810 	orr.w	r8, r8, #16
 801a9fc:	e036      	b.n	801aa6c <__gethex+0x3c4>
 801a9fe:	f04f 0b01 	mov.w	fp, #1
 801aa02:	e7d0      	b.n	801a9a6 <__gethex+0x2fe>
 801aa04:	f04f 0801 	mov.w	r8, #1
 801aa08:	e7e2      	b.n	801a9d0 <__gethex+0x328>
 801aa0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa0c:	f1c3 0301 	rsb	r3, r3, #1
 801aa10:	930f      	str	r3, [sp, #60]	; 0x3c
 801aa12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d0ef      	beq.n	801a9f8 <__gethex+0x350>
 801aa18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801aa1c:	f104 0214 	add.w	r2, r4, #20
 801aa20:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801aa24:	9301      	str	r3, [sp, #4]
 801aa26:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	4694      	mov	ip, r2
 801aa2e:	f852 1b04 	ldr.w	r1, [r2], #4
 801aa32:	f1b1 3fff 	cmp.w	r1, #4294967295
 801aa36:	d01e      	beq.n	801aa76 <__gethex+0x3ce>
 801aa38:	3101      	adds	r1, #1
 801aa3a:	f8cc 1000 	str.w	r1, [ip]
 801aa3e:	f1b8 0f02 	cmp.w	r8, #2
 801aa42:	f104 0214 	add.w	r2, r4, #20
 801aa46:	d13d      	bne.n	801aac4 <__gethex+0x41c>
 801aa48:	683b      	ldr	r3, [r7, #0]
 801aa4a:	3b01      	subs	r3, #1
 801aa4c:	42ab      	cmp	r3, r5
 801aa4e:	d10b      	bne.n	801aa68 <__gethex+0x3c0>
 801aa50:	1169      	asrs	r1, r5, #5
 801aa52:	2301      	movs	r3, #1
 801aa54:	f005 051f 	and.w	r5, r5, #31
 801aa58:	fa03 f505 	lsl.w	r5, r3, r5
 801aa5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aa60:	421d      	tst	r5, r3
 801aa62:	bf18      	it	ne
 801aa64:	f04f 0801 	movne.w	r8, #1
 801aa68:	f048 0820 	orr.w	r8, r8, #32
 801aa6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa6e:	601c      	str	r4, [r3, #0]
 801aa70:	9b02      	ldr	r3, [sp, #8]
 801aa72:	601e      	str	r6, [r3, #0]
 801aa74:	e6a2      	b.n	801a7bc <__gethex+0x114>
 801aa76:	4290      	cmp	r0, r2
 801aa78:	f842 3c04 	str.w	r3, [r2, #-4]
 801aa7c:	d8d6      	bhi.n	801aa2c <__gethex+0x384>
 801aa7e:	68a2      	ldr	r2, [r4, #8]
 801aa80:	4593      	cmp	fp, r2
 801aa82:	db17      	blt.n	801aab4 <__gethex+0x40c>
 801aa84:	6861      	ldr	r1, [r4, #4]
 801aa86:	4648      	mov	r0, r9
 801aa88:	3101      	adds	r1, #1
 801aa8a:	f7fd ffe3 	bl	8018a54 <_Balloc>
 801aa8e:	4682      	mov	sl, r0
 801aa90:	b918      	cbnz	r0, 801aa9a <__gethex+0x3f2>
 801aa92:	4b1b      	ldr	r3, [pc, #108]	; (801ab00 <__gethex+0x458>)
 801aa94:	4602      	mov	r2, r0
 801aa96:	2184      	movs	r1, #132	; 0x84
 801aa98:	e6b3      	b.n	801a802 <__gethex+0x15a>
 801aa9a:	6922      	ldr	r2, [r4, #16]
 801aa9c:	3202      	adds	r2, #2
 801aa9e:	f104 010c 	add.w	r1, r4, #12
 801aaa2:	0092      	lsls	r2, r2, #2
 801aaa4:	300c      	adds	r0, #12
 801aaa6:	f7fd f844 	bl	8017b32 <memcpy>
 801aaaa:	4621      	mov	r1, r4
 801aaac:	4648      	mov	r0, r9
 801aaae:	f7fe f811 	bl	8018ad4 <_Bfree>
 801aab2:	4654      	mov	r4, sl
 801aab4:	6922      	ldr	r2, [r4, #16]
 801aab6:	1c51      	adds	r1, r2, #1
 801aab8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801aabc:	6121      	str	r1, [r4, #16]
 801aabe:	2101      	movs	r1, #1
 801aac0:	6151      	str	r1, [r2, #20]
 801aac2:	e7bc      	b.n	801aa3e <__gethex+0x396>
 801aac4:	6921      	ldr	r1, [r4, #16]
 801aac6:	4559      	cmp	r1, fp
 801aac8:	dd0b      	ble.n	801aae2 <__gethex+0x43a>
 801aaca:	2101      	movs	r1, #1
 801aacc:	4620      	mov	r0, r4
 801aace:	f7ff fd83 	bl	801a5d8 <rshift>
 801aad2:	68bb      	ldr	r3, [r7, #8]
 801aad4:	3601      	adds	r6, #1
 801aad6:	42b3      	cmp	r3, r6
 801aad8:	f6ff aedb 	blt.w	801a892 <__gethex+0x1ea>
 801aadc:	f04f 0801 	mov.w	r8, #1
 801aae0:	e7c2      	b.n	801aa68 <__gethex+0x3c0>
 801aae2:	f015 051f 	ands.w	r5, r5, #31
 801aae6:	d0f9      	beq.n	801aadc <__gethex+0x434>
 801aae8:	9b01      	ldr	r3, [sp, #4]
 801aaea:	441a      	add	r2, r3
 801aaec:	f1c5 0520 	rsb	r5, r5, #32
 801aaf0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801aaf4:	f7fe f8a0 	bl	8018c38 <__hi0bits>
 801aaf8:	42a8      	cmp	r0, r5
 801aafa:	dbe6      	blt.n	801aaca <__gethex+0x422>
 801aafc:	e7ee      	b.n	801aadc <__gethex+0x434>
 801aafe:	bf00      	nop
 801ab00:	0801e07d 	.word	0x0801e07d

0801ab04 <L_shift>:
 801ab04:	f1c2 0208 	rsb	r2, r2, #8
 801ab08:	0092      	lsls	r2, r2, #2
 801ab0a:	b570      	push	{r4, r5, r6, lr}
 801ab0c:	f1c2 0620 	rsb	r6, r2, #32
 801ab10:	6843      	ldr	r3, [r0, #4]
 801ab12:	6804      	ldr	r4, [r0, #0]
 801ab14:	fa03 f506 	lsl.w	r5, r3, r6
 801ab18:	432c      	orrs	r4, r5
 801ab1a:	40d3      	lsrs	r3, r2
 801ab1c:	6004      	str	r4, [r0, #0]
 801ab1e:	f840 3f04 	str.w	r3, [r0, #4]!
 801ab22:	4288      	cmp	r0, r1
 801ab24:	d3f4      	bcc.n	801ab10 <L_shift+0xc>
 801ab26:	bd70      	pop	{r4, r5, r6, pc}

0801ab28 <__match>:
 801ab28:	b530      	push	{r4, r5, lr}
 801ab2a:	6803      	ldr	r3, [r0, #0]
 801ab2c:	3301      	adds	r3, #1
 801ab2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ab32:	b914      	cbnz	r4, 801ab3a <__match+0x12>
 801ab34:	6003      	str	r3, [r0, #0]
 801ab36:	2001      	movs	r0, #1
 801ab38:	bd30      	pop	{r4, r5, pc}
 801ab3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ab42:	2d19      	cmp	r5, #25
 801ab44:	bf98      	it	ls
 801ab46:	3220      	addls	r2, #32
 801ab48:	42a2      	cmp	r2, r4
 801ab4a:	d0f0      	beq.n	801ab2e <__match+0x6>
 801ab4c:	2000      	movs	r0, #0
 801ab4e:	e7f3      	b.n	801ab38 <__match+0x10>

0801ab50 <__hexnan>:
 801ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab54:	680b      	ldr	r3, [r1, #0]
 801ab56:	6801      	ldr	r1, [r0, #0]
 801ab58:	115e      	asrs	r6, r3, #5
 801ab5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ab5e:	f013 031f 	ands.w	r3, r3, #31
 801ab62:	b087      	sub	sp, #28
 801ab64:	bf18      	it	ne
 801ab66:	3604      	addne	r6, #4
 801ab68:	2500      	movs	r5, #0
 801ab6a:	1f37      	subs	r7, r6, #4
 801ab6c:	4682      	mov	sl, r0
 801ab6e:	4690      	mov	r8, r2
 801ab70:	9301      	str	r3, [sp, #4]
 801ab72:	f846 5c04 	str.w	r5, [r6, #-4]
 801ab76:	46b9      	mov	r9, r7
 801ab78:	463c      	mov	r4, r7
 801ab7a:	9502      	str	r5, [sp, #8]
 801ab7c:	46ab      	mov	fp, r5
 801ab7e:	784a      	ldrb	r2, [r1, #1]
 801ab80:	1c4b      	adds	r3, r1, #1
 801ab82:	9303      	str	r3, [sp, #12]
 801ab84:	b342      	cbz	r2, 801abd8 <__hexnan+0x88>
 801ab86:	4610      	mov	r0, r2
 801ab88:	9105      	str	r1, [sp, #20]
 801ab8a:	9204      	str	r2, [sp, #16]
 801ab8c:	f7ff fd76 	bl	801a67c <__hexdig_fun>
 801ab90:	2800      	cmp	r0, #0
 801ab92:	d14f      	bne.n	801ac34 <__hexnan+0xe4>
 801ab94:	9a04      	ldr	r2, [sp, #16]
 801ab96:	9905      	ldr	r1, [sp, #20]
 801ab98:	2a20      	cmp	r2, #32
 801ab9a:	d818      	bhi.n	801abce <__hexnan+0x7e>
 801ab9c:	9b02      	ldr	r3, [sp, #8]
 801ab9e:	459b      	cmp	fp, r3
 801aba0:	dd13      	ble.n	801abca <__hexnan+0x7a>
 801aba2:	454c      	cmp	r4, r9
 801aba4:	d206      	bcs.n	801abb4 <__hexnan+0x64>
 801aba6:	2d07      	cmp	r5, #7
 801aba8:	dc04      	bgt.n	801abb4 <__hexnan+0x64>
 801abaa:	462a      	mov	r2, r5
 801abac:	4649      	mov	r1, r9
 801abae:	4620      	mov	r0, r4
 801abb0:	f7ff ffa8 	bl	801ab04 <L_shift>
 801abb4:	4544      	cmp	r4, r8
 801abb6:	d950      	bls.n	801ac5a <__hexnan+0x10a>
 801abb8:	2300      	movs	r3, #0
 801abba:	f1a4 0904 	sub.w	r9, r4, #4
 801abbe:	f844 3c04 	str.w	r3, [r4, #-4]
 801abc2:	f8cd b008 	str.w	fp, [sp, #8]
 801abc6:	464c      	mov	r4, r9
 801abc8:	461d      	mov	r5, r3
 801abca:	9903      	ldr	r1, [sp, #12]
 801abcc:	e7d7      	b.n	801ab7e <__hexnan+0x2e>
 801abce:	2a29      	cmp	r2, #41	; 0x29
 801abd0:	d155      	bne.n	801ac7e <__hexnan+0x12e>
 801abd2:	3102      	adds	r1, #2
 801abd4:	f8ca 1000 	str.w	r1, [sl]
 801abd8:	f1bb 0f00 	cmp.w	fp, #0
 801abdc:	d04f      	beq.n	801ac7e <__hexnan+0x12e>
 801abde:	454c      	cmp	r4, r9
 801abe0:	d206      	bcs.n	801abf0 <__hexnan+0xa0>
 801abe2:	2d07      	cmp	r5, #7
 801abe4:	dc04      	bgt.n	801abf0 <__hexnan+0xa0>
 801abe6:	462a      	mov	r2, r5
 801abe8:	4649      	mov	r1, r9
 801abea:	4620      	mov	r0, r4
 801abec:	f7ff ff8a 	bl	801ab04 <L_shift>
 801abf0:	4544      	cmp	r4, r8
 801abf2:	d934      	bls.n	801ac5e <__hexnan+0x10e>
 801abf4:	f1a8 0204 	sub.w	r2, r8, #4
 801abf8:	4623      	mov	r3, r4
 801abfa:	f853 1b04 	ldr.w	r1, [r3], #4
 801abfe:	f842 1f04 	str.w	r1, [r2, #4]!
 801ac02:	429f      	cmp	r7, r3
 801ac04:	d2f9      	bcs.n	801abfa <__hexnan+0xaa>
 801ac06:	1b3b      	subs	r3, r7, r4
 801ac08:	f023 0303 	bic.w	r3, r3, #3
 801ac0c:	3304      	adds	r3, #4
 801ac0e:	3e03      	subs	r6, #3
 801ac10:	3401      	adds	r4, #1
 801ac12:	42a6      	cmp	r6, r4
 801ac14:	bf38      	it	cc
 801ac16:	2304      	movcc	r3, #4
 801ac18:	4443      	add	r3, r8
 801ac1a:	2200      	movs	r2, #0
 801ac1c:	f843 2b04 	str.w	r2, [r3], #4
 801ac20:	429f      	cmp	r7, r3
 801ac22:	d2fb      	bcs.n	801ac1c <__hexnan+0xcc>
 801ac24:	683b      	ldr	r3, [r7, #0]
 801ac26:	b91b      	cbnz	r3, 801ac30 <__hexnan+0xe0>
 801ac28:	4547      	cmp	r7, r8
 801ac2a:	d126      	bne.n	801ac7a <__hexnan+0x12a>
 801ac2c:	2301      	movs	r3, #1
 801ac2e:	603b      	str	r3, [r7, #0]
 801ac30:	2005      	movs	r0, #5
 801ac32:	e025      	b.n	801ac80 <__hexnan+0x130>
 801ac34:	3501      	adds	r5, #1
 801ac36:	2d08      	cmp	r5, #8
 801ac38:	f10b 0b01 	add.w	fp, fp, #1
 801ac3c:	dd06      	ble.n	801ac4c <__hexnan+0xfc>
 801ac3e:	4544      	cmp	r4, r8
 801ac40:	d9c3      	bls.n	801abca <__hexnan+0x7a>
 801ac42:	2300      	movs	r3, #0
 801ac44:	f844 3c04 	str.w	r3, [r4, #-4]
 801ac48:	2501      	movs	r5, #1
 801ac4a:	3c04      	subs	r4, #4
 801ac4c:	6822      	ldr	r2, [r4, #0]
 801ac4e:	f000 000f 	and.w	r0, r0, #15
 801ac52:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ac56:	6020      	str	r0, [r4, #0]
 801ac58:	e7b7      	b.n	801abca <__hexnan+0x7a>
 801ac5a:	2508      	movs	r5, #8
 801ac5c:	e7b5      	b.n	801abca <__hexnan+0x7a>
 801ac5e:	9b01      	ldr	r3, [sp, #4]
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d0df      	beq.n	801ac24 <__hexnan+0xd4>
 801ac64:	f1c3 0320 	rsb	r3, r3, #32
 801ac68:	f04f 32ff 	mov.w	r2, #4294967295
 801ac6c:	40da      	lsrs	r2, r3
 801ac6e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ac72:	4013      	ands	r3, r2
 801ac74:	f846 3c04 	str.w	r3, [r6, #-4]
 801ac78:	e7d4      	b.n	801ac24 <__hexnan+0xd4>
 801ac7a:	3f04      	subs	r7, #4
 801ac7c:	e7d2      	b.n	801ac24 <__hexnan+0xd4>
 801ac7e:	2004      	movs	r0, #4
 801ac80:	b007      	add	sp, #28
 801ac82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac86 <__ascii_mbtowc>:
 801ac86:	b082      	sub	sp, #8
 801ac88:	b901      	cbnz	r1, 801ac8c <__ascii_mbtowc+0x6>
 801ac8a:	a901      	add	r1, sp, #4
 801ac8c:	b142      	cbz	r2, 801aca0 <__ascii_mbtowc+0x1a>
 801ac8e:	b14b      	cbz	r3, 801aca4 <__ascii_mbtowc+0x1e>
 801ac90:	7813      	ldrb	r3, [r2, #0]
 801ac92:	600b      	str	r3, [r1, #0]
 801ac94:	7812      	ldrb	r2, [r2, #0]
 801ac96:	1e10      	subs	r0, r2, #0
 801ac98:	bf18      	it	ne
 801ac9a:	2001      	movne	r0, #1
 801ac9c:	b002      	add	sp, #8
 801ac9e:	4770      	bx	lr
 801aca0:	4610      	mov	r0, r2
 801aca2:	e7fb      	b.n	801ac9c <__ascii_mbtowc+0x16>
 801aca4:	f06f 0001 	mvn.w	r0, #1
 801aca8:	e7f8      	b.n	801ac9c <__ascii_mbtowc+0x16>

0801acaa <_realloc_r>:
 801acaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acae:	4680      	mov	r8, r0
 801acb0:	4614      	mov	r4, r2
 801acb2:	460e      	mov	r6, r1
 801acb4:	b921      	cbnz	r1, 801acc0 <_realloc_r+0x16>
 801acb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801acba:	4611      	mov	r1, r2
 801acbc:	f7fd be3e 	b.w	801893c <_malloc_r>
 801acc0:	b92a      	cbnz	r2, 801acce <_realloc_r+0x24>
 801acc2:	f7fd fdc7 	bl	8018854 <_free_r>
 801acc6:	4625      	mov	r5, r4
 801acc8:	4628      	mov	r0, r5
 801acca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acce:	f000 f842 	bl	801ad56 <_malloc_usable_size_r>
 801acd2:	4284      	cmp	r4, r0
 801acd4:	4607      	mov	r7, r0
 801acd6:	d802      	bhi.n	801acde <_realloc_r+0x34>
 801acd8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801acdc:	d812      	bhi.n	801ad04 <_realloc_r+0x5a>
 801acde:	4621      	mov	r1, r4
 801ace0:	4640      	mov	r0, r8
 801ace2:	f7fd fe2b 	bl	801893c <_malloc_r>
 801ace6:	4605      	mov	r5, r0
 801ace8:	2800      	cmp	r0, #0
 801acea:	d0ed      	beq.n	801acc8 <_realloc_r+0x1e>
 801acec:	42bc      	cmp	r4, r7
 801acee:	4622      	mov	r2, r4
 801acf0:	4631      	mov	r1, r6
 801acf2:	bf28      	it	cs
 801acf4:	463a      	movcs	r2, r7
 801acf6:	f7fc ff1c 	bl	8017b32 <memcpy>
 801acfa:	4631      	mov	r1, r6
 801acfc:	4640      	mov	r0, r8
 801acfe:	f7fd fda9 	bl	8018854 <_free_r>
 801ad02:	e7e1      	b.n	801acc8 <_realloc_r+0x1e>
 801ad04:	4635      	mov	r5, r6
 801ad06:	e7df      	b.n	801acc8 <_realloc_r+0x1e>

0801ad08 <__ascii_wctomb>:
 801ad08:	b149      	cbz	r1, 801ad1e <__ascii_wctomb+0x16>
 801ad0a:	2aff      	cmp	r2, #255	; 0xff
 801ad0c:	bf85      	ittet	hi
 801ad0e:	238a      	movhi	r3, #138	; 0x8a
 801ad10:	6003      	strhi	r3, [r0, #0]
 801ad12:	700a      	strbls	r2, [r1, #0]
 801ad14:	f04f 30ff 	movhi.w	r0, #4294967295
 801ad18:	bf98      	it	ls
 801ad1a:	2001      	movls	r0, #1
 801ad1c:	4770      	bx	lr
 801ad1e:	4608      	mov	r0, r1
 801ad20:	4770      	bx	lr
	...

0801ad24 <fiprintf>:
 801ad24:	b40e      	push	{r1, r2, r3}
 801ad26:	b503      	push	{r0, r1, lr}
 801ad28:	4601      	mov	r1, r0
 801ad2a:	ab03      	add	r3, sp, #12
 801ad2c:	4805      	ldr	r0, [pc, #20]	; (801ad44 <fiprintf+0x20>)
 801ad2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ad32:	6800      	ldr	r0, [r0, #0]
 801ad34:	9301      	str	r3, [sp, #4]
 801ad36:	f000 f83f 	bl	801adb8 <_vfiprintf_r>
 801ad3a:	b002      	add	sp, #8
 801ad3c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ad40:	b003      	add	sp, #12
 801ad42:	4770      	bx	lr
 801ad44:	200003ec 	.word	0x200003ec

0801ad48 <abort>:
 801ad48:	b508      	push	{r3, lr}
 801ad4a:	2006      	movs	r0, #6
 801ad4c:	f000 fa0c 	bl	801b168 <raise>
 801ad50:	2001      	movs	r0, #1
 801ad52:	f7eb f8c5 	bl	8005ee0 <_exit>

0801ad56 <_malloc_usable_size_r>:
 801ad56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ad5a:	1f18      	subs	r0, r3, #4
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	bfbc      	itt	lt
 801ad60:	580b      	ldrlt	r3, [r1, r0]
 801ad62:	18c0      	addlt	r0, r0, r3
 801ad64:	4770      	bx	lr

0801ad66 <__sfputc_r>:
 801ad66:	6893      	ldr	r3, [r2, #8]
 801ad68:	3b01      	subs	r3, #1
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	b410      	push	{r4}
 801ad6e:	6093      	str	r3, [r2, #8]
 801ad70:	da08      	bge.n	801ad84 <__sfputc_r+0x1e>
 801ad72:	6994      	ldr	r4, [r2, #24]
 801ad74:	42a3      	cmp	r3, r4
 801ad76:	db01      	blt.n	801ad7c <__sfputc_r+0x16>
 801ad78:	290a      	cmp	r1, #10
 801ad7a:	d103      	bne.n	801ad84 <__sfputc_r+0x1e>
 801ad7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad80:	f000 b934 	b.w	801afec <__swbuf_r>
 801ad84:	6813      	ldr	r3, [r2, #0]
 801ad86:	1c58      	adds	r0, r3, #1
 801ad88:	6010      	str	r0, [r2, #0]
 801ad8a:	7019      	strb	r1, [r3, #0]
 801ad8c:	4608      	mov	r0, r1
 801ad8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad92:	4770      	bx	lr

0801ad94 <__sfputs_r>:
 801ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad96:	4606      	mov	r6, r0
 801ad98:	460f      	mov	r7, r1
 801ad9a:	4614      	mov	r4, r2
 801ad9c:	18d5      	adds	r5, r2, r3
 801ad9e:	42ac      	cmp	r4, r5
 801ada0:	d101      	bne.n	801ada6 <__sfputs_r+0x12>
 801ada2:	2000      	movs	r0, #0
 801ada4:	e007      	b.n	801adb6 <__sfputs_r+0x22>
 801ada6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801adaa:	463a      	mov	r2, r7
 801adac:	4630      	mov	r0, r6
 801adae:	f7ff ffda 	bl	801ad66 <__sfputc_r>
 801adb2:	1c43      	adds	r3, r0, #1
 801adb4:	d1f3      	bne.n	801ad9e <__sfputs_r+0xa>
 801adb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801adb8 <_vfiprintf_r>:
 801adb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adbc:	460d      	mov	r5, r1
 801adbe:	b09d      	sub	sp, #116	; 0x74
 801adc0:	4614      	mov	r4, r2
 801adc2:	4698      	mov	r8, r3
 801adc4:	4606      	mov	r6, r0
 801adc6:	b118      	cbz	r0, 801add0 <_vfiprintf_r+0x18>
 801adc8:	6a03      	ldr	r3, [r0, #32]
 801adca:	b90b      	cbnz	r3, 801add0 <_vfiprintf_r+0x18>
 801adcc:	f7fc fd98 	bl	8017900 <__sinit>
 801add0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801add2:	07d9      	lsls	r1, r3, #31
 801add4:	d405      	bmi.n	801ade2 <_vfiprintf_r+0x2a>
 801add6:	89ab      	ldrh	r3, [r5, #12]
 801add8:	059a      	lsls	r2, r3, #22
 801adda:	d402      	bmi.n	801ade2 <_vfiprintf_r+0x2a>
 801addc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801adde:	f7fc fea6 	bl	8017b2e <__retarget_lock_acquire_recursive>
 801ade2:	89ab      	ldrh	r3, [r5, #12]
 801ade4:	071b      	lsls	r3, r3, #28
 801ade6:	d501      	bpl.n	801adec <_vfiprintf_r+0x34>
 801ade8:	692b      	ldr	r3, [r5, #16]
 801adea:	b99b      	cbnz	r3, 801ae14 <_vfiprintf_r+0x5c>
 801adec:	4629      	mov	r1, r5
 801adee:	4630      	mov	r0, r6
 801adf0:	f000 f93a 	bl	801b068 <__swsetup_r>
 801adf4:	b170      	cbz	r0, 801ae14 <_vfiprintf_r+0x5c>
 801adf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801adf8:	07dc      	lsls	r4, r3, #31
 801adfa:	d504      	bpl.n	801ae06 <_vfiprintf_r+0x4e>
 801adfc:	f04f 30ff 	mov.w	r0, #4294967295
 801ae00:	b01d      	add	sp, #116	; 0x74
 801ae02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae06:	89ab      	ldrh	r3, [r5, #12]
 801ae08:	0598      	lsls	r0, r3, #22
 801ae0a:	d4f7      	bmi.n	801adfc <_vfiprintf_r+0x44>
 801ae0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae0e:	f7fc fe8f 	bl	8017b30 <__retarget_lock_release_recursive>
 801ae12:	e7f3      	b.n	801adfc <_vfiprintf_r+0x44>
 801ae14:	2300      	movs	r3, #0
 801ae16:	9309      	str	r3, [sp, #36]	; 0x24
 801ae18:	2320      	movs	r3, #32
 801ae1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ae1e:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae22:	2330      	movs	r3, #48	; 0x30
 801ae24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801afd8 <_vfiprintf_r+0x220>
 801ae28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ae2c:	f04f 0901 	mov.w	r9, #1
 801ae30:	4623      	mov	r3, r4
 801ae32:	469a      	mov	sl, r3
 801ae34:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae38:	b10a      	cbz	r2, 801ae3e <_vfiprintf_r+0x86>
 801ae3a:	2a25      	cmp	r2, #37	; 0x25
 801ae3c:	d1f9      	bne.n	801ae32 <_vfiprintf_r+0x7a>
 801ae3e:	ebba 0b04 	subs.w	fp, sl, r4
 801ae42:	d00b      	beq.n	801ae5c <_vfiprintf_r+0xa4>
 801ae44:	465b      	mov	r3, fp
 801ae46:	4622      	mov	r2, r4
 801ae48:	4629      	mov	r1, r5
 801ae4a:	4630      	mov	r0, r6
 801ae4c:	f7ff ffa2 	bl	801ad94 <__sfputs_r>
 801ae50:	3001      	adds	r0, #1
 801ae52:	f000 80a9 	beq.w	801afa8 <_vfiprintf_r+0x1f0>
 801ae56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae58:	445a      	add	r2, fp
 801ae5a:	9209      	str	r2, [sp, #36]	; 0x24
 801ae5c:	f89a 3000 	ldrb.w	r3, [sl]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	f000 80a1 	beq.w	801afa8 <_vfiprintf_r+0x1f0>
 801ae66:	2300      	movs	r3, #0
 801ae68:	f04f 32ff 	mov.w	r2, #4294967295
 801ae6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ae70:	f10a 0a01 	add.w	sl, sl, #1
 801ae74:	9304      	str	r3, [sp, #16]
 801ae76:	9307      	str	r3, [sp, #28]
 801ae78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ae7c:	931a      	str	r3, [sp, #104]	; 0x68
 801ae7e:	4654      	mov	r4, sl
 801ae80:	2205      	movs	r2, #5
 801ae82:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae86:	4854      	ldr	r0, [pc, #336]	; (801afd8 <_vfiprintf_r+0x220>)
 801ae88:	f7e5 f9ca 	bl	8000220 <memchr>
 801ae8c:	9a04      	ldr	r2, [sp, #16]
 801ae8e:	b9d8      	cbnz	r0, 801aec8 <_vfiprintf_r+0x110>
 801ae90:	06d1      	lsls	r1, r2, #27
 801ae92:	bf44      	itt	mi
 801ae94:	2320      	movmi	r3, #32
 801ae96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae9a:	0713      	lsls	r3, r2, #28
 801ae9c:	bf44      	itt	mi
 801ae9e:	232b      	movmi	r3, #43	; 0x2b
 801aea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aea4:	f89a 3000 	ldrb.w	r3, [sl]
 801aea8:	2b2a      	cmp	r3, #42	; 0x2a
 801aeaa:	d015      	beq.n	801aed8 <_vfiprintf_r+0x120>
 801aeac:	9a07      	ldr	r2, [sp, #28]
 801aeae:	4654      	mov	r4, sl
 801aeb0:	2000      	movs	r0, #0
 801aeb2:	f04f 0c0a 	mov.w	ip, #10
 801aeb6:	4621      	mov	r1, r4
 801aeb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aebc:	3b30      	subs	r3, #48	; 0x30
 801aebe:	2b09      	cmp	r3, #9
 801aec0:	d94d      	bls.n	801af5e <_vfiprintf_r+0x1a6>
 801aec2:	b1b0      	cbz	r0, 801aef2 <_vfiprintf_r+0x13a>
 801aec4:	9207      	str	r2, [sp, #28]
 801aec6:	e014      	b.n	801aef2 <_vfiprintf_r+0x13a>
 801aec8:	eba0 0308 	sub.w	r3, r0, r8
 801aecc:	fa09 f303 	lsl.w	r3, r9, r3
 801aed0:	4313      	orrs	r3, r2
 801aed2:	9304      	str	r3, [sp, #16]
 801aed4:	46a2      	mov	sl, r4
 801aed6:	e7d2      	b.n	801ae7e <_vfiprintf_r+0xc6>
 801aed8:	9b03      	ldr	r3, [sp, #12]
 801aeda:	1d19      	adds	r1, r3, #4
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	9103      	str	r1, [sp, #12]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	bfbb      	ittet	lt
 801aee4:	425b      	neglt	r3, r3
 801aee6:	f042 0202 	orrlt.w	r2, r2, #2
 801aeea:	9307      	strge	r3, [sp, #28]
 801aeec:	9307      	strlt	r3, [sp, #28]
 801aeee:	bfb8      	it	lt
 801aef0:	9204      	strlt	r2, [sp, #16]
 801aef2:	7823      	ldrb	r3, [r4, #0]
 801aef4:	2b2e      	cmp	r3, #46	; 0x2e
 801aef6:	d10c      	bne.n	801af12 <_vfiprintf_r+0x15a>
 801aef8:	7863      	ldrb	r3, [r4, #1]
 801aefa:	2b2a      	cmp	r3, #42	; 0x2a
 801aefc:	d134      	bne.n	801af68 <_vfiprintf_r+0x1b0>
 801aefe:	9b03      	ldr	r3, [sp, #12]
 801af00:	1d1a      	adds	r2, r3, #4
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	9203      	str	r2, [sp, #12]
 801af06:	2b00      	cmp	r3, #0
 801af08:	bfb8      	it	lt
 801af0a:	f04f 33ff 	movlt.w	r3, #4294967295
 801af0e:	3402      	adds	r4, #2
 801af10:	9305      	str	r3, [sp, #20]
 801af12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801afe8 <_vfiprintf_r+0x230>
 801af16:	7821      	ldrb	r1, [r4, #0]
 801af18:	2203      	movs	r2, #3
 801af1a:	4650      	mov	r0, sl
 801af1c:	f7e5 f980 	bl	8000220 <memchr>
 801af20:	b138      	cbz	r0, 801af32 <_vfiprintf_r+0x17a>
 801af22:	9b04      	ldr	r3, [sp, #16]
 801af24:	eba0 000a 	sub.w	r0, r0, sl
 801af28:	2240      	movs	r2, #64	; 0x40
 801af2a:	4082      	lsls	r2, r0
 801af2c:	4313      	orrs	r3, r2
 801af2e:	3401      	adds	r4, #1
 801af30:	9304      	str	r3, [sp, #16]
 801af32:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af36:	4829      	ldr	r0, [pc, #164]	; (801afdc <_vfiprintf_r+0x224>)
 801af38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801af3c:	2206      	movs	r2, #6
 801af3e:	f7e5 f96f 	bl	8000220 <memchr>
 801af42:	2800      	cmp	r0, #0
 801af44:	d03f      	beq.n	801afc6 <_vfiprintf_r+0x20e>
 801af46:	4b26      	ldr	r3, [pc, #152]	; (801afe0 <_vfiprintf_r+0x228>)
 801af48:	bb1b      	cbnz	r3, 801af92 <_vfiprintf_r+0x1da>
 801af4a:	9b03      	ldr	r3, [sp, #12]
 801af4c:	3307      	adds	r3, #7
 801af4e:	f023 0307 	bic.w	r3, r3, #7
 801af52:	3308      	adds	r3, #8
 801af54:	9303      	str	r3, [sp, #12]
 801af56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af58:	443b      	add	r3, r7
 801af5a:	9309      	str	r3, [sp, #36]	; 0x24
 801af5c:	e768      	b.n	801ae30 <_vfiprintf_r+0x78>
 801af5e:	fb0c 3202 	mla	r2, ip, r2, r3
 801af62:	460c      	mov	r4, r1
 801af64:	2001      	movs	r0, #1
 801af66:	e7a6      	b.n	801aeb6 <_vfiprintf_r+0xfe>
 801af68:	2300      	movs	r3, #0
 801af6a:	3401      	adds	r4, #1
 801af6c:	9305      	str	r3, [sp, #20]
 801af6e:	4619      	mov	r1, r3
 801af70:	f04f 0c0a 	mov.w	ip, #10
 801af74:	4620      	mov	r0, r4
 801af76:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af7a:	3a30      	subs	r2, #48	; 0x30
 801af7c:	2a09      	cmp	r2, #9
 801af7e:	d903      	bls.n	801af88 <_vfiprintf_r+0x1d0>
 801af80:	2b00      	cmp	r3, #0
 801af82:	d0c6      	beq.n	801af12 <_vfiprintf_r+0x15a>
 801af84:	9105      	str	r1, [sp, #20]
 801af86:	e7c4      	b.n	801af12 <_vfiprintf_r+0x15a>
 801af88:	fb0c 2101 	mla	r1, ip, r1, r2
 801af8c:	4604      	mov	r4, r0
 801af8e:	2301      	movs	r3, #1
 801af90:	e7f0      	b.n	801af74 <_vfiprintf_r+0x1bc>
 801af92:	ab03      	add	r3, sp, #12
 801af94:	9300      	str	r3, [sp, #0]
 801af96:	462a      	mov	r2, r5
 801af98:	4b12      	ldr	r3, [pc, #72]	; (801afe4 <_vfiprintf_r+0x22c>)
 801af9a:	a904      	add	r1, sp, #16
 801af9c:	4630      	mov	r0, r6
 801af9e:	f7fb fe4d 	bl	8016c3c <_printf_float>
 801afa2:	4607      	mov	r7, r0
 801afa4:	1c78      	adds	r0, r7, #1
 801afa6:	d1d6      	bne.n	801af56 <_vfiprintf_r+0x19e>
 801afa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801afaa:	07d9      	lsls	r1, r3, #31
 801afac:	d405      	bmi.n	801afba <_vfiprintf_r+0x202>
 801afae:	89ab      	ldrh	r3, [r5, #12]
 801afb0:	059a      	lsls	r2, r3, #22
 801afb2:	d402      	bmi.n	801afba <_vfiprintf_r+0x202>
 801afb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801afb6:	f7fc fdbb 	bl	8017b30 <__retarget_lock_release_recursive>
 801afba:	89ab      	ldrh	r3, [r5, #12]
 801afbc:	065b      	lsls	r3, r3, #25
 801afbe:	f53f af1d 	bmi.w	801adfc <_vfiprintf_r+0x44>
 801afc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801afc4:	e71c      	b.n	801ae00 <_vfiprintf_r+0x48>
 801afc6:	ab03      	add	r3, sp, #12
 801afc8:	9300      	str	r3, [sp, #0]
 801afca:	462a      	mov	r2, r5
 801afcc:	4b05      	ldr	r3, [pc, #20]	; (801afe4 <_vfiprintf_r+0x22c>)
 801afce:	a904      	add	r1, sp, #16
 801afd0:	4630      	mov	r0, r6
 801afd2:	f7fc f8d7 	bl	8017184 <_printf_i>
 801afd6:	e7e4      	b.n	801afa2 <_vfiprintf_r+0x1ea>
 801afd8:	0801e339 	.word	0x0801e339
 801afdc:	0801e343 	.word	0x0801e343
 801afe0:	08016c3d 	.word	0x08016c3d
 801afe4:	0801ad95 	.word	0x0801ad95
 801afe8:	0801e33f 	.word	0x0801e33f

0801afec <__swbuf_r>:
 801afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afee:	460e      	mov	r6, r1
 801aff0:	4614      	mov	r4, r2
 801aff2:	4605      	mov	r5, r0
 801aff4:	b118      	cbz	r0, 801affe <__swbuf_r+0x12>
 801aff6:	6a03      	ldr	r3, [r0, #32]
 801aff8:	b90b      	cbnz	r3, 801affe <__swbuf_r+0x12>
 801affa:	f7fc fc81 	bl	8017900 <__sinit>
 801affe:	69a3      	ldr	r3, [r4, #24]
 801b000:	60a3      	str	r3, [r4, #8]
 801b002:	89a3      	ldrh	r3, [r4, #12]
 801b004:	071a      	lsls	r2, r3, #28
 801b006:	d525      	bpl.n	801b054 <__swbuf_r+0x68>
 801b008:	6923      	ldr	r3, [r4, #16]
 801b00a:	b31b      	cbz	r3, 801b054 <__swbuf_r+0x68>
 801b00c:	6823      	ldr	r3, [r4, #0]
 801b00e:	6922      	ldr	r2, [r4, #16]
 801b010:	1a98      	subs	r0, r3, r2
 801b012:	6963      	ldr	r3, [r4, #20]
 801b014:	b2f6      	uxtb	r6, r6
 801b016:	4283      	cmp	r3, r0
 801b018:	4637      	mov	r7, r6
 801b01a:	dc04      	bgt.n	801b026 <__swbuf_r+0x3a>
 801b01c:	4621      	mov	r1, r4
 801b01e:	4628      	mov	r0, r5
 801b020:	f7ff fa3a 	bl	801a498 <_fflush_r>
 801b024:	b9e0      	cbnz	r0, 801b060 <__swbuf_r+0x74>
 801b026:	68a3      	ldr	r3, [r4, #8]
 801b028:	3b01      	subs	r3, #1
 801b02a:	60a3      	str	r3, [r4, #8]
 801b02c:	6823      	ldr	r3, [r4, #0]
 801b02e:	1c5a      	adds	r2, r3, #1
 801b030:	6022      	str	r2, [r4, #0]
 801b032:	701e      	strb	r6, [r3, #0]
 801b034:	6962      	ldr	r2, [r4, #20]
 801b036:	1c43      	adds	r3, r0, #1
 801b038:	429a      	cmp	r2, r3
 801b03a:	d004      	beq.n	801b046 <__swbuf_r+0x5a>
 801b03c:	89a3      	ldrh	r3, [r4, #12]
 801b03e:	07db      	lsls	r3, r3, #31
 801b040:	d506      	bpl.n	801b050 <__swbuf_r+0x64>
 801b042:	2e0a      	cmp	r6, #10
 801b044:	d104      	bne.n	801b050 <__swbuf_r+0x64>
 801b046:	4621      	mov	r1, r4
 801b048:	4628      	mov	r0, r5
 801b04a:	f7ff fa25 	bl	801a498 <_fflush_r>
 801b04e:	b938      	cbnz	r0, 801b060 <__swbuf_r+0x74>
 801b050:	4638      	mov	r0, r7
 801b052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b054:	4621      	mov	r1, r4
 801b056:	4628      	mov	r0, r5
 801b058:	f000 f806 	bl	801b068 <__swsetup_r>
 801b05c:	2800      	cmp	r0, #0
 801b05e:	d0d5      	beq.n	801b00c <__swbuf_r+0x20>
 801b060:	f04f 37ff 	mov.w	r7, #4294967295
 801b064:	e7f4      	b.n	801b050 <__swbuf_r+0x64>
	...

0801b068 <__swsetup_r>:
 801b068:	b538      	push	{r3, r4, r5, lr}
 801b06a:	4b2a      	ldr	r3, [pc, #168]	; (801b114 <__swsetup_r+0xac>)
 801b06c:	4605      	mov	r5, r0
 801b06e:	6818      	ldr	r0, [r3, #0]
 801b070:	460c      	mov	r4, r1
 801b072:	b118      	cbz	r0, 801b07c <__swsetup_r+0x14>
 801b074:	6a03      	ldr	r3, [r0, #32]
 801b076:	b90b      	cbnz	r3, 801b07c <__swsetup_r+0x14>
 801b078:	f7fc fc42 	bl	8017900 <__sinit>
 801b07c:	89a3      	ldrh	r3, [r4, #12]
 801b07e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b082:	0718      	lsls	r0, r3, #28
 801b084:	d422      	bmi.n	801b0cc <__swsetup_r+0x64>
 801b086:	06d9      	lsls	r1, r3, #27
 801b088:	d407      	bmi.n	801b09a <__swsetup_r+0x32>
 801b08a:	2309      	movs	r3, #9
 801b08c:	602b      	str	r3, [r5, #0]
 801b08e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b092:	81a3      	strh	r3, [r4, #12]
 801b094:	f04f 30ff 	mov.w	r0, #4294967295
 801b098:	e034      	b.n	801b104 <__swsetup_r+0x9c>
 801b09a:	0758      	lsls	r0, r3, #29
 801b09c:	d512      	bpl.n	801b0c4 <__swsetup_r+0x5c>
 801b09e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b0a0:	b141      	cbz	r1, 801b0b4 <__swsetup_r+0x4c>
 801b0a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b0a6:	4299      	cmp	r1, r3
 801b0a8:	d002      	beq.n	801b0b0 <__swsetup_r+0x48>
 801b0aa:	4628      	mov	r0, r5
 801b0ac:	f7fd fbd2 	bl	8018854 <_free_r>
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	6363      	str	r3, [r4, #52]	; 0x34
 801b0b4:	89a3      	ldrh	r3, [r4, #12]
 801b0b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b0ba:	81a3      	strh	r3, [r4, #12]
 801b0bc:	2300      	movs	r3, #0
 801b0be:	6063      	str	r3, [r4, #4]
 801b0c0:	6923      	ldr	r3, [r4, #16]
 801b0c2:	6023      	str	r3, [r4, #0]
 801b0c4:	89a3      	ldrh	r3, [r4, #12]
 801b0c6:	f043 0308 	orr.w	r3, r3, #8
 801b0ca:	81a3      	strh	r3, [r4, #12]
 801b0cc:	6923      	ldr	r3, [r4, #16]
 801b0ce:	b94b      	cbnz	r3, 801b0e4 <__swsetup_r+0x7c>
 801b0d0:	89a3      	ldrh	r3, [r4, #12]
 801b0d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b0d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b0da:	d003      	beq.n	801b0e4 <__swsetup_r+0x7c>
 801b0dc:	4621      	mov	r1, r4
 801b0de:	4628      	mov	r0, r5
 801b0e0:	f000 f884 	bl	801b1ec <__smakebuf_r>
 801b0e4:	89a0      	ldrh	r0, [r4, #12]
 801b0e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b0ea:	f010 0301 	ands.w	r3, r0, #1
 801b0ee:	d00a      	beq.n	801b106 <__swsetup_r+0x9e>
 801b0f0:	2300      	movs	r3, #0
 801b0f2:	60a3      	str	r3, [r4, #8]
 801b0f4:	6963      	ldr	r3, [r4, #20]
 801b0f6:	425b      	negs	r3, r3
 801b0f8:	61a3      	str	r3, [r4, #24]
 801b0fa:	6923      	ldr	r3, [r4, #16]
 801b0fc:	b943      	cbnz	r3, 801b110 <__swsetup_r+0xa8>
 801b0fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b102:	d1c4      	bne.n	801b08e <__swsetup_r+0x26>
 801b104:	bd38      	pop	{r3, r4, r5, pc}
 801b106:	0781      	lsls	r1, r0, #30
 801b108:	bf58      	it	pl
 801b10a:	6963      	ldrpl	r3, [r4, #20]
 801b10c:	60a3      	str	r3, [r4, #8]
 801b10e:	e7f4      	b.n	801b0fa <__swsetup_r+0x92>
 801b110:	2000      	movs	r0, #0
 801b112:	e7f7      	b.n	801b104 <__swsetup_r+0x9c>
 801b114:	200003ec 	.word	0x200003ec

0801b118 <_raise_r>:
 801b118:	291f      	cmp	r1, #31
 801b11a:	b538      	push	{r3, r4, r5, lr}
 801b11c:	4604      	mov	r4, r0
 801b11e:	460d      	mov	r5, r1
 801b120:	d904      	bls.n	801b12c <_raise_r+0x14>
 801b122:	2316      	movs	r3, #22
 801b124:	6003      	str	r3, [r0, #0]
 801b126:	f04f 30ff 	mov.w	r0, #4294967295
 801b12a:	bd38      	pop	{r3, r4, r5, pc}
 801b12c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b12e:	b112      	cbz	r2, 801b136 <_raise_r+0x1e>
 801b130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b134:	b94b      	cbnz	r3, 801b14a <_raise_r+0x32>
 801b136:	4620      	mov	r0, r4
 801b138:	f000 f830 	bl	801b19c <_getpid_r>
 801b13c:	462a      	mov	r2, r5
 801b13e:	4601      	mov	r1, r0
 801b140:	4620      	mov	r0, r4
 801b142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b146:	f000 b817 	b.w	801b178 <_kill_r>
 801b14a:	2b01      	cmp	r3, #1
 801b14c:	d00a      	beq.n	801b164 <_raise_r+0x4c>
 801b14e:	1c59      	adds	r1, r3, #1
 801b150:	d103      	bne.n	801b15a <_raise_r+0x42>
 801b152:	2316      	movs	r3, #22
 801b154:	6003      	str	r3, [r0, #0]
 801b156:	2001      	movs	r0, #1
 801b158:	e7e7      	b.n	801b12a <_raise_r+0x12>
 801b15a:	2400      	movs	r4, #0
 801b15c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b160:	4628      	mov	r0, r5
 801b162:	4798      	blx	r3
 801b164:	2000      	movs	r0, #0
 801b166:	e7e0      	b.n	801b12a <_raise_r+0x12>

0801b168 <raise>:
 801b168:	4b02      	ldr	r3, [pc, #8]	; (801b174 <raise+0xc>)
 801b16a:	4601      	mov	r1, r0
 801b16c:	6818      	ldr	r0, [r3, #0]
 801b16e:	f7ff bfd3 	b.w	801b118 <_raise_r>
 801b172:	bf00      	nop
 801b174:	200003ec 	.word	0x200003ec

0801b178 <_kill_r>:
 801b178:	b538      	push	{r3, r4, r5, lr}
 801b17a:	4d07      	ldr	r5, [pc, #28]	; (801b198 <_kill_r+0x20>)
 801b17c:	2300      	movs	r3, #0
 801b17e:	4604      	mov	r4, r0
 801b180:	4608      	mov	r0, r1
 801b182:	4611      	mov	r1, r2
 801b184:	602b      	str	r3, [r5, #0]
 801b186:	f7ea fe9b 	bl	8005ec0 <_kill>
 801b18a:	1c43      	adds	r3, r0, #1
 801b18c:	d102      	bne.n	801b194 <_kill_r+0x1c>
 801b18e:	682b      	ldr	r3, [r5, #0]
 801b190:	b103      	cbz	r3, 801b194 <_kill_r+0x1c>
 801b192:	6023      	str	r3, [r4, #0]
 801b194:	bd38      	pop	{r3, r4, r5, pc}
 801b196:	bf00      	nop
 801b198:	20003718 	.word	0x20003718

0801b19c <_getpid_r>:
 801b19c:	f7ea be88 	b.w	8005eb0 <_getpid>

0801b1a0 <__swhatbuf_r>:
 801b1a0:	b570      	push	{r4, r5, r6, lr}
 801b1a2:	460c      	mov	r4, r1
 801b1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1a8:	2900      	cmp	r1, #0
 801b1aa:	b096      	sub	sp, #88	; 0x58
 801b1ac:	4615      	mov	r5, r2
 801b1ae:	461e      	mov	r6, r3
 801b1b0:	da0d      	bge.n	801b1ce <__swhatbuf_r+0x2e>
 801b1b2:	89a3      	ldrh	r3, [r4, #12]
 801b1b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b1b8:	f04f 0100 	mov.w	r1, #0
 801b1bc:	bf0c      	ite	eq
 801b1be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b1c2:	2340      	movne	r3, #64	; 0x40
 801b1c4:	2000      	movs	r0, #0
 801b1c6:	6031      	str	r1, [r6, #0]
 801b1c8:	602b      	str	r3, [r5, #0]
 801b1ca:	b016      	add	sp, #88	; 0x58
 801b1cc:	bd70      	pop	{r4, r5, r6, pc}
 801b1ce:	466a      	mov	r2, sp
 801b1d0:	f000 f848 	bl	801b264 <_fstat_r>
 801b1d4:	2800      	cmp	r0, #0
 801b1d6:	dbec      	blt.n	801b1b2 <__swhatbuf_r+0x12>
 801b1d8:	9901      	ldr	r1, [sp, #4]
 801b1da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b1de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b1e2:	4259      	negs	r1, r3
 801b1e4:	4159      	adcs	r1, r3
 801b1e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b1ea:	e7eb      	b.n	801b1c4 <__swhatbuf_r+0x24>

0801b1ec <__smakebuf_r>:
 801b1ec:	898b      	ldrh	r3, [r1, #12]
 801b1ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b1f0:	079d      	lsls	r5, r3, #30
 801b1f2:	4606      	mov	r6, r0
 801b1f4:	460c      	mov	r4, r1
 801b1f6:	d507      	bpl.n	801b208 <__smakebuf_r+0x1c>
 801b1f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b1fc:	6023      	str	r3, [r4, #0]
 801b1fe:	6123      	str	r3, [r4, #16]
 801b200:	2301      	movs	r3, #1
 801b202:	6163      	str	r3, [r4, #20]
 801b204:	b002      	add	sp, #8
 801b206:	bd70      	pop	{r4, r5, r6, pc}
 801b208:	ab01      	add	r3, sp, #4
 801b20a:	466a      	mov	r2, sp
 801b20c:	f7ff ffc8 	bl	801b1a0 <__swhatbuf_r>
 801b210:	9900      	ldr	r1, [sp, #0]
 801b212:	4605      	mov	r5, r0
 801b214:	4630      	mov	r0, r6
 801b216:	f7fd fb91 	bl	801893c <_malloc_r>
 801b21a:	b948      	cbnz	r0, 801b230 <__smakebuf_r+0x44>
 801b21c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b220:	059a      	lsls	r2, r3, #22
 801b222:	d4ef      	bmi.n	801b204 <__smakebuf_r+0x18>
 801b224:	f023 0303 	bic.w	r3, r3, #3
 801b228:	f043 0302 	orr.w	r3, r3, #2
 801b22c:	81a3      	strh	r3, [r4, #12]
 801b22e:	e7e3      	b.n	801b1f8 <__smakebuf_r+0xc>
 801b230:	89a3      	ldrh	r3, [r4, #12]
 801b232:	6020      	str	r0, [r4, #0]
 801b234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b238:	81a3      	strh	r3, [r4, #12]
 801b23a:	9b00      	ldr	r3, [sp, #0]
 801b23c:	6163      	str	r3, [r4, #20]
 801b23e:	9b01      	ldr	r3, [sp, #4]
 801b240:	6120      	str	r0, [r4, #16]
 801b242:	b15b      	cbz	r3, 801b25c <__smakebuf_r+0x70>
 801b244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b248:	4630      	mov	r0, r6
 801b24a:	f000 f81d 	bl	801b288 <_isatty_r>
 801b24e:	b128      	cbz	r0, 801b25c <__smakebuf_r+0x70>
 801b250:	89a3      	ldrh	r3, [r4, #12]
 801b252:	f023 0303 	bic.w	r3, r3, #3
 801b256:	f043 0301 	orr.w	r3, r3, #1
 801b25a:	81a3      	strh	r3, [r4, #12]
 801b25c:	89a3      	ldrh	r3, [r4, #12]
 801b25e:	431d      	orrs	r5, r3
 801b260:	81a5      	strh	r5, [r4, #12]
 801b262:	e7cf      	b.n	801b204 <__smakebuf_r+0x18>

0801b264 <_fstat_r>:
 801b264:	b538      	push	{r3, r4, r5, lr}
 801b266:	4d07      	ldr	r5, [pc, #28]	; (801b284 <_fstat_r+0x20>)
 801b268:	2300      	movs	r3, #0
 801b26a:	4604      	mov	r4, r0
 801b26c:	4608      	mov	r0, r1
 801b26e:	4611      	mov	r1, r2
 801b270:	602b      	str	r3, [r5, #0]
 801b272:	f7ea fe84 	bl	8005f7e <_fstat>
 801b276:	1c43      	adds	r3, r0, #1
 801b278:	d102      	bne.n	801b280 <_fstat_r+0x1c>
 801b27a:	682b      	ldr	r3, [r5, #0]
 801b27c:	b103      	cbz	r3, 801b280 <_fstat_r+0x1c>
 801b27e:	6023      	str	r3, [r4, #0]
 801b280:	bd38      	pop	{r3, r4, r5, pc}
 801b282:	bf00      	nop
 801b284:	20003718 	.word	0x20003718

0801b288 <_isatty_r>:
 801b288:	b538      	push	{r3, r4, r5, lr}
 801b28a:	4d06      	ldr	r5, [pc, #24]	; (801b2a4 <_isatty_r+0x1c>)
 801b28c:	2300      	movs	r3, #0
 801b28e:	4604      	mov	r4, r0
 801b290:	4608      	mov	r0, r1
 801b292:	602b      	str	r3, [r5, #0]
 801b294:	f7ea fe83 	bl	8005f9e <_isatty>
 801b298:	1c43      	adds	r3, r0, #1
 801b29a:	d102      	bne.n	801b2a2 <_isatty_r+0x1a>
 801b29c:	682b      	ldr	r3, [r5, #0]
 801b29e:	b103      	cbz	r3, 801b2a2 <_isatty_r+0x1a>
 801b2a0:	6023      	str	r3, [r4, #0]
 801b2a2:	bd38      	pop	{r3, r4, r5, pc}
 801b2a4:	20003718 	.word	0x20003718

0801b2a8 <fmod>:
 801b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2aa:	ed2d 8b02 	vpush	{d8}
 801b2ae:	ec57 6b10 	vmov	r6, r7, d0
 801b2b2:	ec55 4b11 	vmov	r4, r5, d1
 801b2b6:	f000 f86d 	bl	801b394 <__ieee754_fmod>
 801b2ba:	4622      	mov	r2, r4
 801b2bc:	462b      	mov	r3, r5
 801b2be:	4630      	mov	r0, r6
 801b2c0:	4639      	mov	r1, r7
 801b2c2:	eeb0 8a40 	vmov.f32	s16, s0
 801b2c6:	eef0 8a60 	vmov.f32	s17, s1
 801b2ca:	f7e5 fc57 	bl	8000b7c <__aeabi_dcmpun>
 801b2ce:	b990      	cbnz	r0, 801b2f6 <fmod+0x4e>
 801b2d0:	2200      	movs	r2, #0
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	4620      	mov	r0, r4
 801b2d6:	4629      	mov	r1, r5
 801b2d8:	f7e5 fc1e 	bl	8000b18 <__aeabi_dcmpeq>
 801b2dc:	b158      	cbz	r0, 801b2f6 <fmod+0x4e>
 801b2de:	f7fc fbfb 	bl	8017ad8 <__errno>
 801b2e2:	2321      	movs	r3, #33	; 0x21
 801b2e4:	6003      	str	r3, [r0, #0]
 801b2e6:	2200      	movs	r2, #0
 801b2e8:	2300      	movs	r3, #0
 801b2ea:	4610      	mov	r0, r2
 801b2ec:	4619      	mov	r1, r3
 801b2ee:	f7e5 fad5 	bl	800089c <__aeabi_ddiv>
 801b2f2:	ec41 0b18 	vmov	d8, r0, r1
 801b2f6:	eeb0 0a48 	vmov.f32	s0, s16
 801b2fa:	eef0 0a68 	vmov.f32	s1, s17
 801b2fe:	ecbd 8b02 	vpop	{d8}
 801b302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b304 <round>:
 801b304:	ec53 2b10 	vmov	r2, r3, d0
 801b308:	b570      	push	{r4, r5, r6, lr}
 801b30a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801b30e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801b312:	2813      	cmp	r0, #19
 801b314:	ee10 5a10 	vmov	r5, s0
 801b318:	4619      	mov	r1, r3
 801b31a:	dc18      	bgt.n	801b34e <round+0x4a>
 801b31c:	2800      	cmp	r0, #0
 801b31e:	da09      	bge.n	801b334 <round+0x30>
 801b320:	3001      	adds	r0, #1
 801b322:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801b326:	d103      	bne.n	801b330 <round+0x2c>
 801b328:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801b32c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801b330:	2300      	movs	r3, #0
 801b332:	e02a      	b.n	801b38a <round+0x86>
 801b334:	4c16      	ldr	r4, [pc, #88]	; (801b390 <round+0x8c>)
 801b336:	4104      	asrs	r4, r0
 801b338:	ea03 0604 	and.w	r6, r3, r4
 801b33c:	4316      	orrs	r6, r2
 801b33e:	d011      	beq.n	801b364 <round+0x60>
 801b340:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801b344:	4103      	asrs	r3, r0
 801b346:	440b      	add	r3, r1
 801b348:	ea23 0104 	bic.w	r1, r3, r4
 801b34c:	e7f0      	b.n	801b330 <round+0x2c>
 801b34e:	2833      	cmp	r0, #51	; 0x33
 801b350:	dd0b      	ble.n	801b36a <round+0x66>
 801b352:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801b356:	d105      	bne.n	801b364 <round+0x60>
 801b358:	ee10 0a10 	vmov	r0, s0
 801b35c:	f7e4 ffbe 	bl	80002dc <__adddf3>
 801b360:	4602      	mov	r2, r0
 801b362:	460b      	mov	r3, r1
 801b364:	ec43 2b10 	vmov	d0, r2, r3
 801b368:	bd70      	pop	{r4, r5, r6, pc}
 801b36a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801b36e:	f04f 34ff 	mov.w	r4, #4294967295
 801b372:	40f4      	lsrs	r4, r6
 801b374:	4214      	tst	r4, r2
 801b376:	d0f5      	beq.n	801b364 <round+0x60>
 801b378:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801b37c:	2301      	movs	r3, #1
 801b37e:	4083      	lsls	r3, r0
 801b380:	195b      	adds	r3, r3, r5
 801b382:	bf28      	it	cs
 801b384:	3101      	addcs	r1, #1
 801b386:	ea23 0304 	bic.w	r3, r3, r4
 801b38a:	461a      	mov	r2, r3
 801b38c:	460b      	mov	r3, r1
 801b38e:	e7e9      	b.n	801b364 <round+0x60>
 801b390:	000fffff 	.word	0x000fffff

0801b394 <__ieee754_fmod>:
 801b394:	ec53 2b11 	vmov	r2, r3, d1
 801b398:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801b39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3a0:	ea5c 0402 	orrs.w	r4, ip, r2
 801b3a4:	ec51 0b10 	vmov	r0, r1, d0
 801b3a8:	ee11 7a10 	vmov	r7, s2
 801b3ac:	ee11 ea10 	vmov	lr, s2
 801b3b0:	461e      	mov	r6, r3
 801b3b2:	d00c      	beq.n	801b3ce <__ieee754_fmod+0x3a>
 801b3b4:	4c78      	ldr	r4, [pc, #480]	; (801b598 <__ieee754_fmod+0x204>)
 801b3b6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801b3ba:	45a0      	cmp	r8, r4
 801b3bc:	4689      	mov	r9, r1
 801b3be:	dc06      	bgt.n	801b3ce <__ieee754_fmod+0x3a>
 801b3c0:	4254      	negs	r4, r2
 801b3c2:	4d76      	ldr	r5, [pc, #472]	; (801b59c <__ieee754_fmod+0x208>)
 801b3c4:	4314      	orrs	r4, r2
 801b3c6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801b3ca:	42ac      	cmp	r4, r5
 801b3cc:	d909      	bls.n	801b3e2 <__ieee754_fmod+0x4e>
 801b3ce:	f7e5 f93b 	bl	8000648 <__aeabi_dmul>
 801b3d2:	4602      	mov	r2, r0
 801b3d4:	460b      	mov	r3, r1
 801b3d6:	f7e5 fa61 	bl	800089c <__aeabi_ddiv>
 801b3da:	ec41 0b10 	vmov	d0, r0, r1
 801b3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3e2:	45e0      	cmp	r8, ip
 801b3e4:	ee10 aa10 	vmov	sl, s0
 801b3e8:	ee10 4a10 	vmov	r4, s0
 801b3ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801b3f0:	dc09      	bgt.n	801b406 <__ieee754_fmod+0x72>
 801b3f2:	dbf2      	blt.n	801b3da <__ieee754_fmod+0x46>
 801b3f4:	4290      	cmp	r0, r2
 801b3f6:	d3f0      	bcc.n	801b3da <__ieee754_fmod+0x46>
 801b3f8:	d105      	bne.n	801b406 <__ieee754_fmod+0x72>
 801b3fa:	4b69      	ldr	r3, [pc, #420]	; (801b5a0 <__ieee754_fmod+0x20c>)
 801b3fc:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801b400:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b404:	e7e9      	b.n	801b3da <__ieee754_fmod+0x46>
 801b406:	4a65      	ldr	r2, [pc, #404]	; (801b59c <__ieee754_fmod+0x208>)
 801b408:	ea19 0f02 	tst.w	r9, r2
 801b40c:	d148      	bne.n	801b4a0 <__ieee754_fmod+0x10c>
 801b40e:	f1b8 0f00 	cmp.w	r8, #0
 801b412:	d13d      	bne.n	801b490 <__ieee754_fmod+0xfc>
 801b414:	4963      	ldr	r1, [pc, #396]	; (801b5a4 <__ieee754_fmod+0x210>)
 801b416:	4653      	mov	r3, sl
 801b418:	2b00      	cmp	r3, #0
 801b41a:	dc36      	bgt.n	801b48a <__ieee754_fmod+0xf6>
 801b41c:	4216      	tst	r6, r2
 801b41e:	d14f      	bne.n	801b4c0 <__ieee754_fmod+0x12c>
 801b420:	f1bc 0f00 	cmp.w	ip, #0
 801b424:	d144      	bne.n	801b4b0 <__ieee754_fmod+0x11c>
 801b426:	4a5f      	ldr	r2, [pc, #380]	; (801b5a4 <__ieee754_fmod+0x210>)
 801b428:	463b      	mov	r3, r7
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	dc3d      	bgt.n	801b4aa <__ieee754_fmod+0x116>
 801b42e:	485e      	ldr	r0, [pc, #376]	; (801b5a8 <__ieee754_fmod+0x214>)
 801b430:	4281      	cmp	r1, r0
 801b432:	db4a      	blt.n	801b4ca <__ieee754_fmod+0x136>
 801b434:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b43c:	485a      	ldr	r0, [pc, #360]	; (801b5a8 <__ieee754_fmod+0x214>)
 801b43e:	4282      	cmp	r2, r0
 801b440:	db57      	blt.n	801b4f2 <__ieee754_fmod+0x15e>
 801b442:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801b446:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801b44a:	1a89      	subs	r1, r1, r2
 801b44c:	1b98      	subs	r0, r3, r6
 801b44e:	eba4 070e 	sub.w	r7, r4, lr
 801b452:	2900      	cmp	r1, #0
 801b454:	d162      	bne.n	801b51c <__ieee754_fmod+0x188>
 801b456:	4574      	cmp	r4, lr
 801b458:	bf38      	it	cc
 801b45a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801b45e:	2800      	cmp	r0, #0
 801b460:	bfa4      	itt	ge
 801b462:	463c      	movge	r4, r7
 801b464:	4603      	movge	r3, r0
 801b466:	ea53 0104 	orrs.w	r1, r3, r4
 801b46a:	d0c6      	beq.n	801b3fa <__ieee754_fmod+0x66>
 801b46c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b470:	db69      	blt.n	801b546 <__ieee754_fmod+0x1b2>
 801b472:	494d      	ldr	r1, [pc, #308]	; (801b5a8 <__ieee754_fmod+0x214>)
 801b474:	428a      	cmp	r2, r1
 801b476:	db6c      	blt.n	801b552 <__ieee754_fmod+0x1be>
 801b478:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b47c:	432b      	orrs	r3, r5
 801b47e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801b482:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b486:	4620      	mov	r0, r4
 801b488:	e7a7      	b.n	801b3da <__ieee754_fmod+0x46>
 801b48a:	3901      	subs	r1, #1
 801b48c:	005b      	lsls	r3, r3, #1
 801b48e:	e7c3      	b.n	801b418 <__ieee754_fmod+0x84>
 801b490:	4945      	ldr	r1, [pc, #276]	; (801b5a8 <__ieee754_fmod+0x214>)
 801b492:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801b496:	2b00      	cmp	r3, #0
 801b498:	ddc0      	ble.n	801b41c <__ieee754_fmod+0x88>
 801b49a:	3901      	subs	r1, #1
 801b49c:	005b      	lsls	r3, r3, #1
 801b49e:	e7fa      	b.n	801b496 <__ieee754_fmod+0x102>
 801b4a0:	ea4f 5128 	mov.w	r1, r8, asr #20
 801b4a4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801b4a8:	e7b8      	b.n	801b41c <__ieee754_fmod+0x88>
 801b4aa:	3a01      	subs	r2, #1
 801b4ac:	005b      	lsls	r3, r3, #1
 801b4ae:	e7bc      	b.n	801b42a <__ieee754_fmod+0x96>
 801b4b0:	4a3d      	ldr	r2, [pc, #244]	; (801b5a8 <__ieee754_fmod+0x214>)
 801b4b2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	ddb9      	ble.n	801b42e <__ieee754_fmod+0x9a>
 801b4ba:	3a01      	subs	r2, #1
 801b4bc:	005b      	lsls	r3, r3, #1
 801b4be:	e7fa      	b.n	801b4b6 <__ieee754_fmod+0x122>
 801b4c0:	ea4f 522c 	mov.w	r2, ip, asr #20
 801b4c4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801b4c8:	e7b1      	b.n	801b42e <__ieee754_fmod+0x9a>
 801b4ca:	1a40      	subs	r0, r0, r1
 801b4cc:	281f      	cmp	r0, #31
 801b4ce:	dc0a      	bgt.n	801b4e6 <__ieee754_fmod+0x152>
 801b4d0:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801b4d4:	fa08 f800 	lsl.w	r8, r8, r0
 801b4d8:	fa2a f303 	lsr.w	r3, sl, r3
 801b4dc:	ea43 0308 	orr.w	r3, r3, r8
 801b4e0:	fa0a f400 	lsl.w	r4, sl, r0
 801b4e4:	e7aa      	b.n	801b43c <__ieee754_fmod+0xa8>
 801b4e6:	4b31      	ldr	r3, [pc, #196]	; (801b5ac <__ieee754_fmod+0x218>)
 801b4e8:	1a5b      	subs	r3, r3, r1
 801b4ea:	fa0a f303 	lsl.w	r3, sl, r3
 801b4ee:	2400      	movs	r4, #0
 801b4f0:	e7a4      	b.n	801b43c <__ieee754_fmod+0xa8>
 801b4f2:	1a80      	subs	r0, r0, r2
 801b4f4:	281f      	cmp	r0, #31
 801b4f6:	dc0a      	bgt.n	801b50e <__ieee754_fmod+0x17a>
 801b4f8:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801b4fc:	fa0c fc00 	lsl.w	ip, ip, r0
 801b500:	fa27 f606 	lsr.w	r6, r7, r6
 801b504:	ea46 060c 	orr.w	r6, r6, ip
 801b508:	fa07 fe00 	lsl.w	lr, r7, r0
 801b50c:	e79d      	b.n	801b44a <__ieee754_fmod+0xb6>
 801b50e:	4e27      	ldr	r6, [pc, #156]	; (801b5ac <__ieee754_fmod+0x218>)
 801b510:	1ab6      	subs	r6, r6, r2
 801b512:	fa07 f606 	lsl.w	r6, r7, r6
 801b516:	f04f 0e00 	mov.w	lr, #0
 801b51a:	e796      	b.n	801b44a <__ieee754_fmod+0xb6>
 801b51c:	4574      	cmp	r4, lr
 801b51e:	bf38      	it	cc
 801b520:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801b524:	2800      	cmp	r0, #0
 801b526:	da05      	bge.n	801b534 <__ieee754_fmod+0x1a0>
 801b528:	0fe0      	lsrs	r0, r4, #31
 801b52a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b52e:	0064      	lsls	r4, r4, #1
 801b530:	3901      	subs	r1, #1
 801b532:	e78b      	b.n	801b44c <__ieee754_fmod+0xb8>
 801b534:	ea50 0307 	orrs.w	r3, r0, r7
 801b538:	f43f af5f 	beq.w	801b3fa <__ieee754_fmod+0x66>
 801b53c:	0ffb      	lsrs	r3, r7, #31
 801b53e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801b542:	007c      	lsls	r4, r7, #1
 801b544:	e7f4      	b.n	801b530 <__ieee754_fmod+0x19c>
 801b546:	0fe1      	lsrs	r1, r4, #31
 801b548:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801b54c:	0064      	lsls	r4, r4, #1
 801b54e:	3a01      	subs	r2, #1
 801b550:	e78c      	b.n	801b46c <__ieee754_fmod+0xd8>
 801b552:	1a89      	subs	r1, r1, r2
 801b554:	2914      	cmp	r1, #20
 801b556:	dc0a      	bgt.n	801b56e <__ieee754_fmod+0x1da>
 801b558:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801b55c:	fa03 f202 	lsl.w	r2, r3, r2
 801b560:	40cc      	lsrs	r4, r1
 801b562:	4322      	orrs	r2, r4
 801b564:	410b      	asrs	r3, r1
 801b566:	ea43 0105 	orr.w	r1, r3, r5
 801b56a:	4610      	mov	r0, r2
 801b56c:	e735      	b.n	801b3da <__ieee754_fmod+0x46>
 801b56e:	291f      	cmp	r1, #31
 801b570:	dc07      	bgt.n	801b582 <__ieee754_fmod+0x1ee>
 801b572:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801b576:	40cc      	lsrs	r4, r1
 801b578:	fa03 f202 	lsl.w	r2, r3, r2
 801b57c:	4322      	orrs	r2, r4
 801b57e:	462b      	mov	r3, r5
 801b580:	e7f1      	b.n	801b566 <__ieee754_fmod+0x1d2>
 801b582:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801b586:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b58a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801b58e:	32e2      	adds	r2, #226	; 0xe2
 801b590:	fa43 f202 	asr.w	r2, r3, r2
 801b594:	e7f3      	b.n	801b57e <__ieee754_fmod+0x1ea>
 801b596:	bf00      	nop
 801b598:	7fefffff 	.word	0x7fefffff
 801b59c:	7ff00000 	.word	0x7ff00000
 801b5a0:	0801e3f0 	.word	0x0801e3f0
 801b5a4:	fffffbed 	.word	0xfffffbed
 801b5a8:	fffffc02 	.word	0xfffffc02
 801b5ac:	fffffbe2 	.word	0xfffffbe2

0801b5b0 <_init>:
 801b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5b2:	bf00      	nop
 801b5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5b6:	bc08      	pop	{r3}
 801b5b8:	469e      	mov	lr, r3
 801b5ba:	4770      	bx	lr

0801b5bc <_fini>:
 801b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5be:	bf00      	nop
 801b5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5c2:	bc08      	pop	{r3}
 801b5c4:	469e      	mov	lr, r3
 801b5c6:	4770      	bx	lr
