
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aa30  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e38  0801ac10  0801ac10  0002ac10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801da48  0801da48  00030540  2**0
                  CONTENTS
  4 .ARM          00000008  0801da48  0801da48  0002da48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801da50  0801da50  00030540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801da50  0801da50  0002da50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801da54  0801da54  0002da54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000540  20000000  0801da58  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031b8  20000540  0801df98  00030540  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200036f8  0801df98  000336f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030570  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f604  00000000  00000000  000305b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065d7  00000000  00000000  0005fbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029a8  00000000  00000000  00066190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ff1  00000000  00000000  00068b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028961  00000000  00000000  0006ab29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035602  00000000  00000000  0009348a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee7aa  00000000  00000000  000c8a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c738  00000000  00000000  001b7238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001c3970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000540 	.word	0x20000540
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801abf8 	.word	0x0801abf8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000544 	.word	0x20000544
 800021c:	0801abf8 	.word	0x0801abf8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800104e:	0adb      	lsrs	r3, r3, #11
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <FlashCheckCRC>:

bool FlashCheckCRC()
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <FlashCheckCRC+0x70>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <FlashCheckCRC+0x70>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <FlashCheckCRC+0x70>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <FlashCheckCRC+0x74>)
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <FlashCheckCRC+0x78>)
 8001094:	f007 fc80 	bl	8008998 <HAL_CRC_Calculate>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	461c      	mov	r4, r3
 800109e:	4615      	mov	r5, r2
 80010a0:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010aa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b6:	4299      	cmp	r1, r3
 80010b8:	bf08      	it	eq
 80010ba:	4290      	cmpeq	r0, r2
 80010bc:	d101      	bne.n	80010c2 <FlashCheckCRC+0x66>
	{
		return true;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <FlashCheckCRC+0x68>
	}
	return false;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0801f000 	.word	0x0801f000
 80010d4:	20001e78 	.word	0x20001e78

080010d8 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
	int i = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <FlashReadToBuf+0x88>)
 80010e4:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 80010e6:	f7ff ffb9 	bl	800105c <FlashCheckCRC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d031      	beq.n	8001154 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010f0:	e025      	b.n	800113e <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e013      	b.n	800112c <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <FlashReadToBuf+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d208      	bcs.n	8001126 <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	1d39      	adds	r1, r7, #4
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	440a      	add	r2, r1
 8001120:	7811      	ldrb	r1, [r2, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <FlashReadToBuf+0x90>)
 8001124:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b07      	cmp	r3, #7
 8001130:	dde8      	ble.n	8001104 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3308      	adds	r3, #8
 8001136:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3308      	adds	r3, #8
 800113c:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <FlashReadToBuf+0x8c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d203      	bcs.n	8001150 <FlashReadToBuf+0x78>
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <FlashReadToBuf+0x94>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d3d0      	bcc.n	80010f2 <FlashReadToBuf+0x1a>
		}
		return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <FlashReadToBuf+0x7e>
	}
	return false;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0801f000 	.word	0x0801f000
 8001164:	20000000 	.word	0x20000000
 8001168:	20000560 	.word	0x20000560
 800116c:	0801ffff 	.word	0x0801ffff

08001170 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 8001178:	f7ff ffae 	bl	80010d8 <FlashReadToBuf>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <FlashRead+0x26>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <FlashRead+0x30>)
 8001186:	4618      	mov	r0, r3
 8001188:	4611      	mov	r1, r2
 800118a:	2348      	movs	r3, #72	; 0x48
 800118c:	461a      	mov	r2, r3
 800118e:	f015 fff4 	bl	801717a <memcpy>
		return true;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <FlashRead+0x28>
	}
	return false;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000560 	.word	0x20000560

080011a4 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <FlashWrite+0x170>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <FlashWrite+0x174>)
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 80011da:	f7ff ff7d 	bl	80010d8 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 80011de:	4a4f      	ldr	r2, [pc, #316]	; (800131c <FlashWrite+0x178>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	2348      	movs	r3, #72	; 0x48
 80011e8:	461a      	mov	r2, r3
 80011ea:	f015 ffc6 	bl	801717a <memcpy>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <FlashWrite+0x17c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4949      	ldr	r1, [pc, #292]	; (800131c <FlashWrite+0x178>)
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <FlashWrite+0x180>)
 80011f8:	f007 fbce 	bl	8008998 <HAL_CRC_Calculate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2200      	movs	r2, #0
 8001200:	461c      	mov	r4, r3
 8001202:	4615      	mov	r5, r2
 8001204:	e9c7 4506 	strd	r4, r5, [r7, #24]

	HAL_FLASH_Unlock();
 8001208:	f008 f8ae 	bl	8009368 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <FlashWrite+0x184>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8001214:	4845      	ldr	r0, [pc, #276]	; (800132c <FlashWrite+0x188>)
 8001216:	f7ff ff13 	bl	8001040 <GetPage>
 800121a:	4604      	mov	r4, r0
 800121c:	483e      	ldr	r0, [pc, #248]	; (8001318 <FlashWrite+0x174>)
 800121e:	f7ff ff0f 	bl	8001040 <GetPage>
 8001222:	4603      	mov	r3, r0
 8001224:	1ae3      	subs	r3, r4, r3
 8001226:	3301      	adds	r3, #1
 8001228:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <FlashWrite+0x18c>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <FlashWrite+0x18c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 8001236:	4838      	ldr	r0, [pc, #224]	; (8001318 <FlashWrite+0x174>)
 8001238:	f7ff ff02 	bl	8001040 <GetPage>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <FlashWrite+0x18c>)
 8001240:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8001242:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <FlashWrite+0x18c>)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4838      	ldr	r0, [pc, #224]	; (8001330 <FlashWrite+0x18c>)
 8001250:	f008 f976 	bl	8009540 <HAL_FLASHEx_Erase>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d152      	bne.n	8001300 <FlashWrite+0x15c>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 800125a:	e04b      	b.n	80012f4 <FlashWrite+0x150>
		{
			for (int j = 0; j < 8; j++)
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	e01b      	b.n	800129a <FlashWrite+0xf6>
			{
				if (j + i < bufLength)
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <FlashWrite+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d20a      	bcs.n	8001288 <FlashWrite+0xe4>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8001272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	441a      	add	r2, r3
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f107 0108 	add.w	r1, r7, #8
 800127e:	440b      	add	r3, r1
 8001280:	4926      	ldr	r1, [pc, #152]	; (800131c <FlashWrite+0x178>)
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e005      	b.n	8001294 <FlashWrite+0xf0>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f107 0208 	add.w	r2, r7, #8
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3301      	adds	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	2b07      	cmp	r3, #7
 800129e:	dde0      	ble.n	8001262 <FlashWrite+0xbe>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 80012a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <FlashWrite+0x17c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d20f      	bcs.n	80012ca <FlashWrite+0x126>
 80012aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012b0:	2000      	movs	r0, #0
 80012b2:	f007 ffed 	bl	8009290 <HAL_FLASH_Program>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <FlashWrite+0x126>
			{
				Address = Address + 8;
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	3308      	adds	r3, #8
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	3308      	adds	r3, #8
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c8:	e014      	b.n	80012f4 <FlashWrite+0x150>
			}
			else if (i >= bufLength)
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <FlashWrite+0x17c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d314      	bcc.n	80012fe <FlashWrite+0x15a>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 80012d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012da:	2000      	movs	r0, #0
 80012dc:	f007 ffd8 	bl	8009290 <HAL_FLASH_Program>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <FlashWrite+0x150>
				{
					HAL_FLASH_Lock();
 80012e6:	f008 f861 	bl	80093ac <HAL_FLASH_Lock>
					flashWriting = 0;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <FlashWrite+0x170>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					return true;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00b      	b.n	800130c <FlashWrite+0x168>
		while (Address < FLASH_USER_END_ADDR)
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <FlashWrite+0x188>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d3af      	bcc.n	800125c <FlashWrite+0xb8>
 80012fc:	e000      	b.n	8001300 <FlashWrite+0x15c>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012fe:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001300:	f008 f854 	bl	80093ac <HAL_FLASH_Lock>

	flashWriting = 0;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <FlashWrite+0x170>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	return false;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	2000055c 	.word	0x2000055c
 8001318:	0801f000 	.word	0x0801f000
 800131c:	20000560 	.word	0x20000560
 8001320:	20000000 	.word	0x20000000
 8001324:	20001e78 	.word	0x20001e78
 8001328:	40022000 	.word	0x40022000
 800132c:	0801ffff 	.word	0x0801ffff
 8001330:	200005a8 	.word	0x200005a8

08001334 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	ed87 0b04 	vstr	d0, [r7, #16]
 800133e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001342:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800134a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134e:	f7ff fbed 	bl	8000b2c <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <clamp+0x2a>
 8001358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135c:	e001      	b.n	8001362 <clamp+0x2e>
 800135e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001362:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800136a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800136e:	f7ff fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <clamp+0x4a>
 8001378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137c:	e001      	b.n	8001382 <clamp+0x4e>
 800137e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001382:	ec43 2b17 	vmov	d7, r2, r3
}
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <get_mean_ADC_reading_indexed>:

/* Returns the average of 100 readings of the index+3*n value in the ADC_buffer vector */
double get_mean_ADC_reading_indexed(uint8_t index){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e012      	b.n	80013d2 <get_mean_ADC_reading_indexed+0x3e>
		ADC_filter_mean += ADC1_BUF[n];
 80013ac:	4a16      	ldr	r2, [pc, #88]	; (8001408 <get_mean_ADC_reading_indexed+0x74>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3303      	adds	r3, #3
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	dde9      	ble.n	80013ac <get_mean_ADC_reading_indexed+0x18>
	}
	return ADC_filter_mean/(ADC1_BUF_LEN/3.0);
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__aeabi_f2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <get_mean_ADC_reading_indexed+0x78>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000628 	.word	0x20000628
 8001408:	2000062c 	.word	0x2000062c
 800140c:	40330000 	.word	0x40330000

08001410 <get_mcu_temp>:

void get_mcu_temp(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	sensor_values.mcu_temperature =	Moving_Average_Compute((((get_mean_ADC_reading_indexed(2) * VSENSE) - V30) / Avg_Slope + 25), &mcu_temperature_filter_struct);
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff ffbd 	bl	8001394 <get_mean_ADC_reading_indexed>
 800141a:	ec51 0b10 	vmov	r0, r1, d0
 800141e:	a328      	add	r3, pc, #160	; (adr r3, 80014c0 <get_mcu_temp+0xb0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f910 	bl	8000648 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <get_mcu_temp+0xa0>)
 8001436:	f7ff fa31 	bl	800089c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	a317      	add	r3, pc, #92	; (adr r3, 80014a0 <get_mcu_temp+0x90>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7fe ff46 	bl	80002d8 <__aeabi_dsub>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	a314      	add	r3, pc, #80	; (adr r3, 80014a8 <get_mcu_temp+0x98>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff fa1f 	bl	800089c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <get_mcu_temp+0xa4>)
 800146c:	f7fe ff36 	bl	80002dc <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbbe 	bl	8000bf8 <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <get_mcu_temp+0xa8>)
 8001480:	4618      	mov	r0, r3
 8001482:	f002 ff41 	bl	8004308 <Moving_Average_Compute>
 8001486:	ec53 2b10 	vmov	r2, r3, d0
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fbd3 	bl	8000c38 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <get_mcu_temp+0xac>)
 8001496:	61d3      	str	r3, [r2, #28]
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	f3af 8000 	nop.w
 80014a0:	851eb852 	.word	0x851eb852
 80014a4:	3fe851eb 	.word	0x3fe851eb
 80014a8:	47ae147b 	.word	0x47ae147b
 80014ac:	3f647ae1 	.word	0x3f647ae1
 80014b0:	40b00000 	.word	0x40b00000
 80014b4:	40390000 	.word	0x40390000
 80014b8:	20000a38 	.word	0x20000a38
 80014bc:	20000038 	.word	0x20000038
 80014c0:	66666666 	.word	0x66666666
 80014c4:	400a6666 	.word	0x400a6666

080014c8 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	//return ((color & 0b0000000000011111)  << 11)    |    ((color & 0b1111100000000000) >> 5)   |    ((color  & 0b0000011111100000) >> 6);
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	02db      	lsls	r3, r3, #11
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <change_state>:

void change_state(mainstates new_state){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <change_state+0x58>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <change_state+0x5c>)
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	active_state = new_state;
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <change_state+0x58>)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	7013      	strb	r3, [r2, #0]
	if((active_state == RUN) && (flash_values.GPIO4_ON_at_run == 1)){
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <change_state+0x58>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d110      	bne.n	8001538 <change_state+0x44>
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <change_state+0x60>)
 8001518:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <change_state+0x64>)
 8001522:	f7ff faf9 	bl	8000b18 <__aeabi_dcmpeq>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <change_state+0x44>
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <change_state+0x68>)
 8001532:	f008 fac3 	bl	8009abc <HAL_GPIO_WritePin>
 8001536:	e005      	b.n	8001544 <change_state+0x50>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <change_state+0x68>)
 800153e:	f008 fabd 	bl	8009abc <HAL_GPIO_WritePin>
	}
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000001d 	.word	0x2000001d
 8001550:	20000038 	.word	0x20000038
 8001554:	200006a8 	.word	0x200006a8
 8001558:	3ff00000 	.word	0x3ff00000
 800155c:	48000400 	.word	0x48000400

08001560 <get_bus_voltage>:

void get_bus_voltage(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading_indexed(0), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ff15 	bl	8001394 <get_mean_ADC_reading_indexed>
 800156a:	ec53 2b10 	vmov	r2, r3, d0
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb41 	bl	8000bf8 <__aeabi_d2uiz>
 8001576:	4603      	mov	r3, r0
 8001578:	490d      	ldr	r1, [pc, #52]	; (80015b0 <get_bus_voltage+0x50>)
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fec4 	bl	8004308 <Moving_Average_Compute>
 8001580:	ec51 0b10 	vmov	r0, r1, d0
 8001584:	a308      	add	r3, pc, #32	; (adr r3, 80015a8 <get_bus_voltage+0x48>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f85d 	bl	8000648 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb4f 	bl	8000c38 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <get_bus_voltage+0x54>)
 800159e:	6113      	str	r3, [r2, #16]
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	f3af 8000 	nop.w
 80015a8:	ada68bd9 	.word	0xada68bd9
 80015ac:	3f813656 	.word	0x3f813656
 80015b0:	20000d64 	.word	0x20000d64
 80015b4:	20000038 	.word	0x20000038

080015b8 <get_heater_current>:

void get_heater_current(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	sensor_values.heater_current = Moving_Average_Compute(current_raw, &current_filterStruct)*CURRENT_COMPENSATION;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <get_heater_current+0x40>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <get_heater_current+0x44>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 fea0 	bl	8004308 <Moving_Average_Compute>
 80015c8:	ec51 0b10 	vmov	r0, r1, d0
 80015cc:	a308      	add	r3, pc, #32	; (adr r3, 80015f0 <get_heater_current+0x38>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f839 	bl	8000648 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fb2b 	bl	8000c38 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <get_heater_current+0x48>)
 80015e6:	6153      	str	r3, [r2, #20]
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f3af 8000 	nop.w
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	3fb99999 	.word	0x3fb99999
 80015f8:	2000069e 	.word	0x2000069e
 80015fc:	20001090 	.word	0x20001090
 8001600:	20000038 	.word	0x20000038
 8001604:	00000000 	.word	0x00000000

08001608 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(get_mean_ADC_reading_indexed(1), &thermocouple_temperature_filter_struct); /* Moving average filter */
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fec0 	bl	8001394 <get_mean_ADC_reading_indexed>
 8001614:	ec53 2b10 	vmov	r2, r3, d0
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff faec 	bl	8000bf8 <__aeabi_d2uiz>
 8001620:	4603      	mov	r3, r0
 8001622:	4977      	ldr	r1, [pc, #476]	; (8001800 <get_thermocouple_temperature+0x1f8>)
 8001624:	4618      	mov	r0, r3
 8001626:	f002 fe6f 	bl	8004308 <Moving_Average_Compute>
 800162a:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 800162e:	4b75      	ldr	r3, [pc, #468]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d12e      	bne.n	8001694 <get_thermocouple_temperature+0x8c>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800163a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163e:	f7ff f803 	bl	8000648 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a357      	add	r3, pc, #348	; (adr r3, 80017a8 <get_thermocouple_temperature+0x1a0>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe fffa 	bl	8000648 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	a354      	add	r3, pc, #336	; (adr r3, 80017b0 <get_thermocouple_temperature+0x1a8>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001666:	f7fe ffef 	bl	8000648 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe fe33 	bl	80002dc <__adddf3>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	a34e      	add	r3, pc, #312	; (adr r3, 80017b8 <get_thermocouple_temperature+0x1b0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe fe2a 	bl	80002dc <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	495e      	ldr	r1, [pc, #376]	; (8001808 <get_thermocouple_temperature+0x200>)
 800168e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001692:	e064      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == T245){
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d12e      	bne.n	80016fa <get_thermocouple_temperature+0xf2>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 800169c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a4:	f7fe ffd0 	bl	8000648 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	a343      	add	r3, pc, #268	; (adr r3, 80017c0 <get_thermocouple_temperature+0x1b8>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffc7 	bl	8000648 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	a341      	add	r3, pc, #260	; (adr r3, 80017c8 <get_thermocouple_temperature+0x1c0>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016cc:	f7fe ffbc 	bl	8000648 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fe00 	bl	80002dc <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a33a      	add	r3, pc, #232	; (adr r3, 80017d0 <get_thermocouple_temperature+0x1c8>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fdf7 	bl	80002dc <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4945      	ldr	r1, [pc, #276]	; (8001808 <get_thermocouple_temperature+0x200>)
 80016f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016f8:	e031      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == NT115){
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d12d      	bne.n	800175e <get_thermocouple_temperature+0x156>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_NT115 + TC_temp*TC_COMPENSATION_X1_NT115 + TC_COMPENSATION_X0_NT115;
 8001702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800170a:	f7fe ff9d 	bl	8000648 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	a330      	add	r3, pc, #192	; (adr r3, 80017d8 <get_thermocouple_temperature+0x1d0>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe ff94 	bl	8000648 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	a32d      	add	r3, pc, #180	; (adr r3, 80017e0 <get_thermocouple_temperature+0x1d8>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f7fe ff89 	bl	8000648 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fdcd 	bl	80002dc <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	a327      	add	r3, pc, #156	; (adr r3, 80017e8 <get_thermocouple_temperature+0x1e0>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fdc4 	bl	80002dc <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	492b      	ldr	r1, [pc, #172]	; (8001808 <get_thermocouple_temperature+0x200>)
 800175a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <get_thermocouple_temperature+0x200>)
 8001760:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <get_thermocouple_temperature+0x204>)
 8001766:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800176a:	f7fe fdb7 	bl	80002dc <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4925      	ldr	r1, [pc, #148]	; (8001808 <get_thermocouple_temperature+0x200>)
 8001774:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <get_thermocouple_temperature+0x200>)
 800177a:	ed93 7b02 	vldr	d7, [r3, #8]
 800177e:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80017f0 <get_thermocouple_temperature+0x1e8>
 8001782:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80017f8 <get_thermocouple_temperature+0x1f0>
 8001786:	eeb0 0a47 	vmov.f32	s0, s14
 800178a:	eef0 0a67 	vmov.f32	s1, s15
 800178e:	f7ff fdd1 	bl	8001334 <clamp>
 8001792:	eeb0 7a40 	vmov.f32	s14, s0
 8001796:	eef0 7a60 	vmov.f32	s15, s1
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <get_thermocouple_temperature+0x200>)
 800179c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}
 80017a8:	82211f02 	.word	0x82211f02
 80017ac:	3ed1b769 	.word	0x3ed1b769
 80017b0:	7d232337 	.word	0x7d232337
 80017b4:	3fd46490 	.word	0x3fd46490
 80017b8:	11588fd7 	.word	0x11588fd7
 80017bc:	4034f7d1 	.word	0x4034f7d1
 80017c0:	a66d5482 	.word	0xa66d5482
 80017c4:	be9fc6dc 	.word	0xbe9fc6dc
 80017c8:	56fa2c99 	.word	0x56fa2c99
 80017cc:	3fbe8eac 	.word	0x3fbe8eac
 80017d0:	aef84767 	.word	0xaef84767
 80017d4:	4037c703 	.word	0x4037c703
 80017d8:	e0057d0c 	.word	0xe0057d0c
 80017dc:	3f0ac0ae 	.word	0x3f0ac0ae
 80017e0:	859db92b 	.word	0x859db92b
 80017e4:	3fdae99a 	.word	0x3fdae99a
 80017e8:	027d19fb 	.word	0x027d19fb
 80017ec:	40342538 	.word	0x40342538
 80017f0:	00000000 	.word	0x00000000
 80017f4:	408f3800 	.word	0x408f3800
	...
 8001800:	2000070c 	.word	0x2000070c
 8001804:	200005b8 	.word	0x200005b8
 8001808:	20000038 	.word	0x20000038
 800180c:	200006a8 	.word	0x200006a8

08001810 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <set_heater_duty+0x48>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.3);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fea5 	bl	8000574 <__aeabi_i2d>
 800182a:	a309      	add	r3, pc, #36	; (adr r3, 8001850 <set_heater_duty+0x40>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe ff0a 	bl	8000648 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <set_heater_duty+0x48>)
 800183a:	680c      	ldr	r4, [r1, #0]
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f9da 	bl	8000bf8 <__aeabi_d2uiz>
 8001844:	4603      	mov	r3, r0
 8001846:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	33333333 	.word	0x33333333
 8001854:	3fd33333 	.word	0x3fd33333
 8001858:	20001fb4 	.word	0x20001fb4
 800185c:	00000000 	.word	0x00000000

08001860 <heater_on>:

/* Update the duty cycle of timer controlling the heater PWM */
void heater_on(){
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <heater_on+0xa0>)
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe95 	bl	8000598 <__aeabi_f2d>
 800186e:	a31e      	add	r3, pc, #120	; (adr r3, 80018e8 <heater_on+0x88>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fee8 	bl	8000648 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <heater_on+0xa0>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe87 	bl	8000598 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7ff f803 	bl	800089c <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <heater_on+0xa4>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fed0 	bl	8000648 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <heater_on+0xa8>)
 80018ae:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <heater_on+0xa8>)
 80018b4:	ed93 7b00 	vldr	d7, [r3]
 80018b8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80018f0 <heater_on+0x90>
 80018bc:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80018f8 <heater_on+0x98>
 80018c0:	eeb0 0a47 	vmov.f32	s0, s14
 80018c4:	eef0 0a67 	vmov.f32	s1, s15
 80018c8:	f7ff fd34 	bl	8001334 <clamp>
 80018cc:	ec53 2b10 	vmov	r2, r3, d0
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f990 	bl	8000bf8 <__aeabi_d2uiz>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff97 	bl	8001810 <set_heater_duty>
}
 80018e2:	bf00      	nop
 80018e4:	bdb0      	pop	{r4, r5, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	a5e353f8 	.word	0xa5e353f8
 80018ec:	3fc0c49b 	.word	0x3fc0c49b
 80018f0:	00000000 	.word	0x00000000
 80018f4:	407f4000 	.word	0x407f4000
	...
 8001900:	20000038 	.word	0x20000038
 8001904:	200006f0 	.word	0x200006f0
 8001908:	20000700 	.word	0x20000700

0800190c <heater_off>:

/* Disable the duty cycle of timer controlling the heater PWM*/
void heater_off(){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	set_heater_duty(0);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff ff7d 	bl	8001810 <set_heater_duty>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <show_popup>:

void show_popup(char * text[80]){
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b085      	sub	sp, #20
 8001920:	af02      	add	r7, sp, #8
 8001922:	6078      	str	r0, [r7, #4]
	UG_FillFrame(10, 150, 225, 205, RGB_to_BRG(C_ORANGE));
 8001924:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001928:	f7ff fdce 	bl	80014c8 <RGB_to_BRG>
 800192c:	4603      	mov	r3, r0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	23cd      	movs	r3, #205	; 0xcd
 8001932:	22e1      	movs	r2, #225	; 0xe1
 8001934:	2196      	movs	r1, #150	; 0x96
 8001936:	200a      	movs	r0, #10
 8001938:	f010 fca8 	bl	801228c <UG_FillFrame>
	UG_FillFrame(15, 155, 220, 200, RGB_to_BRG(C_WHITE));
 800193c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001940:	f7ff fdc2 	bl	80014c8 <RGB_to_BRG>
 8001944:	4603      	mov	r3, r0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	23c8      	movs	r3, #200	; 0xc8
 800194a:	22dc      	movs	r2, #220	; 0xdc
 800194c:	219b      	movs	r1, #155	; 0x9b
 800194e:	200f      	movs	r0, #15
 8001950:	f010 fc9c 	bl	801228c <UG_FillFrame>
	LCD_PutStr(20, 150, text, FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8001954:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001958:	f7ff fdb6 	bl	80014c8 <RGB_to_BRG>
 800195c:	4603      	mov	r3, r0
 800195e:	461c      	mov	r4, r3
 8001960:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001964:	f7ff fdb0 	bl	80014c8 <RGB_to_BRG>
 8001968:	4603      	mov	r3, r0
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	9400      	str	r4, [sp, #0]
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <show_popup+0x80>)
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	2196      	movs	r1, #150	; 0x96
 8001974:	2014      	movs	r0, #20
 8001976:	f004 fa39 	bl	8005dec <LCD_PutStr>
	HAL_Delay(2000);
 800197a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800197e:	f004 fb4f 	bl	8006020 <HAL_Delay>
	LCD_draw_main_screen();
 8001982:	f000 fe0b 	bl	800259c <LCD_draw_main_screen>
	standby_state_written_to_LCD = 0;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <show_popup+0x84>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
	sleep_state_written_to_LCD = 0;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <show_popup+0x88>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	0801be38 	.word	0x0801be38
 80019a0:	200005e0 	.word	0x200005e0
 80019a4:	200005df 	.word	0x200005df

080019a8 <settings_menue>:

void settings_menue(){
 80019a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019ac:	b08d      	sub	sp, #52	; 0x34
 80019ae:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 80019b0:	2120      	movs	r1, #32
 80019b2:	48c1      	ldr	r0, [pc, #772]	; (8001cb8 <settings_menue+0x310>)
 80019b4:	f008 f86a 	bl	8009a8c <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	f040 82cb 	bne.w	8001f56 <settings_menue+0x5ae>
		LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019c0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019c4:	f7ff fd80 	bl	80014c8 <RGB_to_BRG>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461c      	mov	r4, r3
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff fd7b 	bl	80014c8 <RGB_to_BRG>
 80019d2:	4603      	mov	r3, r0
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	9400      	str	r4, [sp, #0]
 80019d8:	4bb8      	ldr	r3, [pc, #736]	; (8001cbc <settings_menue+0x314>)
 80019da:	4ab9      	ldr	r2, [pc, #740]	; (8001cc0 <settings_menue+0x318>)
 80019dc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019e0:	2000      	movs	r0, #0
 80019e2:	f004 fa03 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019e6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019ea:	f7ff fd6d 	bl	80014c8 <RGB_to_BRG>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461c      	mov	r4, r3
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fd68 	bl	80014c8 <RGB_to_BRG>
 80019f8:	4603      	mov	r3, r0
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9400      	str	r4, [sp, #0]
 80019fe:	4baf      	ldr	r3, [pc, #700]	; (8001cbc <settings_menue+0x314>)
 8001a00:	4ab0      	ldr	r2, [pc, #704]	; (8001cc4 <settings_menue+0x31c>)
 8001a02:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a06:	2096      	movs	r0, #150	; 0x96
 8001a08:	f004 f9f0 	bl	8005dec <LCD_PutStr>

		TIM2->CNT = 1000;
 8001a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8001a30:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a34:	f7ff fd48 	bl	80014c8 <RGB_to_BRG>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461c      	mov	r4, r3
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fd43 	bl	80014c8 <RGB_to_BRG>
 8001a42:	4603      	mov	r3, r0
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	9400      	str	r4, [sp, #0]
 8001a48:	4b9c      	ldr	r3, [pc, #624]	; (8001cbc <settings_menue+0x314>)
 8001a4a:	4a9f      	ldr	r2, [pc, #636]	; (8001cc8 <settings_menue+0x320>)
 8001a4c:	210c      	movs	r1, #12
 8001a4e:	203c      	movs	r0, #60	; 0x3c
 8001a50:	f004 f9cc 	bl	8005dec <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8001a54:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a58:	f7ff fd36 	bl	80014c8 <RGB_to_BRG>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2328      	movs	r3, #40	; 0x28
 8001a62:	22f0      	movs	r2, #240	; 0xf0
 8001a64:	2128      	movs	r1, #40	; 0x28
 8001a66:	2000      	movs	r0, #0
 8001a68:	f004 f982 	bl	8005d70 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8001a6c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a70:	f7ff fd2a 	bl	80014c8 <RGB_to_BRG>
 8001a74:	4603      	mov	r3, r0
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2329      	movs	r3, #41	; 0x29
 8001a7a:	22f0      	movs	r2, #240	; 0xf0
 8001a7c:	2129      	movs	r1, #41	; 0x29
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f004 f976 	bl	8005d70 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8001a84:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a88:	f7ff fd1e 	bl	80014c8 <RGB_to_BRG>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	232a      	movs	r3, #42	; 0x2a
 8001a92:	22f0      	movs	r2, #240	; 0xf0
 8001a94:	212a      	movs	r1, #42	; 0x2a
 8001a96:	2000      	movs	r0, #0
 8001a98:	f004 f96a 	bl	8005d70 <LCD_DrawLine>

		HAL_Delay(500);
 8001a9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aa0:	f004 fabe 	bl	8006020 <HAL_Delay>
		while(menu_active == 1){
 8001aa4:	e253      	b.n	8001f4e <settings_menue+0x5a6>
			if(menue_level == 0){
 8001aa6:	8c3b      	ldrh	r3, [r7, #32]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d120      	bne.n	8001aee <settings_menue+0x146>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 8001aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd4e 	bl	8000554 <__aeabi_ui2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	ed9f 2b78 	vldr	d2, [pc, #480]	; 8001ca0 <settings_menue+0x2f8>
 8001ac0:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001ca8 <settings_menue+0x300>
 8001ac4:	ec43 2b10 	vmov	d0, r2, r3
 8001ac8:	f7ff fc34 	bl	8001334 <clamp>
 8001acc:	ec53 2b10 	vmov	r2, r3, d0
 8001ad0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff f88e 	bl	8000bf8 <__aeabi_d2uiz>
 8001adc:	4603      	mov	r3, r0
 8001ade:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 8001aee:	8c3b      	ldrh	r3, [r7, #32]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	f040 8091 	bne.w	8001c18 <settings_menue+0x270>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001af6:	69b8      	ldr	r0, [r7, #24]
 8001af8:	f7fe fd4e 	bl	8000598 <__aeabi_f2d>
 8001afc:	4604      	mov	r4, r0
 8001afe:	460d      	mov	r5, r1
 8001b00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd24 	bl	8000554 <__aeabi_ui2d>
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b6e      	ldr	r3, [pc, #440]	; (8001ccc <settings_menue+0x324>)
 8001b12:	f7fe fbe1 	bl	80002d8 <__aeabi_dsub>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7ff f88b 	bl	8000c38 <__aeabi_d2f>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd37 	bl	8000598 <__aeabi_f2d>
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b32:	f7fe feb3 	bl	800089c <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	f7fe fbcd 	bl	80002dc <__adddf3>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4690      	mov	r8, r2
 8001b48:	4699      	mov	r9, r3
 8001b4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b54:	ee17 0a90 	vmov	r0, s15
 8001b58:	f7fe fd1e 	bl	8000598 <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001b62:	00c9      	lsls	r1, r1, #3
 8001b64:	485a      	ldr	r0, [pc, #360]	; (8001cd0 <settings_menue+0x328>)
 8001b66:	180c      	adds	r4, r1, r0
 8001b68:	4640      	mov	r0, r8
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	f7fe fbb4 	bl	80002d8 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	e9c4 2300 	strd	r2, r3, [r4]
				if ((menu_cursor_position == 5) || (menu_cursor_position == 8)){
 8001b78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b7a:	2b05      	cmp	r3, #5
 8001b7c:	d002      	beq.n	8001b84 <settings_menue+0x1dc>
 8001b7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d12c      	bne.n	8001bde <settings_menue+0x236>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001b84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4a51      	ldr	r2, [pc, #324]	; (8001cd0 <settings_menue+0x328>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7ff f808 	bl	8000ba8 <__aeabi_d2iz>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bfb8      	it	lt
 8001b9e:	425b      	neglt	r3, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fce7 	bl	8000574 <__aeabi_i2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001cb0 <settings_menue+0x308>
 8001bae:	ec43 2b10 	vmov	d0, r2, r3
 8001bb2:	f018 fe9d 	bl	801a8f0 <fmod>
 8001bb6:	eeb0 7a40 	vmov.f32	s14, s0
 8001bba:	eef0 7a60 	vmov.f32	s15, s1
 8001bbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4a43      	ldr	r2, [pc, #268]	; (8001cd0 <settings_menue+0x328>)
 8001bc4:	189c      	adds	r4, r3, r2
 8001bc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bca:	eef0 0a67 	vmov.f32	s1, s15
 8001bce:	f018 febd 	bl	801a94c <round>
 8001bd2:	eeb0 7a40 	vmov.f32	s14, s0
 8001bd6:	eef0 7a60 	vmov.f32	s15, s1
 8001bda:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 8001bde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d019      	beq.n	8001c18 <settings_menue+0x270>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001be4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4a39      	ldr	r2, [pc, #228]	; (8001cd0 <settings_menue+0x328>)
 8001bea:	4413      	add	r3, r2
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe ffd8 	bl	8000ba8 <__aeabi_d2iz>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bfe:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001c02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4932      	ldr	r1, [pc, #200]	; (8001cd0 <settings_menue+0x328>)
 8001c08:	185c      	adds	r4, r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7fe fcb2 	bl	8000574 <__aeabi_i2d>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 8001c18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c1a:	2b0b      	cmp	r3, #11
 8001c1c:	d906      	bls.n	8001c2c <settings_menue+0x284>
							menu_cursor_position = menu_length-1;
 8001c1e:	230b      	movs	r3, #11
 8001c20:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 8001c22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c26:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 7){
 8001c2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d903      	bls.n	8001c3a <settings_menue+0x292>
				menue_start = menu_cursor_position-7;
 8001c32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c34:	3b07      	subs	r3, #7
 8001c36:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c38:	e001      	b.n	8001c3e <settings_menue+0x296>
			}
			else{
				menue_start = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 8001c3e:	2120      	movs	r1, #32
 8001c40:	481d      	ldr	r0, [pc, #116]	; (8001cb8 <settings_menue+0x310>)
 8001c42:	f007 ff23 	bl	8009a8c <HAL_GPIO_ReadPin>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d143      	bne.n	8001cd4 <settings_menue+0x32c>
 8001c4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d840      	bhi.n	8001cd4 <settings_menue+0x32c>
				if(menue_level == 0){
 8001c52:	8c3b      	ldrh	r3, [r7, #32]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10d      	bne.n	8001c74 <settings_menue+0x2cc>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 8001c58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <settings_menue+0x328>)
 8001c5e:	4413      	add	r3, r2
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ffe6 	bl	8000c38 <__aeabi_d2f>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 8001c70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c72:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 8001c74:	8c3b      	ldrh	r3, [r7, #32]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d106      	bne.n	8001c88 <settings_menue+0x2e0>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001c7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c7c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c80:	005a      	lsls	r2, r3, #1
 8001c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001c88:	8c3b      	ldrh	r3, [r7, #32]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bfb8      	it	lt
 8001c90:	425b      	neglt	r3, r3
 8001c92:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 8001c94:	20c8      	movs	r0, #200	; 0xc8
 8001c96:	f004 f9c3 	bl	8006020 <HAL_Delay>
 8001c9a:	e04a      	b.n	8001d32 <settings_menue+0x38a>
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	00000000 	.word	0x00000000
 8001ca4:	412e8480 	.word	0x412e8480
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	408f4000 	.word	0x408f4000
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	40000000 	.word	0x40000000
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	0801be38 	.word	0x0801be38
 8001cc0:	0801ac10 	.word	0x0801ac10
 8001cc4:	0801ac1c 	.word	0x0801ac1c
 8001cc8:	0801ac24 	.word	0x0801ac24
 8001ccc:	408f4000 	.word	0x408f4000
 8001cd0:	200006a8 	.word	0x200006a8
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	48a4      	ldr	r0, [pc, #656]	; (8001f68 <settings_menue+0x5c0>)
 8001cd8:	f007 fed8 	bl	8009a8c <HAL_GPIO_ReadPin>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d105      	bne.n	8001cee <settings_menue+0x346>
 8001ce2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ce4:	2b0b      	cmp	r3, #11
 8001ce6:	d102      	bne.n	8001cee <settings_menue+0x346>
				menu_active = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	83fb      	strh	r3, [r7, #30]
 8001cec:	e021      	b.n	8001d32 <settings_menue+0x38a>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001cee:	2120      	movs	r1, #32
 8001cf0:	489d      	ldr	r0, [pc, #628]	; (8001f68 <settings_menue+0x5c0>)
 8001cf2:	f007 fecb 	bl	8009a8c <HAL_GPIO_ReadPin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d108      	bne.n	8001d0e <settings_menue+0x366>
 8001cfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cfe:	2b0a      	cmp	r3, #10
 8001d00:	d105      	bne.n	8001d0e <settings_menue+0x366>
				menu_active = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 8001d06:	4899      	ldr	r0, [pc, #612]	; (8001f6c <settings_menue+0x5c4>)
 8001d08:	f7ff fa4c 	bl	80011a4 <FlashWrite>
 8001d0c:	e011      	b.n	8001d32 <settings_menue+0x38a>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 8001d0e:	2120      	movs	r1, #32
 8001d10:	4895      	ldr	r0, [pc, #596]	; (8001f68 <settings_menue+0x5c0>)
 8001d12:	f007 febb 	bl	8009a8c <HAL_GPIO_ReadPin>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d10a      	bne.n	8001d32 <settings_menue+0x38a>
 8001d1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d1e:	2b09      	cmp	r3, #9
 8001d20:	d107      	bne.n	8001d32 <settings_menue+0x38a>
				flash_values = default_flash_values;
 8001d22:	4a92      	ldr	r2, [pc, #584]	; (8001f6c <settings_menue+0x5c4>)
 8001d24:	4b92      	ldr	r3, [pc, #584]	; (8001f70 <settings_menue+0x5c8>)
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	2348      	movs	r3, #72	; 0x48
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f015 fa24 	bl	801717a <memcpy>
			}

			for(int i = menue_start;i<=menue_start+7;i++){
 8001d32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e104      	b.n	8001f42 <settings_menue+0x59a>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001d38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d12b      	bne.n	8001d98 <settings_menue+0x3f0>
 8001d40:	8c3b      	ldrh	r3, [r7, #32]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d128      	bne.n	8001d98 <settings_menue+0x3f0>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001d46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	0091      	lsls	r1, r2, #2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	332d      	adds	r3, #45	; 0x2d
 8001d62:	b29c      	uxth	r4, r3
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4a81      	ldr	r2, [pc, #516]	; (8001f74 <settings_menue+0x5cc>)
 8001d70:	189d      	adds	r5, r3, r2
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fba8 	bl	80014c8 <RGB_to_BRG>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461e      	mov	r6, r3
 8001d7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d80:	f7ff fba2 	bl	80014c8 <RGB_to_BRG>
 8001d84:	4603      	mov	r3, r0
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	9600      	str	r6, [sp, #0]
 8001d8a:	4b7b      	ldr	r3, [pc, #492]	; (8001f78 <settings_menue+0x5d0>)
 8001d8c:	462a      	mov	r2, r5
 8001d8e:	4621      	mov	r1, r4
 8001d90:	2005      	movs	r0, #5
 8001d92:	f004 f82b 	bl	8005dec <LCD_PutStr>
 8001d96:	e027      	b.n	8001de8 <settings_menue+0x440>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001d98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	0091      	lsls	r1, r2, #2
 8001daa:	461a      	mov	r2, r3
 8001dac:	460b      	mov	r3, r1
 8001dae:	4413      	add	r3, r2
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	332d      	adds	r3, #45	; 0x2d
 8001db4:	b29c      	uxth	r4, r3
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4a6c      	ldr	r2, [pc, #432]	; (8001f74 <settings_menue+0x5cc>)
 8001dc2:	189d      	adds	r5, r3, r2
 8001dc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dc8:	f7ff fb7e 	bl	80014c8 <RGB_to_BRG>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461e      	mov	r6, r3
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff fb79 	bl	80014c8 <RGB_to_BRG>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	9600      	str	r6, [sp, #0]
 8001ddc:	4b66      	ldr	r3, [pc, #408]	; (8001f78 <settings_menue+0x5d0>)
 8001dde:	462a      	mov	r2, r5
 8001de0:	4621      	mov	r1, r4
 8001de2:	2005      	movs	r0, #5
 8001de4:	f004 f802 	bl	8005dec <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001de8:	463b      	mov	r3, r7
 8001dea:	2214      	movs	r2, #20
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f015 f943 	bl	801707a <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4a5c      	ldr	r2, [pc, #368]	; (8001f6c <settings_menue+0x5c4>)
 8001dfa:	4413      	add	r3, r2
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	4638      	mov	r0, r7
 8001e02:	495e      	ldr	r1, [pc, #376]	; (8001f7c <settings_menue+0x5d4>)
 8001e04:	f015 f8d6 	bl	8016fb4 <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4a57      	ldr	r2, [pc, #348]	; (8001f6c <settings_menue+0x5c4>)
 8001e0e:	4413      	add	r3, r2
 8001e10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4b59      	ldr	r3, [pc, #356]	; (8001f80 <settings_menue+0x5d8>)
 8001e1a:	f7fe fe87 	bl	8000b2c <__aeabi_dcmplt>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <settings_menue+0x48e>
					str[1] = 32;
 8001e24:	2320      	movs	r3, #32
 8001e26:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001e28:	2320      	movs	r3, #32
 8001e2a:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001e30:	2320      	movs	r3, #32
 8001e32:	713b      	strb	r3, [r7, #4]
 8001e34:	e011      	b.n	8001e5a <settings_menue+0x4b2>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4a4c      	ldr	r2, [pc, #304]	; (8001f6c <settings_menue+0x5c4>)
 8001e3c:	4413      	add	r3, r2
 8001e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e42:	a347      	add	r3, pc, #284	; (adr r3, 8001f60 <settings_menue+0x5b8>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fe70 	bl	8000b2c <__aeabi_dcmplt>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <settings_menue+0x4b2>
					str[2] = 32;
 8001e52:	2320      	movs	r3, #32
 8001e54:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001e56:	2320      	movs	r3, #32
 8001e58:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	dc49      	bgt.n	8001ef4 <settings_menue+0x54c>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001e60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d124      	bne.n	8001eb2 <settings_menue+0x50a>
 8001e68:	8c3b      	ldrh	r3, [r7, #32]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d121      	bne.n	8001eb2 <settings_menue+0x50a>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001e6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	0091      	lsls	r1, r2, #2
 8001e80:	461a      	mov	r2, r3
 8001e82:	460b      	mov	r3, r1
 8001e84:	4413      	add	r3, r2
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	332d      	adds	r3, #45	; 0x2d
 8001e8a:	b29c      	uxth	r4, r3
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff fb1b 	bl	80014c8 <RGB_to_BRG>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461d      	mov	r5, r3
 8001e96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e9a:	f7ff fb15 	bl	80014c8 <RGB_to_BRG>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	463a      	mov	r2, r7
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	9500      	str	r5, [sp, #0]
 8001ea6:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <settings_menue+0x5d0>)
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	20c8      	movs	r0, #200	; 0xc8
 8001eac:	f003 ff9e 	bl	8005dec <LCD_PutStr>
 8001eb0:	e020      	b.n	8001ef4 <settings_menue+0x54c>
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001eb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	0091      	lsls	r1, r2, #2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4413      	add	r3, r2
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	332d      	adds	r3, #45	; 0x2d
 8001ece:	b29c      	uxth	r4, r3
 8001ed0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ed4:	f7ff faf8 	bl	80014c8 <RGB_to_BRG>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461d      	mov	r5, r3
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff faf3 	bl	80014c8 <RGB_to_BRG>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	463a      	mov	r2, r7
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	9500      	str	r5, [sp, #0]
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <settings_menue+0x5d0>)
 8001eec:	4621      	mov	r1, r4
 8001eee:	20c8      	movs	r0, #200	; 0xc8
 8001ef0:	f003 ff7c 	bl	8005dec <LCD_PutStr>

					}
				}
				if(i >= menu_length-3){
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	dd20      	ble.n	8001f3c <settings_menue+0x594>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001efa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	0091      	lsls	r1, r2, #2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4413      	add	r3, r2
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	332d      	adds	r3, #45	; 0x2d
 8001f16:	b29c      	uxth	r4, r3
 8001f18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f1c:	f7ff fad4 	bl	80014c8 <RGB_to_BRG>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461d      	mov	r5, r3
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff facf 	bl	80014c8 <RGB_to_BRG>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	9500      	str	r5, [sp, #0]
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <settings_menue+0x5d0>)
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <settings_menue+0x5dc>)
 8001f34:	4621      	mov	r1, r4
 8001f36:	20c8      	movs	r0, #200	; 0xc8
 8001f38:	f003 ff58 	bl	8005dec <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+7;i++){
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f44:	3307      	adds	r3, #7
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f77f aef5 	ble.w	8001d38 <settings_menue+0x390>
		while(menu_active == 1){
 8001f4e:	8bfb      	ldrh	r3, [r7, #30]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	f43f ada8 	beq.w	8001aa6 <settings_menue+0xfe>
				}

			}
		}
	}
}
 8001f56:	bf00      	nop
 8001f58:	372c      	adds	r7, #44	; 0x2c
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f60:	00000000 	.word	0x00000000
 8001f64:	4058e000 	.word	0x4058e000
 8001f68:	48000400 	.word	0x48000400
 8001f6c:	200006a8 	.word	0x200006a8
 8001f70:	20000088 	.word	0x20000088
 8001f74:	200000d0 	.word	0x200000d0
 8001f78:	0801be38 	.word	0x0801be38
 8001f7c:	0801ac30 	.word	0x0801ac30
 8001f80:	40230000 	.word	0x40230000
 8001f84:	0801ac38 	.word	0x0801ac38

08001f88 <update_display>:

void update_display(){
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af02      	add	r7, sp, #8
	memset(&buffer, '\0', sizeof(buffer));
 8001f8e:	2228      	movs	r2, #40	; 0x28
 8001f90:	2100      	movs	r1, #0
 8001f92:	4879      	ldr	r0, [pc, #484]	; (8002178 <update_display+0x1f0>)
 8001f94:	f015 f871 	bl	801707a <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001f98:	4b78      	ldr	r3, [pc, #480]	; (800217c <update_display+0x1f4>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	4978      	ldr	r1, [pc, #480]	; (8002180 <update_display+0x1f8>)
 8001fa0:	4875      	ldr	r0, [pc, #468]	; (8002178 <update_display+0x1f0>)
 8001fa2:	f015 f807 	bl	8016fb4 <siprintf>
	if(sensor_values.set_temperature < 99.5){
 8001fa6:	4b75      	ldr	r3, [pc, #468]	; (800217c <update_display+0x1f4>)
 8001fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fac:	a370      	add	r3, pc, #448	; (adr r3, 8002170 <update_display+0x1e8>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe fdbb 	bl	8000b2c <__aeabi_dcmplt>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <update_display+0x40>
		buffer[2] = 32;
 8001fbc:	4b6e      	ldr	r3, [pc, #440]	; (8002178 <update_display+0x1f0>)
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	709a      	strb	r2, [r3, #2]
		buffer[3] = 32;
 8001fc2:	4b6d      	ldr	r3, [pc, #436]	; (8002178 <update_display+0x1f0>)
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	70da      	strb	r2, [r3, #3]
	}
  	LCD_PutStr(14, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001fc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fcc:	f7ff fa7c 	bl	80014c8 <RGB_to_BRG>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461c      	mov	r4, r3
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff fa77 	bl	80014c8 <RGB_to_BRG>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	9400      	str	r4, [sp, #0]
 8001fe0:	4b68      	ldr	r3, [pc, #416]	; (8002184 <update_display+0x1fc>)
 8001fe2:	4a65      	ldr	r2, [pc, #404]	; (8002178 <update_display+0x1f0>)
 8001fe4:	214b      	movs	r1, #75	; 0x4b
 8001fe6:	200e      	movs	r0, #14
 8001fe8:	f003 ff00 	bl	8005dec <LCD_PutStr>

	if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 8001fec:	4b63      	ldr	r3, [pc, #396]	; (800217c <update_display+0x1f4>)
 8001fee:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ff2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffe:	d512      	bpl.n	8002026 <update_display+0x9e>
	  	LCD_PutStr(10, 165, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002000:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002004:	f7ff fa60 	bl	80014c8 <RGB_to_BRG>
 8002008:	4603      	mov	r3, r0
 800200a:	461c      	mov	r4, r3
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff fa5b 	bl	80014c8 <RGB_to_BRG>
 8002012:	4603      	mov	r3, r0
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	9400      	str	r4, [sp, #0]
 8002018:	4b5a      	ldr	r3, [pc, #360]	; (8002184 <update_display+0x1fc>)
 800201a:	4a5b      	ldr	r2, [pc, #364]	; (8002188 <update_display+0x200>)
 800201c:	21a5      	movs	r1, #165	; 0xa5
 800201e:	200a      	movs	r0, #10
 8002020:	f003 fee4 	bl	8005dec <LCD_PutStr>
 8002024:	e02e      	b.n	8002084 <update_display+0xfc>
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 8002026:	2228      	movs	r2, #40	; 0x28
 8002028:	2100      	movs	r1, #0
 800202a:	4853      	ldr	r0, [pc, #332]	; (8002178 <update_display+0x1f0>)
 800202c:	f015 f825 	bl	801707a <memset>
		sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8002030:	4b52      	ldr	r3, [pc, #328]	; (800217c <update_display+0x1f4>)
 8002032:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002036:	4952      	ldr	r1, [pc, #328]	; (8002180 <update_display+0x1f8>)
 8002038:	484f      	ldr	r0, [pc, #316]	; (8002178 <update_display+0x1f0>)
 800203a:	f014 ffbb 	bl	8016fb4 <siprintf>
		if(sensor_values.thermocouple_temperature < 99.5){
 800203e:	4b4f      	ldr	r3, [pc, #316]	; (800217c <update_display+0x1f4>)
 8002040:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002044:	a34a      	add	r3, pc, #296	; (adr r3, 8002170 <update_display+0x1e8>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fd6f 	bl	8000b2c <__aeabi_dcmplt>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <update_display+0xd8>
			buffer[2] = 32;
 8002054:	4b48      	ldr	r3, [pc, #288]	; (8002178 <update_display+0x1f0>)
 8002056:	2220      	movs	r2, #32
 8002058:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <update_display+0x1f0>)
 800205c:	2220      	movs	r2, #32
 800205e:	70da      	strb	r2, [r3, #3]
		}
	  	LCD_PutStr(14, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002060:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002064:	f7ff fa30 	bl	80014c8 <RGB_to_BRG>
 8002068:	4603      	mov	r3, r0
 800206a:	461c      	mov	r4, r3
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff fa2b 	bl	80014c8 <RGB_to_BRG>
 8002072:	4603      	mov	r3, r0
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	9400      	str	r4, [sp, #0]
 8002078:	4b42      	ldr	r3, [pc, #264]	; (8002184 <update_display+0x1fc>)
 800207a:	4a3f      	ldr	r2, [pc, #252]	; (8002178 <update_display+0x1f0>)
 800207c:	21a5      	movs	r1, #165	; 0xa5
 800207e:	200e      	movs	r0, #14
 8002080:	f003 feb4 	bl	8005dec <LCD_PutStr>
	}

	memset(&buffer, '\0', sizeof(buffer));
 8002084:	2228      	movs	r2, #40	; 0x28
 8002086:	2100      	movs	r1, #0
 8002088:	483b      	ldr	r0, [pc, #236]	; (8002178 <update_display+0x1f0>)
 800208a:	f014 fff6 	bl	801707a <memset>
	sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <update_display+0x1f4>)
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa80 	bl	8000598 <__aeabi_f2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	493b      	ldr	r1, [pc, #236]	; (800218c <update_display+0x204>)
 800209e:	4836      	ldr	r0, [pc, #216]	; (8002178 <update_display+0x1f0>)
 80020a0:	f014 ff88 	bl	8016fb4 <siprintf>
	LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80020a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020a8:	f7ff fa0e 	bl	80014c8 <RGB_to_BRG>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461c      	mov	r4, r3
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff fa09 	bl	80014c8 <RGB_to_BRG>
 80020b6:	4603      	mov	r3, r0
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	9400      	str	r4, [sp, #0]
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <update_display+0x208>)
 80020be:	4a2e      	ldr	r2, [pc, #184]	; (8002178 <update_display+0x1f0>)
 80020c0:	21ff      	movs	r1, #255	; 0xff
 80020c2:	2064      	movs	r0, #100	; 0x64
 80020c4:	f003 fe92 	bl	8005dec <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 80020c8:	2228      	movs	r2, #40	; 0x28
 80020ca:	2100      	movs	r1, #0
 80020cc:	482a      	ldr	r0, [pc, #168]	; (8002178 <update_display+0x1f0>)
 80020ce:	f014 ffd4 	bl	801707a <memset>
	sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 80020d2:	4b2a      	ldr	r3, [pc, #168]	; (800217c <update_display+0x1f4>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa5e 	bl	8000598 <__aeabi_f2d>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	492a      	ldr	r1, [pc, #168]	; (800218c <update_display+0x204>)
 80020e2:	4825      	ldr	r0, [pc, #148]	; (8002178 <update_display+0x1f0>)
 80020e4:	f014 ff66 	bl	8016fb4 <siprintf>
	LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80020e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020ec:	f7ff f9ec 	bl	80014c8 <RGB_to_BRG>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461c      	mov	r4, r3
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7ff f9e7 	bl	80014c8 <RGB_to_BRG>
 80020fa:	4603      	mov	r3, r0
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	9400      	str	r4, [sp, #0]
 8002100:	4b23      	ldr	r3, [pc, #140]	; (8002190 <update_display+0x208>)
 8002102:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <update_display+0x1f0>)
 8002104:	f240 1113 	movw	r1, #275	; 0x113
 8002108:	2064      	movs	r0, #100	; 0x64
 800210a:	f003 fe6f 	bl	8005dec <LCD_PutStr>

	if(handle == T210){
 800210e:	4b21      	ldr	r3, [pc, #132]	; (8002194 <update_display+0x20c>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d112      	bne.n	800213c <update_display+0x1b4>
		LCD_PutStr(100, 235, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002116:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800211a:	f7ff f9d5 	bl	80014c8 <RGB_to_BRG>
 800211e:	4603      	mov	r3, r0
 8002120:	461c      	mov	r4, r3
 8002122:	2000      	movs	r0, #0
 8002124:	f7ff f9d0 	bl	80014c8 <RGB_to_BRG>
 8002128:	4603      	mov	r3, r0
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	9400      	str	r4, [sp, #0]
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <update_display+0x208>)
 8002130:	4a19      	ldr	r2, [pc, #100]	; (8002198 <update_display+0x210>)
 8002132:	21eb      	movs	r1, #235	; 0xeb
 8002134:	2064      	movs	r0, #100	; 0x64
 8002136:	f003 fe59 	bl	8005dec <LCD_PutStr>
 800213a:	e047      	b.n	80021cc <update_display+0x244>
	}
	else if(handle == T245){
 800213c:	4b15      	ldr	r3, [pc, #84]	; (8002194 <update_display+0x20c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d12d      	bne.n	80021a0 <update_display+0x218>
		LCD_PutStr(100, 235, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002144:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002148:	f7ff f9be 	bl	80014c8 <RGB_to_BRG>
 800214c:	4603      	mov	r3, r0
 800214e:	461c      	mov	r4, r3
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff f9b9 	bl	80014c8 <RGB_to_BRG>
 8002156:	4603      	mov	r3, r0
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	9400      	str	r4, [sp, #0]
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <update_display+0x208>)
 800215e:	4a0f      	ldr	r2, [pc, #60]	; (800219c <update_display+0x214>)
 8002160:	21eb      	movs	r1, #235	; 0xeb
 8002162:	2064      	movs	r0, #100	; 0x64
 8002164:	f003 fe42 	bl	8005dec <LCD_PutStr>
 8002168:	e030      	b.n	80021cc <update_display+0x244>
 800216a:	bf00      	nop
 800216c:	f3af 8000 	nop.w
 8002170:	00000000 	.word	0x00000000
 8002174:	4058e000 	.word	0x4058e000
 8002178:	20000600 	.word	0x20000600
 800217c:	20000038 	.word	0x20000038
 8002180:	0801ac40 	.word	0x0801ac40
 8002184:	0801ce28 	.word	0x0801ce28
 8002188:	0801ac44 	.word	0x0801ac44
 800218c:	0801ac4c 	.word	0x0801ac4c
 8002190:	0801ae68 	.word	0x0801ae68
 8002194:	200005b8 	.word	0x200005b8
 8002198:	0801ac54 	.word	0x0801ac54
 800219c:	0801ac5c 	.word	0x0801ac5c
	}
	else if(handle == NT115){
 80021a0:	4bab      	ldr	r3, [pc, #684]	; (8002450 <update_display+0x4c8>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d111      	bne.n	80021cc <update_display+0x244>
		LCD_PutStr(100, 235, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80021a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021ac:	f7ff f98c 	bl	80014c8 <RGB_to_BRG>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461c      	mov	r4, r3
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff f987 	bl	80014c8 <RGB_to_BRG>
 80021ba:	4603      	mov	r3, r0
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	9400      	str	r4, [sp, #0]
 80021c0:	4ba4      	ldr	r3, [pc, #656]	; (8002454 <update_display+0x4cc>)
 80021c2:	4aa5      	ldr	r2, [pc, #660]	; (8002458 <update_display+0x4d0>)
 80021c4:	21eb      	movs	r1, #235	; 0xeb
 80021c6:	2064      	movs	r0, #100	; 0x64
 80021c8:	f003 fe10 	bl	8005dec <LCD_PutStr>
	}

	if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 80021cc:	4ba3      	ldr	r3, [pc, #652]	; (800245c <update_display+0x4d4>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d008      	beq.n	80021e6 <update_display+0x25e>
 80021d4:	4ba1      	ldr	r3, [pc, #644]	; (800245c <update_display+0x4d4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d004      	beq.n	80021e6 <update_display+0x25e>
 80021dc:	4b9f      	ldr	r3, [pc, #636]	; (800245c <update_display+0x4d4>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	f040 8098 	bne.w	8002316 <update_display+0x38e>
 80021e6:	4b9e      	ldr	r3, [pc, #632]	; (8002460 <update_display+0x4d8>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8093 	bne.w	8002316 <update_display+0x38e>
		UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 80021f0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80021f4:	f7ff f968 	bl	80014c8 <RGB_to_BRG>
 80021f8:	4603      	mov	r3, r0
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8002200:	22e6      	movs	r2, #230	; 0xe6
 8002202:	2137      	movs	r1, #55	; 0x37
 8002204:	20d2      	movs	r0, #210	; 0xd2
 8002206:	f010 f841 	bl	801228c <UG_FillFrame>
		LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff f95c 	bl	80014c8 <RGB_to_BRG>
 8002210:	4603      	mov	r3, r0
 8002212:	461c      	mov	r4, r3
 8002214:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002218:	f7ff f956 	bl	80014c8 <RGB_to_BRG>
 800221c:	4603      	mov	r3, r0
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	9400      	str	r4, [sp, #0]
 8002222:	4b90      	ldr	r3, [pc, #576]	; (8002464 <update_display+0x4dc>)
 8002224:	4a90      	ldr	r2, [pc, #576]	; (8002468 <update_display+0x4e0>)
 8002226:	213a      	movs	r1, #58	; 0x3a
 8002228:	20d6      	movs	r0, #214	; 0xd6
 800222a:	f003 fddf 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff f94a 	bl	80014c8 <RGB_to_BRG>
 8002234:	4603      	mov	r3, r0
 8002236:	461c      	mov	r4, r3
 8002238:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800223c:	f7ff f944 	bl	80014c8 <RGB_to_BRG>
 8002240:	4603      	mov	r3, r0
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	9400      	str	r4, [sp, #0]
 8002246:	4b87      	ldr	r3, [pc, #540]	; (8002464 <update_display+0x4dc>)
 8002248:	4a88      	ldr	r2, [pc, #544]	; (800246c <update_display+0x4e4>)
 800224a:	215c      	movs	r1, #92	; 0x5c
 800224c:	20d8      	movs	r0, #216	; 0xd8
 800224e:	f003 fdcd 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002252:	2000      	movs	r0, #0
 8002254:	f7ff f938 	bl	80014c8 <RGB_to_BRG>
 8002258:	4603      	mov	r3, r0
 800225a:	461c      	mov	r4, r3
 800225c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002260:	f7ff f932 	bl	80014c8 <RGB_to_BRG>
 8002264:	4603      	mov	r3, r0
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	9400      	str	r4, [sp, #0]
 800226a:	4b7e      	ldr	r3, [pc, #504]	; (8002464 <update_display+0x4dc>)
 800226c:	4a7e      	ldr	r2, [pc, #504]	; (8002468 <update_display+0x4e0>)
 800226e:	217e      	movs	r1, #126	; 0x7e
 8002270:	20d6      	movs	r0, #214	; 0xd6
 8002272:	f003 fdbb 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff f926 	bl	80014c8 <RGB_to_BRG>
 800227c:	4603      	mov	r3, r0
 800227e:	461c      	mov	r4, r3
 8002280:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002284:	f7ff f920 	bl	80014c8 <RGB_to_BRG>
 8002288:	4603      	mov	r3, r0
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	9400      	str	r4, [sp, #0]
 800228e:	4b75      	ldr	r3, [pc, #468]	; (8002464 <update_display+0x4dc>)
 8002290:	4a76      	ldr	r2, [pc, #472]	; (800246c <update_display+0x4e4>)
 8002292:	21a1      	movs	r1, #161	; 0xa1
 8002294:	20d8      	movs	r0, #216	; 0xd8
 8002296:	f003 fda9 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800229a:	2000      	movs	r0, #0
 800229c:	f7ff f914 	bl	80014c8 <RGB_to_BRG>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461c      	mov	r4, r3
 80022a4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022a8:	f7ff f90e 	bl	80014c8 <RGB_to_BRG>
 80022ac:	4603      	mov	r3, r0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	9400      	str	r4, [sp, #0]
 80022b2:	4b6c      	ldr	r3, [pc, #432]	; (8002464 <update_display+0x4dc>)
 80022b4:	4a6c      	ldr	r2, [pc, #432]	; (8002468 <update_display+0x4e0>)
 80022b6:	21c2      	movs	r1, #194	; 0xc2
 80022b8:	20d6      	movs	r0, #214	; 0xd6
 80022ba:	f003 fd97 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022be:	2000      	movs	r0, #0
 80022c0:	f7ff f902 	bl	80014c8 <RGB_to_BRG>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461c      	mov	r4, r3
 80022c8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022cc:	f7ff f8fc 	bl	80014c8 <RGB_to_BRG>
 80022d0:	4603      	mov	r3, r0
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	9400      	str	r4, [sp, #0]
 80022d6:	4b63      	ldr	r3, [pc, #396]	; (8002464 <update_display+0x4dc>)
 80022d8:	4a64      	ldr	r2, [pc, #400]	; (800246c <update_display+0x4e4>)
 80022da:	21e4      	movs	r1, #228	; 0xe4
 80022dc:	20d8      	movs	r0, #216	; 0xd8
 80022de:	f003 fd85 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff f8f0 	bl	80014c8 <RGB_to_BRG>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461c      	mov	r4, r3
 80022ec:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022f0:	f7ff f8ea 	bl	80014c8 <RGB_to_BRG>
 80022f4:	4603      	mov	r3, r0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	9400      	str	r4, [sp, #0]
 80022fa:	4b5a      	ldr	r3, [pc, #360]	; (8002464 <update_display+0x4dc>)
 80022fc:	4a5a      	ldr	r2, [pc, #360]	; (8002468 <update_display+0x4e0>)
 80022fe:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002302:	20d6      	movs	r0, #214	; 0xd6
 8002304:	f003 fd72 	bl	8005dec <LCD_PutStr>
		sleep_state_written_to_LCD = 1;
 8002308:	4b55      	ldr	r3, [pc, #340]	; (8002460 <update_display+0x4d8>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
		standby_state_written_to_LCD = 0;
 800230e:	4b58      	ldr	r3, [pc, #352]	; (8002470 <update_display+0x4e8>)
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e128      	b.n	8002568 <update_display+0x5e0>
	}
	else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 8002316:	4b51      	ldr	r3, [pc, #324]	; (800245c <update_display+0x4d4>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	f040 80b8 	bne.w	8002490 <update_display+0x508>
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <update_display+0x4e8>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 80b3 	bne.w	8002490 <update_display+0x508>
		UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 800232a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800232e:	f7ff f8cb 	bl	80014c8 <RGB_to_BRG>
 8002332:	4603      	mov	r3, r0
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	f44f 738f 	mov.w	r3, #286	; 0x11e
 800233a:	22e6      	movs	r2, #230	; 0xe6
 800233c:	2137      	movs	r1, #55	; 0x37
 800233e:	20d2      	movs	r0, #210	; 0xd2
 8002340:	f00f ffa4 	bl	801228c <UG_FillFrame>
		LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff f8bf 	bl	80014c8 <RGB_to_BRG>
 800234a:	4603      	mov	r3, r0
 800234c:	461c      	mov	r4, r3
 800234e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002352:	f7ff f8b9 	bl	80014c8 <RGB_to_BRG>
 8002356:	4603      	mov	r3, r0
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	9400      	str	r4, [sp, #0]
 800235c:	4b41      	ldr	r3, [pc, #260]	; (8002464 <update_display+0x4dc>)
 800235e:	4a45      	ldr	r2, [pc, #276]	; (8002474 <update_display+0x4ec>)
 8002360:	213a      	movs	r1, #58	; 0x3a
 8002362:	20d6      	movs	r0, #214	; 0xd6
 8002364:	f003 fd42 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff f8ad 	bl	80014c8 <RGB_to_BRG>
 800236e:	4603      	mov	r3, r0
 8002370:	461c      	mov	r4, r3
 8002372:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002376:	f7ff f8a7 	bl	80014c8 <RGB_to_BRG>
 800237a:	4603      	mov	r3, r0
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	9400      	str	r4, [sp, #0]
 8002380:	4b38      	ldr	r3, [pc, #224]	; (8002464 <update_display+0x4dc>)
 8002382:	4a3d      	ldr	r2, [pc, #244]	; (8002478 <update_display+0x4f0>)
 8002384:	215c      	movs	r1, #92	; 0x5c
 8002386:	20d6      	movs	r0, #214	; 0xd6
 8002388:	f003 fd30 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800238c:	2000      	movs	r0, #0
 800238e:	f7ff f89b 	bl	80014c8 <RGB_to_BRG>
 8002392:	4603      	mov	r3, r0
 8002394:	461c      	mov	r4, r3
 8002396:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800239a:	f7ff f895 	bl	80014c8 <RGB_to_BRG>
 800239e:	4603      	mov	r3, r0
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	9400      	str	r4, [sp, #0]
 80023a4:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <update_display+0x4dc>)
 80023a6:	4a35      	ldr	r2, [pc, #212]	; (800247c <update_display+0x4f4>)
 80023a8:	217e      	movs	r1, #126	; 0x7e
 80023aa:	20d6      	movs	r0, #214	; 0xd6
 80023ac:	f003 fd1e 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7ff f889 	bl	80014c8 <RGB_to_BRG>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461c      	mov	r4, r3
 80023ba:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023be:	f7ff f883 	bl	80014c8 <RGB_to_BRG>
 80023c2:	4603      	mov	r3, r0
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	9400      	str	r4, [sp, #0]
 80023c8:	4b26      	ldr	r3, [pc, #152]	; (8002464 <update_display+0x4dc>)
 80023ca:	4a2d      	ldr	r2, [pc, #180]	; (8002480 <update_display+0x4f8>)
 80023cc:	21a1      	movs	r1, #161	; 0xa1
 80023ce:	20d6      	movs	r0, #214	; 0xd6
 80023d0:	f003 fd0c 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff f877 	bl	80014c8 <RGB_to_BRG>
 80023da:	4603      	mov	r3, r0
 80023dc:	461c      	mov	r4, r3
 80023de:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023e2:	f7ff f871 	bl	80014c8 <RGB_to_BRG>
 80023e6:	4603      	mov	r3, r0
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	9400      	str	r4, [sp, #0]
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <update_display+0x4dc>)
 80023ee:	4a25      	ldr	r2, [pc, #148]	; (8002484 <update_display+0x4fc>)
 80023f0:	21c2      	movs	r1, #194	; 0xc2
 80023f2:	20d6      	movs	r0, #214	; 0xd6
 80023f4:	f003 fcfa 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7ff f865 	bl	80014c8 <RGB_to_BRG>
 80023fe:	4603      	mov	r3, r0
 8002400:	461c      	mov	r4, r3
 8002402:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002406:	f7ff f85f 	bl	80014c8 <RGB_to_BRG>
 800240a:	4603      	mov	r3, r0
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	9400      	str	r4, [sp, #0]
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <update_display+0x4dc>)
 8002412:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <update_display+0x500>)
 8002414:	21e4      	movs	r1, #228	; 0xe4
 8002416:	20d6      	movs	r0, #214	; 0xd6
 8002418:	f003 fce8 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800241c:	2000      	movs	r0, #0
 800241e:	f7ff f853 	bl	80014c8 <RGB_to_BRG>
 8002422:	4603      	mov	r3, r0
 8002424:	461c      	mov	r4, r3
 8002426:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800242a:	f7ff f84d 	bl	80014c8 <RGB_to_BRG>
 800242e:	4603      	mov	r3, r0
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	9400      	str	r4, [sp, #0]
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <update_display+0x4dc>)
 8002436:	4a15      	ldr	r2, [pc, #84]	; (800248c <update_display+0x504>)
 8002438:	f44f 7183 	mov.w	r1, #262	; 0x106
 800243c:	20d6      	movs	r0, #214	; 0xd6
 800243e:	f003 fcd5 	bl	8005dec <LCD_PutStr>
		standby_state_written_to_LCD = 1;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <update_display+0x4e8>)
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <update_display+0x4d8>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
 800244e:	e08b      	b.n	8002568 <update_display+0x5e0>
 8002450:	200005b8 	.word	0x200005b8
 8002454:	0801ae68 	.word	0x0801ae68
 8002458:	0801ac64 	.word	0x0801ac64
 800245c:	2000001d 	.word	0x2000001d
 8002460:	200005df 	.word	0x200005df
 8002464:	0801be38 	.word	0x0801be38
 8002468:	0801ac6c 	.word	0x0801ac6c
 800246c:	0801ac70 	.word	0x0801ac70
 8002470:	200005e0 	.word	0x200005e0
 8002474:	0801ac74 	.word	0x0801ac74
 8002478:	0801ac78 	.word	0x0801ac78
 800247c:	0801ac7c 	.word	0x0801ac7c
 8002480:	0801ac80 	.word	0x0801ac80
 8002484:	0801ac84 	.word	0x0801ac84
 8002488:	0801ac88 	.word	0x0801ac88
 800248c:	0801ac8c 	.word	0x0801ac8c
	}
	else if(active_state == RUN){
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <update_display+0x5f8>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d167      	bne.n	8002568 <update_display+0x5e0>
		UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002498:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <update_display+0x5fc>)
 800249a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <update_display+0x600>)
 80024a4:	f7fe f9fa 	bl	800089c <__aeabi_ddiv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	4b35      	ldr	r3, [pc, #212]	; (800258c <update_display+0x604>)
 80024b6:	f7fe f8c7 	bl	8000648 <__aeabi_dmul>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	a12c      	add	r1, pc, #176	; (adr r1, 8002570 <update_display+0x5e8>)
 80024c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024c4:	f7fd ff08 	bl	80002d8 <__aeabi_dsub>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fb6a 	bl	8000ba8 <__aeabi_d2iz>
 80024d4:	4603      	mov	r3, r0
 80024d6:	b21c      	sxth	r4, r3
 80024d8:	f248 607e 	movw	r0, #34430	; 0x867e
 80024dc:	f7fe fff4 	bl	80014c8 <RGB_to_BRG>
 80024e0:	4603      	mov	r3, r0
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	f240 131f 	movw	r3, #287	; 0x11f
 80024e8:	22e6      	movs	r2, #230	; 0xe6
 80024ea:	4621      	mov	r1, r4
 80024ec:	20d2      	movs	r0, #210	; 0xd2
 80024ee:	f00f fecd 	bl	801228c <UG_FillFrame>
		UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <update_display+0x5fc>)
 80024f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	4b22      	ldr	r3, [pc, #136]	; (8002588 <update_display+0x600>)
 80024fe:	f7fe f9cd 	bl	800089c <__aeabi_ddiv>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	a31b      	add	r3, pc, #108	; (adr r3, 8002578 <update_display+0x5f0>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fe f89a 	bl	8000648 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	a115      	add	r1, pc, #84	; (adr r1, 8002570 <update_display+0x5e8>)
 800251a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800251e:	f7fd fedb 	bl	80002d8 <__aeabi_dsub>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	4b18      	ldr	r3, [pc, #96]	; (8002590 <update_display+0x608>)
 8002530:	f7fd fed2 	bl	80002d8 <__aeabi_dsub>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f7fe fb34 	bl	8000ba8 <__aeabi_d2iz>
 8002540:	4603      	mov	r3, r0
 8002542:	b21c      	sxth	r4, r3
 8002544:	2000      	movs	r0, #0
 8002546:	f7fe ffbf 	bl	80014c8 <RGB_to_BRG>
 800254a:	4603      	mov	r3, r0
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	4623      	mov	r3, r4
 8002550:	22e6      	movs	r2, #230	; 0xe6
 8002552:	2137      	movs	r1, #55	; 0x37
 8002554:	20d2      	movs	r0, #210	; 0xd2
 8002556:	f00f fe99 	bl	801228c <UG_FillFrame>
		standby_state_written_to_LCD = 0;
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <update_display+0x60c>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <update_display+0x610>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
	}
}
 8002566:	e7ff      	b.n	8002568 <update_display+0x5e0>
 8002568:	bf00      	nop
 800256a:	3704      	adds	r7, #4
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	00000000 	.word	0x00000000
 8002574:	4071f000 	.word	0x4071f000
 8002578:	00000000 	.word	0x00000000
 800257c:	406ce000 	.word	0x406ce000
 8002580:	2000001d 	.word	0x2000001d
 8002584:	200006f0 	.word	0x200006f0
 8002588:	407f4000 	.word	0x407f4000
 800258c:	406d0000 	.word	0x406d0000
 8002590:	3ff00000 	.word	0x3ff00000
 8002594:	200005e0 	.word	0x200005e0
 8002598:	200005df 	.word	0x200005df

0800259c <LCD_draw_main_screen>:

void LCD_draw_main_screen(){
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b083      	sub	sp, #12
 80025a0:	af02      	add	r7, sp, #8
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7fe ff90 	bl	80014c8 <RGB_to_BRG>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f00f fe4a 	bl	8012244 <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 80025b0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80025b4:	f7fe ff88 	bl	80014c8 <RGB_to_BRG>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461c      	mov	r4, r3
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe ff83 	bl	80014c8 <RGB_to_BRG>
 80025c2:	4603      	mov	r3, r0
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	9400      	str	r4, [sp, #0]
 80025c8:	4bc3      	ldr	r3, [pc, #780]	; (80028d8 <LCD_draw_main_screen+0x33c>)
 80025ca:	4ac4      	ldr	r2, [pc, #784]	; (80028dc <LCD_draw_main_screen+0x340>)
 80025cc:	210c      	movs	r1, #12
 80025ce:	2035      	movs	r0, #53	; 0x35
 80025d0:	f003 fc0c 	bl	8005dec <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 80025d4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80025d8:	f7fe ff76 	bl	80014c8 <RGB_to_BRG>
 80025dc:	4603      	mov	r3, r0
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2328      	movs	r3, #40	; 0x28
 80025e2:	22f0      	movs	r2, #240	; 0xf0
 80025e4:	2128      	movs	r1, #40	; 0x28
 80025e6:	2000      	movs	r0, #0
 80025e8:	f003 fbc2 	bl	8005d70 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 80025ec:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80025f0:	f7fe ff6a 	bl	80014c8 <RGB_to_BRG>
 80025f4:	4603      	mov	r3, r0
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2329      	movs	r3, #41	; 0x29
 80025fa:	22f0      	movs	r2, #240	; 0xf0
 80025fc:	2129      	movs	r1, #41	; 0x29
 80025fe:	2000      	movs	r0, #0
 8002600:	f003 fbb6 	bl	8005d70 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8002604:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002608:	f7fe ff5e 	bl	80014c8 <RGB_to_BRG>
 800260c:	4603      	mov	r3, r0
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	232a      	movs	r3, #42	; 0x2a
 8002612:	22f0      	movs	r2, #240	; 0xf0
 8002614:	212a      	movs	r1, #42	; 0x2a
 8002616:	2000      	movs	r0, #0
 8002618:	f003 fbaa 	bl	8005d70 <LCD_DrawLine>


		LCD_PutStr(14, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800261c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002620:	f7fe ff52 	bl	80014c8 <RGB_to_BRG>
 8002624:	4603      	mov	r3, r0
 8002626:	461c      	mov	r4, r3
 8002628:	2000      	movs	r0, #0
 800262a:	f7fe ff4d 	bl	80014c8 <RGB_to_BRG>
 800262e:	4603      	mov	r3, r0
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	9400      	str	r4, [sp, #0]
 8002634:	4baa      	ldr	r3, [pc, #680]	; (80028e0 <LCD_draw_main_screen+0x344>)
 8002636:	4aab      	ldr	r2, [pc, #684]	; (80028e4 <LCD_draw_main_screen+0x348>)
 8002638:	2132      	movs	r1, #50	; 0x32
 800263a:	200e      	movs	r0, #14
 800263c:	f003 fbd6 	bl	8005dec <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 8002640:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002644:	f7fe ff40 	bl	80014c8 <RGB_to_BRG>
 8002648:	4603      	mov	r3, r0
 800264a:	2205      	movs	r2, #5
 800264c:	2155      	movs	r1, #85	; 0x55
 800264e:	2078      	movs	r0, #120	; 0x78
 8002650:	f00f fed6 	bl	8012400 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 8002654:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002658:	f7fe ff36 	bl	80014c8 <RGB_to_BRG>
 800265c:	4603      	mov	r3, r0
 800265e:	2204      	movs	r2, #4
 8002660:	2155      	movs	r1, #85	; 0x55
 8002662:	2078      	movs	r0, #120	; 0x78
 8002664:	f00f fecc 	bl	8012400 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 8002668:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800266c:	f7fe ff2c 	bl	80014c8 <RGB_to_BRG>
 8002670:	4603      	mov	r3, r0
 8002672:	2203      	movs	r2, #3
 8002674:	2155      	movs	r1, #85	; 0x55
 8002676:	2078      	movs	r0, #120	; 0x78
 8002678:	f00f fec2 	bl	8012400 <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800267c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002680:	f7fe ff22 	bl	80014c8 <RGB_to_BRG>
 8002684:	4603      	mov	r3, r0
 8002686:	461c      	mov	r4, r3
 8002688:	2000      	movs	r0, #0
 800268a:	f7fe ff1d 	bl	80014c8 <RGB_to_BRG>
 800268e:	4603      	mov	r3, r0
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	9400      	str	r4, [sp, #0]
 8002694:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <LCD_draw_main_screen+0x34c>)
 8002696:	4a95      	ldr	r2, [pc, #596]	; (80028ec <LCD_draw_main_screen+0x350>)
 8002698:	214b      	movs	r1, #75	; 0x4b
 800269a:	2082      	movs	r0, #130	; 0x82
 800269c:	f003 fba6 	bl	8005dec <LCD_PutStr>


		LCD_PutStr(14, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026a4:	f7fe ff10 	bl	80014c8 <RGB_to_BRG>
 80026a8:	4603      	mov	r3, r0
 80026aa:	461c      	mov	r4, r3
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7fe ff0b 	bl	80014c8 <RGB_to_BRG>
 80026b2:	4603      	mov	r3, r0
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	9400      	str	r4, [sp, #0]
 80026b8:	4b89      	ldr	r3, [pc, #548]	; (80028e0 <LCD_draw_main_screen+0x344>)
 80026ba:	4a8d      	ldr	r2, [pc, #564]	; (80028f0 <LCD_draw_main_screen+0x354>)
 80026bc:	218c      	movs	r1, #140	; 0x8c
 80026be:	200e      	movs	r0, #14
 80026c0:	f003 fb94 	bl	8005dec <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 80026c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026c8:	f7fe fefe 	bl	80014c8 <RGB_to_BRG>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2205      	movs	r2, #5
 80026d0:	21af      	movs	r1, #175	; 0xaf
 80026d2:	2078      	movs	r0, #120	; 0x78
 80026d4:	f00f fe94 	bl	8012400 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 80026d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026dc:	f7fe fef4 	bl	80014c8 <RGB_to_BRG>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2204      	movs	r2, #4
 80026e4:	21af      	movs	r1, #175	; 0xaf
 80026e6:	2078      	movs	r0, #120	; 0x78
 80026e8:	f00f fe8a 	bl	8012400 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 80026ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026f0:	f7fe feea 	bl	80014c8 <RGB_to_BRG>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2203      	movs	r2, #3
 80026f8:	21af      	movs	r1, #175	; 0xaf
 80026fa:	2078      	movs	r0, #120	; 0x78
 80026fc:	f00f fe80 	bl	8012400 <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002700:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002704:	f7fe fee0 	bl	80014c8 <RGB_to_BRG>
 8002708:	4603      	mov	r3, r0
 800270a:	461c      	mov	r4, r3
 800270c:	2000      	movs	r0, #0
 800270e:	f7fe fedb 	bl	80014c8 <RGB_to_BRG>
 8002712:	4603      	mov	r3, r0
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	9400      	str	r4, [sp, #0]
 8002718:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <LCD_draw_main_screen+0x34c>)
 800271a:	4a74      	ldr	r2, [pc, #464]	; (80028ec <LCD_draw_main_screen+0x350>)
 800271c:	21a5      	movs	r1, #165	; 0xa5
 800271e:	2082      	movs	r0, #130	; 0x82
 8002720:	f003 fb64 	bl	8005dec <LCD_PutStr>

		UG_DrawFrame(6, 134, 182, 220, RGB_to_BRG(C_WHITE));
 8002724:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002728:	f7fe fece 	bl	80014c8 <RGB_to_BRG>
 800272c:	4603      	mov	r3, r0
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	23dc      	movs	r3, #220	; 0xdc
 8002732:	22b6      	movs	r2, #182	; 0xb6
 8002734:	2186      	movs	r1, #134	; 0x86
 8002736:	2006      	movs	r0, #6
 8002738:	f00f fe1a 	bl	8012370 <UG_DrawFrame>
		UG_DrawFrame(5, 133, 183, 221, RGB_to_BRG(C_WHITE));
 800273c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002740:	f7fe fec2 	bl	80014c8 <RGB_to_BRG>
 8002744:	4603      	mov	r3, r0
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	23dd      	movs	r3, #221	; 0xdd
 800274a:	22b7      	movs	r2, #183	; 0xb7
 800274c:	2185      	movs	r1, #133	; 0x85
 800274e:	2005      	movs	r0, #5
 8002750:	f00f fe0e 	bl	8012370 <UG_DrawFrame>

		LCD_PutStr(6, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002754:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002758:	f7fe feb6 	bl	80014c8 <RGB_to_BRG>
 800275c:	4603      	mov	r3, r0
 800275e:	461c      	mov	r4, r3
 8002760:	2000      	movs	r0, #0
 8002762:	f7fe feb1 	bl	80014c8 <RGB_to_BRG>
 8002766:	4603      	mov	r3, r0
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	9400      	str	r4, [sp, #0]
 800276c:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <LCD_draw_main_screen+0x358>)
 800276e:	4a62      	ldr	r2, [pc, #392]	; (80028f8 <LCD_draw_main_screen+0x35c>)
 8002770:	21eb      	movs	r1, #235	; 0xeb
 8002772:	2006      	movs	r0, #6
 8002774:	f003 fb3a 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(6, 255, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002778:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800277c:	f7fe fea4 	bl	80014c8 <RGB_to_BRG>
 8002780:	4603      	mov	r3, r0
 8002782:	461c      	mov	r4, r3
 8002784:	2000      	movs	r0, #0
 8002786:	f7fe fe9f 	bl	80014c8 <RGB_to_BRG>
 800278a:	4603      	mov	r3, r0
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	9400      	str	r4, [sp, #0]
 8002790:	4b58      	ldr	r3, [pc, #352]	; (80028f4 <LCD_draw_main_screen+0x358>)
 8002792:	4a5a      	ldr	r2, [pc, #360]	; (80028fc <LCD_draw_main_screen+0x360>)
 8002794:	21ff      	movs	r1, #255	; 0xff
 8002796:	2006      	movs	r0, #6
 8002798:	f003 fb28 	bl	8005dec <LCD_PutStr>
		LCD_PutStr(6, 275, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800279c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027a0:	f7fe fe92 	bl	80014c8 <RGB_to_BRG>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461c      	mov	r4, r3
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7fe fe8d 	bl	80014c8 <RGB_to_BRG>
 80027ae:	4603      	mov	r3, r0
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	9400      	str	r4, [sp, #0]
 80027b4:	4b4f      	ldr	r3, [pc, #316]	; (80028f4 <LCD_draw_main_screen+0x358>)
 80027b6:	4a52      	ldr	r2, [pc, #328]	; (8002900 <LCD_draw_main_screen+0x364>)
 80027b8:	f240 1113 	movw	r1, #275	; 0x113
 80027bc:	2006      	movs	r0, #6
 80027be:	f003 fb15 	bl	8005dec <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 80027c2:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80027c6:	f7fe fe7f 	bl	80014c8 <RGB_to_BRG>
 80027ca:	4603      	mov	r3, r0
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	f44f 7394 	mov.w	r3, #296	; 0x128
 80027d2:	22f0      	movs	r2, #240	; 0xf0
 80027d4:	f44f 7194 	mov.w	r1, #296	; 0x128
 80027d8:	2002      	movs	r0, #2
 80027da:	f00f fef7 	bl	80125cc <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 80027de:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80027e2:	f7fe fe71 	bl	80014c8 <RGB_to_BRG>
 80027e6:	4603      	mov	r3, r0
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	f240 1329 	movw	r3, #297	; 0x129
 80027ee:	22f0      	movs	r2, #240	; 0xf0
 80027f0:	f240 1129 	movw	r1, #297	; 0x129
 80027f4:	2002      	movs	r0, #2
 80027f6:	f00f fee9 	bl	80125cc <UG_DrawLine>


		LCD_PutStr(6, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 80027fa:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80027fe:	f7fe fe63 	bl	80014c8 <RGB_to_BRG>
 8002802:	4603      	mov	r3, r0
 8002804:	461c      	mov	r4, r3
 8002806:	2000      	movs	r0, #0
 8002808:	f7fe fe5e 	bl	80014c8 <RGB_to_BRG>
 800280c:	4603      	mov	r3, r0
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	9400      	str	r4, [sp, #0]
 8002812:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <LCD_draw_main_screen+0x344>)
 8002814:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <LCD_draw_main_screen+0x368>)
 8002816:	f240 112d 	movw	r1, #301	; 0x12d
 800281a:	2006      	movs	r0, #6
 800281c:	f003 fae6 	bl	8005dec <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002820:	2228      	movs	r2, #40	; 0x28
 8002822:	2100      	movs	r1, #0
 8002824:	4838      	ldr	r0, [pc, #224]	; (8002908 <LCD_draw_main_screen+0x36c>)
 8002826:	f014 fc28 	bl	801707a <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <LCD_draw_main_screen+0x370>)
 800282c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002830:	4937      	ldr	r1, [pc, #220]	; (8002910 <LCD_draw_main_screen+0x374>)
 8002832:	4835      	ldr	r0, [pc, #212]	; (8002908 <LCD_draw_main_screen+0x36c>)
 8002834:	f014 fbbe 	bl	8016fb4 <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002838:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 800283c:	f7fe fe44 	bl	80014c8 <RGB_to_BRG>
 8002840:	4603      	mov	r3, r0
 8002842:	461c      	mov	r4, r3
 8002844:	2000      	movs	r0, #0
 8002846:	f7fe fe3f 	bl	80014c8 <RGB_to_BRG>
 800284a:	4603      	mov	r3, r0
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	9400      	str	r4, [sp, #0]
 8002850:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <LCD_draw_main_screen+0x344>)
 8002852:	4a2d      	ldr	r2, [pc, #180]	; (8002908 <LCD_draw_main_screen+0x36c>)
 8002854:	f240 112d 	movw	r1, #301	; 0x12d
 8002858:	2082      	movs	r0, #130	; 0x82
 800285a:	f003 fac7 	bl	8005dec <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 800285e:	2228      	movs	r2, #40	; 0x28
 8002860:	2100      	movs	r1, #0
 8002862:	4829      	ldr	r0, [pc, #164]	; (8002908 <LCD_draw_main_screen+0x36c>)
 8002864:	f014 fc09 	bl	801707a <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <LCD_draw_main_screen+0x370>)
 800286a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800286e:	4928      	ldr	r1, [pc, #160]	; (8002910 <LCD_draw_main_screen+0x374>)
 8002870:	4825      	ldr	r0, [pc, #148]	; (8002908 <LCD_draw_main_screen+0x36c>)
 8002872:	f014 fb9f 	bl	8016fb4 <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002876:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 800287a:	f7fe fe25 	bl	80014c8 <RGB_to_BRG>
 800287e:	4603      	mov	r3, r0
 8002880:	461c      	mov	r4, r3
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe fe20 	bl	80014c8 <RGB_to_BRG>
 8002888:	4603      	mov	r3, r0
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	9400      	str	r4, [sp, #0]
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <LCD_draw_main_screen+0x344>)
 8002890:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <LCD_draw_main_screen+0x36c>)
 8002892:	f240 112d 	movw	r1, #301	; 0x12d
 8002896:	20be      	movs	r0, #190	; 0xbe
 8002898:	f003 faa8 	bl	8005dec <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 800289c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028a0:	f7fe fe12 	bl	80014c8 <RGB_to_BRG>
 80028a4:	4603      	mov	r3, r0
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	f240 1321 	movw	r3, #289	; 0x121
 80028ac:	22e8      	movs	r2, #232	; 0xe8
 80028ae:	2135      	movs	r1, #53	; 0x35
 80028b0:	20d0      	movs	r0, #208	; 0xd0
 80028b2:	f00f fd5d 	bl	8012370 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 80028b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028ba:	f7fe fe05 	bl	80014c8 <RGB_to_BRG>
 80028be:	4603      	mov	r3, r0
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	f44f 7390 	mov.w	r3, #288	; 0x120
 80028c6:	22e7      	movs	r2, #231	; 0xe7
 80028c8:	2136      	movs	r1, #54	; 0x36
 80028ca:	20d1      	movs	r0, #209	; 0xd1
 80028cc:	f00f fd50 	bl	8012370 <UG_DrawFrame>
}
 80028d0:	bf00      	nop
 80028d2:	3704      	adds	r7, #4
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd90      	pop	{r4, r7, pc}
 80028d8:	0801bc04 	.word	0x0801bc04
 80028dc:	0801ac90 	.word	0x0801ac90
 80028e0:	0801be38 	.word	0x0801be38
 80028e4:	0801ac9c 	.word	0x0801ac9c
 80028e8:	0801cd48 	.word	0x0801cd48
 80028ec:	0801aca8 	.word	0x0801aca8
 80028f0:	0801acac 	.word	0x0801acac
 80028f4:	0801ae68 	.word	0x0801ae68
 80028f8:	0801acb8 	.word	0x0801acb8
 80028fc:	0801acc8 	.word	0x0801acc8
 8002900:	0801ace4 	.word	0x0801ace4
 8002904:	0801ad04 	.word	0x0801ad04
 8002908:	20000600 	.word	0x20000600
 800290c:	200006a8 	.word	0x200006a8
 8002910:	0801ac30 	.word	0x0801ac30

08002914 <LCD_draw_earth_fault_popup>:

void LCD_draw_earth_fault_popup(){
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b083      	sub	sp, #12
 8002918:	af02      	add	r7, sp, #8
	heater_off();
 800291a:	f7fe fff7 	bl	800190c <heater_off>

	UG_FillFrame(10, 50, 205, 205, RGB_to_BRG(C_ORANGE));
 800291e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002922:	f7fe fdd1 	bl	80014c8 <RGB_to_BRG>
 8002926:	4603      	mov	r3, r0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	23cd      	movs	r3, #205	; 0xcd
 800292c:	22cd      	movs	r2, #205	; 0xcd
 800292e:	2132      	movs	r1, #50	; 0x32
 8002930:	200a      	movs	r0, #10
 8002932:	f00f fcab 	bl	801228c <UG_FillFrame>
	UG_FillFrame(15, 55, 200, 200, RGB_to_BRG(C_WHITE));
 8002936:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800293a:	f7fe fdc5 	bl	80014c8 <RGB_to_BRG>
 800293e:	4603      	mov	r3, r0
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	23c8      	movs	r3, #200	; 0xc8
 8002944:	22c8      	movs	r2, #200	; 0xc8
 8002946:	2137      	movs	r1, #55	; 0x37
 8002948:	200f      	movs	r0, #15
 800294a:	f00f fc9f 	bl	801228c <UG_FillFrame>
	LCD_PutStr(20, 60, "GROUNDING", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 800294e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002952:	f7fe fdb9 	bl	80014c8 <RGB_to_BRG>
 8002956:	4603      	mov	r3, r0
 8002958:	461c      	mov	r4, r3
 800295a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800295e:	f7fe fdb3 	bl	80014c8 <RGB_to_BRG>
 8002962:	4603      	mov	r3, r0
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	9400      	str	r4, [sp, #0]
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <LCD_draw_earth_fault_popup+0x104>)
 800296a:	4a2c      	ldr	r2, [pc, #176]	; (8002a1c <LCD_draw_earth_fault_popup+0x108>)
 800296c:	213c      	movs	r1, #60	; 0x3c
 800296e:	2014      	movs	r0, #20
 8002970:	f003 fa3c 	bl	8005dec <LCD_PutStr>
	LCD_PutStr(20, 80, "ERROR", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8002974:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002978:	f7fe fda6 	bl	80014c8 <RGB_to_BRG>
 800297c:	4603      	mov	r3, r0
 800297e:	461c      	mov	r4, r3
 8002980:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002984:	f7fe fda0 	bl	80014c8 <RGB_to_BRG>
 8002988:	4603      	mov	r3, r0
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	9400      	str	r4, [sp, #0]
 800298e:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <LCD_draw_earth_fault_popup+0x104>)
 8002990:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <LCD_draw_earth_fault_popup+0x10c>)
 8002992:	2150      	movs	r1, #80	; 0x50
 8002994:	2014      	movs	r0, #20
 8002996:	f003 fa29 	bl	8005dec <LCD_PutStr>

	LCD_PutStr(20, 120, "CHECK", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 800299a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800299e:	f7fe fd93 	bl	80014c8 <RGB_to_BRG>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461c      	mov	r4, r3
 80029a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029aa:	f7fe fd8d 	bl	80014c8 <RGB_to_BRG>
 80029ae:	4603      	mov	r3, r0
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	9400      	str	r4, [sp, #0]
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <LCD_draw_earth_fault_popup+0x104>)
 80029b6:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <LCD_draw_earth_fault_popup+0x110>)
 80029b8:	2178      	movs	r1, #120	; 0x78
 80029ba:	2014      	movs	r0, #20
 80029bc:	f003 fa16 	bl	8005dec <LCD_PutStr>
	LCD_PutStr(20, 140, "CONNECTIONS", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80029c0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029c4:	f7fe fd80 	bl	80014c8 <RGB_to_BRG>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461c      	mov	r4, r3
 80029cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029d0:	f7fe fd7a 	bl	80014c8 <RGB_to_BRG>
 80029d4:	4603      	mov	r3, r0
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9400      	str	r4, [sp, #0]
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <LCD_draw_earth_fault_popup+0x104>)
 80029dc:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <LCD_draw_earth_fault_popup+0x114>)
 80029de:	218c      	movs	r1, #140	; 0x8c
 80029e0:	2014      	movs	r0, #20
 80029e2:	f003 fa03 	bl	8005dec <LCD_PutStr>
	LCD_PutStr(20, 160, "AND REBOOT", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80029e6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029ea:	f7fe fd6d 	bl	80014c8 <RGB_to_BRG>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461c      	mov	r4, r3
 80029f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029f6:	f7fe fd67 	bl	80014c8 <RGB_to_BRG>
 80029fa:	4603      	mov	r3, r0
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	9400      	str	r4, [sp, #0]
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <LCD_draw_earth_fault_popup+0x104>)
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <LCD_draw_earth_fault_popup+0x118>)
 8002a04:	21a0      	movs	r1, #160	; 0xa0
 8002a06:	2014      	movs	r0, #20
 8002a08:	f003 f9f0 	bl	8005dec <LCD_PutStr>

	Error_Handler();
 8002a0c:	f001 fc46 	bl	800429c <Error_Handler>
}
 8002a10:	bf00      	nop
 8002a12:	3704      	adds	r7, #4
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd90      	pop	{r4, r7, pc}
 8002a18:	0801be38 	.word	0x0801be38
 8002a1c:	0801ad0c 	.word	0x0801ad0c
 8002a20:	0801ad18 	.word	0x0801ad18
 8002a24:	0801ad20 	.word	0x0801ad20
 8002a28:	0801ad28 	.word	0x0801ad28
 8002a2c:	0801ad34 	.word	0x0801ad34

08002a30 <get_set_temperature>:


/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8002a30:	b598      	push	{r3, r4, r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	if(custom_temperature_on == 0){
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <get_set_temperature+0x70>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d12f      	bne.n	8002a9c <get_set_temperature+0x6c>
		TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8002a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fd86 	bl	8000554 <__aeabi_ui2d>
 8002a48:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <get_set_temperature+0x74>)
 8002a4a:	ed93 7b00 	vldr	d7, [r3]
 8002a4e:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <get_set_temperature+0x78>)
 8002a50:	ed93 6b00 	vldr	d6, [r3]
 8002a54:	eeb0 2a46 	vmov.f32	s4, s12
 8002a58:	eef0 2a66 	vmov.f32	s5, s13
 8002a5c:	eeb0 1a47 	vmov.f32	s2, s14
 8002a60:	eef0 1a67 	vmov.f32	s3, s15
 8002a64:	ec41 0b10 	vmov	d0, r0, r1
 8002a68:	f7fe fc64 	bl	8001334 <clamp>
 8002a6c:	ec53 2b10 	vmov	r2, r3, d0
 8002a70:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	f7fe f8be 	bl	8000bf8 <__aeabi_d2uiz>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	6263      	str	r3, [r4, #36]	; 0x24
		sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 8002a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fd71 	bl	8000574 <__aeabi_i2d>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4905      	ldr	r1, [pc, #20]	; (8002aac <get_set_temperature+0x7c>)
 8002a98:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8002a9c:	bf00      	nop
 8002a9e:	bd98      	pop	{r3, r4, r7, pc}
 8002aa0:	200006a0 	.word	0x200006a0
 8002aa4:	20000028 	.word	0x20000028
 8002aa8:	20000030 	.word	0x20000030
 8002aac:	20000038 	.word	0x20000038

08002ab0 <beep>:

/* Beep the beeper */
void beep(){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <beep+0x30>)
 8002ab6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <beep+0x34>)
 8002ac0:	f7fe f82a 	bl	8000b18 <__aeabi_dcmpeq>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d100      	bne.n	8002acc <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 8002aca:	e006      	b.n	8002ada <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8002acc:	2104      	movs	r1, #4
 8002ace:	4806      	ldr	r0, [pc, #24]	; (8002ae8 <beep+0x38>)
 8002ad0:	f00a fcb8 	bl	800d444 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <beep+0x3c>)
 8002ad6:	f00a fbc5 	bl	800d264 <HAL_TIM_Base_Start_IT>
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200006a8 	.word	0x200006a8
 8002ae4:	3ff00000 	.word	0x3ff00000
 8002ae8:	2000204c 	.word	0x2000204c
 8002aec:	200021c8 	.word	0x200021c8

08002af0 <handle_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void handle_emergency_shutdown(){
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	af00      	add	r7, sp, #0
	/* Get time when iron turns on */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8002af4:	4b38      	ldr	r3, [pc, #224]	; (8002bd8 <handle_emergency_shutdown+0xe8>)
 8002af6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <handle_emergency_shutdown+0x20>
 8002afe:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <handle_emergency_shutdown+0xec>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <handle_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8002b06:	f003 fa7f 	bl	8006008 <HAL_GetTick>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4a34      	ldr	r2, [pc, #208]	; (8002be0 <handle_emergency_shutdown+0xf0>)
 8002b0e:	6013      	str	r3, [r2, #0]
	}

	/* Set state to EMERGENCY_SLEEP if iron ON for longer time than emergency_time */
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8002b10:	4b31      	ldr	r3, [pc, #196]	; (8002bd8 <handle_emergency_shutdown+0xe8>)
 8002b12:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	f7fd fffb 	bl	8000b18 <__aeabi_dcmpeq>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d024      	beq.n	8002b72 <handle_emergency_shutdown+0x82>
 8002b28:	f003 fa6e 	bl	8006008 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <handle_emergency_shutdown+0xf0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fd0d 	bl	8000554 <__aeabi_ui2d>
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	460d      	mov	r5, r1
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <handle_emergency_shutdown+0xf4>)
 8002b40:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002b44:	a322      	add	r3, pc, #136	; (adr r3, 8002bd0 <handle_emergency_shutdown+0xe0>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f7fd fd7d 	bl	8000648 <__aeabi_dmul>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4620      	mov	r0, r4
 8002b54:	4629      	mov	r1, r5
 8002b56:	f7fd fffd 	bl	8000b54 <__aeabi_dcmpge>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <handle_emergency_shutdown+0x82>
 8002b60:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <handle_emergency_shutdown+0xec>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <handle_emergency_shutdown+0x82>
		change_state(EMERGENCY_SLEEP);
 8002b68:	2003      	movs	r0, #3
 8002b6a:	f7fe fcc3 	bl	80014f4 <change_state>
		beep();
 8002b6e:	f7ff ff9f 	bl	8002ab0 <beep>
	}

	/* Set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <handle_emergency_shutdown+0xe8>)
 8002b74:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <handle_emergency_shutdown+0xf8>)
 8002b7e:	f7fd fff3 	bl	8000b68 <__aeabi_dcmpgt>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00b      	beq.n	8002ba0 <handle_emergency_shutdown+0xb0>
 8002b88:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <handle_emergency_shutdown+0xec>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d107      	bne.n	8002ba0 <handle_emergency_shutdown+0xb0>
		show_popup("\n\n  NO tip detected");
 8002b90:	4816      	ldr	r0, [pc, #88]	; (8002bec <handle_emergency_shutdown+0xfc>)
 8002b92:	f7fe fec3 	bl	800191c <show_popup>
		change_state(EMERGENCY_SLEEP);
 8002b96:	2003      	movs	r0, #3
 8002b98:	f7fe fcac 	bl	80014f4 <change_state>
		beep();
 8002b9c:	f7ff ff88 	bl	8002ab0 <beep>
	}
	/* Set state to EMERGENCY_SLEEP if input voltage is too low */
	if((sensor_values.bus_voltage <= MIN_BUSVOLTAGE) && (active_state == RUN)){
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <handle_emergency_shutdown+0xe8>)
 8002ba2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ba6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	d900      	bls.n	8002bb6 <handle_emergency_shutdown+0xc6>
		show_popup("\n\n  Too Low voltage");
		change_state(EMERGENCY_SLEEP);
	}
}
 8002bb4:	e009      	b.n	8002bca <handle_emergency_shutdown+0xda>
	if((sensor_values.bus_voltage <= MIN_BUSVOLTAGE) && (active_state == RUN)){
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <handle_emergency_shutdown+0xec>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d105      	bne.n	8002bca <handle_emergency_shutdown+0xda>
		show_popup("\n\n  Too Low voltage");
 8002bbe:	480c      	ldr	r0, [pc, #48]	; (8002bf0 <handle_emergency_shutdown+0x100>)
 8002bc0:	f7fe feac 	bl	800191c <show_popup>
		change_state(EMERGENCY_SLEEP);
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f7fe fc95 	bl	80014f4 <change_state>
}
 8002bca:	bf00      	nop
 8002bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	40ed4c00 	.word	0x40ed4c00
 8002bd8:	20000038 	.word	0x20000038
 8002bdc:	2000001d 	.word	0x2000001d
 8002be0:	200005c8 	.word	0x200005c8
 8002be4:	200006a8 	.word	0x200006a8
 8002be8:	407e0000 	.word	0x407e0000
 8002bec:	0801ad40 	.word	0x0801ad40
 8002bf0:	0801ad54 	.word	0x0801ad54

08002bf4 <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 8002bf4:	b598      	push	{r3, r4, r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 8002bf8:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <handle_button_status+0x98>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d11e      	bne.n	8002c3e <handle_button_status+0x4a>
		SW_1_pressed = 0;
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <handle_button_status+0x98>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 8002c06:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <handle_button_status+0x9c>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <handle_button_status+0x22>
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <handle_button_status+0x9c>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d103      	bne.n	8002c1e <handle_button_status+0x2a>
			change_state(HALTED);
 8002c16:	2004      	movs	r0, #4
 8002c18:	f7fe fc6c 	bl	80014f4 <change_state>
 8002c1c:	e00a      	b.n	8002c34 <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <handle_button_status+0x9c>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d003      	beq.n	8002c2e <handle_button_status+0x3a>
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <handle_button_status+0x9c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d102      	bne.n	8002c34 <handle_button_status+0x40>
			change_state(RUN);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fe fc60 	bl	80014f4 <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 8002c34:	f003 f9e8 	bl	8006008 <HAL_GetTick>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <handle_button_status+0xa0>)
 8002c3c:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <handle_button_status+0xa4>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10d      	bne.n	8002c62 <handle_button_status+0x6e>
		SW_2_pressed = 0;
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <handle_button_status+0xa4>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <handle_button_status+0xa8>)
 8002c4e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c52:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f7fd ffcd 	bl	8000bf8 <__aeabi_d2uiz>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <handle_button_status+0xac>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10d      	bne.n	8002c86 <handle_button_status+0x92>
		SW_3_pressed = 0;
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <handle_button_status+0xac>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <handle_button_status+0xa8>)
 8002c72:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c76:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f7fd ffbb 	bl	8000bf8 <__aeabi_d2uiz>
 8002c82:	4603      	mov	r3, r0
 8002c84:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 8002c86:	bf00      	nop
 8002c88:	bd98      	pop	{r3, r4, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200005dc 	.word	0x200005dc
 8002c90:	2000001d 	.word	0x2000001d
 8002c94:	200005c4 	.word	0x200005c4
 8002c98:	200005dd 	.word	0x200005dd
 8002c9c:	200006a8 	.word	0x200006a8
 8002ca0:	200005de 	.word	0x200005de
 8002ca4:	00000000 	.word	0x00000000

08002ca8 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 8002ca8:	b5b0      	push	{r4, r5, r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 8002cae:	2140      	movs	r1, #64	; 0x40
 8002cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb4:	f006 feea 	bl	8009a8c <HAL_GPIO_ReadPin>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <get_stand_status+0x1c>
		stand_status = 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	71fb      	strb	r3, [r7, #7]
 8002cc2:	e001      	b.n	8002cc8 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	493b      	ldr	r1, [pc, #236]	; (8002db8 <get_stand_status+0x110>)
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 fb1b 	bl	8004308 <Moving_Average_Compute>
 8002cd2:	eeb0 7a40 	vmov.f32	s14, s0
 8002cd6:	eef0 7a60 	vmov.f32	s15, s1
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <get_stand_status+0x114>)
 8002cdc:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand >= 0.2){
 8002ce0:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <get_stand_status+0x114>)
 8002ce2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002ce6:	a330      	add	r3, pc, #192	; (adr r3, 8002da8 <get_stand_status+0x100>)
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f7fd ff32 	bl	8000b54 <__aeabi_dcmpge>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d039      	beq.n	8002d6a <get_stand_status+0xc2>
		if(active_state == RUN){
 8002cf6:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <get_stand_status+0x118>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d107      	bne.n	8002d0e <get_stand_status+0x66>
			change_state(STANDBY);
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f7fe fbf8 	bl	80014f4 <change_state>
			previous_standby_millis = HAL_GetTick();
 8002d04:	f003 f980 	bl	8006008 <HAL_GetTick>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4a2e      	ldr	r2, [pc, #184]	; (8002dc4 <get_stand_status+0x11c>)
 8002d0c:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 8002d0e:	f003 f97b 	bl	8006008 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <get_stand_status+0x11c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fc1a 	bl	8000554 <__aeabi_ui2d>
 8002d20:	4604      	mov	r4, r0
 8002d22:	460d      	mov	r5, r1
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <get_stand_status+0x120>)
 8002d26:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002d2a:	a321      	add	r3, pc, #132	; (adr r3, 8002db0 <get_stand_status+0x108>)
 8002d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d30:	f7fd fc8a 	bl	8000648 <__aeabi_dmul>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4620      	mov	r0, r4
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	f7fd ff0a 	bl	8000b54 <__aeabi_dcmpge>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d006      	beq.n	8002d54 <get_stand_status+0xac>
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <get_stand_status+0x118>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <get_stand_status+0xac>
			change_state(SLEEP);
 8002d4e:	2002      	movs	r0, #2
 8002d50:	f7fe fbd0 	bl	80014f4 <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <get_stand_status+0x118>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d003      	beq.n	8002d64 <get_stand_status+0xbc>
 8002d5c:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <get_stand_status+0x118>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d102      	bne.n	8002d6a <get_stand_status+0xc2>
			change_state(SLEEP);
 8002d64:	2002      	movs	r0, #2
 8002d66:	f7fe fbc5 	bl	80014f4 <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.2){
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <get_stand_status+0x114>)
 8002d6c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002d70:	a30d      	add	r3, pc, #52	; (adr r3, 8002da8 <get_stand_status+0x100>)
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	f7fd fed9 	bl	8000b2c <__aeabi_dcmplt>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d100      	bne.n	8002d82 <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
			change_state(RUN);
		}
	}
}
 8002d80:	e00e      	b.n	8002da0 <get_stand_status+0xf8>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <get_stand_status+0x118>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d007      	beq.n	8002d9a <get_stand_status+0xf2>
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <get_stand_status+0x118>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d003      	beq.n	8002d9a <get_stand_status+0xf2>
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <get_stand_status+0x118>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <get_stand_status+0xf8>
			change_state(RUN);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7fe fbaa 	bl	80014f4 <change_state>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bdb0      	pop	{r4, r5, r7, pc}
 8002da8:	9999999a 	.word	0x9999999a
 8002dac:	3fc99999 	.word	0x3fc99999
 8002db0:	00000000 	.word	0x00000000
 8002db4:	40ed4c00 	.word	0x40ed4c00
 8002db8:	200013bc 	.word	0x200013bc
 8002dbc:	20000038 	.word	0x20000038
 8002dc0:	2000001d 	.word	0x2000001d
 8002dc4:	200005cc 	.word	0x200005cc
 8002dc8:	200006a8 	.word	0x200006a8
 8002dcc:	00000000 	.word	0x00000000

08002dd0 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_1_Pin) == 0){
 8002dd6:	2110      	movs	r1, #16
 8002dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ddc:	f006 fe56 	bl	8009a8c <HAL_GPIO_ReadPin>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <get_handle_type+0x1c>
		handle_status = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	71fb      	strb	r3, [r7, #7]
 8002dea:	e001      	b.n	8002df0 <get_handle_type+0x20>
	}
	else{
		handle_status = 1;
 8002dec:	2301      	movs	r3, #1
 8002dee:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle1_sense = Moving_Average_Compute(handle_status, &handle1_sense_filterStruct); /* Moving average filter */
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	496f      	ldr	r1, [pc, #444]	; (8002fb0 <get_handle_type+0x1e0>)
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 fa87 	bl	8004308 <Moving_Average_Compute>
 8002dfa:	eeb0 7a40 	vmov.f32	s14, s0
 8002dfe:	eef0 7a60 	vmov.f32	s15, s1
 8002e02:	4b6c      	ldr	r3, [pc, #432]	; (8002fb4 <get_handle_type+0x1e4>)
 8002e04:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_2_Pin) == 0){
 8002e08:	2120      	movs	r1, #32
 8002e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e0e:	f006 fe3d 	bl	8009a8c <HAL_GPIO_ReadPin>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <get_handle_type+0x4e>
		handle_status = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	71fb      	strb	r3, [r7, #7]
 8002e1c:	e001      	b.n	8002e22 <get_handle_type+0x52>
	}
	else{
		handle_status = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle2_sense = Moving_Average_Compute(handle_status, &handle2_sense_filterStruct); /* Moving average filter */
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	4964      	ldr	r1, [pc, #400]	; (8002fb8 <get_handle_type+0x1e8>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 fa6e 	bl	8004308 <Moving_Average_Compute>
 8002e2c:	eeb0 7a40 	vmov.f32	s14, s0
 8002e30:	eef0 7a60 	vmov.f32	s15, s1
 8002e34:	4b5f      	ldr	r3, [pc, #380]	; (8002fb4 <get_handle_type+0x1e4>)
 8002e36:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

	/* Determine if NT115 handle is detected */
	if((sensor_values.handle1_sense >= 0.5) && (sensor_values.handle2_sense < 0.5)){
 8002e3a:	4b5e      	ldr	r3, [pc, #376]	; (8002fb4 <get_handle_type+0x1e4>)
 8002e3c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	4b5d      	ldr	r3, [pc, #372]	; (8002fbc <get_handle_type+0x1ec>)
 8002e46:	f7fd fe85 	bl	8000b54 <__aeabi_dcmpge>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d029      	beq.n	8002ea4 <get_handle_type+0xd4>
 8002e50:	4b58      	ldr	r3, [pc, #352]	; (8002fb4 <get_handle_type+0x1e4>)
 8002e52:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <get_handle_type+0x1ec>)
 8002e5c:	f7fd fe66 	bl	8000b2c <__aeabi_dcmplt>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01e      	beq.n	8002ea4 <get_handle_type+0xd4>
		handle = NT115;
 8002e66:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <get_handle_type+0x1f0>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 20; //20W
 8002e6c:	4b51      	ldr	r3, [pc, #324]	; (8002fb4 <get_handle_type+0x1e4>)
 8002e6e:	4a55      	ldr	r2, [pc, #340]	; (8002fc4 <get_handle_type+0x1f4>)
 8002e70:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 3;
 8002e72:	4955      	ldr	r1, [pc, #340]	; (8002fc8 <get_handle_type+0x1f8>)
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	4b54      	ldr	r3, [pc, #336]	; (8002fcc <get_handle_type+0x1fc>)
 8002e7a:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 1;
 8002e7e:	4954      	ldr	r1, [pc, #336]	; (8002fd0 <get_handle_type+0x200>)
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	4b53      	ldr	r3, [pc, #332]	; (8002fd4 <get_handle_type+0x204>)
 8002e86:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8002e8a:	4953      	ldr	r1, [pc, #332]	; (8002fd8 <get_handle_type+0x208>)
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	4b52      	ldr	r3, [pc, #328]	; (8002fdc <get_handle_type+0x20c>)
 8002e92:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 100;
 8002e96:	4952      	ldr	r1, [pc, #328]	; (8002fe0 <get_handle_type+0x210>)
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	4b51      	ldr	r3, [pc, #324]	; (8002fe4 <get_handle_type+0x214>)
 8002e9e:	e9c1 2300 	strd	r2, r3, [r1]
 8002ea2:	e052      	b.n	8002f4a <get_handle_type+0x17a>
	}
	/* Determine if T210 handle is detected */
	else if((sensor_values.handle1_sense < 0.5) && (sensor_values.handle2_sense >= 0.5)){
 8002ea4:	4b43      	ldr	r3, [pc, #268]	; (8002fb4 <get_handle_type+0x1e4>)
 8002ea6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <get_handle_type+0x1ec>)
 8002eb0:	f7fd fe3c 	bl	8000b2c <__aeabi_dcmplt>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d029      	beq.n	8002f0e <get_handle_type+0x13e>
 8002eba:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <get_handle_type+0x1e4>)
 8002ebc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <get_handle_type+0x1ec>)
 8002ec6:	f7fd fe45 	bl	8000b54 <__aeabi_dcmpge>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01e      	beq.n	8002f0e <get_handle_type+0x13e>
		handle = T210;
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <get_handle_type+0x1f0>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 8002ed6:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <get_handle_type+0x1e4>)
 8002ed8:	4a43      	ldr	r2, [pc, #268]	; (8002fe8 <get_handle_type+0x218>)
 8002eda:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 5;
 8002edc:	493a      	ldr	r1, [pc, #232]	; (8002fc8 <get_handle_type+0x1f8>)
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	4b42      	ldr	r3, [pc, #264]	; (8002fec <get_handle_type+0x21c>)
 8002ee4:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 5;
 8002ee8:	4939      	ldr	r1, [pc, #228]	; (8002fd0 <get_handle_type+0x200>)
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <get_handle_type+0x21c>)
 8002ef0:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8002ef4:	4938      	ldr	r1, [pc, #224]	; (8002fd8 <get_handle_type+0x208>)
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <get_handle_type+0x1ec>)
 8002efc:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 125;
 8002f00:	4937      	ldr	r1, [pc, #220]	; (8002fe0 <get_handle_type+0x210>)
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	4b3a      	ldr	r3, [pc, #232]	; (8002ff0 <get_handle_type+0x220>)
 8002f08:	e9c1 2300 	strd	r2, r3, [r1]
 8002f0c:	e01d      	b.n	8002f4a <get_handle_type+0x17a>
	}
	else{
		handle = T245;
 8002f0e:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <get_handle_type+0x1f0>)
 8002f10:	2202      	movs	r2, #2
 8002f12:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 8002f14:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <get_handle_type+0x1e4>)
 8002f16:	4a37      	ldr	r2, [pc, #220]	; (8002ff4 <get_handle_type+0x224>)
 8002f18:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 8;
 8002f1a:	492b      	ldr	r1, [pc, #172]	; (8002fc8 <get_handle_type+0x1f8>)
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	4b35      	ldr	r3, [pc, #212]	; (8002ff8 <get_handle_type+0x228>)
 8002f22:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 3;
 8002f26:	492a      	ldr	r1, [pc, #168]	; (8002fd0 <get_handle_type+0x200>)
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <get_handle_type+0x1fc>)
 8002f2e:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8002f32:	4929      	ldr	r1, [pc, #164]	; (8002fd8 <get_handle_type+0x208>)
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <get_handle_type+0x1ec>)
 8002f3a:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 150;
 8002f3e:	4928      	ldr	r1, [pc, #160]	; (8002fe0 <get_handle_type+0x210>)
 8002f40:	a319      	add	r3, pc, #100	; (adr r3, 8002fa8 <get_handle_type+0x1d8>)
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <get_handle_type+0x1f8>)
 8002f4c:	ed93 7b00 	vldr	d7, [r3]
 8002f50:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <get_handle_type+0x200>)
 8002f52:	ed93 6b00 	vldr	d6, [r3]
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <get_handle_type+0x208>)
 8002f58:	ed93 5b00 	vldr	d5, [r3]
 8002f5c:	eeb0 2a45 	vmov.f32	s4, s10
 8002f60:	eef0 2a65 	vmov.f32	s5, s11
 8002f64:	eeb0 1a46 	vmov.f32	s2, s12
 8002f68:	eef0 1a66 	vmov.f32	s3, s13
 8002f6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002f70:	eef0 0a67 	vmov.f32	s1, s15
 8002f74:	4821      	ldr	r0, [pc, #132]	; (8002ffc <get_handle_type+0x22c>)
 8002f76:	f001 fc9e 	bl	80048b6 <PID_SetTunings>
	PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 8002f7a:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <get_handle_type+0x210>)
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	4614      	mov	r4, r2
 8002f82:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002f86:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <get_handle_type+0x210>)
 8002f88:	ed93 7b00 	vldr	d7, [r3]
 8002f8c:	eeb0 1a47 	vmov.f32	s2, s14
 8002f90:	eef0 1a67 	vmov.f32	s3, s15
 8002f94:	ec45 4b10 	vmov	d0, r4, r5
 8002f98:	4818      	ldr	r0, [pc, #96]	; (8002ffc <get_handle_type+0x22c>)
 8002f9a:	f001 fc6c 	bl	8004876 <PID_SetILimits>

}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	4062c000 	.word	0x4062c000
 8002fb0:	200016e8 	.word	0x200016e8
 8002fb4:	20000038 	.word	0x20000038
 8002fb8:	20001a14 	.word	0x20001a14
 8002fbc:	3fe00000 	.word	0x3fe00000
 8002fc0:	200005b8 	.word	0x200005b8
 8002fc4:	41a00000 	.word	0x41a00000
 8002fc8:	200005e8 	.word	0x200005e8
 8002fcc:	40080000 	.word	0x40080000
 8002fd0:	200005f0 	.word	0x200005f0
 8002fd4:	3ff00000 	.word	0x3ff00000
 8002fd8:	200005f8 	.word	0x200005f8
 8002fdc:	3fd00000 	.word	0x3fd00000
 8002fe0:	20000020 	.word	0x20000020
 8002fe4:	40590000 	.word	0x40590000
 8002fe8:	42700000 	.word	0x42700000
 8002fec:	40140000 	.word	0x40140000
 8002ff0:	405f4000 	.word	0x405f4000
 8002ff4:	42f00000 	.word	0x42f00000
 8002ff8:	40200000 	.word	0x40200000
 8002ffc:	200022a8 	.word	0x200022a8

08003000 <HAL_GPIO_EXTI_Callback>:

/* Interrupts at button press */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b20      	cmp	r3, #32
 800300e:	d006      	beq.n	800301e <HAL_GPIO_EXTI_Callback+0x1e>
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	2b80      	cmp	r3, #128	; 0x80
 8003014:	d003      	beq.n	800301e <HAL_GPIO_EXTI_Callback+0x1e>
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301c:	d109      	bne.n	8003032 <HAL_GPIO_EXTI_Callback+0x32>
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <HAL_GPIO_EXTI_Callback+0x3c>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_TIM_Base_Start_IT(&htim16);
 8003026:	4806      	ldr	r0, [pc, #24]	; (8003040 <HAL_GPIO_EXTI_Callback+0x40>)
 8003028:	f00a f91c 	bl	800d264 <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_GPIO_EXTI_Callback+0x3c>)
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
    }
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2000001c 	.word	0x2000001c
 8003040:	2000217c 	.word	0x2000217c

08003044 <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7f1b      	ldrb	r3, [r3, #28]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d003      	beq.n	800305c <HAL_TIM_IC_CaptureCallback+0x18>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7f1b      	ldrb	r3, [r3, #28]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d101      	bne.n	8003060 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 800305c:	f7ff fd28 	bl	8002ab0 <beep>
	}
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	if (((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) && (current_measurement_requested == 1)){
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d110      	bne.n	800309a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7f1b      	ldrb	r3, [r3, #28]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d10c      	bne.n	800309a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d108      	bne.n	800309a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		current_measurement_requested = 0;
 8003088:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
		current_measurement_done = 0;
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc2);
 8003094:	4806      	ldr	r0, [pc, #24]	; (80030b0 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8003096:	f003 fccf 	bl	8006a38 <HAL_ADC_Start_IT>
	}
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20001fb4 	.word	0x20001fb4
 80030a8:	20000708 	.word	0x20000708
 80030ac:	200001c0 	.word	0x200001c0
 80030b0:	20001dac 	.word	0x20001dac

080030b4 <HAL_TIM_PeriodElapsedCallback>:

/* Timer Callbacks */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	/* take thermocouple measurement every 25 ms */
	if (htim == &htim6){
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a35      	ldr	r2, [pc, #212]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d10c      	bne.n	80030de <HAL_TIM_PeriodElapsedCallback+0x2a>
		heater_off();
 80030c4:	f7fe fc22 	bl	800190c <heater_off>
		thermocouple_measurement_done = 0;
 80030c8:	4b33      	ldr	r3, [pc, #204]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim7);
 80030ce:	4b33      	ldr	r3, [pc, #204]	; (800319c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim7){
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a2e      	ldr	r2, [pc, #184]	; (800319c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d104      	bne.n	80030f0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 80030e6:	2239      	movs	r2, #57	; 0x39
 80030e8:	492d      	ldr	r1, [pc, #180]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80030ea:	482e      	ldr	r0, [pc, #184]	; (80031a4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80030ec:	f003 fdd4 	bl	8006c98 <HAL_ADC_Start_DMA>
		}

	/* Beep length timer */
	if (htim == &htim17){
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d106      	bne.n	8003106 <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_TIM_Base_Stop_IT(&htim17);
 80030f8:	482b      	ldr	r0, [pc, #172]	; (80031a8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80030fa:	f00a f91d 	bl	800d338 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 80030fe:	2104      	movs	r1, #4
 8003100:	482a      	ldr	r0, [pc, #168]	; (80031ac <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003102:	f00a faeb 	bl	800d6dc <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim16 && SW_ready == 0)){
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d13d      	bne.n	800318a <HAL_TIM_PeriodElapsedCallback+0xd6>
 800310e:	4b29      	ldr	r3, [pc, #164]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d139      	bne.n	800318a <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 8003116:	2120      	movs	r1, #32
 8003118:	4827      	ldr	r0, [pc, #156]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800311a:	f006 fcb7 	bl	8009a8c <HAL_GPIO_ReadPin>
 800311e:	4603      	mov	r3, r0
 8003120:	2b01      	cmp	r3, #1
 8003122:	d10b      	bne.n	800313c <HAL_TIM_PeriodElapsedCallback+0x88>
			SW_ready = 1;
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x108>)
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
			beep();
 8003130:	f7ff fcbe 	bl	8002ab0 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003134:	481e      	ldr	r0, [pc, #120]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003136:	f00a f8ff 	bl	800d338 <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim16);
		}
	}
}
 800313a:	e026      	b.n	800318a <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003142:	f006 fca3 	bl	8009a8c <HAL_GPIO_ReadPin>
 8003146:	4603      	mov	r3, r0
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10b      	bne.n	8003164 <HAL_TIM_PeriodElapsedCallback+0xb0>
			SW_ready = 1;
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 8003152:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
			beep();
 8003158:	f7ff fcaa 	bl	8002ab0 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 800315c:	4814      	ldr	r0, [pc, #80]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800315e:	f00a f8eb 	bl	800d338 <HAL_TIM_Base_Stop_IT>
}
 8003162:	e012      	b.n	800318a <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 8003164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003168:	4813      	ldr	r0, [pc, #76]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800316a:	f006 fc8f 	bl	8009a8c <HAL_GPIO_ReadPin>
 800316e:	4603      	mov	r3, r0
 8003170:	2b01      	cmp	r3, #1
 8003172:	d10a      	bne.n	800318a <HAL_TIM_PeriodElapsedCallback+0xd6>
			SW_ready = 1;
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
			beep();
 8003180:	f7ff fc96 	bl	8002ab0 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003184:	480a      	ldr	r0, [pc, #40]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003186:	f00a f8d7 	bl	800d338 <HAL_TIM_Base_Stop_IT>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20002098 	.word	0x20002098
 8003198:	200001c1 	.word	0x200001c1
 800319c:	200020e4 	.word	0x200020e4
 80031a0:	2000062c 	.word	0x2000062c
 80031a4:	20001d40 	.word	0x20001d40
 80031a8:	200021c8 	.word	0x200021c8
 80031ac:	2000204c 	.word	0x2000204c
 80031b0:	2000217c 	.word	0x2000217c
 80031b4:	2000001c 	.word	0x2000001c
 80031b8:	48000400 	.word	0x48000400
 80031bc:	200005dc 	.word	0x200005dc
 80031c0:	200005dd 	.word	0x200005dd
 80031c4:	200005de 	.word	0x200005de

080031c8 <HAL_ADC_ConvCpltCallback>:
/* ADC conversion completed Callbacks */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (thermocouple_measurement_done == 0)){
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d8:	d110      	bne.n	80031fc <HAL_ADC_ConvCpltCallback+0x34>
 80031da:	4b18      	ldr	r3, [pc, #96]	; (800323c <HAL_ADC_ConvCpltCallback+0x74>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <HAL_ADC_ConvCpltCallback+0x34>
		get_thermocouple_temperature();
 80031e2:	f7fe fa11 	bl	8001608 <get_thermocouple_temperature>
		heater_on();
 80031e6:	f7fe fb3b 	bl	8001860 <heater_on>
		/* Compute PID */
		PID_Compute(&TPID);
 80031ea:	4815      	ldr	r0, [pc, #84]	; (8003240 <HAL_ADC_ConvCpltCallback+0x78>)
 80031ec:	f001 f970 	bl	80044d0 <PID_Compute>
		HAL_ADC_Stop_DMA(&hadc1);
 80031f0:	4814      	ldr	r0, [pc, #80]	; (8003244 <HAL_ADC_ConvCpltCallback+0x7c>)
 80031f2:	f003 fe05 	bl	8006e00 <HAL_ADC_Stop_DMA>
		thermocouple_measurement_done = 1;
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_ADC_ConvCpltCallback+0x74>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
	}
	if ((hadc->Instance == ADC2) && (current_measurement_done == 0)){
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a11      	ldr	r2, [pc, #68]	; (8003248 <HAL_ADC_ConvCpltCallback+0x80>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d116      	bne.n	8003234 <HAL_ADC_ConvCpltCallback+0x6c>
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <HAL_ADC_ConvCpltCallback+0x84>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d112      	bne.n	8003234 <HAL_ADC_ConvCpltCallback+0x6c>
		sensor_values.leak_current = HAL_ADC_GetValue(&hadc2);
 800320e:	4810      	ldr	r0, [pc, #64]	; (8003250 <HAL_ADC_ConvCpltCallback+0x88>)
 8003210:	f003 fe57 	bl	8006ec2 <HAL_ADC_GetValue>
 8003214:	4603      	mov	r3, r0
 8003216:	b29a      	uxth	r2, r3
 8003218:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <HAL_ADC_ConvCpltCallback+0x8c>)
 800321a:	831a      	strh	r2, [r3, #24]
		current_raw = HAL_ADC_GetValue(&hadc2);
 800321c:	480c      	ldr	r0, [pc, #48]	; (8003250 <HAL_ADC_ConvCpltCallback+0x88>)
 800321e:	f003 fe50 	bl	8006ec2 <HAL_ADC_GetValue>
 8003222:	4603      	mov	r3, r0
 8003224:	b29a      	uxth	r2, r3
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_ADC_ConvCpltCallback+0x90>)
 8003228:	801a      	strh	r2, [r3, #0]
		heater_on();
 800322a:	f7fe fb19 	bl	8001860 <heater_on>
		current_measurement_done = 1;
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_ADC_ConvCpltCallback+0x84>)
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
	}
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	200001c1 	.word	0x200001c1
 8003240:	200022a8 	.word	0x200022a8
 8003244:	20001d40 	.word	0x20001d40
 8003248:	50000100 	.word	0x50000100
 800324c:	200001c0 	.word	0x200001c0
 8003250:	20001dac 	.word	0x20001dac
 8003254:	20000038 	.word	0x20000038
 8003258:	2000069e 	.word	0x2000069e

0800325c <HAL_ADC_LevelOutOfWindowCallback>:

/* ADC watchdog Callback */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
		LCD_draw_earth_fault_popup();
 8003264:	f7ff fb56 	bl	8002914 <LCD_draw_earth_fault_popup>
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003274:	ed2d 8b06 	vpush	{d8-d10}
 8003278:	b08e      	sub	sp, #56	; 0x38
 800327a:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800327c:	f002 fe60 	bl	8005f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003280:	f000 fa5e 	bl	8003740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003284:	f000 ff5a 	bl	800413c <MX_GPIO_Init>
  MX_DMA_Init();
 8003288:	f000 ff26 	bl	80040d8 <MX_DMA_Init>
  MX_ADC1_Init();
 800328c:	f000 faa6 	bl	80037dc <MX_ADC1_Init>
  MX_ADC2_Init();
 8003290:	f000 fb3c 	bl	800390c <MX_ADC2_Init>
  MX_CRC_Init();
 8003294:	f000 fbd8 	bl	8003a48 <MX_CRC_Init>
  MX_TIM1_Init();
 8003298:	f000 fc76 	bl	8003b88 <MX_TIM1_Init>
  MX_TIM2_Init();
 800329c:	f000 fd14 	bl	8003cc8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80032a0:	f000 fd66 	bl	8003d70 <MX_TIM4_Init>
  MX_SPI2_Init();
 80032a4:	f000 fc32 	bl	8003b0c <MX_SPI2_Init>
  MX_I2C1_Init();
 80032a8:	f000 fbf0 	bl	8003a8c <MX_I2C1_Init>
  MX_USB_Device_Init();
 80032ac:	f012 fa40 	bl	8015730 <MX_USB_Device_Init>
  MX_TIM17_Init();
 80032b0:	f000 fe96 	bl	8003fe0 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80032b4:	f000 fec4 	bl	8004040 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 80032b8:	f000 fdea 	bl	8003e90 <MX_TIM7_Init>
  MX_TIM8_Init();
 80032bc:	f000 fe28 	bl	8003f10 <MX_TIM8_Init>
  MX_TIM6_Init();
 80032c0:	f000 fdb0 	bl	8003e24 <MX_TIM6_Init>
  MX_TIM16_Init();
 80032c4:	f000 fe64 	bl	8003f90 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fe faa1 	bl	8001810 <set_heater_duty>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 80032ce:	2108      	movs	r1, #8
 80032d0:	488f      	ldr	r0, [pc, #572]	; (8003510 <main+0x2a0>)
 80032d2:	f00b fabb 	bl	800e84c <HAL_TIMEx_PWMN_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80032d6:	213c      	movs	r1, #60	; 0x3c
 80032d8:	488e      	ldr	r0, [pc, #568]	; (8003514 <main+0x2a4>)
 80032da:	f00a fbd9 	bl	800da90 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80032de:	2100      	movs	r1, #0
 80032e0:	488b      	ldr	r0, [pc, #556]	; (8003510 <main+0x2a0>)
 80032e2:	f00a f8af 	bl	800d444 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 80032e6:	4b8c      	ldr	r3, [pc, #560]	; (8003518 <main+0x2a8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2205      	movs	r2, #5
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(&htim6);
 80032ee:	488b      	ldr	r0, [pc, #556]	; (800351c <main+0x2ac>)
 80032f0:	f009 ffb8 	bl	800d264 <HAL_TIM_Base_Start_IT>

	__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 80032f4:	4b8a      	ldr	r3, [pc, #552]	; (8003520 <main+0x2b0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	4b89      	ldr	r3, [pc, #548]	; (8003520 <main+0x2b0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	60da      	str	r2, [r3, #12]

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003304:	217f      	movs	r1, #127	; 0x7f
 8003306:	4887      	ldr	r0, [pc, #540]	; (8003524 <main+0x2b4>)
 8003308:	f005 f89a 	bl	8008440 <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800330c:	217f      	movs	r1, #127	; 0x7f
 800330e:	4886      	ldr	r0, [pc, #536]	; (8003528 <main+0x2b8>)
 8003310:	f005 f896 	bl	8008440 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8003314:	2239      	movs	r2, #57	; 0x39
 8003316:	4985      	ldr	r1, [pc, #532]	; (800352c <main+0x2bc>)
 8003318:	4883      	ldr	r0, [pc, #524]	; (8003528 <main+0x2b8>)
 800331a:	f003 fcbd 	bl	8006c98 <HAL_ADC_Start_DMA>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,30);
 800331e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003322:	4883      	ldr	r0, [pc, #524]	; (8003530 <main+0x2c0>)
 8003324:	f000 ffbf 	bl	80042a6 <Moving_Average_Init>
	Moving_Average_Init(&mcu_temperature_filter_struct,100);
 8003328:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8003534 <main+0x2c4>
 800332c:	4882      	ldr	r0, [pc, #520]	; (8003538 <main+0x2c8>)
 800332e:	f000 ffba 	bl	80042a6 <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,25);
 8003332:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8003336:	4881      	ldr	r0, [pc, #516]	; (800353c <main+0x2cc>)
 8003338:	f000 ffb5 	bl	80042a6 <Moving_Average_Init>
	Moving_Average_Init(&current_filterStruct,3);
 800333c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003340:	487f      	ldr	r0, [pc, #508]	; (8003540 <main+0x2d0>)
 8003342:	f000 ffb0 	bl	80042a6 <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 8003346:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800334a:	487e      	ldr	r0, [pc, #504]	; (8003544 <main+0x2d4>)
 800334c:	f000 ffab 	bl	80042a6 <Moving_Average_Init>
	Moving_Average_Init(&handle1_sense_filterStruct,20);
 8003350:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003354:	487c      	ldr	r0, [pc, #496]	; (8003548 <main+0x2d8>)
 8003356:	f000 ffa6 	bl	80042a6 <Moving_Average_Init>
	Moving_Average_Init(&handle2_sense_filterStruct,20);
 800335a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800335e:	487b      	ldr	r0, [pc, #492]	; (800354c <main+0x2dc>)
 8003360:	f000 ffa1 	bl	80042a6 <Moving_Average_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 8003364:	20c8      	movs	r0, #200	; 0xc8
 8003366:	f002 fe5b 	bl	8006020 <HAL_Delay>
	LCD_init();
 800336a:	f002 fd7d 	bl	8005e68 <LCD_init>

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 800336e:	f7fd fe75 	bl	800105c <FlashCheckCRC>
 8003372:	4603      	mov	r3, r0
 8003374:	f083 0301 	eor.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <main+0x114>
  	    	FlashWrite(&default_flash_values);
 800337e:	4874      	ldr	r0, [pc, #464]	; (8003550 <main+0x2e0>)
 8003380:	f7fd ff10 	bl	80011a4 <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 8003384:	4873      	ldr	r0, [pc, #460]	; (8003554 <main+0x2e4>)
 8003386:	f7fd fef3 	bl	8001170 <FlashRead>

  		/* Set startup state */
  	    change_state(HALTED);
 800338a:	2004      	movs	r0, #4
 800338c:	f7fe f8b2 	bl	80014f4 <change_state>

  		settings_menue();
 8003390:	f7fe fb0a 	bl	80019a8 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8003394:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <main+0x2e4>)
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	f7fd fc29 	bl	8000bf8 <__aeabi_d2uiz>
 80033a6:	4603      	mov	r3, r0
 80033a8:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80033aa:	4b6b      	ldr	r3, [pc, #428]	; (8003558 <main+0x2e8>)
 80033ac:	ed93 7b00 	vldr	d7, [r3]
 80033b0:	4b6a      	ldr	r3, [pc, #424]	; (800355c <main+0x2ec>)
 80033b2:	ed93 6b00 	vldr	d6, [r3]
 80033b6:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <main+0x2f0>)
 80033b8:	ed93 5b00 	vldr	d5, [r3]
 80033bc:	2300      	movs	r3, #0
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	2301      	movs	r3, #1
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	eeb0 2a45 	vmov.f32	s4, s10
 80033c8:	eef0 2a65 	vmov.f32	s5, s11
 80033cc:	eeb0 1a46 	vmov.f32	s2, s12
 80033d0:	eef0 1a66 	vmov.f32	s3, s13
 80033d4:	eeb0 0a47 	vmov.f32	s0, s14
 80033d8:	eef0 0a67 	vmov.f32	s1, s15
 80033dc:	4b61      	ldr	r3, [pc, #388]	; (8003564 <main+0x2f4>)
 80033de:	4a62      	ldr	r2, [pc, #392]	; (8003568 <main+0x2f8>)
 80033e0:	4962      	ldr	r1, [pc, #392]	; (800356c <main+0x2fc>)
 80033e2:	4863      	ldr	r0, [pc, #396]	; (8003570 <main+0x300>)
 80033e4:	f001 f828 	bl	8004438 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80033e8:	2101      	movs	r1, #1
 80033ea:	4861      	ldr	r0, [pc, #388]	; (8003570 <main+0x300>)
 80033ec:	f001 f9b7 	bl	800475e <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 80033f0:	4b60      	ldr	r3, [pc, #384]	; (8003574 <main+0x304>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2200      	movs	r2, #0
 80033f6:	4619      	mov	r1, r3
 80033f8:	485d      	ldr	r0, [pc, #372]	; (8003570 <main+0x300>)
 80033fa:	f001 fb5f 	bl	8004abc <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 80033fe:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8003500 <main+0x290>
 8003402:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8003508 <main+0x298>
 8003406:	485a      	ldr	r0, [pc, #360]	; (8003570 <main+0x300>)
 8003408:	f001 f9c7 	bl	800479a <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 800340c:	4b5a      	ldr	r3, [pc, #360]	; (8003578 <main+0x308>)
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	4690      	mov	r8, r2
 8003414:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003418:	4b57      	ldr	r3, [pc, #348]	; (8003578 <main+0x308>)
 800341a:	ed93 7b00 	vldr	d7, [r3]
 800341e:	eeb0 1a47 	vmov.f32	s2, s14
 8003422:	eef0 1a67 	vmov.f32	s3, s15
 8003426:	ec49 8b10 	vmov	d0, r8, r9
 800342a:	4851      	ldr	r0, [pc, #324]	; (8003570 <main+0x300>)
 800342c:	f001 fa23 	bl	8004876 <PID_SetILimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 8003430:	f7ff f8b4 	bl	800259c <LCD_draw_main_screen>

  		/* Init and fill filter structures with initial values */
  		for (int i = 0; i<200;i++){
 8003434:	2300      	movs	r3, #0
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	e010      	b.n	800345c <main+0x1ec>
  			get_bus_voltage();
 800343a:	f7fe f891 	bl	8001560 <get_bus_voltage>
  			get_heater_current();
 800343e:	f7fe f8bb 	bl	80015b8 <get_heater_current>
  			get_mcu_temp();
 8003442:	f7fd ffe5 	bl	8001410 <get_mcu_temp>
  			get_thermocouple_temperature();
 8003446:	f7fe f8df 	bl	8001608 <get_thermocouple_temperature>
  			get_handle_type();
 800344a:	f7ff fcc1 	bl	8002dd0 <get_handle_type>
  			get_stand_status();
 800344e:	f7ff fc2b 	bl	8002ca8 <get_stand_status>
  			handle_button_status();
 8003452:	f7ff fbcf 	bl	8002bf4 <handle_button_status>
  		for (int i = 0; i<200;i++){
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3301      	adds	r3, #1
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2bc7      	cmp	r3, #199	; 0xc7
 8003460:	ddeb      	ble.n	800343a <main+0x1ca>
  		}

  		/* Start-up beep */
  		beep();
 8003462:	f7ff fb25 	bl	8002ab0 <beep>
  		HAL_Delay(100);
 8003466:	2064      	movs	r0, #100	; 0x64
 8003468:	f002 fdda 	bl	8006020 <HAL_Delay>
  		beep();
 800346c:	f7ff fb20 	bl	8002ab0 <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003470:	f002 fdca 	bl	8006008 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	4b41      	ldr	r3, [pc, #260]	; (800357c <main+0x30c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1ad2      	subs	r2, r2, r3
 800347c:	4b40      	ldr	r3, [pc, #256]	; (8003580 <main+0x310>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d30e      	bcc.n	80034a2 <main+0x232>
  				get_stand_status();
 8003484:	f7ff fc10 	bl	8002ca8 <get_stand_status>
  				get_handle_type();
 8003488:	f7ff fca2 	bl	8002dd0 <get_handle_type>
  				get_set_temperature();
 800348c:	f7ff fad0 	bl	8002a30 <get_set_temperature>
  				handle_button_status();
 8003490:	f7ff fbb0 	bl	8002bf4 <handle_button_status>
  	  			handle_emergency_shutdown();
 8003494:	f7ff fb2c 	bl	8002af0 <handle_emergency_shutdown>
  				previous_sensor_update_high_update = HAL_GetTick();
 8003498:	f002 fdb6 	bl	8006008 <HAL_GetTick>
 800349c:	4603      	mov	r3, r0
 800349e:	4a37      	ldr	r2, [pc, #220]	; (800357c <main+0x30c>)
 80034a0:	6013      	str	r3, [r2, #0]
  			}

  			if(HAL_GetTick() - previous_sensor_update_low_update >= interval_sensor_update_low_update){
 80034a2:	f002 fdb1 	bl	8006008 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	4b36      	ldr	r3, [pc, #216]	; (8003584 <main+0x314>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1ad2      	subs	r2, r2, r3
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <main+0x318>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d30a      	bcc.n	80034cc <main+0x25c>
  				get_bus_voltage();
 80034b6:	f7fe f853 	bl	8001560 <get_bus_voltage>
  				get_heater_current();
 80034ba:	f7fe f87d 	bl	80015b8 <get_heater_current>
  				get_mcu_temp();
 80034be:	f7fd ffa7 	bl	8001410 <get_mcu_temp>
  				previous_sensor_update_low_update = HAL_GetTick();
 80034c2:	f002 fda1 	bl	8006008 <HAL_GetTick>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <main+0x314>)
 80034ca:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 80034cc:	4b2f      	ldr	r3, [pc, #188]	; (800358c <main+0x31c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	dc67      	bgt.n	80035a4 <main+0x334>
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	da5d      	bge.n	8003594 <main+0x324>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <main+0x272>
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d007      	beq.n	80034f0 <main+0x280>
 80034e0:	e060      	b.n	80035a4 <main+0x334>
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 80034e2:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <main+0x320>)
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	491e      	ldr	r1, [pc, #120]	; (8003564 <main+0x2f4>)
 80034ea:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80034ee:	e059      	b.n	80035a4 <main+0x334>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <main+0x2e4>)
 80034f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034f6:	491b      	ldr	r1, [pc, #108]	; (8003564 <main+0x2f4>)
 80034f8:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80034fc:	e052      	b.n	80035a4 <main+0x334>
 80034fe:	bf00      	nop
 8003500:	00000000 	.word	0x00000000
 8003504:	407f4000 	.word	0x407f4000
	...
 8003510:	20001fb4 	.word	0x20001fb4
 8003514:	20002000 	.word	0x20002000
 8003518:	2000204c 	.word	0x2000204c
 800351c:	20002098 	.word	0x20002098
 8003520:	200020e4 	.word	0x200020e4
 8003524:	20001dac 	.word	0x20001dac
 8003528:	20001d40 	.word	0x20001d40
 800352c:	2000062c 	.word	0x2000062c
 8003530:	2000070c 	.word	0x2000070c
 8003534:	42c80000 	.word	0x42c80000
 8003538:	20000a38 	.word	0x20000a38
 800353c:	20000d64 	.word	0x20000d64
 8003540:	20001090 	.word	0x20001090
 8003544:	200013bc 	.word	0x200013bc
 8003548:	200016e8 	.word	0x200016e8
 800354c:	20001a14 	.word	0x20001a14
 8003550:	20000088 	.word	0x20000088
 8003554:	200006a8 	.word	0x200006a8
 8003558:	200005e8 	.word	0x200005e8
 800355c:	200005f0 	.word	0x200005f0
 8003560:	200005f8 	.word	0x200005f8
 8003564:	200006f8 	.word	0x200006f8
 8003568:	200006f0 	.word	0x200006f0
 800356c:	20000040 	.word	0x20000040
 8003570:	200022a8 	.word	0x200022a8
 8003574:	2000000c 	.word	0x2000000c
 8003578:	20000020 	.word	0x20000020
 800357c:	200005d4 	.word	0x200005d4
 8003580:	20000014 	.word	0x20000014
 8003584:	200005d8 	.word	0x200005d8
 8003588:	20000018 	.word	0x20000018
 800358c:	2000001d 	.word	0x2000001d
 8003590:	20000038 	.word	0x20000038
  				}
  				case SLEEP:
  				case EMERGENCY_SLEEP:
  				case HALTED: {
  					PID_setpoint = 0;
 8003594:	4958      	ldr	r1, [pc, #352]	; (80036f8 <main+0x488>)
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80035a2:	bf00      	nop
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 80035a4:	f002 fd30 	bl	8006008 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b54      	ldr	r3, [pc, #336]	; (80036fc <main+0x48c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	1ad2      	subs	r2, r2, r3
 80035b0:	4b53      	ldr	r3, [pc, #332]	; (8003700 <main+0x490>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d370      	bcc.n	800369a <main+0x42a>
  				memset(&buffer, '\0', sizeof(buffer));
 80035b8:	2228      	movs	r2, #40	; 0x28
 80035ba:	2100      	movs	r1, #0
 80035bc:	4851      	ldr	r0, [pc, #324]	; (8003704 <main+0x494>)
 80035be:	f013 fd5c 	bl	801707a <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80035c2:	4b51      	ldr	r3, [pc, #324]	; (8003708 <main+0x498>)
 80035c4:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 80035c8:	4b4f      	ldr	r3, [pc, #316]	; (8003708 <main+0x498>)
 80035ca:	e9d3 8900 	ldrd	r8, r9, [r3]
  						sensor_values.thermocouple_temperature, sensor_values.set_temperature,
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 80035ce:	4b4f      	ldr	r3, [pc, #316]	; (800370c <main+0x49c>)
 80035d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	4b4d      	ldr	r3, [pc, #308]	; (8003710 <main+0x4a0>)
 80035da:	f7fd f95f 	bl	800089c <__aeabi_ddiv>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	4b4a      	ldr	r3, [pc, #296]	; (8003714 <main+0x4a4>)
 80035ec:	f7fd f82c 	bl	8000648 <__aeabi_dmul>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	ec43 2b19 	vmov	d9, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 80035f8:	4847      	ldr	r0, [pc, #284]	; (8003718 <main+0x4a8>)
 80035fa:	f001 faa3 	bl	8004b44 <PID_GetPpart>
 80035fe:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	4b45      	ldr	r3, [pc, #276]	; (800371c <main+0x4ac>)
 8003608:	f7fd f948 	bl	800089c <__aeabi_ddiv>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003614:	4840      	ldr	r0, [pc, #256]	; (8003718 <main+0x4a8>)
 8003616:	f001 faa7 	bl	8004b68 <PID_GetIpart>
 800361a:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	4b3e      	ldr	r3, [pc, #248]	; (800371c <main+0x4ac>)
 8003624:	f7fd f93a 	bl	800089c <__aeabi_ddiv>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003630:	4839      	ldr	r0, [pc, #228]	; (8003718 <main+0x4a8>)
 8003632:	f001 faab 	bl	8004b8c <PID_GetDpart>
 8003636:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	4b37      	ldr	r3, [pc, #220]	; (800371c <main+0x4ac>)
 8003640:	f7fd f92c 	bl	800089c <__aeabi_ddiv>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4614      	mov	r4, r2
 800364a:	461d      	mov	r5, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 800364c:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <main+0x498>)
 800364e:	695b      	ldr	r3, [r3, #20]
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003650:	4618      	mov	r0, r3
 8003652:	f7fc ffa1 	bl	8000598 <__aeabi_f2d>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800365e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003662:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003666:	ed8d ab04 	vstr	d10, [sp, #16]
 800366a:	ed8d 9b02 	vstr	d9, [sp, #8]
 800366e:	e9cd 8900 	strd	r8, r9, [sp]
 8003672:	4652      	mov	r2, sl
 8003674:	465b      	mov	r3, fp
 8003676:	492a      	ldr	r1, [pc, #168]	; (8003720 <main+0x4b0>)
 8003678:	4822      	ldr	r0, [pc, #136]	; (8003704 <main+0x494>)
 800367a:	f013 fc9b 	bl	8016fb4 <siprintf>
  				CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
 800367e:	4821      	ldr	r0, [pc, #132]	; (8003704 <main+0x494>)
 8003680:	f7fc fe1e 	bl	80002c0 <strlen>
 8003684:	4603      	mov	r3, r0
 8003686:	b29b      	uxth	r3, r3
 8003688:	4619      	mov	r1, r3
 800368a:	481e      	ldr	r0, [pc, #120]	; (8003704 <main+0x494>)
 800368c:	f012 f90e 	bl	80158ac <CDC_Transmit_FS>
  				previous_millis_debug = HAL_GetTick();
 8003690:	f002 fcba 	bl	8006008 <HAL_GetTick>
 8003694:	4603      	mov	r3, r0
 8003696:	4a19      	ldr	r2, [pc, #100]	; (80036fc <main+0x48c>)
 8003698:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_measure_current_update >= interval_measure_current){
 800369a:	f002 fcb5 	bl	8006008 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	4b20      	ldr	r3, [pc, #128]	; (8003724 <main+0x4b4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1ad2      	subs	r2, r2, r3
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <main+0x4b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d311      	bcc.n	80036d2 <main+0x462>
  					if(thermocouple_measurement_done == 1){ //Only take current measurement if thermocouple measurement is not ongoing
 80036ae:	4b1f      	ldr	r3, [pc, #124]	; (800372c <main+0x4bc>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d10d      	bne.n	80036d2 <main+0x462>
						current_measurement_done = 0;
 80036b6:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <main+0x4c0>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
						set_heater_duty(PID_MAX_OUTPUT/2);
 80036bc:	20fa      	movs	r0, #250	; 0xfa
 80036be:	f7fe f8a7 	bl	8001810 <set_heater_duty>
						current_measurement_requested = 1;
 80036c2:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <main+0x4c4>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
	  					previous_measure_current_update = HAL_GetTick();
 80036c8:	f002 fc9e 	bl	8006008 <HAL_GetTick>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4a15      	ldr	r2, [pc, #84]	; (8003724 <main+0x4b4>)
 80036d0:	6013      	str	r3, [r2, #0]
  					}
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 80036d2:	f002 fc99 	bl	8006008 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4b17      	ldr	r3, [pc, #92]	; (8003738 <main+0x4c8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	1ad2      	subs	r2, r2, r3
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <main+0x4cc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	f4ff aec4 	bcc.w	8003470 <main+0x200>
  				update_display();
 80036e8:	f7fe fc4e 	bl	8001f88 <update_display>
  				previous_millis_display = HAL_GetTick();
 80036ec:	f002 fc8c 	bl	8006008 <HAL_GetTick>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4a11      	ldr	r2, [pc, #68]	; (8003738 <main+0x4c8>)
 80036f4:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 80036f6:	e6bb      	b.n	8003470 <main+0x200>
 80036f8:	200006f8 	.word	0x200006f8
 80036fc:	200005c0 	.word	0x200005c0
 8003700:	20000008 	.word	0x20000008
 8003704:	20000600 	.word	0x20000600
 8003708:	20000038 	.word	0x20000038
 800370c:	200006f0 	.word	0x200006f0
 8003710:	407f4000 	.word	0x407f4000
 8003714:	40590000 	.word	0x40590000
 8003718:	200022a8 	.word	0x200022a8
 800371c:	40240000 	.word	0x40240000
 8003720:	0801ad68 	.word	0x0801ad68
 8003724:	200005d0 	.word	0x200005d0
 8003728:	20000010 	.word	0x20000010
 800372c:	200001c1 	.word	0x200001c1
 8003730:	200001c0 	.word	0x200001c0
 8003734:	20000708 	.word	0x20000708
 8003738:	200005bc 	.word	0x200005bc
 800373c:	20000004 	.word	0x20000004

08003740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b094      	sub	sp, #80	; 0x50
 8003744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003746:	f107 0318 	add.w	r3, r7, #24
 800374a:	2238      	movs	r2, #56	; 0x38
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f013 fc93 	bl	801707a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003754:	1d3b      	adds	r3, r7, #4
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	605a      	str	r2, [r3, #4]
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	60da      	str	r2, [r3, #12]
 8003760:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003762:	2000      	movs	r0, #0
 8003764:	f008 f840 	bl	800b7e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8003768:	2322      	movs	r3, #34	; 0x22
 800376a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800376c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003772:	2340      	movs	r3, #64	; 0x40
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003776:	2301      	movs	r3, #1
 8003778:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800377a:	2302      	movs	r3, #2
 800377c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800377e:	2302      	movs	r3, #2
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003782:	2304      	movs	r3, #4
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003786:	2355      	movs	r3, #85	; 0x55
 8003788:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800378a:	2302      	movs	r3, #2
 800378c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800378e:	2302      	movs	r3, #2
 8003790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003792:	2302      	movs	r3, #2
 8003794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003796:	f107 0318 	add.w	r3, r7, #24
 800379a:	4618      	mov	r0, r3
 800379c:	f008 f8d8 	bl	800b950 <HAL_RCC_OscConfig>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80037a6:	f000 fd79 	bl	800429c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037aa:	230f      	movs	r3, #15
 80037ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037ae:	2303      	movs	r3, #3
 80037b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	2104      	movs	r1, #4
 80037c2:	4618      	mov	r0, r3
 80037c4:	f008 fbd6 	bl	800bf74 <HAL_RCC_ClockConfig>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80037ce:	f000 fd65 	bl	800429c <Error_Handler>
  }
}
 80037d2:	bf00      	nop
 80037d4:	3750      	adds	r7, #80	; 0x50
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08c      	sub	sp, #48	; 0x30
 80037e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80037e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80037ee:	1d3b      	adds	r3, r7, #4
 80037f0:	2220      	movs	r2, #32
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f013 fc40 	bl	801707a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80037fa:	4b40      	ldr	r3, [pc, #256]	; (80038fc <MX_ADC1_Init+0x120>)
 80037fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003800:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003802:	4b3e      	ldr	r3, [pc, #248]	; (80038fc <MX_ADC1_Init+0x120>)
 8003804:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003808:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800380a:	4b3c      	ldr	r3, [pc, #240]	; (80038fc <MX_ADC1_Init+0x120>)
 800380c:	2200      	movs	r2, #0
 800380e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003810:	4b3a      	ldr	r3, [pc, #232]	; (80038fc <MX_ADC1_Init+0x120>)
 8003812:	2200      	movs	r2, #0
 8003814:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <MX_ADC1_Init+0x120>)
 8003818:	2200      	movs	r2, #0
 800381a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800381c:	4b37      	ldr	r3, [pc, #220]	; (80038fc <MX_ADC1_Init+0x120>)
 800381e:	2201      	movs	r2, #1
 8003820:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003822:	4b36      	ldr	r3, [pc, #216]	; (80038fc <MX_ADC1_Init+0x120>)
 8003824:	2204      	movs	r2, #4
 8003826:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003828:	4b34      	ldr	r3, [pc, #208]	; (80038fc <MX_ADC1_Init+0x120>)
 800382a:	2200      	movs	r2, #0
 800382c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800382e:	4b33      	ldr	r3, [pc, #204]	; (80038fc <MX_ADC1_Init+0x120>)
 8003830:	2201      	movs	r2, #1
 8003832:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <MX_ADC1_Init+0x120>)
 8003836:	2203      	movs	r2, #3
 8003838:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800383a:	4b30      	ldr	r3, [pc, #192]	; (80038fc <MX_ADC1_Init+0x120>)
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <MX_ADC1_Init+0x120>)
 8003844:	2200      	movs	r2, #0
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <MX_ADC1_Init+0x120>)
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800384e:	4b2b      	ldr	r3, [pc, #172]	; (80038fc <MX_ADC1_Init+0x120>)
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003856:	4b29      	ldr	r3, [pc, #164]	; (80038fc <MX_ADC1_Init+0x120>)
 8003858:	2200      	movs	r2, #0
 800385a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800385c:	4b27      	ldr	r3, [pc, #156]	; (80038fc <MX_ADC1_Init+0x120>)
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003864:	4825      	ldr	r0, [pc, #148]	; (80038fc <MX_ADC1_Init+0x120>)
 8003866:	f002 ff63 	bl	8006730 <HAL_ADC_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003870:	f000 fd14 	bl	800429c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387c:	4619      	mov	r1, r3
 800387e:	481f      	ldr	r0, [pc, #124]	; (80038fc <MX_ADC1_Init+0x120>)
 8003880:	f004 fe72 	bl	8008568 <HAL_ADCEx_MultiModeConfigChannel>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800388a:	f000 fd07 	bl	800429c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800388e:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <MX_ADC1_Init+0x124>)
 8003890:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003892:	2306      	movs	r3, #6
 8003894:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8003896:	2306      	movs	r3, #6
 8003898:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800389a:	237f      	movs	r3, #127	; 0x7f
 800389c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800389e:	2304      	movs	r3, #4
 80038a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	4814      	ldr	r0, [pc, #80]	; (80038fc <MX_ADC1_Init+0x120>)
 80038ac:	f003 fd44 	bl	8007338 <HAL_ADC_ConfigChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80038b6:	f000 fcf1 	bl	800429c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <MX_ADC1_Init+0x128>)
 80038bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80038be:	230c      	movs	r3, #12
 80038c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	480d      	ldr	r0, [pc, #52]	; (80038fc <MX_ADC1_Init+0x120>)
 80038c8:	f003 fd36 	bl	8007338 <HAL_ADC_ConfigChannel>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80038d2:	f000 fce3 	bl	800429c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <MX_ADC1_Init+0x12c>)
 80038d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80038da:	2312      	movs	r3, #18
 80038dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	4619      	mov	r1, r3
 80038e2:	4806      	ldr	r0, [pc, #24]	; (80038fc <MX_ADC1_Init+0x120>)
 80038e4:	f003 fd28 	bl	8007338 <HAL_ADC_ConfigChannel>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80038ee:	f000 fcd5 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038f2:	bf00      	nop
 80038f4:	3730      	adds	r7, #48	; 0x30
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20001d40 	.word	0x20001d40
 8003900:	0c900008 	.word	0x0c900008
 8003904:	10c00010 	.word	0x10c00010
 8003908:	c3210000 	.word	0xc3210000

0800390c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b090      	sub	sp, #64	; 0x40
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	609a      	str	r2, [r3, #8]
 800391e:	60da      	str	r2, [r3, #12]
 8003920:	611a      	str	r2, [r3, #16]
 8003922:	615a      	str	r2, [r3, #20]
 8003924:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	2220      	movs	r2, #32
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f013 fba4 	bl	801707a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003932:	4b40      	ldr	r3, [pc, #256]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003934:	4a40      	ldr	r2, [pc, #256]	; (8003a38 <MX_ADC2_Init+0x12c>)
 8003936:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003938:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <MX_ADC2_Init+0x128>)
 800393a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800393e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003940:	4b3c      	ldr	r3, [pc, #240]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003942:	2200      	movs	r2, #0
 8003944:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003946:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003948:	2200      	movs	r2, #0
 800394a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800394c:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <MX_ADC2_Init+0x128>)
 800394e:	2200      	movs	r2, #0
 8003950:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003952:	4b38      	ldr	r3, [pc, #224]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003954:	2201      	movs	r2, #1
 8003956:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <MX_ADC2_Init+0x128>)
 800395a:	2204      	movs	r2, #4
 800395c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800395e:	4b35      	ldr	r3, [pc, #212]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003964:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003966:	2200      	movs	r2, #0
 8003968:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800396a:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <MX_ADC2_Init+0x128>)
 800396c:	2202      	movs	r2, #2
 800396e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003970:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003978:	4b2e      	ldr	r3, [pc, #184]	; (8003a34 <MX_ADC2_Init+0x128>)
 800397a:	2200      	movs	r2, #0
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800397e:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003984:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800398c:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <MX_ADC2_Init+0x128>)
 800398e:	2200      	movs	r2, #0
 8003990:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8003992:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800399a:	4826      	ldr	r0, [pc, #152]	; (8003a34 <MX_ADC2_Init+0x128>)
 800399c:	f002 fec8 	bl	8006730 <HAL_ADC_Init>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 80039a6:	f000 fc79 	bl	800429c <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <MX_ADC2_Init+0x130>)
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80039ae:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 80039b4:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <MX_ADC2_Init+0x134>)
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.HighThreshold = 2000;
 80039be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.LowThreshold = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	63bb      	str	r3, [r7, #56]	; 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80039cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d0:	4619      	mov	r1, r3
 80039d2:	4818      	ldr	r0, [pc, #96]	; (8003a34 <MX_ADC2_Init+0x128>)
 80039d4:	f004 f8a0 	bl	8007b18 <HAL_ADC_AnalogWDGConfig>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80039de:	f000 fc5d 	bl	800429c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <MX_ADC2_Init+0x134>)
 80039e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80039e6:	2306      	movs	r3, #6
 80039e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80039ee:	237f      	movs	r3, #127	; 0x7f
 80039f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80039f2:	2304      	movs	r3, #4
 80039f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	480d      	ldr	r0, [pc, #52]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003a00:	f003 fc9a 	bl	8007338 <HAL_ADC_ConfigChannel>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 8003a0a:	f000 fc47 	bl	800429c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <MX_ADC2_Init+0x138>)
 8003a10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003a12:	230c      	movs	r3, #12
 8003a14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4806      	ldr	r0, [pc, #24]	; (8003a34 <MX_ADC2_Init+0x128>)
 8003a1c:	f003 fc8c 	bl	8007338 <HAL_ADC_ConfigChannel>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 8003a26:	f000 fc39 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003a2a:	bf00      	nop
 8003a2c:	3740      	adds	r7, #64	; 0x40
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20001dac 	.word	0x20001dac
 8003a38:	50000100 	.word	0x50000100
 8003a3c:	7dc00000 	.word	0x7dc00000
 8003a40:	08600004 	.word	0x08600004
 8003a44:	2a000400 	.word	0x2a000400

08003a48 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <MX_CRC_Init+0x3c>)
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <MX_CRC_Init+0x40>)
 8003a50:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <MX_CRC_Init+0x3c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <MX_CRC_Init+0x3c>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <MX_CRC_Init+0x3c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <MX_CRC_Init+0x3c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <MX_CRC_Init+0x3c>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003a70:	4804      	ldr	r0, [pc, #16]	; (8003a84 <MX_CRC_Init+0x3c>)
 8003a72:	f004 ff2d 	bl	80088d0 <HAL_CRC_Init>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003a7c:	f000 fc0e 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20001e78 	.word	0x20001e78
 8003a88:	40023000 	.word	0x40023000

08003a8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a90:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003a92:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <MX_I2C1_Init+0x78>)
 8003a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003a98:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <MX_I2C1_Init+0x7c>)
 8003a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a9c:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003aa2:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003aae:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003aba:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ac6:	480e      	ldr	r0, [pc, #56]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003ac8:	f006 f828 	bl	8009b1c <HAL_I2C_Init>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ad2:	f000 fbe3 	bl	800429c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4809      	ldr	r0, [pc, #36]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003ada:	f006 f8ba 	bl	8009c52 <HAL_I2CEx_ConfigAnalogFilter>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ae4:	f000 fbda 	bl	800429c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4805      	ldr	r0, [pc, #20]	; (8003b00 <MX_I2C1_Init+0x74>)
 8003aec:	f006 f8fc 	bl	8009ce8 <HAL_I2CEx_ConfigDigitalFilter>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003af6:	f000 fbd1 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20001e9c 	.word	0x20001e9c
 8003b04:	40005400 	.word	0x40005400
 8003b08:	30a0a7fb 	.word	0x30a0a7fb

08003b0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003b10:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b12:	4a1c      	ldr	r2, [pc, #112]	; (8003b84 <MX_SPI2_Init+0x78>)
 8003b14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b16:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8003b1e:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b24:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b26:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003b42:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b44:	2210      	movs	r2, #16
 8003b46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b48:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b68:	2208      	movs	r2, #8
 8003b6a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b6c:	4804      	ldr	r0, [pc, #16]	; (8003b80 <MX_SPI2_Init+0x74>)
 8003b6e:	f008 fe0d 	bl	800c78c <HAL_SPI_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8003b78:	f000 fb90 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20001ef0 	.word	0x20001ef0
 8003b84:	40003800 	.word	0x40003800

08003b88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b098      	sub	sp, #96	; 0x60
 8003b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	611a      	str	r2, [r3, #16]
 8003baa:	615a      	str	r2, [r3, #20]
 8003bac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	2234      	movs	r2, #52	; 0x34
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f013 fa60 	bl	801707a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003bbc:	4a41      	ldr	r2, [pc, #260]	; (8003cc4 <MX_TIM1_Init+0x13c>)
 8003bbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8003bc0:	4b3f      	ldr	r3, [pc, #252]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003bc2:	2213      	movs	r2, #19
 8003bc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc6:	4b3e      	ldr	r3, [pc, #248]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8003bcc:	4b3c      	ldr	r3, [pc, #240]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003bce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bd4:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bda:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003be0:	4b37      	ldr	r3, [pc, #220]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003be6:	4836      	ldr	r0, [pc, #216]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003be8:	f009 fbd5 	bl	800d396 <HAL_TIM_PWM_Init>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003bf2:	f000 fb53 	bl	800429c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c06:	4619      	mov	r1, r3
 8003c08:	482d      	ldr	r0, [pc, #180]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003c0a:	f00a ff27 	bl	800ea5c <HAL_TIMEx_MasterConfigSynchronization>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003c14:	f000 fb42 	bl	800429c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c18:	2360      	movs	r3, #96	; 0x60
 8003c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c20:	2300      	movs	r3, #0
 8003c22:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c24:	2300      	movs	r3, #0
 8003c26:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c30:	2300      	movs	r3, #0
 8003c32:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4820      	ldr	r0, [pc, #128]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003c3e:	f00a f925 	bl	800de8c <HAL_TIM_PWM_ConfigChannel>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003c48:	f000 fb28 	bl	800429c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c50:	2208      	movs	r2, #8
 8003c52:	4619      	mov	r1, r3
 8003c54:	481a      	ldr	r0, [pc, #104]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003c56:	f00a f919 	bl	800de8c <HAL_TIM_PWM_ConfigChannel>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003c60:	f000 fb1c 	bl	800429c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003c94:	2300      	movs	r3, #0
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c9c:	1d3b      	adds	r3, r7, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4807      	ldr	r0, [pc, #28]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003ca2:	f00a ff5d 	bl	800eb60 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003cac:	f000 faf6 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003cb0:	4803      	ldr	r0, [pc, #12]	; (8003cc0 <MX_TIM1_Init+0x138>)
 8003cb2:	f001 faf3 	bl	800529c <HAL_TIM_MspPostInit>

}
 8003cb6:	bf00      	nop
 8003cb8:	3760      	adds	r7, #96	; 0x60
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20001fb4 	.word	0x20001fb4
 8003cc4:	40012c00 	.word	0x40012c00

08003cc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	; 0x30
 8003ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003cce:	f107 030c 	add.w	r3, r7, #12
 8003cd2:	2224      	movs	r2, #36	; 0x24
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f013 f9cf 	bl	801707a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cdc:	463b      	mov	r3, r7
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ce6:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <MX_TIM2_Init+0xa4>)
 8003ce8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003cee:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <MX_TIM2_Init+0xa4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf4:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <MX_TIM2_Init+0xa4>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <MX_TIM2_Init+0xa4>)
 8003cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003d00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <MX_TIM2_Init+0xa4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d08:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <MX_TIM2_Init+0xa4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003d12:	2302      	movs	r3, #2
 8003d14:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d16:	2301      	movs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d22:	2300      	movs	r3, #0
 8003d24:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d26:	2301      	movs	r3, #1
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003d32:	f107 030c 	add.w	r3, r7, #12
 8003d36:	4619      	mov	r1, r3
 8003d38:	480c      	ldr	r0, [pc, #48]	; (8003d6c <MX_TIM2_Init+0xa4>)
 8003d3a:	f009 fe03 	bl	800d944 <HAL_TIM_Encoder_Init>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003d44:	f000 faaa 	bl	800429c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d50:	463b      	mov	r3, r7
 8003d52:	4619      	mov	r1, r3
 8003d54:	4805      	ldr	r0, [pc, #20]	; (8003d6c <MX_TIM2_Init+0xa4>)
 8003d56:	f00a fe81 	bl	800ea5c <HAL_TIMEx_MasterConfigSynchronization>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003d60:	f000 fa9c 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d64:	bf00      	nop
 8003d66:	3730      	adds	r7, #48	; 0x30
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20002000 	.word	0x20002000

08003d70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	; 0x28
 8003d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d76:	f107 031c 	add.w	r3, r7, #28
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d82:	463b      	mov	r3, r7
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	611a      	str	r2, [r3, #16]
 8003d90:	615a      	str	r2, [r3, #20]
 8003d92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d94:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <MX_TIM4_Init+0xac>)
 8003d96:	4a22      	ldr	r2, [pc, #136]	; (8003e20 <MX_TIM4_Init+0xb0>)
 8003d98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <MX_TIM4_Init+0xac>)
 8003d9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003da0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <MX_TIM4_Init+0xac>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8003da8:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <MX_TIM4_Init+0xac>)
 8003daa:	220a      	movs	r2, #10
 8003dac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <MX_TIM4_Init+0xac>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <MX_TIM4_Init+0xac>)
 8003db6:	2280      	movs	r2, #128	; 0x80
 8003db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003dba:	4818      	ldr	r0, [pc, #96]	; (8003e1c <MX_TIM4_Init+0xac>)
 8003dbc:	f009 faeb 	bl	800d396 <HAL_TIM_PWM_Init>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003dc6:	f000 fa69 	bl	800429c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003dd2:	f107 031c 	add.w	r3, r7, #28
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4810      	ldr	r0, [pc, #64]	; (8003e1c <MX_TIM4_Init+0xac>)
 8003dda:	f00a fe3f 	bl	800ea5c <HAL_TIMEx_MasterConfigSynchronization>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003de4:	f000 fa5a 	bl	800429c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003de8:	2360      	movs	r3, #96	; 0x60
 8003dea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003df8:	463b      	mov	r3, r7
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4807      	ldr	r0, [pc, #28]	; (8003e1c <MX_TIM4_Init+0xac>)
 8003e00:	f00a f844 	bl	800de8c <HAL_TIM_PWM_ConfigChannel>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003e0a:	f000 fa47 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003e0e:	4803      	ldr	r0, [pc, #12]	; (8003e1c <MX_TIM4_Init+0xac>)
 8003e10:	f001 fa44 	bl	800529c <HAL_TIM_MspPostInit>

}
 8003e14:	bf00      	nop
 8003e16:	3728      	adds	r7, #40	; 0x28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	2000204c 	.word	0x2000204c
 8003e20:	40000800 	.word	0x40000800

08003e24 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003e34:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <MX_TIM6_Init+0x64>)
 8003e36:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <MX_TIM6_Init+0x68>)
 8003e38:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <MX_TIM6_Init+0x64>)
 8003e3c:	f244 2267 	movw	r2, #16999	; 0x4267
 8003e40:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e42:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <MX_TIM6_Init+0x64>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250;
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <MX_TIM6_Init+0x64>)
 8003e4a:	22fa      	movs	r2, #250	; 0xfa
 8003e4c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <MX_TIM6_Init+0x64>)
 8003e50:	2280      	movs	r2, #128	; 0x80
 8003e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003e54:	480c      	ldr	r0, [pc, #48]	; (8003e88 <MX_TIM6_Init+0x64>)
 8003e56:	f009 f9ad 	bl	800d1b4 <HAL_TIM_Base_Init>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003e60:	f000 fa1c 	bl	800429c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e64:	2300      	movs	r3, #0
 8003e66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4805      	ldr	r0, [pc, #20]	; (8003e88 <MX_TIM6_Init+0x64>)
 8003e72:	f00a fdf3 	bl	800ea5c <HAL_TIMEx_MasterConfigSynchronization>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003e7c:	f000 fa0e 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20002098 	.word	0x20002098
 8003e8c:	40001000 	.word	0x40001000

08003e90 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e96:	1d3b      	adds	r3, r7, #4
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <MX_TIM7_Init+0x78>)
 8003ea2:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <MX_TIM7_Init+0x7c>)
 8003ea4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8500-1;
 8003ea6:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <MX_TIM7_Init+0x78>)
 8003ea8:	f242 1233 	movw	r2, #8499	; 0x2133
 8003eac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eae:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <MX_TIM7_Init+0x78>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <MX_TIM7_Init+0x78>)
 8003eb6:	2209      	movs	r2, #9
 8003eb8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <MX_TIM7_Init+0x78>)
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003ec0:	4811      	ldr	r0, [pc, #68]	; (8003f08 <MX_TIM7_Init+0x78>)
 8003ec2:	f009 f977 	bl	800d1b4 <HAL_TIM_Base_Init>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003ecc:	f000 f9e6 	bl	800429c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8003ed0:	2108      	movs	r1, #8
 8003ed2:	480d      	ldr	r0, [pc, #52]	; (8003f08 <MX_TIM7_Init+0x78>)
 8003ed4:	f009 fce6 	bl	800d8a4 <HAL_TIM_OnePulse_Init>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8003ede:	f000 f9dd 	bl	800429c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ee2:	2320      	movs	r3, #32
 8003ee4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003eea:	1d3b      	adds	r3, r7, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4806      	ldr	r0, [pc, #24]	; (8003f08 <MX_TIM7_Init+0x78>)
 8003ef0:	f00a fdb4 	bl	800ea5c <HAL_TIMEx_MasterConfigSynchronization>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 8003efa:	f000 f9cf 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200020e4 	.word	0x200020e4
 8003f0c:	40001400 	.word	0x40001400

08003f10 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <MX_TIM8_Init+0x78>)
 8003f22:	4a1a      	ldr	r2, [pc, #104]	; (8003f8c <MX_TIM8_Init+0x7c>)
 8003f24:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003f26:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <MX_TIM8_Init+0x78>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f2c:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <MX_TIM8_Init+0x78>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003f32:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <MX_TIM8_Init+0x78>)
 8003f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f38:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f3a:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <MX_TIM8_Init+0x78>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003f40:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <MX_TIM8_Init+0x78>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <MX_TIM8_Init+0x78>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8003f4c:	2108      	movs	r1, #8
 8003f4e:	480e      	ldr	r0, [pc, #56]	; (8003f88 <MX_TIM8_Init+0x78>)
 8003f50:	f009 fca8 	bl	800d8a4 <HAL_TIM_OnePulse_Init>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 8003f5a:	f000 f99f 	bl	800429c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4806      	ldr	r0, [pc, #24]	; (8003f88 <MX_TIM8_Init+0x78>)
 8003f70:	f00a fd74 	bl	800ea5c <HAL_TIMEx_MasterConfigSynchronization>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8003f7a:	f000 f98f 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20002130 	.word	0x20002130
 8003f8c:	40013400 	.word	0x40013400

08003f90 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003f94:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <MX_TIM16_Init+0x48>)
 8003f96:	4a11      	ldr	r2, [pc, #68]	; (8003fdc <MX_TIM16_Init+0x4c>)
 8003f98:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <MX_TIM16_Init+0x48>)
 8003f9c:	f244 2267 	movw	r2, #16999	; 0x4267
 8003fa0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <MX_TIM16_Init+0x48>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <MX_TIM16_Init+0x48>)
 8003faa:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003fae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb0:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <MX_TIM16_Init+0x48>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003fb6:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <MX_TIM16_Init+0x48>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <MX_TIM16_Init+0x48>)
 8003fbe:	2280      	movs	r2, #128	; 0x80
 8003fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003fc2:	4805      	ldr	r0, [pc, #20]	; (8003fd8 <MX_TIM16_Init+0x48>)
 8003fc4:	f009 f8f6 	bl	800d1b4 <HAL_TIM_Base_Init>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8003fce:	f000 f965 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	2000217c 	.word	0x2000217c
 8003fdc:	40014400 	.word	0x40014400

08003fe0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003fe4:	4b14      	ldr	r3, [pc, #80]	; (8004038 <MX_TIM17_Init+0x58>)
 8003fe6:	4a15      	ldr	r2, [pc, #84]	; (800403c <MX_TIM17_Init+0x5c>)
 8003fe8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <MX_TIM17_Init+0x58>)
 8003fec:	f244 2267 	movw	r2, #16999	; 0x4267
 8003ff0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <MX_TIM17_Init+0x58>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <MX_TIM17_Init+0x58>)
 8003ffa:	2231      	movs	r2, #49	; 0x31
 8003ffc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <MX_TIM17_Init+0x58>)
 8004000:	2200      	movs	r2, #0
 8004002:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <MX_TIM17_Init+0x58>)
 8004006:	2200      	movs	r2, #0
 8004008:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800400a:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <MX_TIM17_Init+0x58>)
 800400c:	2280      	movs	r2, #128	; 0x80
 800400e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004010:	4809      	ldr	r0, [pc, #36]	; (8004038 <MX_TIM17_Init+0x58>)
 8004012:	f009 f8cf 	bl	800d1b4 <HAL_TIM_Base_Init>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 800401c:	f000 f93e 	bl	800429c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 8004020:	2108      	movs	r1, #8
 8004022:	4805      	ldr	r0, [pc, #20]	; (8004038 <MX_TIM17_Init+0x58>)
 8004024:	f009 fc3e 	bl	800d8a4 <HAL_TIM_OnePulse_Init>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 800402e:	f000 f935 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	200021c8 	.word	0x200021c8
 800403c:	40014800 	.word	0x40014800

08004040 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004044:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 8004046:	4a23      	ldr	r2, [pc, #140]	; (80040d4 <MX_USART1_UART_Init+0x94>)
 8004048:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800404a:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 800404c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004050:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004052:	4b1f      	ldr	r3, [pc, #124]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800405e:	4b1c      	ldr	r3, [pc, #112]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 8004060:	2200      	movs	r2, #0
 8004062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 8004066:	220c      	movs	r2, #12
 8004068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406a:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004070:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 8004072:	2200      	movs	r2, #0
 8004074:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004076:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 8004078:	2200      	movs	r2, #0
 800407a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800407c:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 800407e:	2200      	movs	r2, #0
 8004080:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 8004084:	2200      	movs	r2, #0
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004088:	4811      	ldr	r0, [pc, #68]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 800408a:	f00a fe60 	bl	800ed4e <HAL_UART_Init>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004094:	f000 f902 	bl	800429c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004098:	2100      	movs	r1, #0
 800409a:	480d      	ldr	r0, [pc, #52]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 800409c:	f00b fbcc 	bl	800f838 <HAL_UARTEx_SetTxFifoThreshold>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80040a6:	f000 f8f9 	bl	800429c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040aa:	2100      	movs	r1, #0
 80040ac:	4808      	ldr	r0, [pc, #32]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 80040ae:	f00b fc01 	bl	800f8b4 <HAL_UARTEx_SetRxFifoThreshold>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80040b8:	f000 f8f0 	bl	800429c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80040bc:	4804      	ldr	r0, [pc, #16]	; (80040d0 <MX_USART1_UART_Init+0x90>)
 80040be:	f00b fb82 	bl	800f7c6 <HAL_UARTEx_DisableFifoMode>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80040c8:	f000 f8e8 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80040cc:	bf00      	nop
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20002214 	.word	0x20002214
 80040d4:	40013800 	.word	0x40013800

080040d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80040de:	4b16      	ldr	r3, [pc, #88]	; (8004138 <MX_DMA_Init+0x60>)
 80040e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e2:	4a15      	ldr	r2, [pc, #84]	; (8004138 <MX_DMA_Init+0x60>)
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	6493      	str	r3, [r2, #72]	; 0x48
 80040ea:	4b13      	ldr	r3, [pc, #76]	; (8004138 <MX_DMA_Init+0x60>)
 80040ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <MX_DMA_Init+0x60>)
 80040f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fa:	4a0f      	ldr	r2, [pc, #60]	; (8004138 <MX_DMA_Init+0x60>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	6493      	str	r3, [r2, #72]	; 0x48
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <MX_DMA_Init+0x60>)
 8004104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	200b      	movs	r0, #11
 8004114:	f004 fba7 	bl	8008866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004118:	200b      	movs	r0, #11
 800411a:	f004 fbbe 	bl	800889a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	2100      	movs	r1, #0
 8004122:	200d      	movs	r0, #13
 8004124:	f004 fb9f 	bl	8008866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004128:	200d      	movs	r0, #13
 800412a:	f004 fbb6 	bl	800889a <HAL_NVIC_EnableIRQ>

}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000

0800413c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004142:	f107 0314 	add.w	r3, r7, #20
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	609a      	str	r2, [r3, #8]
 800414e:	60da      	str	r2, [r3, #12]
 8004150:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004152:	4b4f      	ldr	r3, [pc, #316]	; (8004290 <MX_GPIO_Init+0x154>)
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	4a4e      	ldr	r2, [pc, #312]	; (8004290 <MX_GPIO_Init+0x154>)
 8004158:	f043 0304 	orr.w	r3, r3, #4
 800415c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800415e:	4b4c      	ldr	r3, [pc, #304]	; (8004290 <MX_GPIO_Init+0x154>)
 8004160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800416a:	4b49      	ldr	r3, [pc, #292]	; (8004290 <MX_GPIO_Init+0x154>)
 800416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416e:	4a48      	ldr	r2, [pc, #288]	; (8004290 <MX_GPIO_Init+0x154>)
 8004170:	f043 0320 	orr.w	r3, r3, #32
 8004174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004176:	4b46      	ldr	r3, [pc, #280]	; (8004290 <MX_GPIO_Init+0x154>)
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004182:	4b43      	ldr	r3, [pc, #268]	; (8004290 <MX_GPIO_Init+0x154>)
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	4a42      	ldr	r2, [pc, #264]	; (8004290 <MX_GPIO_Init+0x154>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800418e:	4b40      	ldr	r3, [pc, #256]	; (8004290 <MX_GPIO_Init+0x154>)
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800419a:	4b3d      	ldr	r3, [pc, #244]	; (8004290 <MX_GPIO_Init+0x154>)
 800419c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419e:	4a3c      	ldr	r2, [pc, #240]	; (8004290 <MX_GPIO_Init+0x154>)
 80041a0:	f043 0302 	orr.w	r3, r3, #2
 80041a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041a6:	4b3a      	ldr	r3, [pc, #232]	; (8004290 <MX_GPIO_Init+0x154>)
 80041a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 80041b2:	2200      	movs	r2, #0
 80041b4:	f645 4107 	movw	r1, #23559	; 0x5c07
 80041b8:	4836      	ldr	r0, [pc, #216]	; (8004294 <MX_GPIO_Init+0x158>)
 80041ba:	f005 fc7f 	bl	8009abc <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 80041be:	2200      	movs	r2, #0
 80041c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041c8:	f005 fc78 	bl	8009abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 80041cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80041d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041da:	f107 0314 	add.w	r3, r7, #20
 80041de:	4619      	mov	r1, r3
 80041e0:	482d      	ldr	r0, [pc, #180]	; (8004298 <MX_GPIO_Init+0x15c>)
 80041e2:	f005 fad1 	bl	8009788 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 80041e6:	2370      	movs	r3, #112	; 0x70
 80041e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f2:	f107 0314 	add.w	r3, r7, #20
 80041f6:	4619      	mov	r1, r3
 80041f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041fc:	f005 fac4 	bl	8009788 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004204:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 800420e:	f107 0314 	add.w	r3, r7, #20
 8004212:	4619      	mov	r1, r3
 8004214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004218:	f005 fab6 	bl	8009788 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 800421c:	f645 4307 	movw	r3, #23559	; 0x5c07
 8004220:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004222:	2301      	movs	r3, #1
 8004224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422a:	2300      	movs	r3, #0
 800422c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422e:	f107 0314 	add.w	r3, r7, #20
 8004232:	4619      	mov	r1, r3
 8004234:	4817      	ldr	r0, [pc, #92]	; (8004294 <MX_GPIO_Init+0x158>)
 8004236:	f005 faa7 	bl	8009788 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 800423a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800423e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004240:	2301      	movs	r3, #1
 8004242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004248:	2300      	movs	r3, #0
 800424a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 800424c:	f107 0314 	add.w	r3, r7, #20
 8004250:	4619      	mov	r1, r3
 8004252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004256:	f005 fa97 	bl	8009788 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 800425a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800425e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004260:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800426a:	f107 0314 	add.w	r3, r7, #20
 800426e:	4619      	mov	r1, r3
 8004270:	4808      	ldr	r0, [pc, #32]	; (8004294 <MX_GPIO_Init+0x158>)
 8004272:	f005 fa89 	bl	8009788 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004276:	2200      	movs	r2, #0
 8004278:	2100      	movs	r1, #0
 800427a:	2017      	movs	r0, #23
 800427c:	f004 faf3 	bl	8008866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004280:	2017      	movs	r0, #23
 8004282:	f004 fb0a 	bl	800889a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004286:	bf00      	nop
 8004288:	3728      	adds	r7, #40	; 0x28
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	48000400 	.word	0x48000400
 8004298:	48000800 	.word	0x48000800

0800429c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042a0:	b672      	cpsid	i
}
 80042a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042a4:	e7fe      	b.n	80042a4 <Error_Handler+0x8>

080042a6 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b085      	sub	sp, #20
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e008      	b.n	80042e0 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	2200      	movs	r2, #0
 80042d8:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3301      	adds	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	edd3 7a00 	vldr	s15, [r3]
 80042f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f8:	d4e9      	bmi.n	80042ce <Moving_Average_Init+0x28>
	}
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	441a      	add	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800432e:	6839      	ldr	r1, [r7, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	1ad2      	subs	r2, r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	edd3 7a00 	vldr	s15, [r3]
 8004362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004366:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800436a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800436e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004372:	d507      	bpl.n	8004384 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8004382:	e003      	b.n	800438c <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	edd3 7a00 	vldr	s15, [r3]
 80043a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043a4:	ee16 0a90 	vmov	r0, s13
 80043a8:	f7fc f8f6 	bl	8000598 <__aeabi_f2d>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80043b4:	eeb0 0a47 	vmov.f32	s0, s14
 80043b8:	eef0 0a67 	vmov.f32	s1, s15
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80043f2:	f7fc fbb9 	bl	8000b68 <__aeabi_dcmpgt>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d006      	beq.n	800440a <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8004408:	e011      	b.n	800442e <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004416:	f7fc fb89 	bl	8000b2c <__aeabi_dcmplt>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d100      	bne.n	8004422 <PID_Init+0x60>
}
 8004420:	e005      	b.n	800442e <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6278      	str	r0, [r7, #36]	; 0x24
 8004440:	6239      	str	r1, [r7, #32]
 8004442:	61fa      	str	r2, [r7, #28]
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	ed87 0b04 	vstr	d0, [r7, #16]
 800444a:	ed87 1b02 	vstr	d1, [r7, #8]
 800444e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	6a3a      	ldr	r2, [r7, #32]
 800445c:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	2200      	movs	r2, #0
 8004468:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800446a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80044c0 <PID+0x88>
 800446e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80044c8 <PID+0x90>
 8004472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004474:	f000 f991 	bl	800479a <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	2264      	movs	r2, #100	; 0x64
 800447c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800447e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004482:	4619      	mov	r1, r3
 8004484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004486:	f000 fad9 	bl	8004a3c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800448a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800448e:	4619      	mov	r1, r3
 8004490:	ed97 2b00 	vldr	d2, [r7]
 8004494:	ed97 1b02 	vldr	d1, [r7, #8]
 8004498:	ed97 0b04 	vldr	d0, [r7, #16]
 800449c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800449e:	f000 fa25 	bl	80048ec <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 80044a2:	f001 fdb1 	bl	8006008 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	1ad2      	subs	r2, r2, r3
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	605a      	str	r2, [r3, #4]

}
 80044b2:	bf00      	nop
 80044b4:	3728      	adds	r7, #40	; 0x28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	f3af 8000 	nop.w
 80044c0:	00000000 	.word	0x00000000
 80044c4:	406fe000 	.word	0x406fe000
	...

080044d0 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80044d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d4:	b08c      	sub	sp, #48	; 0x30
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <PID_Compute+0x16>
	{
		return _FALSE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e136      	b.n	8004754 <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80044e6:	f001 fd8f 	bl	8006008 <HAL_GetTick>
 80044ea:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	6a3a      	ldr	r2, [r7, #32]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d204      	bcs.n	800450a <PID_Compute+0x3a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8124 	beq.w	8004752 <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800451e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004522:	f7fb fed9 	bl	80002d8 <__aeabi_dsub>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004534:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004538:	f7fb fece 	bl	80002d8 <__aeabi_dsub>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004550:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004554:	f7fc f878 	bl	8000648 <__aeabi_dmul>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4650      	mov	r0, sl
 800455e:	4659      	mov	r1, fp
 8004560:	f7fb febc 	bl	80002dc <__adddf3>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800457a:	f7fc faf5 	bl	8000b68 <__aeabi_dcmpgt>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d006      	beq.n	8004592 <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004590:	e010      	b.n	80045b4 <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800459e:	f7fc fac5 	bl	8000b2c <__aeabi_dcmplt>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d114      	bne.n	80045f2 <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80045d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045d8:	f7fc f836 	bl	8000648 <__aeabi_dmul>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4650      	mov	r0, sl
 80045e2:	4659      	mov	r1, fp
 80045e4:	f7fb fe78 	bl	80002d8 <__aeabi_dsub>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80045fe:	f7fc fab3 	bl	8000b68 <__aeabi_dcmpgt>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004614:	e010      	b.n	8004638 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004622:	f7fc fa83 	bl	8000b2c <__aeabi_dcmplt>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800463e:	4690      	mov	r8, r2
 8004640:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004644:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004648:	4640      	mov	r0, r8
 800464a:	4649      	mov	r1, r9
 800464c:	f7fb fffc 	bl	8000648 <__aeabi_dmul>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d017      	beq.n	8004692 <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004668:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800466c:	f7fb ffec 	bl	8000648 <__aeabi_dmul>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800467e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004682:	f7fb ffe1 	bl	8000648 <__aeabi_dmul>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004690:	e005      	b.n	800469e <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80046aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ae:	f7fb ffcb 	bl	8000648 <__aeabi_dmul>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4640      	mov	r0, r8
 80046b8:	4649      	mov	r1, r9
 80046ba:	f7fb fe0d 	bl	80002d8 <__aeabi_dsub>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046c6:	f7fb fe09 	bl	80002dc <__adddf3>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80046d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046dc:	f7fc fa44 	bl	8000b68 <__aeabi_dcmpgt>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80046ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80046f0:	e00e      	b.n	8004710 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80046f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046fc:	f7fc fa16 	bl	8000b2c <__aeabi_dcmplt>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800470c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004716:	4614      	mov	r4, r2
 8004718:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800471c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004720:	4620      	mov	r0, r4
 8004722:	4629      	mov	r1, r5
 8004724:	f7fb ff90 	bl	8000648 <__aeabi_dmul>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800473a:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004744:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 8004752:	2300      	movs	r3, #0
	}

}
 8004754:	4618      	mov	r0, r3
 8004756:	3730      	adds	r7, #48	; 0x30
 8004758:	46bd      	mov	sp, r7
 800475a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800475e <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d006      	beq.n	800478c <PID_SetMode+0x2e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	785b      	ldrb	r3, [r3, #1]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff fe1b 	bl	80043c2 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	7bfa      	ldrb	r2, [r7, #15]
 8004790:	705a      	strb	r2, [r3, #1]

}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b086      	sub	sp, #24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6178      	str	r0, [r7, #20]
 80047a2:	ed87 0b02 	vstr	d0, [r7, #8]
 80047a6:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80047aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047b2:	f7fc f9cf 	bl	8000b54 <__aeabi_dcmpge>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d158      	bne.n	800486e <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 80047bc:	6979      	ldr	r1, [r7, #20]
 80047be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 80047c6:	6979      	ldr	r1, [r7, #20]
 80047c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047cc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d04b      	beq.n	8004870 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80047e6:	f7fc f9bf 	bl	8000b68 <__aeabi_dcmpgt>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80047fa:	e9c1 2300 	strd	r2, r3, [r1]
 80047fe:	e012      	b.n	8004826 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800480e:	f7fc f98d 	bl	8000b2c <__aeabi_dcmplt>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d006      	beq.n	8004826 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004822:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004832:	f7fc f999 	bl	8000b68 <__aeabi_dcmpgt>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d006      	beq.n	800484a <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004842:	6979      	ldr	r1, [r7, #20]
 8004844:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004848:	e012      	b.n	8004870 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004856:	f7fc f969 	bl	8000b2c <__aeabi_dcmplt>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004866:	6979      	ldr	r1, [r7, #20]
 8004868:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800486c:	e000      	b.n	8004870 <PID_SetOutputLimits+0xd6>
		return;
 800486e:	bf00      	nop
		}
		else { }

	}

}
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	6178      	str	r0, [r7, #20]
 800487e:	ed87 0b02 	vstr	d0, [r7, #8]
 8004882:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8004886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800488a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800488e:	f7fc f961 	bl	8000b54 <__aeabi_dcmpge>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8004898:	6979      	ldr	r1, [r7, #20]
 800489a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800489e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 80048a2:	6979      	ldr	r1, [r7, #20]
 80048a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 80048ac:	e000      	b.n	80048b0 <PID_SetILimits+0x3a>
		return;
 80048ae:	bf00      	nop
}
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b088      	sub	sp, #32
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	61f8      	str	r0, [r7, #28]
 80048be:	ed87 0b04 	vstr	d0, [r7, #16]
 80048c2:	ed87 1b02 	vstr	d1, [r7, #8]
 80048c6:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	789b      	ldrb	r3, [r3, #2]
 80048ce:	4619      	mov	r1, r3
 80048d0:	ed97 2b00 	vldr	d2, [r7]
 80048d4:	ed97 1b02 	vldr	d1, [r7, #8]
 80048d8:	ed97 0b04 	vldr	d0, [r7, #16]
 80048dc:	69f8      	ldr	r0, [r7, #28]
 80048de:	f000 f805 	bl	80048ec <PID_SetTunings2>
}
 80048e2:	bf00      	nop
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	; 0x28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	61f8      	str	r0, [r7, #28]
 80048f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80048f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80048fc:	ed87 2b00 	vstr	d2, [r7]
 8004900:	460b      	mov	r3, r1
 8004902:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004910:	f7fc f90c 	bl	8000b2c <__aeabi_dcmplt>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	f040 8089 	bne.w	8004a2e <PID_SetTunings2+0x142>
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004928:	f7fc f900 	bl	8000b2c <__aeabi_dcmplt>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d17d      	bne.n	8004a2e <PID_SetTunings2+0x142>
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800493e:	f7fc f8f5 	bl	8000b2c <__aeabi_dcmplt>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d172      	bne.n	8004a2e <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	7efa      	ldrb	r2, [r7, #27]
 800494c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800494e:	7efb      	ldrb	r3, [r7, #27]
 8004950:	2b01      	cmp	r3, #1
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8004960:	69f9      	ldr	r1, [r7, #28]
 8004962:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004966:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800496a:	69f9      	ldr	r1, [r7, #28]
 800496c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004970:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8004974:	69f9      	ldr	r1, [r7, #28]
 8004976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800497a:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fb fde6 	bl	8000554 <__aeabi_ui2d>
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <PID_SetTunings2+0x14c>)
 800498e:	f7fb ff85 	bl	800089c <__aeabi_ddiv>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800499a:	69f9      	ldr	r1, [r7, #28]
 800499c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80049a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049ac:	f7fb fe4c 	bl	8000648 <__aeabi_dmul>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80049ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049c2:	f7fb ff6b 	bl	800089c <__aeabi_ddiv>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	69f9      	ldr	r1, [r7, #28]
 80049cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	78db      	ldrb	r3, [r3, #3]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d12b      	bne.n	8004a30 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80049de:	f04f 0000 	mov.w	r0, #0
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	f7fb fc77 	bl	80002d8 <__aeabi_dsub>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	69f9      	ldr	r1, [r7, #28]
 80049f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80049fa:	f04f 0000 	mov.w	r0, #0
 80049fe:	f04f 0100 	mov.w	r1, #0
 8004a02:	f7fb fc69 	bl	80002d8 <__aeabi_dsub>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	69f9      	ldr	r1, [r7, #28]
 8004a0c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004a16:	f04f 0000 	mov.w	r0, #0
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	f7fb fc5b 	bl	80002d8 <__aeabi_dsub>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	69f9      	ldr	r1, [r7, #28]
 8004a28:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004a2c:	e000      	b.n	8004a30 <PID_SetTunings2+0x144>
		return;
 8004a2e:	bf00      	nop

	}

}
 8004a30:	3728      	adds	r7, #40	; 0x28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	408f4000 	.word	0x408f4000

08004a3c <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02e      	beq.n	8004aae <PID_SetControllerDirection+0x72>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	78db      	ldrb	r3, [r3, #3]
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d029      	beq.n	8004aae <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	f7fb fc36 	bl	80002d8 <__aeabi_dsub>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004a7c:	f04f 0000 	mov.w	r0, #0
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	f7fb fc28 	bl	80002d8 <__aeabi_dsub>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004a98:	f04f 0000 	mov.w	r0, #0
 8004a9c:	f04f 0100 	mov.w	r1, #0
 8004aa0:	f7fb fc1a 	bl	80002d8 <__aeabi_dsub>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	70da      	strb	r2, [r3, #3]

}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 8004abc:	b5b0      	push	{r4, r5, r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	dd01      	ble.n	8004ad2 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	dd2e      	ble.n	8004b3c <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8004ade:	68b8      	ldr	r0, [r7, #8]
 8004ae0:	f7fb fd48 	bl	8000574 <__aeabi_i2d>
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	460d      	mov	r5, r1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fb fd31 	bl	8000554 <__aeabi_ui2d>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4620      	mov	r0, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	f7fb fecf 	bl	800089c <__aeabi_ddiv>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b10:	f7fb fd9a 	bl	8000648 <__aeabi_dmul>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	68f9      	ldr	r1, [r7, #12]
 8004b1a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004b24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b28:	f7fb feb8 	bl	800089c <__aeabi_ddiv>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	68f9      	ldr	r1, [r7, #12]
 8004b32:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]

	}

}
 8004b3c:	bf00      	nop
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bdb0      	pop	{r4, r5, r7, pc}

08004b44 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004b52:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b56:	eeb0 0a47 	vmov.f32	s0, s14
 8004b5a:	eef0 0a67 	vmov.f32	s1, s15
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8004b76:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b7a:	eeb0 0a47 	vmov.f32	s0, s14
 8004b7e:	eef0 0a67 	vmov.f32	s1, s15
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004b9a:	ec43 2b17 	vmov	d7, r2, r3
}
 8004b9e:	eeb0 0a47 	vmov.f32	s0, s14
 8004ba2:	eef0 0a67 	vmov.f32	s1, s15
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bb6:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <HAL_MspInit+0x44>)
 8004bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bba:	4a0e      	ldr	r2, [pc, #56]	; (8004bf4 <HAL_MspInit+0x44>)
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8004bc2:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <HAL_MspInit+0x44>)
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	607b      	str	r3, [r7, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bce:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <HAL_MspInit+0x44>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <HAL_MspInit+0x44>)
 8004bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <HAL_MspInit+0x44>)
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004be6:	f006 fea3 	bl	800b930 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000

08004bf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b09e      	sub	sp, #120	; 0x78
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
 8004c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c10:	f107 0320 	add.w	r3, r7, #32
 8004c14:	2244      	movs	r2, #68	; 0x44
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f012 fa2e 	bl	801707a <memset>
  if(hadc->Instance==ADC1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c26:	d171      	bne.n	8004d0c <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c2c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004c2e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004c32:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c34:	f107 0320 	add.w	r3, r7, #32
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f007 fbb7 	bl	800c3ac <HAL_RCCEx_PeriphCLKConfig>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004c44:	f7ff fb2a 	bl	800429c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004c48:	4b64      	ldr	r3, [pc, #400]	; (8004ddc <HAL_ADC_MspInit+0x1e4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	4a63      	ldr	r2, [pc, #396]	; (8004ddc <HAL_ADC_MspInit+0x1e4>)
 8004c50:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004c52:	4b62      	ldr	r3, [pc, #392]	; (8004ddc <HAL_ADC_MspInit+0x1e4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10b      	bne.n	8004c72 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004c5a:	4b61      	ldr	r3, [pc, #388]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5e:	4a60      	ldr	r2, [pc, #384]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004c60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c66:	4b5e      	ldr	r3, [pc, #376]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c72:	4b5b      	ldr	r3, [pc, #364]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	4a5a      	ldr	r2, [pc, #360]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c7e:	4b58      	ldr	r3, [pc, #352]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = VBUS_Pin|THERMOCOUPLE_Pin;
 8004c8a:	230c      	movs	r3, #12
 8004c8c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ca0:	f004 fd72 	bl	8009788 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8004ca4:	4b4f      	ldr	r3, [pc, #316]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004ca6:	4a50      	ldr	r2, [pc, #320]	; (8004de8 <HAL_ADC_MspInit+0x1f0>)
 8004ca8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004caa:	4b4e      	ldr	r3, [pc, #312]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004cac:	2205      	movs	r2, #5
 8004cae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cb0:	4b4c      	ldr	r3, [pc, #304]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cb6:	4b4b      	ldr	r3, [pc, #300]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004cbc:	4b49      	ldr	r3, [pc, #292]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004cbe:	2280      	movs	r2, #128	; 0x80
 8004cc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004cc2:	4b48      	ldr	r3, [pc, #288]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004cca:	4b46      	ldr	r3, [pc, #280]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004cd2:	4b44      	ldr	r3, [pc, #272]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004cd8:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004cde:	4841      	ldr	r0, [pc, #260]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004ce0:	f003 fffc 	bl	8008cdc <HAL_DMA_Init>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8004cea:	f7ff fad7 	bl	800429c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
 8004cf4:	4a3b      	ldr	r2, [pc, #236]	; (8004de4 <HAL_ADC_MspInit+0x1ec>)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	210a      	movs	r1, #10
 8004cfe:	2012      	movs	r0, #18
 8004d00:	f003 fdb1 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004d04:	2012      	movs	r0, #18
 8004d06:	f003 fdc8 	bl	800889a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004d0a:	e062      	b.n	8004dd2 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a36      	ldr	r2, [pc, #216]	; (8004dec <HAL_ADC_MspInit+0x1f4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d15d      	bne.n	8004dd2 <HAL_ADC_MspInit+0x1da>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d1a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004d1c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004d20:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d22:	f107 0320 	add.w	r3, r7, #32
 8004d26:	4618      	mov	r0, r3
 8004d28:	f007 fb40 	bl	800c3ac <HAL_RCCEx_PeriphCLKConfig>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8004d32:	f7ff fab3 	bl	800429c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004d36:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <HAL_ADC_MspInit+0x1e4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	4a27      	ldr	r2, [pc, #156]	; (8004ddc <HAL_ADC_MspInit+0x1e4>)
 8004d3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004d40:	4b26      	ldr	r3, [pc, #152]	; (8004ddc <HAL_ADC_MspInit+0x1e4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d10b      	bne.n	8004d60 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004d48:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4c:	4a24      	ldr	r2, [pc, #144]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004d4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d54:	4b22      	ldr	r3, [pc, #136]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d60:	4b1f      	ldr	r3, [pc, #124]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d64:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004d66:	f043 0320 	orr.w	r3, r3, #32
 8004d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d6c:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d78:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7c:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d84:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <HAL_ADC_MspInit+0x1e8>)
 8004d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_Pin;
 8004d90:	2302      	movs	r3, #2
 8004d92:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d94:	2303      	movs	r3, #3
 8004d96:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 8004d9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004da0:	4619      	mov	r1, r3
 8004da2:	4813      	ldr	r0, [pc, #76]	; (8004df0 <HAL_ADC_MspInit+0x1f8>)
 8004da4:	f004 fcf0 	bl	8009788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_LEAK_Pin;
 8004da8:	2302      	movs	r3, #2
 8004daa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dac:	2303      	movs	r3, #3
 8004dae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(I_LEAK_GPIO_Port, &GPIO_InitStruct);
 8004db4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004db8:	4619      	mov	r1, r3
 8004dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dbe:	f004 fce3 	bl	8009788 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	210a      	movs	r1, #10
 8004dc6:	2012      	movs	r0, #18
 8004dc8:	f003 fd4d 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004dcc:	2012      	movs	r0, #18
 8004dce:	f003 fd64 	bl	800889a <HAL_NVIC_EnableIRQ>
}
 8004dd2:	bf00      	nop
 8004dd4:	3778      	adds	r7, #120	; 0x78
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20002340 	.word	0x20002340
 8004de0:	40021000 	.word	0x40021000
 8004de4:	20001e18 	.word	0x20001e18
 8004de8:	40020030 	.word	0x40020030
 8004dec:	50000100 	.word	0x50000100
 8004df0:	48001400 	.word	0x48001400

08004df4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <HAL_CRC_MspInit+0x38>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d10b      	bne.n	8004e1e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <HAL_CRC_MspInit+0x3c>)
 8004e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e0a:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <HAL_CRC_MspInit+0x3c>)
 8004e0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e10:	6493      	str	r3, [r2, #72]	; 0x48
 8004e12:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <HAL_CRC_MspInit+0x3c>)
 8004e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40023000 	.word	0x40023000
 8004e30:	40021000 	.word	0x40021000

08004e34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b09c      	sub	sp, #112	; 0x70
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e4c:	f107 0318 	add.w	r3, r7, #24
 8004e50:	2244      	movs	r2, #68	; 0x44
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f012 f910 	bl	801707a <memset>
  if(hi2c->Instance==I2C1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2e      	ldr	r2, [pc, #184]	; (8004f18 <HAL_I2C_MspInit+0xe4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d154      	bne.n	8004f0e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004e64:	2340      	movs	r3, #64	; 0x40
 8004e66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e6c:	f107 0318 	add.w	r3, r7, #24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f007 fa9b 	bl	800c3ac <HAL_RCCEx_PeriphCLKConfig>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004e7c:	f7ff fa0e 	bl	800429c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e80:	4b26      	ldr	r3, [pc, #152]	; (8004f1c <HAL_I2C_MspInit+0xe8>)
 8004e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e84:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <HAL_I2C_MspInit+0xe8>)
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e8c:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <HAL_I2C_MspInit+0xe8>)
 8004e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e98:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <HAL_I2C_MspInit+0xe8>)
 8004e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <HAL_I2C_MspInit+0xe8>)
 8004e9e:	f043 0302 	orr.w	r3, r3, #2
 8004ea2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <HAL_I2C_MspInit+0xe8>)
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eb6:	2312      	movs	r3, #18
 8004eb8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ec2:	2304      	movs	r3, #4
 8004ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ed0:	f004 fc5a 	bl	8009788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eda:	2312      	movs	r3, #18
 8004edc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ee6:	2304      	movs	r3, #4
 8004ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004eee:	4619      	mov	r1, r3
 8004ef0:	480b      	ldr	r0, [pc, #44]	; (8004f20 <HAL_I2C_MspInit+0xec>)
 8004ef2:	f004 fc49 	bl	8009788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <HAL_I2C_MspInit+0xe8>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <HAL_I2C_MspInit+0xe8>)
 8004efc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f00:	6593      	str	r3, [r2, #88]	; 0x58
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_I2C_MspInit+0xe8>)
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f0e:	bf00      	nop
 8004f10:	3770      	adds	r7, #112	; 0x70
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40005400 	.word	0x40005400
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	48000400 	.word	0x48000400

08004f24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	; 0x28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f2c:	f107 0314 	add.w	r3, r7, #20
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2c      	ldr	r2, [pc, #176]	; (8004ff4 <HAL_SPI_MspInit+0xd0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d151      	bne.n	8004fea <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f46:	4b2c      	ldr	r3, [pc, #176]	; (8004ff8 <HAL_SPI_MspInit+0xd4>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ff8 <HAL_SPI_MspInit+0xd4>)
 8004f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f50:	6593      	str	r3, [r2, #88]	; 0x58
 8004f52:	4b29      	ldr	r3, [pc, #164]	; (8004ff8 <HAL_SPI_MspInit+0xd4>)
 8004f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f5e:	4b26      	ldr	r3, [pc, #152]	; (8004ff8 <HAL_SPI_MspInit+0xd4>)
 8004f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f62:	4a25      	ldr	r2, [pc, #148]	; (8004ff8 <HAL_SPI_MspInit+0xd4>)
 8004f64:	f043 0302 	orr.w	r3, r3, #2
 8004f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f6a:	4b23      	ldr	r3, [pc, #140]	; (8004ff8 <HAL_SPI_MspInit+0xd4>)
 8004f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004f76:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f84:	2300      	movs	r3, #0
 8004f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f88:	2305      	movs	r3, #5
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f8c:	f107 0314 	add.w	r3, r7, #20
 8004f90:	4619      	mov	r1, r3
 8004f92:	481a      	ldr	r0, [pc, #104]	; (8004ffc <HAL_SPI_MspInit+0xd8>)
 8004f94:	f004 fbf8 	bl	8009788 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8004f98:	4b19      	ldr	r3, [pc, #100]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004f9a:	4a1a      	ldr	r2, [pc, #104]	; (8005004 <HAL_SPI_MspInit+0xe0>)
 8004f9c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004fa0:	220d      	movs	r2, #13
 8004fa2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fa4:	4b16      	ldr	r3, [pc, #88]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004faa:	4b15      	ldr	r3, [pc, #84]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fb0:	4b13      	ldr	r3, [pc, #76]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004fb2:	2280      	movs	r2, #128	; 0x80
 8004fb4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fb6:	4b12      	ldr	r3, [pc, #72]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fbc:	4b10      	ldr	r3, [pc, #64]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004fc2:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004fce:	480c      	ldr	r0, [pc, #48]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004fd0:	f003 fe84 	bl	8008cdc <HAL_DMA_Init>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8004fda:	f7ff f95f 	bl	800429c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a07      	ldr	r2, [pc, #28]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
 8004fe4:	4a06      	ldr	r2, [pc, #24]	; (8005000 <HAL_SPI_MspInit+0xdc>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004fea:	bf00      	nop
 8004fec:	3728      	adds	r7, #40	; 0x28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40003800 	.word	0x40003800
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	48000400 	.word	0x48000400
 8005000:	20001f54 	.word	0x20001f54
 8005004:	40020008 	.word	0x40020008

08005008 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a22      	ldr	r2, [pc, #136]	; (80050a0 <HAL_TIM_PWM_MspInit+0x98>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d12c      	bne.n	8005074 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800501a:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <HAL_TIM_PWM_MspInit+0x9c>)
 800501c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501e:	4a21      	ldr	r2, [pc, #132]	; (80050a4 <HAL_TIM_PWM_MspInit+0x9c>)
 8005020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005024:	6613      	str	r3, [r2, #96]	; 0x60
 8005026:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <HAL_TIM_PWM_MspInit+0x9c>)
 8005028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005032:	2200      	movs	r2, #0
 8005034:	2100      	movs	r1, #0
 8005036:	2018      	movs	r0, #24
 8005038:	f003 fc15 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800503c:	2018      	movs	r0, #24
 800503e:	f003 fc2c 	bl	800889a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005042:	2200      	movs	r2, #0
 8005044:	2100      	movs	r1, #0
 8005046:	2019      	movs	r0, #25
 8005048:	f003 fc0d 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800504c:	2019      	movs	r0, #25
 800504e:	f003 fc24 	bl	800889a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8005052:	2200      	movs	r2, #0
 8005054:	2100      	movs	r1, #0
 8005056:	201a      	movs	r0, #26
 8005058:	f003 fc05 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800505c:	201a      	movs	r0, #26
 800505e:	f003 fc1c 	bl	800889a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005062:	2200      	movs	r2, #0
 8005064:	2100      	movs	r1, #0
 8005066:	201b      	movs	r0, #27
 8005068:	f003 fbfd 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800506c:	201b      	movs	r0, #27
 800506e:	f003 fc14 	bl	800889a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005072:	e010      	b.n	8005096 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a0b      	ldr	r2, [pc, #44]	; (80050a8 <HAL_TIM_PWM_MspInit+0xa0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d10b      	bne.n	8005096 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_TIM_PWM_MspInit+0x9c>)
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	4a08      	ldr	r2, [pc, #32]	; (80050a4 <HAL_TIM_PWM_MspInit+0x9c>)
 8005084:	f043 0304 	orr.w	r3, r3, #4
 8005088:	6593      	str	r3, [r2, #88]	; 0x58
 800508a:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <HAL_TIM_PWM_MspInit+0x9c>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	68bb      	ldr	r3, [r7, #8]
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40000800 	.word	0x40000800

080050ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b4:	f107 0314 	add.w	r3, r7, #20
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	605a      	str	r2, [r3, #4]
 80050be:	609a      	str	r2, [r3, #8]
 80050c0:	60da      	str	r2, [r3, #12]
 80050c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050cc:	d144      	bne.n	8005158 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050ce:	4b24      	ldr	r3, [pc, #144]	; (8005160 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	4a23      	ldr	r2, [pc, #140]	; (8005160 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	6593      	str	r3, [r2, #88]	; 0x58
 80050da:	4b21      	ldr	r3, [pc, #132]	; (8005160 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e6:	4b1e      	ldr	r3, [pc, #120]	; (8005160 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ea:	4a1d      	ldr	r2, [pc, #116]	; (8005160 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050f2:	4b1b      	ldr	r3, [pc, #108]	; (8005160 <HAL_TIM_Encoder_MspInit+0xb4>)
 80050f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050fe:	4b18      	ldr	r3, [pc, #96]	; (8005160 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005102:	4a17      	ldr	r2, [pc, #92]	; (8005160 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005104:	f043 0302 	orr.w	r3, r3, #2
 8005108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800510a:	4b15      	ldr	r3, [pc, #84]	; (8005160 <HAL_TIM_Encoder_MspInit+0xb4>)
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8005116:	2301      	movs	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511a:	2302      	movs	r3, #2
 800511c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005122:	2300      	movs	r3, #0
 8005124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005126:	2301      	movs	r3, #1
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 800512a:	f107 0314 	add.w	r3, r7, #20
 800512e:	4619      	mov	r1, r3
 8005130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005134:	f004 fb28 	bl	8009788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8005138:	2308      	movs	r3, #8
 800513a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513c:	2302      	movs	r3, #2
 800513e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005144:	2300      	movs	r3, #0
 8005146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005148:	2301      	movs	r3, #1
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 800514c:	f107 0314 	add.w	r3, r7, #20
 8005150:	4619      	mov	r1, r3
 8005152:	4804      	ldr	r0, [pc, #16]	; (8005164 <HAL_TIM_Encoder_MspInit+0xb8>)
 8005154:	f004 fb18 	bl	8009788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005158:	bf00      	nop
 800515a:	3728      	adds	r7, #40	; 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40021000 	.word	0x40021000
 8005164:	48000400 	.word	0x48000400

08005168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a34      	ldr	r2, [pc, #208]	; (8005248 <HAL_TIM_Base_MspInit+0xe0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d114      	bne.n	80051a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800517a:	4b34      	ldr	r3, [pc, #208]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	4a33      	ldr	r2, [pc, #204]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 8005180:	f043 0310 	orr.w	r3, r3, #16
 8005184:	6593      	str	r3, [r2, #88]	; 0x58
 8005186:	4b31      	ldr	r3, [pc, #196]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005192:	2200      	movs	r2, #0
 8005194:	2100      	movs	r1, #0
 8005196:	2036      	movs	r0, #54	; 0x36
 8005198:	f003 fb65 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800519c:	2036      	movs	r0, #54	; 0x36
 800519e:	f003 fb7c 	bl	800889a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80051a2:	e04c      	b.n	800523e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a29      	ldr	r2, [pc, #164]	; (8005250 <HAL_TIM_Base_MspInit+0xe8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d114      	bne.n	80051d8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80051ae:	4b27      	ldr	r3, [pc, #156]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	4a26      	ldr	r2, [pc, #152]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 80051b4:	f043 0320 	orr.w	r3, r3, #32
 80051b8:	6593      	str	r3, [r2, #88]	; 0x58
 80051ba:	4b24      	ldr	r3, [pc, #144]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80051c6:	2200      	movs	r2, #0
 80051c8:	2100      	movs	r1, #0
 80051ca:	2037      	movs	r0, #55	; 0x37
 80051cc:	f003 fb4b 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80051d0:	2037      	movs	r0, #55	; 0x37
 80051d2:	f003 fb62 	bl	800889a <HAL_NVIC_EnableIRQ>
}
 80051d6:	e032      	b.n	800523e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <HAL_TIM_Base_MspInit+0xec>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d114      	bne.n	800520c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80051e2:	4b1a      	ldr	r3, [pc, #104]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 80051e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e6:	4a19      	ldr	r2, [pc, #100]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 80051e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ec:	6613      	str	r3, [r2, #96]	; 0x60
 80051ee:	4b17      	ldr	r3, [pc, #92]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 80051f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80051fa:	2200      	movs	r2, #0
 80051fc:	2100      	movs	r1, #0
 80051fe:	2019      	movs	r0, #25
 8005200:	f003 fb31 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005204:	2019      	movs	r0, #25
 8005206:	f003 fb48 	bl	800889a <HAL_NVIC_EnableIRQ>
}
 800520a:	e018      	b.n	800523e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a11      	ldr	r2, [pc, #68]	; (8005258 <HAL_TIM_Base_MspInit+0xf0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d113      	bne.n	800523e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 8005218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521a:	4a0c      	ldr	r2, [pc, #48]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 800521c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005220:	6613      	str	r3, [r2, #96]	; 0x60
 8005222:	4b0a      	ldr	r3, [pc, #40]	; (800524c <HAL_TIM_Base_MspInit+0xe4>)
 8005224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800522a:	60bb      	str	r3, [r7, #8]
 800522c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	201a      	movs	r0, #26
 8005234:	f003 fb17 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005238:	201a      	movs	r0, #26
 800523a:	f003 fb2e 	bl	800889a <HAL_NVIC_EnableIRQ>
}
 800523e:	bf00      	nop
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40001000 	.word	0x40001000
 800524c:	40021000 	.word	0x40021000
 8005250:	40001400 	.word	0x40001400
 8005254:	40014400 	.word	0x40014400
 8005258:	40014800 	.word	0x40014800

0800525c <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <HAL_TIM_OnePulse_MspInit+0x38>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d10b      	bne.n	8005286 <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800526e:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005272:	4a09      	ldr	r2, [pc, #36]	; (8005298 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005274:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005278:	6613      	str	r3, [r2, #96]	; 0x60
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <HAL_TIM_OnePulse_MspInit+0x3c>)
 800527c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40013400 	.word	0x40013400
 8005298:	40021000 	.word	0x40021000

0800529c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08a      	sub	sp, #40	; 0x28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a4:	f107 0314 	add.w	r3, r7, #20
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	60da      	str	r2, [r3, #12]
 80052b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a22      	ldr	r2, [pc, #136]	; (8005344 <HAL_TIM_MspPostInit+0xa8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d11c      	bne.n	80052f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052be:	4b22      	ldr	r3, [pc, #136]	; (8005348 <HAL_TIM_MspPostInit+0xac>)
 80052c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c2:	4a21      	ldr	r2, [pc, #132]	; (8005348 <HAL_TIM_MspPostInit+0xac>)
 80052c4:	f043 0320 	orr.w	r3, r3, #32
 80052c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052ca:	4b1f      	ldr	r3, [pc, #124]	; (8005348 <HAL_TIM_MspPostInit+0xac>)
 80052cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 80052d6:	2301      	movs	r3, #1
 80052d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052da:	2302      	movs	r3, #2
 80052dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e2:	2300      	movs	r3, #0
 80052e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80052e6:	2306      	movs	r3, #6
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 80052ea:	f107 0314 	add.w	r3, r7, #20
 80052ee:	4619      	mov	r1, r3
 80052f0:	4816      	ldr	r0, [pc, #88]	; (800534c <HAL_TIM_MspPostInit+0xb0>)
 80052f2:	f004 fa49 	bl	8009788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80052f6:	e020      	b.n	800533a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a14      	ldr	r2, [pc, #80]	; (8005350 <HAL_TIM_MspPostInit+0xb4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d11b      	bne.n	800533a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005302:	4b11      	ldr	r3, [pc, #68]	; (8005348 <HAL_TIM_MspPostInit+0xac>)
 8005304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005306:	4a10      	ldr	r2, [pc, #64]	; (8005348 <HAL_TIM_MspPostInit+0xac>)
 8005308:	f043 0302 	orr.w	r3, r3, #2
 800530c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <HAL_TIM_MspPostInit+0xac>)
 8005310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800531a:	2380      	movs	r3, #128	; 0x80
 800531c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531e:	2302      	movs	r3, #2
 8005320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005322:	2300      	movs	r3, #0
 8005324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005326:	2300      	movs	r3, #0
 8005328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800532a:	2302      	movs	r3, #2
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800532e:	f107 0314 	add.w	r3, r7, #20
 8005332:	4619      	mov	r1, r3
 8005334:	4807      	ldr	r0, [pc, #28]	; (8005354 <HAL_TIM_MspPostInit+0xb8>)
 8005336:	f004 fa27 	bl	8009788 <HAL_GPIO_Init>
}
 800533a:	bf00      	nop
 800533c:	3728      	adds	r7, #40	; 0x28
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40021000 	.word	0x40021000
 800534c:	48001400 	.word	0x48001400
 8005350:	40000800 	.word	0x40000800
 8005354:	48000400 	.word	0x48000400

08005358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b09a      	sub	sp, #104	; 0x68
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005370:	f107 0310 	add.w	r3, r7, #16
 8005374:	2244      	movs	r2, #68	; 0x44
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f011 fe7e 	bl	801707a <memset>
  if(huart->Instance==USART1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <HAL_UART_MspInit+0xa8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d137      	bne.n	80053f8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005388:	2301      	movs	r3, #1
 800538a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005390:	f107 0310 	add.w	r3, r7, #16
 8005394:	4618      	mov	r0, r3
 8005396:	f007 f809 	bl	800c3ac <HAL_RCCEx_PeriphCLKConfig>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80053a0:	f7fe ff7c 	bl	800429c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80053a4:	4b17      	ldr	r3, [pc, #92]	; (8005404 <HAL_UART_MspInit+0xac>)
 80053a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a8:	4a16      	ldr	r2, [pc, #88]	; (8005404 <HAL_UART_MspInit+0xac>)
 80053aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053ae:	6613      	str	r3, [r2, #96]	; 0x60
 80053b0:	4b14      	ldr	r3, [pc, #80]	; (8005404 <HAL_UART_MspInit+0xac>)
 80053b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053bc:	4b11      	ldr	r3, [pc, #68]	; (8005404 <HAL_UART_MspInit+0xac>)
 80053be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c0:	4a10      	ldr	r2, [pc, #64]	; (8005404 <HAL_UART_MspInit+0xac>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053c8:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <HAL_UART_MspInit+0xac>)
 80053ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80053d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80053d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053da:	2302      	movs	r3, #2
 80053dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e2:	2300      	movs	r3, #0
 80053e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053e6:	2307      	movs	r3, #7
 80053e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80053ee:	4619      	mov	r1, r3
 80053f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053f4:	f004 f9c8 	bl	8009788 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053f8:	bf00      	nop
 80053fa:	3768      	adds	r7, #104	; 0x68
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40013800 	.word	0x40013800
 8005404:	40021000 	.word	0x40021000

08005408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800540c:	e7fe      	b.n	800540c <NMI_Handler+0x4>

0800540e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800540e:	b480      	push	{r7}
 8005410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005412:	e7fe      	b.n	8005412 <HardFault_Handler+0x4>

08005414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005418:	e7fe      	b.n	8005418 <MemManage_Handler+0x4>

0800541a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800541a:	b480      	push	{r7}
 800541c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800541e:	e7fe      	b.n	800541e <BusFault_Handler+0x4>

08005420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005424:	e7fe      	b.n	8005424 <UsageFault_Handler+0x4>

08005426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005426:	b480      	push	{r7}
 8005428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800542a:	bf00      	nop
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005442:	b480      	push	{r7}
 8005444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005454:	f000 fdc6 	bl	8005fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005458:	bf00      	nop
 800545a:	bd80      	pop	{r7, pc}

0800545c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005460:	4802      	ldr	r0, [pc, #8]	; (800546c <DMA1_Channel1_IRQHandler+0x10>)
 8005462:	f003 fdb7 	bl	8008fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20001f54 	.word	0x20001f54

08005470 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005474:	4802      	ldr	r0, [pc, #8]	; (8005480 <DMA1_Channel3_IRQHandler+0x10>)
 8005476:	f003 fdad 	bl	8008fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20001e18 	.word	0x20001e18

08005484 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005488:	4803      	ldr	r0, [pc, #12]	; (8005498 <ADC1_2_IRQHandler+0x14>)
 800548a:	f001 fd27 	bl	8006edc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800548e:	4803      	ldr	r0, [pc, #12]	; (800549c <ADC1_2_IRQHandler+0x18>)
 8005490:	f001 fd24 	bl	8006edc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005494:	bf00      	nop
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20001d40 	.word	0x20001d40
 800549c:	20001dac 	.word	0x20001dac

080054a0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80054a4:	4802      	ldr	r0, [pc, #8]	; (80054b0 <USB_LP_IRQHandler+0x10>)
 80054a6:	f004 fd5b 	bl	8009f60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80054aa:	bf00      	nop
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	200030b0 	.word	0x200030b0

080054b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 80054b8:	2020      	movs	r0, #32
 80054ba:	f004 fb17 	bl	8009aec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 80054be:	2080      	movs	r0, #128	; 0x80
 80054c0:	f004 fb14 	bl	8009aec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 80054c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80054c8:	f004 fb10 	bl	8009aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80054cc:	bf00      	nop
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80054d4:	4802      	ldr	r0, [pc, #8]	; (80054e0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80054d6:	f008 fb89 	bl	800dbec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20001fb4 	.word	0x20001fb4

080054e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80054e8:	4803      	ldr	r0, [pc, #12]	; (80054f8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80054ea:	f008 fb7f 	bl	800dbec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80054ee:	4803      	ldr	r0, [pc, #12]	; (80054fc <TIM1_UP_TIM16_IRQHandler+0x18>)
 80054f0:	f008 fb7c 	bl	800dbec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80054f4:	bf00      	nop
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20001fb4 	.word	0x20001fb4
 80054fc:	2000217c 	.word	0x2000217c

08005500 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005504:	4803      	ldr	r0, [pc, #12]	; (8005514 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8005506:	f008 fb71 	bl	800dbec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800550a:	4803      	ldr	r0, [pc, #12]	; (8005518 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800550c:	f008 fb6e 	bl	800dbec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005510:	bf00      	nop
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20001fb4 	.word	0x20001fb4
 8005518:	200021c8 	.word	0x200021c8

0800551c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005520:	4802      	ldr	r0, [pc, #8]	; (800552c <TIM1_CC_IRQHandler+0x10>)
 8005522:	f008 fb63 	bl	800dbec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20001fb4 	.word	0x20001fb4

08005530 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005534:	4802      	ldr	r0, [pc, #8]	; (8005540 <TIM6_DAC_IRQHandler+0x10>)
 8005536:	f008 fb59 	bl	800dbec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20002098 	.word	0x20002098

08005544 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005548:	4802      	ldr	r0, [pc, #8]	; (8005554 <TIM7_IRQHandler+0x10>)
 800554a:	f008 fb4f 	bl	800dbec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800554e:	bf00      	nop
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	200020e4 	.word	0x200020e4

08005558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return 1;
 800555c:	2301      	movs	r3, #1
}
 800555e:	4618      	mov	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <_kill>:

int _kill(int pid, int sig)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005572:	f011 fdd5 	bl	8017120 <__errno>
 8005576:	4603      	mov	r3, r0
 8005578:	2216      	movs	r2, #22
 800557a:	601a      	str	r2, [r3, #0]
  return -1;
 800557c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <_exit>:

void _exit (int status)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005590:	f04f 31ff 	mov.w	r1, #4294967295
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff ffe7 	bl	8005568 <_kill>
  while (1) {}    /* Make sure we hang here */
 800559a:	e7fe      	b.n	800559a <_exit+0x12>

0800559c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e00a      	b.n	80055c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055ae:	f3af 8000 	nop.w
 80055b2:	4601      	mov	r1, r0
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	60ba      	str	r2, [r7, #8]
 80055ba:	b2ca      	uxtb	r2, r1
 80055bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	3301      	adds	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	dbf0      	blt.n	80055ae <_read+0x12>
  }

  return len;
 80055cc:	687b      	ldr	r3, [r7, #4]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b086      	sub	sp, #24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e009      	b.n	80055fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	60ba      	str	r2, [r7, #8]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	3301      	adds	r3, #1
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	dbf1      	blt.n	80055e8 <_write+0x12>
  }
  return len;
 8005604:	687b      	ldr	r3, [r7, #4]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <_close>:

int _close(int file)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005636:	605a      	str	r2, [r3, #4]
  return 0;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <_isatty>:

int _isatty(int file)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800564e:	2301      	movs	r3, #1
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005680:	4a14      	ldr	r2, [pc, #80]	; (80056d4 <_sbrk+0x5c>)
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <_sbrk+0x60>)
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800568c:	4b13      	ldr	r3, [pc, #76]	; (80056dc <_sbrk+0x64>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <_sbrk+0x64>)
 8005696:	4a12      	ldr	r2, [pc, #72]	; (80056e0 <_sbrk+0x68>)
 8005698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <_sbrk+0x64>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d207      	bcs.n	80056b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056a8:	f011 fd3a 	bl	8017120 <__errno>
 80056ac:	4603      	mov	r3, r0
 80056ae:	220c      	movs	r2, #12
 80056b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295
 80056b6:	e009      	b.n	80056cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056b8:	4b08      	ldr	r3, [pc, #32]	; (80056dc <_sbrk+0x64>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056be:	4b07      	ldr	r3, [pc, #28]	; (80056dc <_sbrk+0x64>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4413      	add	r3, r2
 80056c6:	4a05      	ldr	r2, [pc, #20]	; (80056dc <_sbrk+0x64>)
 80056c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056ca:	68fb      	ldr	r3, [r7, #12]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20008000 	.word	0x20008000
 80056d8:	00000400 	.word	0x00000400
 80056dc:	20002344 	.word	0x20002344
 80056e0:	200036f8 	.word	0x200036f8

080056e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <SystemInit+0x20>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ee:	4a05      	ldr	r2, [pc, #20]	; (8005704 <SystemInit+0x20>)
 80056f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	e000ed00 	.word	0xe000ed00

08005708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005708:	480d      	ldr	r0, [pc, #52]	; (8005740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800570a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800570c:	f7ff ffea 	bl	80056e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
                                   ldr r0, =_sdata
 8005710:	480c      	ldr	r0, [pc, #48]	; (8005744 <LoopForever+0x6>)
  ldr r1, =_edata
 8005712:	490d      	ldr	r1, [pc, #52]	; (8005748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005714:	4a0d      	ldr	r2, [pc, #52]	; (800574c <LoopForever+0xe>)
  movs r3, #0
 8005716:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005718:	e002      	b.n	8005720 <LoopCopyDataInit>

0800571a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800571a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800571c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800571e:	3304      	adds	r3, #4

08005720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005724:	d3f9      	bcc.n	800571a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005726:	4a0a      	ldr	r2, [pc, #40]	; (8005750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005728:	4c0a      	ldr	r4, [pc, #40]	; (8005754 <LoopForever+0x16>)
  movs r3, #0
 800572a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800572c:	e001      	b.n	8005732 <LoopFillZerobss>

0800572e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800572e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005730:	3204      	adds	r2, #4

08005732 <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
 8005732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005734:	d3fb      	bcc.n	800572e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005736:	f011 fcf9 	bl	801712c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800573a:	f7fd fd99 	bl	8003270 <main>

0800573e <LoopForever>:

LoopForever:
    b LoopForever
 800573e:	e7fe      	b.n	800573e <LoopForever>
  ldr   r0, =_estack
 8005740:	20008000 	.word	0x20008000
                                   ldr r0, =_sdata
 8005744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005748:	20000540 	.word	0x20000540
  ldr r2, =_sidata
 800574c:	0801da58 	.word	0x0801da58
  ldr r2, =_sbss
 8005750:	20000540 	.word	0x20000540
  ldr r4, =_ebss
 8005754:	200036f8 	.word	0x200036f8

08005758 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005758:	e7fe      	b.n	8005758 <COMP1_2_3_IRQHandler>
	...

0800575c <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <setSPI_Size+0x54>)
 8005768:	f993 3000 	ldrsb.w	r3, [r3]
 800576c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005770:	429a      	cmp	r2, r3
 8005772:	d017      	beq.n	80057a4 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8005774:	4b0f      	ldr	r3, [pc, #60]	; (80057b4 <setSPI_Size+0x58>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <setSPI_Size+0x58>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005782:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8005784:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <setSPI_Size+0x54>)
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 800578a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d104      	bne.n	800579c <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8005792:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <setSPI_Size+0x58>)
 8005794:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8005798:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 800579a:	e003      	b.n	80057a4 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <setSPI_Size+0x58>)
 800579e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80057a2:	60da      	str	r2, [r3, #12]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	200001c8 	.word	0x200001c8
 80057b4:	20001ef0 	.word	0x20001ef0

080057b8 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	460a      	mov	r2, r1
 80057c2:	71fb      	strb	r3, [r7, #7]
 80057c4:	4613      	mov	r3, r2
 80057c6:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 80057c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff ffc5 	bl	800575c <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 80057d2:	4b3c      	ldr	r3, [pc, #240]	; (80058c4 <setDMAMemMode+0x10c>)
 80057d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80057d8:	461a      	mov	r2, r3
 80057da:	79bb      	ldrb	r3, [r7, #6]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d106      	bne.n	80057ee <setDMAMemMode+0x36>
 80057e0:	4b38      	ldr	r3, [pc, #224]	; (80058c4 <setDMAMemMode+0x10c>)
 80057e2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80057e6:	461a      	mov	r2, r3
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d066      	beq.n	80058bc <setDMAMemMode+0x104>
    config.dma_sz =size;
 80057ee:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80057f2:	4b34      	ldr	r3, [pc, #208]	; (80058c4 <setDMAMemMode+0x10c>)
 80057f4:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 80057f6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80057fa:	4b32      	ldr	r3, [pc, #200]	; (80058c4 <setDMAMemMode+0x10c>)
 80057fc:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 80057fe:	4b32      	ldr	r3, [pc, #200]	; (80058c8 <setDMAMemMode+0x110>)
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4b30      	ldr	r3, [pc, #192]	; (80058c8 <setDMAMemMode+0x110>)
 8005808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0201 	bic.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 8005812:	bf00      	nop
 8005814:	4b2c      	ldr	r3, [pc, #176]	; (80058c8 <setDMAMemMode+0x110>)
 8005816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f7      	bne.n	8005814 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d10e      	bne.n	8005848 <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800582a:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <setDMAMemMode+0x110>)
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	2280      	movs	r2, #128	; 0x80
 8005830:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 8005832:	4b25      	ldr	r3, [pc, #148]	; (80058c8 <setDMAMemMode+0x110>)
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b23      	ldr	r3, [pc, #140]	; (80058c8 <setDMAMemMode+0x110>)
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e00d      	b.n	8005864 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8005848:	4b1f      	ldr	r3, [pc, #124]	; (80058c8 <setDMAMemMode+0x110>)
 800584a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584c:	2200      	movs	r2, #0
 800584e:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 8005850:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <setDMAMemMode+0x110>)
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <setDMAMemMode+0x110>)
 800585a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005862:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 8005864:	79bb      	ldrb	r3, [r7, #6]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d116      	bne.n	8005898 <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800586a:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <setDMAMemMode+0x110>)
 800586c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005872:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005874:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <setDMAMemMode+0x110>)
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800587c:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <setDMAMemMode+0x110>)
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800588a:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <setDMAMemMode+0x110>)
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8005894:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 8005896:	e011      	b.n	80058bc <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <setDMAMemMode+0x110>)
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	2200      	movs	r2, #0
 800589e:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058a0:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <setDMAMemMode+0x110>)
 80058a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a4:	2200      	movs	r2, #0
 80058a6:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 80058a8:	4b07      	ldr	r3, [pc, #28]	; (80058c8 <setDMAMemMode+0x110>)
 80058aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <setDMAMemMode+0x110>)
 80058b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80058ba:	601a      	str	r2, [r3, #0]
}
 80058bc:	bf00      	nop
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	200001c8 	.word	0x200001c8
 80058c8:	20001ef0 	.word	0x20001ef0

080058cc <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 80058d8:	2000      	movs	r0, #0
 80058da:	f7ff ff3f 	bl	800575c <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 80058de:	2200      	movs	r2, #0
 80058e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058e4:	4815      	ldr	r0, [pc, #84]	; (800593c <LCD_WriteCommand+0x70>)
 80058e6:	f004 f8e9 	bl	8009abc <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80058ea:	2200      	movs	r2, #0
 80058ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058f0:	4812      	ldr	r0, [pc, #72]	; (800593c <LCD_WriteCommand+0x70>)
 80058f2:	f004 f8e3 	bl	8009abc <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80058f6:	f04f 33ff 	mov.w	r3, #4294967295
 80058fa:	2201      	movs	r2, #1
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4810      	ldr	r0, [pc, #64]	; (8005940 <LCD_WriteCommand+0x74>)
 8005900:	f006 ffef 	bl	800c8e2 <HAL_SPI_Transmit>
  if(argc){
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00e      	beq.n	8005928 <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800590a:	2201      	movs	r2, #1
 800590c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005910:	480a      	ldr	r0, [pc, #40]	; (800593c <LCD_WriteCommand+0x70>)
 8005912:	f004 f8d3 	bl	8009abc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	1c59      	adds	r1, r3, #1
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	b29a      	uxth	r2, r3
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	4807      	ldr	r0, [pc, #28]	; (8005940 <LCD_WriteCommand+0x74>)
 8005924:	f006 ffdd 	bl	800c8e2 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005928:	2201      	movs	r2, #1
 800592a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800592e:	4803      	ldr	r0, [pc, #12]	; (800593c <LCD_WriteCommand+0x70>)
 8005930:	f004 f8c4 	bl	8009abc <HAL_GPIO_WritePin>
#endif
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	48000400 	.word	0x48000400
 8005940:	20001ef0 	.word	0x20001ef0

08005944 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800594e:	2201      	movs	r2, #1
 8005950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005954:	4830      	ldr	r0, [pc, #192]	; (8005a18 <LCD_WriteData+0xd4>)
 8005956:	f004 f8b1 	bl	8009abc <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800595a:	2200      	movs	r2, #0
 800595c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005960:	482d      	ldr	r0, [pc, #180]	; (8005a18 <LCD_WriteData+0xd4>)
 8005962:	f004 f8ab 	bl	8009abc <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8005966:	e049      	b.n	80059fc <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800596e:	4293      	cmp	r3, r2
 8005970:	bf28      	it	cs
 8005972:	4613      	movcs	r3, r2
 8005974:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b20      	cmp	r3, #32
 800597a:	d924      	bls.n	80059c6 <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 800597c:	89fb      	ldrh	r3, [r7, #14]
 800597e:	461a      	mov	r2, r3
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4826      	ldr	r0, [pc, #152]	; (8005a1c <LCD_WriteData+0xd8>)
 8005984:	f007 f922 	bl	800cbcc <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8005988:	bf00      	nop
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <LCD_WriteData+0xd8>)
 800598c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598e:	4618      	mov	r0, r3
 8005990:	f003 fbcf 	bl	8009132 <HAL_DMA_GetState>
 8005994:	4603      	mov	r3, r0
 8005996:	2b01      	cmp	r3, #1
 8005998:	d1f7      	bne.n	800598a <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 800599a:	4b21      	ldr	r3, [pc, #132]	; (8005a20 <LCD_WriteData+0xdc>)
 800599c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d127      	bne.n	80059f4 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 80059a4:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <LCD_WriteData+0xdc>)
 80059a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d104      	bne.n	80059b8 <LCD_WriteData+0x74>
          buff += chunk_size;
 80059ae:	89fb      	ldrh	r3, [r7, #14]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	4413      	add	r3, r2
 80059b4:	607b      	str	r3, [r7, #4]
 80059b6:	e01d      	b.n	80059f4 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 80059b8:	89fb      	ldrh	r3, [r7, #14]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	461a      	mov	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4413      	add	r3, r2
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	e016      	b.n	80059f4 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80059c6:	89fa      	ldrh	r2, [r7, #14]
 80059c8:	f04f 33ff 	mov.w	r3, #4294967295
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4813      	ldr	r0, [pc, #76]	; (8005a1c <LCD_WriteData+0xd8>)
 80059d0:	f006 ff87 	bl	800c8e2 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 80059d4:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <LCD_WriteData+0xdc>)
 80059d6:	f993 3000 	ldrsb.w	r3, [r3]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d104      	bne.n	80059e8 <LCD_WriteData+0xa4>
        buff += chunk_size;
 80059de:	89fb      	ldrh	r3, [r7, #14]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	4413      	add	r3, r2
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	e005      	b.n	80059f4 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 80059e8:	89fb      	ldrh	r3, [r7, #14]
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	461a      	mov	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4413      	add	r3, r2
 80059f2:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 80059f4:	89fb      	ldrh	r3, [r7, #14]
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1b2      	bne.n	8005968 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005a02:	2201      	movs	r2, #1
 8005a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a08:	4803      	ldr	r0, [pc, #12]	; (8005a18 <LCD_WriteData+0xd4>)
 8005a0a:	f004 f857 	bl	8009abc <HAL_GPIO_WritePin>
#endif
}
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	48000400 	.word	0x48000400
 8005a1c:	20001ef0 	.word	0x20001ef0
 8005a20:	200001c8 	.word	0x200001c8

08005a24 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b08b      	sub	sp, #44	; 0x2c
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	4611      	mov	r1, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	4623      	mov	r3, r4
 8005a34:	80fb      	strh	r3, [r7, #6]
 8005a36:	4603      	mov	r3, r0
 8005a38:	80bb      	strh	r3, [r7, #4]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	807b      	strh	r3, [r7, #2]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a46:	887b      	ldrh	r3, [r7, #2]
 8005a48:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8005a4a:	88bb      	ldrh	r3, [r7, #4]
 8005a4c:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a4e:	883b      	ldrh	r3, [r7, #0]
 8005a50:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8005a52:	232a      	movs	r3, #42	; 0x2a
 8005a54:	763b      	strb	r3, [r7, #24]
 8005a56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005a5a:	121b      	asrs	r3, r3, #8
 8005a5c:	b21b      	sxth	r3, r3
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	767b      	strb	r3, [r7, #25]
 8005a62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	76bb      	strb	r3, [r7, #26]
 8005a68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005a6c:	121b      	asrs	r3, r3, #8
 8005a6e:	b21b      	sxth	r3, r3
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	76fb      	strb	r3, [r7, #27]
 8005a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005a7a:	f107 0318 	add.w	r3, r7, #24
 8005a7e:	2104      	movs	r1, #4
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff ff23 	bl	80058cc <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8005a86:	232b      	movs	r3, #43	; 0x2b
 8005a88:	743b      	strb	r3, [r7, #16]
 8005a8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005a8e:	121b      	asrs	r3, r3, #8
 8005a90:	b21b      	sxth	r3, r3
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	747b      	strb	r3, [r7, #17]
 8005a96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	74bb      	strb	r3, [r7, #18]
 8005a9c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005aa0:	121b      	asrs	r3, r3, #8
 8005aa2:	b21b      	sxth	r3, r3
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	74fb      	strb	r3, [r7, #19]
 8005aa8:	8c3b      	ldrh	r3, [r7, #32]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005aae:	f107 0310 	add.w	r3, r7, #16
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff09 	bl	80058cc <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8005aba:	232c      	movs	r3, #44	; 0x2c
 8005abc:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005abe:	f107 030c 	add.w	r3, r7, #12
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff ff01 	bl	80058cc <LCD_WriteCommand>
  }
}
 8005aca:	bf00      	nop
 8005acc:	372c      	adds	r7, #44	; 0x2c
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd90      	pop	{r4, r7, pc}
	...

08005ad4 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	80fb      	strh	r3, [r7, #6]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	80bb      	strh	r3, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8005ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	db39      	blt.n	8005b62 <LCD_DrawPixel+0x8e>
 8005aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005af2:	2bef      	cmp	r3, #239	; 0xef
 8005af4:	dc35      	bgt.n	8005b62 <LCD_DrawPixel+0x8e>
 8005af6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	db31      	blt.n	8005b62 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 8005afe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b02:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005b06:	da2c      	bge.n	8005b62 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8005b08:	887b      	ldrh	r3, [r7, #2]
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	733b      	strb	r3, [r7, #12]
 8005b12:	887b      	ldrh	r3, [r7, #2]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8005b18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b20:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b24:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b28:	f7ff ff7c 	bl	8005a24 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b32:	480e      	ldr	r0, [pc, #56]	; (8005b6c <LCD_DrawPixel+0x98>)
 8005b34:	f003 ffc2 	bl	8009abc <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b3e:	480b      	ldr	r0, [pc, #44]	; (8005b6c <LCD_DrawPixel+0x98>)
 8005b40:	f003 ffbc 	bl	8009abc <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8005b44:	f107 010c 	add.w	r1, r7, #12
 8005b48:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	4808      	ldr	r0, [pc, #32]	; (8005b70 <LCD_DrawPixel+0x9c>)
 8005b50:	f006 fec7 	bl	800c8e2 <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005b54:	2201      	movs	r2, #1
 8005b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b5a:	4804      	ldr	r0, [pc, #16]	; (8005b6c <LCD_DrawPixel+0x98>)
 8005b5c:	f003 ffae 	bl	8009abc <HAL_GPIO_WritePin>
 8005b60:	e000      	b.n	8005b64 <LCD_DrawPixel+0x90>
    return;
 8005b62:	bf00      	nop
#endif
}
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	48000400 	.word	0x48000400
 8005b70:	20001ef0 	.word	0x20001ef0

08005b74 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b094      	sub	sp, #80	; 0x50
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d905      	bls.n	8005b92 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8005b86:	1cbb      	adds	r3, r7, #2
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff feda 	bl	8005944 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8005b90:	e026      	b.n	8005be0 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8005b92:	2300      	movs	r3, #0
 8005b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b96:	e009      	b.n	8005bac <LCD_FillPixels+0x38>
      fill[t]=color;
 8005b98:	887a      	ldrh	r2, [r7, #2]
 8005b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	3350      	adds	r3, #80	; 0x50
 8005ba0:	443b      	add	r3, r7
 8005ba2:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8005ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba8:	3301      	adds	r3, #1
 8005baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	bf28      	it	cs
 8005bb2:	2320      	movcs	r3, #32
 8005bb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d3ee      	bcc.n	8005b98 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 8005bba:	e00e      	b.n	8005bda <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	bf28      	it	cs
 8005bc2:	2320      	movcs	r3, #32
 8005bc4:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 8005bc6:	f107 0308 	add.w	r3, r7, #8
 8005bca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff feb9 	bl	8005944 <LCD_WriteData>
      pixels-=sz;
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1ed      	bne.n	8005bbc <LCD_FillPixels+0x48>
}
 8005be0:	bf00      	nop
 8005be2:	3750      	adds	r7, #80	; 0x50
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8005be8:	b590      	push	{r4, r7, lr}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	4623      	mov	r3, r4
 8005bf8:	80fb      	strh	r3, [r7, #6]
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	80bb      	strh	r3, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	807b      	strh	r3, [r7, #2]
 8005c02:	4613      	mov	r3, r2
 8005c04:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8005c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d105      	bne.n	8005c1c <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8005c10:	2100      	movs	r1, #0
 8005c12:	2001      	movs	r0, #1
 8005c14:	f7ff fdd0 	bl	80057b8 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	e014      	b.n	8005c46 <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8005c1c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005c20:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005c24:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005c28:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005c2c:	f7ff fefa 	bl	8005a24 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005c30:	2101      	movs	r1, #1
 8005c32:	2000      	movs	r0, #0
 8005c34:	f7ff fdc0 	bl	80057b8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c3e:	4804      	ldr	r0, [pc, #16]	; (8005c50 <LCD_FillArea+0x68>)
 8005c40:	f003 ff3c 	bl	8009abc <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8005c44:	4b03      	ldr	r3, [pc, #12]	; (8005c54 <LCD_FillArea+0x6c>)
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd90      	pop	{r4, r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	48000400 	.word	0x48000400
 8005c54:	08005b75 	.word	0x08005b75

08005c58 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	461a      	mov	r2, r3
 8005c66:	4623      	mov	r3, r4
 8005c68:	80fb      	strh	r3, [r7, #6]
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	80bb      	strh	r3, [r7, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	807b      	strh	r3, [r7, #2]
 8005c72:	4613      	mov	r3, r2
 8005c74:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8005c76:	887a      	ldrh	r2, [r7, #2]
 8005c78:	88fb      	ldrh	r3, [r7, #6]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	4619      	mov	r1, r3
 8005c80:	883a      	ldrh	r2, [r7, #0]
 8005c82:	88bb      	ldrh	r3, [r7, #4]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	3301      	adds	r3, #1
 8005c88:	fb01 f303 	mul.w	r3, r1, r3
 8005c8c:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8005c8e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005c92:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005c96:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005c9a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005c9e:	f7ff fec1 	bl	8005a24 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	f7ff fd87 	bl	80057b8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8005caa:	8c3b      	ldrh	r3, [r7, #32]
 8005cac:	4619      	mov	r1, r3
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff ff60 	bl	8005b74 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	f7ff fd7e 	bl	80057b8 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd90      	pop	{r4, r7, pc}

08005cc6 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8005cc6:	b590      	push	{r4, r7, lr}
 8005cc8:	b085      	sub	sp, #20
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	4603      	mov	r3, r0
 8005cce:	603a      	str	r2, [r7, #0]
 8005cd0:	80fb      	strh	r3, [r7, #6]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	889b      	ldrh	r3, [r3, #4]
 8005cda:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	88db      	ldrh	r3, [r3, #6]
 8005ce0:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	2bef      	cmp	r3, #239	; 0xef
 8005ce6:	d839      	bhi.n	8005d5c <LCD_DrawImage+0x96>
 8005ce8:	88bb      	ldrh	r3, [r7, #4]
 8005cea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005cee:	d235      	bcs.n	8005d5c <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	89fb      	ldrh	r3, [r7, #14]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	2bf0      	cmp	r3, #240	; 0xf0
 8005cf8:	dc32      	bgt.n	8005d60 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8005cfa:	88ba      	ldrh	r2, [r7, #4]
 8005cfc:	89bb      	ldrh	r3, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005d04:	dc2e      	bgt.n	8005d64 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	7a1b      	ldrb	r3, [r3, #8]
 8005d0a:	2b10      	cmp	r3, #16
 8005d0c:	d12c      	bne.n	8005d68 <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8005d0e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d12:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005d16:	88fa      	ldrh	r2, [r7, #6]
 8005d18:	89fb      	ldrh	r3, [r7, #14]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	b21c      	sxth	r4, r3
 8005d24:	88ba      	ldrh	r2, [r7, #4]
 8005d26:	89bb      	ldrh	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	b21b      	sxth	r3, r3
 8005d32:	4622      	mov	r2, r4
 8005d34:	f7ff fe76 	bl	8005a24 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005d38:	2101      	movs	r1, #1
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	f7ff fd3c 	bl	80057b8 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6818      	ldr	r0, [r3, #0]
 8005d44:	89fb      	ldrh	r3, [r7, #14]
 8005d46:	89ba      	ldrh	r2, [r7, #12]
 8005d48:	fb02 f303 	mul.w	r3, r2, r3
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	f7ff fdf9 	bl	8005944 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005d52:	2100      	movs	r1, #0
 8005d54:	2001      	movs	r0, #1
 8005d56:	f7ff fd2f 	bl	80057b8 <setDMAMemMode>
 8005d5a:	e006      	b.n	8005d6a <LCD_DrawImage+0xa4>
    return;
 8005d5c:	bf00      	nop
 8005d5e:	e004      	b.n	8005d6a <LCD_DrawImage+0xa4>
    return;
 8005d60:	bf00      	nop
 8005d62:	e002      	b.n	8005d6a <LCD_DrawImage+0xa4>
    return;
 8005d64:	bf00      	nop
 8005d66:	e000      	b.n	8005d6a <LCD_DrawImage+0xa4>
    return;
 8005d68:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd90      	pop	{r4, r7, pc}

08005d70 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8005d70:	b590      	push	{r4, r7, lr}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	4604      	mov	r4, r0
 8005d78:	4608      	mov	r0, r1
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4623      	mov	r3, r4
 8005d80:	80fb      	strh	r3, [r7, #6]
 8005d82:	4603      	mov	r3, r0
 8005d84:	80bb      	strh	r3, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	807b      	strh	r3, [r7, #2]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	887b      	ldrh	r3, [r7, #2]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d10a      	bne.n	8005dac <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8005d96:	88ba      	ldrh	r2, [r7, #4]
 8005d98:	883b      	ldrh	r3, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d918      	bls.n	8005dd0 <LCD_DrawLine+0x60>
 8005d9e:	88bb      	ldrh	r3, [r7, #4]
 8005da0:	81bb      	strh	r3, [r7, #12]
 8005da2:	883b      	ldrh	r3, [r7, #0]
 8005da4:	80bb      	strh	r3, [r7, #4]
 8005da6:	89bb      	ldrh	r3, [r7, #12]
 8005da8:	803b      	strh	r3, [r7, #0]
 8005daa:	e011      	b.n	8005dd0 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8005dac:	88ba      	ldrh	r2, [r7, #4]
 8005dae:	883b      	ldrh	r3, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d10a      	bne.n	8005dca <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8005db4:	88fa      	ldrh	r2, [r7, #6]
 8005db6:	887b      	ldrh	r3, [r7, #2]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d909      	bls.n	8005dd0 <LCD_DrawLine+0x60>
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	81fb      	strh	r3, [r7, #14]
 8005dc0:	887b      	ldrh	r3, [r7, #2]
 8005dc2:	80fb      	strh	r3, [r7, #6]
 8005dc4:	89fb      	ldrh	r3, [r7, #14]
 8005dc6:	807b      	strh	r3, [r7, #2]
 8005dc8:	e002      	b.n	8005dd0 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
 8005dce:	e009      	b.n	8005de4 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8005dd0:	883c      	ldrh	r4, [r7, #0]
 8005dd2:	887a      	ldrh	r2, [r7, #2]
 8005dd4:	88b9      	ldrh	r1, [r7, #4]
 8005dd6:	88f8      	ldrh	r0, [r7, #6]
 8005dd8:	8c3b      	ldrh	r3, [r7, #32]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	4623      	mov	r3, r4
 8005dde:	f7ff ff3b 	bl	8005c58 <LCD_Fill>
  return UG_RESULT_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd90      	pop	{r4, r7, pc}

08005dec <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60ba      	str	r2, [r7, #8]
 8005df4:	607b      	str	r3, [r7, #4]
 8005df6:	4603      	mov	r3, r0
 8005df8:	81fb      	strh	r3, [r7, #14]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f00c fa10 	bl	8012224 <UG_FontSelect>
  UG_SetForecolor(color);
 8005e04:	8b3b      	ldrh	r3, [r7, #24]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f00c fd58 	bl	80128bc <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8005e0c:	8bbb      	ldrh	r3, [r7, #28]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f00c fd66 	bl	80128e0 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8005e14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e18:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f00c fcb4 	bl	801278c <UG_PutString>
}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <LCD_setPower+0x14>
 8005e3c:	2329      	movs	r3, #41	; 0x29
 8005e3e:	e000      	b.n	8005e42 <LCD_setPower+0x16>
 8005e40:	2328      	movs	r3, #40	; 0x28
 8005e42:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005e44:	f107 030c 	add.w	r3, r7, #12
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fd3e 	bl	80058cc <LCD_WriteCommand>
}
 8005e50:	bf00      	nop
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <LCD_Update>:

static void LCD_Update(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	2001      	movs	r0, #1
 8005e60:	f7ff fcaa 	bl	80057b8 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8005e64:	bf00      	nop
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e74:	482a      	ldr	r0, [pc, #168]	; (8005f20 <LCD_init+0xb8>)
 8005e76:	f003 fe21 	bl	8009abc <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e80:	4827      	ldr	r0, [pc, #156]	; (8005f20 <LCD_init+0xb8>)
 8005e82:	f003 fe1b 	bl	8009abc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005e86:	2001      	movs	r0, #1
 8005e88:	f000 f8ca 	bl	8006020 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e92:	4823      	ldr	r0, [pc, #140]	; (8005f20 <LCD_init+0xb8>)
 8005e94:	f003 fe12 	bl	8009abc <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8005e98:	20c8      	movs	r0, #200	; 0xc8
 8005e9a:	f000 f8c1 	bl	8006020 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8005e9e:	4921      	ldr	r1, [pc, #132]	; (8005f24 <LCD_init+0xbc>)
 8005ea0:	4821      	ldr	r0, [pc, #132]	; (8005f28 <LCD_init+0xc0>)
 8005ea2:	f00c f925 	bl	80120f0 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8005ea6:	4921      	ldr	r1, [pc, #132]	; (8005f2c <LCD_init+0xc4>)
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	f00d fdaf 	bl	8013a0c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8005eae:	4920      	ldr	r1, [pc, #128]	; (8005f30 <LCD_init+0xc8>)
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	f00d fdab 	bl	8013a0c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8005eb6:	491f      	ldr	r1, [pc, #124]	; (8005f34 <LCD_init+0xcc>)
 8005eb8:	2002      	movs	r0, #2
 8005eba:	f00d fda7 	bl	8013a0c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8005ebe:	491e      	ldr	r1, [pc, #120]	; (8005f38 <LCD_init+0xd0>)
 8005ec0:	2003      	movs	r0, #3
 8005ec2:	f00d fda3 	bl	8013a0c <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f00c fd1c 	bl	8012904 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8005ecc:	2000      	movs	r0, #0
 8005ece:	f00c fd2d 	bl	801292c <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	80fb      	strh	r3, [r7, #6]
 8005ed6:	e013      	b.n	8005f00 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	3301      	adds	r3, #1
 8005edc:	4a17      	ldr	r2, [pc, #92]	; (8005f3c <LCD_init+0xd4>)
 8005ede:	441a      	add	r2, r3
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	4916      	ldr	r1, [pc, #88]	; (8005f3c <LCD_init+0xd4>)
 8005ee4:	5ccb      	ldrb	r3, [r1, r3]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4610      	mov	r0, r2
 8005eea:	f7ff fcef 	bl	80058cc <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <LCD_init+0xd4>)
 8005ef2:	5cd3      	ldrb	r3, [r2, r3]
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	88fb      	ldrh	r3, [r7, #6]
 8005ef8:	4413      	add	r3, r2
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3302      	adds	r3, #2
 8005efe:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	2b4b      	cmp	r3, #75	; 0x4b
 8005f04:	d9e8      	bls.n	8005ed8 <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8005f06:	2000      	movs	r0, #0
 8005f08:	f00c f99c 	bl	8012244 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8005f0c:	2001      	movs	r0, #1
 8005f0e:	f7ff ff8d 	bl	8005e2c <LCD_setPower>
  UG_Update();
 8005f12:	f00d fd9d 	bl	8013a50 <UG_Update>
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	48000400 	.word	0x48000400
 8005f24:	200001cc 	.word	0x200001cc
 8005f28:	20002348 	.word	0x20002348
 8005f2c:	08005d71 	.word	0x08005d71
 8005f30:	08005c59 	.word	0x08005c59
 8005f34:	08005be9 	.word	0x08005be9
 8005f38:	08005cc7 	.word	0x08005cc7
 8005f3c:	0801adf4 	.word	0x0801adf4

08005f40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f4a:	2003      	movs	r0, #3
 8005f4c:	f002 fc80 	bl	8008850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f50:	200f      	movs	r0, #15
 8005f52:	f000 f80d 	bl	8005f70 <HAL_InitTick>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	71fb      	strb	r3, [r7, #7]
 8005f60:	e001      	b.n	8005f66 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005f62:	f7fe fe25 	bl	8004bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005f66:	79fb      	ldrb	r3, [r7, #7]

}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005f7c:	4b16      	ldr	r3, [pc, #88]	; (8005fd8 <HAL_InitTick+0x68>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d022      	beq.n	8005fca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <HAL_InitTick+0x6c>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <HAL_InitTick+0x68>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f002 fc8c 	bl	80088b6 <HAL_SYSTICK_Config>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10f      	bne.n	8005fc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b0f      	cmp	r3, #15
 8005fa8:	d809      	bhi.n	8005fbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005faa:	2200      	movs	r2, #0
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb2:	f002 fc58 	bl	8008866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <HAL_InitTick+0x70>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	e007      	b.n	8005fce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
 8005fc2:	e004      	b.n	8005fce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	e001      	b.n	8005fce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	200001dc 	.word	0x200001dc
 8005fdc:	200001c4 	.word	0x200001c4
 8005fe0:	200001d8 	.word	0x200001d8

08005fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fe8:	4b05      	ldr	r3, [pc, #20]	; (8006000 <HAL_IncTick+0x1c>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <HAL_IncTick+0x20>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	4a03      	ldr	r2, [pc, #12]	; (8006000 <HAL_IncTick+0x1c>)
 8005ff4:	6013      	str	r3, [r2, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	200023bc 	.word	0x200023bc
 8006004:	200001dc 	.word	0x200001dc

08006008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
  return uwTick;
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <HAL_GetTick+0x14>)
 800600e:	681b      	ldr	r3, [r3, #0]
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	200023bc 	.word	0x200023bc

08006020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006028:	f7ff ffee 	bl	8006008 <HAL_GetTick>
 800602c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d004      	beq.n	8006044 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800603a:	4b09      	ldr	r3, [pc, #36]	; (8006060 <HAL_Delay+0x40>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4413      	add	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006044:	bf00      	nop
 8006046:	f7ff ffdf 	bl	8006008 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	429a      	cmp	r2, r3
 8006054:	d8f7      	bhi.n	8006046 <HAL_Delay+0x26>
  {
  }
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	200001dc 	.word	0x200001dc

08006064 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	609a      	str	r2, [r3, #8]
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3360      	adds	r3, #96	; 0x60
 80060de:	461a      	mov	r2, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <LL_ADC_SetOffset+0x44>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	03fff000 	.word	0x03fff000

08006114 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3360      	adds	r3, #96	; 0x60
 8006122:	461a      	mov	r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3360      	adds	r3, #96	; 0x60
 8006150:	461a      	mov	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	431a      	orrs	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3360      	adds	r3, #96	; 0x60
 8006186:	461a      	mov	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	431a      	orrs	r2, r3
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80061a0:	bf00      	nop
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3360      	adds	r3, #96	; 0x60
 80061bc:	461a      	mov	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	431a      	orrs	r2, r3
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	615a      	str	r2, [r3, #20]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800622e:	b480      	push	{r7}
 8006230:	b087      	sub	sp, #28
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3330      	adds	r3, #48	; 0x30
 800623e:	461a      	mov	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	0a1b      	lsrs	r3, r3, #8
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	f003 030c 	and.w	r3, r3, #12
 800624a:	4413      	add	r3, r2
 800624c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	211f      	movs	r1, #31
 800625a:	fa01 f303 	lsl.w	r3, r1, r3
 800625e:	43db      	mvns	r3, r3
 8006260:	401a      	ands	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	0e9b      	lsrs	r3, r3, #26
 8006266:	f003 011f 	and.w	r1, r3, #31
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f003 031f 	and.w	r3, r3, #31
 8006270:	fa01 f303 	lsl.w	r3, r1, r3
 8006274:	431a      	orrs	r2, r3
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006292:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3314      	adds	r3, #20
 80062bc:	461a      	mov	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	0e5b      	lsrs	r3, r3, #25
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	4413      	add	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	0d1b      	lsrs	r3, r3, #20
 80062d4:	f003 031f 	and.w	r3, r3, #31
 80062d8:	2107      	movs	r1, #7
 80062da:	fa01 f303 	lsl.w	r3, r1, r3
 80062de:	43db      	mvns	r3, r3
 80062e0:	401a      	ands	r2, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	0d1b      	lsrs	r3, r3, #20
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	fa01 f303 	lsl.w	r3, r1, r3
 80062f0:	431a      	orrs	r2, r3
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800631c:	43db      	mvns	r3, r3
 800631e:	401a      	ands	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f003 0318 	and.w	r3, r3, #24
 8006326:	4908      	ldr	r1, [pc, #32]	; (8006348 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006328:	40d9      	lsrs	r1, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	400b      	ands	r3, r1
 800632e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006332:	431a      	orrs	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	0007ffff 	.word	0x0007ffff

0800634c <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	330c      	adds	r3, #12
 800635c:	4618      	mov	r0, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	0d1b      	lsrs	r3, r3, #20
 8006362:	f003 0103 	and.w	r1, r3, #3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f003 0201 	and.w	r2, r3, #1
 800636c:	4613      	mov	r3, r2
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4403      	add	r3, r0
 800637a:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8006386:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800638a:	43db      	mvns	r3, r3
 800638c:	401a      	ands	r2, r3
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	400b      	ands	r3, r1
 8006394:	431a      	orrs	r2, r3
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b087      	sub	sp, #28
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3320      	adds	r3, #32
 80063b8:	461a      	mov	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	0d1b      	lsrs	r3, r3, #20
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	f003 030c 	and.w	r3, r3, #12
 80063c4:	4413      	add	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	0419      	lsls	r1, r3, #16
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	430b      	orrs	r3, r1
 80063d8:	431a      	orrs	r2, r3
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 031f 	and.w	r3, r3, #31
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006416:	4618      	mov	r0, r3
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006432:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6093      	str	r3, [r2, #8]
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800645a:	d101      	bne.n	8006460 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800645c:	2301      	movs	r3, #1
 800645e:	e000      	b.n	8006462 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800647e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006482:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064aa:	d101      	bne.n	80064b0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064d2:	f043 0201 	orr.w	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064fa:	f043 0202 	orr.w	r2, r3, #2
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <LL_ADC_IsEnabled+0x18>
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <LL_ADC_IsEnabled+0x1a>
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b02      	cmp	r3, #2
 8006546:	d101      	bne.n	800654c <LL_ADC_IsDisableOngoing+0x18>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <LL_ADC_IsDisableOngoing+0x1a>
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800656a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800656e:	f043 0204 	orr.w	r2, r3, #4
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006592:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006596:	f043 0210 	orr.w	r2, r3, #16
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d101      	bne.n	80065c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065e4:	f043 0220 	orr.w	r2, r3, #32
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b08      	cmp	r3, #8
 800660a:	d101      	bne.n	8006610 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2280      	movs	r2, #128	; 0x80
 800662a:	601a      	str	r2, [r3, #0]
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006646:	601a      	str	r2, [r3, #0]
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	605a      	str	r2, [r3, #4]
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	605a      	str	r2, [r3, #4]
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	605a      	str	r2, [r3, #4]
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	605a      	str	r2, [r3, #4]
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	605a      	str	r2, [r3, #4]
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	605a      	str	r2, [r3, #4]
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006730:	b590      	push	{r4, r7, lr}
 8006732:	b089      	sub	sp, #36	; 0x24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e167      	b.n	8006a1a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d109      	bne.n	800676c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fe fa4d 	bl	8004bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff fe68 	bl	8006446 <LL_ADC_IsDeepPowerDownEnabled>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff fe4e 	bl	8006422 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fe83 	bl	8006496 <LL_ADC_IsInternalRegulatorEnabled>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d115      	bne.n	80067c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fe67 	bl	800646e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067a0:	4ba0      	ldr	r3, [pc, #640]	; (8006a24 <HAL_ADC_Init+0x2f4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	099b      	lsrs	r3, r3, #6
 80067a6:	4aa0      	ldr	r2, [pc, #640]	; (8006a28 <HAL_ADC_Init+0x2f8>)
 80067a8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ac:	099b      	lsrs	r3, r3, #6
 80067ae:	3301      	adds	r3, #1
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80067b4:	e002      	b.n	80067bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f9      	bne.n	80067b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fe65 	bl	8006496 <LL_ADC_IsInternalRegulatorEnabled>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10d      	bne.n	80067ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d6:	f043 0210 	orr.w	r2, r3, #16
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e2:	f043 0201 	orr.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fed9 	bl	80065aa <LL_ADC_REG_IsConversionOngoing>
 80067f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fe:	f003 0310 	and.w	r3, r3, #16
 8006802:	2b00      	cmp	r3, #0
 8006804:	f040 8100 	bne.w	8006a08 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	f040 80fc 	bne.w	8006a08 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006814:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006818:	f043 0202 	orr.w	r2, r3, #2
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fe72 	bl	800650e <LL_ADC_IsEnabled>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d111      	bne.n	8006854 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006830:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006834:	f7ff fe6b 	bl	800650e <LL_ADC_IsEnabled>
 8006838:	4604      	mov	r4, r0
 800683a:	487c      	ldr	r0, [pc, #496]	; (8006a2c <HAL_ADC_Init+0x2fc>)
 800683c:	f7ff fe67 	bl	800650e <LL_ADC_IsEnabled>
 8006840:	4603      	mov	r3, r0
 8006842:	4323      	orrs	r3, r4
 8006844:	2b00      	cmp	r3, #0
 8006846:	d105      	bne.n	8006854 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4619      	mov	r1, r3
 800684e:	4878      	ldr	r0, [pc, #480]	; (8006a30 <HAL_ADC_Init+0x300>)
 8006850:	f7ff fc08 	bl	8006064 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	7f5b      	ldrb	r3, [r3, #29]
 8006858:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800685e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006864:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800686a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006872:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006874:	4313      	orrs	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800687e:	2b01      	cmp	r3, #1
 8006880:	d106      	bne.n	8006890 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	3b01      	subs	r3, #1
 8006888:	045b      	lsls	r3, r3, #17
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	4313      	orrs	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d009      	beq.n	80068ac <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	4b60      	ldr	r3, [pc, #384]	; (8006a34 <HAL_ADC_Init+0x304>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6812      	ldr	r2, [r2, #0]
 80068ba:	69b9      	ldr	r1, [r7, #24]
 80068bc:	430b      	orrs	r3, r1
 80068be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff fe8c 	bl	80065f8 <LL_ADC_INJ_IsConversionOngoing>
 80068e0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d16d      	bne.n	80069c4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d16a      	bne.n	80069c4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80068f2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80068fc:	4313      	orrs	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800690a:	f023 0302 	bic.w	r3, r3, #2
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	69b9      	ldr	r1, [r7, #24]
 8006914:	430b      	orrs	r3, r1
 8006916:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d017      	beq.n	8006950 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800692e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006938:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800693c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6911      	ldr	r1, [r2, #16]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	430b      	orrs	r3, r1
 800694a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800694e:	e013      	b.n	8006978 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691a      	ldr	r2, [r3, #16]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800695e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006974:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800697e:	2b01      	cmp	r3, #1
 8006980:	d118      	bne.n	80069b4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800698c:	f023 0304 	bic.w	r3, r3, #4
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006998:	4311      	orrs	r1, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800699e:	4311      	orrs	r1, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80069a4:	430a      	orrs	r2, r1
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0201 	orr.w	r2, r2, #1
 80069b0:	611a      	str	r2, [r3, #16]
 80069b2:	e007      	b.n	80069c4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691a      	ldr	r2, [r3, #16]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0201 	bic.w	r2, r2, #1
 80069c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d10c      	bne.n	80069e6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d2:	f023 010f 	bic.w	r1, r3, #15
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	1e5a      	subs	r2, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30
 80069e4:	e007      	b.n	80069f6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 020f 	bic.w	r2, r2, #15
 80069f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	f043 0201 	orr.w	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a06:	e007      	b.n	8006a18 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0c:	f043 0210 	orr.w	r2, r3, #16
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3724      	adds	r7, #36	; 0x24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd90      	pop	{r4, r7, pc}
 8006a22:	bf00      	nop
 8006a24:	200001c4 	.word	0x200001c4
 8006a28:	053e2d63 	.word	0x053e2d63
 8006a2c:	50000100 	.word	0x50000100
 8006a30:	50000300 	.word	0x50000300
 8006a34:	fff04007 	.word	0xfff04007

08006a38 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a40:	4893      	ldr	r0, [pc, #588]	; (8006c90 <HAL_ADC_Start_IT+0x258>)
 8006a42:	f7ff fcd2 	bl	80063ea <LL_ADC_GetMultimode>
 8006a46:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff fdac 	bl	80065aa <LL_ADC_REG_IsConversionOngoing>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f040 8113 	bne.w	8006c80 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_ADC_Start_IT+0x30>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e10e      	b.n	8006c86 <HAL_ADC_Start_IT+0x24e>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fb19 	bl	80080a8 <ADC_Enable>
 8006a76:	4603      	mov	r3, r0
 8006a78:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f040 80fa 	bne.w	8006c76 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
 8006a8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a7e      	ldr	r2, [pc, #504]	; (8006c94 <HAL_ADC_Start_IT+0x25c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d002      	beq.n	8006aa6 <HAL_ADC_Start_IT+0x6e>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	e001      	b.n	8006aaa <HAL_ADC_Start_IT+0x72>
 8006aa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6812      	ldr	r2, [r2, #0]
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d002      	beq.n	8006ab8 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d105      	bne.n	8006ac4 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006abc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d006      	beq.n	8006ade <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad4:	f023 0206 	bic.w	r2, r3, #6
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	661a      	str	r2, [r3, #96]	; 0x60
 8006adc:	e002      	b.n	8006ae4 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	221c      	movs	r2, #28
 8006aea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 021c 	bic.w	r2, r2, #28
 8006b02:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d108      	bne.n	8006b1e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0208 	orr.w	r2, r2, #8
 8006b1a:	605a      	str	r2, [r3, #4]
          break;
 8006b1c:	e008      	b.n	8006b30 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0204 	orr.w	r2, r2, #4
 8006b2c:	605a      	str	r2, [r3, #4]
          break;
 8006b2e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d107      	bne.n	8006b48 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0210 	orr.w	r2, r2, #16
 8006b46:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a51      	ldr	r2, [pc, #324]	; (8006c94 <HAL_ADC_Start_IT+0x25c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d002      	beq.n	8006b58 <HAL_ADC_Start_IT+0x120>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	e001      	b.n	8006b5c <HAL_ADC_Start_IT+0x124>
 8006b58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d008      	beq.n	8006b76 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b05      	cmp	r3, #5
 8006b6e:	d002      	beq.n	8006b76 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b09      	cmp	r3, #9
 8006b74:	d13a      	bne.n	8006bec <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d02d      	beq.n	8006be0 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d110      	bne.n	8006bbe <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0220 	bic.w	r2, r2, #32
 8006baa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bba:	605a      	str	r2, [r3, #4]
              break;
 8006bbc:	e010      	b.n	8006be0 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bcc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0220 	orr.w	r2, r2, #32
 8006bdc:	605a      	str	r2, [r3, #4]
              break;
 8006bde:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff fcb8 	bl	800655a <LL_ADC_REG_StartConversion>
 8006bea:	e04b      	b.n	8006c84 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a25      	ldr	r2, [pc, #148]	; (8006c94 <HAL_ADC_Start_IT+0x25c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d002      	beq.n	8006c08 <HAL_ADC_Start_IT+0x1d0>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	e001      	b.n	8006c0c <HAL_ADC_Start_IT+0x1d4>
 8006c08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c0c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d034      	beq.n	8006c84 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d110      	bne.n	8006c54 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0220 	bic.w	r2, r2, #32
 8006c40:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c50:	605a      	str	r2, [r3, #4]
              break;
 8006c52:	e017      	b.n	8006c84 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c62:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0220 	orr.w	r2, r2, #32
 8006c72:	605a      	str	r2, [r3, #4]
              break;
 8006c74:	e006      	b.n	8006c84 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006c7e:	e001      	b.n	8006c84 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006c80:	2302      	movs	r3, #2
 8006c82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	50000300 	.word	0x50000300
 8006c94:	50000100 	.word	0x50000100

08006c98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ca4:	4851      	ldr	r0, [pc, #324]	; (8006dec <HAL_ADC_Start_DMA+0x154>)
 8006ca6:	f7ff fba0 	bl	80063ea <LL_ADC_GetMultimode>
 8006caa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff fc7a 	bl	80065aa <LL_ADC_REG_IsConversionOngoing>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f040 808f 	bne.w	8006ddc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_ADC_Start_DMA+0x34>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e08a      	b.n	8006de2 <HAL_ADC_Start_DMA+0x14a>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	2b05      	cmp	r3, #5
 8006cde:	d002      	beq.n	8006ce6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b09      	cmp	r3, #9
 8006ce4:	d173      	bne.n	8006dce <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f001 f9de 	bl	80080a8 <ADC_Enable>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d166      	bne.n	8006dc4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a38      	ldr	r2, [pc, #224]	; (8006df0 <HAL_ADC_Start_DMA+0x158>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d002      	beq.n	8006d1a <HAL_ADC_Start_DMA+0x82>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	e001      	b.n	8006d1e <HAL_ADC_Start_DMA+0x86>
 8006d1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d002      	beq.n	8006d2c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d105      	bne.n	8006d38 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d006      	beq.n	8006d52 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d48:	f023 0206 	bic.w	r2, r3, #6
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	661a      	str	r2, [r3, #96]	; 0x60
 8006d50:	e002      	b.n	8006d58 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5c:	4a25      	ldr	r2, [pc, #148]	; (8006df4 <HAL_ADC_Start_DMA+0x15c>)
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d64:	4a24      	ldr	r2, [pc, #144]	; (8006df8 <HAL_ADC_Start_DMA+0x160>)
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6c:	4a23      	ldr	r2, [pc, #140]	; (8006dfc <HAL_ADC_Start_DMA+0x164>)
 8006d6e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	221c      	movs	r2, #28
 8006d76:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0210 	orr.w	r2, r2, #16
 8006d8e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0201 	orr.w	r2, r2, #1
 8006d9e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3340      	adds	r3, #64	; 0x40
 8006daa:	4619      	mov	r1, r3
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f002 f83c 	bl	8008e2c <HAL_DMA_Start_IT>
 8006db4:	4603      	mov	r3, r0
 8006db6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff fbcc 	bl	800655a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006dc2:	e00d      	b.n	8006de0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006dcc:	e008      	b.n	8006de0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006dda:	e001      	b.n	8006de0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	50000300 	.word	0x50000300
 8006df0:	50000100 	.word	0x50000100
 8006df4:	08008273 	.word	0x08008273
 8006df8:	0800834b 	.word	0x0800834b
 8006dfc:	08008367 	.word	0x08008367

08006e00 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_ADC_Stop_DMA+0x16>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e051      	b.n	8006eba <HAL_ADC_Stop_DMA+0xba>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006e1e:	2103      	movs	r1, #3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 f885 	bl	8007f30 <ADC_ConversionStop>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d13f      	bne.n	8006eb0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d10f      	bne.n	8006e6e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	4618      	mov	r0, r3
 8006e54:	f002 f865 	bl	8008f22 <HAL_DMA_Abort>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0210 	bic.w	r2, r2, #16
 8006e7c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 f995 	bl	80081b4 <ADC_Disable>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73fb      	strb	r3, [r7, #15]
 8006e8e:	e002      	b.n	8006e96 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 f98f 	bl	80081b4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	f043 0201 	orr.w	r2, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	; 0x28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ef8:	4883      	ldr	r0, [pc, #524]	; (8007108 <HAL_ADC_IRQHandler+0x22c>)
 8006efa:	f7ff fa76 	bl	80063ea <LL_ADC_GetMultimode>
 8006efe:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d017      	beq.n	8006f3a <HAL_ADC_IRQHandler+0x5e>
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d012      	beq.n	8006f3a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f18:	f003 0310 	and.w	r3, r3, #16
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d105      	bne.n	8006f2c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f24:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fb11 	bl	8008554 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2202      	movs	r2, #2
 8006f38:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <HAL_ADC_IRQHandler+0x72>
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	f003 0304 	and.w	r3, r3, #4
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8085 	beq.w	8007064 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d07f      	beq.n	8007064 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d105      	bne.n	8006f7c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff f941 	bl	8006208 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d064      	beq.n	8007056 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a5e      	ldr	r2, [pc, #376]	; (800710c <HAL_ADC_IRQHandler+0x230>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d002      	beq.n	8006f9c <HAL_ADC_IRQHandler+0xc0>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	e001      	b.n	8006fa0 <HAL_ADC_IRQHandler+0xc4>
 8006f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6812      	ldr	r2, [r2, #0]
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d008      	beq.n	8006fba <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b05      	cmp	r3, #5
 8006fb2:	d002      	beq.n	8006fba <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b09      	cmp	r3, #9
 8006fb8:	d104      	bne.n	8006fc4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	623b      	str	r3, [r7, #32]
 8006fc2:	e00d      	b.n	8006fe0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a50      	ldr	r2, [pc, #320]	; (800710c <HAL_ADC_IRQHandler+0x230>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d002      	beq.n	8006fd4 <HAL_ADC_IRQHandler+0xf8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	e001      	b.n	8006fd8 <HAL_ADC_IRQHandler+0xfc>
 8006fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006fd8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d135      	bne.n	8007056 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0308 	and.w	r3, r3, #8
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d12e      	bne.n	8007056 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff fad4 	bl	80065aa <LL_ADC_REG_IsConversionOngoing>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d11a      	bne.n	800703e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 020c 	bic.w	r2, r2, #12
 8007016:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800701c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d112      	bne.n	8007056 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007034:	f043 0201 	orr.w	r2, r3, #1
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	65da      	str	r2, [r3, #92]	; 0x5c
 800703c:	e00b      	b.n	8007056 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007042:	f043 0210 	orr.w	r2, r3, #16
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800704e:	f043 0201 	orr.w	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7fc f8b6 	bl	80031c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	220c      	movs	r2, #12
 8007062:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d004      	beq.n	8007078 <HAL_ADC_IRQHandler+0x19c>
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10b      	bne.n	8007090 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 809e 	beq.w	80071c0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 8098 	beq.w	80071c0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007094:	f003 0310 	and.w	r3, r3, #16
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff f8ea 	bl	8006286 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80070b2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff f8a5 	bl	8006208 <LL_ADC_REG_IsTriggerSourceSWStart>
 80070be:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a11      	ldr	r2, [pc, #68]	; (800710c <HAL_ADC_IRQHandler+0x230>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d002      	beq.n	80070d0 <HAL_ADC_IRQHandler+0x1f4>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	e001      	b.n	80070d4 <HAL_ADC_IRQHandler+0x1f8>
 80070d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	4293      	cmp	r3, r2
 80070da:	d008      	beq.n	80070ee <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b06      	cmp	r3, #6
 80070e6:	d002      	beq.n	80070ee <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2b07      	cmp	r3, #7
 80070ec:	d104      	bne.n	80070f8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	623b      	str	r3, [r7, #32]
 80070f6:	e011      	b.n	800711c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a03      	ldr	r2, [pc, #12]	; (800710c <HAL_ADC_IRQHandler+0x230>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d006      	beq.n	8007110 <HAL_ADC_IRQHandler+0x234>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	e005      	b.n	8007114 <HAL_ADC_IRQHandler+0x238>
 8007108:	50000300 	.word	0x50000300
 800710c:	50000100 	.word	0x50000100
 8007110:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007114:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d047      	beq.n	80071b2 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d007      	beq.n	800713c <HAL_ADC_IRQHandler+0x260>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d03f      	beq.n	80071b2 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007138:	2b00      	cmp	r3, #0
 800713a:	d13a      	bne.n	80071b2 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b40      	cmp	r3, #64	; 0x40
 8007148:	d133      	bne.n	80071b2 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d12e      	bne.n	80071b2 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff fa4d 	bl	80065f8 <LL_ADC_INJ_IsConversionOngoing>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d11a      	bne.n	800719a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007172:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007178:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007188:	2b00      	cmp	r3, #0
 800718a:	d112      	bne.n	80071b2 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007190:	f043 0201 	orr.w	r2, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	65da      	str	r2, [r3, #92]	; 0x5c
 8007198:	e00b      	b.n	80071b2 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719e:	f043 0210 	orr.w	r2, r3, #16
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071aa:	f043 0201 	orr.w	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 f9a6 	bl	8008504 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2260      	movs	r2, #96	; 0x60
 80071be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d011      	beq.n	80071ee <HAL_ADC_IRQHandler+0x312>
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00c      	beq.n	80071ee <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7fc f83b 	bl	800325c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2280      	movs	r2, #128	; 0x80
 80071ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d012      	beq.n	800721e <HAL_ADC_IRQHandler+0x342>
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00d      	beq.n	800721e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007206:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 f98c 	bl	800852c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800721c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007224:	2b00      	cmp	r3, #0
 8007226:	d012      	beq.n	800724e <HAL_ADC_IRQHandler+0x372>
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00d      	beq.n	800724e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007236:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 f97e 	bl	8008540 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800724c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	2b00      	cmp	r3, #0
 8007256:	d036      	beq.n	80072c6 <HAL_ADC_IRQHandler+0x3ea>
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	f003 0310 	and.w	r3, r3, #16
 800725e:	2b00      	cmp	r3, #0
 8007260:	d031      	beq.n	80072c6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800726a:	2301      	movs	r3, #1
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
 800726e:	e014      	b.n	800729a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d008      	beq.n	8007288 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007276:	4825      	ldr	r0, [pc, #148]	; (800730c <HAL_ADC_IRQHandler+0x430>)
 8007278:	f7ff f8c5 	bl	8006406 <LL_ADC_GetMultiDMATransfer>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00b      	beq.n	800729a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007282:	2301      	movs	r3, #1
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
 8007286:	e008      	b.n	800729a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007296:	2301      	movs	r3, #1
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	2b01      	cmp	r3, #1
 800729e:	d10e      	bne.n	80072be <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b0:	f043 0202 	orr.w	r2, r3, #2
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f833 	bl	8007324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2210      	movs	r2, #16
 80072c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d018      	beq.n	8007302 <HAL_ADC_IRQHandler+0x426>
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d013      	beq.n	8007302 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072de:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ea:	f043 0208 	orr.w	r2, r3, #8
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072fa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 f90b 	bl	8008518 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007302:	bf00      	nop
 8007304:	3728      	adds	r7, #40	; 0x28
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	50000300 	.word	0x50000300

08007310 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b0b6      	sub	sp, #216	; 0xd8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007352:	2b01      	cmp	r3, #1
 8007354:	d101      	bne.n	800735a <HAL_ADC_ConfigChannel+0x22>
 8007356:	2302      	movs	r3, #2
 8007358:	e3c8      	b.n	8007aec <HAL_ADC_ConfigChannel+0x7b4>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff f91f 	bl	80065aa <LL_ADC_REG_IsConversionOngoing>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	f040 83ad 	bne.w	8007ace <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	6859      	ldr	r1, [r3, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	f7fe ff54 	bl	800622e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff f90d 	bl	80065aa <LL_ADC_REG_IsConversionOngoing>
 8007390:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff f92d 	bl	80065f8 <LL_ADC_INJ_IsConversionOngoing>
 800739e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80073a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f040 81d9 	bne.w	800775e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80073ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f040 81d4 	bne.w	800775e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073be:	d10f      	bne.n	80073e0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2200      	movs	r2, #0
 80073ca:	4619      	mov	r1, r3
 80073cc:	f7fe ff6e 	bl	80062ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fe ff02 	bl	80061e2 <LL_ADC_SetSamplingTimeCommonConfig>
 80073de:	e00e      	b.n	80073fe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	6819      	ldr	r1, [r3, #0]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	461a      	mov	r2, r3
 80073ee:	f7fe ff5d 	bl	80062ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2100      	movs	r1, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe fef2 	bl	80061e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	695a      	ldr	r2, [r3, #20]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	08db      	lsrs	r3, r3, #3
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	2b04      	cmp	r3, #4
 800741e:	d022      	beq.n	8007466 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	6919      	ldr	r1, [r3, #16]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007430:	f7fe fe4c 	bl	80060cc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	6919      	ldr	r1, [r3, #16]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	461a      	mov	r2, r3
 8007442:	f7fe fe98 	bl	8006176 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007452:	2b01      	cmp	r3, #1
 8007454:	d102      	bne.n	800745c <HAL_ADC_ConfigChannel+0x124>
 8007456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800745a:	e000      	b.n	800745e <HAL_ADC_ConfigChannel+0x126>
 800745c:	2300      	movs	r3, #0
 800745e:	461a      	mov	r2, r3
 8007460:	f7fe fea4 	bl	80061ac <LL_ADC_SetOffsetSaturation>
 8007464:	e17b      	b.n	800775e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2100      	movs	r1, #0
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe fe51 	bl	8006114 <LL_ADC_GetOffsetChannel>
 8007472:	4603      	mov	r3, r0
 8007474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <HAL_ADC_ConfigChannel+0x15a>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2100      	movs	r1, #0
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe fe46 	bl	8006114 <LL_ADC_GetOffsetChannel>
 8007488:	4603      	mov	r3, r0
 800748a:	0e9b      	lsrs	r3, r3, #26
 800748c:	f003 021f 	and.w	r2, r3, #31
 8007490:	e01e      	b.n	80074d0 <HAL_ADC_ConfigChannel+0x198>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2100      	movs	r1, #0
 8007498:	4618      	mov	r0, r3
 800749a:	f7fe fe3b 	bl	8006114 <LL_ADC_GetOffsetChannel>
 800749e:	4603      	mov	r3, r0
 80074a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074a8:	fa93 f3a3 	rbit	r3, r3
 80074ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80074b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80074b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80074c0:	2320      	movs	r3, #32
 80074c2:	e004      	b.n	80074ce <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80074c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074c8:	fab3 f383 	clz	r3, r3
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d105      	bne.n	80074e8 <HAL_ADC_ConfigChannel+0x1b0>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	0e9b      	lsrs	r3, r3, #26
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	e018      	b.n	800751a <HAL_ADC_ConfigChannel+0x1e2>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80074f4:	fa93 f3a3 	rbit	r3, r3
 80074f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80074fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007504:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800750c:	2320      	movs	r3, #32
 800750e:	e004      	b.n	800751a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007510:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007514:	fab3 f383 	clz	r3, r3
 8007518:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800751a:	429a      	cmp	r2, r3
 800751c:	d106      	bne.n	800752c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2200      	movs	r2, #0
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fe0a 	bl	8006140 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2101      	movs	r1, #1
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fdee 	bl	8006114 <LL_ADC_GetOffsetChannel>
 8007538:	4603      	mov	r3, r0
 800753a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <HAL_ADC_ConfigChannel+0x220>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2101      	movs	r1, #1
 8007548:	4618      	mov	r0, r3
 800754a:	f7fe fde3 	bl	8006114 <LL_ADC_GetOffsetChannel>
 800754e:	4603      	mov	r3, r0
 8007550:	0e9b      	lsrs	r3, r3, #26
 8007552:	f003 021f 	and.w	r2, r3, #31
 8007556:	e01e      	b.n	8007596 <HAL_ADC_ConfigChannel+0x25e>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2101      	movs	r1, #1
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fdd8 	bl	8006114 <LL_ADC_GetOffsetChannel>
 8007564:	4603      	mov	r3, r0
 8007566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800756a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800756e:	fa93 f3a3 	rbit	r3, r3
 8007572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800757a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800757e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8007586:	2320      	movs	r3, #32
 8007588:	e004      	b.n	8007594 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800758a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800758e:	fab3 f383 	clz	r3, r3
 8007592:	b2db      	uxtb	r3, r3
 8007594:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d105      	bne.n	80075ae <HAL_ADC_ConfigChannel+0x276>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	0e9b      	lsrs	r3, r3, #26
 80075a8:	f003 031f 	and.w	r3, r3, #31
 80075ac:	e018      	b.n	80075e0 <HAL_ADC_ConfigChannel+0x2a8>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075ba:	fa93 f3a3 	rbit	r3, r3
 80075be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80075c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80075ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80075d2:	2320      	movs	r3, #32
 80075d4:	e004      	b.n	80075e0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80075d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075da:	fab3 f383 	clz	r3, r3
 80075de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d106      	bne.n	80075f2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2200      	movs	r2, #0
 80075ea:	2101      	movs	r1, #1
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe fda7 	bl	8006140 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2102      	movs	r1, #2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe fd8b 	bl	8006114 <LL_ADC_GetOffsetChannel>
 80075fe:	4603      	mov	r3, r0
 8007600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <HAL_ADC_ConfigChannel+0x2e6>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2102      	movs	r1, #2
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe fd80 	bl	8006114 <LL_ADC_GetOffsetChannel>
 8007614:	4603      	mov	r3, r0
 8007616:	0e9b      	lsrs	r3, r3, #26
 8007618:	f003 021f 	and.w	r2, r3, #31
 800761c:	e01e      	b.n	800765c <HAL_ADC_ConfigChannel+0x324>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2102      	movs	r1, #2
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe fd75 	bl	8006114 <LL_ADC_GetOffsetChannel>
 800762a:	4603      	mov	r3, r0
 800762c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007634:	fa93 f3a3 	rbit	r3, r3
 8007638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800763c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800764c:	2320      	movs	r3, #32
 800764e:	e004      	b.n	800765a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007650:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007654:	fab3 f383 	clz	r3, r3
 8007658:	b2db      	uxtb	r3, r3
 800765a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007664:	2b00      	cmp	r3, #0
 8007666:	d105      	bne.n	8007674 <HAL_ADC_ConfigChannel+0x33c>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	0e9b      	lsrs	r3, r3, #26
 800766e:	f003 031f 	and.w	r3, r3, #31
 8007672:	e016      	b.n	80076a2 <HAL_ADC_ConfigChannel+0x36a>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007680:	fa93 f3a3 	rbit	r3, r3
 8007684:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800768c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007694:	2320      	movs	r3, #32
 8007696:	e004      	b.n	80076a2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800769c:	fab3 f383 	clz	r3, r3
 80076a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d106      	bne.n	80076b4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2200      	movs	r2, #0
 80076ac:	2102      	movs	r1, #2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fd46 	bl	8006140 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2103      	movs	r1, #3
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fe fd2a 	bl	8006114 <LL_ADC_GetOffsetChannel>
 80076c0:	4603      	mov	r3, r0
 80076c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <HAL_ADC_ConfigChannel+0x3a8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2103      	movs	r1, #3
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe fd1f 	bl	8006114 <LL_ADC_GetOffsetChannel>
 80076d6:	4603      	mov	r3, r0
 80076d8:	0e9b      	lsrs	r3, r3, #26
 80076da:	f003 021f 	and.w	r2, r3, #31
 80076de:	e017      	b.n	8007710 <HAL_ADC_ConfigChannel+0x3d8>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2103      	movs	r1, #3
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fd14 	bl	8006114 <LL_ADC_GetOffsetChannel>
 80076ec:	4603      	mov	r3, r0
 80076ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f2:	fa93 f3a3 	rbit	r3, r3
 80076f6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80076f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076fa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80076fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8007702:	2320      	movs	r3, #32
 8007704:	e003      	b.n	800770e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8007706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007708:	fab3 f383 	clz	r3, r3
 800770c:	b2db      	uxtb	r3, r3
 800770e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007718:	2b00      	cmp	r3, #0
 800771a:	d105      	bne.n	8007728 <HAL_ADC_ConfigChannel+0x3f0>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	0e9b      	lsrs	r3, r3, #26
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	e011      	b.n	800774c <HAL_ADC_ConfigChannel+0x414>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800772e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007730:	fa93 f3a3 	rbit	r3, r3
 8007734:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007738:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800773a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8007740:	2320      	movs	r3, #32
 8007742:	e003      	b.n	800774c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8007744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007746:	fab3 f383 	clz	r3, r3
 800774a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800774c:	429a      	cmp	r2, r3
 800774e:	d106      	bne.n	800775e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2200      	movs	r2, #0
 8007756:	2103      	movs	r1, #3
 8007758:	4618      	mov	r0, r3
 800775a:	f7fe fcf1 	bl	8006140 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fed3 	bl	800650e <LL_ADC_IsEnabled>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	f040 8140 	bne.w	80079f0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	6819      	ldr	r1, [r3, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	461a      	mov	r2, r3
 800777e:	f7fe fdc1 	bl	8006304 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	4a8f      	ldr	r2, [pc, #572]	; (80079c4 <HAL_ADC_ConfigChannel+0x68c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	f040 8131 	bne.w	80079f0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10b      	bne.n	80077b6 <HAL_ADC_ConfigChannel+0x47e>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	0e9b      	lsrs	r3, r3, #26
 80077a4:	3301      	adds	r3, #1
 80077a6:	f003 031f 	and.w	r3, r3, #31
 80077aa:	2b09      	cmp	r3, #9
 80077ac:	bf94      	ite	ls
 80077ae:	2301      	movls	r3, #1
 80077b0:	2300      	movhi	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	e019      	b.n	80077ea <HAL_ADC_ConfigChannel+0x4b2>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077be:	fa93 f3a3 	rbit	r3, r3
 80077c2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80077c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077c6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80077c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80077ce:	2320      	movs	r3, #32
 80077d0:	e003      	b.n	80077da <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80077d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077d4:	fab3 f383 	clz	r3, r3
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	3301      	adds	r3, #1
 80077dc:	f003 031f 	and.w	r3, r3, #31
 80077e0:	2b09      	cmp	r3, #9
 80077e2:	bf94      	ite	ls
 80077e4:	2301      	movls	r3, #1
 80077e6:	2300      	movhi	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d079      	beq.n	80078e2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d107      	bne.n	800780a <HAL_ADC_ConfigChannel+0x4d2>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	0e9b      	lsrs	r3, r3, #26
 8007800:	3301      	adds	r3, #1
 8007802:	069b      	lsls	r3, r3, #26
 8007804:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007808:	e015      	b.n	8007836 <HAL_ADC_ConfigChannel+0x4fe>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007812:	fa93 f3a3 	rbit	r3, r3
 8007816:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800781a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800781c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8007822:	2320      	movs	r3, #32
 8007824:	e003      	b.n	800782e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8007826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007828:	fab3 f383 	clz	r3, r3
 800782c:	b2db      	uxtb	r3, r3
 800782e:	3301      	adds	r3, #1
 8007830:	069b      	lsls	r3, r3, #26
 8007832:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800783e:	2b00      	cmp	r3, #0
 8007840:	d109      	bne.n	8007856 <HAL_ADC_ConfigChannel+0x51e>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	0e9b      	lsrs	r3, r3, #26
 8007848:	3301      	adds	r3, #1
 800784a:	f003 031f 	and.w	r3, r3, #31
 800784e:	2101      	movs	r1, #1
 8007850:	fa01 f303 	lsl.w	r3, r1, r3
 8007854:	e017      	b.n	8007886 <HAL_ADC_ConfigChannel+0x54e>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800785e:	fa93 f3a3 	rbit	r3, r3
 8007862:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007866:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800786e:	2320      	movs	r3, #32
 8007870:	e003      	b.n	800787a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8007872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007874:	fab3 f383 	clz	r3, r3
 8007878:	b2db      	uxtb	r3, r3
 800787a:	3301      	adds	r3, #1
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	2101      	movs	r1, #1
 8007882:	fa01 f303 	lsl.w	r3, r1, r3
 8007886:	ea42 0103 	orr.w	r1, r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10a      	bne.n	80078ac <HAL_ADC_ConfigChannel+0x574>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	0e9b      	lsrs	r3, r3, #26
 800789c:	3301      	adds	r3, #1
 800789e:	f003 021f 	and.w	r2, r3, #31
 80078a2:	4613      	mov	r3, r2
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	4413      	add	r3, r2
 80078a8:	051b      	lsls	r3, r3, #20
 80078aa:	e018      	b.n	80078de <HAL_ADC_ConfigChannel+0x5a6>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	fa93 f3a3 	rbit	r3, r3
 80078b8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80078ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80078be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80078c4:	2320      	movs	r3, #32
 80078c6:	e003      	b.n	80078d0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80078c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ca:	fab3 f383 	clz	r3, r3
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	3301      	adds	r3, #1
 80078d2:	f003 021f 	and.w	r2, r3, #31
 80078d6:	4613      	mov	r3, r2
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	4413      	add	r3, r2
 80078dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078de:	430b      	orrs	r3, r1
 80078e0:	e081      	b.n	80079e6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d107      	bne.n	80078fe <HAL_ADC_ConfigChannel+0x5c6>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	0e9b      	lsrs	r3, r3, #26
 80078f4:	3301      	adds	r3, #1
 80078f6:	069b      	lsls	r3, r3, #26
 80078f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80078fc:	e015      	b.n	800792a <HAL_ADC_ConfigChannel+0x5f2>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007906:	fa93 f3a3 	rbit	r3, r3
 800790a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8007916:	2320      	movs	r3, #32
 8007918:	e003      	b.n	8007922 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	fab3 f383 	clz	r3, r3
 8007920:	b2db      	uxtb	r3, r3
 8007922:	3301      	adds	r3, #1
 8007924:	069b      	lsls	r3, r3, #26
 8007926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007932:	2b00      	cmp	r3, #0
 8007934:	d109      	bne.n	800794a <HAL_ADC_ConfigChannel+0x612>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	0e9b      	lsrs	r3, r3, #26
 800793c:	3301      	adds	r3, #1
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	2101      	movs	r1, #1
 8007944:	fa01 f303 	lsl.w	r3, r1, r3
 8007948:	e017      	b.n	800797a <HAL_ADC_ConfigChannel+0x642>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	fa93 f3a3 	rbit	r3, r3
 8007956:	61fb      	str	r3, [r7, #28]
  return result;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8007962:	2320      	movs	r3, #32
 8007964:	e003      	b.n	800796e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	fab3 f383 	clz	r3, r3
 800796c:	b2db      	uxtb	r3, r3
 800796e:	3301      	adds	r3, #1
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	2101      	movs	r1, #1
 8007976:	fa01 f303 	lsl.w	r3, r1, r3
 800797a:	ea42 0103 	orr.w	r1, r2, r3
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10d      	bne.n	80079a6 <HAL_ADC_ConfigChannel+0x66e>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	0e9b      	lsrs	r3, r3, #26
 8007990:	3301      	adds	r3, #1
 8007992:	f003 021f 	and.w	r2, r3, #31
 8007996:	4613      	mov	r3, r2
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	4413      	add	r3, r2
 800799c:	3b1e      	subs	r3, #30
 800799e:	051b      	lsls	r3, r3, #20
 80079a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80079a4:	e01e      	b.n	80079e4 <HAL_ADC_ConfigChannel+0x6ac>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	fa93 f3a3 	rbit	r3, r3
 80079b2:	613b      	str	r3, [r7, #16]
  return result;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d104      	bne.n	80079c8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80079be:	2320      	movs	r3, #32
 80079c0:	e006      	b.n	80079d0 <HAL_ADC_ConfigChannel+0x698>
 80079c2:	bf00      	nop
 80079c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	fab3 f383 	clz	r3, r3
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	3301      	adds	r3, #1
 80079d2:	f003 021f 	and.w	r2, r3, #31
 80079d6:	4613      	mov	r3, r2
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	4413      	add	r3, r2
 80079dc:	3b1e      	subs	r3, #30
 80079de:	051b      	lsls	r3, r3, #20
 80079e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80079e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80079ea:	4619      	mov	r1, r3
 80079ec:	f7fe fc5e 	bl	80062ac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	4b3f      	ldr	r3, [pc, #252]	; (8007af4 <HAL_ADC_ConfigChannel+0x7bc>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d071      	beq.n	8007ae0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80079fc:	483e      	ldr	r0, [pc, #248]	; (8007af8 <HAL_ADC_ConfigChannel+0x7c0>)
 80079fe:	f7fe fb57 	bl	80060b0 <LL_ADC_GetCommonPathInternalCh>
 8007a02:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a3c      	ldr	r2, [pc, #240]	; (8007afc <HAL_ADC_ConfigChannel+0x7c4>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d004      	beq.n	8007a1a <HAL_ADC_ConfigChannel+0x6e2>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a3a      	ldr	r2, [pc, #232]	; (8007b00 <HAL_ADC_ConfigChannel+0x7c8>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d127      	bne.n	8007a6a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d121      	bne.n	8007a6a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a2e:	d157      	bne.n	8007ae0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a38:	4619      	mov	r1, r3
 8007a3a:	482f      	ldr	r0, [pc, #188]	; (8007af8 <HAL_ADC_ConfigChannel+0x7c0>)
 8007a3c:	f7fe fb25 	bl	800608a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a40:	4b30      	ldr	r3, [pc, #192]	; (8007b04 <HAL_ADC_ConfigChannel+0x7cc>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	099b      	lsrs	r3, r3, #6
 8007a46:	4a30      	ldr	r2, [pc, #192]	; (8007b08 <HAL_ADC_ConfigChannel+0x7d0>)
 8007a48:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4c:	099b      	lsrs	r3, r3, #6
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	4613      	mov	r3, r2
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007a5a:	e002      	b.n	8007a62 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1f9      	bne.n	8007a5c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a68:	e03a      	b.n	8007ae0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a27      	ldr	r2, [pc, #156]	; (8007b0c <HAL_ADC_ConfigChannel+0x7d4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d113      	bne.n	8007a9c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007a74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10d      	bne.n	8007a9c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a22      	ldr	r2, [pc, #136]	; (8007b10 <HAL_ADC_ConfigChannel+0x7d8>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d02a      	beq.n	8007ae0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a92:	4619      	mov	r1, r3
 8007a94:	4818      	ldr	r0, [pc, #96]	; (8007af8 <HAL_ADC_ConfigChannel+0x7c0>)
 8007a96:	f7fe faf8 	bl	800608a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a9a:	e021      	b.n	8007ae0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a1c      	ldr	r2, [pc, #112]	; (8007b14 <HAL_ADC_ConfigChannel+0x7dc>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d11c      	bne.n	8007ae0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d116      	bne.n	8007ae0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <HAL_ADC_ConfigChannel+0x7d8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d011      	beq.n	8007ae0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007abc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ac0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	480c      	ldr	r0, [pc, #48]	; (8007af8 <HAL_ADC_ConfigChannel+0x7c0>)
 8007ac8:	f7fe fadf 	bl	800608a <LL_ADC_SetCommonPathInternalCh>
 8007acc:	e008      	b.n	8007ae0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad2:	f043 0220 	orr.w	r2, r3, #32
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007ae8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	37d8      	adds	r7, #216	; 0xd8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	80080000 	.word	0x80080000
 8007af8:	50000300 	.word	0x50000300
 8007afc:	c3210000 	.word	0xc3210000
 8007b00:	90c00010 	.word	0x90c00010
 8007b04:	200001c4 	.word	0x200001c4
 8007b08:	053e2d63 	.word	0x053e2d63
 8007b0c:	c7520000 	.word	0xc7520000
 8007b10:	50000100 	.word	0x50000100
 8007b14:	cb840000 	.word	0xcb840000

08007b18 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08e      	sub	sp, #56	; 0x38
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b30:	d003      	beq.n	8007b3a <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007b36:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <HAL_ADC_AnalogWDGConfig+0x30>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e1ea      	b.n	8007f1e <HAL_ADC_AnalogWDGConfig+0x406>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe fd28 	bl	80065aa <LL_ADC_REG_IsConversionOngoing>
 8007b5a:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fd49 	bl	80065f8 <LL_ADC_INJ_IsConversionOngoing>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f040 8175 	bne.w	8007e5a <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f040 8171 	bne.w	8007e5a <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a90      	ldr	r2, [pc, #576]	; (8007dc0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	f040 808d 	bne.w	8007c9e <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007b8c:	d034      	beq.n	8007bf8 <HAL_ADC_AnalogWDGConfig+0xe0>
 8007b8e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007b92:	d856      	bhi.n	8007c42 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007b94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b98:	d04b      	beq.n	8007c32 <HAL_ADC_AnalogWDGConfig+0x11a>
 8007b9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b9e:	d850      	bhi.n	8007c42 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007ba0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007ba4:	d01b      	beq.n	8007bde <HAL_ADC_AnalogWDGConfig+0xc6>
 8007ba6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007baa:	d84a      	bhi.n	8007c42 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bb0:	d037      	beq.n	8007c22 <HAL_ADC_AnalogWDGConfig+0x10a>
 8007bb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bb6:	d844      	bhi.n	8007c42 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007bb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bbc:	d029      	beq.n	8007c12 <HAL_ADC_AnalogWDGConfig+0xfa>
 8007bbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bc2:	d13e      	bne.n	8007c42 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007bd0:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	497a      	ldr	r1, [pc, #488]	; (8007dc0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007bd8:	f7fe fbb8 	bl	800634c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8007bdc:	e039      	b.n	8007c52 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007bea:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4973      	ldr	r1, [pc, #460]	; (8007dc0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007bf2:	f7fe fbab 	bl	800634c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 8007bf6:	e02c      	b.n	8007c52 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8007c04:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8007c08:	461a      	mov	r2, r3
 8007c0a:	496d      	ldr	r1, [pc, #436]	; (8007dc0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007c0c:	f7fe fb9e 	bl	800634c <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8007c10:	e01f      	b.n	8007c52 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a6b      	ldr	r2, [pc, #428]	; (8007dc4 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8007c18:	4969      	ldr	r1, [pc, #420]	; (8007dc0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fb96 	bl	800634c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007c20:	e017      	b.n	8007c52 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a68      	ldr	r2, [pc, #416]	; (8007dc8 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8007c28:	4965      	ldr	r1, [pc, #404]	; (8007dc0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fb8e 	bl	800634c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007c30:	e00f      	b.n	8007c52 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a65      	ldr	r2, [pc, #404]	; (8007dcc <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8007c38:	4961      	ldr	r1, [pc, #388]	; (8007dc0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe fb86 	bl	800634c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007c40:	e007      	b.n	8007c52 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2200      	movs	r2, #0
 8007c48:	495d      	ldr	r1, [pc, #372]	; (8007dc0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe fb7e 	bl	800634c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007c50:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	699a      	ldr	r2, [r3, #24]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe fcd0 	bl	800661e <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	7b1b      	ldrb	r3, [r3, #12]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d105      	bne.n	8007c92 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fcf0 	bl	8006670 <LL_ADC_EnableIT_AWD1>
 8007c90:	e0e3      	b.n	8007e5a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fd1a 	bl	80066d0 <LL_ADC_DisableIT_AWD1>
 8007c9c:	e0dd      	b.n	8007e5a <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007ca6:	d01d      	beq.n	8007ce4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8007ca8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007cac:	f200 8092 	bhi.w	8007dd4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007cb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cb4:	d07b      	beq.n	8007dae <HAL_ADC_AnalogWDGConfig+0x296>
 8007cb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cba:	f200 808b 	bhi.w	8007dd4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007cbe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007cc2:	d00f      	beq.n	8007ce4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8007cc4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007cc8:	f200 8084 	bhi.w	8007dd4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cd0:	d06d      	beq.n	8007dae <HAL_ADC_AnalogWDGConfig+0x296>
 8007cd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cd6:	d87d      	bhi.n	8007dd4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007cd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cdc:	d067      	beq.n	8007dae <HAL_ADC_AnalogWDGConfig+0x296>
 8007cde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ce2:	d177      	bne.n	8007dd4 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a39      	ldr	r2, [pc, #228]	; (8007dd0 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d12f      	bne.n	8007d4e <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d108      	bne.n	8007d0c <HAL_ADC_AnalogWDGConfig+0x1f4>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	0e9b      	lsrs	r3, r3, #26
 8007d00:	f003 031f 	and.w	r3, r3, #31
 8007d04:	2201      	movs	r2, #1
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	e016      	b.n	8007d3a <HAL_ADC_AnalogWDGConfig+0x222>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	fa93 f3a3 	rbit	r3, r3
 8007d18:	61bb      	str	r3, [r7, #24]
  return result;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8007d24:	2320      	movs	r3, #32
 8007d26:	e003      	b.n	8007d30 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	fab3 f383 	clz	r3, r3
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f003 031f 	and.w	r3, r3, #31
 8007d34:	2201      	movs	r2, #1
 8007d36:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6812      	ldr	r2, [r2, #0]
 8007d46:	430b      	orrs	r3, r1
 8007d48:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8007d4c:	e04b      	b.n	8007de6 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d108      	bne.n	8007d6c <HAL_ADC_AnalogWDGConfig+0x254>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	0e9b      	lsrs	r3, r3, #26
 8007d60:	f003 031f 	and.w	r3, r3, #31
 8007d64:	2201      	movs	r2, #1
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	e016      	b.n	8007d9a <HAL_ADC_AnalogWDGConfig+0x282>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	fa93 f3a3 	rbit	r3, r3
 8007d78:	60fb      	str	r3, [r7, #12]
  return result;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8007d84:	2320      	movs	r3, #32
 8007d86:	e003      	b.n	8007d90 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	fab3 f383 	clz	r3, r3
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 031f 	and.w	r3, r3, #31
 8007d94:	2201      	movs	r2, #1
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	6812      	ldr	r2, [r2, #0]
 8007da6:	430b      	orrs	r3, r1
 8007da8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8007dac:	e01b      	b.n	8007de6 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8007db6:	4a05      	ldr	r2, [pc, #20]	; (8007dcc <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8007db8:	4619      	mov	r1, r3
 8007dba:	f7fe fac7 	bl	800634c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007dbe:	e012      	b.n	8007de6 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8007dc0:	7dc00000 	.word	0x7dc00000
 8007dc4:	0087ffff 	.word	0x0087ffff
 8007dc8:	0107ffff 	.word	0x0107ffff
 8007dcc:	0187ffff 	.word	0x0187ffff
 8007dd0:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	4619      	mov	r1, r3
 8007de0:	f7fe fab4 	bl	800634c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007de4:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a4f      	ldr	r2, [pc, #316]	; (8007f28 <HAL_ADC_AnalogWDGConfig+0x410>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d11a      	bne.n	8007e26 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe fc19 	bl	8006638 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	7b1b      	ldrb	r3, [r3, #12]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d105      	bne.n	8007e1a <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe fc3c 	bl	8006690 <LL_ADC_EnableIT_AWD2>
 8007e18:	e01f      	b.n	8007e5a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fc66 	bl	80066f0 <LL_ADC_DisableIT_AWD2>
 8007e24:	e019      	b.n	8007e5a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe fc0c 	bl	8006654 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	7b1b      	ldrb	r3, [r3, #12]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d105      	bne.n	8007e50 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe fc31 	bl	80066b0 <LL_ADC_EnableIT_AWD3>
 8007e4e:	e004      	b.n	8007e5a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe fc5b 	bl	8006710 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a33      	ldr	r2, [pc, #204]	; (8007f2c <HAL_ADC_AnalogWDGConfig+0x414>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d118      	bne.n	8007e96 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	08db      	lsrs	r3, r3, #3
 8007e70:	f003 0303 	and.w	r3, r3, #3
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	695a      	ldr	r2, [r3, #20]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	08db      	lsrs	r3, r3, #3
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e92:	633b      	str	r3, [r7, #48]	; 0x30
 8007e94:	e035      	b.n	8007f02 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f003 0318 	and.w	r3, r3, #24
 8007ea0:	2b18      	cmp	r3, #24
 8007ea2:	d00f      	beq.n	8007ec4 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	08db      	lsrs	r3, r3, #3
 8007eb0:	f003 0303 	and.w	r3, r3, #3
 8007eb4:	f1c3 0302 	rsb	r3, r3, #2
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	f003 031e 	and.w	r3, r3, #30
 8007ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec2:	e002      	b.n	8007eca <HAL_ADC_AnalogWDGConfig+0x3b2>
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f003 0318 	and.w	r3, r3, #24
 8007ed6:	2b18      	cmp	r3, #24
 8007ed8:	d00f      	beq.n	8007efa <HAL_ADC_AnalogWDGConfig+0x3e2>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	695a      	ldr	r2, [r3, #20]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	08db      	lsrs	r3, r3, #3
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	f1c3 0302 	rsb	r3, r3, #2
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	f003 031e 	and.w	r3, r3, #30
 8007ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef8:	e002      	b.n	8007f00 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6818      	ldr	r0, [r3, #0]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	6819      	ldr	r1, [r3, #0]
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f0e:	f7fe fa4a 	bl	80063a6 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3738      	adds	r7, #56	; 0x38
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	0017ffff 	.word	0x0017ffff
 8007f2c:	7dc00000 	.word	0x7dc00000

08007f30 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe fb2f 	bl	80065aa <LL_ADC_REG_IsConversionOngoing>
 8007f4c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe fb50 	bl	80065f8 <LL_ADC_INJ_IsConversionOngoing>
 8007f58:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d103      	bne.n	8007f68 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 8098 	beq.w	8008098 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d02a      	beq.n	8007fcc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	7f5b      	ldrb	r3, [r3, #29]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d126      	bne.n	8007fcc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7f1b      	ldrb	r3, [r3, #28]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d122      	bne.n	8007fcc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8007f86:	2301      	movs	r3, #1
 8007f88:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007f8a:	e014      	b.n	8007fb6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	4a45      	ldr	r2, [pc, #276]	; (80080a4 <ADC_ConversionStop+0x174>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d90d      	bls.n	8007fb0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f98:	f043 0210 	orr.w	r2, r3, #16
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa4:	f043 0201 	orr.w	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e074      	b.n	800809a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc0:	2b40      	cmp	r3, #64	; 0x40
 8007fc2:	d1e3      	bne.n	8007f8c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2240      	movs	r2, #64	; 0x40
 8007fca:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d014      	beq.n	8007ffc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fae7 	bl	80065aa <LL_ADC_REG_IsConversionOngoing>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00c      	beq.n	8007ffc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe faa4 	bl	8006534 <LL_ADC_IsDisableOngoing>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d104      	bne.n	8007ffc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe fac3 	bl	8006582 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d014      	beq.n	800802c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe faf6 	bl	80065f8 <LL_ADC_INJ_IsConversionOngoing>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00c      	beq.n	800802c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe fa8c 	bl	8006534 <LL_ADC_IsDisableOngoing>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d104      	bne.n	800802c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fad2 	bl	80065d0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	2b02      	cmp	r3, #2
 8008030:	d005      	beq.n	800803e <ADC_ConversionStop+0x10e>
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	2b03      	cmp	r3, #3
 8008036:	d105      	bne.n	8008044 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008038:	230c      	movs	r3, #12
 800803a:	617b      	str	r3, [r7, #20]
        break;
 800803c:	e005      	b.n	800804a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800803e:	2308      	movs	r3, #8
 8008040:	617b      	str	r3, [r7, #20]
        break;
 8008042:	e002      	b.n	800804a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008044:	2304      	movs	r3, #4
 8008046:	617b      	str	r3, [r7, #20]
        break;
 8008048:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800804a:	f7fd ffdd 	bl	8006008 <HAL_GetTick>
 800804e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008050:	e01b      	b.n	800808a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008052:	f7fd ffd9 	bl	8006008 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b05      	cmp	r3, #5
 800805e:	d914      	bls.n	800808a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	4013      	ands	r3, r2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00d      	beq.n	800808a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008072:	f043 0210 	orr.w	r2, r3, #16
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800807e:	f043 0201 	orr.w	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e007      	b.n	800809a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	4013      	ands	r3, r2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1dc      	bne.n	8008052 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3720      	adds	r7, #32
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	a33fffff 	.word	0xa33fffff

080080a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fe fa28 	bl	800650e <LL_ADC_IsEnabled>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d169      	bne.n	8008198 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689a      	ldr	r2, [r3, #8]
 80080ca:	4b36      	ldr	r3, [pc, #216]	; (80081a4 <ADC_Enable+0xfc>)
 80080cc:	4013      	ands	r3, r2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00d      	beq.n	80080ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d6:	f043 0210 	orr.w	r2, r3, #16
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080e2:	f043 0201 	orr.w	r2, r3, #1
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e055      	b.n	800819a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe f9e3 	bl	80064be <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80080f8:	482b      	ldr	r0, [pc, #172]	; (80081a8 <ADC_Enable+0x100>)
 80080fa:	f7fd ffd9 	bl	80060b0 <LL_ADC_GetCommonPathInternalCh>
 80080fe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008104:	2b00      	cmp	r3, #0
 8008106:	d013      	beq.n	8008130 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008108:	4b28      	ldr	r3, [pc, #160]	; (80081ac <ADC_Enable+0x104>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	099b      	lsrs	r3, r3, #6
 800810e:	4a28      	ldr	r2, [pc, #160]	; (80081b0 <ADC_Enable+0x108>)
 8008110:	fba2 2303 	umull	r2, r3, r2, r3
 8008114:	099b      	lsrs	r3, r3, #6
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	4613      	mov	r3, r2
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008122:	e002      	b.n	800812a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	3b01      	subs	r3, #1
 8008128:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1f9      	bne.n	8008124 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008130:	f7fd ff6a 	bl	8006008 <HAL_GetTick>
 8008134:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008136:	e028      	b.n	800818a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe f9e6 	bl	800650e <LL_ADC_IsEnabled>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe f9b6 	bl	80064be <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008152:	f7fd ff59 	bl	8006008 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d914      	bls.n	800818a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b01      	cmp	r3, #1
 800816c:	d00d      	beq.n	800818a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008172:	f043 0210 	orr.w	r2, r3, #16
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800817e:	f043 0201 	orr.w	r2, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e007      	b.n	800819a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b01      	cmp	r3, #1
 8008196:	d1cf      	bne.n	8008138 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	8000003f 	.word	0x8000003f
 80081a8:	50000300 	.word	0x50000300
 80081ac:	200001c4 	.word	0x200001c4
 80081b0:	053e2d63 	.word	0x053e2d63

080081b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe f9b7 	bl	8006534 <LL_ADC_IsDisableOngoing>
 80081c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe f99e 	bl	800650e <LL_ADC_IsEnabled>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d047      	beq.n	8008268 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d144      	bne.n	8008268 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f003 030d 	and.w	r3, r3, #13
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d10c      	bne.n	8008206 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fe f978 	bl	80064e6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2203      	movs	r2, #3
 80081fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80081fe:	f7fd ff03 	bl	8006008 <HAL_GetTick>
 8008202:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008204:	e029      	b.n	800825a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820a:	f043 0210 	orr.w	r2, r3, #16
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008216:	f043 0201 	orr.w	r2, r3, #1
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e023      	b.n	800826a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008222:	f7fd fef1 	bl	8006008 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d914      	bls.n	800825a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00d      	beq.n	800825a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008242:	f043 0210 	orr.w	r2, r3, #16
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824e:	f043 0201 	orr.w	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e007      	b.n	800826a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1dc      	bne.n	8008222 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008288:	2b00      	cmp	r3, #0
 800828a:	d14b      	bne.n	8008324 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008290:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0308 	and.w	r3, r3, #8
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d021      	beq.n	80082ea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fd ffac 	bl	8006208 <LL_ADC_REG_IsTriggerSourceSWStart>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d032      	beq.n	800831c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d12b      	bne.n	800831c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11f      	bne.n	800831c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e0:	f043 0201 	orr.w	r2, r3, #1
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80082e8:	e018      	b.n	800831c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d111      	bne.n	800831c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d105      	bne.n	800831c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008314:	f043 0201 	orr.w	r2, r3, #1
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7fa ff53 	bl	80031c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008322:	e00e      	b.n	8008342 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008328:	f003 0310 	and.w	r3, r3, #16
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f7fe fff7 	bl	8007324 <HAL_ADC_ErrorCallback>
}
 8008336:	e004      	b.n	8008342 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f7fe ffd9 	bl	8007310 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800835e:	bf00      	nop
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008372:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008378:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008384:	f043 0204 	orr.w	r2, r3, #4
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f7fe ffc9 	bl	8007324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008392:	bf00      	nop
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <LL_ADC_IsEnabled>:
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d101      	bne.n	80083b2 <LL_ADC_IsEnabled+0x18>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <LL_ADC_IsEnabled+0x1a>
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <LL_ADC_StartCalibration>:
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80083d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80083dc:	4313      	orrs	r3, r2
 80083de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	609a      	str	r2, [r3, #8]
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <LL_ADC_IsCalibrationOnGoing>:
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008406:	d101      	bne.n	800840c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008408:	2301      	movs	r3, #1
 800840a:	e000      	b.n	800840e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <LL_ADC_REG_IsConversionOngoing>:
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f003 0304 	and.w	r3, r3, #4
 800842a:	2b04      	cmp	r3, #4
 800842c:	d101      	bne.n	8008432 <LL_ADC_REG_IsConversionOngoing+0x18>
 800842e:	2301      	movs	r3, #1
 8008430:	e000      	b.n	8008434 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800844a:	2300      	movs	r3, #0
 800844c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008454:	2b01      	cmp	r3, #1
 8008456:	d101      	bne.n	800845c <HAL_ADCEx_Calibration_Start+0x1c>
 8008458:	2302      	movs	r3, #2
 800845a:	e04d      	b.n	80084f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff fea5 	bl	80081b4 <ADC_Disable>
 800846a:	4603      	mov	r3, r0
 800846c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d136      	bne.n	80084e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008478:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800847c:	f023 0302 	bic.w	r3, r3, #2
 8008480:	f043 0202 	orr.w	r2, r3, #2
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff ff96 	bl	80083c0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008494:	e014      	b.n	80084c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	3301      	adds	r3, #1
 800849a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4a18      	ldr	r2, [pc, #96]	; (8008500 <HAL_ADCEx_Calibration_Start+0xc0>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d90d      	bls.n	80084c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a8:	f023 0312 	bic.w	r3, r3, #18
 80084ac:	f043 0210 	orr.w	r2, r3, #16
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e01b      	b.n	80084f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff ff94 	bl	80083f2 <LL_ADC_IsCalibrationOnGoing>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e2      	bne.n	8008496 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d4:	f023 0303 	bic.w	r3, r3, #3
 80084d8:	f043 0201 	orr.w	r2, r3, #1
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	65da      	str	r2, [r3, #92]	; 0x5c
 80084e0:	e005      	b.n	80084ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e6:	f043 0210 	orr.w	r2, r3, #16
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	0004de01 	.word	0x0004de01

08008504 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008568:	b590      	push	{r4, r7, lr}
 800856a:	b0a1      	sub	sp, #132	; 0x84
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008582:	2302      	movs	r3, #2
 8008584:	e08b      	b.n	800869e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800858e:	2300      	movs	r3, #0
 8008590:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008592:	2300      	movs	r3, #0
 8008594:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800859e:	d102      	bne.n	80085a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80085a0:	4b41      	ldr	r3, [pc, #260]	; (80086a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80085a2:	60bb      	str	r3, [r7, #8]
 80085a4:	e001      	b.n	80085aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80085a6:	2300      	movs	r3, #0
 80085a8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10b      	bne.n	80085c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b4:	f043 0220 	orr.w	r2, r3, #32
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e06a      	b.n	800869e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7ff ff25 	bl	800841a <LL_ADC_REG_IsConversionOngoing>
 80085d0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff ff1f 	bl	800841a <LL_ADC_REG_IsConversionOngoing>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d14c      	bne.n	800867c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80085e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d149      	bne.n	800867c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80085e8:	4b30      	ldr	r3, [pc, #192]	; (80086ac <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80085ea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d028      	beq.n	8008646 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80085f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	6859      	ldr	r1, [r3, #4]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008606:	035b      	lsls	r3, r3, #13
 8008608:	430b      	orrs	r3, r1
 800860a:	431a      	orrs	r2, r3
 800860c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800860e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008610:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008614:	f7ff fec1 	bl	800839a <LL_ADC_IsEnabled>
 8008618:	4604      	mov	r4, r0
 800861a:	4823      	ldr	r0, [pc, #140]	; (80086a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800861c:	f7ff febd 	bl	800839a <LL_ADC_IsEnabled>
 8008620:	4603      	mov	r3, r0
 8008622:	4323      	orrs	r3, r4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d133      	bne.n	8008690 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008630:	f023 030f 	bic.w	r3, r3, #15
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	6811      	ldr	r1, [r2, #0]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	6892      	ldr	r2, [r2, #8]
 800863c:	430a      	orrs	r2, r1
 800863e:	431a      	orrs	r2, r3
 8008640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008642:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008644:	e024      	b.n	8008690 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800864e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008650:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008652:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008656:	f7ff fea0 	bl	800839a <LL_ADC_IsEnabled>
 800865a:	4604      	mov	r4, r0
 800865c:	4812      	ldr	r0, [pc, #72]	; (80086a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800865e:	f7ff fe9c 	bl	800839a <LL_ADC_IsEnabled>
 8008662:	4603      	mov	r3, r0
 8008664:	4323      	orrs	r3, r4
 8008666:	2b00      	cmp	r3, #0
 8008668:	d112      	bne.n	8008690 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800866a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008672:	f023 030f 	bic.w	r3, r3, #15
 8008676:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008678:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800867a:	e009      	b.n	8008690 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008680:	f043 0220 	orr.w	r2, r3, #32
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800868e:	e000      	b.n	8008692 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008690:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800869a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3784      	adds	r7, #132	; 0x84
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd90      	pop	{r4, r7, pc}
 80086a6:	bf00      	nop
 80086a8:	50000100 	.word	0x50000100
 80086ac:	50000300 	.word	0x50000300

080086b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f003 0307 	and.w	r3, r3, #7
 80086be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80086c0:	4b0c      	ldr	r3, [pc, #48]	; (80086f4 <__NVIC_SetPriorityGrouping+0x44>)
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80086cc:	4013      	ands	r3, r2
 80086ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80086d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80086dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80086e2:	4a04      	ldr	r2, [pc, #16]	; (80086f4 <__NVIC_SetPriorityGrouping+0x44>)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	60d3      	str	r3, [r2, #12]
}
 80086e8:	bf00      	nop
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	e000ed00 	.word	0xe000ed00

080086f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086fc:	4b04      	ldr	r3, [pc, #16]	; (8008710 <__NVIC_GetPriorityGrouping+0x18>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	0a1b      	lsrs	r3, r3, #8
 8008702:	f003 0307 	and.w	r3, r3, #7
}
 8008706:	4618      	mov	r0, r3
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	e000ed00 	.word	0xe000ed00

08008714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800871e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008722:	2b00      	cmp	r3, #0
 8008724:	db0b      	blt.n	800873e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	f003 021f 	and.w	r2, r3, #31
 800872c:	4907      	ldr	r1, [pc, #28]	; (800874c <__NVIC_EnableIRQ+0x38>)
 800872e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008732:	095b      	lsrs	r3, r3, #5
 8008734:	2001      	movs	r0, #1
 8008736:	fa00 f202 	lsl.w	r2, r0, r2
 800873a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	e000e100 	.word	0xe000e100

08008750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800875c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008760:	2b00      	cmp	r3, #0
 8008762:	db0a      	blt.n	800877a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	b2da      	uxtb	r2, r3
 8008768:	490c      	ldr	r1, [pc, #48]	; (800879c <__NVIC_SetPriority+0x4c>)
 800876a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800876e:	0112      	lsls	r2, r2, #4
 8008770:	b2d2      	uxtb	r2, r2
 8008772:	440b      	add	r3, r1
 8008774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008778:	e00a      	b.n	8008790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	b2da      	uxtb	r2, r3
 800877e:	4908      	ldr	r1, [pc, #32]	; (80087a0 <__NVIC_SetPriority+0x50>)
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	3b04      	subs	r3, #4
 8008788:	0112      	lsls	r2, r2, #4
 800878a:	b2d2      	uxtb	r2, r2
 800878c:	440b      	add	r3, r1
 800878e:	761a      	strb	r2, [r3, #24]
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	e000e100 	.word	0xe000e100
 80087a0:	e000ed00 	.word	0xe000ed00

080087a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b089      	sub	sp, #36	; 0x24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f1c3 0307 	rsb	r3, r3, #7
 80087be:	2b04      	cmp	r3, #4
 80087c0:	bf28      	it	cs
 80087c2:	2304      	movcs	r3, #4
 80087c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	3304      	adds	r3, #4
 80087ca:	2b06      	cmp	r3, #6
 80087cc:	d902      	bls.n	80087d4 <NVIC_EncodePriority+0x30>
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	3b03      	subs	r3, #3
 80087d2:	e000      	b.n	80087d6 <NVIC_EncodePriority+0x32>
 80087d4:	2300      	movs	r3, #0
 80087d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087d8:	f04f 32ff 	mov.w	r2, #4294967295
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	fa02 f303 	lsl.w	r3, r2, r3
 80087e2:	43da      	mvns	r2, r3
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	401a      	ands	r2, r3
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087ec:	f04f 31ff 	mov.w	r1, #4294967295
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	fa01 f303 	lsl.w	r3, r1, r3
 80087f6:	43d9      	mvns	r1, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087fc:	4313      	orrs	r3, r2
         );
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3724      	adds	r7, #36	; 0x24
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
	...

0800880c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3b01      	subs	r3, #1
 8008818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800881c:	d301      	bcc.n	8008822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800881e:	2301      	movs	r3, #1
 8008820:	e00f      	b.n	8008842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008822:	4a0a      	ldr	r2, [pc, #40]	; (800884c <SysTick_Config+0x40>)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3b01      	subs	r3, #1
 8008828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800882a:	210f      	movs	r1, #15
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	f7ff ff8e 	bl	8008750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008834:	4b05      	ldr	r3, [pc, #20]	; (800884c <SysTick_Config+0x40>)
 8008836:	2200      	movs	r2, #0
 8008838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800883a:	4b04      	ldr	r3, [pc, #16]	; (800884c <SysTick_Config+0x40>)
 800883c:	2207      	movs	r2, #7
 800883e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	e000e010 	.word	0xe000e010

08008850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff ff29 	bl	80086b0 <__NVIC_SetPriorityGrouping>
}
 800885e:	bf00      	nop
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b086      	sub	sp, #24
 800886a:	af00      	add	r7, sp, #0
 800886c:	4603      	mov	r3, r0
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	607a      	str	r2, [r7, #4]
 8008872:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008874:	f7ff ff40 	bl	80086f8 <__NVIC_GetPriorityGrouping>
 8008878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	6978      	ldr	r0, [r7, #20]
 8008880:	f7ff ff90 	bl	80087a4 <NVIC_EncodePriority>
 8008884:	4602      	mov	r2, r0
 8008886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800888a:	4611      	mov	r1, r2
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff ff5f 	bl	8008750 <__NVIC_SetPriority>
}
 8008892:	bf00      	nop
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	4603      	mov	r3, r0
 80088a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80088a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff ff33 	bl	8008714 <__NVIC_EnableIRQ>
}
 80088ae:	bf00      	nop
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7ff ffa4 	bl	800880c <SysTick_Config>
 80088c4:	4603      	mov	r3, r0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e054      	b.n	800898c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	7f5b      	ldrb	r3, [r3, #29]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d105      	bne.n	80088f8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7fc fa7e 	bl	8004df4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	791b      	ldrb	r3, [r3, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10c      	bne.n	8008920 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a22      	ldr	r2, [pc, #136]	; (8008994 <HAL_CRC_Init+0xc4>)
 800890c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0218 	bic.w	r2, r2, #24
 800891c:	609a      	str	r2, [r3, #8]
 800891e:	e00c      	b.n	800893a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6899      	ldr	r1, [r3, #8]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	461a      	mov	r2, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f948 	bl	8008bc0 <HAL_CRCEx_Polynomial_Set>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e028      	b.n	800898c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	795b      	ldrb	r3, [r3, #5]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d105      	bne.n	800894e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f04f 32ff 	mov.w	r2, #4294967295
 800894a:	611a      	str	r2, [r3, #16]
 800894c:	e004      	b.n	8008958 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	6912      	ldr	r2, [r2, #16]
 8008956:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	695a      	ldr	r2, [r3, #20]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699a      	ldr	r2, [r3, #24]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	04c11db7 	.word	0x04c11db7

08008998 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80089a4:	2300      	movs	r3, #0
 80089a6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2202      	movs	r2, #2
 80089ac:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f042 0201 	orr.w	r2, r2, #1
 80089bc:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d006      	beq.n	80089d4 <HAL_CRC_Calculate+0x3c>
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d829      	bhi.n	8008a1e <HAL_CRC_Calculate+0x86>
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d019      	beq.n	8008a02 <HAL_CRC_Calculate+0x6a>
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d01e      	beq.n	8008a10 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80089d2:	e024      	b.n	8008a1e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	e00a      	b.n	80089f0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	441a      	add	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	3301      	adds	r3, #1
 80089ee:	617b      	str	r3, [r7, #20]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d3f0      	bcc.n	80089da <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	613b      	str	r3, [r7, #16]
      break;
 8008a00:	e00e      	b.n	8008a20 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 f812 	bl	8008a30 <CRC_Handle_8>
 8008a0c:	6138      	str	r0, [r7, #16]
      break;
 8008a0e:	e007      	b.n	8008a20 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 f899 	bl	8008b4c <CRC_Handle_16>
 8008a1a:	6138      	str	r0, [r7, #16]
      break;
 8008a1c:	e000      	b.n	8008a20 <HAL_CRC_Calculate+0x88>
      break;
 8008a1e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8008a26:	693b      	ldr	r3, [r7, #16]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b089      	sub	sp, #36	; 0x24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61fb      	str	r3, [r7, #28]
 8008a40:	e023      	b.n	8008a8a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	4413      	add	r3, r2
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	3301      	adds	r3, #1
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	440b      	add	r3, r1
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a5c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	3302      	adds	r3, #2
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	440b      	add	r3, r1
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008a6c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	3303      	adds	r3, #3
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	440b      	add	r3, r1
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008a80:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	3301      	adds	r3, #1
 8008a88:	61fb      	str	r3, [r7, #28]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	089b      	lsrs	r3, r3, #2
 8008a8e:	69fa      	ldr	r2, [r7, #28]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d3d6      	bcc.n	8008a42 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f003 0303 	and.w	r3, r3, #3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d04d      	beq.n	8008b3a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f003 0303 	and.w	r3, r3, #3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d107      	bne.n	8008ab8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	4413      	add	r3, r2
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	6812      	ldr	r2, [r2, #0]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d116      	bne.n	8008af0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	4413      	add	r3, r2
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	021b      	lsls	r3, r3, #8
 8008ace:	b21a      	sxth	r2, r3
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	440b      	add	r3, r1
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b21b      	sxth	r3, r3
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	b21b      	sxth	r3, r3
 8008ae2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	8b7a      	ldrh	r2, [r7, #26]
 8008aee:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f003 0303 	and.w	r3, r3, #3
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d11f      	bne.n	8008b3a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	4413      	add	r3, r2
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	021b      	lsls	r3, r3, #8
 8008b06:	b21a      	sxth	r2, r3
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	440b      	add	r3, r1
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	b21b      	sxth	r3, r3
 8008b16:	4313      	orrs	r3, r2
 8008b18:	b21b      	sxth	r3, r3
 8008b1a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	8b7a      	ldrh	r2, [r7, #26]
 8008b26:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	3302      	adds	r3, #2
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	4413      	add	r3, r2
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	6812      	ldr	r2, [r2, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3724      	adds	r7, #36	; 0x24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008b58:	2300      	movs	r3, #0
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	e013      	b.n	8008b86 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	4413      	add	r3, r2
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	041a      	lsls	r2, r3, #16
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	3302      	adds	r3, #2
 8008b70:	68b9      	ldr	r1, [r7, #8]
 8008b72:	440b      	add	r3, r1
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	4619      	mov	r1, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	3301      	adds	r3, #1
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	085b      	lsrs	r3, r3, #1
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d3e6      	bcc.n	8008b5e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d009      	beq.n	8008bae <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	881a      	ldrh	r2, [r3, #0]
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008bd0:	231f      	movs	r3, #31
 8008bd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	75fb      	strb	r3, [r7, #23]
 8008be2:	e063      	b.n	8008cac <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008be4:	bf00      	nop
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	1e5a      	subs	r2, r3, #1
 8008bea:	613a      	str	r2, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d009      	beq.n	8008c04 <HAL_CRCEx_Polynomial_Set+0x44>
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f003 031f 	and.w	r3, r3, #31
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0f0      	beq.n	8008be6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b18      	cmp	r3, #24
 8008c08:	d846      	bhi.n	8008c98 <HAL_CRCEx_Polynomial_Set+0xd8>
 8008c0a:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <HAL_CRCEx_Polynomial_Set+0x50>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c9f 	.word	0x08008c9f
 8008c14:	08008c99 	.word	0x08008c99
 8008c18:	08008c99 	.word	0x08008c99
 8008c1c:	08008c99 	.word	0x08008c99
 8008c20:	08008c99 	.word	0x08008c99
 8008c24:	08008c99 	.word	0x08008c99
 8008c28:	08008c99 	.word	0x08008c99
 8008c2c:	08008c99 	.word	0x08008c99
 8008c30:	08008c8d 	.word	0x08008c8d
 8008c34:	08008c99 	.word	0x08008c99
 8008c38:	08008c99 	.word	0x08008c99
 8008c3c:	08008c99 	.word	0x08008c99
 8008c40:	08008c99 	.word	0x08008c99
 8008c44:	08008c99 	.word	0x08008c99
 8008c48:	08008c99 	.word	0x08008c99
 8008c4c:	08008c99 	.word	0x08008c99
 8008c50:	08008c81 	.word	0x08008c81
 8008c54:	08008c99 	.word	0x08008c99
 8008c58:	08008c99 	.word	0x08008c99
 8008c5c:	08008c99 	.word	0x08008c99
 8008c60:	08008c99 	.word	0x08008c99
 8008c64:	08008c99 	.word	0x08008c99
 8008c68:	08008c99 	.word	0x08008c99
 8008c6c:	08008c99 	.word	0x08008c99
 8008c70:	08008c75 	.word	0x08008c75
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	2b06      	cmp	r3, #6
 8008c78:	d913      	bls.n	8008ca2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008c7e:	e010      	b.n	8008ca2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2b07      	cmp	r3, #7
 8008c84:	d90f      	bls.n	8008ca6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008c8a:	e00c      	b.n	8008ca6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	2b0f      	cmp	r3, #15
 8008c90:	d90b      	bls.n	8008caa <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008c96:	e008      	b.n	8008caa <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	75fb      	strb	r3, [r7, #23]
        break;
 8008c9c:	e006      	b.n	8008cac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008c9e:	bf00      	nop
 8008ca0:	e004      	b.n	8008cac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008ca2:	bf00      	nop
 8008ca4:	e002      	b.n	8008cac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008caa:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10d      	bne.n	8008cce <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f023 0118 	bic.w	r1, r3, #24
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	371c      	adds	r7, #28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e08d      	b.n	8008e0a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4b47      	ldr	r3, [pc, #284]	; (8008e14 <HAL_DMA_Init+0x138>)
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d80f      	bhi.n	8008d1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4b45      	ldr	r3, [pc, #276]	; (8008e18 <HAL_DMA_Init+0x13c>)
 8008d02:	4413      	add	r3, r2
 8008d04:	4a45      	ldr	r2, [pc, #276]	; (8008e1c <HAL_DMA_Init+0x140>)
 8008d06:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0a:	091b      	lsrs	r3, r3, #4
 8008d0c:	009a      	lsls	r2, r3, #2
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a42      	ldr	r2, [pc, #264]	; (8008e20 <HAL_DMA_Init+0x144>)
 8008d16:	641a      	str	r2, [r3, #64]	; 0x40
 8008d18:	e00e      	b.n	8008d38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	4b40      	ldr	r3, [pc, #256]	; (8008e24 <HAL_DMA_Init+0x148>)
 8008d22:	4413      	add	r3, r2
 8008d24:	4a3d      	ldr	r2, [pc, #244]	; (8008e1c <HAL_DMA_Init+0x140>)
 8008d26:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2a:	091b      	lsrs	r3, r3, #4
 8008d2c:	009a      	lsls	r2, r3, #2
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a3c      	ldr	r2, [pc, #240]	; (8008e28 <HAL_DMA_Init+0x14c>)
 8008d36:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa1e 	bl	80091cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d98:	d102      	bne.n	8008da0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008da8:	b2d2      	uxtb	r2, r2
 8008daa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008db4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d010      	beq.n	8008de0 <HAL_DMA_Init+0x104>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d80c      	bhi.n	8008de0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fa3e 	bl	8009248 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008ddc:	605a      	str	r2, [r3, #4]
 8008dde:	e008      	b.n	8008df2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	40020407 	.word	0x40020407
 8008e18:	bffdfff8 	.word	0xbffdfff8
 8008e1c:	cccccccd 	.word	0xcccccccd
 8008e20:	40020000 	.word	0x40020000
 8008e24:	bffdfbf8 	.word	0xbffdfbf8
 8008e28:	40020400 	.word	0x40020400

08008e2c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d101      	bne.n	8008e4c <HAL_DMA_Start_IT+0x20>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	e066      	b.n	8008f1a <HAL_DMA_Start_IT+0xee>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d155      	bne.n	8008f0c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 0201 	bic.w	r2, r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	68b9      	ldr	r1, [r7, #8]
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 f962 	bl	800914e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d008      	beq.n	8008ea4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 020e 	orr.w	r2, r2, #14
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	e00f      	b.n	8008ec4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f022 0204 	bic.w	r2, r2, #4
 8008eb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f042 020a 	orr.w	r2, r2, #10
 8008ec2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d007      	beq.n	8008ee2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ee0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d007      	beq.n	8008efa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ef8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f042 0201 	orr.w	r2, r2, #1
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	e005      	b.n	8008f18 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008f14:	2302      	movs	r3, #2
 8008f16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d005      	beq.n	8008f46 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2204      	movs	r2, #4
 8008f3e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	73fb      	strb	r3, [r7, #15]
 8008f44:	e037      	b.n	8008fb6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 020e 	bic.w	r2, r2, #14
 8008f54:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f64:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f022 0201 	bic.w	r2, r2, #1
 8008f74:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7a:	f003 021f 	and.w	r2, r3, #31
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	2101      	movs	r1, #1
 8008f84:	fa01 f202 	lsl.w	r2, r1, r2
 8008f88:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008f92:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00c      	beq.n	8008fb6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008faa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008fb4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff0:	f003 031f 	and.w	r3, r3, #31
 8008ff4:	2204      	movs	r2, #4
 8008ff6:	409a      	lsls	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d026      	beq.n	800904e <HAL_DMA_IRQHandler+0x7a>
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f003 0304 	and.w	r3, r3, #4
 8009006:	2b00      	cmp	r3, #0
 8009008:	d021      	beq.n	800904e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0320 	and.w	r3, r3, #32
 8009014:	2b00      	cmp	r3, #0
 8009016:	d107      	bne.n	8009028 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0204 	bic.w	r2, r2, #4
 8009026:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902c:	f003 021f 	and.w	r2, r3, #31
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009034:	2104      	movs	r1, #4
 8009036:	fa01 f202 	lsl.w	r2, r1, r2
 800903a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009040:	2b00      	cmp	r3, #0
 8009042:	d071      	beq.n	8009128 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800904c:	e06c      	b.n	8009128 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009052:	f003 031f 	and.w	r3, r3, #31
 8009056:	2202      	movs	r2, #2
 8009058:	409a      	lsls	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4013      	ands	r3, r2
 800905e:	2b00      	cmp	r3, #0
 8009060:	d02e      	beq.n	80090c0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d029      	beq.n	80090c0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0320 	and.w	r3, r3, #32
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10b      	bne.n	8009092 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 020a 	bic.w	r2, r2, #10
 8009088:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009096:	f003 021f 	and.w	r2, r3, #31
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909e:	2102      	movs	r1, #2
 80090a0:	fa01 f202 	lsl.w	r2, r1, r2
 80090a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d038      	beq.n	8009128 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80090be:	e033      	b.n	8009128 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c4:	f003 031f 	and.w	r3, r3, #31
 80090c8:	2208      	movs	r2, #8
 80090ca:	409a      	lsls	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4013      	ands	r3, r2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d02a      	beq.n	800912a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f003 0308 	and.w	r3, r3, #8
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d025      	beq.n	800912a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 020e 	bic.w	r2, r2, #14
 80090ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f2:	f003 021f 	and.w	r2, r3, #31
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	2101      	movs	r1, #1
 80090fc:	fa01 f202 	lsl.w	r2, r1, r2
 8009100:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009128:	bf00      	nop
 800912a:	bf00      	nop
}
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009140:	b2db      	uxtb	r3, r3
}
 8009142:	4618      	mov	r0, r3
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800914e:	b480      	push	{r7}
 8009150:	b085      	sub	sp, #20
 8009152:	af00      	add	r7, sp, #0
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	607a      	str	r2, [r7, #4]
 800915a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009164:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916a:	2b00      	cmp	r3, #0
 800916c:	d004      	beq.n	8009178 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009176:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917c:	f003 021f 	and.w	r2, r3, #31
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009184:	2101      	movs	r1, #1
 8009186:	fa01 f202 	lsl.w	r2, r1, r2
 800918a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	2b10      	cmp	r3, #16
 800919a:	d108      	bne.n	80091ae <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80091ac:	e007      	b.n	80091be <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	60da      	str	r2, [r3, #12]
}
 80091be:	bf00      	nop
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
	...

080091cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	461a      	mov	r2, r3
 80091da:	4b16      	ldr	r3, [pc, #88]	; (8009234 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80091dc:	429a      	cmp	r2, r3
 80091de:	d802      	bhi.n	80091e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80091e0:	4b15      	ldr	r3, [pc, #84]	; (8009238 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	e001      	b.n	80091ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80091e6:	4b15      	ldr	r3, [pc, #84]	; (800923c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80091e8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	3b08      	subs	r3, #8
 80091f6:	4a12      	ldr	r2, [pc, #72]	; (8009240 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80091f8:	fba2 2303 	umull	r2, r3, r2, r3
 80091fc:	091b      	lsrs	r3, r3, #4
 80091fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009204:	089b      	lsrs	r3, r3, #2
 8009206:	009a      	lsls	r2, r3, #2
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	4413      	add	r3, r2
 800920c:	461a      	mov	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a0b      	ldr	r2, [pc, #44]	; (8009244 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009216:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f003 031f 	and.w	r3, r3, #31
 800921e:	2201      	movs	r2, #1
 8009220:	409a      	lsls	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009226:	bf00      	nop
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	40020407 	.word	0x40020407
 8009238:	40020800 	.word	0x40020800
 800923c:	40020820 	.word	0x40020820
 8009240:	cccccccd 	.word	0xcccccccd
 8009244:	40020880 	.word	0x40020880

08009248 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	461a      	mov	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a08      	ldr	r2, [pc, #32]	; (800928c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800926a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3b01      	subs	r3, #1
 8009270:	f003 031f 	and.w	r3, r3, #31
 8009274:	2201      	movs	r2, #1
 8009276:	409a      	lsls	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800927c:	bf00      	nop
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	1000823f 	.word	0x1000823f
 800928c:	40020940 	.word	0x40020940

08009290 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800929e:	2300      	movs	r3, #0
 80092a0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80092a2:	4b2f      	ldr	r3, [pc, #188]	; (8009360 <HAL_FLASH_Program+0xd0>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d101      	bne.n	80092ae <HAL_FLASH_Program+0x1e>
 80092aa:	2302      	movs	r3, #2
 80092ac:	e053      	b.n	8009356 <HAL_FLASH_Program+0xc6>
 80092ae:	4b2c      	ldr	r3, [pc, #176]	; (8009360 <HAL_FLASH_Program+0xd0>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80092b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80092b8:	f000 f892 	bl	80093e0 <FLASH_WaitForLastOperation>
 80092bc:	4603      	mov	r3, r0
 80092be:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d143      	bne.n	800934e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80092c6:	4b26      	ldr	r3, [pc, #152]	; (8009360 <HAL_FLASH_Program+0xd0>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80092cc:	4b25      	ldr	r3, [pc, #148]	; (8009364 <HAL_FLASH_Program+0xd4>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d009      	beq.n	80092ec <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80092d8:	4b22      	ldr	r3, [pc, #136]	; (8009364 <HAL_FLASH_Program+0xd4>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a21      	ldr	r2, [pc, #132]	; (8009364 <HAL_FLASH_Program+0xd4>)
 80092de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092e2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80092e4:	4b1e      	ldr	r3, [pc, #120]	; (8009360 <HAL_FLASH_Program+0xd0>)
 80092e6:	2202      	movs	r2, #2
 80092e8:	771a      	strb	r2, [r3, #28]
 80092ea:	e002      	b.n	80092f2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80092ec:	4b1c      	ldr	r3, [pc, #112]	; (8009360 <HAL_FLASH_Program+0xd0>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d107      	bne.n	8009308 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80092f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092fc:	68b8      	ldr	r0, [r7, #8]
 80092fe:	f000 f8c3 	bl	8009488 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8009302:	2301      	movs	r3, #1
 8009304:	613b      	str	r3, [r7, #16]
 8009306:	e010      	b.n	800932a <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d002      	beq.n	8009314 <HAL_FLASH_Program+0x84>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b02      	cmp	r3, #2
 8009312:	d10a      	bne.n	800932a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	4619      	mov	r1, r3
 8009318:	68b8      	ldr	r0, [r7, #8]
 800931a:	f000 f8db 	bl	80094d4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d102      	bne.n	800932a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8009324:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009328:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800932a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800932e:	f000 f857 	bl	80093e0 <FLASH_WaitForLastOperation>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d006      	beq.n	800934a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800933c:	4b09      	ldr	r3, [pc, #36]	; (8009364 <HAL_FLASH_Program+0xd4>)
 800933e:	695a      	ldr	r2, [r3, #20]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	43db      	mvns	r3, r3
 8009344:	4907      	ldr	r1, [pc, #28]	; (8009364 <HAL_FLASH_Program+0xd4>)
 8009346:	4013      	ands	r3, r2
 8009348:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800934a:	f000 f9d3 	bl	80096f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800934e:	4b04      	ldr	r3, [pc, #16]	; (8009360 <HAL_FLASH_Program+0xd0>)
 8009350:	2200      	movs	r2, #0
 8009352:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009354:	7dfb      	ldrb	r3, [r7, #23]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	200001e0 	.word	0x200001e0
 8009364:	40022000 	.word	0x40022000

08009368 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009372:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <HAL_FLASH_Unlock+0x38>)
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	da0b      	bge.n	8009392 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800937a:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <HAL_FLASH_Unlock+0x38>)
 800937c:	4a09      	ldr	r2, [pc, #36]	; (80093a4 <HAL_FLASH_Unlock+0x3c>)
 800937e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009380:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <HAL_FLASH_Unlock+0x38>)
 8009382:	4a09      	ldr	r2, [pc, #36]	; (80093a8 <HAL_FLASH_Unlock+0x40>)
 8009384:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009386:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <HAL_FLASH_Unlock+0x38>)
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	2b00      	cmp	r3, #0
 800938c:	da01      	bge.n	8009392 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009392:	79fb      	ldrb	r3, [r7, #7]
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	40022000 	.word	0x40022000
 80093a4:	45670123 	.word	0x45670123
 80093a8:	cdef89ab 	.word	0xcdef89ab

080093ac <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80093b6:	4b09      	ldr	r3, [pc, #36]	; (80093dc <HAL_FLASH_Lock+0x30>)
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	4a08      	ldr	r2, [pc, #32]	; (80093dc <HAL_FLASH_Lock+0x30>)
 80093bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093c0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80093c2:	4b06      	ldr	r3, [pc, #24]	; (80093dc <HAL_FLASH_Lock+0x30>)
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	da01      	bge.n	80093ce <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80093ce:	79fb      	ldrb	r3, [r7, #7]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	40022000 	.word	0x40022000

080093e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80093e8:	f7fc fe0e 	bl	8006008 <HAL_GetTick>
 80093ec:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80093ee:	e009      	b.n	8009404 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80093f0:	f7fc fe0a 	bl	8006008 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d201      	bcs.n	8009404 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e038      	b.n	8009476 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009404:	4b1e      	ldr	r3, [pc, #120]	; (8009480 <FLASH_WaitForLastOperation+0xa0>)
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800940c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009410:	d0ee      	beq.n	80093f0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009412:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <FLASH_WaitForLastOperation+0xa0>)
 8009414:	691a      	ldr	r2, [r3, #16]
 8009416:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800941a:	4013      	ands	r3, r2
 800941c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d01e      	beq.n	8009462 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8009424:	4b17      	ldr	r3, [pc, #92]	; (8009484 <FLASH_WaitForLastOperation+0xa4>)
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	4313      	orrs	r3, r2
 800942c:	4a15      	ldr	r2, [pc, #84]	; (8009484 <FLASH_WaitForLastOperation+0xa4>)
 800942e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d007      	beq.n	800944a <FLASH_WaitForLastOperation+0x6a>
 800943a:	4b11      	ldr	r3, [pc, #68]	; (8009480 <FLASH_WaitForLastOperation+0xa0>)
 800943c:	699a      	ldr	r2, [r3, #24]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009444:	490e      	ldr	r1, [pc, #56]	; (8009480 <FLASH_WaitForLastOperation+0xa0>)
 8009446:	4313      	orrs	r3, r2
 8009448:	618b      	str	r3, [r1, #24]
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d004      	beq.n	800945e <FLASH_WaitForLastOperation+0x7e>
 8009454:	4a0a      	ldr	r2, [pc, #40]	; (8009480 <FLASH_WaitForLastOperation+0xa0>)
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800945c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e009      	b.n	8009476 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009462:	4b07      	ldr	r3, [pc, #28]	; (8009480 <FLASH_WaitForLastOperation+0xa0>)
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b01      	cmp	r3, #1
 800946c:	d102      	bne.n	8009474 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800946e:	4b04      	ldr	r3, [pc, #16]	; (8009480 <FLASH_WaitForLastOperation+0xa0>)
 8009470:	2201      	movs	r2, #1
 8009472:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	40022000 	.word	0x40022000
 8009484:	200001e0 	.word	0x200001e0

08009488 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009494:	4b0e      	ldr	r3, [pc, #56]	; (80094d0 <FLASH_Program_DoubleWord+0x48>)
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	4a0d      	ldr	r2, [pc, #52]	; (80094d0 <FLASH_Program_DoubleWord+0x48>)
 800949a:	f043 0301 	orr.w	r3, r3, #1
 800949e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80094a6:	f3bf 8f6f 	isb	sy
}
 80094aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80094ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	000a      	movs	r2, r1
 80094ba:	2300      	movs	r3, #0
 80094bc:	68f9      	ldr	r1, [r7, #12]
 80094be:	3104      	adds	r1, #4
 80094c0:	4613      	mov	r3, r2
 80094c2:	600b      	str	r3, [r1, #0]
}
 80094c4:	bf00      	nop
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	40022000 	.word	0x40022000

080094d4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b089      	sub	sp, #36	; 0x24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80094de:	2340      	movs	r3, #64	; 0x40
 80094e0:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80094ea:	4b14      	ldr	r3, [pc, #80]	; (800953c <FLASH_Program_Fast+0x68>)
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	4a13      	ldr	r2, [pc, #76]	; (800953c <FLASH_Program_Fast+0x68>)
 80094f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094f6:	f3ef 8310 	mrs	r3, PRIMASK
 80094fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80094fc:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80094fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009500:	b672      	cpsid	i
}
 8009502:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	3304      	adds	r3, #4
 8009510:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	3304      	adds	r3, #4
 8009516:	617b      	str	r3, [r7, #20]
    row_index--;
 8009518:	7ffb      	ldrb	r3, [r7, #31]
 800951a:	3b01      	subs	r3, #1
 800951c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800951e:	7ffb      	ldrb	r3, [r7, #31]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1ef      	bne.n	8009504 <FLASH_Program_Fast+0x30>
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f383 8810 	msr	PRIMASK, r3
}
 800952e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009530:	bf00      	nop
 8009532:	3724      	adds	r7, #36	; 0x24
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	40022000 	.word	0x40022000

08009540 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800954a:	4b47      	ldr	r3, [pc, #284]	; (8009668 <HAL_FLASHEx_Erase+0x128>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d101      	bne.n	8009556 <HAL_FLASHEx_Erase+0x16>
 8009552:	2302      	movs	r3, #2
 8009554:	e083      	b.n	800965e <HAL_FLASHEx_Erase+0x11e>
 8009556:	4b44      	ldr	r3, [pc, #272]	; (8009668 <HAL_FLASHEx_Erase+0x128>)
 8009558:	2201      	movs	r2, #1
 800955a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800955c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009560:	f7ff ff3e 	bl	80093e0 <FLASH_WaitForLastOperation>
 8009564:	4603      	mov	r3, r0
 8009566:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009568:	7bfb      	ldrb	r3, [r7, #15]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d173      	bne.n	8009656 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800956e:	4b3e      	ldr	r3, [pc, #248]	; (8009668 <HAL_FLASHEx_Erase+0x128>)
 8009570:	2200      	movs	r2, #0
 8009572:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009574:	4b3d      	ldr	r3, [pc, #244]	; (800966c <HAL_FLASHEx_Erase+0x12c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800957c:	2b00      	cmp	r3, #0
 800957e:	d013      	beq.n	80095a8 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009580:	4b3a      	ldr	r3, [pc, #232]	; (800966c <HAL_FLASHEx_Erase+0x12c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009588:	2b00      	cmp	r3, #0
 800958a:	d009      	beq.n	80095a0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800958c:	4b37      	ldr	r3, [pc, #220]	; (800966c <HAL_FLASHEx_Erase+0x12c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a36      	ldr	r2, [pc, #216]	; (800966c <HAL_FLASHEx_Erase+0x12c>)
 8009592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009596:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009598:	4b33      	ldr	r3, [pc, #204]	; (8009668 <HAL_FLASHEx_Erase+0x128>)
 800959a:	2203      	movs	r2, #3
 800959c:	771a      	strb	r2, [r3, #28]
 800959e:	e016      	b.n	80095ce <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80095a0:	4b31      	ldr	r3, [pc, #196]	; (8009668 <HAL_FLASHEx_Erase+0x128>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	771a      	strb	r2, [r3, #28]
 80095a6:	e012      	b.n	80095ce <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80095a8:	4b30      	ldr	r3, [pc, #192]	; (800966c <HAL_FLASHEx_Erase+0x12c>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d009      	beq.n	80095c8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80095b4:	4b2d      	ldr	r3, [pc, #180]	; (800966c <HAL_FLASHEx_Erase+0x12c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a2c      	ldr	r2, [pc, #176]	; (800966c <HAL_FLASHEx_Erase+0x12c>)
 80095ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095be:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80095c0:	4b29      	ldr	r3, [pc, #164]	; (8009668 <HAL_FLASHEx_Erase+0x128>)
 80095c2:	2202      	movs	r2, #2
 80095c4:	771a      	strb	r2, [r3, #28]
 80095c6:	e002      	b.n	80095ce <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80095c8:	4b27      	ldr	r3, [pc, #156]	; (8009668 <HAL_FLASHEx_Erase+0x128>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d111      	bne.n	80095fa <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f848 	bl	8009670 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80095e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095e4:	f7ff fefc 	bl	80093e0 <FLASH_WaitForLastOperation>
 80095e8:	4603      	mov	r3, r0
 80095ea:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80095ec:	4b1f      	ldr	r3, [pc, #124]	; (800966c <HAL_FLASHEx_Erase+0x12c>)
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	4a1e      	ldr	r2, [pc, #120]	; (800966c <HAL_FLASHEx_Erase+0x12c>)
 80095f2:	f023 0304 	bic.w	r3, r3, #4
 80095f6:	6153      	str	r3, [r2, #20]
 80095f8:	e02b      	b.n	8009652 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009600:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	60bb      	str	r3, [r7, #8]
 8009608:	e01b      	b.n	8009642 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	4619      	mov	r1, r3
 8009610:	68b8      	ldr	r0, [r7, #8]
 8009612:	f000 f84b 	bl	80096ac <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800961a:	f7ff fee1 	bl	80093e0 <FLASH_WaitForLastOperation>
 800961e:	4603      	mov	r3, r0
 8009620:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009622:	4b12      	ldr	r3, [pc, #72]	; (800966c <HAL_FLASHEx_Erase+0x12c>)
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	4a11      	ldr	r2, [pc, #68]	; (800966c <HAL_FLASHEx_Erase+0x12c>)
 8009628:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 800962c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d003      	beq.n	800963c <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	601a      	str	r2, [r3, #0]
          break;
 800963a:	e00a      	b.n	8009652 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	3301      	adds	r3, #1
 8009640:	60bb      	str	r3, [r7, #8]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	4413      	add	r3, r2
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	429a      	cmp	r2, r3
 8009650:	d3db      	bcc.n	800960a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009652:	f000 f84f 	bl	80096f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009656:	4b04      	ldr	r3, [pc, #16]	; (8009668 <HAL_FLASHEx_Erase+0x128>)
 8009658:	2200      	movs	r2, #0
 800965a:	701a      	strb	r2, [r3, #0]

  return status;
 800965c:	7bfb      	ldrb	r3, [r7, #15]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	200001e0 	.word	0x200001e0
 800966c:	40022000 	.word	0x40022000

08009670 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b00      	cmp	r3, #0
 8009680:	d005      	beq.n	800968e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8009682:	4b09      	ldr	r3, [pc, #36]	; (80096a8 <FLASH_MassErase+0x38>)
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	4a08      	ldr	r2, [pc, #32]	; (80096a8 <FLASH_MassErase+0x38>)
 8009688:	f043 0304 	orr.w	r3, r3, #4
 800968c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800968e:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <FLASH_MassErase+0x38>)
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	4a05      	ldr	r2, [pc, #20]	; (80096a8 <FLASH_MassErase+0x38>)
 8009694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009698:	6153      	str	r3, [r2, #20]
}
 800969a:	bf00      	nop
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	40022000 	.word	0x40022000

080096ac <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80096b6:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <FLASH_PageErase+0x44>)
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	00db      	lsls	r3, r3, #3
 80096c2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80096c6:	490a      	ldr	r1, [pc, #40]	; (80096f0 <FLASH_PageErase+0x44>)
 80096c8:	4313      	orrs	r3, r2
 80096ca:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80096cc:	4b08      	ldr	r3, [pc, #32]	; (80096f0 <FLASH_PageErase+0x44>)
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	4a07      	ldr	r2, [pc, #28]	; (80096f0 <FLASH_PageErase+0x44>)
 80096d2:	f043 0302 	orr.w	r3, r3, #2
 80096d6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80096d8:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <FLASH_PageErase+0x44>)
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	4a04      	ldr	r2, [pc, #16]	; (80096f0 <FLASH_PageErase+0x44>)
 80096de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096e2:	6153      	str	r3, [r2, #20]
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	40022000 	.word	0x40022000

080096f4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80096fa:	4b21      	ldr	r3, [pc, #132]	; (8009780 <FLASH_FlushCaches+0x8c>)
 80096fc:	7f1b      	ldrb	r3, [r3, #28]
 80096fe:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d002      	beq.n	800970c <FLASH_FlushCaches+0x18>
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	2b03      	cmp	r3, #3
 800970a:	d117      	bne.n	800973c <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800970c:	4b1d      	ldr	r3, [pc, #116]	; (8009784 <FLASH_FlushCaches+0x90>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a1c      	ldr	r2, [pc, #112]	; (8009784 <FLASH_FlushCaches+0x90>)
 8009712:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009716:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009718:	4b1a      	ldr	r3, [pc, #104]	; (8009784 <FLASH_FlushCaches+0x90>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a19      	ldr	r2, [pc, #100]	; (8009784 <FLASH_FlushCaches+0x90>)
 800971e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	4b17      	ldr	r3, [pc, #92]	; (8009784 <FLASH_FlushCaches+0x90>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a16      	ldr	r2, [pc, #88]	; (8009784 <FLASH_FlushCaches+0x90>)
 800972a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800972e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009730:	4b14      	ldr	r3, [pc, #80]	; (8009784 <FLASH_FlushCaches+0x90>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a13      	ldr	r2, [pc, #76]	; (8009784 <FLASH_FlushCaches+0x90>)
 8009736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800973a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	2b02      	cmp	r3, #2
 8009740:	d002      	beq.n	8009748 <FLASH_FlushCaches+0x54>
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	2b03      	cmp	r3, #3
 8009746:	d111      	bne.n	800976c <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009748:	4b0e      	ldr	r3, [pc, #56]	; (8009784 <FLASH_FlushCaches+0x90>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a0d      	ldr	r2, [pc, #52]	; (8009784 <FLASH_FlushCaches+0x90>)
 800974e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009752:	6013      	str	r3, [r2, #0]
 8009754:	4b0b      	ldr	r3, [pc, #44]	; (8009784 <FLASH_FlushCaches+0x90>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a0a      	ldr	r2, [pc, #40]	; (8009784 <FLASH_FlushCaches+0x90>)
 800975a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800975e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009760:	4b08      	ldr	r3, [pc, #32]	; (8009784 <FLASH_FlushCaches+0x90>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a07      	ldr	r2, [pc, #28]	; (8009784 <FLASH_FlushCaches+0x90>)
 8009766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800976a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800976c:	4b04      	ldr	r3, [pc, #16]	; (8009780 <FLASH_FlushCaches+0x8c>)
 800976e:	2200      	movs	r2, #0
 8009770:	771a      	strb	r2, [r3, #28]
}
 8009772:	bf00      	nop
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	200001e0 	.word	0x200001e0
 8009784:	40022000 	.word	0x40022000

08009788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009792:	2300      	movs	r3, #0
 8009794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009796:	e15a      	b.n	8009a4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	2101      	movs	r1, #1
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	fa01 f303 	lsl.w	r3, r1, r3
 80097a4:	4013      	ands	r3, r2
 80097a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 814c 	beq.w	8009a48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f003 0303 	and.w	r3, r3, #3
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d005      	beq.n	80097c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d130      	bne.n	800982a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	005b      	lsls	r3, r3, #1
 80097d2:	2203      	movs	r2, #3
 80097d4:	fa02 f303 	lsl.w	r3, r2, r3
 80097d8:	43db      	mvns	r3, r3
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	4013      	ands	r3, r2
 80097de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	68da      	ldr	r2, [r3, #12]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	005b      	lsls	r3, r3, #1
 80097e8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80097fe:	2201      	movs	r2, #1
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	fa02 f303 	lsl.w	r3, r2, r3
 8009806:	43db      	mvns	r3, r3
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	4013      	ands	r3, r2
 800980c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	091b      	lsrs	r3, r3, #4
 8009814:	f003 0201 	and.w	r2, r3, #1
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	fa02 f303 	lsl.w	r3, r2, r3
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	4313      	orrs	r3, r2
 8009822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	2b03      	cmp	r3, #3
 8009834:	d017      	beq.n	8009866 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	005b      	lsls	r3, r3, #1
 8009840:	2203      	movs	r2, #3
 8009842:	fa02 f303 	lsl.w	r3, r2, r3
 8009846:	43db      	mvns	r3, r3
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	4013      	ands	r3, r2
 800984c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	fa02 f303 	lsl.w	r3, r2, r3
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	4313      	orrs	r3, r2
 800985e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f003 0303 	and.w	r3, r3, #3
 800986e:	2b02      	cmp	r3, #2
 8009870:	d123      	bne.n	80098ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	08da      	lsrs	r2, r3, #3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	3208      	adds	r2, #8
 800987a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	220f      	movs	r2, #15
 800988a:	fa02 f303 	lsl.w	r3, r2, r3
 800988e:	43db      	mvns	r3, r3
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	4013      	ands	r3, r2
 8009894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	691a      	ldr	r2, [r3, #16]
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f003 0307 	and.w	r3, r3, #7
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	fa02 f303 	lsl.w	r3, r2, r3
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	08da      	lsrs	r2, r3, #3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3208      	adds	r2, #8
 80098b4:	6939      	ldr	r1, [r7, #16]
 80098b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	2203      	movs	r2, #3
 80098c6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ca:	43db      	mvns	r3, r3
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	4013      	ands	r3, r2
 80098d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f003 0203 	and.w	r2, r3, #3
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	fa02 f303 	lsl.w	r3, r2, r3
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 80a6 	beq.w	8009a48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098fc:	4b5b      	ldr	r3, [pc, #364]	; (8009a6c <HAL_GPIO_Init+0x2e4>)
 80098fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009900:	4a5a      	ldr	r2, [pc, #360]	; (8009a6c <HAL_GPIO_Init+0x2e4>)
 8009902:	f043 0301 	orr.w	r3, r3, #1
 8009906:	6613      	str	r3, [r2, #96]	; 0x60
 8009908:	4b58      	ldr	r3, [pc, #352]	; (8009a6c <HAL_GPIO_Init+0x2e4>)
 800990a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	60bb      	str	r3, [r7, #8]
 8009912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009914:	4a56      	ldr	r2, [pc, #344]	; (8009a70 <HAL_GPIO_Init+0x2e8>)
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	089b      	lsrs	r3, r3, #2
 800991a:	3302      	adds	r3, #2
 800991c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f003 0303 	and.w	r3, r3, #3
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	220f      	movs	r2, #15
 800992c:	fa02 f303 	lsl.w	r3, r2, r3
 8009930:	43db      	mvns	r3, r3
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	4013      	ands	r3, r2
 8009936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800993e:	d01f      	beq.n	8009980 <HAL_GPIO_Init+0x1f8>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a4c      	ldr	r2, [pc, #304]	; (8009a74 <HAL_GPIO_Init+0x2ec>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d019      	beq.n	800997c <HAL_GPIO_Init+0x1f4>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a4b      	ldr	r2, [pc, #300]	; (8009a78 <HAL_GPIO_Init+0x2f0>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d013      	beq.n	8009978 <HAL_GPIO_Init+0x1f0>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a4a      	ldr	r2, [pc, #296]	; (8009a7c <HAL_GPIO_Init+0x2f4>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d00d      	beq.n	8009974 <HAL_GPIO_Init+0x1ec>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a49      	ldr	r2, [pc, #292]	; (8009a80 <HAL_GPIO_Init+0x2f8>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d007      	beq.n	8009970 <HAL_GPIO_Init+0x1e8>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a48      	ldr	r2, [pc, #288]	; (8009a84 <HAL_GPIO_Init+0x2fc>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d101      	bne.n	800996c <HAL_GPIO_Init+0x1e4>
 8009968:	2305      	movs	r3, #5
 800996a:	e00a      	b.n	8009982 <HAL_GPIO_Init+0x1fa>
 800996c:	2306      	movs	r3, #6
 800996e:	e008      	b.n	8009982 <HAL_GPIO_Init+0x1fa>
 8009970:	2304      	movs	r3, #4
 8009972:	e006      	b.n	8009982 <HAL_GPIO_Init+0x1fa>
 8009974:	2303      	movs	r3, #3
 8009976:	e004      	b.n	8009982 <HAL_GPIO_Init+0x1fa>
 8009978:	2302      	movs	r3, #2
 800997a:	e002      	b.n	8009982 <HAL_GPIO_Init+0x1fa>
 800997c:	2301      	movs	r3, #1
 800997e:	e000      	b.n	8009982 <HAL_GPIO_Init+0x1fa>
 8009980:	2300      	movs	r3, #0
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	f002 0203 	and.w	r2, r2, #3
 8009988:	0092      	lsls	r2, r2, #2
 800998a:	4093      	lsls	r3, r2
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	4313      	orrs	r3, r2
 8009990:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009992:	4937      	ldr	r1, [pc, #220]	; (8009a70 <HAL_GPIO_Init+0x2e8>)
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	089b      	lsrs	r3, r3, #2
 8009998:	3302      	adds	r3, #2
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80099a0:	4b39      	ldr	r3, [pc, #228]	; (8009a88 <HAL_GPIO_Init+0x300>)
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	43db      	mvns	r3, r3
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	4013      	ands	r3, r2
 80099ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d003      	beq.n	80099c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80099c4:	4a30      	ldr	r2, [pc, #192]	; (8009a88 <HAL_GPIO_Init+0x300>)
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80099ca:	4b2f      	ldr	r3, [pc, #188]	; (8009a88 <HAL_GPIO_Init+0x300>)
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	43db      	mvns	r3, r3
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	4013      	ands	r3, r2
 80099d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d003      	beq.n	80099ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80099ee:	4a26      	ldr	r2, [pc, #152]	; (8009a88 <HAL_GPIO_Init+0x300>)
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80099f4:	4b24      	ldr	r3, [pc, #144]	; (8009a88 <HAL_GPIO_Init+0x300>)
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	43db      	mvns	r3, r3
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	4013      	ands	r3, r2
 8009a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d003      	beq.n	8009a18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009a18:	4a1b      	ldr	r2, [pc, #108]	; (8009a88 <HAL_GPIO_Init+0x300>)
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009a1e:	4b1a      	ldr	r3, [pc, #104]	; (8009a88 <HAL_GPIO_Init+0x300>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	43db      	mvns	r3, r3
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009a42:	4a11      	ldr	r2, [pc, #68]	; (8009a88 <HAL_GPIO_Init+0x300>)
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	fa22 f303 	lsr.w	r3, r2, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f47f ae9d 	bne.w	8009798 <HAL_GPIO_Init+0x10>
  }
}
 8009a5e:	bf00      	nop
 8009a60:	bf00      	nop
 8009a62:	371c      	adds	r7, #28
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	40021000 	.word	0x40021000
 8009a70:	40010000 	.word	0x40010000
 8009a74:	48000400 	.word	0x48000400
 8009a78:	48000800 	.word	0x48000800
 8009a7c:	48000c00 	.word	0x48000c00
 8009a80:	48001000 	.word	0x48001000
 8009a84:	48001400 	.word	0x48001400
 8009a88:	40010400 	.word	0x40010400

08009a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	460b      	mov	r3, r1
 8009a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	691a      	ldr	r2, [r3, #16]
 8009a9c:	887b      	ldrh	r3, [r7, #2]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	73fb      	strb	r3, [r7, #15]
 8009aa8:	e001      	b.n	8009aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	807b      	strh	r3, [r7, #2]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009acc:	787b      	ldrb	r3, [r7, #1]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009ad2:	887a      	ldrh	r2, [r7, #2]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009ad8:	e002      	b.n	8009ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009ada:	887a      	ldrh	r2, [r7, #2]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009af6:	4b08      	ldr	r3, [pc, #32]	; (8009b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009af8:	695a      	ldr	r2, [r3, #20]
 8009afa:	88fb      	ldrh	r3, [r7, #6]
 8009afc:	4013      	ands	r3, r2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d006      	beq.n	8009b10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009b02:	4a05      	ldr	r2, [pc, #20]	; (8009b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009b04:	88fb      	ldrh	r3, [r7, #6]
 8009b06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009b08:	88fb      	ldrh	r3, [r7, #6]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7f9 fa78 	bl	8003000 <HAL_GPIO_EXTI_Callback>
  }
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	40010400 	.word	0x40010400

08009b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d101      	bne.n	8009b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e08d      	b.n	8009c4a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d106      	bne.n	8009b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7fb f976 	bl	8004e34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2224      	movs	r2, #36	; 0x24
 8009b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f022 0201 	bic.w	r2, r2, #1
 8009b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689a      	ldr	r2, [r3, #8]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d107      	bne.n	8009b96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	689a      	ldr	r2, [r3, #8]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b92:	609a      	str	r2, [r3, #8]
 8009b94:	e006      	b.n	8009ba4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	689a      	ldr	r2, [r3, #8]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009ba2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d108      	bne.n	8009bbe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bba:	605a      	str	r2, [r3, #4]
 8009bbc:	e007      	b.n	8009bce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	6812      	ldr	r2, [r2, #0]
 8009bd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009be0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009bf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691a      	ldr	r2, [r3, #16]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	69d9      	ldr	r1, [r3, #28]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a1a      	ldr	r2, [r3, #32]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	430a      	orrs	r2, r1
 8009c1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f042 0201 	orr.w	r2, r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2220      	movs	r2, #32
 8009c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b20      	cmp	r3, #32
 8009c66:	d138      	bne.n	8009cda <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d101      	bne.n	8009c76 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c72:	2302      	movs	r3, #2
 8009c74:	e032      	b.n	8009cdc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2224      	movs	r2, #36	; 0x24
 8009c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f022 0201 	bic.w	r2, r2, #1
 8009c94:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ca4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6819      	ldr	r1, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f042 0201 	orr.w	r2, r2, #1
 8009cc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e000      	b.n	8009cdc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009cda:	2302      	movs	r3, #2
  }
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b20      	cmp	r3, #32
 8009cfc:	d139      	bne.n	8009d72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d101      	bne.n	8009d0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d08:	2302      	movs	r3, #2
 8009d0a:	e033      	b.n	8009d74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2224      	movs	r2, #36	; 0x24
 8009d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f022 0201 	bic.w	r2, r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	021b      	lsls	r3, r3, #8
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f042 0201 	orr.w	r2, r2, #1
 8009d5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2220      	movs	r2, #32
 8009d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e000      	b.n	8009d74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d72:	2302      	movs	r3, #2
  }
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e0c0      	b.n	8009f14 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d106      	bne.n	8009dac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f00b fec8 	bl	8015b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2203      	movs	r2, #3
 8009db0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f005 fe1e 	bl	800f9fa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]
 8009dc2:	e03e      	b.n	8009e42 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009dc4:	7bfa      	ldrb	r2, [r7, #15]
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	00db      	lsls	r3, r3, #3
 8009dd0:	440b      	add	r3, r1
 8009dd2:	3311      	adds	r3, #17
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009dd8:	7bfa      	ldrb	r2, [r7, #15]
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	00db      	lsls	r3, r3, #3
 8009de4:	440b      	add	r3, r1
 8009de6:	3310      	adds	r3, #16
 8009de8:	7bfa      	ldrb	r2, [r7, #15]
 8009dea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009dec:	7bfa      	ldrb	r2, [r7, #15]
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	4613      	mov	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	00db      	lsls	r3, r3, #3
 8009df8:	440b      	add	r3, r1
 8009dfa:	3313      	adds	r3, #19
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009e00:	7bfa      	ldrb	r2, [r7, #15]
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	440b      	add	r3, r1
 8009e0e:	3320      	adds	r3, #32
 8009e10:	2200      	movs	r2, #0
 8009e12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009e14:	7bfa      	ldrb	r2, [r7, #15]
 8009e16:	6879      	ldr	r1, [r7, #4]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4413      	add	r3, r2
 8009e1e:	00db      	lsls	r3, r3, #3
 8009e20:	440b      	add	r3, r1
 8009e22:	3324      	adds	r3, #36	; 0x24
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
 8009e2a:	6879      	ldr	r1, [r7, #4]
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	440b      	add	r3, r1
 8009e38:	2200      	movs	r2, #0
 8009e3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	73fb      	strb	r3, [r7, #15]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	791b      	ldrb	r3, [r3, #4]
 8009e46:	7bfa      	ldrb	r2, [r7, #15]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d3bb      	bcc.n	8009dc4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	73fb      	strb	r3, [r7, #15]
 8009e50:	e044      	b.n	8009edc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009e52:	7bfa      	ldrb	r2, [r7, #15]
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	00db      	lsls	r3, r3, #3
 8009e5e:	440b      	add	r3, r1
 8009e60:	f203 1351 	addw	r3, r3, #337	; 0x151
 8009e64:	2200      	movs	r2, #0
 8009e66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009e68:	7bfa      	ldrb	r2, [r7, #15]
 8009e6a:	6879      	ldr	r1, [r7, #4]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	00db      	lsls	r3, r3, #3
 8009e74:	440b      	add	r3, r1
 8009e76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e7a:	7bfa      	ldrb	r2, [r7, #15]
 8009e7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009e7e:	7bfa      	ldrb	r2, [r7, #15]
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	00db      	lsls	r3, r3, #3
 8009e8a:	440b      	add	r3, r1
 8009e8c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8009e90:	2200      	movs	r2, #0
 8009e92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009e94:	7bfa      	ldrb	r2, [r7, #15]
 8009e96:	6879      	ldr	r1, [r7, #4]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	00db      	lsls	r3, r3, #3
 8009ea0:	440b      	add	r3, r1
 8009ea2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009eaa:	7bfa      	ldrb	r2, [r7, #15]
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	440b      	add	r3, r1
 8009eb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009ec0:	7bfa      	ldrb	r2, [r7, #15]
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	00db      	lsls	r3, r3, #3
 8009ecc:	440b      	add	r3, r1
 8009ece:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	73fb      	strb	r3, [r7, #15]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	791b      	ldrb	r3, [r3, #4]
 8009ee0:	7bfa      	ldrb	r2, [r7, #15]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d3b5      	bcc.n	8009e52 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3304      	adds	r3, #4
 8009eee:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009ef2:	f005 fd9d 	bl	800fa30 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	7a9b      	ldrb	r3, [r3, #10]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d102      	bne.n	8009f12 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 fc41 	bl	800b794 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d101      	bne.n	8009f32 <HAL_PCD_Start+0x16>
 8009f2e:	2302      	movs	r3, #2
 8009f30:	e012      	b.n	8009f58 <HAL_PCD_Start+0x3c>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f005 fd44 	bl	800f9cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f008 f804 	bl	8011f56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f008 f809 	bl	8011f84 <USB_ReadInterrupts>
 8009f72:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fb04 	bl	800a58c <PCD_EP_ISR_Handler>

    return;
 8009f84:	e110      	b.n	800a1a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d013      	beq.n	8009fb8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fa2:	b292      	uxth	r2, r2
 8009fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f00b fe58 	bl	8015c5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009fae:	2100      	movs	r1, #0
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f8fc 	bl	800a1ae <HAL_PCD_SetAddress>

    return;
 8009fb6:	e0f7      	b.n	800a1a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00c      	beq.n	8009fdc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009fd4:	b292      	uxth	r2, r2
 8009fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009fda:	e0e5      	b.n	800a1a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00c      	beq.n	800a000 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ff8:	b292      	uxth	r2, r2
 8009ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009ffe:	e0d3      	b.n	800a1a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d034      	beq.n	800a074 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a012:	b29a      	uxth	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0204 	bic.w	r2, r2, #4
 800a01c:	b292      	uxth	r2, r2
 800a01e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f022 0208 	bic.w	r2, r2, #8
 800a034:	b292      	uxth	r2, r2
 800a036:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800a040:	2b01      	cmp	r3, #1
 800a042:	d107      	bne.n	800a054 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a04c:	2100      	movs	r1, #0
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f00b fff8 	bl	8016044 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f00b fe3b 	bl	8015cd0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a062:	b29a      	uxth	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a06c:	b292      	uxth	r2, r2
 800a06e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a072:	e099      	b.n	800a1a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d027      	beq.n	800a0ce <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a086:	b29a      	uxth	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f042 0208 	orr.w	r2, r2, #8
 800a090:	b292      	uxth	r2, r2
 800a092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0a8:	b292      	uxth	r2, r2
 800a0aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f042 0204 	orr.w	r2, r2, #4
 800a0c0:	b292      	uxth	r2, r2
 800a0c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f00b fde8 	bl	8015c9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a0cc:	e06c      	b.n	800a1a8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d040      	beq.n	800a15a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0ea:	b292      	uxth	r2, r2
 800a0ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d12b      	bne.n	800a152 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a102:	b29a      	uxth	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f042 0204 	orr.w	r2, r2, #4
 800a10c:	b292      	uxth	r2, r2
 800a10e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f042 0208 	orr.w	r2, r2, #8
 800a124:	b292      	uxth	r2, r2
 800a126:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	089b      	lsrs	r3, r3, #2
 800a13e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a148:	2101      	movs	r1, #1
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f00b ff7a 	bl	8016044 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a150:	e02a      	b.n	800a1a8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f00b fda2 	bl	8015c9c <HAL_PCD_SuspendCallback>
    return;
 800a158:	e026      	b.n	800a1a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00f      	beq.n	800a184 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a176:	b292      	uxth	r2, r2
 800a178:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f00b fd60 	bl	8015c42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a182:	e011      	b.n	800a1a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00c      	beq.n	800a1a8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a196:	b29a      	uxth	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1a0:	b292      	uxth	r2, r2
 800a1a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a1a6:	bf00      	nop
  }
}
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d101      	bne.n	800a1c8 <HAL_PCD_SetAddress+0x1a>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e012      	b.n	800a1ee <HAL_PCD_SetAddress+0x40>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	78fa      	ldrb	r2, [r7, #3]
 800a1d4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	78fa      	ldrb	r2, [r7, #3]
 800a1dc:	4611      	mov	r1, r2
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f007 fea5 	bl	8011f2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	4608      	mov	r0, r1
 800a200:	4611      	mov	r1, r2
 800a202:	461a      	mov	r2, r3
 800a204:	4603      	mov	r3, r0
 800a206:	70fb      	strb	r3, [r7, #3]
 800a208:	460b      	mov	r3, r1
 800a20a:	803b      	strh	r3, [r7, #0]
 800a20c:	4613      	mov	r3, r2
 800a20e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	da0e      	bge.n	800a23a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	f003 0207 	and.w	r2, r3, #7
 800a222:	4613      	mov	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	00db      	lsls	r3, r3, #3
 800a22a:	3310      	adds	r3, #16
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	4413      	add	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2201      	movs	r2, #1
 800a236:	705a      	strb	r2, [r3, #1]
 800a238:	e00e      	b.n	800a258 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a23a:	78fb      	ldrb	r3, [r7, #3]
 800a23c:	f003 0207 	and.w	r2, r3, #7
 800a240:	4613      	mov	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	4413      	add	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a258:	78fb      	ldrb	r3, [r7, #3]
 800a25a:	f003 0307 	and.w	r3, r3, #7
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a264:	883a      	ldrh	r2, [r7, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	78ba      	ldrb	r2, [r7, #2]
 800a26e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a270:	78bb      	ldrb	r3, [r7, #2]
 800a272:	2b02      	cmp	r3, #2
 800a274:	d102      	bne.n	800a27c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a282:	2b01      	cmp	r3, #1
 800a284:	d101      	bne.n	800a28a <HAL_PCD_EP_Open+0x94>
 800a286:	2302      	movs	r3, #2
 800a288:	e00e      	b.n	800a2a8 <HAL_PCD_EP_Open+0xb2>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68f9      	ldr	r1, [r7, #12]
 800a298:	4618      	mov	r0, r3
 800a29a:	f005 fbe7 	bl	800fa6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800a2a6:	7afb      	ldrb	r3, [r7, #11]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a2bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	da0e      	bge.n	800a2e2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2c4:	78fb      	ldrb	r3, [r7, #3]
 800a2c6:	f003 0207 	and.w	r2, r3, #7
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	00db      	lsls	r3, r3, #3
 800a2d2:	3310      	adds	r3, #16
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	705a      	strb	r2, [r3, #1]
 800a2e0:	e00e      	b.n	800a300 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2e2:	78fb      	ldrb	r3, [r7, #3]
 800a2e4:	f003 0207 	and.w	r2, r3, #7
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	00db      	lsls	r3, r3, #3
 800a2f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	f003 0307 	and.w	r3, r3, #7
 800a306:	b2da      	uxtb	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a312:	2b01      	cmp	r3, #1
 800a314:	d101      	bne.n	800a31a <HAL_PCD_EP_Close+0x6a>
 800a316:	2302      	movs	r3, #2
 800a318:	e00e      	b.n	800a338 <HAL_PCD_EP_Close+0x88>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68f9      	ldr	r1, [r7, #12]
 800a328:	4618      	mov	r0, r3
 800a32a:	f005 ff63 	bl	80101f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	607a      	str	r2, [r7, #4]
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	460b      	mov	r3, r1
 800a34e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a350:	7afb      	ldrb	r3, [r7, #11]
 800a352:	f003 0207 	and.w	r2, r3, #7
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	00db      	lsls	r3, r3, #3
 800a35e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	4413      	add	r3, r2
 800a366:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	2200      	movs	r2, #0
 800a378:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	2200      	movs	r2, #0
 800a37e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a380:	7afb      	ldrb	r3, [r7, #11]
 800a382:	f003 0307 	and.w	r3, r3, #7
 800a386:	b2da      	uxtb	r2, r3
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6979      	ldr	r1, [r7, #20]
 800a392:	4618      	mov	r0, r3
 800a394:	f006 f91b 	bl	80105ce <USB_EPStartXfer>

  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a3ae:	78fb      	ldrb	r3, [r7, #3]
 800a3b0:	f003 0207 	and.w	r2, r3, #7
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	00db      	lsls	r3, r3, #3
 800a3be:	440b      	add	r3, r1
 800a3c0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800a3c4:	681b      	ldr	r3, [r3, #0]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b086      	sub	sp, #24
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	603b      	str	r3, [r7, #0]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3e2:	7afb      	ldrb	r3, [r7, #11]
 800a3e4:	f003 0207 	and.w	r2, r3, #7
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	00db      	lsls	r3, r3, #3
 800a3f0:	3310      	adds	r3, #16
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2200      	movs	r2, #0
 800a416:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2201      	movs	r2, #1
 800a41c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a41e:	7afb      	ldrb	r3, [r7, #11]
 800a420:	f003 0307 	and.w	r3, r3, #7
 800a424:	b2da      	uxtb	r2, r3
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6979      	ldr	r1, [r7, #20]
 800a430:	4618      	mov	r0, r3
 800a432:	f006 f8cc 	bl	80105ce <USB_EPStartXfer>

  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a44c:	78fb      	ldrb	r3, [r7, #3]
 800a44e:	f003 0307 	and.w	r3, r3, #7
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	7912      	ldrb	r2, [r2, #4]
 800a456:	4293      	cmp	r3, r2
 800a458:	d901      	bls.n	800a45e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e03e      	b.n	800a4dc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a45e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a462:	2b00      	cmp	r3, #0
 800a464:	da0e      	bge.n	800a484 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a466:	78fb      	ldrb	r3, [r7, #3]
 800a468:	f003 0207 	and.w	r2, r3, #7
 800a46c:	4613      	mov	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	3310      	adds	r3, #16
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	4413      	add	r3, r2
 800a47a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2201      	movs	r2, #1
 800a480:	705a      	strb	r2, [r3, #1]
 800a482:	e00c      	b.n	800a49e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a484:	78fa      	ldrb	r2, [r7, #3]
 800a486:	4613      	mov	r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	4413      	add	r3, r2
 800a48c:	00db      	lsls	r3, r3, #3
 800a48e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	4413      	add	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4a4:	78fb      	ldrb	r3, [r7, #3]
 800a4a6:	f003 0307 	and.w	r3, r3, #7
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d101      	bne.n	800a4be <HAL_PCD_EP_SetStall+0x7e>
 800a4ba:	2302      	movs	r3, #2
 800a4bc:	e00e      	b.n	800a4dc <HAL_PCD_EP_SetStall+0x9c>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68f9      	ldr	r1, [r7, #12]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f007 fc2f 	bl	8011d30 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a4f0:	78fb      	ldrb	r3, [r7, #3]
 800a4f2:	f003 030f 	and.w	r3, r3, #15
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	7912      	ldrb	r2, [r2, #4]
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d901      	bls.n	800a502 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e040      	b.n	800a584 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a506:	2b00      	cmp	r3, #0
 800a508:	da0e      	bge.n	800a528 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a50a:	78fb      	ldrb	r3, [r7, #3]
 800a50c:	f003 0207 	and.w	r2, r3, #7
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	3310      	adds	r3, #16
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	4413      	add	r3, r2
 800a51e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2201      	movs	r2, #1
 800a524:	705a      	strb	r2, [r3, #1]
 800a526:	e00e      	b.n	800a546 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	f003 0207 	and.w	r2, r3, #7
 800a52e:	4613      	mov	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	00db      	lsls	r3, r3, #3
 800a536:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	4413      	add	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	b2da      	uxtb	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d101      	bne.n	800a566 <HAL_PCD_EP_ClrStall+0x82>
 800a562:	2302      	movs	r3, #2
 800a564:	e00e      	b.n	800a584 <HAL_PCD_EP_ClrStall+0xa0>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	4618      	mov	r0, r3
 800a576:	f007 fc2c 	bl	8011dd2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b096      	sub	sp, #88	; 0x58
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a594:	e3ae      	b.n	800acf4 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a59e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a5a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	f003 030f 	and.w	r3, r3, #15
 800a5ac:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800a5b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f040 8170 	bne.w	800a89a <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a5ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a5be:	f003 0310 	and.w	r3, r3, #16
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d14d      	bne.n	800a662 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d6:	81fb      	strh	r3, [r7, #14]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	89fb      	ldrh	r3, [r7, #14]
 800a5de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	3310      	adds	r3, #16
 800a5ee:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	00db      	lsls	r3, r3, #3
 800a602:	4413      	add	r3, r2
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	6812      	ldr	r2, [r2, #0]
 800a608:	4413      	add	r3, r2
 800a60a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a616:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a61a:	695a      	ldr	r2, [r3, #20]
 800a61c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	441a      	add	r2, r3
 800a622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a624:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a626:	2100      	movs	r1, #0
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f00b faf0 	bl	8015c0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	7b1b      	ldrb	r3, [r3, #12]
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 835d 	beq.w	800acf4 <PCD_EP_ISR_Handler+0x768>
 800a63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f040 8358 	bne.w	800acf4 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	7b1b      	ldrb	r3, [r3, #12]
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	b292      	uxth	r2, r2
 800a656:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	731a      	strb	r2, [r3, #12]
 800a660:	e348      	b.n	800acf4 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a668:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a674:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d032      	beq.n	800a6e6 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a688:	b29b      	uxth	r3, r3
 800a68a:	461a      	mov	r2, r3
 800a68c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	4413      	add	r3, r2
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	6812      	ldr	r2, [r2, #0]
 800a698:	4413      	add	r3, r2
 800a69a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a69e:	881b      	ldrh	r3, [r3, #0]
 800a6a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a6a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6a6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6818      	ldr	r0, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800a6b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a6b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	f007 fcb4 	bl	8012028 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	823b      	strh	r3, [r7, #16]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	8a3a      	ldrh	r2, [r7, #16]
 800a6d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6da:	b292      	uxth	r2, r2
 800a6dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f00b fa68 	bl	8015bb4 <HAL_PCD_SetupStageCallback>
 800a6e4:	e306      	b.n	800acf4 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a6e6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f280 8302 	bge.w	800acf4 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	881b      	ldrh	r3, [r3, #0]
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	83fb      	strh	r3, [r7, #30]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	8bfa      	ldrh	r2, [r7, #30]
 800a706:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a70a:	b292      	uxth	r2, r2
 800a70c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a716:	b29b      	uxth	r3, r3
 800a718:	461a      	mov	r2, r3
 800a71a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	00db      	lsls	r3, r3, #3
 800a720:	4413      	add	r3, r2
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	6812      	ldr	r2, [r2, #0]
 800a726:	4413      	add	r3, r2
 800a728:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a734:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d019      	beq.n	800a772 <PCD_EP_ISR_Handler+0x1e6>
 800a73e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d015      	beq.n	800a772 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a74c:	6959      	ldr	r1, [r3, #20]
 800a74e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a750:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a754:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a756:	b29b      	uxth	r3, r3
 800a758:	f007 fc66 	bl	8012028 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a75c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a75e:	695a      	ldr	r2, [r3, #20]
 800a760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a762:	69db      	ldr	r3, [r3, #28]
 800a764:	441a      	add	r2, r3
 800a766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a768:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a76a:	2100      	movs	r1, #0
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f00b fa33 	bl	8015bd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a77c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a784:	2b00      	cmp	r3, #0
 800a786:	f040 82b5 	bne.w	800acf4 <PCD_EP_ISR_Handler+0x768>
 800a78a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a78e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a792:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a796:	f000 82ad 	beq.w	800acf4 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	61bb      	str	r3, [r7, #24]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	61bb      	str	r3, [r7, #24]
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7b8:	617b      	str	r3, [r7, #20]
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	801a      	strh	r2, [r3, #0]
 800a7ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	2b3e      	cmp	r3, #62	; 0x3e
 800a7d0:	d91d      	bls.n	800a80e <PCD_EP_ISR_Handler+0x282>
 800a7d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	095b      	lsrs	r3, r3, #5
 800a7d8:	647b      	str	r3, [r7, #68]	; 0x44
 800a7da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	f003 031f 	and.w	r3, r3, #31
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d102      	bne.n	800a7ec <PCD_EP_ISR_Handler+0x260>
 800a7e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	029b      	lsls	r3, r3, #10
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a806:	b29a      	uxth	r2, r3
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	801a      	strh	r2, [r3, #0]
 800a80c:	e026      	b.n	800a85c <PCD_EP_ISR_Handler+0x2d0>
 800a80e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10a      	bne.n	800a82c <PCD_EP_ISR_Handler+0x2a0>
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	881b      	ldrh	r3, [r3, #0]
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a824:	b29a      	uxth	r2, r3
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	801a      	strh	r2, [r3, #0]
 800a82a:	e017      	b.n	800a85c <PCD_EP_ISR_Handler+0x2d0>
 800a82c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	085b      	lsrs	r3, r3, #1
 800a832:	647b      	str	r3, [r7, #68]	; 0x44
 800a834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <PCD_EP_ISR_Handler+0x2ba>
 800a840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a842:	3301      	adds	r3, #1
 800a844:	647b      	str	r3, [r7, #68]	; 0x44
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a84e:	b29b      	uxth	r3, r3
 800a850:	029b      	lsls	r3, r3, #10
 800a852:	b29b      	uxth	r3, r3
 800a854:	4313      	orrs	r3, r2
 800a856:	b29a      	uxth	r2, r3
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	b29b      	uxth	r3, r3
 800a864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a86c:	827b      	strh	r3, [r7, #18]
 800a86e:	8a7b      	ldrh	r3, [r7, #18]
 800a870:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a874:	827b      	strh	r3, [r7, #18]
 800a876:	8a7b      	ldrh	r3, [r7, #18]
 800a878:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a87c:	827b      	strh	r3, [r7, #18]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	8a7b      	ldrh	r3, [r7, #18]
 800a884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a88c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a894:	b29b      	uxth	r3, r3
 800a896:	8013      	strh	r3, [r2, #0]
 800a898:	e22c      	b.n	800acf4 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a8ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f280 80f6 	bge.w	800aaa4 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a8e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a8ea:	b292      	uxth	r2, r2
 800a8ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a8ee:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	4413      	add	r3, r2
 800a902:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a906:	7b1b      	ldrb	r3, [r3, #12]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d123      	bne.n	800a954 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a914:	b29b      	uxth	r3, r3
 800a916:	461a      	mov	r2, r3
 800a918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	00db      	lsls	r3, r3, #3
 800a91e:	4413      	add	r3, r2
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	6812      	ldr	r2, [r2, #0]
 800a924:	4413      	add	r3, r2
 800a926:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a930:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800a934:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f000 808e 	beq.w	800aa5a <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6818      	ldr	r0, [r3, #0]
 800a942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a944:	6959      	ldr	r1, [r3, #20]
 800a946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a948:	88da      	ldrh	r2, [r3, #6]
 800a94a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a94e:	f007 fb6b 	bl	8012028 <USB_ReadPMA>
 800a952:	e082      	b.n	800aa5a <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a956:	78db      	ldrb	r3, [r3, #3]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d10a      	bne.n	800a972 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a95c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a960:	461a      	mov	r2, r3
 800a962:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f9d3 	bl	800ad10 <HAL_PCD_EP_DB_Receive>
 800a96a:	4603      	mov	r3, r0
 800a96c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a970:	e073      	b.n	800aa5a <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	461a      	mov	r2, r3
 800a978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	b29b      	uxth	r3, r3
 800a984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a98c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	461a      	mov	r2, r3
 800a996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	441a      	add	r2, r3
 800a99e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a9a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4413      	add	r3, r2
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d022      	beq.n	800aa16 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	461a      	mov	r2, r3
 800a9dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	00db      	lsls	r3, r3, #3
 800a9e2:	4413      	add	r3, r2
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	6812      	ldr	r2, [r2, #0]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9ee:	881b      	ldrh	r3, [r3, #0]
 800a9f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9f4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a9f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d02c      	beq.n	800aa5a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6818      	ldr	r0, [r3, #0]
 800aa04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa06:	6959      	ldr	r1, [r3, #20]
 800aa08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa0a:	891a      	ldrh	r2, [r3, #8]
 800aa0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa10:	f007 fb0a 	bl	8012028 <USB_ReadPMA>
 800aa14:	e021      	b.n	800aa5a <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	461a      	mov	r2, r3
 800aa22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	4413      	add	r3, r2
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	6812      	ldr	r2, [r2, #0]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa34:	881b      	ldrh	r3, [r3, #0]
 800aa36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800aa3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d009      	beq.n	800aa5a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6818      	ldr	r0, [r3, #0]
 800aa4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa4c:	6959      	ldr	r1, [r3, #20]
 800aa4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa50:	895a      	ldrh	r2, [r3, #10]
 800aa52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa56:	f007 fae7 	bl	8012028 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800aa5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa5c:	69da      	ldr	r2, [r3, #28]
 800aa5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa62:	441a      	add	r2, r3
 800aa64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800aa68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa6a:	695a      	ldr	r2, [r3, #20]
 800aa6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800aa70:	441a      	add	r2, r3
 800aa72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa74:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800aa76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d005      	beq.n	800aa8a <PCD_EP_ISR_Handler+0x4fe>
 800aa7e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800aa82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d206      	bcs.n	800aa98 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800aa8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f00b f8a1 	bl	8015bd8 <HAL_PCD_DataOutStageCallback>
 800aa96:	e005      	b.n	800aaa4 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f005 fd95 	bl	80105ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800aaa4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800aaa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f000 8121 	beq.w	800acf4 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800aab2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800aab6:	4613      	mov	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	3310      	adds	r3, #16
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	4413      	add	r3, r2
 800aac4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	881b      	ldrh	r3, [r3, #0]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800aadc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aae0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	461a      	mov	r2, r3
 800aaea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	441a      	add	r2, r3
 800aaf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aaf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aafa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ab02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab04:	78db      	ldrb	r3, [r3, #3]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	f040 80a2 	bne.w	800ac50 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800ab0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab0e:	2200      	movs	r2, #0
 800ab10:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ab12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab14:	7b1b      	ldrb	r3, [r3, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 8093 	beq.w	800ac42 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ab1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ab20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d046      	beq.n	800abb6 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ab28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab2a:	785b      	ldrb	r3, [r3, #1]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d126      	bne.n	800ab7e <PCD_EP_ISR_Handler+0x5f2>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	627b      	str	r3, [r7, #36]	; 0x24
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	461a      	mov	r2, r3
 800ab42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab44:	4413      	add	r3, r2
 800ab46:	627b      	str	r3, [r7, #36]	; 0x24
 800ab48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	00da      	lsls	r2, r3, #3
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	4413      	add	r3, r2
 800ab52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab56:	623b      	str	r3, [r7, #32]
 800ab58:	6a3b      	ldr	r3, [r7, #32]
 800ab5a:	881b      	ldrh	r3, [r3, #0]
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	801a      	strh	r2, [r3, #0]
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	6a3b      	ldr	r3, [r7, #32]
 800ab7a:	801a      	strh	r2, [r3, #0]
 800ab7c:	e061      	b.n	800ac42 <PCD_EP_ISR_Handler+0x6b6>
 800ab7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d15d      	bne.n	800ac42 <PCD_EP_ISR_Handler+0x6b6>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	461a      	mov	r2, r3
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	4413      	add	r3, r2
 800ab9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	00da      	lsls	r2, r3, #3
 800aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba6:	4413      	add	r3, r2
 800aba8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800abac:	62bb      	str	r3, [r7, #40]	; 0x28
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	2200      	movs	r2, #0
 800abb2:	801a      	strh	r2, [r3, #0]
 800abb4:	e045      	b.n	800ac42 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abbe:	785b      	ldrb	r3, [r3, #1]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d126      	bne.n	800ac12 <PCD_EP_ISR_Handler+0x686>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	637b      	str	r3, [r7, #52]	; 0x34
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	461a      	mov	r2, r3
 800abd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd8:	4413      	add	r3, r2
 800abda:	637b      	str	r3, [r7, #52]	; 0x34
 800abdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	00da      	lsls	r2, r3, #3
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	4413      	add	r3, r2
 800abe6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abea:	633b      	str	r3, [r7, #48]	; 0x30
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	801a      	strh	r2, [r3, #0]
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	801a      	strh	r2, [r3, #0]
 800ac10:	e017      	b.n	800ac42 <PCD_EP_ISR_Handler+0x6b6>
 800ac12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac14:	785b      	ldrb	r3, [r3, #1]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d113      	bne.n	800ac42 <PCD_EP_ISR_Handler+0x6b6>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	461a      	mov	r2, r3
 800ac26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac28:	4413      	add	r3, r2
 800ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	00da      	lsls	r2, r3, #3
 800ac32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac34:	4413      	add	r3, r2
 800ac36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3e:	2200      	movs	r2, #0
 800ac40:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ac42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	4619      	mov	r1, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f00a ffe0 	bl	8015c0e <HAL_PCD_DataInStageCallback>
 800ac4e:	e051      	b.n	800acf4 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ac50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ac54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d144      	bne.n	800ace6 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	461a      	mov	r2, r3
 800ac68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	00db      	lsls	r3, r3, #3
 800ac6e:	4413      	add	r3, r2
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	6812      	ldr	r2, [r2, #0]
 800ac74:	4413      	add	r3, r2
 800ac76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac7a:	881b      	ldrh	r3, [r3, #0]
 800ac7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac80:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800ac84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac86:	699a      	ldr	r2, [r3, #24]
 800ac88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d907      	bls.n	800aca0 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800ac90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac92:	699a      	ldr	r2, [r3, #24]
 800ac94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac98:	1ad2      	subs	r2, r2, r3
 800ac9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac9c:	619a      	str	r2, [r3, #24]
 800ac9e:	e002      	b.n	800aca6 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800aca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aca2:	2200      	movs	r2, #0
 800aca4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800aca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d106      	bne.n	800acbc <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800acae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	4619      	mov	r1, r3
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f00a ffaa 	bl	8015c0e <HAL_PCD_DataInStageCallback>
 800acba:	e01b      	b.n	800acf4 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800acbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acbe:	695a      	ldr	r2, [r3, #20]
 800acc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800acc4:	441a      	add	r2, r3
 800acc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acc8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800acca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800accc:	69da      	ldr	r2, [r3, #28]
 800acce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800acd2:	441a      	add	r2, r3
 800acd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acd6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acde:	4618      	mov	r0, r3
 800ace0:	f005 fc75 	bl	80105ce <USB_EPStartXfer>
 800ace4:	e006      	b.n	800acf4 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ace6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800acea:	461a      	mov	r2, r3
 800acec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f917 	bl	800af22 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	b21b      	sxth	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f6ff ac48 	blt.w	800a596 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3758      	adds	r7, #88	; 0x58
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b088      	sub	sp, #32
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ad1e:	88fb      	ldrh	r3, [r7, #6]
 800ad20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d07c      	beq.n	800ae22 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	461a      	mov	r2, r3
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	00db      	lsls	r3, r3, #3
 800ad3a:	4413      	add	r3, r2
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	6812      	ldr	r2, [r2, #0]
 800ad40:	4413      	add	r3, r2
 800ad42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad46:	881b      	ldrh	r3, [r3, #0]
 800ad48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad4c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	699a      	ldr	r2, [r3, #24]
 800ad52:	8b7b      	ldrh	r3, [r7, #26]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d306      	bcc.n	800ad66 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	699a      	ldr	r2, [r3, #24]
 800ad5c:	8b7b      	ldrh	r3, [r7, #26]
 800ad5e:	1ad2      	subs	r2, r2, r3
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	619a      	str	r2, [r3, #24]
 800ad64:	e002      	b.n	800ad6c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d123      	bne.n	800adbc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad8e:	833b      	strh	r3, [r7, #24]
 800ad90:	8b3b      	ldrh	r3, [r7, #24]
 800ad92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad96:	833b      	strh	r3, [r7, #24]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	441a      	add	r2, r3
 800ada6:	8b3b      	ldrh	r3, [r7, #24]
 800ada8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb8:	b29b      	uxth	r3, r3
 800adba:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800adbc:	88fb      	ldrh	r3, [r7, #6]
 800adbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d01f      	beq.n	800ae06 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	b29b      	uxth	r3, r3
 800add8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800addc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ade0:	82fb      	strh	r3, [r7, #22]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	461a      	mov	r2, r3
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	441a      	add	r2, r3
 800adf0:	8afb      	ldrh	r3, [r7, #22]
 800adf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ae06:	8b7b      	ldrh	r3, [r7, #26]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 8085 	beq.w	800af18 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	6959      	ldr	r1, [r3, #20]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	891a      	ldrh	r2, [r3, #8]
 800ae1a:	8b7b      	ldrh	r3, [r7, #26]
 800ae1c:	f007 f904 	bl	8012028 <USB_ReadPMA>
 800ae20:	e07a      	b.n	800af18 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	4413      	add	r3, r2
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	6812      	ldr	r2, [r2, #0]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae46:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	699a      	ldr	r2, [r3, #24]
 800ae4c:	8b7b      	ldrh	r3, [r7, #26]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d306      	bcc.n	800ae60 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	699a      	ldr	r2, [r3, #24]
 800ae56:	8b7b      	ldrh	r3, [r7, #26]
 800ae58:	1ad2      	subs	r2, r2, r3
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	619a      	str	r2, [r3, #24]
 800ae5e:	e002      	b.n	800ae66 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2200      	movs	r2, #0
 800ae64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d123      	bne.n	800aeb6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	881b      	ldrh	r3, [r3, #0]
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae88:	83fb      	strh	r3, [r7, #30]
 800ae8a:	8bfb      	ldrh	r3, [r7, #30]
 800ae8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ae90:	83fb      	strh	r3, [r7, #30]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	441a      	add	r2, r3
 800aea0:	8bfb      	ldrh	r3, [r7, #30]
 800aea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800aeb6:	88fb      	ldrh	r3, [r7, #6]
 800aeb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d11f      	bne.n	800af00 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	461a      	mov	r2, r3
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeda:	83bb      	strh	r3, [r7, #28]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	461a      	mov	r2, r3
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	441a      	add	r2, r3
 800aeea:	8bbb      	ldrh	r3, [r7, #28]
 800aeec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aef8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800af00:	8b7b      	ldrh	r3, [r7, #26]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d008      	beq.n	800af18 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6818      	ldr	r0, [r3, #0]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	6959      	ldr	r1, [r3, #20]
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	895a      	ldrh	r2, [r3, #10]
 800af12:	8b7b      	ldrh	r3, [r7, #26]
 800af14:	f007 f888 	bl	8012028 <USB_ReadPMA>
    }
  }

  return count;
 800af18:	8b7b      	ldrh	r3, [r7, #26]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3720      	adds	r7, #32
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b0a4      	sub	sp, #144	; 0x90
 800af26:	af00      	add	r7, sp, #0
 800af28:	60f8      	str	r0, [r7, #12]
 800af2a:	60b9      	str	r1, [r7, #8]
 800af2c:	4613      	mov	r3, r2
 800af2e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800af30:	88fb      	ldrh	r3, [r7, #6]
 800af32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af36:	2b00      	cmp	r3, #0
 800af38:	f000 81db 	beq.w	800b2f2 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af44:	b29b      	uxth	r3, r3
 800af46:	461a      	mov	r2, r3
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	00db      	lsls	r3, r3, #3
 800af4e:	4413      	add	r3, r2
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	6812      	ldr	r2, [r2, #0]
 800af54:	4413      	add	r3, r2
 800af56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af60:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	699a      	ldr	r2, [r3, #24]
 800af68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d907      	bls.n	800af80 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	699a      	ldr	r2, [r3, #24]
 800af74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800af78:	1ad2      	subs	r2, r2, r3
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	619a      	str	r2, [r3, #24]
 800af7e:	e002      	b.n	800af86 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2200      	movs	r2, #0
 800af84:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f040 80b9 	bne.w	800b102 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	785b      	ldrb	r3, [r3, #1]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d126      	bne.n	800afe6 <HAL_PCD_EP_DB_Transmit+0xc4>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	461a      	mov	r2, r3
 800afaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afac:	4413      	add	r3, r2
 800afae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	00da      	lsls	r2, r3, #3
 800afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb8:	4413      	add	r3, r2
 800afba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc2:	881b      	ldrh	r3, [r3, #0]
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afca:	b29a      	uxth	r2, r3
 800afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afce:	801a      	strh	r2, [r3, #0]
 800afd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afde:	b29a      	uxth	r2, r3
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	801a      	strh	r2, [r3, #0]
 800afe4:	e01a      	b.n	800b01c <HAL_PCD_EP_DB_Transmit+0xfa>
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	785b      	ldrb	r3, [r3, #1]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d116      	bne.n	800b01c <HAL_PCD_EP_DB_Transmit+0xfa>
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	637b      	str	r3, [r7, #52]	; 0x34
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800affc:	b29b      	uxth	r3, r3
 800affe:	461a      	mov	r2, r3
 800b000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b002:	4413      	add	r3, r2
 800b004:	637b      	str	r3, [r7, #52]	; 0x34
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	00da      	lsls	r2, r3, #3
 800b00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00e:	4413      	add	r3, r2
 800b010:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b014:	633b      	str	r3, [r7, #48]	; 0x30
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	2200      	movs	r2, #0
 800b01a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	627b      	str	r3, [r7, #36]	; 0x24
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	785b      	ldrb	r3, [r3, #1]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d126      	bne.n	800b078 <HAL_PCD_EP_DB_Transmit+0x156>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	61fb      	str	r3, [r7, #28]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b038:	b29b      	uxth	r3, r3
 800b03a:	461a      	mov	r2, r3
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	4413      	add	r3, r2
 800b040:	61fb      	str	r3, [r7, #28]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	00da      	lsls	r2, r3, #3
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	4413      	add	r3, r2
 800b04c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b050:	61bb      	str	r3, [r7, #24]
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	b29b      	uxth	r3, r3
 800b058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	801a      	strh	r2, [r3, #0]
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	b29b      	uxth	r3, r3
 800b068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b06c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b070:	b29a      	uxth	r2, r3
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	801a      	strh	r2, [r3, #0]
 800b076:	e017      	b.n	800b0a8 <HAL_PCD_EP_DB_Transmit+0x186>
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	785b      	ldrb	r3, [r3, #1]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d113      	bne.n	800b0a8 <HAL_PCD_EP_DB_Transmit+0x186>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b088:	b29b      	uxth	r3, r3
 800b08a:	461a      	mov	r2, r3
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	4413      	add	r3, r2
 800b090:	627b      	str	r3, [r7, #36]	; 0x24
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	00da      	lsls	r2, r3, #3
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	4413      	add	r3, r2
 800b09c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b0a0:	623b      	str	r3, [r7, #32]
 800b0a2:	6a3b      	ldr	r3, [r7, #32]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f00a fdad 	bl	8015c0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b0b4:	88fb      	ldrh	r3, [r7, #6]
 800b0b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f000 82fa 	beq.w	800b6b4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	881b      	ldrh	r3, [r3, #0]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0da:	82fb      	strh	r3, [r7, #22]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	441a      	add	r2, r3
 800b0ea:	8afb      	ldrh	r3, [r7, #22]
 800b0ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	8013      	strh	r3, [r2, #0]
 800b100:	e2d8      	b.n	800b6b4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d021      	beq.n	800b150 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	461a      	mov	r2, r3
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b126:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	441a      	add	r2, r3
 800b138:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b13c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b156:	2b01      	cmp	r3, #1
 800b158:	f040 82ac 	bne.w	800b6b4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	695a      	ldr	r2, [r3, #20]
 800b160:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b164:	441a      	add	r2, r3
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	69da      	ldr	r2, [r3, #28]
 800b16e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b172:	441a      	add	r2, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	6a1a      	ldr	r2, [r3, #32]
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	429a      	cmp	r2, r3
 800b182:	d30b      	bcc.n	800b19c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	6a1a      	ldr	r2, [r3, #32]
 800b190:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b194:	1ad2      	subs	r2, r2, r3
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	621a      	str	r2, [r3, #32]
 800b19a:	e017      	b.n	800b1cc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	6a1b      	ldr	r3, [r3, #32]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d108      	bne.n	800b1b6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800b1a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b1a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b1b4:	e00a      	b.n	800b1cc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	785b      	ldrb	r3, [r3, #1]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d165      	bne.n	800b2a0 <HAL_PCD_EP_DB_Transmit+0x37e>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1e8:	4413      	add	r3, r2
 800b1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	00da      	lsls	r2, r3, #3
 800b1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	b29b      	uxth	r3, r3
 800b202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b206:	b29a      	uxth	r2, r3
 800b208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20a:	801a      	strh	r2, [r3, #0]
 800b20c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b210:	2b3e      	cmp	r3, #62	; 0x3e
 800b212:	d91d      	bls.n	800b250 <HAL_PCD_EP_DB_Transmit+0x32e>
 800b214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b218:	095b      	lsrs	r3, r3, #5
 800b21a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b21c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b220:	f003 031f 	and.w	r3, r3, #31
 800b224:	2b00      	cmp	r3, #0
 800b226:	d102      	bne.n	800b22e <HAL_PCD_EP_DB_Transmit+0x30c>
 800b228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b22a:	3b01      	subs	r3, #1
 800b22c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	881b      	ldrh	r3, [r3, #0]
 800b232:	b29a      	uxth	r2, r3
 800b234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b236:	b29b      	uxth	r3, r3
 800b238:	029b      	lsls	r3, r3, #10
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	4313      	orrs	r3, r2
 800b23e:	b29b      	uxth	r3, r3
 800b240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b248:	b29a      	uxth	r2, r3
 800b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24c:	801a      	strh	r2, [r3, #0]
 800b24e:	e044      	b.n	800b2da <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10a      	bne.n	800b26e <HAL_PCD_EP_DB_Transmit+0x34c>
 800b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b266:	b29a      	uxth	r2, r3
 800b268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26a:	801a      	strh	r2, [r3, #0]
 800b26c:	e035      	b.n	800b2da <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b26e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b272:	085b      	lsrs	r3, r3, #1
 800b274:	64bb      	str	r3, [r7, #72]	; 0x48
 800b276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d002      	beq.n	800b288 <HAL_PCD_EP_DB_Transmit+0x366>
 800b282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b284:	3301      	adds	r3, #1
 800b286:	64bb      	str	r3, [r7, #72]	; 0x48
 800b288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	b29a      	uxth	r2, r3
 800b28e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b290:	b29b      	uxth	r3, r3
 800b292:	029b      	lsls	r3, r3, #10
 800b294:	b29b      	uxth	r3, r3
 800b296:	4313      	orrs	r3, r2
 800b298:	b29a      	uxth	r2, r3
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	801a      	strh	r2, [r3, #0]
 800b29e:	e01c      	b.n	800b2da <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	785b      	ldrb	r3, [r3, #1]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d118      	bne.n	800b2da <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	647b      	str	r3, [r7, #68]	; 0x44
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2bc:	4413      	add	r3, r2
 800b2be:	647b      	str	r3, [r7, #68]	; 0x44
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	00da      	lsls	r2, r3, #3
 800b2c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b2ce:	643b      	str	r3, [r7, #64]	; 0x40
 800b2d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2d8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6818      	ldr	r0, [r3, #0]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	6959      	ldr	r1, [r3, #20]
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	891a      	ldrh	r2, [r3, #8]
 800b2e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	f006 fe5a 	bl	8011fa4 <USB_WritePMA>
 800b2f0:	e1e0      	b.n	800b6b4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	4413      	add	r3, r2
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	6812      	ldr	r2, [r2, #0]
 800b30a:	4413      	add	r3, r2
 800b30c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b316:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	699a      	ldr	r2, [r3, #24]
 800b31e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b322:	429a      	cmp	r2, r3
 800b324:	d307      	bcc.n	800b336 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	699a      	ldr	r2, [r3, #24]
 800b32a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b32e:	1ad2      	subs	r2, r2, r3
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	619a      	str	r2, [r3, #24]
 800b334:	e002      	b.n	800b33c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	2200      	movs	r2, #0
 800b33a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	2b00      	cmp	r3, #0
 800b342:	f040 80c0 	bne.w	800b4c6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	785b      	ldrb	r3, [r3, #1]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d126      	bne.n	800b39c <HAL_PCD_EP_DB_Transmit+0x47a>
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	461a      	mov	r2, r3
 800b360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b362:	4413      	add	r3, r2
 800b364:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	00da      	lsls	r2, r3, #3
 800b36c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b36e:	4413      	add	r3, r2
 800b370:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b374:	67bb      	str	r3, [r7, #120]	; 0x78
 800b376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b378:	881b      	ldrh	r3, [r3, #0]
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b380:	b29a      	uxth	r2, r3
 800b382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b384:	801a      	strh	r2, [r3, #0]
 800b386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b388:	881b      	ldrh	r3, [r3, #0]
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b394:	b29a      	uxth	r2, r3
 800b396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b398:	801a      	strh	r2, [r3, #0]
 800b39a:	e01a      	b.n	800b3d2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	785b      	ldrb	r3, [r3, #1]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d116      	bne.n	800b3d2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	667b      	str	r3, [r7, #100]	; 0x64
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3b8:	4413      	add	r3, r2
 800b3ba:	667b      	str	r3, [r7, #100]	; 0x64
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	00da      	lsls	r2, r3, #3
 800b3c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b3ca:	663b      	str	r3, [r7, #96]	; 0x60
 800b3cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	677b      	str	r3, [r7, #116]	; 0x74
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	785b      	ldrb	r3, [r3, #1]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d12b      	bne.n	800b438 <HAL_PCD_EP_DB_Transmit+0x516>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3f4:	4413      	add	r3, r2
 800b3f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	00da      	lsls	r2, r3, #3
 800b3fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b400:	4413      	add	r3, r2
 800b402:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b40a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b40e:	881b      	ldrh	r3, [r3, #0]
 800b410:	b29b      	uxth	r3, r3
 800b412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b416:	b29a      	uxth	r2, r3
 800b418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b41c:	801a      	strh	r2, [r3, #0]
 800b41e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	b29b      	uxth	r3, r3
 800b426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b42a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b42e:	b29a      	uxth	r2, r3
 800b430:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b434:	801a      	strh	r2, [r3, #0]
 800b436:	e017      	b.n	800b468 <HAL_PCD_EP_DB_Transmit+0x546>
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	785b      	ldrb	r3, [r3, #1]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d113      	bne.n	800b468 <HAL_PCD_EP_DB_Transmit+0x546>
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b448:	b29b      	uxth	r3, r3
 800b44a:	461a      	mov	r2, r3
 800b44c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b44e:	4413      	add	r3, r2
 800b450:	677b      	str	r3, [r7, #116]	; 0x74
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	00da      	lsls	r2, r3, #3
 800b458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b45a:	4413      	add	r3, r2
 800b45c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b460:	673b      	str	r3, [r7, #112]	; 0x70
 800b462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b464:	2200      	movs	r2, #0
 800b466:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	4619      	mov	r1, r3
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f00a fbcd 	bl	8015c0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b474:	88fb      	ldrh	r3, [r7, #6]
 800b476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f040 811a 	bne.w	800b6b4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	461a      	mov	r2, r3
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	b29b      	uxth	r3, r3
 800b492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b49a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	441a      	add	r2, r3
 800b4ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b4b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	8013      	strh	r3, [r2, #0]
 800b4c4:	e0f6      	b.n	800b6b4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d121      	bne.n	800b514 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	441a      	add	r2, r3
 800b4fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b510:	b29b      	uxth	r3, r3
 800b512:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	f040 80ca 	bne.w	800b6b4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	695a      	ldr	r2, [r3, #20]
 800b524:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b528:	441a      	add	r2, r3
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	69da      	ldr	r2, [r3, #28]
 800b532:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b536:	441a      	add	r2, r3
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	6a1a      	ldr	r2, [r3, #32]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	429a      	cmp	r2, r3
 800b546:	d30b      	bcc.n	800b560 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	6a1a      	ldr	r2, [r3, #32]
 800b554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b558:	1ad2      	subs	r2, r2, r3
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	621a      	str	r2, [r3, #32]
 800b55e:	e017      	b.n	800b590 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	6a1b      	ldr	r3, [r3, #32]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d108      	bne.n	800b57a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800b568:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b56c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2200      	movs	r2, #0
 800b574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b578:	e00a      	b.n	800b590 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2200      	movs	r2, #0
 800b586:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	657b      	str	r3, [r7, #84]	; 0x54
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	785b      	ldrb	r3, [r3, #1]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d165      	bne.n	800b66a <HAL_PCD_EP_DB_Transmit+0x748>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5b2:	4413      	add	r3, r2
 800b5b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	00da      	lsls	r2, r3, #3
 800b5bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5be:	4413      	add	r3, r2
 800b5c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5c8:	881b      	ldrh	r3, [r3, #0]
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5d4:	801a      	strh	r2, [r3, #0]
 800b5d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5da:	2b3e      	cmp	r3, #62	; 0x3e
 800b5dc:	d91d      	bls.n	800b61a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800b5de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5e2:	095b      	lsrs	r3, r3, #5
 800b5e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5ea:	f003 031f 	and.w	r3, r3, #31
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d102      	bne.n	800b5f8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800b5f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5fa:	881b      	ldrh	r3, [r3, #0]
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b600:	b29b      	uxth	r3, r3
 800b602:	029b      	lsls	r3, r3, #10
 800b604:	b29b      	uxth	r3, r3
 800b606:	4313      	orrs	r3, r2
 800b608:	b29b      	uxth	r3, r3
 800b60a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b60e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b612:	b29a      	uxth	r2, r3
 800b614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b616:	801a      	strh	r2, [r3, #0]
 800b618:	e041      	b.n	800b69e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b61a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10a      	bne.n	800b638 <HAL_PCD_EP_DB_Transmit+0x716>
 800b622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b624:	881b      	ldrh	r3, [r3, #0]
 800b626:	b29b      	uxth	r3, r3
 800b628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b62c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b630:	b29a      	uxth	r2, r3
 800b632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b634:	801a      	strh	r2, [r3, #0]
 800b636:	e032      	b.n	800b69e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b63c:	085b      	lsrs	r3, r3, #1
 800b63e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b644:	f003 0301 	and.w	r3, r3, #1
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <HAL_PCD_EP_DB_Transmit+0x730>
 800b64c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b64e:	3301      	adds	r3, #1
 800b650:	66bb      	str	r3, [r7, #104]	; 0x68
 800b652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b654:	881b      	ldrh	r3, [r3, #0]
 800b656:	b29a      	uxth	r2, r3
 800b658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	029b      	lsls	r3, r3, #10
 800b65e:	b29b      	uxth	r3, r3
 800b660:	4313      	orrs	r3, r2
 800b662:	b29a      	uxth	r2, r3
 800b664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b666:	801a      	strh	r2, [r3, #0]
 800b668:	e019      	b.n	800b69e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	785b      	ldrb	r3, [r3, #1]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d115      	bne.n	800b69e <HAL_PCD_EP_DB_Transmit+0x77c>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	461a      	mov	r2, r3
 800b67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b680:	4413      	add	r3, r2
 800b682:	657b      	str	r3, [r7, #84]	; 0x54
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	00da      	lsls	r2, r3, #3
 800b68a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b68c:	4413      	add	r3, r2
 800b68e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b692:	653b      	str	r3, [r7, #80]	; 0x50
 800b694:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b698:	b29a      	uxth	r2, r3
 800b69a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b69c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6818      	ldr	r0, [r3, #0]
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	6959      	ldr	r1, [r3, #20]
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	895a      	ldrh	r2, [r3, #10]
 800b6aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	f006 fc78 	bl	8011fa4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6ce:	82bb      	strh	r3, [r7, #20]
 800b6d0:	8abb      	ldrh	r3, [r7, #20]
 800b6d2:	f083 0310 	eor.w	r3, r3, #16
 800b6d6:	82bb      	strh	r3, [r7, #20]
 800b6d8:	8abb      	ldrh	r3, [r7, #20]
 800b6da:	f083 0320 	eor.w	r3, r3, #32
 800b6de:	82bb      	strh	r3, [r7, #20]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	441a      	add	r2, r3
 800b6ee:	8abb      	ldrh	r3, [r7, #20]
 800b6f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b700:	b29b      	uxth	r3, r3
 800b702:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3790      	adds	r7, #144	; 0x90
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b70e:	b480      	push	{r7}
 800b710:	b087      	sub	sp, #28
 800b712:	af00      	add	r7, sp, #0
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	607b      	str	r3, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	817b      	strh	r3, [r7, #10]
 800b71c:	4613      	mov	r3, r2
 800b71e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b720:	897b      	ldrh	r3, [r7, #10]
 800b722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b726:	b29b      	uxth	r3, r3
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00b      	beq.n	800b744 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b72c:	897b      	ldrh	r3, [r7, #10]
 800b72e:	f003 0207 	and.w	r2, r3, #7
 800b732:	4613      	mov	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	4413      	add	r3, r2
 800b738:	00db      	lsls	r3, r3, #3
 800b73a:	3310      	adds	r3, #16
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	4413      	add	r3, r2
 800b740:	617b      	str	r3, [r7, #20]
 800b742:	e009      	b.n	800b758 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b744:	897a      	ldrh	r2, [r7, #10]
 800b746:	4613      	mov	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4413      	add	r3, r2
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	4413      	add	r3, r2
 800b756:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b758:	893b      	ldrh	r3, [r7, #8]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d107      	bne.n	800b76e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	2200      	movs	r2, #0
 800b762:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	b29a      	uxth	r2, r3
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	80da      	strh	r2, [r3, #6]
 800b76c:	e00b      	b.n	800b786 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	2201      	movs	r2, #1
 800b772:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	b29a      	uxth	r2, r3
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	0c1b      	lsrs	r3, r3, #16
 800b780:	b29a      	uxth	r2, r3
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	371c      	adds	r7, #28
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	f043 0301 	orr.w	r3, r3, #1
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	f043 0302 	orr.w	r3, r3, #2
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3714      	adds	r7, #20
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d141      	bne.n	800b87a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b7f6:	4b4b      	ldr	r3, [pc, #300]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b7fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b802:	d131      	bne.n	800b868 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b804:	4b47      	ldr	r3, [pc, #284]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b80a:	4a46      	ldr	r2, [pc, #280]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b80c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b810:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b814:	4b43      	ldr	r3, [pc, #268]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b81c:	4a41      	ldr	r2, [pc, #260]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b81e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b822:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b824:	4b40      	ldr	r3, [pc, #256]	; (800b928 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2232      	movs	r2, #50	; 0x32
 800b82a:	fb02 f303 	mul.w	r3, r2, r3
 800b82e:	4a3f      	ldr	r2, [pc, #252]	; (800b92c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b830:	fba2 2303 	umull	r2, r3, r2, r3
 800b834:	0c9b      	lsrs	r3, r3, #18
 800b836:	3301      	adds	r3, #1
 800b838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b83a:	e002      	b.n	800b842 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3b01      	subs	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b842:	4b38      	ldr	r3, [pc, #224]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b844:	695b      	ldr	r3, [r3, #20]
 800b846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b84a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b84e:	d102      	bne.n	800b856 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1f2      	bne.n	800b83c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b856:	4b33      	ldr	r3, [pc, #204]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b858:	695b      	ldr	r3, [r3, #20]
 800b85a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b85e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b862:	d158      	bne.n	800b916 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b864:	2303      	movs	r3, #3
 800b866:	e057      	b.n	800b918 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b868:	4b2e      	ldr	r3, [pc, #184]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b86a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b86e:	4a2d      	ldr	r2, [pc, #180]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b878:	e04d      	b.n	800b916 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b880:	d141      	bne.n	800b906 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b882:	4b28      	ldr	r3, [pc, #160]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b88a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b88e:	d131      	bne.n	800b8f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b890:	4b24      	ldr	r3, [pc, #144]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b896:	4a23      	ldr	r2, [pc, #140]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b89c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b8a0:	4b20      	ldr	r3, [pc, #128]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b8a8:	4a1e      	ldr	r2, [pc, #120]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b8b0:	4b1d      	ldr	r3, [pc, #116]	; (800b928 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2232      	movs	r2, #50	; 0x32
 800b8b6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ba:	4a1c      	ldr	r2, [pc, #112]	; (800b92c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b8bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c0:	0c9b      	lsrs	r3, r3, #18
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b8c6:	e002      	b.n	800b8ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b8ce:	4b15      	ldr	r3, [pc, #84]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8da:	d102      	bne.n	800b8e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1f2      	bne.n	800b8c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b8e2:	4b10      	ldr	r3, [pc, #64]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8e4:	695b      	ldr	r3, [r3, #20]
 800b8e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8ee:	d112      	bne.n	800b916 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	e011      	b.n	800b918 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b8f4:	4b0b      	ldr	r3, [pc, #44]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8fa:	4a0a      	ldr	r2, [pc, #40]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b8fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b900:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b904:	e007      	b.n	800b916 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b906:	4b07      	ldr	r3, [pc, #28]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b90e:	4a05      	ldr	r2, [pc, #20]	; (800b924 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b910:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b914:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	40007000 	.word	0x40007000
 800b928:	200001c4 	.word	0x200001c4
 800b92c:	431bde83 	.word	0x431bde83

0800b930 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b930:	b480      	push	{r7}
 800b932:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b934:	4b05      	ldr	r3, [pc, #20]	; (800b94c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	4a04      	ldr	r2, [pc, #16]	; (800b94c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b93a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b93e:	6093      	str	r3, [r2, #8]
}
 800b940:	bf00      	nop
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	40007000 	.word	0x40007000

0800b950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b088      	sub	sp, #32
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d101      	bne.n	800b962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	e2fe      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0301 	and.w	r3, r3, #1
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d075      	beq.n	800ba5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b96e:	4b97      	ldr	r3, [pc, #604]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	f003 030c 	and.w	r3, r3, #12
 800b976:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b978:	4b94      	ldr	r3, [pc, #592]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	f003 0303 	and.w	r3, r3, #3
 800b980:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	2b0c      	cmp	r3, #12
 800b986:	d102      	bne.n	800b98e <HAL_RCC_OscConfig+0x3e>
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	2b03      	cmp	r3, #3
 800b98c:	d002      	beq.n	800b994 <HAL_RCC_OscConfig+0x44>
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	2b08      	cmp	r3, #8
 800b992:	d10b      	bne.n	800b9ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b994:	4b8d      	ldr	r3, [pc, #564]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d05b      	beq.n	800ba58 <HAL_RCC_OscConfig+0x108>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d157      	bne.n	800ba58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e2d9      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9b4:	d106      	bne.n	800b9c4 <HAL_RCC_OscConfig+0x74>
 800b9b6:	4b85      	ldr	r3, [pc, #532]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a84      	ldr	r2, [pc, #528]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b9bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9c0:	6013      	str	r3, [r2, #0]
 800b9c2:	e01d      	b.n	800ba00 <HAL_RCC_OscConfig+0xb0>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9cc:	d10c      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x98>
 800b9ce:	4b7f      	ldr	r3, [pc, #508]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a7e      	ldr	r2, [pc, #504]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b9d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	4b7c      	ldr	r3, [pc, #496]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a7b      	ldr	r2, [pc, #492]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b9e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9e4:	6013      	str	r3, [r2, #0]
 800b9e6:	e00b      	b.n	800ba00 <HAL_RCC_OscConfig+0xb0>
 800b9e8:	4b78      	ldr	r3, [pc, #480]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a77      	ldr	r2, [pc, #476]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b9ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9f2:	6013      	str	r3, [r2, #0]
 800b9f4:	4b75      	ldr	r3, [pc, #468]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a74      	ldr	r2, [pc, #464]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800b9fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d013      	beq.n	800ba30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba08:	f7fa fafe 	bl	8006008 <HAL_GetTick>
 800ba0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba0e:	e008      	b.n	800ba22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba10:	f7fa fafa 	bl	8006008 <HAL_GetTick>
 800ba14:	4602      	mov	r2, r0
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	2b64      	cmp	r3, #100	; 0x64
 800ba1c:	d901      	bls.n	800ba22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	e29e      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba22:	4b6a      	ldr	r3, [pc, #424]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d0f0      	beq.n	800ba10 <HAL_RCC_OscConfig+0xc0>
 800ba2e:	e014      	b.n	800ba5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba30:	f7fa faea 	bl	8006008 <HAL_GetTick>
 800ba34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ba36:	e008      	b.n	800ba4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba38:	f7fa fae6 	bl	8006008 <HAL_GetTick>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	2b64      	cmp	r3, #100	; 0x64
 800ba44:	d901      	bls.n	800ba4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ba46:	2303      	movs	r3, #3
 800ba48:	e28a      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ba4a:	4b60      	ldr	r3, [pc, #384]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1f0      	bne.n	800ba38 <HAL_RCC_OscConfig+0xe8>
 800ba56:	e000      	b.n	800ba5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 0302 	and.w	r3, r3, #2
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d075      	beq.n	800bb52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba66:	4b59      	ldr	r3, [pc, #356]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	f003 030c 	and.w	r3, r3, #12
 800ba6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ba70:	4b56      	ldr	r3, [pc, #344]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	f003 0303 	and.w	r3, r3, #3
 800ba78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	2b0c      	cmp	r3, #12
 800ba7e:	d102      	bne.n	800ba86 <HAL_RCC_OscConfig+0x136>
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d002      	beq.n	800ba8c <HAL_RCC_OscConfig+0x13c>
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	d11f      	bne.n	800bacc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba8c:	4b4f      	ldr	r3, [pc, #316]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <HAL_RCC_OscConfig+0x154>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e25d      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baa4:	4b49      	ldr	r3, [pc, #292]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	061b      	lsls	r3, r3, #24
 800bab2:	4946      	ldr	r1, [pc, #280]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bab4:	4313      	orrs	r3, r2
 800bab6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bab8:	4b45      	ldr	r3, [pc, #276]	; (800bbd0 <HAL_RCC_OscConfig+0x280>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4618      	mov	r0, r3
 800babe:	f7fa fa57 	bl	8005f70 <HAL_InitTick>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d043      	beq.n	800bb50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	e249      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d023      	beq.n	800bb1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bad4:	4b3d      	ldr	r3, [pc, #244]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a3c      	ldr	r2, [pc, #240]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bae0:	f7fa fa92 	bl	8006008 <HAL_GetTick>
 800bae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bae6:	e008      	b.n	800bafa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bae8:	f7fa fa8e 	bl	8006008 <HAL_GetTick>
 800baec:	4602      	mov	r2, r0
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d901      	bls.n	800bafa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800baf6:	2303      	movs	r3, #3
 800baf8:	e232      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bafa:	4b34      	ldr	r3, [pc, #208]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0f0      	beq.n	800bae8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb06:	4b31      	ldr	r3, [pc, #196]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	061b      	lsls	r3, r3, #24
 800bb14:	492d      	ldr	r1, [pc, #180]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bb16:	4313      	orrs	r3, r2
 800bb18:	604b      	str	r3, [r1, #4]
 800bb1a:	e01a      	b.n	800bb52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb1c:	4b2b      	ldr	r3, [pc, #172]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a2a      	ldr	r2, [pc, #168]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bb22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb28:	f7fa fa6e 	bl	8006008 <HAL_GetTick>
 800bb2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb2e:	e008      	b.n	800bb42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb30:	f7fa fa6a 	bl	8006008 <HAL_GetTick>
 800bb34:	4602      	mov	r2, r0
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d901      	bls.n	800bb42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	e20e      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb42:	4b22      	ldr	r3, [pc, #136]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1f0      	bne.n	800bb30 <HAL_RCC_OscConfig+0x1e0>
 800bb4e:	e000      	b.n	800bb52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f003 0308 	and.w	r3, r3, #8
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d041      	beq.n	800bbe2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d01c      	beq.n	800bba0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb66:	4b19      	ldr	r3, [pc, #100]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bb68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb6c:	4a17      	ldr	r2, [pc, #92]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bb6e:	f043 0301 	orr.w	r3, r3, #1
 800bb72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb76:	f7fa fa47 	bl	8006008 <HAL_GetTick>
 800bb7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bb7c:	e008      	b.n	800bb90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb7e:	f7fa fa43 	bl	8006008 <HAL_GetTick>
 800bb82:	4602      	mov	r2, r0
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d901      	bls.n	800bb90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	e1e7      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bb90:	4b0e      	ldr	r3, [pc, #56]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bb92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb96:	f003 0302 	and.w	r3, r3, #2
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d0ef      	beq.n	800bb7e <HAL_RCC_OscConfig+0x22e>
 800bb9e:	e020      	b.n	800bbe2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bba0:	4b0a      	ldr	r3, [pc, #40]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bba6:	4a09      	ldr	r2, [pc, #36]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800bba8:	f023 0301 	bic.w	r3, r3, #1
 800bbac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbb0:	f7fa fa2a 	bl	8006008 <HAL_GetTick>
 800bbb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bbb6:	e00d      	b.n	800bbd4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbb8:	f7fa fa26 	bl	8006008 <HAL_GetTick>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d906      	bls.n	800bbd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800bbc6:	2303      	movs	r3, #3
 800bbc8:	e1ca      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
 800bbca:	bf00      	nop
 800bbcc:	40021000 	.word	0x40021000
 800bbd0:	200001d8 	.word	0x200001d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bbd4:	4b8c      	ldr	r3, [pc, #560]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bbd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbda:	f003 0302 	and.w	r3, r3, #2
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1ea      	bne.n	800bbb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 0304 	and.w	r3, r3, #4
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 80a6 	beq.w	800bd3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bbf4:	4b84      	ldr	r3, [pc, #528]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bbf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <HAL_RCC_OscConfig+0x2b4>
 800bc00:	2301      	movs	r3, #1
 800bc02:	e000      	b.n	800bc06 <HAL_RCC_OscConfig+0x2b6>
 800bc04:	2300      	movs	r3, #0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00d      	beq.n	800bc26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc0a:	4b7f      	ldr	r3, [pc, #508]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bc0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc0e:	4a7e      	ldr	r2, [pc, #504]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bc10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc14:	6593      	str	r3, [r2, #88]	; 0x58
 800bc16:	4b7c      	ldr	r3, [pc, #496]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bc22:	2301      	movs	r3, #1
 800bc24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc26:	4b79      	ldr	r3, [pc, #484]	; (800be0c <HAL_RCC_OscConfig+0x4bc>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d118      	bne.n	800bc64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc32:	4b76      	ldr	r3, [pc, #472]	; (800be0c <HAL_RCC_OscConfig+0x4bc>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a75      	ldr	r2, [pc, #468]	; (800be0c <HAL_RCC_OscConfig+0x4bc>)
 800bc38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc3e:	f7fa f9e3 	bl	8006008 <HAL_GetTick>
 800bc42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc44:	e008      	b.n	800bc58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc46:	f7fa f9df 	bl	8006008 <HAL_GetTick>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d901      	bls.n	800bc58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e183      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc58:	4b6c      	ldr	r3, [pc, #432]	; (800be0c <HAL_RCC_OscConfig+0x4bc>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0f0      	beq.n	800bc46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d108      	bne.n	800bc7e <HAL_RCC_OscConfig+0x32e>
 800bc6c:	4b66      	ldr	r3, [pc, #408]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc72:	4a65      	ldr	r2, [pc, #404]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bc74:	f043 0301 	orr.w	r3, r3, #1
 800bc78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bc7c:	e024      	b.n	800bcc8 <HAL_RCC_OscConfig+0x378>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	2b05      	cmp	r3, #5
 800bc84:	d110      	bne.n	800bca8 <HAL_RCC_OscConfig+0x358>
 800bc86:	4b60      	ldr	r3, [pc, #384]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bc88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8c:	4a5e      	ldr	r2, [pc, #376]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bc8e:	f043 0304 	orr.w	r3, r3, #4
 800bc92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bc96:	4b5c      	ldr	r3, [pc, #368]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bc98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc9c:	4a5a      	ldr	r2, [pc, #360]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bc9e:	f043 0301 	orr.w	r3, r3, #1
 800bca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bca6:	e00f      	b.n	800bcc8 <HAL_RCC_OscConfig+0x378>
 800bca8:	4b57      	ldr	r3, [pc, #348]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bcaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcae:	4a56      	ldr	r2, [pc, #344]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bcb0:	f023 0301 	bic.w	r3, r3, #1
 800bcb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bcb8:	4b53      	ldr	r3, [pc, #332]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bcba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcbe:	4a52      	ldr	r2, [pc, #328]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bcc0:	f023 0304 	bic.w	r3, r3, #4
 800bcc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d016      	beq.n	800bcfe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcd0:	f7fa f99a 	bl	8006008 <HAL_GetTick>
 800bcd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcd6:	e00a      	b.n	800bcee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcd8:	f7fa f996 	bl	8006008 <HAL_GetTick>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d901      	bls.n	800bcee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800bcea:	2303      	movs	r3, #3
 800bcec:	e138      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcee:	4b46      	ldr	r3, [pc, #280]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bcf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcf4:	f003 0302 	and.w	r3, r3, #2
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d0ed      	beq.n	800bcd8 <HAL_RCC_OscConfig+0x388>
 800bcfc:	e015      	b.n	800bd2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcfe:	f7fa f983 	bl	8006008 <HAL_GetTick>
 800bd02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd04:	e00a      	b.n	800bd1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd06:	f7fa f97f 	bl	8006008 <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d901      	bls.n	800bd1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800bd18:	2303      	movs	r3, #3
 800bd1a:	e121      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd1c:	4b3a      	ldr	r3, [pc, #232]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bd1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd22:	f003 0302 	and.w	r3, r3, #2
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1ed      	bne.n	800bd06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bd2a:	7ffb      	ldrb	r3, [r7, #31]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d105      	bne.n	800bd3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd30:	4b35      	ldr	r3, [pc, #212]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bd32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd34:	4a34      	ldr	r2, [pc, #208]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bd36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 0320 	and.w	r3, r3, #32
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d03c      	beq.n	800bdc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d01c      	beq.n	800bd8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bd50:	4b2d      	ldr	r3, [pc, #180]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bd52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd56:	4a2c      	ldr	r2, [pc, #176]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bd58:	f043 0301 	orr.w	r3, r3, #1
 800bd5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd60:	f7fa f952 	bl	8006008 <HAL_GetTick>
 800bd64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bd66:	e008      	b.n	800bd7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bd68:	f7fa f94e 	bl	8006008 <HAL_GetTick>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d901      	bls.n	800bd7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800bd76:	2303      	movs	r3, #3
 800bd78:	e0f2      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bd7a:	4b23      	ldr	r3, [pc, #140]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bd7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd80:	f003 0302 	and.w	r3, r3, #2
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d0ef      	beq.n	800bd68 <HAL_RCC_OscConfig+0x418>
 800bd88:	e01b      	b.n	800bdc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bd8a:	4b1f      	ldr	r3, [pc, #124]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bd8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd90:	4a1d      	ldr	r2, [pc, #116]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bd92:	f023 0301 	bic.w	r3, r3, #1
 800bd96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd9a:	f7fa f935 	bl	8006008 <HAL_GetTick>
 800bd9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bda0:	e008      	b.n	800bdb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bda2:	f7fa f931 	bl	8006008 <HAL_GetTick>
 800bda6:	4602      	mov	r2, r0
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d901      	bls.n	800bdb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e0d5      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bdb4:	4b14      	ldr	r3, [pc, #80]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bdb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bdba:	f003 0302 	and.w	r3, r3, #2
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1ef      	bne.n	800bda2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f000 80c9 	beq.w	800bf5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bdcc:	4b0e      	ldr	r3, [pc, #56]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	f003 030c 	and.w	r3, r3, #12
 800bdd4:	2b0c      	cmp	r3, #12
 800bdd6:	f000 8083 	beq.w	800bee0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d15e      	bne.n	800bea0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bde2:	4b09      	ldr	r3, [pc, #36]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a08      	ldr	r2, [pc, #32]	; (800be08 <HAL_RCC_OscConfig+0x4b8>)
 800bde8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bdec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdee:	f7fa f90b 	bl	8006008 <HAL_GetTick>
 800bdf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bdf4:	e00c      	b.n	800be10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdf6:	f7fa f907 	bl	8006008 <HAL_GetTick>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	1ad3      	subs	r3, r2, r3
 800be00:	2b02      	cmp	r3, #2
 800be02:	d905      	bls.n	800be10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800be04:	2303      	movs	r3, #3
 800be06:	e0ab      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
 800be08:	40021000 	.word	0x40021000
 800be0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be10:	4b55      	ldr	r3, [pc, #340]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1ec      	bne.n	800bdf6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800be1c:	4b52      	ldr	r3, [pc, #328]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800be1e:	68da      	ldr	r2, [r3, #12]
 800be20:	4b52      	ldr	r3, [pc, #328]	; (800bf6c <HAL_RCC_OscConfig+0x61c>)
 800be22:	4013      	ands	r3, r2
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	6a11      	ldr	r1, [r2, #32]
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800be2c:	3a01      	subs	r2, #1
 800be2e:	0112      	lsls	r2, r2, #4
 800be30:	4311      	orrs	r1, r2
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800be36:	0212      	lsls	r2, r2, #8
 800be38:	4311      	orrs	r1, r2
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800be3e:	0852      	lsrs	r2, r2, #1
 800be40:	3a01      	subs	r2, #1
 800be42:	0552      	lsls	r2, r2, #21
 800be44:	4311      	orrs	r1, r2
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800be4a:	0852      	lsrs	r2, r2, #1
 800be4c:	3a01      	subs	r2, #1
 800be4e:	0652      	lsls	r2, r2, #25
 800be50:	4311      	orrs	r1, r2
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800be56:	06d2      	lsls	r2, r2, #27
 800be58:	430a      	orrs	r2, r1
 800be5a:	4943      	ldr	r1, [pc, #268]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800be5c:	4313      	orrs	r3, r2
 800be5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be60:	4b41      	ldr	r3, [pc, #260]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a40      	ldr	r2, [pc, #256]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800be66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800be6c:	4b3e      	ldr	r3, [pc, #248]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	4a3d      	ldr	r2, [pc, #244]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800be72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be78:	f7fa f8c6 	bl	8006008 <HAL_GetTick>
 800be7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be7e:	e008      	b.n	800be92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be80:	f7fa f8c2 	bl	8006008 <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d901      	bls.n	800be92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e066      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be92:	4b35      	ldr	r3, [pc, #212]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d0f0      	beq.n	800be80 <HAL_RCC_OscConfig+0x530>
 800be9e:	e05e      	b.n	800bf5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bea0:	4b31      	ldr	r3, [pc, #196]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a30      	ldr	r2, [pc, #192]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800bea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800beaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800beac:	f7fa f8ac 	bl	8006008 <HAL_GetTick>
 800beb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800beb2:	e008      	b.n	800bec6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800beb4:	f7fa f8a8 	bl	8006008 <HAL_GetTick>
 800beb8:	4602      	mov	r2, r0
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d901      	bls.n	800bec6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e04c      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bec6:	4b28      	ldr	r3, [pc, #160]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1f0      	bne.n	800beb4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800bed2:	4b25      	ldr	r3, [pc, #148]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800bed4:	68da      	ldr	r2, [r3, #12]
 800bed6:	4924      	ldr	r1, [pc, #144]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800bed8:	4b25      	ldr	r3, [pc, #148]	; (800bf70 <HAL_RCC_OscConfig+0x620>)
 800beda:	4013      	ands	r3, r2
 800bedc:	60cb      	str	r3, [r1, #12]
 800bede:	e03e      	b.n	800bf5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	69db      	ldr	r3, [r3, #28]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d101      	bne.n	800beec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e039      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800beec:	4b1e      	ldr	r3, [pc, #120]	; (800bf68 <HAL_RCC_OscConfig+0x618>)
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	f003 0203 	and.w	r2, r3, #3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a1b      	ldr	r3, [r3, #32]
 800befc:	429a      	cmp	r2, r3
 800befe:	d12c      	bne.n	800bf5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d123      	bne.n	800bf5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d11b      	bne.n	800bf5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d113      	bne.n	800bf5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf3c:	085b      	lsrs	r3, r3, #1
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d109      	bne.n	800bf5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf50:	085b      	lsrs	r3, r3, #1
 800bf52:	3b01      	subs	r3, #1
 800bf54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d001      	beq.n	800bf5e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e000      	b.n	800bf60 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3720      	adds	r7, #32
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	40021000 	.word	0x40021000
 800bf6c:	019f800c 	.word	0x019f800c
 800bf70:	feeefffc 	.word	0xfeeefffc

0800bf74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e11e      	b.n	800c1ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bf8c:	4b91      	ldr	r3, [pc, #580]	; (800c1d4 <HAL_RCC_ClockConfig+0x260>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 030f 	and.w	r3, r3, #15
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d910      	bls.n	800bfbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf9a:	4b8e      	ldr	r3, [pc, #568]	; (800c1d4 <HAL_RCC_ClockConfig+0x260>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f023 020f 	bic.w	r2, r3, #15
 800bfa2:	498c      	ldr	r1, [pc, #560]	; (800c1d4 <HAL_RCC_ClockConfig+0x260>)
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfaa:	4b8a      	ldr	r3, [pc, #552]	; (800c1d4 <HAL_RCC_ClockConfig+0x260>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f003 030f 	and.w	r3, r3, #15
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d001      	beq.n	800bfbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e106      	b.n	800c1ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 0301 	and.w	r3, r3, #1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d073      	beq.n	800c0b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	2b03      	cmp	r3, #3
 800bfce:	d129      	bne.n	800c024 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bfd0:	4b81      	ldr	r3, [pc, #516]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d101      	bne.n	800bfe0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e0f4      	b.n	800c1ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800bfe0:	f000 f99e 	bl	800c320 <RCC_GetSysClockFreqFromPLLSource>
 800bfe4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	4a7c      	ldr	r2, [pc, #496]	; (800c1dc <HAL_RCC_ClockConfig+0x268>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d93f      	bls.n	800c06e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bfee:	4b7a      	ldr	r3, [pc, #488]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d009      	beq.n	800c00e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c002:	2b00      	cmp	r3, #0
 800c004:	d033      	beq.n	800c06e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d12f      	bne.n	800c06e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c00e:	4b72      	ldr	r3, [pc, #456]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c016:	4a70      	ldr	r2, [pc, #448]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c01c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c01e:	2380      	movs	r3, #128	; 0x80
 800c020:	617b      	str	r3, [r7, #20]
 800c022:	e024      	b.n	800c06e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	2b02      	cmp	r3, #2
 800c02a:	d107      	bne.n	800c03c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c02c:	4b6a      	ldr	r3, [pc, #424]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c034:	2b00      	cmp	r3, #0
 800c036:	d109      	bne.n	800c04c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	e0c6      	b.n	800c1ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c03c:	4b66      	ldr	r3, [pc, #408]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c044:	2b00      	cmp	r3, #0
 800c046:	d101      	bne.n	800c04c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	e0be      	b.n	800c1ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c04c:	f000 f8ce 	bl	800c1ec <HAL_RCC_GetSysClockFreq>
 800c050:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	4a61      	ldr	r2, [pc, #388]	; (800c1dc <HAL_RCC_ClockConfig+0x268>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d909      	bls.n	800c06e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c05a:	4b5f      	ldr	r3, [pc, #380]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c062:	4a5d      	ldr	r2, [pc, #372]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c068:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800c06a:	2380      	movs	r3, #128	; 0x80
 800c06c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c06e:	4b5a      	ldr	r3, [pc, #360]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	f023 0203 	bic.w	r2, r3, #3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	4957      	ldr	r1, [pc, #348]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c07c:	4313      	orrs	r3, r2
 800c07e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c080:	f7f9 ffc2 	bl	8006008 <HAL_GetTick>
 800c084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c086:	e00a      	b.n	800c09e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c088:	f7f9 ffbe 	bl	8006008 <HAL_GetTick>
 800c08c:	4602      	mov	r2, r0
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	f241 3288 	movw	r2, #5000	; 0x1388
 800c096:	4293      	cmp	r3, r2
 800c098:	d901      	bls.n	800c09e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800c09a:	2303      	movs	r3, #3
 800c09c:	e095      	b.n	800c1ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c09e:	4b4e      	ldr	r3, [pc, #312]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	f003 020c 	and.w	r2, r3, #12
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d1eb      	bne.n	800c088 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 0302 	and.w	r3, r3, #2
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d023      	beq.n	800c104 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 0304 	and.w	r3, r3, #4
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d005      	beq.n	800c0d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c0c8:	4b43      	ldr	r3, [pc, #268]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	4a42      	ldr	r2, [pc, #264]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c0ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c0d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 0308 	and.w	r3, r3, #8
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d007      	beq.n	800c0f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800c0e0:	4b3d      	ldr	r3, [pc, #244]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c0e8:	4a3b      	ldr	r2, [pc, #236]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c0ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c0ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0f0:	4b39      	ldr	r3, [pc, #228]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	4936      	ldr	r1, [pc, #216]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c0fe:	4313      	orrs	r3, r2
 800c100:	608b      	str	r3, [r1, #8]
 800c102:	e008      	b.n	800c116 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	2b80      	cmp	r3, #128	; 0x80
 800c108:	d105      	bne.n	800c116 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800c10a:	4b33      	ldr	r3, [pc, #204]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	4a32      	ldr	r2, [pc, #200]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c110:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c114:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c116:	4b2f      	ldr	r3, [pc, #188]	; (800c1d4 <HAL_RCC_ClockConfig+0x260>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 030f 	and.w	r3, r3, #15
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	429a      	cmp	r2, r3
 800c122:	d21d      	bcs.n	800c160 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c124:	4b2b      	ldr	r3, [pc, #172]	; (800c1d4 <HAL_RCC_ClockConfig+0x260>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f023 020f 	bic.w	r2, r3, #15
 800c12c:	4929      	ldr	r1, [pc, #164]	; (800c1d4 <HAL_RCC_ClockConfig+0x260>)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	4313      	orrs	r3, r2
 800c132:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c134:	f7f9 ff68 	bl	8006008 <HAL_GetTick>
 800c138:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c13a:	e00a      	b.n	800c152 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c13c:	f7f9 ff64 	bl	8006008 <HAL_GetTick>
 800c140:	4602      	mov	r2, r0
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	f241 3288 	movw	r2, #5000	; 0x1388
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d901      	bls.n	800c152 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800c14e:	2303      	movs	r3, #3
 800c150:	e03b      	b.n	800c1ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c152:	4b20      	ldr	r3, [pc, #128]	; (800c1d4 <HAL_RCC_ClockConfig+0x260>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 030f 	and.w	r3, r3, #15
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d1ed      	bne.n	800c13c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 0304 	and.w	r3, r3, #4
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d008      	beq.n	800c17e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c16c:	4b1a      	ldr	r3, [pc, #104]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	4917      	ldr	r1, [pc, #92]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c17a:	4313      	orrs	r3, r2
 800c17c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 0308 	and.w	r3, r3, #8
 800c186:	2b00      	cmp	r3, #0
 800c188:	d009      	beq.n	800c19e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c18a:	4b13      	ldr	r3, [pc, #76]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	00db      	lsls	r3, r3, #3
 800c198:	490f      	ldr	r1, [pc, #60]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c19a:	4313      	orrs	r3, r2
 800c19c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c19e:	f000 f825 	bl	800c1ec <HAL_RCC_GetSysClockFreq>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	4b0c      	ldr	r3, [pc, #48]	; (800c1d8 <HAL_RCC_ClockConfig+0x264>)
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	091b      	lsrs	r3, r3, #4
 800c1aa:	f003 030f 	and.w	r3, r3, #15
 800c1ae:	490c      	ldr	r1, [pc, #48]	; (800c1e0 <HAL_RCC_ClockConfig+0x26c>)
 800c1b0:	5ccb      	ldrb	r3, [r1, r3]
 800c1b2:	f003 031f 	and.w	r3, r3, #31
 800c1b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ba:	4a0a      	ldr	r2, [pc, #40]	; (800c1e4 <HAL_RCC_ClockConfig+0x270>)
 800c1bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c1be:	4b0a      	ldr	r3, [pc, #40]	; (800c1e8 <HAL_RCC_ClockConfig+0x274>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7f9 fed4 	bl	8005f70 <HAL_InitTick>
 800c1c8:	4603      	mov	r3, r0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3718      	adds	r7, #24
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	40022000 	.word	0x40022000
 800c1d8:	40021000 	.word	0x40021000
 800c1dc:	04c4b400 	.word	0x04c4b400
 800c1e0:	0801addc 	.word	0x0801addc
 800c1e4:	200001c4 	.word	0x200001c4
 800c1e8:	200001d8 	.word	0x200001d8

0800c1ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b087      	sub	sp, #28
 800c1f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c1f2:	4b2c      	ldr	r3, [pc, #176]	; (800c2a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	f003 030c 	and.w	r3, r3, #12
 800c1fa:	2b04      	cmp	r3, #4
 800c1fc:	d102      	bne.n	800c204 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c1fe:	4b2a      	ldr	r3, [pc, #168]	; (800c2a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c200:	613b      	str	r3, [r7, #16]
 800c202:	e047      	b.n	800c294 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c204:	4b27      	ldr	r3, [pc, #156]	; (800c2a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	f003 030c 	and.w	r3, r3, #12
 800c20c:	2b08      	cmp	r3, #8
 800c20e:	d102      	bne.n	800c216 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c210:	4b26      	ldr	r3, [pc, #152]	; (800c2ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800c212:	613b      	str	r3, [r7, #16]
 800c214:	e03e      	b.n	800c294 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c216:	4b23      	ldr	r3, [pc, #140]	; (800c2a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	f003 030c 	and.w	r3, r3, #12
 800c21e:	2b0c      	cmp	r3, #12
 800c220:	d136      	bne.n	800c290 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c222:	4b20      	ldr	r3, [pc, #128]	; (800c2a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	f003 0303 	and.w	r3, r3, #3
 800c22a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c22c:	4b1d      	ldr	r3, [pc, #116]	; (800c2a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	091b      	lsrs	r3, r3, #4
 800c232:	f003 030f 	and.w	r3, r3, #15
 800c236:	3301      	adds	r3, #1
 800c238:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2b03      	cmp	r3, #3
 800c23e:	d10c      	bne.n	800c25a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c240:	4a1a      	ldr	r2, [pc, #104]	; (800c2ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	fbb2 f3f3 	udiv	r3, r2, r3
 800c248:	4a16      	ldr	r2, [pc, #88]	; (800c2a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c24a:	68d2      	ldr	r2, [r2, #12]
 800c24c:	0a12      	lsrs	r2, r2, #8
 800c24e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c252:	fb02 f303 	mul.w	r3, r2, r3
 800c256:	617b      	str	r3, [r7, #20]
      break;
 800c258:	e00c      	b.n	800c274 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c25a:	4a13      	ldr	r2, [pc, #76]	; (800c2a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c262:	4a10      	ldr	r2, [pc, #64]	; (800c2a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c264:	68d2      	ldr	r2, [r2, #12]
 800c266:	0a12      	lsrs	r2, r2, #8
 800c268:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c26c:	fb02 f303 	mul.w	r3, r2, r3
 800c270:	617b      	str	r3, [r7, #20]
      break;
 800c272:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c274:	4b0b      	ldr	r3, [pc, #44]	; (800c2a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	0e5b      	lsrs	r3, r3, #25
 800c27a:	f003 0303 	and.w	r3, r3, #3
 800c27e:	3301      	adds	r3, #1
 800c280:	005b      	lsls	r3, r3, #1
 800c282:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	fbb2 f3f3 	udiv	r3, r2, r3
 800c28c:	613b      	str	r3, [r7, #16]
 800c28e:	e001      	b.n	800c294 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c290:	2300      	movs	r3, #0
 800c292:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c294:	693b      	ldr	r3, [r7, #16]
}
 800c296:	4618      	mov	r0, r3
 800c298:	371c      	adds	r7, #28
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	40021000 	.word	0x40021000
 800c2a8:	00f42400 	.word	0x00f42400
 800c2ac:	007a1200 	.word	0x007a1200

0800c2b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c2b4:	4b03      	ldr	r3, [pc, #12]	; (800c2c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	200001c4 	.word	0x200001c4

0800c2c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c2cc:	f7ff fff0 	bl	800c2b0 <HAL_RCC_GetHCLKFreq>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	4b06      	ldr	r3, [pc, #24]	; (800c2ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	0a1b      	lsrs	r3, r3, #8
 800c2d8:	f003 0307 	and.w	r3, r3, #7
 800c2dc:	4904      	ldr	r1, [pc, #16]	; (800c2f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c2de:	5ccb      	ldrb	r3, [r1, r3]
 800c2e0:	f003 031f 	and.w	r3, r3, #31
 800c2e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	40021000 	.word	0x40021000
 800c2f0:	0801adec 	.word	0x0801adec

0800c2f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c2f8:	f7ff ffda 	bl	800c2b0 <HAL_RCC_GetHCLKFreq>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	4b06      	ldr	r3, [pc, #24]	; (800c318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	0adb      	lsrs	r3, r3, #11
 800c304:	f003 0307 	and.w	r3, r3, #7
 800c308:	4904      	ldr	r1, [pc, #16]	; (800c31c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c30a:	5ccb      	ldrb	r3, [r1, r3]
 800c30c:	f003 031f 	and.w	r3, r3, #31
 800c310:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c314:	4618      	mov	r0, r3
 800c316:	bd80      	pop	{r7, pc}
 800c318:	40021000 	.word	0x40021000
 800c31c:	0801adec 	.word	0x0801adec

0800c320 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c326:	4b1e      	ldr	r3, [pc, #120]	; (800c3a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	f003 0303 	and.w	r3, r3, #3
 800c32e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c330:	4b1b      	ldr	r3, [pc, #108]	; (800c3a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	091b      	lsrs	r3, r3, #4
 800c336:	f003 030f 	and.w	r3, r3, #15
 800c33a:	3301      	adds	r3, #1
 800c33c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	2b03      	cmp	r3, #3
 800c342:	d10c      	bne.n	800c35e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c344:	4a17      	ldr	r2, [pc, #92]	; (800c3a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	fbb2 f3f3 	udiv	r3, r2, r3
 800c34c:	4a14      	ldr	r2, [pc, #80]	; (800c3a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c34e:	68d2      	ldr	r2, [r2, #12]
 800c350:	0a12      	lsrs	r2, r2, #8
 800c352:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c356:	fb02 f303 	mul.w	r3, r2, r3
 800c35a:	617b      	str	r3, [r7, #20]
    break;
 800c35c:	e00c      	b.n	800c378 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c35e:	4a12      	ldr	r2, [pc, #72]	; (800c3a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	fbb2 f3f3 	udiv	r3, r2, r3
 800c366:	4a0e      	ldr	r2, [pc, #56]	; (800c3a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c368:	68d2      	ldr	r2, [r2, #12]
 800c36a:	0a12      	lsrs	r2, r2, #8
 800c36c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c370:	fb02 f303 	mul.w	r3, r2, r3
 800c374:	617b      	str	r3, [r7, #20]
    break;
 800c376:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c378:	4b09      	ldr	r3, [pc, #36]	; (800c3a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	0e5b      	lsrs	r3, r3, #25
 800c37e:	f003 0303 	and.w	r3, r3, #3
 800c382:	3301      	adds	r3, #1
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c388:	697a      	ldr	r2, [r7, #20]
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c390:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c392:	687b      	ldr	r3, [r7, #4]
}
 800c394:	4618      	mov	r0, r3
 800c396:	371c      	adds	r7, #28
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	40021000 	.word	0x40021000
 800c3a4:	007a1200 	.word	0x007a1200
 800c3a8:	00f42400 	.word	0x00f42400

0800c3ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f000 8098 	beq.w	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c3ce:	4b43      	ldr	r3, [pc, #268]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d10d      	bne.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c3da:	4b40      	ldr	r3, [pc, #256]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c3dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3de:	4a3f      	ldr	r2, [pc, #252]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c3e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3e4:	6593      	str	r3, [r2, #88]	; 0x58
 800c3e6:	4b3d      	ldr	r3, [pc, #244]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3ee:	60bb      	str	r3, [r7, #8]
 800c3f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c3f6:	4b3a      	ldr	r3, [pc, #232]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a39      	ldr	r2, [pc, #228]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c3fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c400:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c402:	f7f9 fe01 	bl	8006008 <HAL_GetTick>
 800c406:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c408:	e009      	b.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c40a:	f7f9 fdfd 	bl	8006008 <HAL_GetTick>
 800c40e:	4602      	mov	r2, r0
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	1ad3      	subs	r3, r2, r3
 800c414:	2b02      	cmp	r3, #2
 800c416:	d902      	bls.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c418:	2303      	movs	r3, #3
 800c41a:	74fb      	strb	r3, [r7, #19]
        break;
 800c41c:	e005      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c41e:	4b30      	ldr	r3, [pc, #192]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c426:	2b00      	cmp	r3, #0
 800c428:	d0ef      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c42a:	7cfb      	ldrb	r3, [r7, #19]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d159      	bne.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c430:	4b2a      	ldr	r3, [pc, #168]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c43a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d01e      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c446:	697a      	ldr	r2, [r7, #20]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d019      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c44c:	4b23      	ldr	r3, [pc, #140]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c456:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c458:	4b20      	ldr	r3, [pc, #128]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c45e:	4a1f      	ldr	r2, [pc, #124]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c468:	4b1c      	ldr	r3, [pc, #112]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c46e:	4a1b      	ldr	r2, [pc, #108]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c478:	4a18      	ldr	r2, [pc, #96]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f003 0301 	and.w	r3, r3, #1
 800c486:	2b00      	cmp	r3, #0
 800c488:	d016      	beq.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c48a:	f7f9 fdbd 	bl	8006008 <HAL_GetTick>
 800c48e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c490:	e00b      	b.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c492:	f7f9 fdb9 	bl	8006008 <HAL_GetTick>
 800c496:	4602      	mov	r2, r0
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d902      	bls.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	74fb      	strb	r3, [r7, #19]
            break;
 800c4a8:	e006      	b.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c4aa:	4b0c      	ldr	r3, [pc, #48]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4b0:	f003 0302 	and.w	r3, r3, #2
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d0ec      	beq.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c4b8:	7cfb      	ldrb	r3, [r7, #19]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10b      	bne.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c4be:	4b07      	ldr	r3, [pc, #28]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4cc:	4903      	ldr	r1, [pc, #12]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c4d4:	e008      	b.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c4d6:	7cfb      	ldrb	r3, [r7, #19]
 800c4d8:	74bb      	strb	r3, [r7, #18]
 800c4da:	e005      	b.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c4dc:	40021000 	.word	0x40021000
 800c4e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4e4:	7cfb      	ldrb	r3, [r7, #19]
 800c4e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c4e8:	7c7b      	ldrb	r3, [r7, #17]
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d105      	bne.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c4ee:	4ba6      	ldr	r3, [pc, #664]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4f2:	4aa5      	ldr	r2, [pc, #660]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00a      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c506:	4ba0      	ldr	r3, [pc, #640]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c50c:	f023 0203 	bic.w	r2, r3, #3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	499c      	ldr	r1, [pc, #624]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c516:	4313      	orrs	r3, r2
 800c518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f003 0302 	and.w	r3, r3, #2
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00a      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c528:	4b97      	ldr	r3, [pc, #604]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c52e:	f023 020c 	bic.w	r2, r3, #12
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	4994      	ldr	r1, [pc, #592]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c538:	4313      	orrs	r3, r2
 800c53a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f003 0304 	and.w	r3, r3, #4
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00a      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c54a:	4b8f      	ldr	r3, [pc, #572]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c550:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	498b      	ldr	r1, [pc, #556]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c55a:	4313      	orrs	r3, r2
 800c55c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 0308 	and.w	r3, r3, #8
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c56c:	4b86      	ldr	r3, [pc, #536]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c56e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c572:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	4983      	ldr	r1, [pc, #524]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c57c:	4313      	orrs	r3, r2
 800c57e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 0320 	and.w	r3, r3, #32
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00a      	beq.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c58e:	4b7e      	ldr	r3, [pc, #504]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c594:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	695b      	ldr	r3, [r3, #20]
 800c59c:	497a      	ldr	r1, [pc, #488]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00a      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c5b0:	4b75      	ldr	r3, [pc, #468]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	4972      	ldr	r1, [pc, #456]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00a      	beq.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c5d2:	4b6d      	ldr	r3, [pc, #436]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	69db      	ldr	r3, [r3, #28]
 800c5e0:	4969      	ldr	r1, [pc, #420]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00a      	beq.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c5f4:	4b64      	ldr	r3, [pc, #400]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	4961      	ldr	r1, [pc, #388]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c604:	4313      	orrs	r3, r2
 800c606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00a      	beq.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c616:	4b5c      	ldr	r3, [pc, #368]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c61c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c624:	4958      	ldr	r1, [pc, #352]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c626:	4313      	orrs	r3, r2
 800c628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c634:	2b00      	cmp	r3, #0
 800c636:	d015      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c638:	4b53      	ldr	r3, [pc, #332]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c63e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c646:	4950      	ldr	r1, [pc, #320]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c648:	4313      	orrs	r3, r2
 800c64a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c656:	d105      	bne.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c658:	4b4b      	ldr	r3, [pc, #300]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	4a4a      	ldr	r2, [pc, #296]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c65e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c662:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d015      	beq.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c670:	4b45      	ldr	r3, [pc, #276]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c676:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67e:	4942      	ldr	r1, [pc, #264]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c680:	4313      	orrs	r3, r2
 800c682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c68e:	d105      	bne.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c690:	4b3d      	ldr	r3, [pc, #244]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	4a3c      	ldr	r2, [pc, #240]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c69a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d015      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c6a8:	4b37      	ldr	r3, [pc, #220]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b6:	4934      	ldr	r1, [pc, #208]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c6c6:	d105      	bne.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c6c8:	4b2f      	ldr	r3, [pc, #188]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	4a2e      	ldr	r2, [pc, #184]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d015      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6e0:	4b29      	ldr	r3, [pc, #164]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ee:	4926      	ldr	r1, [pc, #152]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6fe:	d105      	bne.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c700:	4b21      	ldr	r3, [pc, #132]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	4a20      	ldr	r2, [pc, #128]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c70a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d015      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c718:	4b1b      	ldr	r3, [pc, #108]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c71e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c726:	4918      	ldr	r1, [pc, #96]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c728:	4313      	orrs	r3, r2
 800c72a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c736:	d105      	bne.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c738:	4b13      	ldr	r3, [pc, #76]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	4a12      	ldr	r2, [pc, #72]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c73e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c742:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d015      	beq.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c750:	4b0d      	ldr	r3, [pc, #52]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c756:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c75e:	490a      	ldr	r1, [pc, #40]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c760:	4313      	orrs	r3, r2
 800c762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c76a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c76e:	d105      	bne.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c770:	4b05      	ldr	r3, [pc, #20]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	4a04      	ldr	r2, [pc, #16]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c77a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c77c:	7cbb      	ldrb	r3, [r7, #18]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	40021000 	.word	0x40021000

0800c78c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d101      	bne.n	800c79e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	e09d      	b.n	800c8da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d108      	bne.n	800c7b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7ae:	d009      	beq.n	800c7c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	61da      	str	r2, [r3, #28]
 800c7b6:	e005      	b.n	800c7c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d106      	bne.n	800c7e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f7f8 fba0 	bl	8004f24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2202      	movs	r2, #2
 800c7e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c804:	d902      	bls.n	800c80c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c806:	2300      	movs	r3, #0
 800c808:	60fb      	str	r3, [r7, #12]
 800c80a:	e002      	b.n	800c812 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c80c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c810:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c81a:	d007      	beq.n	800c82c <HAL_SPI_Init+0xa0>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c824:	d002      	beq.n	800c82c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c83c:	431a      	orrs	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	f003 0302 	and.w	r3, r3, #2
 800c846:	431a      	orrs	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	695b      	ldr	r3, [r3, #20]
 800c84c:	f003 0301 	and.w	r3, r3, #1
 800c850:	431a      	orrs	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	699b      	ldr	r3, [r3, #24]
 800c856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c85a:	431a      	orrs	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	69db      	ldr	r3, [r3, #28]
 800c860:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c864:	431a      	orrs	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c86e:	ea42 0103 	orr.w	r1, r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c876:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	430a      	orrs	r2, r1
 800c880:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	699b      	ldr	r3, [r3, #24]
 800c886:	0c1b      	lsrs	r3, r3, #16
 800c888:	f003 0204 	and.w	r2, r3, #4
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c890:	f003 0310 	and.w	r3, r3, #16
 800c894:	431a      	orrs	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c89a:	f003 0308 	and.w	r3, r3, #8
 800c89e:	431a      	orrs	r2, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c8a8:	ea42 0103 	orr.w	r1, r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	430a      	orrs	r2, r1
 800c8b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	69da      	ldr	r2, [r3, #28]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c8c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b088      	sub	sp, #32
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	60f8      	str	r0, [r7, #12]
 800c8ea:	60b9      	str	r1, [r7, #8]
 800c8ec:	603b      	str	r3, [r7, #0]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d101      	bne.n	800c904 <HAL_SPI_Transmit+0x22>
 800c900:	2302      	movs	r3, #2
 800c902:	e15f      	b.n	800cbc4 <HAL_SPI_Transmit+0x2e2>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c90c:	f7f9 fb7c 	bl	8006008 <HAL_GetTick>
 800c910:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c912:	88fb      	ldrh	r3, [r7, #6]
 800c914:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d002      	beq.n	800c928 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c922:	2302      	movs	r3, #2
 800c924:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c926:	e148      	b.n	800cbba <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d002      	beq.n	800c934 <HAL_SPI_Transmit+0x52>
 800c92e:	88fb      	ldrh	r3, [r7, #6]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d102      	bne.n	800c93a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c938:	e13f      	b.n	800cbba <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2203      	movs	r2, #3
 800c93e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	88fa      	ldrh	r2, [r7, #6]
 800c952:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	88fa      	ldrh	r2, [r7, #6]
 800c958:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2200      	movs	r2, #0
 800c964:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2200      	movs	r2, #0
 800c974:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2200      	movs	r2, #0
 800c97a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c984:	d10f      	bne.n	800c9a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c994:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c9a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b0:	2b40      	cmp	r3, #64	; 0x40
 800c9b2:	d007      	beq.n	800c9c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c9cc:	d94f      	bls.n	800ca6e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d002      	beq.n	800c9dc <HAL_SPI_Transmit+0xfa>
 800c9d6:	8afb      	ldrh	r3, [r7, #22]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d142      	bne.n	800ca62 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e0:	881a      	ldrh	r2, [r3, #0]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ec:	1c9a      	adds	r2, r3, #2
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ca00:	e02f      	b.n	800ca62 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f003 0302 	and.w	r3, r3, #2
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d112      	bne.n	800ca36 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca14:	881a      	ldrh	r2, [r3, #0]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca20:	1c9a      	adds	r2, r3, #2
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ca34:	e015      	b.n	800ca62 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca36:	f7f9 fae7 	bl	8006008 <HAL_GetTick>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	1ad3      	subs	r3, r2, r3
 800ca40:	683a      	ldr	r2, [r7, #0]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d803      	bhi.n	800ca4e <HAL_SPI_Transmit+0x16c>
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca4c:	d102      	bne.n	800ca54 <HAL_SPI_Transmit+0x172>
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d106      	bne.n	800ca62 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800ca54:	2303      	movs	r3, #3
 800ca56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800ca60:	e0ab      	b.n	800cbba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1ca      	bne.n	800ca02 <HAL_SPI_Transmit+0x120>
 800ca6c:	e080      	b.n	800cb70 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <HAL_SPI_Transmit+0x19a>
 800ca76:	8afb      	ldrh	r3, [r7, #22]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d174      	bne.n	800cb66 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d912      	bls.n	800caac <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8a:	881a      	ldrh	r2, [r3, #0]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca96:	1c9a      	adds	r2, r3, #2
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	3b02      	subs	r3, #2
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800caaa:	e05c      	b.n	800cb66 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	330c      	adds	r3, #12
 800cab6:	7812      	ldrb	r2, [r2, #0]
 800cab8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cac8:	b29b      	uxth	r3, r3
 800caca:	3b01      	subs	r3, #1
 800cacc:	b29a      	uxth	r2, r3
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800cad2:	e048      	b.n	800cb66 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	f003 0302 	and.w	r3, r3, #2
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d12b      	bne.n	800cb3a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d912      	bls.n	800cb12 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf0:	881a      	ldrh	r2, [r3, #0]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafc:	1c9a      	adds	r2, r3, #2
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	3b02      	subs	r3, #2
 800cb0a:	b29a      	uxth	r2, r3
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cb10:	e029      	b.n	800cb66 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	330c      	adds	r3, #12
 800cb1c:	7812      	ldrb	r2, [r2, #0]
 800cb1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb24:	1c5a      	adds	r2, r3, #1
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	3b01      	subs	r3, #1
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cb38:	e015      	b.n	800cb66 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb3a:	f7f9 fa65 	bl	8006008 <HAL_GetTick>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d803      	bhi.n	800cb52 <HAL_SPI_Transmit+0x270>
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb50:	d102      	bne.n	800cb58 <HAL_SPI_Transmit+0x276>
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d106      	bne.n	800cb66 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800cb64:	e029      	b.n	800cbba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1b1      	bne.n	800cad4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cb70:	69ba      	ldr	r2, [r7, #24]
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f000 fad7 	bl	800d128 <SPI_EndRxTxTransaction>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d002      	beq.n	800cb86 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2220      	movs	r2, #32
 800cb84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10a      	bne.n	800cba4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cb8e:	2300      	movs	r3, #0
 800cb90:	613b      	str	r3, [r7, #16]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	613b      	str	r3, [r7, #16]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	613b      	str	r3, [r7, #16]
 800cba2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800cbac:	2301      	movs	r3, #1
 800cbae:	77fb      	strb	r3, [r7, #31]
 800cbb0:	e003      	b.n	800cbba <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cbc2:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3720      	adds	r7, #32
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d101      	bne.n	800cbec <HAL_SPI_Transmit_DMA+0x20>
 800cbe8:	2302      	movs	r3, #2
 800cbea:	e0d4      	b.n	800cd96 <HAL_SPI_Transmit_DMA+0x1ca>
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d002      	beq.n	800cc06 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800cc00:	2302      	movs	r3, #2
 800cc02:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cc04:	e0c2      	b.n	800cd8c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <HAL_SPI_Transmit_DMA+0x46>
 800cc0c:	88fb      	ldrh	r3, [r7, #6]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d102      	bne.n	800cc18 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cc16:	e0b9      	b.n	800cd8c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2203      	movs	r2, #3
 800cc1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	68ba      	ldr	r2, [r7, #8]
 800cc2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	88fa      	ldrh	r2, [r7, #6]
 800cc30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	88fa      	ldrh	r2, [r7, #6]
 800cc36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2200      	movs	r2, #0
 800cc42:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2200      	movs	r2, #0
 800cc48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc62:	d10f      	bne.n	800cc84 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cc82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc88:	4a45      	ldr	r2, [pc, #276]	; (800cda0 <HAL_SPI_Transmit_DMA+0x1d4>)
 800cc8a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc90:	4a44      	ldr	r2, [pc, #272]	; (800cda4 <HAL_SPI_Transmit_DMA+0x1d8>)
 800cc92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc98:	4a43      	ldr	r2, [pc, #268]	; (800cda8 <HAL_SPI_Transmit_DMA+0x1dc>)
 800cc9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cca0:	2200      	movs	r2, #0
 800cca2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	685a      	ldr	r2, [r3, #4]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ccb2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ccbc:	d82d      	bhi.n	800cd1a <HAL_SPI_Transmit_DMA+0x14e>
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccc2:	699b      	ldr	r3, [r3, #24]
 800ccc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccc8:	d127      	bne.n	800cd1a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	f003 0301 	and.w	r3, r3, #1
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d10f      	bne.n	800ccf8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	685a      	ldr	r2, [r3, #4]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cce6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	085b      	lsrs	r3, r3, #1
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ccf6:	e010      	b.n	800cd1a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	685a      	ldr	r2, [r3, #4]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd06:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	085b      	lsrs	r3, r3, #1
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	3301      	adds	r3, #1
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd22:	4619      	mov	r1, r3
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	330c      	adds	r3, #12
 800cd2a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd30:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cd32:	f7fc f87b 	bl	8008e2c <HAL_DMA_Start_IT>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d008      	beq.n	800cd4e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd40:	f043 0210 	orr.w	r2, r3, #16
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cd4c:	e01e      	b.n	800cd8c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd58:	2b40      	cmp	r3, #64	; 0x40
 800cd5a:	d007      	beq.n	800cd6c <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd6a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f042 0220 	orr.w	r2, r2, #32
 800cd7a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	685a      	ldr	r2, [r3, #4]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f042 0202 	orr.w	r2, r2, #2
 800cd8a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	0800ce8f 	.word	0x0800ce8f
 800cda4:	0800cde9 	.word	0x0800cde9
 800cda8:	0800ceab 	.word	0x0800ceab

0800cdac <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cdb4:	bf00      	nop
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800cdc8:	bf00      	nop
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cddc:	bf00      	nop
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cdf6:	f7f9 f907 	bl	8006008 <HAL_GetTick>
 800cdfa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f003 0320 	and.w	r3, r3, #32
 800ce06:	2b20      	cmp	r3, #32
 800ce08:	d03b      	beq.n	800ce82 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	685a      	ldr	r2, [r3, #4]
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f022 0220 	bic.w	r2, r2, #32
 800ce18:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	685a      	ldr	r2, [r3, #4]
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f022 0202 	bic.w	r2, r2, #2
 800ce28:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ce2a:	693a      	ldr	r2, [r7, #16]
 800ce2c:	2164      	movs	r1, #100	; 0x64
 800ce2e:	6978      	ldr	r0, [r7, #20]
 800ce30:	f000 f97a 	bl	800d128 <SPI_EndRxTxTransaction>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d005      	beq.n	800ce46 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce3e:	f043 0220 	orr.w	r2, r3, #32
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10a      	bne.n	800ce64 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce4e:	2300      	movs	r3, #0
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	60fb      	str	r3, [r7, #12]
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	60fb      	str	r3, [r7, #12]
 800ce62:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2200      	movs	r2, #0
 800ce68:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d003      	beq.n	800ce82 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ce7a:	6978      	ldr	r0, [r7, #20]
 800ce7c:	f7ff ffaa 	bl	800cdd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ce80:	e002      	b.n	800ce88 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ce82:	6978      	ldr	r0, [r7, #20]
 800ce84:	f7ff ff92 	bl	800cdac <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ce88:	3718      	adds	r7, #24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b084      	sub	sp, #16
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f7ff ff8f 	bl	800cdc0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cea2:	bf00      	nop
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b084      	sub	sp, #16
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	685a      	ldr	r2, [r3, #4]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f022 0203 	bic.w	r2, r2, #3
 800cec6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cecc:	f043 0210 	orr.w	r2, r3, #16
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	f7ff ff79 	bl	800cdd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cee2:	bf00      	nop
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
	...

0800ceec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b088      	sub	sp, #32
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	603b      	str	r3, [r7, #0]
 800cef8:	4613      	mov	r3, r2
 800cefa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cefc:	f7f9 f884 	bl	8006008 <HAL_GetTick>
 800cf00:	4602      	mov	r2, r0
 800cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf04:	1a9b      	subs	r3, r3, r2
 800cf06:	683a      	ldr	r2, [r7, #0]
 800cf08:	4413      	add	r3, r2
 800cf0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cf0c:	f7f9 f87c 	bl	8006008 <HAL_GetTick>
 800cf10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cf12:	4b39      	ldr	r3, [pc, #228]	; (800cff8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	015b      	lsls	r3, r3, #5
 800cf18:	0d1b      	lsrs	r3, r3, #20
 800cf1a:	69fa      	ldr	r2, [r7, #28]
 800cf1c:	fb02 f303 	mul.w	r3, r2, r3
 800cf20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cf22:	e054      	b.n	800cfce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf2a:	d050      	beq.n	800cfce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cf2c:	f7f9 f86c 	bl	8006008 <HAL_GetTick>
 800cf30:	4602      	mov	r2, r0
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	69fa      	ldr	r2, [r7, #28]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d902      	bls.n	800cf42 <SPI_WaitFlagStateUntilTimeout+0x56>
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d13d      	bne.n	800cfbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	685a      	ldr	r2, [r3, #4]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cf50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf5a:	d111      	bne.n	800cf80 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf64:	d004      	beq.n	800cf70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf6e:	d107      	bne.n	800cf80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf88:	d10f      	bne.n	800cfaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf98:	601a      	str	r2, [r3, #0]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cfa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	e017      	b.n	800cfee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d101      	bne.n	800cfc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	689a      	ldr	r2, [r3, #8]
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	bf0c      	ite	eq
 800cfde:	2301      	moveq	r3, #1
 800cfe0:	2300      	movne	r3, #0
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	79fb      	ldrb	r3, [r7, #7]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d19b      	bne.n	800cf24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cfec:	2300      	movs	r3, #0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3720      	adds	r7, #32
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	200001c4 	.word	0x200001c4

0800cffc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b08a      	sub	sp, #40	; 0x28
 800d000:	af00      	add	r7, sp, #0
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	60b9      	str	r1, [r7, #8]
 800d006:	607a      	str	r2, [r7, #4]
 800d008:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d00e:	f7f8 fffb 	bl	8006008 <HAL_GetTick>
 800d012:	4602      	mov	r2, r0
 800d014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d016:	1a9b      	subs	r3, r3, r2
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	4413      	add	r3, r2
 800d01c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d01e:	f7f8 fff3 	bl	8006008 <HAL_GetTick>
 800d022:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	330c      	adds	r3, #12
 800d02a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d02c:	4b3d      	ldr	r3, [pc, #244]	; (800d124 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	4613      	mov	r3, r2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4413      	add	r3, r2
 800d036:	00da      	lsls	r2, r3, #3
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	0d1b      	lsrs	r3, r3, #20
 800d03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d03e:	fb02 f303 	mul.w	r3, r2, r3
 800d042:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d044:	e060      	b.n	800d108 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d04c:	d107      	bne.n	800d05e <SPI_WaitFifoStateUntilTimeout+0x62>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d104      	bne.n	800d05e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d05c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d064:	d050      	beq.n	800d108 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d066:	f7f8 ffcf 	bl	8006008 <HAL_GetTick>
 800d06a:	4602      	mov	r2, r0
 800d06c:	6a3b      	ldr	r3, [r7, #32]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d072:	429a      	cmp	r2, r3
 800d074:	d902      	bls.n	800d07c <SPI_WaitFifoStateUntilTimeout+0x80>
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d13d      	bne.n	800d0f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	685a      	ldr	r2, [r3, #4]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d08a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d094:	d111      	bne.n	800d0ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d09e:	d004      	beq.n	800d0aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0a8:	d107      	bne.n	800d0ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0c2:	d10f      	bne.n	800d0e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d0e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e010      	b.n	800d11a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d101      	bne.n	800d102 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d0fe:	2300      	movs	r3, #0
 800d100:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	3b01      	subs	r3, #1
 800d106:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	689a      	ldr	r2, [r3, #8]
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	4013      	ands	r3, r2
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	429a      	cmp	r2, r3
 800d116:	d196      	bne.n	800d046 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3728      	adds	r7, #40	; 0x28
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	200001c4 	.word	0x200001c4

0800d128 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af02      	add	r7, sp, #8
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f7ff ff5b 	bl	800cffc <SPI_WaitFifoStateUntilTimeout>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d007      	beq.n	800d15c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d150:	f043 0220 	orr.w	r2, r3, #32
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d158:	2303      	movs	r3, #3
 800d15a:	e027      	b.n	800d1ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	2200      	movs	r2, #0
 800d164:	2180      	movs	r1, #128	; 0x80
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	f7ff fec0 	bl	800ceec <SPI_WaitFlagStateUntilTimeout>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d007      	beq.n	800d182 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d176:	f043 0220 	orr.w	r2, r3, #32
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d17e:	2303      	movs	r3, #3
 800d180:	e014      	b.n	800d1ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	2200      	movs	r2, #0
 800d18a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f7ff ff34 	bl	800cffc <SPI_WaitFifoStateUntilTimeout>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d007      	beq.n	800d1aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d19e:	f043 0220 	orr.w	r2, r3, #32
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d1a6:	2303      	movs	r3, #3
 800d1a8:	e000      	b.n	800d1ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d101      	bne.n	800d1c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e049      	b.n	800d25a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d106      	bne.n	800d1e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7f7 ffc4 	bl	8005168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2202      	movs	r2, #2
 800d1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	f000 ff72 	bl	800e0dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2201      	movs	r2, #1
 800d254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
	...

0800d264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d272:	b2db      	uxtb	r3, r3
 800d274:	2b01      	cmp	r3, #1
 800d276:	d001      	beq.n	800d27c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d278:	2301      	movs	r3, #1
 800d27a:	e04a      	b.n	800d312 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2202      	movs	r2, #2
 800d280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	68da      	ldr	r2, [r3, #12]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f042 0201 	orr.w	r2, r2, #1
 800d292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a21      	ldr	r2, [pc, #132]	; (800d320 <HAL_TIM_Base_Start_IT+0xbc>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d018      	beq.n	800d2d0 <HAL_TIM_Base_Start_IT+0x6c>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2a6:	d013      	beq.n	800d2d0 <HAL_TIM_Base_Start_IT+0x6c>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a1d      	ldr	r2, [pc, #116]	; (800d324 <HAL_TIM_Base_Start_IT+0xc0>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d00e      	beq.n	800d2d0 <HAL_TIM_Base_Start_IT+0x6c>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a1c      	ldr	r2, [pc, #112]	; (800d328 <HAL_TIM_Base_Start_IT+0xc4>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d009      	beq.n	800d2d0 <HAL_TIM_Base_Start_IT+0x6c>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a1a      	ldr	r2, [pc, #104]	; (800d32c <HAL_TIM_Base_Start_IT+0xc8>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d004      	beq.n	800d2d0 <HAL_TIM_Base_Start_IT+0x6c>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a19      	ldr	r2, [pc, #100]	; (800d330 <HAL_TIM_Base_Start_IT+0xcc>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d115      	bne.n	800d2fc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	689a      	ldr	r2, [r3, #8]
 800d2d6:	4b17      	ldr	r3, [pc, #92]	; (800d334 <HAL_TIM_Base_Start_IT+0xd0>)
 800d2d8:	4013      	ands	r3, r2
 800d2da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2b06      	cmp	r3, #6
 800d2e0:	d015      	beq.n	800d30e <HAL_TIM_Base_Start_IT+0xaa>
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2e8:	d011      	beq.n	800d30e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f042 0201 	orr.w	r2, r2, #1
 800d2f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2fa:	e008      	b.n	800d30e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f042 0201 	orr.w	r2, r2, #1
 800d30a:	601a      	str	r2, [r3, #0]
 800d30c:	e000      	b.n	800d310 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d30e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d310:	2300      	movs	r3, #0
}
 800d312:	4618      	mov	r0, r3
 800d314:	3714      	adds	r7, #20
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	40012c00 	.word	0x40012c00
 800d324:	40000400 	.word	0x40000400
 800d328:	40000800 	.word	0x40000800
 800d32c:	40013400 	.word	0x40013400
 800d330:	40014000 	.word	0x40014000
 800d334:	00010007 	.word	0x00010007

0800d338 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	68da      	ldr	r2, [r3, #12]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f022 0201 	bic.w	r2, r2, #1
 800d34e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	6a1a      	ldr	r2, [r3, #32]
 800d356:	f241 1311 	movw	r3, #4369	; 0x1111
 800d35a:	4013      	ands	r3, r2
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d10f      	bne.n	800d380 <HAL_TIM_Base_Stop_IT+0x48>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6a1a      	ldr	r2, [r3, #32]
 800d366:	f244 4344 	movw	r3, #17476	; 0x4444
 800d36a:	4013      	ands	r3, r2
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d107      	bne.n	800d380 <HAL_TIM_Base_Stop_IT+0x48>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f022 0201 	bic.w	r2, r2, #1
 800d37e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2201      	movs	r2, #1
 800d384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b082      	sub	sp, #8
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e049      	b.n	800d43c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d106      	bne.n	800d3c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7f7 fe23 	bl	8005008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2202      	movs	r2, #2
 800d3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	f000 fe81 	bl	800e0dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2201      	movs	r2, #1
 800d416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2201      	movs	r2, #1
 800d436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d44e:	2300      	movs	r3, #0
 800d450:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d109      	bne.n	800d46c <HAL_TIM_PWM_Start_IT+0x28>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	2b01      	cmp	r3, #1
 800d462:	bf14      	ite	ne
 800d464:	2301      	movne	r3, #1
 800d466:	2300      	moveq	r3, #0
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	e03c      	b.n	800d4e6 <HAL_TIM_PWM_Start_IT+0xa2>
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	2b04      	cmp	r3, #4
 800d470:	d109      	bne.n	800d486 <HAL_TIM_PWM_Start_IT+0x42>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	bf14      	ite	ne
 800d47e:	2301      	movne	r3, #1
 800d480:	2300      	moveq	r3, #0
 800d482:	b2db      	uxtb	r3, r3
 800d484:	e02f      	b.n	800d4e6 <HAL_TIM_PWM_Start_IT+0xa2>
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	2b08      	cmp	r3, #8
 800d48a:	d109      	bne.n	800d4a0 <HAL_TIM_PWM_Start_IT+0x5c>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d492:	b2db      	uxtb	r3, r3
 800d494:	2b01      	cmp	r3, #1
 800d496:	bf14      	ite	ne
 800d498:	2301      	movne	r3, #1
 800d49a:	2300      	moveq	r3, #0
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	e022      	b.n	800d4e6 <HAL_TIM_PWM_Start_IT+0xa2>
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2b0c      	cmp	r3, #12
 800d4a4:	d109      	bne.n	800d4ba <HAL_TIM_PWM_Start_IT+0x76>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	bf14      	ite	ne
 800d4b2:	2301      	movne	r3, #1
 800d4b4:	2300      	moveq	r3, #0
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	e015      	b.n	800d4e6 <HAL_TIM_PWM_Start_IT+0xa2>
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2b10      	cmp	r3, #16
 800d4be:	d109      	bne.n	800d4d4 <HAL_TIM_PWM_Start_IT+0x90>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	bf14      	ite	ne
 800d4cc:	2301      	movne	r3, #1
 800d4ce:	2300      	moveq	r3, #0
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	e008      	b.n	800d4e6 <HAL_TIM_PWM_Start_IT+0xa2>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	bf14      	ite	ne
 800d4e0:	2301      	movne	r3, #1
 800d4e2:	2300      	moveq	r3, #0
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e0e2      	b.n	800d6b4 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d104      	bne.n	800d4fe <HAL_TIM_PWM_Start_IT+0xba>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4fc:	e023      	b.n	800d546 <HAL_TIM_PWM_Start_IT+0x102>
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	2b04      	cmp	r3, #4
 800d502:	d104      	bne.n	800d50e <HAL_TIM_PWM_Start_IT+0xca>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2202      	movs	r2, #2
 800d508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d50c:	e01b      	b.n	800d546 <HAL_TIM_PWM_Start_IT+0x102>
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b08      	cmp	r3, #8
 800d512:	d104      	bne.n	800d51e <HAL_TIM_PWM_Start_IT+0xda>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2202      	movs	r2, #2
 800d518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d51c:	e013      	b.n	800d546 <HAL_TIM_PWM_Start_IT+0x102>
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	2b0c      	cmp	r3, #12
 800d522:	d104      	bne.n	800d52e <HAL_TIM_PWM_Start_IT+0xea>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2202      	movs	r2, #2
 800d528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d52c:	e00b      	b.n	800d546 <HAL_TIM_PWM_Start_IT+0x102>
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	2b10      	cmp	r3, #16
 800d532:	d104      	bne.n	800d53e <HAL_TIM_PWM_Start_IT+0xfa>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2202      	movs	r2, #2
 800d538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d53c:	e003      	b.n	800d546 <HAL_TIM_PWM_Start_IT+0x102>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2202      	movs	r2, #2
 800d542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	2b0c      	cmp	r3, #12
 800d54a:	d841      	bhi.n	800d5d0 <HAL_TIM_PWM_Start_IT+0x18c>
 800d54c:	a201      	add	r2, pc, #4	; (adr r2, 800d554 <HAL_TIM_PWM_Start_IT+0x110>)
 800d54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d552:	bf00      	nop
 800d554:	0800d589 	.word	0x0800d589
 800d558:	0800d5d1 	.word	0x0800d5d1
 800d55c:	0800d5d1 	.word	0x0800d5d1
 800d560:	0800d5d1 	.word	0x0800d5d1
 800d564:	0800d59b 	.word	0x0800d59b
 800d568:	0800d5d1 	.word	0x0800d5d1
 800d56c:	0800d5d1 	.word	0x0800d5d1
 800d570:	0800d5d1 	.word	0x0800d5d1
 800d574:	0800d5ad 	.word	0x0800d5ad
 800d578:	0800d5d1 	.word	0x0800d5d1
 800d57c:	0800d5d1 	.word	0x0800d5d1
 800d580:	0800d5d1 	.word	0x0800d5d1
 800d584:	0800d5bf 	.word	0x0800d5bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68da      	ldr	r2, [r3, #12]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f042 0202 	orr.w	r2, r2, #2
 800d596:	60da      	str	r2, [r3, #12]
      break;
 800d598:	e01d      	b.n	800d5d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	68da      	ldr	r2, [r3, #12]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f042 0204 	orr.w	r2, r2, #4
 800d5a8:	60da      	str	r2, [r3, #12]
      break;
 800d5aa:	e014      	b.n	800d5d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	68da      	ldr	r2, [r3, #12]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f042 0208 	orr.w	r2, r2, #8
 800d5ba:	60da      	str	r2, [r3, #12]
      break;
 800d5bc:	e00b      	b.n	800d5d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	68da      	ldr	r2, [r3, #12]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f042 0210 	orr.w	r2, r2, #16
 800d5cc:	60da      	str	r2, [r3, #12]
      break;
 800d5ce:	e002      	b.n	800d5d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d5d4:	bf00      	nop
  }

  if (status == HAL_OK)
 800d5d6:	7bfb      	ldrb	r3, [r7, #15]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d16a      	bne.n	800d6b2 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	6839      	ldr	r1, [r7, #0]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f001 f90b 	bl	800e800 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a33      	ldr	r2, [pc, #204]	; (800d6bc <HAL_TIM_PWM_Start_IT+0x278>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d013      	beq.n	800d61c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a31      	ldr	r2, [pc, #196]	; (800d6c0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d00e      	beq.n	800d61c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4a30      	ldr	r2, [pc, #192]	; (800d6c4 <HAL_TIM_PWM_Start_IT+0x280>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d009      	beq.n	800d61c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a2e      	ldr	r2, [pc, #184]	; (800d6c8 <HAL_TIM_PWM_Start_IT+0x284>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d004      	beq.n	800d61c <HAL_TIM_PWM_Start_IT+0x1d8>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a2d      	ldr	r2, [pc, #180]	; (800d6cc <HAL_TIM_PWM_Start_IT+0x288>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d101      	bne.n	800d620 <HAL_TIM_PWM_Start_IT+0x1dc>
 800d61c:	2301      	movs	r3, #1
 800d61e:	e000      	b.n	800d622 <HAL_TIM_PWM_Start_IT+0x1de>
 800d620:	2300      	movs	r3, #0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d007      	beq.n	800d636 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d634:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a20      	ldr	r2, [pc, #128]	; (800d6bc <HAL_TIM_PWM_Start_IT+0x278>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d018      	beq.n	800d672 <HAL_TIM_PWM_Start_IT+0x22e>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d648:	d013      	beq.n	800d672 <HAL_TIM_PWM_Start_IT+0x22e>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a20      	ldr	r2, [pc, #128]	; (800d6d0 <HAL_TIM_PWM_Start_IT+0x28c>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d00e      	beq.n	800d672 <HAL_TIM_PWM_Start_IT+0x22e>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a1e      	ldr	r2, [pc, #120]	; (800d6d4 <HAL_TIM_PWM_Start_IT+0x290>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d009      	beq.n	800d672 <HAL_TIM_PWM_Start_IT+0x22e>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4a17      	ldr	r2, [pc, #92]	; (800d6c0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d004      	beq.n	800d672 <HAL_TIM_PWM_Start_IT+0x22e>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a15      	ldr	r2, [pc, #84]	; (800d6c4 <HAL_TIM_PWM_Start_IT+0x280>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d115      	bne.n	800d69e <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	689a      	ldr	r2, [r3, #8]
 800d678:	4b17      	ldr	r3, [pc, #92]	; (800d6d8 <HAL_TIM_PWM_Start_IT+0x294>)
 800d67a:	4013      	ands	r3, r2
 800d67c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	2b06      	cmp	r3, #6
 800d682:	d015      	beq.n	800d6b0 <HAL_TIM_PWM_Start_IT+0x26c>
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d68a:	d011      	beq.n	800d6b0 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f042 0201 	orr.w	r2, r2, #1
 800d69a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d69c:	e008      	b.n	800d6b0 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f042 0201 	orr.w	r2, r2, #1
 800d6ac:	601a      	str	r2, [r3, #0]
 800d6ae:	e000      	b.n	800d6b2 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6b0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	40012c00 	.word	0x40012c00
 800d6c0:	40013400 	.word	0x40013400
 800d6c4:	40014000 	.word	0x40014000
 800d6c8:	40014400 	.word	0x40014400
 800d6cc:	40014800 	.word	0x40014800
 800d6d0:	40000400 	.word	0x40000400
 800d6d4:	40000800 	.word	0x40000800
 800d6d8:	00010007 	.word	0x00010007

0800d6dc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	2b0c      	cmp	r3, #12
 800d6ee:	d841      	bhi.n	800d774 <HAL_TIM_PWM_Stop_IT+0x98>
 800d6f0:	a201      	add	r2, pc, #4	; (adr r2, 800d6f8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800d6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f6:	bf00      	nop
 800d6f8:	0800d72d 	.word	0x0800d72d
 800d6fc:	0800d775 	.word	0x0800d775
 800d700:	0800d775 	.word	0x0800d775
 800d704:	0800d775 	.word	0x0800d775
 800d708:	0800d73f 	.word	0x0800d73f
 800d70c:	0800d775 	.word	0x0800d775
 800d710:	0800d775 	.word	0x0800d775
 800d714:	0800d775 	.word	0x0800d775
 800d718:	0800d751 	.word	0x0800d751
 800d71c:	0800d775 	.word	0x0800d775
 800d720:	0800d775 	.word	0x0800d775
 800d724:	0800d775 	.word	0x0800d775
 800d728:	0800d763 	.word	0x0800d763
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	68da      	ldr	r2, [r3, #12]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f022 0202 	bic.w	r2, r2, #2
 800d73a:	60da      	str	r2, [r3, #12]
      break;
 800d73c:	e01d      	b.n	800d77a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68da      	ldr	r2, [r3, #12]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f022 0204 	bic.w	r2, r2, #4
 800d74c:	60da      	str	r2, [r3, #12]
      break;
 800d74e:	e014      	b.n	800d77a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	68da      	ldr	r2, [r3, #12]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f022 0208 	bic.w	r2, r2, #8
 800d75e:	60da      	str	r2, [r3, #12]
      break;
 800d760:	e00b      	b.n	800d77a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68da      	ldr	r2, [r3, #12]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f022 0210 	bic.w	r2, r2, #16
 800d770:	60da      	str	r2, [r3, #12]
      break;
 800d772:	e002      	b.n	800d77a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800d774:	2301      	movs	r3, #1
 800d776:	73fb      	strb	r3, [r7, #15]
      break;
 800d778:	bf00      	nop
  }

  if (status == HAL_OK)
 800d77a:	7bfb      	ldrb	r3, [r7, #15]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f040 8081 	bne.w	800d884 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2200      	movs	r2, #0
 800d788:	6839      	ldr	r1, [r7, #0]
 800d78a:	4618      	mov	r0, r3
 800d78c:	f001 f838 	bl	800e800 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a3e      	ldr	r2, [pc, #248]	; (800d890 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d013      	beq.n	800d7c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a3d      	ldr	r2, [pc, #244]	; (800d894 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d00e      	beq.n	800d7c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a3b      	ldr	r2, [pc, #236]	; (800d898 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d009      	beq.n	800d7c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a3a      	ldr	r2, [pc, #232]	; (800d89c <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d004      	beq.n	800d7c2 <HAL_TIM_PWM_Stop_IT+0xe6>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a38      	ldr	r2, [pc, #224]	; (800d8a0 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d101      	bne.n	800d7c6 <HAL_TIM_PWM_Stop_IT+0xea>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e000      	b.n	800d7c8 <HAL_TIM_PWM_Stop_IT+0xec>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d017      	beq.n	800d7fc <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	6a1a      	ldr	r2, [r3, #32]
 800d7d2:	f241 1311 	movw	r3, #4369	; 0x1111
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d10f      	bne.n	800d7fc <HAL_TIM_PWM_Stop_IT+0x120>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	6a1a      	ldr	r2, [r3, #32]
 800d7e2:	f244 4344 	movw	r3, #17476	; 0x4444
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d107      	bne.n	800d7fc <HAL_TIM_PWM_Stop_IT+0x120>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	6a1a      	ldr	r2, [r3, #32]
 800d802:	f241 1311 	movw	r3, #4369	; 0x1111
 800d806:	4013      	ands	r3, r2
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10f      	bne.n	800d82c <HAL_TIM_PWM_Stop_IT+0x150>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	6a1a      	ldr	r2, [r3, #32]
 800d812:	f244 4344 	movw	r3, #17476	; 0x4444
 800d816:	4013      	ands	r3, r2
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d107      	bne.n	800d82c <HAL_TIM_PWM_Stop_IT+0x150>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f022 0201 	bic.w	r2, r2, #1
 800d82a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d104      	bne.n	800d83c <HAL_TIM_PWM_Stop_IT+0x160>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2201      	movs	r2, #1
 800d836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d83a:	e023      	b.n	800d884 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	2b04      	cmp	r3, #4
 800d840:	d104      	bne.n	800d84c <HAL_TIM_PWM_Stop_IT+0x170>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2201      	movs	r2, #1
 800d846:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d84a:	e01b      	b.n	800d884 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	2b08      	cmp	r3, #8
 800d850:	d104      	bne.n	800d85c <HAL_TIM_PWM_Stop_IT+0x180>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d85a:	e013      	b.n	800d884 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	2b0c      	cmp	r3, #12
 800d860:	d104      	bne.n	800d86c <HAL_TIM_PWM_Stop_IT+0x190>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2201      	movs	r2, #1
 800d866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d86a:	e00b      	b.n	800d884 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	2b10      	cmp	r3, #16
 800d870:	d104      	bne.n	800d87c <HAL_TIM_PWM_Stop_IT+0x1a0>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2201      	movs	r2, #1
 800d876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d87a:	e003      	b.n	800d884 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2201      	movs	r2, #1
 800d880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800d884:	7bfb      	ldrb	r3, [r7, #15]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	40012c00 	.word	0x40012c00
 800d894:	40013400 	.word	0x40013400
 800d898:	40014000 	.word	0x40014000
 800d89c:	40014400 	.word	0x40014400
 800d8a0:	40014800 	.word	0x40014800

0800d8a4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e041      	b.n	800d93c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d106      	bne.n	800d8d2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7f7 fcc5 	bl	800525c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2202      	movs	r2, #2
 800d8d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	4610      	mov	r0, r2
 800d8e6:	f000 fbf9 	bl	800e0dc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f022 0208 	bic.w	r2, r2, #8
 800d8f8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	6819      	ldr	r1, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	683a      	ldr	r2, [r7, #0]
 800d906:	430a      	orrs	r2, r1
 800d908:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2201      	movs	r2, #1
 800d90e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2201      	movs	r2, #1
 800d916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2201      	movs	r2, #1
 800d91e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2201      	movs	r2, #1
 800d926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2201      	movs	r2, #1
 800d92e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2201      	movs	r2, #1
 800d936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d954:	2301      	movs	r3, #1
 800d956:	e097      	b.n	800da88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	2b00      	cmp	r3, #0
 800d962:	d106      	bne.n	800d972 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f7f7 fb9d 	bl	80050ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2202      	movs	r2, #2
 800d976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	6812      	ldr	r2, [r2, #0]
 800d984:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d988:	f023 0307 	bic.w	r3, r3, #7
 800d98c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	3304      	adds	r3, #4
 800d996:	4619      	mov	r1, r3
 800d998:	4610      	mov	r0, r2
 800d99a:	f000 fb9f 	bl	800e0dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	699b      	ldr	r3, [r3, #24]
 800d9ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	6a1b      	ldr	r3, [r3, #32]
 800d9b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	697a      	ldr	r2, [r7, #20]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9c6:	f023 0303 	bic.w	r3, r3, #3
 800d9ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	689a      	ldr	r2, [r3, #8]
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	699b      	ldr	r3, [r3, #24]
 800d9d4:	021b      	lsls	r3, r3, #8
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d9e4:	f023 030c 	bic.w	r3, r3, #12
 800d9e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d9f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	68da      	ldr	r2, [r3, #12]
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	69db      	ldr	r3, [r3, #28]
 800d9fe:	021b      	lsls	r3, r3, #8
 800da00:	4313      	orrs	r3, r2
 800da02:	693a      	ldr	r2, [r7, #16]
 800da04:	4313      	orrs	r3, r2
 800da06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	691b      	ldr	r3, [r3, #16]
 800da0c:	011a      	lsls	r2, r3, #4
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	031b      	lsls	r3, r3, #12
 800da14:	4313      	orrs	r3, r2
 800da16:	693a      	ldr	r2, [r7, #16]
 800da18:	4313      	orrs	r3, r2
 800da1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800da22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800da2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	685a      	ldr	r2, [r3, #4]
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	695b      	ldr	r3, [r3, #20]
 800da34:	011b      	lsls	r3, r3, #4
 800da36:	4313      	orrs	r3, r2
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	4313      	orrs	r3, r2
 800da3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	697a      	ldr	r2, [r7, #20]
 800da44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	693a      	ldr	r2, [r7, #16]
 800da4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2201      	movs	r2, #1
 800da5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2201      	movs	r2, #1
 800da62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2201      	movs	r2, #1
 800da6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2201      	movs	r2, #1
 800da72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2201      	movs	r2, #1
 800da82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800daa0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800daa8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dab0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dab8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d110      	bne.n	800dae2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dac0:	7bfb      	ldrb	r3, [r7, #15]
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d102      	bne.n	800dacc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800dac6:	7b7b      	ldrb	r3, [r7, #13]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d001      	beq.n	800dad0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800dacc:	2301      	movs	r3, #1
 800dace:	e089      	b.n	800dbe4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2202      	movs	r2, #2
 800dad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2202      	movs	r2, #2
 800dadc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dae0:	e031      	b.n	800db46 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	2b04      	cmp	r3, #4
 800dae6:	d110      	bne.n	800db0a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dae8:	7bbb      	ldrb	r3, [r7, #14]
 800daea:	2b01      	cmp	r3, #1
 800daec:	d102      	bne.n	800daf4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800daee:	7b3b      	ldrb	r3, [r7, #12]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d001      	beq.n	800daf8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	e075      	b.n	800dbe4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2202      	movs	r2, #2
 800dafc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2202      	movs	r2, #2
 800db04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db08:	e01d      	b.n	800db46 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d108      	bne.n	800db22 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800db10:	7bbb      	ldrb	r3, [r7, #14]
 800db12:	2b01      	cmp	r3, #1
 800db14:	d105      	bne.n	800db22 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800db16:	7b7b      	ldrb	r3, [r7, #13]
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d102      	bne.n	800db22 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800db1c:	7b3b      	ldrb	r3, [r7, #12]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d001      	beq.n	800db26 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800db22:	2301      	movs	r3, #1
 800db24:	e05e      	b.n	800dbe4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2202      	movs	r2, #2
 800db2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2202      	movs	r2, #2
 800db32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2202      	movs	r2, #2
 800db3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2202      	movs	r2, #2
 800db42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d003      	beq.n	800db54 <HAL_TIM_Encoder_Start_IT+0xc4>
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	2b04      	cmp	r3, #4
 800db50:	d010      	beq.n	800db74 <HAL_TIM_Encoder_Start_IT+0xe4>
 800db52:	e01f      	b.n	800db94 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2201      	movs	r2, #1
 800db5a:	2100      	movs	r1, #0
 800db5c:	4618      	mov	r0, r3
 800db5e:	f000 fe4f 	bl	800e800 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	68da      	ldr	r2, [r3, #12]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f042 0202 	orr.w	r2, r2, #2
 800db70:	60da      	str	r2, [r3, #12]
      break;
 800db72:	e02e      	b.n	800dbd2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2201      	movs	r2, #1
 800db7a:	2104      	movs	r1, #4
 800db7c:	4618      	mov	r0, r3
 800db7e:	f000 fe3f 	bl	800e800 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	68da      	ldr	r2, [r3, #12]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f042 0204 	orr.w	r2, r2, #4
 800db90:	60da      	str	r2, [r3, #12]
      break;
 800db92:	e01e      	b.n	800dbd2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2201      	movs	r2, #1
 800db9a:	2100      	movs	r1, #0
 800db9c:	4618      	mov	r0, r3
 800db9e:	f000 fe2f 	bl	800e800 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2201      	movs	r2, #1
 800dba8:	2104      	movs	r1, #4
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f000 fe28 	bl	800e800 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	68da      	ldr	r2, [r3, #12]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f042 0202 	orr.w	r2, r2, #2
 800dbbe:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68da      	ldr	r2, [r3, #12]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f042 0204 	orr.w	r2, r2, #4
 800dbce:	60da      	str	r2, [r3, #12]
      break;
 800dbd0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f042 0201 	orr.w	r2, r2, #1
 800dbe0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	f003 0302 	and.w	r3, r3, #2
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d020      	beq.n	800dc50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f003 0302 	and.w	r3, r3, #2
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d01b      	beq.n	800dc50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f06f 0202 	mvn.w	r2, #2
 800dc20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2201      	movs	r2, #1
 800dc26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	699b      	ldr	r3, [r3, #24]
 800dc2e:	f003 0303 	and.w	r3, r3, #3
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d003      	beq.n	800dc3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7f5 fa04 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 800dc3c:	e005      	b.n	800dc4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 fa38 	bl	800e0b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f7f5 fa0f 	bl	8003068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	f003 0304 	and.w	r3, r3, #4
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d020      	beq.n	800dc9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f003 0304 	and.w	r3, r3, #4
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d01b      	beq.n	800dc9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f06f 0204 	mvn.w	r2, #4
 800dc6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2202      	movs	r2, #2
 800dc72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	699b      	ldr	r3, [r3, #24]
 800dc7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d003      	beq.n	800dc8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f7f5 f9de 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 800dc88:	e005      	b.n	800dc96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 fa12 	bl	800e0b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7f5 f9e9 	bl	8003068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	f003 0308 	and.w	r3, r3, #8
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d020      	beq.n	800dce8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f003 0308 	and.w	r3, r3, #8
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d01b      	beq.n	800dce8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f06f 0208 	mvn.w	r2, #8
 800dcb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2204      	movs	r2, #4
 800dcbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	69db      	ldr	r3, [r3, #28]
 800dcc6:	f003 0303 	and.w	r3, r3, #3
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d003      	beq.n	800dcd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7f5 f9b8 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 800dcd4:	e005      	b.n	800dce2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f9ec 	bl	800e0b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f7f5 f9c3 	bl	8003068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	f003 0310 	and.w	r3, r3, #16
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d020      	beq.n	800dd34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f003 0310 	and.w	r3, r3, #16
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d01b      	beq.n	800dd34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f06f 0210 	mvn.w	r2, #16
 800dd04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2208      	movs	r2, #8
 800dd0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	69db      	ldr	r3, [r3, #28]
 800dd12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d003      	beq.n	800dd22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f7f5 f992 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 800dd20:	e005      	b.n	800dd2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 f9c6 	bl	800e0b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f7f5 f99d 	bl	8003068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	f003 0301 	and.w	r3, r3, #1
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00c      	beq.n	800dd58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f003 0301 	and.w	r3, r3, #1
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d007      	beq.n	800dd58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f06f 0201 	mvn.w	r2, #1
 800dd50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f7f5 f9ae 	bl	80030b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d104      	bne.n	800dd6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d00c      	beq.n	800dd86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d007      	beq.n	800dd86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800dd7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 ff83 	bl	800ec8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00c      	beq.n	800ddaa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d007      	beq.n	800ddaa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dda2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 ff7b 	bl	800eca0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00c      	beq.n	800ddce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d007      	beq.n	800ddce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ddc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 f97d 	bl	800e0c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	f003 0320 	and.w	r3, r3, #32
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00c      	beq.n	800ddf2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f003 0320 	and.w	r3, r3, #32
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d007      	beq.n	800ddf2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f06f 0220 	mvn.w	r2, #32
 800ddea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 ff43 	bl	800ec78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00c      	beq.n	800de16 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de02:	2b00      	cmp	r3, #0
 800de04:	d007      	beq.n	800de16 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800de0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 ff4f 	bl	800ecb4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00c      	beq.n	800de3a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de26:	2b00      	cmp	r3, #0
 800de28:	d007      	beq.n	800de3a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800de32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 ff47 	bl	800ecc8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00c      	beq.n	800de5e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d007      	beq.n	800de5e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800de56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 ff3f 	bl	800ecdc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de64:	2b00      	cmp	r3, #0
 800de66:	d00c      	beq.n	800de82 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d007      	beq.n	800de82 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800de7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 ff37 	bl	800ecf0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de82:	bf00      	nop
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
	...

0800de8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b086      	sub	sp, #24
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d101      	bne.n	800deaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dea6:	2302      	movs	r3, #2
 800dea8:	e0ff      	b.n	800e0aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2201      	movs	r2, #1
 800deae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b14      	cmp	r3, #20
 800deb6:	f200 80f0 	bhi.w	800e09a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800deba:	a201      	add	r2, pc, #4	; (adr r2, 800dec0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800debc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec0:	0800df15 	.word	0x0800df15
 800dec4:	0800e09b 	.word	0x0800e09b
 800dec8:	0800e09b 	.word	0x0800e09b
 800decc:	0800e09b 	.word	0x0800e09b
 800ded0:	0800df55 	.word	0x0800df55
 800ded4:	0800e09b 	.word	0x0800e09b
 800ded8:	0800e09b 	.word	0x0800e09b
 800dedc:	0800e09b 	.word	0x0800e09b
 800dee0:	0800df97 	.word	0x0800df97
 800dee4:	0800e09b 	.word	0x0800e09b
 800dee8:	0800e09b 	.word	0x0800e09b
 800deec:	0800e09b 	.word	0x0800e09b
 800def0:	0800dfd7 	.word	0x0800dfd7
 800def4:	0800e09b 	.word	0x0800e09b
 800def8:	0800e09b 	.word	0x0800e09b
 800defc:	0800e09b 	.word	0x0800e09b
 800df00:	0800e019 	.word	0x0800e019
 800df04:	0800e09b 	.word	0x0800e09b
 800df08:	0800e09b 	.word	0x0800e09b
 800df0c:	0800e09b 	.word	0x0800e09b
 800df10:	0800e059 	.word	0x0800e059
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68b9      	ldr	r1, [r7, #8]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f000 f97a 	bl	800e214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	699a      	ldr	r2, [r3, #24]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f042 0208 	orr.w	r2, r2, #8
 800df2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	699a      	ldr	r2, [r3, #24]
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f022 0204 	bic.w	r2, r2, #4
 800df3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	6999      	ldr	r1, [r3, #24]
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	691a      	ldr	r2, [r3, #16]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	430a      	orrs	r2, r1
 800df50:	619a      	str	r2, [r3, #24]
      break;
 800df52:	e0a5      	b.n	800e0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	68b9      	ldr	r1, [r7, #8]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f000 f9ea 	bl	800e334 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	699a      	ldr	r2, [r3, #24]
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	699a      	ldr	r2, [r3, #24]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6999      	ldr	r1, [r3, #24]
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	021a      	lsls	r2, r3, #8
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	430a      	orrs	r2, r1
 800df92:	619a      	str	r2, [r3, #24]
      break;
 800df94:	e084      	b.n	800e0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68b9      	ldr	r1, [r7, #8]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f000 fa53 	bl	800e448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	69da      	ldr	r2, [r3, #28]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f042 0208 	orr.w	r2, r2, #8
 800dfb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	69da      	ldr	r2, [r3, #28]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f022 0204 	bic.w	r2, r2, #4
 800dfc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	69d9      	ldr	r1, [r3, #28]
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	691a      	ldr	r2, [r3, #16]
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	430a      	orrs	r2, r1
 800dfd2:	61da      	str	r2, [r3, #28]
      break;
 800dfd4:	e064      	b.n	800e0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	68b9      	ldr	r1, [r7, #8]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f000 fabb 	bl	800e558 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	69da      	ldr	r2, [r3, #28]
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	69da      	ldr	r2, [r3, #28]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	69d9      	ldr	r1, [r3, #28]
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	691b      	ldr	r3, [r3, #16]
 800e00c:	021a      	lsls	r2, r3, #8
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	430a      	orrs	r2, r1
 800e014:	61da      	str	r2, [r3, #28]
      break;
 800e016:	e043      	b.n	800e0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	68b9      	ldr	r1, [r7, #8]
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 fb24 	bl	800e66c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f042 0208 	orr.w	r2, r2, #8
 800e032:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f022 0204 	bic.w	r2, r2, #4
 800e042:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	691a      	ldr	r2, [r3, #16]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	430a      	orrs	r2, r1
 800e054:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e056:	e023      	b.n	800e0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	68b9      	ldr	r1, [r7, #8]
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 fb68 	bl	800e734 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e072:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e082:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	021a      	lsls	r2, r3, #8
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	430a      	orrs	r2, r1
 800e096:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e098:	e002      	b.n	800e0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e09a:	2301      	movs	r3, #1
 800e09c:	75fb      	strb	r3, [r7, #23]
      break;
 800e09e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3718      	adds	r7, #24
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop

0800e0b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e0bc:	bf00      	nop
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e0d0:	bf00      	nop
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b085      	sub	sp, #20
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	4a42      	ldr	r2, [pc, #264]	; (800e1f8 <TIM_Base_SetConfig+0x11c>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d00f      	beq.n	800e114 <TIM_Base_SetConfig+0x38>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0fa:	d00b      	beq.n	800e114 <TIM_Base_SetConfig+0x38>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	4a3f      	ldr	r2, [pc, #252]	; (800e1fc <TIM_Base_SetConfig+0x120>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d007      	beq.n	800e114 <TIM_Base_SetConfig+0x38>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4a3e      	ldr	r2, [pc, #248]	; (800e200 <TIM_Base_SetConfig+0x124>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d003      	beq.n	800e114 <TIM_Base_SetConfig+0x38>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	4a3d      	ldr	r2, [pc, #244]	; (800e204 <TIM_Base_SetConfig+0x128>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d108      	bne.n	800e126 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e11a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	4313      	orrs	r3, r2
 800e124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4a33      	ldr	r2, [pc, #204]	; (800e1f8 <TIM_Base_SetConfig+0x11c>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d01b      	beq.n	800e166 <TIM_Base_SetConfig+0x8a>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e134:	d017      	beq.n	800e166 <TIM_Base_SetConfig+0x8a>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	4a30      	ldr	r2, [pc, #192]	; (800e1fc <TIM_Base_SetConfig+0x120>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d013      	beq.n	800e166 <TIM_Base_SetConfig+0x8a>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4a2f      	ldr	r2, [pc, #188]	; (800e200 <TIM_Base_SetConfig+0x124>)
 800e142:	4293      	cmp	r3, r2
 800e144:	d00f      	beq.n	800e166 <TIM_Base_SetConfig+0x8a>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4a2e      	ldr	r2, [pc, #184]	; (800e204 <TIM_Base_SetConfig+0x128>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d00b      	beq.n	800e166 <TIM_Base_SetConfig+0x8a>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4a2d      	ldr	r2, [pc, #180]	; (800e208 <TIM_Base_SetConfig+0x12c>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d007      	beq.n	800e166 <TIM_Base_SetConfig+0x8a>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4a2c      	ldr	r2, [pc, #176]	; (800e20c <TIM_Base_SetConfig+0x130>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d003      	beq.n	800e166 <TIM_Base_SetConfig+0x8a>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4a2b      	ldr	r2, [pc, #172]	; (800e210 <TIM_Base_SetConfig+0x134>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d108      	bne.n	800e178 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e16c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	4313      	orrs	r3, r2
 800e176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	695b      	ldr	r3, [r3, #20]
 800e182:	4313      	orrs	r3, r2
 800e184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	689a      	ldr	r2, [r3, #8]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4a16      	ldr	r2, [pc, #88]	; (800e1f8 <TIM_Base_SetConfig+0x11c>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d00f      	beq.n	800e1c4 <TIM_Base_SetConfig+0xe8>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	4a17      	ldr	r2, [pc, #92]	; (800e204 <TIM_Base_SetConfig+0x128>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d00b      	beq.n	800e1c4 <TIM_Base_SetConfig+0xe8>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	4a16      	ldr	r2, [pc, #88]	; (800e208 <TIM_Base_SetConfig+0x12c>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d007      	beq.n	800e1c4 <TIM_Base_SetConfig+0xe8>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4a15      	ldr	r2, [pc, #84]	; (800e20c <TIM_Base_SetConfig+0x130>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d003      	beq.n	800e1c4 <TIM_Base_SetConfig+0xe8>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	4a14      	ldr	r2, [pc, #80]	; (800e210 <TIM_Base_SetConfig+0x134>)
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d103      	bne.n	800e1cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	691a      	ldr	r2, [r3, #16]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	691b      	ldr	r3, [r3, #16]
 800e1d6:	f003 0301 	and.w	r3, r3, #1
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d105      	bne.n	800e1ea <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	691b      	ldr	r3, [r3, #16]
 800e1e2:	f023 0201 	bic.w	r2, r3, #1
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	611a      	str	r2, [r3, #16]
  }
}
 800e1ea:	bf00      	nop
 800e1ec:	3714      	adds	r7, #20
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	40012c00 	.word	0x40012c00
 800e1fc:	40000400 	.word	0x40000400
 800e200:	40000800 	.word	0x40000800
 800e204:	40013400 	.word	0x40013400
 800e208:	40014000 	.word	0x40014000
 800e20c:	40014400 	.word	0x40014400
 800e210:	40014800 	.word	0x40014800

0800e214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e214:	b480      	push	{r7}
 800e216:	b087      	sub	sp, #28
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a1b      	ldr	r3, [r3, #32]
 800e222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6a1b      	ldr	r3, [r3, #32]
 800e228:	f023 0201 	bic.w	r2, r3, #1
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	699b      	ldr	r3, [r3, #24]
 800e23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f023 0303 	bic.w	r3, r3, #3
 800e24e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	4313      	orrs	r3, r2
 800e258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	f023 0302 	bic.w	r3, r3, #2
 800e260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	4313      	orrs	r3, r2
 800e26a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	4a2c      	ldr	r2, [pc, #176]	; (800e320 <TIM_OC1_SetConfig+0x10c>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d00f      	beq.n	800e294 <TIM_OC1_SetConfig+0x80>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	4a2b      	ldr	r2, [pc, #172]	; (800e324 <TIM_OC1_SetConfig+0x110>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d00b      	beq.n	800e294 <TIM_OC1_SetConfig+0x80>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a2a      	ldr	r2, [pc, #168]	; (800e328 <TIM_OC1_SetConfig+0x114>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d007      	beq.n	800e294 <TIM_OC1_SetConfig+0x80>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	4a29      	ldr	r2, [pc, #164]	; (800e32c <TIM_OC1_SetConfig+0x118>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d003      	beq.n	800e294 <TIM_OC1_SetConfig+0x80>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	4a28      	ldr	r2, [pc, #160]	; (800e330 <TIM_OC1_SetConfig+0x11c>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d10c      	bne.n	800e2ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	f023 0308 	bic.w	r3, r3, #8
 800e29a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	697a      	ldr	r2, [r7, #20]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	f023 0304 	bic.w	r3, r3, #4
 800e2ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	4a1b      	ldr	r2, [pc, #108]	; (800e320 <TIM_OC1_SetConfig+0x10c>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d00f      	beq.n	800e2d6 <TIM_OC1_SetConfig+0xc2>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4a1a      	ldr	r2, [pc, #104]	; (800e324 <TIM_OC1_SetConfig+0x110>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d00b      	beq.n	800e2d6 <TIM_OC1_SetConfig+0xc2>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4a19      	ldr	r2, [pc, #100]	; (800e328 <TIM_OC1_SetConfig+0x114>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d007      	beq.n	800e2d6 <TIM_OC1_SetConfig+0xc2>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	4a18      	ldr	r2, [pc, #96]	; (800e32c <TIM_OC1_SetConfig+0x118>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d003      	beq.n	800e2d6 <TIM_OC1_SetConfig+0xc2>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4a17      	ldr	r2, [pc, #92]	; (800e330 <TIM_OC1_SetConfig+0x11c>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d111      	bne.n	800e2fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e2e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	695b      	ldr	r3, [r3, #20]
 800e2ea:	693a      	ldr	r2, [r7, #16]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	699b      	ldr	r3, [r3, #24]
 800e2f4:	693a      	ldr	r2, [r7, #16]
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	693a      	ldr	r2, [r7, #16]
 800e2fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	68fa      	ldr	r2, [r7, #12]
 800e304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	685a      	ldr	r2, [r3, #4]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	697a      	ldr	r2, [r7, #20]
 800e312:	621a      	str	r2, [r3, #32]
}
 800e314:	bf00      	nop
 800e316:	371c      	adds	r7, #28
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr
 800e320:	40012c00 	.word	0x40012c00
 800e324:	40013400 	.word	0x40013400
 800e328:	40014000 	.word	0x40014000
 800e32c:	40014400 	.word	0x40014400
 800e330:	40014800 	.word	0x40014800

0800e334 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e334:	b480      	push	{r7}
 800e336:	b087      	sub	sp, #28
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a1b      	ldr	r3, [r3, #32]
 800e342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6a1b      	ldr	r3, [r3, #32]
 800e348:	f023 0210 	bic.w	r2, r3, #16
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	699b      	ldr	r3, [r3, #24]
 800e35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e36e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	021b      	lsls	r3, r3, #8
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	4313      	orrs	r3, r2
 800e37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	f023 0320 	bic.w	r3, r3, #32
 800e382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	011b      	lsls	r3, r3, #4
 800e38a:	697a      	ldr	r2, [r7, #20]
 800e38c:	4313      	orrs	r3, r2
 800e38e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	4a28      	ldr	r2, [pc, #160]	; (800e434 <TIM_OC2_SetConfig+0x100>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d003      	beq.n	800e3a0 <TIM_OC2_SetConfig+0x6c>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a27      	ldr	r2, [pc, #156]	; (800e438 <TIM_OC2_SetConfig+0x104>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d10d      	bne.n	800e3bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	011b      	lsls	r3, r3, #4
 800e3ae:	697a      	ldr	r2, [r7, #20]
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	4a1d      	ldr	r2, [pc, #116]	; (800e434 <TIM_OC2_SetConfig+0x100>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d00f      	beq.n	800e3e4 <TIM_OC2_SetConfig+0xb0>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	4a1c      	ldr	r2, [pc, #112]	; (800e438 <TIM_OC2_SetConfig+0x104>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d00b      	beq.n	800e3e4 <TIM_OC2_SetConfig+0xb0>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4a1b      	ldr	r2, [pc, #108]	; (800e43c <TIM_OC2_SetConfig+0x108>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d007      	beq.n	800e3e4 <TIM_OC2_SetConfig+0xb0>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	4a1a      	ldr	r2, [pc, #104]	; (800e440 <TIM_OC2_SetConfig+0x10c>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d003      	beq.n	800e3e4 <TIM_OC2_SetConfig+0xb0>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4a19      	ldr	r2, [pc, #100]	; (800e444 <TIM_OC2_SetConfig+0x110>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d113      	bne.n	800e40c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e3ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e3f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	695b      	ldr	r3, [r3, #20]
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	693a      	ldr	r2, [r7, #16]
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	699b      	ldr	r3, [r3, #24]
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	693a      	ldr	r2, [r7, #16]
 800e408:	4313      	orrs	r3, r2
 800e40a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	693a      	ldr	r2, [r7, #16]
 800e410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	685a      	ldr	r2, [r3, #4]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	697a      	ldr	r2, [r7, #20]
 800e424:	621a      	str	r2, [r3, #32]
}
 800e426:	bf00      	nop
 800e428:	371c      	adds	r7, #28
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop
 800e434:	40012c00 	.word	0x40012c00
 800e438:	40013400 	.word	0x40013400
 800e43c:	40014000 	.word	0x40014000
 800e440:	40014400 	.word	0x40014400
 800e444:	40014800 	.word	0x40014800

0800e448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e448:	b480      	push	{r7}
 800e44a:	b087      	sub	sp, #28
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6a1b      	ldr	r3, [r3, #32]
 800e456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6a1b      	ldr	r3, [r3, #32]
 800e45c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	69db      	ldr	r3, [r3, #28]
 800e46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e47a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f023 0303 	bic.w	r3, r3, #3
 800e482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	4313      	orrs	r3, r2
 800e48c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	021b      	lsls	r3, r3, #8
 800e49c:	697a      	ldr	r2, [r7, #20]
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	4a27      	ldr	r2, [pc, #156]	; (800e544 <TIM_OC3_SetConfig+0xfc>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d003      	beq.n	800e4b2 <TIM_OC3_SetConfig+0x6a>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4a26      	ldr	r2, [pc, #152]	; (800e548 <TIM_OC3_SetConfig+0x100>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d10d      	bne.n	800e4ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	021b      	lsls	r3, r3, #8
 800e4c0:	697a      	ldr	r2, [r7, #20]
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e4cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4a1c      	ldr	r2, [pc, #112]	; (800e544 <TIM_OC3_SetConfig+0xfc>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d00f      	beq.n	800e4f6 <TIM_OC3_SetConfig+0xae>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	4a1b      	ldr	r2, [pc, #108]	; (800e548 <TIM_OC3_SetConfig+0x100>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d00b      	beq.n	800e4f6 <TIM_OC3_SetConfig+0xae>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	4a1a      	ldr	r2, [pc, #104]	; (800e54c <TIM_OC3_SetConfig+0x104>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d007      	beq.n	800e4f6 <TIM_OC3_SetConfig+0xae>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	4a19      	ldr	r2, [pc, #100]	; (800e550 <TIM_OC3_SetConfig+0x108>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d003      	beq.n	800e4f6 <TIM_OC3_SetConfig+0xae>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	4a18      	ldr	r2, [pc, #96]	; (800e554 <TIM_OC3_SetConfig+0x10c>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d113      	bne.n	800e51e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	695b      	ldr	r3, [r3, #20]
 800e50a:	011b      	lsls	r3, r3, #4
 800e50c:	693a      	ldr	r2, [r7, #16]
 800e50e:	4313      	orrs	r3, r2
 800e510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	699b      	ldr	r3, [r3, #24]
 800e516:	011b      	lsls	r3, r3, #4
 800e518:	693a      	ldr	r2, [r7, #16]
 800e51a:	4313      	orrs	r3, r2
 800e51c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	693a      	ldr	r2, [r7, #16]
 800e522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	68fa      	ldr	r2, [r7, #12]
 800e528:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	685a      	ldr	r2, [r3, #4]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	697a      	ldr	r2, [r7, #20]
 800e536:	621a      	str	r2, [r3, #32]
}
 800e538:	bf00      	nop
 800e53a:	371c      	adds	r7, #28
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr
 800e544:	40012c00 	.word	0x40012c00
 800e548:	40013400 	.word	0x40013400
 800e54c:	40014000 	.word	0x40014000
 800e550:	40014400 	.word	0x40014400
 800e554:	40014800 	.word	0x40014800

0800e558 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e558:	b480      	push	{r7}
 800e55a:	b087      	sub	sp, #28
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6a1b      	ldr	r3, [r3, #32]
 800e566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6a1b      	ldr	r3, [r3, #32]
 800e56c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	69db      	ldr	r3, [r3, #28]
 800e57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e58a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	021b      	lsls	r3, r3, #8
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	4313      	orrs	r3, r2
 800e59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e5a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	031b      	lsls	r3, r3, #12
 800e5ae:	697a      	ldr	r2, [r7, #20]
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	4a28      	ldr	r2, [pc, #160]	; (800e658 <TIM_OC4_SetConfig+0x100>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d003      	beq.n	800e5c4 <TIM_OC4_SetConfig+0x6c>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	4a27      	ldr	r2, [pc, #156]	; (800e65c <TIM_OC4_SetConfig+0x104>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d10d      	bne.n	800e5e0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e5ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	031b      	lsls	r3, r3, #12
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	4313      	orrs	r3, r2
 800e5d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e5de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	4a1d      	ldr	r2, [pc, #116]	; (800e658 <TIM_OC4_SetConfig+0x100>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d00f      	beq.n	800e608 <TIM_OC4_SetConfig+0xb0>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	4a1c      	ldr	r2, [pc, #112]	; (800e65c <TIM_OC4_SetConfig+0x104>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d00b      	beq.n	800e608 <TIM_OC4_SetConfig+0xb0>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	4a1b      	ldr	r2, [pc, #108]	; (800e660 <TIM_OC4_SetConfig+0x108>)
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d007      	beq.n	800e608 <TIM_OC4_SetConfig+0xb0>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4a1a      	ldr	r2, [pc, #104]	; (800e664 <TIM_OC4_SetConfig+0x10c>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d003      	beq.n	800e608 <TIM_OC4_SetConfig+0xb0>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	4a19      	ldr	r2, [pc, #100]	; (800e668 <TIM_OC4_SetConfig+0x110>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d113      	bne.n	800e630 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e60e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e616:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	695b      	ldr	r3, [r3, #20]
 800e61c:	019b      	lsls	r3, r3, #6
 800e61e:	693a      	ldr	r2, [r7, #16]
 800e620:	4313      	orrs	r3, r2
 800e622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	699b      	ldr	r3, [r3, #24]
 800e628:	019b      	lsls	r3, r3, #6
 800e62a:	693a      	ldr	r2, [r7, #16]
 800e62c:	4313      	orrs	r3, r2
 800e62e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	693a      	ldr	r2, [r7, #16]
 800e634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	685a      	ldr	r2, [r3, #4]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	697a      	ldr	r2, [r7, #20]
 800e648:	621a      	str	r2, [r3, #32]
}
 800e64a:	bf00      	nop
 800e64c:	371c      	adds	r7, #28
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	40012c00 	.word	0x40012c00
 800e65c:	40013400 	.word	0x40013400
 800e660:	40014000 	.word	0x40014000
 800e664:	40014400 	.word	0x40014400
 800e668:	40014800 	.word	0x40014800

0800e66c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b087      	sub	sp, #28
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6a1b      	ldr	r3, [r3, #32]
 800e67a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a1b      	ldr	r3, [r3, #32]
 800e680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e69e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	68fa      	ldr	r2, [r7, #12]
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e6b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	041b      	lsls	r3, r3, #16
 800e6b8:	693a      	ldr	r2, [r7, #16]
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4a17      	ldr	r2, [pc, #92]	; (800e720 <TIM_OC5_SetConfig+0xb4>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d00f      	beq.n	800e6e6 <TIM_OC5_SetConfig+0x7a>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4a16      	ldr	r2, [pc, #88]	; (800e724 <TIM_OC5_SetConfig+0xb8>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d00b      	beq.n	800e6e6 <TIM_OC5_SetConfig+0x7a>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	4a15      	ldr	r2, [pc, #84]	; (800e728 <TIM_OC5_SetConfig+0xbc>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d007      	beq.n	800e6e6 <TIM_OC5_SetConfig+0x7a>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	4a14      	ldr	r2, [pc, #80]	; (800e72c <TIM_OC5_SetConfig+0xc0>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d003      	beq.n	800e6e6 <TIM_OC5_SetConfig+0x7a>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4a13      	ldr	r2, [pc, #76]	; (800e730 <TIM_OC5_SetConfig+0xc4>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d109      	bne.n	800e6fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e6ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	695b      	ldr	r3, [r3, #20]
 800e6f2:	021b      	lsls	r3, r3, #8
 800e6f4:	697a      	ldr	r2, [r7, #20]
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	697a      	ldr	r2, [r7, #20]
 800e6fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	685a      	ldr	r2, [r3, #4]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	693a      	ldr	r2, [r7, #16]
 800e712:	621a      	str	r2, [r3, #32]
}
 800e714:	bf00      	nop
 800e716:	371c      	adds	r7, #28
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr
 800e720:	40012c00 	.word	0x40012c00
 800e724:	40013400 	.word	0x40013400
 800e728:	40014000 	.word	0x40014000
 800e72c:	40014400 	.word	0x40014400
 800e730:	40014800 	.word	0x40014800

0800e734 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e734:	b480      	push	{r7}
 800e736:	b087      	sub	sp, #28
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6a1b      	ldr	r3, [r3, #32]
 800e742:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6a1b      	ldr	r3, [r3, #32]
 800e748:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	021b      	lsls	r3, r3, #8
 800e76e:	68fa      	ldr	r2, [r7, #12]
 800e770:	4313      	orrs	r3, r2
 800e772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e77a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	051b      	lsls	r3, r3, #20
 800e782:	693a      	ldr	r2, [r7, #16]
 800e784:	4313      	orrs	r3, r2
 800e786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	4a18      	ldr	r2, [pc, #96]	; (800e7ec <TIM_OC6_SetConfig+0xb8>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d00f      	beq.n	800e7b0 <TIM_OC6_SetConfig+0x7c>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	4a17      	ldr	r2, [pc, #92]	; (800e7f0 <TIM_OC6_SetConfig+0xbc>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d00b      	beq.n	800e7b0 <TIM_OC6_SetConfig+0x7c>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	4a16      	ldr	r2, [pc, #88]	; (800e7f4 <TIM_OC6_SetConfig+0xc0>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d007      	beq.n	800e7b0 <TIM_OC6_SetConfig+0x7c>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	4a15      	ldr	r2, [pc, #84]	; (800e7f8 <TIM_OC6_SetConfig+0xc4>)
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d003      	beq.n	800e7b0 <TIM_OC6_SetConfig+0x7c>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	4a14      	ldr	r2, [pc, #80]	; (800e7fc <TIM_OC6_SetConfig+0xc8>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d109      	bne.n	800e7c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e7b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	695b      	ldr	r3, [r3, #20]
 800e7bc:	029b      	lsls	r3, r3, #10
 800e7be:	697a      	ldr	r2, [r7, #20]
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	685a      	ldr	r2, [r3, #4]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	693a      	ldr	r2, [r7, #16]
 800e7dc:	621a      	str	r2, [r3, #32]
}
 800e7de:	bf00      	nop
 800e7e0:	371c      	adds	r7, #28
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop
 800e7ec:	40012c00 	.word	0x40012c00
 800e7f0:	40013400 	.word	0x40013400
 800e7f4:	40014000 	.word	0x40014000
 800e7f8:	40014400 	.word	0x40014400
 800e7fc:	40014800 	.word	0x40014800

0800e800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e800:	b480      	push	{r7}
 800e802:	b087      	sub	sp, #28
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	f003 031f 	and.w	r3, r3, #31
 800e812:	2201      	movs	r2, #1
 800e814:	fa02 f303 	lsl.w	r3, r2, r3
 800e818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6a1a      	ldr	r2, [r3, #32]
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	43db      	mvns	r3, r3
 800e822:	401a      	ands	r2, r3
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6a1a      	ldr	r2, [r3, #32]
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	f003 031f 	and.w	r3, r3, #31
 800e832:	6879      	ldr	r1, [r7, #4]
 800e834:	fa01 f303 	lsl.w	r3, r1, r3
 800e838:	431a      	orrs	r2, r3
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	621a      	str	r2, [r3, #32]
}
 800e83e:	bf00      	nop
 800e840:	371c      	adds	r7, #28
 800e842:	46bd      	mov	sp, r7
 800e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e848:	4770      	bx	lr
	...

0800e84c <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e856:	2300      	movs	r3, #0
 800e858:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d109      	bne.n	800e874 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e866:	b2db      	uxtb	r3, r3
 800e868:	2b01      	cmp	r3, #1
 800e86a:	bf14      	ite	ne
 800e86c:	2301      	movne	r3, #1
 800e86e:	2300      	moveq	r3, #0
 800e870:	b2db      	uxtb	r3, r3
 800e872:	e022      	b.n	800e8ba <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	2b04      	cmp	r3, #4
 800e878:	d109      	bne.n	800e88e <HAL_TIMEx_PWMN_Start_IT+0x42>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e880:	b2db      	uxtb	r3, r3
 800e882:	2b01      	cmp	r3, #1
 800e884:	bf14      	ite	ne
 800e886:	2301      	movne	r3, #1
 800e888:	2300      	moveq	r3, #0
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	e015      	b.n	800e8ba <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	2b08      	cmp	r3, #8
 800e892:	d109      	bne.n	800e8a8 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	bf14      	ite	ne
 800e8a0:	2301      	movne	r3, #1
 800e8a2:	2300      	moveq	r3, #0
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	e008      	b.n	800e8ba <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	bf14      	ite	ne
 800e8b4:	2301      	movne	r3, #1
 800e8b6:	2300      	moveq	r3, #0
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d001      	beq.n	800e8c2 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e0bc      	b.n	800ea3c <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d104      	bne.n	800e8d2 <HAL_TIMEx_PWMN_Start_IT+0x86>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2202      	movs	r2, #2
 800e8cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8d0:	e013      	b.n	800e8fa <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	2b04      	cmp	r3, #4
 800e8d6:	d104      	bne.n	800e8e2 <HAL_TIMEx_PWMN_Start_IT+0x96>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2202      	movs	r2, #2
 800e8dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8e0:	e00b      	b.n	800e8fa <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	2b08      	cmp	r3, #8
 800e8e6:	d104      	bne.n	800e8f2 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e8f0:	e003      	b.n	800e8fa <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2202      	movs	r2, #2
 800e8f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	2b0c      	cmp	r3, #12
 800e8fe:	d841      	bhi.n	800e984 <HAL_TIMEx_PWMN_Start_IT+0x138>
 800e900:	a201      	add	r2, pc, #4	; (adr r2, 800e908 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800e902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e906:	bf00      	nop
 800e908:	0800e93d 	.word	0x0800e93d
 800e90c:	0800e985 	.word	0x0800e985
 800e910:	0800e985 	.word	0x0800e985
 800e914:	0800e985 	.word	0x0800e985
 800e918:	0800e94f 	.word	0x0800e94f
 800e91c:	0800e985 	.word	0x0800e985
 800e920:	0800e985 	.word	0x0800e985
 800e924:	0800e985 	.word	0x0800e985
 800e928:	0800e961 	.word	0x0800e961
 800e92c:	0800e985 	.word	0x0800e985
 800e930:	0800e985 	.word	0x0800e985
 800e934:	0800e985 	.word	0x0800e985
 800e938:	0800e973 	.word	0x0800e973
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	68da      	ldr	r2, [r3, #12]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f042 0202 	orr.w	r2, r2, #2
 800e94a:	60da      	str	r2, [r3, #12]
      break;
 800e94c:	e01d      	b.n	800e98a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68da      	ldr	r2, [r3, #12]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f042 0204 	orr.w	r2, r2, #4
 800e95c:	60da      	str	r2, [r3, #12]
      break;
 800e95e:	e014      	b.n	800e98a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68da      	ldr	r2, [r3, #12]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f042 0208 	orr.w	r2, r2, #8
 800e96e:	60da      	str	r2, [r3, #12]
      break;
 800e970:	e00b      	b.n	800e98a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	68da      	ldr	r2, [r3, #12]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f042 0210 	orr.w	r2, r2, #16
 800e980:	60da      	str	r2, [r3, #12]
      break;
 800e982:	e002      	b.n	800e98a <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800e984:	2301      	movs	r3, #1
 800e986:	73fb      	strb	r3, [r7, #15]
      break;
 800e988:	bf00      	nop
  }

  if (status == HAL_OK)
 800e98a:	7bfb      	ldrb	r3, [r7, #15]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d154      	bne.n	800ea3a <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	68da      	ldr	r2, [r3, #12]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e99e:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2204      	movs	r2, #4
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f000 f9ab 	bl	800ed04 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e9bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4a20      	ldr	r2, [pc, #128]	; (800ea44 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d018      	beq.n	800e9fa <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9d0:	d013      	beq.n	800e9fa <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a1c      	ldr	r2, [pc, #112]	; (800ea48 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d00e      	beq.n	800e9fa <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a1a      	ldr	r2, [pc, #104]	; (800ea4c <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d009      	beq.n	800e9fa <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a19      	ldr	r2, [pc, #100]	; (800ea50 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d004      	beq.n	800e9fa <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a17      	ldr	r2, [pc, #92]	; (800ea54 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d115      	bne.n	800ea26 <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	689a      	ldr	r2, [r3, #8]
 800ea00:	4b15      	ldr	r3, [pc, #84]	; (800ea58 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800ea02:	4013      	ands	r3, r2
 800ea04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	2b06      	cmp	r3, #6
 800ea0a:	d015      	beq.n	800ea38 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea12:	d011      	beq.n	800ea38 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f042 0201 	orr.w	r2, r2, #1
 800ea22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea24:	e008      	b.n	800ea38 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f042 0201 	orr.w	r2, r2, #1
 800ea34:	601a      	str	r2, [r3, #0]
 800ea36:	e000      	b.n	800ea3a <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea38:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ea3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	40012c00 	.word	0x40012c00
 800ea48:	40000400 	.word	0x40000400
 800ea4c:	40000800 	.word	0x40000800
 800ea50:	40013400 	.word	0x40013400
 800ea54:	40014000 	.word	0x40014000
 800ea58:	00010007 	.word	0x00010007

0800ea5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d101      	bne.n	800ea74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea70:	2302      	movs	r3, #2
 800ea72:	e065      	b.n	800eb40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2201      	movs	r2, #1
 800ea78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2202      	movs	r2, #2
 800ea80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a2c      	ldr	r2, [pc, #176]	; (800eb4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d004      	beq.n	800eaa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a2b      	ldr	r2, [pc, #172]	; (800eb50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d108      	bne.n	800eaba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eaae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	4313      	orrs	r3, r2
 800eab8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800eac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	68fa      	ldr	r2, [r7, #12]
 800eacc:	4313      	orrs	r3, r2
 800eace:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	68fa      	ldr	r2, [r7, #12]
 800ead6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4a1b      	ldr	r2, [pc, #108]	; (800eb4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800eade:	4293      	cmp	r3, r2
 800eae0:	d018      	beq.n	800eb14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaea:	d013      	beq.n	800eb14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	4a18      	ldr	r2, [pc, #96]	; (800eb54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d00e      	beq.n	800eb14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a17      	ldr	r2, [pc, #92]	; (800eb58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d009      	beq.n	800eb14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4a12      	ldr	r2, [pc, #72]	; (800eb50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d004      	beq.n	800eb14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4a13      	ldr	r2, [pc, #76]	; (800eb5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d10c      	bne.n	800eb2e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	68ba      	ldr	r2, [r7, #8]
 800eb22:	4313      	orrs	r3, r2
 800eb24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	68ba      	ldr	r2, [r7, #8]
 800eb2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2201      	movs	r2, #1
 800eb32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3714      	adds	r7, #20
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr
 800eb4c:	40012c00 	.word	0x40012c00
 800eb50:	40013400 	.word	0x40013400
 800eb54:	40000400 	.word	0x40000400
 800eb58:	40000800 	.word	0x40000800
 800eb5c:	40014000 	.word	0x40014000

0800eb60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b085      	sub	sp, #20
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d101      	bne.n	800eb7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eb78:	2302      	movs	r3, #2
 800eb7a:	e073      	b.n	800ec64 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2201      	movs	r2, #1
 800eb80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	689b      	ldr	r3, [r3, #8]
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	691b      	ldr	r3, [r3, #16]
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	695b      	ldr	r3, [r3, #20]
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	699b      	ldr	r3, [r3, #24]
 800ebf0:	041b      	lsls	r3, r3, #16
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	69db      	ldr	r3, [r3, #28]
 800ec00:	4313      	orrs	r3, r2
 800ec02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4a19      	ldr	r2, [pc, #100]	; (800ec70 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d004      	beq.n	800ec18 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4a18      	ldr	r2, [pc, #96]	; (800ec74 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d11c      	bne.n	800ec52 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec22:	051b      	lsls	r3, r3, #20
 800ec24:	4313      	orrs	r3, r2
 800ec26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	6a1b      	ldr	r3, [r3, #32]
 800ec32:	4313      	orrs	r3, r2
 800ec34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec40:	4313      	orrs	r3, r2
 800ec42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68fa      	ldr	r2, [r7, #12]
 800ec58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3714      	adds	r7, #20
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr
 800ec70:	40012c00 	.word	0x40012c00
 800ec74:	40013400 	.word	0x40013400

0800ec78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec94:	bf00      	nop
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eca8:	bf00      	nop
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ecbc:	bf00      	nop
 800ecbe:	370c      	adds	r7, #12
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b083      	sub	sp, #12
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ece4:	bf00      	nop
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ecf8:	bf00      	nop
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b087      	sub	sp, #28
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	f003 030f 	and.w	r3, r3, #15
 800ed16:	2204      	movs	r2, #4
 800ed18:	fa02 f303 	lsl.w	r3, r2, r3
 800ed1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6a1a      	ldr	r2, [r3, #32]
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	43db      	mvns	r3, r3
 800ed26:	401a      	ands	r2, r3
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6a1a      	ldr	r2, [r3, #32]
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	f003 030f 	and.w	r3, r3, #15
 800ed36:	6879      	ldr	r1, [r7, #4]
 800ed38:	fa01 f303 	lsl.w	r3, r1, r3
 800ed3c:	431a      	orrs	r2, r3
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	621a      	str	r2, [r3, #32]
}
 800ed42:	bf00      	nop
 800ed44:	371c      	adds	r7, #28
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr

0800ed4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b082      	sub	sp, #8
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d101      	bne.n	800ed60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e042      	b.n	800ede6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d106      	bne.n	800ed78 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f7f6 faf0 	bl	8005358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2224      	movs	r2, #36	; 0x24
 800ed7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f022 0201 	bic.w	r2, r2, #1
 800ed8e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d002      	beq.n	800ed9e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 faf5 	bl	800f388 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 f826 	bl	800edf0 <UART_SetConfig>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d101      	bne.n	800edae <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800edaa:	2301      	movs	r3, #1
 800edac:	e01b      	b.n	800ede6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	685a      	ldr	r2, [r3, #4]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800edbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	689a      	ldr	r2, [r3, #8]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800edcc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f042 0201 	orr.w	r2, r2, #1
 800eddc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 fb74 	bl	800f4cc <UART_CheckIdleState>
 800ede4:	4603      	mov	r3, r0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3708      	adds	r7, #8
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
	...

0800edf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800edf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800edf4:	b08c      	sub	sp, #48	; 0x30
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	689a      	ldr	r2, [r3, #8]
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	691b      	ldr	r3, [r3, #16]
 800ee08:	431a      	orrs	r2, r3
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	695b      	ldr	r3, [r3, #20]
 800ee0e:	431a      	orrs	r2, r3
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	69db      	ldr	r3, [r3, #28]
 800ee14:	4313      	orrs	r3, r2
 800ee16:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	4bab      	ldr	r3, [pc, #684]	; (800f0cc <UART_SetConfig+0x2dc>)
 800ee20:	4013      	ands	r3, r2
 800ee22:	697a      	ldr	r2, [r7, #20]
 800ee24:	6812      	ldr	r2, [r2, #0]
 800ee26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee28:	430b      	orrs	r3, r1
 800ee2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	68da      	ldr	r2, [r3, #12]
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	430a      	orrs	r2, r1
 800ee40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	699b      	ldr	r3, [r3, #24]
 800ee46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4aa0      	ldr	r2, [pc, #640]	; (800f0d0 <UART_SetConfig+0x2e0>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d004      	beq.n	800ee5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	6a1b      	ldr	r3, [r3, #32]
 800ee56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	689b      	ldr	r3, [r3, #8]
 800ee62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ee66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	6812      	ldr	r2, [r2, #0]
 800ee6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee70:	430b      	orrs	r3, r1
 800ee72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7a:	f023 010f 	bic.w	r1, r3, #15
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	430a      	orrs	r2, r1
 800ee88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a91      	ldr	r2, [pc, #580]	; (800f0d4 <UART_SetConfig+0x2e4>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d125      	bne.n	800eee0 <UART_SetConfig+0xf0>
 800ee94:	4b90      	ldr	r3, [pc, #576]	; (800f0d8 <UART_SetConfig+0x2e8>)
 800ee96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee9a:	f003 0303 	and.w	r3, r3, #3
 800ee9e:	2b03      	cmp	r3, #3
 800eea0:	d81a      	bhi.n	800eed8 <UART_SetConfig+0xe8>
 800eea2:	a201      	add	r2, pc, #4	; (adr r2, 800eea8 <UART_SetConfig+0xb8>)
 800eea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea8:	0800eeb9 	.word	0x0800eeb9
 800eeac:	0800eec9 	.word	0x0800eec9
 800eeb0:	0800eec1 	.word	0x0800eec1
 800eeb4:	0800eed1 	.word	0x0800eed1
 800eeb8:	2301      	movs	r3, #1
 800eeba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eebe:	e0d6      	b.n	800f06e <UART_SetConfig+0x27e>
 800eec0:	2302      	movs	r3, #2
 800eec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eec6:	e0d2      	b.n	800f06e <UART_SetConfig+0x27e>
 800eec8:	2304      	movs	r3, #4
 800eeca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eece:	e0ce      	b.n	800f06e <UART_SetConfig+0x27e>
 800eed0:	2308      	movs	r3, #8
 800eed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eed6:	e0ca      	b.n	800f06e <UART_SetConfig+0x27e>
 800eed8:	2310      	movs	r3, #16
 800eeda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eede:	e0c6      	b.n	800f06e <UART_SetConfig+0x27e>
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4a7d      	ldr	r2, [pc, #500]	; (800f0dc <UART_SetConfig+0x2ec>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d138      	bne.n	800ef5c <UART_SetConfig+0x16c>
 800eeea:	4b7b      	ldr	r3, [pc, #492]	; (800f0d8 <UART_SetConfig+0x2e8>)
 800eeec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eef0:	f003 030c 	and.w	r3, r3, #12
 800eef4:	2b0c      	cmp	r3, #12
 800eef6:	d82d      	bhi.n	800ef54 <UART_SetConfig+0x164>
 800eef8:	a201      	add	r2, pc, #4	; (adr r2, 800ef00 <UART_SetConfig+0x110>)
 800eefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eefe:	bf00      	nop
 800ef00:	0800ef35 	.word	0x0800ef35
 800ef04:	0800ef55 	.word	0x0800ef55
 800ef08:	0800ef55 	.word	0x0800ef55
 800ef0c:	0800ef55 	.word	0x0800ef55
 800ef10:	0800ef45 	.word	0x0800ef45
 800ef14:	0800ef55 	.word	0x0800ef55
 800ef18:	0800ef55 	.word	0x0800ef55
 800ef1c:	0800ef55 	.word	0x0800ef55
 800ef20:	0800ef3d 	.word	0x0800ef3d
 800ef24:	0800ef55 	.word	0x0800ef55
 800ef28:	0800ef55 	.word	0x0800ef55
 800ef2c:	0800ef55 	.word	0x0800ef55
 800ef30:	0800ef4d 	.word	0x0800ef4d
 800ef34:	2300      	movs	r3, #0
 800ef36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef3a:	e098      	b.n	800f06e <UART_SetConfig+0x27e>
 800ef3c:	2302      	movs	r3, #2
 800ef3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef42:	e094      	b.n	800f06e <UART_SetConfig+0x27e>
 800ef44:	2304      	movs	r3, #4
 800ef46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef4a:	e090      	b.n	800f06e <UART_SetConfig+0x27e>
 800ef4c:	2308      	movs	r3, #8
 800ef4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef52:	e08c      	b.n	800f06e <UART_SetConfig+0x27e>
 800ef54:	2310      	movs	r3, #16
 800ef56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef5a:	e088      	b.n	800f06e <UART_SetConfig+0x27e>
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	4a5f      	ldr	r2, [pc, #380]	; (800f0e0 <UART_SetConfig+0x2f0>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d125      	bne.n	800efb2 <UART_SetConfig+0x1c2>
 800ef66:	4b5c      	ldr	r3, [pc, #368]	; (800f0d8 <UART_SetConfig+0x2e8>)
 800ef68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ef70:	2b30      	cmp	r3, #48	; 0x30
 800ef72:	d016      	beq.n	800efa2 <UART_SetConfig+0x1b2>
 800ef74:	2b30      	cmp	r3, #48	; 0x30
 800ef76:	d818      	bhi.n	800efaa <UART_SetConfig+0x1ba>
 800ef78:	2b20      	cmp	r3, #32
 800ef7a:	d00a      	beq.n	800ef92 <UART_SetConfig+0x1a2>
 800ef7c:	2b20      	cmp	r3, #32
 800ef7e:	d814      	bhi.n	800efaa <UART_SetConfig+0x1ba>
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d002      	beq.n	800ef8a <UART_SetConfig+0x19a>
 800ef84:	2b10      	cmp	r3, #16
 800ef86:	d008      	beq.n	800ef9a <UART_SetConfig+0x1aa>
 800ef88:	e00f      	b.n	800efaa <UART_SetConfig+0x1ba>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef90:	e06d      	b.n	800f06e <UART_SetConfig+0x27e>
 800ef92:	2302      	movs	r3, #2
 800ef94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef98:	e069      	b.n	800f06e <UART_SetConfig+0x27e>
 800ef9a:	2304      	movs	r3, #4
 800ef9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800efa0:	e065      	b.n	800f06e <UART_SetConfig+0x27e>
 800efa2:	2308      	movs	r3, #8
 800efa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800efa8:	e061      	b.n	800f06e <UART_SetConfig+0x27e>
 800efaa:	2310      	movs	r3, #16
 800efac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800efb0:	e05d      	b.n	800f06e <UART_SetConfig+0x27e>
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a4b      	ldr	r2, [pc, #300]	; (800f0e4 <UART_SetConfig+0x2f4>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d125      	bne.n	800f008 <UART_SetConfig+0x218>
 800efbc:	4b46      	ldr	r3, [pc, #280]	; (800f0d8 <UART_SetConfig+0x2e8>)
 800efbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800efc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800efc6:	2bc0      	cmp	r3, #192	; 0xc0
 800efc8:	d016      	beq.n	800eff8 <UART_SetConfig+0x208>
 800efca:	2bc0      	cmp	r3, #192	; 0xc0
 800efcc:	d818      	bhi.n	800f000 <UART_SetConfig+0x210>
 800efce:	2b80      	cmp	r3, #128	; 0x80
 800efd0:	d00a      	beq.n	800efe8 <UART_SetConfig+0x1f8>
 800efd2:	2b80      	cmp	r3, #128	; 0x80
 800efd4:	d814      	bhi.n	800f000 <UART_SetConfig+0x210>
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d002      	beq.n	800efe0 <UART_SetConfig+0x1f0>
 800efda:	2b40      	cmp	r3, #64	; 0x40
 800efdc:	d008      	beq.n	800eff0 <UART_SetConfig+0x200>
 800efde:	e00f      	b.n	800f000 <UART_SetConfig+0x210>
 800efe0:	2300      	movs	r3, #0
 800efe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800efe6:	e042      	b.n	800f06e <UART_SetConfig+0x27e>
 800efe8:	2302      	movs	r3, #2
 800efea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800efee:	e03e      	b.n	800f06e <UART_SetConfig+0x27e>
 800eff0:	2304      	movs	r3, #4
 800eff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eff6:	e03a      	b.n	800f06e <UART_SetConfig+0x27e>
 800eff8:	2308      	movs	r3, #8
 800effa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800effe:	e036      	b.n	800f06e <UART_SetConfig+0x27e>
 800f000:	2310      	movs	r3, #16
 800f002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f006:	e032      	b.n	800f06e <UART_SetConfig+0x27e>
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a30      	ldr	r2, [pc, #192]	; (800f0d0 <UART_SetConfig+0x2e0>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d12a      	bne.n	800f068 <UART_SetConfig+0x278>
 800f012:	4b31      	ldr	r3, [pc, #196]	; (800f0d8 <UART_SetConfig+0x2e8>)
 800f014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f018:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f01c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f020:	d01a      	beq.n	800f058 <UART_SetConfig+0x268>
 800f022:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f026:	d81b      	bhi.n	800f060 <UART_SetConfig+0x270>
 800f028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f02c:	d00c      	beq.n	800f048 <UART_SetConfig+0x258>
 800f02e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f032:	d815      	bhi.n	800f060 <UART_SetConfig+0x270>
 800f034:	2b00      	cmp	r3, #0
 800f036:	d003      	beq.n	800f040 <UART_SetConfig+0x250>
 800f038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f03c:	d008      	beq.n	800f050 <UART_SetConfig+0x260>
 800f03e:	e00f      	b.n	800f060 <UART_SetConfig+0x270>
 800f040:	2300      	movs	r3, #0
 800f042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f046:	e012      	b.n	800f06e <UART_SetConfig+0x27e>
 800f048:	2302      	movs	r3, #2
 800f04a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f04e:	e00e      	b.n	800f06e <UART_SetConfig+0x27e>
 800f050:	2304      	movs	r3, #4
 800f052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f056:	e00a      	b.n	800f06e <UART_SetConfig+0x27e>
 800f058:	2308      	movs	r3, #8
 800f05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f05e:	e006      	b.n	800f06e <UART_SetConfig+0x27e>
 800f060:	2310      	movs	r3, #16
 800f062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f066:	e002      	b.n	800f06e <UART_SetConfig+0x27e>
 800f068:	2310      	movs	r3, #16
 800f06a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4a17      	ldr	r2, [pc, #92]	; (800f0d0 <UART_SetConfig+0x2e0>)
 800f074:	4293      	cmp	r3, r2
 800f076:	f040 80a8 	bne.w	800f1ca <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f07a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f07e:	2b08      	cmp	r3, #8
 800f080:	d834      	bhi.n	800f0ec <UART_SetConfig+0x2fc>
 800f082:	a201      	add	r2, pc, #4	; (adr r2, 800f088 <UART_SetConfig+0x298>)
 800f084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f088:	0800f0ad 	.word	0x0800f0ad
 800f08c:	0800f0ed 	.word	0x0800f0ed
 800f090:	0800f0b5 	.word	0x0800f0b5
 800f094:	0800f0ed 	.word	0x0800f0ed
 800f098:	0800f0bb 	.word	0x0800f0bb
 800f09c:	0800f0ed 	.word	0x0800f0ed
 800f0a0:	0800f0ed 	.word	0x0800f0ed
 800f0a4:	0800f0ed 	.word	0x0800f0ed
 800f0a8:	0800f0c3 	.word	0x0800f0c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0ac:	f7fd f90c 	bl	800c2c8 <HAL_RCC_GetPCLK1Freq>
 800f0b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f0b2:	e021      	b.n	800f0f8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f0b4:	4b0c      	ldr	r3, [pc, #48]	; (800f0e8 <UART_SetConfig+0x2f8>)
 800f0b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f0b8:	e01e      	b.n	800f0f8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0ba:	f7fd f897 	bl	800c1ec <HAL_RCC_GetSysClockFreq>
 800f0be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f0c0:	e01a      	b.n	800f0f8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f0c8:	e016      	b.n	800f0f8 <UART_SetConfig+0x308>
 800f0ca:	bf00      	nop
 800f0cc:	cfff69f3 	.word	0xcfff69f3
 800f0d0:	40008000 	.word	0x40008000
 800f0d4:	40013800 	.word	0x40013800
 800f0d8:	40021000 	.word	0x40021000
 800f0dc:	40004400 	.word	0x40004400
 800f0e0:	40004800 	.word	0x40004800
 800f0e4:	40004c00 	.word	0x40004c00
 800f0e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f0f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f000 812a 	beq.w	800f354 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f104:	4a9e      	ldr	r2, [pc, #632]	; (800f380 <UART_SetConfig+0x590>)
 800f106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f10a:	461a      	mov	r2, r3
 800f10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f112:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	685a      	ldr	r2, [r3, #4]
 800f118:	4613      	mov	r3, r2
 800f11a:	005b      	lsls	r3, r3, #1
 800f11c:	4413      	add	r3, r2
 800f11e:	69ba      	ldr	r2, [r7, #24]
 800f120:	429a      	cmp	r2, r3
 800f122:	d305      	bcc.n	800f130 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f12a:	69ba      	ldr	r2, [r7, #24]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d903      	bls.n	800f138 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800f130:	2301      	movs	r3, #1
 800f132:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f136:	e10d      	b.n	800f354 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13a:	2200      	movs	r2, #0
 800f13c:	60bb      	str	r3, [r7, #8]
 800f13e:	60fa      	str	r2, [r7, #12]
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f144:	4a8e      	ldr	r2, [pc, #568]	; (800f380 <UART_SetConfig+0x590>)
 800f146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	2200      	movs	r2, #0
 800f14e:	603b      	str	r3, [r7, #0]
 800f150:	607a      	str	r2, [r7, #4]
 800f152:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f15a:	f7f1 fdbd 	bl	8000cd8 <__aeabi_uldivmod>
 800f15e:	4602      	mov	r2, r0
 800f160:	460b      	mov	r3, r1
 800f162:	4610      	mov	r0, r2
 800f164:	4619      	mov	r1, r3
 800f166:	f04f 0200 	mov.w	r2, #0
 800f16a:	f04f 0300 	mov.w	r3, #0
 800f16e:	020b      	lsls	r3, r1, #8
 800f170:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f174:	0202      	lsls	r2, r0, #8
 800f176:	6979      	ldr	r1, [r7, #20]
 800f178:	6849      	ldr	r1, [r1, #4]
 800f17a:	0849      	lsrs	r1, r1, #1
 800f17c:	2000      	movs	r0, #0
 800f17e:	460c      	mov	r4, r1
 800f180:	4605      	mov	r5, r0
 800f182:	eb12 0804 	adds.w	r8, r2, r4
 800f186:	eb43 0905 	adc.w	r9, r3, r5
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	469a      	mov	sl, r3
 800f192:	4693      	mov	fp, r2
 800f194:	4652      	mov	r2, sl
 800f196:	465b      	mov	r3, fp
 800f198:	4640      	mov	r0, r8
 800f19a:	4649      	mov	r1, r9
 800f19c:	f7f1 fd9c 	bl	8000cd8 <__aeabi_uldivmod>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	4613      	mov	r3, r2
 800f1a6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f1a8:	6a3b      	ldr	r3, [r7, #32]
 800f1aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f1ae:	d308      	bcc.n	800f1c2 <UART_SetConfig+0x3d2>
 800f1b0:	6a3b      	ldr	r3, [r7, #32]
 800f1b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f1b6:	d204      	bcs.n	800f1c2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	6a3a      	ldr	r2, [r7, #32]
 800f1be:	60da      	str	r2, [r3, #12]
 800f1c0:	e0c8      	b.n	800f354 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f1c8:	e0c4      	b.n	800f354 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	69db      	ldr	r3, [r3, #28]
 800f1ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1d2:	d167      	bne.n	800f2a4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800f1d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f1d8:	2b08      	cmp	r3, #8
 800f1da:	d828      	bhi.n	800f22e <UART_SetConfig+0x43e>
 800f1dc:	a201      	add	r2, pc, #4	; (adr r2, 800f1e4 <UART_SetConfig+0x3f4>)
 800f1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e2:	bf00      	nop
 800f1e4:	0800f209 	.word	0x0800f209
 800f1e8:	0800f211 	.word	0x0800f211
 800f1ec:	0800f219 	.word	0x0800f219
 800f1f0:	0800f22f 	.word	0x0800f22f
 800f1f4:	0800f21f 	.word	0x0800f21f
 800f1f8:	0800f22f 	.word	0x0800f22f
 800f1fc:	0800f22f 	.word	0x0800f22f
 800f200:	0800f22f 	.word	0x0800f22f
 800f204:	0800f227 	.word	0x0800f227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f208:	f7fd f85e 	bl	800c2c8 <HAL_RCC_GetPCLK1Freq>
 800f20c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f20e:	e014      	b.n	800f23a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f210:	f7fd f870 	bl	800c2f4 <HAL_RCC_GetPCLK2Freq>
 800f214:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f216:	e010      	b.n	800f23a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f218:	4b5a      	ldr	r3, [pc, #360]	; (800f384 <UART_SetConfig+0x594>)
 800f21a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f21c:	e00d      	b.n	800f23a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f21e:	f7fc ffe5 	bl	800c1ec <HAL_RCC_GetSysClockFreq>
 800f222:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f224:	e009      	b.n	800f23a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f22a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f22c:	e005      	b.n	800f23a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800f22e:	2300      	movs	r3, #0
 800f230:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f232:	2301      	movs	r3, #1
 800f234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f000 8089 	beq.w	800f354 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f246:	4a4e      	ldr	r2, [pc, #312]	; (800f380 <UART_SetConfig+0x590>)
 800f248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f24c:	461a      	mov	r2, r3
 800f24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f250:	fbb3 f3f2 	udiv	r3, r3, r2
 800f254:	005a      	lsls	r2, r3, #1
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	085b      	lsrs	r3, r3, #1
 800f25c:	441a      	add	r2, r3
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	fbb2 f3f3 	udiv	r3, r2, r3
 800f266:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f268:	6a3b      	ldr	r3, [r7, #32]
 800f26a:	2b0f      	cmp	r3, #15
 800f26c:	d916      	bls.n	800f29c <UART_SetConfig+0x4ac>
 800f26e:	6a3b      	ldr	r3, [r7, #32]
 800f270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f274:	d212      	bcs.n	800f29c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	b29b      	uxth	r3, r3
 800f27a:	f023 030f 	bic.w	r3, r3, #15
 800f27e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f280:	6a3b      	ldr	r3, [r7, #32]
 800f282:	085b      	lsrs	r3, r3, #1
 800f284:	b29b      	uxth	r3, r3
 800f286:	f003 0307 	and.w	r3, r3, #7
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	8bfb      	ldrh	r3, [r7, #30]
 800f28e:	4313      	orrs	r3, r2
 800f290:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	8bfa      	ldrh	r2, [r7, #30]
 800f298:	60da      	str	r2, [r3, #12]
 800f29a:	e05b      	b.n	800f354 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f2a2:	e057      	b.n	800f354 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f2a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f2a8:	2b08      	cmp	r3, #8
 800f2aa:	d828      	bhi.n	800f2fe <UART_SetConfig+0x50e>
 800f2ac:	a201      	add	r2, pc, #4	; (adr r2, 800f2b4 <UART_SetConfig+0x4c4>)
 800f2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b2:	bf00      	nop
 800f2b4:	0800f2d9 	.word	0x0800f2d9
 800f2b8:	0800f2e1 	.word	0x0800f2e1
 800f2bc:	0800f2e9 	.word	0x0800f2e9
 800f2c0:	0800f2ff 	.word	0x0800f2ff
 800f2c4:	0800f2ef 	.word	0x0800f2ef
 800f2c8:	0800f2ff 	.word	0x0800f2ff
 800f2cc:	0800f2ff 	.word	0x0800f2ff
 800f2d0:	0800f2ff 	.word	0x0800f2ff
 800f2d4:	0800f2f7 	.word	0x0800f2f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2d8:	f7fc fff6 	bl	800c2c8 <HAL_RCC_GetPCLK1Freq>
 800f2dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f2de:	e014      	b.n	800f30a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2e0:	f7fd f808 	bl	800c2f4 <HAL_RCC_GetPCLK2Freq>
 800f2e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f2e6:	e010      	b.n	800f30a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f2e8:	4b26      	ldr	r3, [pc, #152]	; (800f384 <UART_SetConfig+0x594>)
 800f2ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f2ec:	e00d      	b.n	800f30a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f2ee:	f7fc ff7d 	bl	800c1ec <HAL_RCC_GetSysClockFreq>
 800f2f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f2f4:	e009      	b.n	800f30a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f2fc:	e005      	b.n	800f30a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800f2fe:	2300      	movs	r3, #0
 800f300:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f302:	2301      	movs	r3, #1
 800f304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f308:	bf00      	nop
    }

    if (pclk != 0U)
 800f30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d021      	beq.n	800f354 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f314:	4a1a      	ldr	r2, [pc, #104]	; (800f380 <UART_SetConfig+0x590>)
 800f316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f31a:	461a      	mov	r2, r3
 800f31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	085b      	lsrs	r3, r3, #1
 800f328:	441a      	add	r2, r3
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f332:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f334:	6a3b      	ldr	r3, [r7, #32]
 800f336:	2b0f      	cmp	r3, #15
 800f338:	d909      	bls.n	800f34e <UART_SetConfig+0x55e>
 800f33a:	6a3b      	ldr	r3, [r7, #32]
 800f33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f340:	d205      	bcs.n	800f34e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f342:	6a3b      	ldr	r3, [r7, #32]
 800f344:	b29a      	uxth	r2, r3
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	60da      	str	r2, [r3, #12]
 800f34c:	e002      	b.n	800f354 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800f34e:	2301      	movs	r3, #1
 800f350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	2201      	movs	r2, #1
 800f358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	2201      	movs	r2, #1
 800f360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	2200      	movs	r2, #0
 800f368:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	2200      	movs	r2, #0
 800f36e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f370:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f374:	4618      	mov	r0, r3
 800f376:	3730      	adds	r7, #48	; 0x30
 800f378:	46bd      	mov	sp, r7
 800f37a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f37e:	bf00      	nop
 800f380:	0801ae40 	.word	0x0801ae40
 800f384:	00f42400 	.word	0x00f42400

0800f388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f394:	f003 0308 	and.w	r3, r3, #8
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d00a      	beq.n	800f3b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	430a      	orrs	r2, r1
 800f3b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3b6:	f003 0301 	and.w	r3, r3, #1
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d00a      	beq.n	800f3d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	430a      	orrs	r2, r1
 800f3d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3d8:	f003 0302 	and.w	r3, r3, #2
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d00a      	beq.n	800f3f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	430a      	orrs	r2, r1
 800f3f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3fa:	f003 0304 	and.w	r3, r3, #4
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00a      	beq.n	800f418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	430a      	orrs	r2, r1
 800f416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f41c:	f003 0310 	and.w	r3, r3, #16
 800f420:	2b00      	cmp	r3, #0
 800f422:	d00a      	beq.n	800f43a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	689b      	ldr	r3, [r3, #8]
 800f42a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	430a      	orrs	r2, r1
 800f438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f43e:	f003 0320 	and.w	r3, r3, #32
 800f442:	2b00      	cmp	r3, #0
 800f444:	d00a      	beq.n	800f45c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	430a      	orrs	r2, r1
 800f45a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f464:	2b00      	cmp	r3, #0
 800f466:	d01a      	beq.n	800f49e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	430a      	orrs	r2, r1
 800f47c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f486:	d10a      	bne.n	800f49e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	430a      	orrs	r2, r1
 800f49c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00a      	beq.n	800f4c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	430a      	orrs	r2, r1
 800f4be:	605a      	str	r2, [r3, #4]
  }
}
 800f4c0:	bf00      	nop
 800f4c2:	370c      	adds	r7, #12
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b098      	sub	sp, #96	; 0x60
 800f4d0:	af02      	add	r7, sp, #8
 800f4d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f4dc:	f7f6 fd94 	bl	8006008 <HAL_GetTick>
 800f4e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f003 0308 	and.w	r3, r3, #8
 800f4ec:	2b08      	cmp	r3, #8
 800f4ee:	d12f      	bne.n	800f550 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f4f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 f88e 	bl	800f620 <UART_WaitOnFlagUntilTimeout>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d022      	beq.n	800f550 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f512:	e853 3f00 	ldrex	r3, [r3]
 800f516:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f51a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f51e:	653b      	str	r3, [r7, #80]	; 0x50
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	461a      	mov	r2, r3
 800f526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f528:	647b      	str	r3, [r7, #68]	; 0x44
 800f52a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f52c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f52e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f530:	e841 2300 	strex	r3, r2, [r1]
 800f534:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d1e6      	bne.n	800f50a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2220      	movs	r2, #32
 800f540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2200      	movs	r2, #0
 800f548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f54c:	2303      	movs	r3, #3
 800f54e:	e063      	b.n	800f618 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f003 0304 	and.w	r3, r3, #4
 800f55a:	2b04      	cmp	r3, #4
 800f55c:	d149      	bne.n	800f5f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f55e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f566:	2200      	movs	r2, #0
 800f568:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 f857 	bl	800f620 <UART_WaitOnFlagUntilTimeout>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d03c      	beq.n	800f5f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f580:	e853 3f00 	ldrex	r3, [r3]
 800f584:	623b      	str	r3, [r7, #32]
   return(result);
 800f586:	6a3b      	ldr	r3, [r7, #32]
 800f588:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f58c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	461a      	mov	r2, r3
 800f594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f596:	633b      	str	r3, [r7, #48]	; 0x30
 800f598:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f59a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f59e:	e841 2300 	strex	r3, r2, [r1]
 800f5a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d1e6      	bne.n	800f578 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	3308      	adds	r3, #8
 800f5b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	e853 3f00 	ldrex	r3, [r3]
 800f5b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f023 0301 	bic.w	r3, r3, #1
 800f5c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3308      	adds	r3, #8
 800f5c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5ca:	61fa      	str	r2, [r7, #28]
 800f5cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ce:	69b9      	ldr	r1, [r7, #24]
 800f5d0:	69fa      	ldr	r2, [r7, #28]
 800f5d2:	e841 2300 	strex	r3, r2, [r1]
 800f5d6:	617b      	str	r3, [r7, #20]
   return(result);
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1e5      	bne.n	800f5aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2220      	movs	r2, #32
 800f5e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5ee:	2303      	movs	r3, #3
 800f5f0:	e012      	b.n	800f618 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2220      	movs	r2, #32
 800f5f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2220      	movs	r2, #32
 800f5fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2200      	movs	r2, #0
 800f606:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2200      	movs	r2, #0
 800f612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f616:	2300      	movs	r3, #0
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3758      	adds	r7, #88	; 0x58
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	603b      	str	r3, [r7, #0]
 800f62c:	4613      	mov	r3, r2
 800f62e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f630:	e04f      	b.n	800f6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f638:	d04b      	beq.n	800f6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f63a:	f7f6 fce5 	bl	8006008 <HAL_GetTick>
 800f63e:	4602      	mov	r2, r0
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	1ad3      	subs	r3, r2, r3
 800f644:	69ba      	ldr	r2, [r7, #24]
 800f646:	429a      	cmp	r2, r3
 800f648:	d302      	bcc.n	800f650 <UART_WaitOnFlagUntilTimeout+0x30>
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d101      	bne.n	800f654 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f650:	2303      	movs	r3, #3
 800f652:	e04e      	b.n	800f6f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f003 0304 	and.w	r3, r3, #4
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d037      	beq.n	800f6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	2b80      	cmp	r3, #128	; 0x80
 800f666:	d034      	beq.n	800f6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	2b40      	cmp	r3, #64	; 0x40
 800f66c:	d031      	beq.n	800f6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	69db      	ldr	r3, [r3, #28]
 800f674:	f003 0308 	and.w	r3, r3, #8
 800f678:	2b08      	cmp	r3, #8
 800f67a:	d110      	bne.n	800f69e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2208      	movs	r2, #8
 800f682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f000 f838 	bl	800f6fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2208      	movs	r2, #8
 800f68e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2200      	movs	r2, #0
 800f696:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f69a:	2301      	movs	r3, #1
 800f69c:	e029      	b.n	800f6f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	69db      	ldr	r3, [r3, #28]
 800f6a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6ac:	d111      	bne.n	800f6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f6b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f000 f81e 	bl	800f6fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2220      	movs	r2, #32
 800f6c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f6ce:	2303      	movs	r3, #3
 800f6d0:	e00f      	b.n	800f6f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	69da      	ldr	r2, [r3, #28]
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	4013      	ands	r3, r2
 800f6dc:	68ba      	ldr	r2, [r7, #8]
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	bf0c      	ite	eq
 800f6e2:	2301      	moveq	r3, #1
 800f6e4:	2300      	movne	r3, #0
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	79fb      	ldrb	r3, [r7, #7]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d0a0      	beq.n	800f632 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f6f0:	2300      	movs	r3, #0
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3710      	adds	r7, #16
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}

0800f6fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f6fa:	b480      	push	{r7}
 800f6fc:	b095      	sub	sp, #84	; 0x54
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f70a:	e853 3f00 	ldrex	r3, [r3]
 800f70e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f712:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f716:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	461a      	mov	r2, r3
 800f71e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f720:	643b      	str	r3, [r7, #64]	; 0x40
 800f722:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f724:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f728:	e841 2300 	strex	r3, r2, [r1]
 800f72c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f730:	2b00      	cmp	r3, #0
 800f732:	d1e6      	bne.n	800f702 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	3308      	adds	r3, #8
 800f73a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f73c:	6a3b      	ldr	r3, [r7, #32]
 800f73e:	e853 3f00 	ldrex	r3, [r3]
 800f742:	61fb      	str	r3, [r7, #28]
   return(result);
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f74a:	f023 0301 	bic.w	r3, r3, #1
 800f74e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	3308      	adds	r3, #8
 800f756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f758:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f75a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f75c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f75e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f760:	e841 2300 	strex	r3, r2, [r1]
 800f764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d1e3      	bne.n	800f734 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f770:	2b01      	cmp	r3, #1
 800f772:	d118      	bne.n	800f7a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	e853 3f00 	ldrex	r3, [r3]
 800f780:	60bb      	str	r3, [r7, #8]
   return(result);
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	f023 0310 	bic.w	r3, r3, #16
 800f788:	647b      	str	r3, [r7, #68]	; 0x44
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	461a      	mov	r2, r3
 800f790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f792:	61bb      	str	r3, [r7, #24]
 800f794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f796:	6979      	ldr	r1, [r7, #20]
 800f798:	69ba      	ldr	r2, [r7, #24]
 800f79a:	e841 2300 	strex	r3, r2, [r1]
 800f79e:	613b      	str	r3, [r7, #16]
   return(result);
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d1e6      	bne.n	800f774 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2220      	movs	r2, #32
 800f7aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f7ba:	bf00      	nop
 800f7bc:	3754      	adds	r7, #84	; 0x54
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr

0800f7c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f7c6:	b480      	push	{r7}
 800f7c8:	b085      	sub	sp, #20
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d101      	bne.n	800f7dc <HAL_UARTEx_DisableFifoMode+0x16>
 800f7d8:	2302      	movs	r3, #2
 800f7da:	e027      	b.n	800f82c <HAL_UARTEx_DisableFifoMode+0x66>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2224      	movs	r2, #36	; 0x24
 800f7e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f022 0201 	bic.w	r2, r2, #1
 800f802:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f80a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2220      	movs	r2, #32
 800f81e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f82a:	2300      	movs	r3, #0
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3714      	adds	r7, #20
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d101      	bne.n	800f850 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f84c:	2302      	movs	r3, #2
 800f84e:	e02d      	b.n	800f8ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2201      	movs	r2, #1
 800f854:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2224      	movs	r2, #36	; 0x24
 800f85c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f022 0201 	bic.w	r2, r2, #1
 800f876:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	689b      	ldr	r3, [r3, #8]
 800f87e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	430a      	orrs	r2, r1
 800f88a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 f84f 	bl	800f930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2220      	movs	r2, #32
 800f89e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f8aa:	2300      	movs	r3, #0
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3710      	adds	r7, #16
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d101      	bne.n	800f8cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f8c8:	2302      	movs	r3, #2
 800f8ca:	e02d      	b.n	800f928 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2224      	movs	r2, #36	; 0x24
 800f8d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f022 0201 	bic.w	r2, r2, #1
 800f8f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	689b      	ldr	r3, [r3, #8]
 800f8fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	683a      	ldr	r2, [r7, #0]
 800f904:	430a      	orrs	r2, r1
 800f906:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 f811 	bl	800f930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	68fa      	ldr	r2, [r7, #12]
 800f914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2220      	movs	r2, #32
 800f91a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f926:	2300      	movs	r3, #0
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3710      	adds	r7, #16
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f930:	b480      	push	{r7}
 800f932:	b085      	sub	sp, #20
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d108      	bne.n	800f952 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2201      	movs	r2, #1
 800f944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2201      	movs	r2, #1
 800f94c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f950:	e031      	b.n	800f9b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f952:	2308      	movs	r3, #8
 800f954:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f956:	2308      	movs	r3, #8
 800f958:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	0e5b      	lsrs	r3, r3, #25
 800f962:	b2db      	uxtb	r3, r3
 800f964:	f003 0307 	and.w	r3, r3, #7
 800f968:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	0f5b      	lsrs	r3, r3, #29
 800f972:	b2db      	uxtb	r3, r3
 800f974:	f003 0307 	and.w	r3, r3, #7
 800f978:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f97a:	7bbb      	ldrb	r3, [r7, #14]
 800f97c:	7b3a      	ldrb	r2, [r7, #12]
 800f97e:	4911      	ldr	r1, [pc, #68]	; (800f9c4 <UARTEx_SetNbDataToProcess+0x94>)
 800f980:	5c8a      	ldrb	r2, [r1, r2]
 800f982:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f986:	7b3a      	ldrb	r2, [r7, #12]
 800f988:	490f      	ldr	r1, [pc, #60]	; (800f9c8 <UARTEx_SetNbDataToProcess+0x98>)
 800f98a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f98c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f990:	b29a      	uxth	r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f998:	7bfb      	ldrb	r3, [r7, #15]
 800f99a:	7b7a      	ldrb	r2, [r7, #13]
 800f99c:	4909      	ldr	r1, [pc, #36]	; (800f9c4 <UARTEx_SetNbDataToProcess+0x94>)
 800f99e:	5c8a      	ldrb	r2, [r1, r2]
 800f9a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f9a4:	7b7a      	ldrb	r2, [r7, #13]
 800f9a6:	4908      	ldr	r1, [pc, #32]	; (800f9c8 <UARTEx_SetNbDataToProcess+0x98>)
 800f9a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f9aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9ae:	b29a      	uxth	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f9b6:	bf00      	nop
 800f9b8:	3714      	adds	r7, #20
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr
 800f9c2:	bf00      	nop
 800f9c4:	0801ae58 	.word	0x0801ae58
 800f9c8:	0801ae60 	.word	0x0801ae60

0800f9cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b085      	sub	sp, #20
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f9dc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f9e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f9ec:	2300      	movs	r3, #0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3714      	adds	r7, #20
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr

0800f9fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f9fa:	b480      	push	{r7}
 800f9fc:	b085      	sub	sp, #20
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fa02:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800fa06:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	43db      	mvns	r3, r3
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	4013      	ands	r3, r2
 800fa1a:	b29a      	uxth	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fa22:	2300      	movs	r3, #0
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3714      	adds	r7, #20
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b085      	sub	sp, #20
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	1d3b      	adds	r3, r7, #4
 800fa3a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2201      	movs	r2, #1
 800fa42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2200      	movs	r2, #0
 800fa52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800fa5e:	2300      	movs	r3, #0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3714      	adds	r7, #20
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b09d      	sub	sp, #116	; 0x74
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800fa76:	2300      	movs	r3, #0
 800fa78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	4413      	add	r3, r2
 800fa86:	881b      	ldrh	r3, [r3, #0]
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800fa8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	78db      	ldrb	r3, [r3, #3]
 800fa9a:	2b03      	cmp	r3, #3
 800fa9c:	d81f      	bhi.n	800fade <USB_ActivateEndpoint+0x72>
 800fa9e:	a201      	add	r2, pc, #4	; (adr r2, 800faa4 <USB_ActivateEndpoint+0x38>)
 800faa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa4:	0800fab5 	.word	0x0800fab5
 800faa8:	0800fad1 	.word	0x0800fad1
 800faac:	0800fae7 	.word	0x0800fae7
 800fab0:	0800fac3 	.word	0x0800fac3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800fab4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fabc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fac0:	e012      	b.n	800fae8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800fac2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fac6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800faca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800face:	e00b      	b.n	800fae8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800fad0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fad8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fadc:	e004      	b.n	800fae8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800fade:	2301      	movs	r3, #1
 800fae0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800fae4:	e000      	b.n	800fae8 <USB_ActivateEndpoint+0x7c>
      break;
 800fae6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800fae8:	687a      	ldr	r2, [r7, #4]
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	441a      	add	r2, r3
 800faf2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800faf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fafa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fafe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	4413      	add	r3, r2
 800fb14:	881b      	ldrh	r3, [r3, #0]
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	b21b      	sxth	r3, r3
 800fb1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb22:	b21a      	sxth	r2, r3
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	b21b      	sxth	r3, r3
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	b21b      	sxth	r3, r3
 800fb2e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	441a      	add	r2, r3
 800fb3c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800fb40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	7b1b      	ldrb	r3, [r3, #12]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	f040 8178 	bne.w	800fe4e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	785b      	ldrb	r3, [r3, #1]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	f000 8084 	beq.w	800fc70 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	61bb      	str	r3, [r7, #24]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	461a      	mov	r2, r3
 800fb76:	69bb      	ldr	r3, [r7, #24]
 800fb78:	4413      	add	r3, r2
 800fb7a:	61bb      	str	r3, [r7, #24]
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	00da      	lsls	r2, r3, #3
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	4413      	add	r3, r2
 800fb86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb8a:	617b      	str	r3, [r7, #20]
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	88db      	ldrh	r3, [r3, #6]
 800fb90:	085b      	lsrs	r3, r3, #1
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	005b      	lsls	r3, r3, #1
 800fb96:	b29a      	uxth	r2, r3
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	4413      	add	r3, r2
 800fba6:	881b      	ldrh	r3, [r3, #0]
 800fba8:	827b      	strh	r3, [r7, #18]
 800fbaa:	8a7b      	ldrh	r3, [r7, #18]
 800fbac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d01b      	beq.n	800fbec <USB_ActivateEndpoint+0x180>
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	009b      	lsls	r3, r3, #2
 800fbbc:	4413      	add	r3, r2
 800fbbe:	881b      	ldrh	r3, [r3, #0]
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbca:	823b      	strh	r3, [r7, #16]
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	009b      	lsls	r3, r3, #2
 800fbd4:	441a      	add	r2, r3
 800fbd6:	8a3b      	ldrh	r3, [r7, #16]
 800fbd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fbdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fbe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbe4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	78db      	ldrb	r3, [r3, #3]
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d020      	beq.n	800fc36 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	4413      	add	r3, r2
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc0a:	81bb      	strh	r3, [r7, #12]
 800fc0c:	89bb      	ldrh	r3, [r7, #12]
 800fc0e:	f083 0320 	eor.w	r3, r3, #32
 800fc12:	81bb      	strh	r3, [r7, #12]
 800fc14:	687a      	ldr	r2, [r7, #4]
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	441a      	add	r2, r3
 800fc1e:	89bb      	ldrh	r3, [r7, #12]
 800fc20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	8013      	strh	r3, [r2, #0]
 800fc34:	e2d5      	b.n	80101e2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	009b      	lsls	r3, r3, #2
 800fc3e:	4413      	add	r3, r2
 800fc40:	881b      	ldrh	r3, [r3, #0]
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc4c:	81fb      	strh	r3, [r7, #14]
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	009b      	lsls	r3, r3, #2
 800fc56:	441a      	add	r2, r3
 800fc58:	89fb      	ldrh	r3, [r7, #14]
 800fc5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	8013      	strh	r3, [r2, #0]
 800fc6e:	e2b8      	b.n	80101e2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	633b      	str	r3, [r7, #48]	; 0x30
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc80:	4413      	add	r3, r2
 800fc82:	633b      	str	r3, [r7, #48]	; 0x30
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	00da      	lsls	r2, r3, #3
 800fc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8c:	4413      	add	r3, r2
 800fc8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fc92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	88db      	ldrh	r3, [r3, #6]
 800fc98:	085b      	lsrs	r3, r3, #1
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	005b      	lsls	r3, r3, #1
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb4:	4413      	add	r3, r2
 800fcb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	00da      	lsls	r2, r3, #3
 800fcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc0:	4413      	add	r3, r2
 800fcc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fcc6:	627b      	str	r3, [r7, #36]	; 0x24
 800fcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcca:	881b      	ldrh	r3, [r3, #0]
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd6:	801a      	strh	r2, [r3, #0]
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	2b3e      	cmp	r3, #62	; 0x3e
 800fcde:	d91d      	bls.n	800fd1c <USB_ActivateEndpoint+0x2b0>
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	691b      	ldr	r3, [r3, #16]
 800fce4:	095b      	lsrs	r3, r3, #5
 800fce6:	66bb      	str	r3, [r7, #104]	; 0x68
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	691b      	ldr	r3, [r3, #16]
 800fcec:	f003 031f 	and.w	r3, r3, #31
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d102      	bne.n	800fcfa <USB_ActivateEndpoint+0x28e>
 800fcf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcf6:	3b01      	subs	r3, #1
 800fcf8:	66bb      	str	r3, [r7, #104]	; 0x68
 800fcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfc:	881b      	ldrh	r3, [r3, #0]
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	029b      	lsls	r3, r3, #10
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd14:	b29a      	uxth	r2, r3
 800fd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd18:	801a      	strh	r2, [r3, #0]
 800fd1a:	e026      	b.n	800fd6a <USB_ActivateEndpoint+0x2fe>
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	691b      	ldr	r3, [r3, #16]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d10a      	bne.n	800fd3a <USB_ActivateEndpoint+0x2ce>
 800fd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd26:	881b      	ldrh	r3, [r3, #0]
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd36:	801a      	strh	r2, [r3, #0]
 800fd38:	e017      	b.n	800fd6a <USB_ActivateEndpoint+0x2fe>
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	691b      	ldr	r3, [r3, #16]
 800fd3e:	085b      	lsrs	r3, r3, #1
 800fd40:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	691b      	ldr	r3, [r3, #16]
 800fd46:	f003 0301 	and.w	r3, r3, #1
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d002      	beq.n	800fd54 <USB_ActivateEndpoint+0x2e8>
 800fd4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd50:	3301      	adds	r3, #1
 800fd52:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd56:	881b      	ldrh	r3, [r3, #0]
 800fd58:	b29a      	uxth	r2, r3
 800fd5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	029b      	lsls	r3, r3, #10
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	4313      	orrs	r3, r2
 800fd64:	b29a      	uxth	r2, r3
 800fd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fd6a:	687a      	ldr	r2, [r7, #4]
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	4413      	add	r3, r2
 800fd74:	881b      	ldrh	r3, [r3, #0]
 800fd76:	847b      	strh	r3, [r7, #34]	; 0x22
 800fd78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d01b      	beq.n	800fdba <USB_ActivateEndpoint+0x34e>
 800fd82:	687a      	ldr	r2, [r7, #4]
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4413      	add	r3, r2
 800fd8c:	881b      	ldrh	r3, [r3, #0]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd98:	843b      	strh	r3, [r7, #32]
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	441a      	add	r2, r3
 800fda4:	8c3b      	ldrh	r3, [r7, #32]
 800fda6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fdaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fdae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fdb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d124      	bne.n	800fe0c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	4413      	add	r3, r2
 800fdcc:	881b      	ldrh	r3, [r3, #0]
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fdd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdd8:	83bb      	strh	r3, [r7, #28]
 800fdda:	8bbb      	ldrh	r3, [r7, #28]
 800fddc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fde0:	83bb      	strh	r3, [r7, #28]
 800fde2:	8bbb      	ldrh	r3, [r7, #28]
 800fde4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fde8:	83bb      	strh	r3, [r7, #28]
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	441a      	add	r2, r3
 800fdf4:	8bbb      	ldrh	r3, [r7, #28]
 800fdf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fdfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fdfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	8013      	strh	r3, [r2, #0]
 800fe0a:	e1ea      	b.n	80101e2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800fe0c:	687a      	ldr	r2, [r7, #4]
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	4413      	add	r3, r2
 800fe16:	881b      	ldrh	r3, [r3, #0]
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fe1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe22:	83fb      	strh	r3, [r7, #30]
 800fe24:	8bfb      	ldrh	r3, [r7, #30]
 800fe26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fe2a:	83fb      	strh	r3, [r7, #30]
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	441a      	add	r2, r3
 800fe36:	8bfb      	ldrh	r3, [r7, #30]
 800fe38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	8013      	strh	r3, [r2, #0]
 800fe4c:	e1c9      	b.n	80101e2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	78db      	ldrb	r3, [r3, #3]
 800fe52:	2b02      	cmp	r3, #2
 800fe54:	d11e      	bne.n	800fe94 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	4413      	add	r3, r2
 800fe60:	881b      	ldrh	r3, [r3, #0]
 800fe62:	b29b      	uxth	r3, r3
 800fe64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe6c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	441a      	add	r2, r3
 800fe7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fe7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe86:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fe8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	8013      	strh	r3, [r2, #0]
 800fe92:	e01d      	b.n	800fed0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	4413      	add	r3, r2
 800fe9e:	881b      	ldrh	r3, [r3, #0]
 800fea0:	b29b      	uxth	r3, r3
 800fea2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800fea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800feaa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	441a      	add	r2, r3
 800feb8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800febc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fecc:	b29b      	uxth	r3, r3
 800fece:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800feda:	b29b      	uxth	r3, r3
 800fedc:	461a      	mov	r2, r3
 800fede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fee0:	4413      	add	r3, r2
 800fee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	00da      	lsls	r2, r3, #3
 800feea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800feec:	4413      	add	r3, r2
 800feee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fef2:	65bb      	str	r3, [r7, #88]	; 0x58
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	891b      	ldrh	r3, [r3, #8]
 800fef8:	085b      	lsrs	r3, r3, #1
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	005b      	lsls	r3, r3, #1
 800fefe:	b29a      	uxth	r2, r3
 800ff00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff02:	801a      	strh	r2, [r3, #0]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	657b      	str	r3, [r7, #84]	; 0x54
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	461a      	mov	r2, r3
 800ff12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff14:	4413      	add	r3, r2
 800ff16:	657b      	str	r3, [r7, #84]	; 0x54
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	00da      	lsls	r2, r3, #3
 800ff1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff20:	4413      	add	r3, r2
 800ff22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ff26:	653b      	str	r3, [r7, #80]	; 0x50
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	895b      	ldrh	r3, [r3, #10]
 800ff2c:	085b      	lsrs	r3, r3, #1
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	005b      	lsls	r3, r3, #1
 800ff32:	b29a      	uxth	r2, r3
 800ff34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff36:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	785b      	ldrb	r3, [r3, #1]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	f040 8093 	bne.w	8010068 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	4413      	add	r3, r2
 800ff4c:	881b      	ldrh	r3, [r3, #0]
 800ff4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ff52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ff56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d01b      	beq.n	800ff96 <USB_ActivateEndpoint+0x52a>
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4413      	add	r3, r2
 800ff68:	881b      	ldrh	r3, [r3, #0]
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff74:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	441a      	add	r2, r3
 800ff80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ff82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ff8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	009b      	lsls	r3, r3, #2
 800ff9e:	4413      	add	r3, r2
 800ffa0:	881b      	ldrh	r3, [r3, #0]
 800ffa2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ffa4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ffa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d01b      	beq.n	800ffe6 <USB_ActivateEndpoint+0x57a>
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	4413      	add	r3, r2
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffc4:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ffc6:	687a      	ldr	r2, [r7, #4]
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	441a      	add	r2, r3
 800ffd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ffd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ffe6:	687a      	ldr	r2, [r7, #4]
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	4413      	add	r3, r2
 800fff0:	881b      	ldrh	r3, [r3, #0]
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fffc:	873b      	strh	r3, [r7, #56]	; 0x38
 800fffe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010000:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010004:	873b      	strh	r3, [r7, #56]	; 0x38
 8010006:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010008:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801000c:	873b      	strh	r3, [r7, #56]	; 0x38
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	441a      	add	r2, r3
 8010018:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801001a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801001e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801002a:	b29b      	uxth	r3, r3
 801002c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	009b      	lsls	r3, r3, #2
 8010036:	4413      	add	r3, r2
 8010038:	881b      	ldrh	r3, [r3, #0]
 801003a:	b29b      	uxth	r3, r3
 801003c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010044:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	009b      	lsls	r3, r3, #2
 801004e:	441a      	add	r2, r3
 8010050:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801005a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801005e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010062:	b29b      	uxth	r3, r3
 8010064:	8013      	strh	r3, [r2, #0]
 8010066:	e0bc      	b.n	80101e2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	4413      	add	r3, r2
 8010072:	881b      	ldrh	r3, [r3, #0]
 8010074:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010078:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801007c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010080:	2b00      	cmp	r3, #0
 8010082:	d01d      	beq.n	80100c0 <USB_ActivateEndpoint+0x654>
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	4413      	add	r3, r2
 801008e:	881b      	ldrh	r3, [r3, #0]
 8010090:	b29b      	uxth	r3, r3
 8010092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801009a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	009b      	lsls	r3, r3, #2
 80100a6:	441a      	add	r2, r3
 80100a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80100ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80100b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100bc:	b29b      	uxth	r3, r3
 80100be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	4413      	add	r3, r2
 80100ca:	881b      	ldrh	r3, [r3, #0]
 80100cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80100d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80100d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d01d      	beq.n	8010118 <USB_ActivateEndpoint+0x6ac>
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	4413      	add	r3, r2
 80100e6:	881b      	ldrh	r3, [r3, #0]
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80100f6:	687a      	ldr	r2, [r7, #4]
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	441a      	add	r2, r3
 8010100:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801010c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010110:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010114:	b29b      	uxth	r3, r3
 8010116:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	78db      	ldrb	r3, [r3, #3]
 801011c:	2b01      	cmp	r3, #1
 801011e:	d024      	beq.n	801016a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	781b      	ldrb	r3, [r3, #0]
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	4413      	add	r3, r2
 801012a:	881b      	ldrh	r3, [r3, #0]
 801012c:	b29b      	uxth	r3, r3
 801012e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010136:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801013a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801013e:	f083 0320 	eor.w	r3, r3, #32
 8010142:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	441a      	add	r2, r3
 8010150:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801015c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010164:	b29b      	uxth	r3, r3
 8010166:	8013      	strh	r3, [r2, #0]
 8010168:	e01d      	b.n	80101a6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	4413      	add	r3, r2
 8010174:	881b      	ldrh	r3, [r3, #0]
 8010176:	b29b      	uxth	r3, r3
 8010178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801017c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010180:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	441a      	add	r2, r3
 801018e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801019a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801019e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	009b      	lsls	r3, r3, #2
 80101ae:	4413      	add	r3, r2
 80101b0:	881b      	ldrh	r3, [r3, #0]
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80101b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	441a      	add	r2, r3
 80101ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80101ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101de:	b29b      	uxth	r3, r3
 80101e0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80101e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3774      	adds	r7, #116	; 0x74
 80101ea:	46bd      	mov	sp, r7
 80101ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f0:	4770      	bx	lr
 80101f2:	bf00      	nop

080101f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b08d      	sub	sp, #52	; 0x34
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	7b1b      	ldrb	r3, [r3, #12]
 8010202:	2b00      	cmp	r3, #0
 8010204:	f040 808e 	bne.w	8010324 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	785b      	ldrb	r3, [r3, #1]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d044      	beq.n	801029a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	009b      	lsls	r3, r3, #2
 8010218:	4413      	add	r3, r2
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	81bb      	strh	r3, [r7, #12]
 801021e:	89bb      	ldrh	r3, [r7, #12]
 8010220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010224:	2b00      	cmp	r3, #0
 8010226:	d01b      	beq.n	8010260 <USB_DeactivateEndpoint+0x6c>
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	4413      	add	r3, r2
 8010232:	881b      	ldrh	r3, [r3, #0]
 8010234:	b29b      	uxth	r3, r3
 8010236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801023a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801023e:	817b      	strh	r3, [r7, #10]
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	441a      	add	r2, r3
 801024a:	897b      	ldrh	r3, [r7, #10]
 801024c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010258:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801025c:	b29b      	uxth	r3, r3
 801025e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	009b      	lsls	r3, r3, #2
 8010268:	4413      	add	r3, r2
 801026a:	881b      	ldrh	r3, [r3, #0]
 801026c:	b29b      	uxth	r3, r3
 801026e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010276:	813b      	strh	r3, [r7, #8]
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	441a      	add	r2, r3
 8010282:	893b      	ldrh	r3, [r7, #8]
 8010284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801028c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010294:	b29b      	uxth	r3, r3
 8010296:	8013      	strh	r3, [r2, #0]
 8010298:	e192      	b.n	80105c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	4413      	add	r3, r2
 80102a4:	881b      	ldrh	r3, [r3, #0]
 80102a6:	827b      	strh	r3, [r7, #18]
 80102a8:	8a7b      	ldrh	r3, [r7, #18]
 80102aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d01b      	beq.n	80102ea <USB_DeactivateEndpoint+0xf6>
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	4413      	add	r3, r2
 80102bc:	881b      	ldrh	r3, [r3, #0]
 80102be:	b29b      	uxth	r3, r3
 80102c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102c8:	823b      	strh	r3, [r7, #16]
 80102ca:	687a      	ldr	r2, [r7, #4]
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	441a      	add	r2, r3
 80102d4:	8a3b      	ldrh	r3, [r7, #16]
 80102d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80102e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80102ea:	687a      	ldr	r2, [r7, #4]
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	4413      	add	r3, r2
 80102f4:	881b      	ldrh	r3, [r3, #0]
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80102fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010300:	81fb      	strh	r3, [r7, #14]
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	441a      	add	r2, r3
 801030c:	89fb      	ldrh	r3, [r7, #14]
 801030e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801031a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801031e:	b29b      	uxth	r3, r3
 8010320:	8013      	strh	r3, [r2, #0]
 8010322:	e14d      	b.n	80105c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	785b      	ldrb	r3, [r3, #1]
 8010328:	2b00      	cmp	r3, #0
 801032a:	f040 80a5 	bne.w	8010478 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	4413      	add	r3, r2
 8010338:	881b      	ldrh	r3, [r3, #0]
 801033a:	843b      	strh	r3, [r7, #32]
 801033c:	8c3b      	ldrh	r3, [r7, #32]
 801033e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010342:	2b00      	cmp	r3, #0
 8010344:	d01b      	beq.n	801037e <USB_DeactivateEndpoint+0x18a>
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	009b      	lsls	r3, r3, #2
 801034e:	4413      	add	r3, r2
 8010350:	881b      	ldrh	r3, [r3, #0]
 8010352:	b29b      	uxth	r3, r3
 8010354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801035c:	83fb      	strh	r3, [r7, #30]
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	441a      	add	r2, r3
 8010368:	8bfb      	ldrh	r3, [r7, #30]
 801036a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801036e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801037a:	b29b      	uxth	r3, r3
 801037c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	009b      	lsls	r3, r3, #2
 8010386:	4413      	add	r3, r2
 8010388:	881b      	ldrh	r3, [r3, #0]
 801038a:	83bb      	strh	r3, [r7, #28]
 801038c:	8bbb      	ldrh	r3, [r7, #28]
 801038e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010392:	2b00      	cmp	r3, #0
 8010394:	d01b      	beq.n	80103ce <USB_DeactivateEndpoint+0x1da>
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	009b      	lsls	r3, r3, #2
 801039e:	4413      	add	r3, r2
 80103a0:	881b      	ldrh	r3, [r3, #0]
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ac:	837b      	strh	r3, [r7, #26]
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	009b      	lsls	r3, r3, #2
 80103b6:	441a      	add	r2, r3
 80103b8:	8b7b      	ldrh	r3, [r7, #26]
 80103ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	4413      	add	r3, r2
 80103d8:	881b      	ldrh	r3, [r3, #0]
 80103da:	b29b      	uxth	r3, r3
 80103dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103e4:	833b      	strh	r3, [r7, #24]
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	009b      	lsls	r3, r3, #2
 80103ee:	441a      	add	r2, r3
 80103f0:	8b3b      	ldrh	r3, [r7, #24]
 80103f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010402:	b29b      	uxth	r3, r3
 8010404:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	4413      	add	r3, r2
 8010410:	881b      	ldrh	r3, [r3, #0]
 8010412:	b29b      	uxth	r3, r3
 8010414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801041c:	82fb      	strh	r3, [r7, #22]
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	009b      	lsls	r3, r3, #2
 8010426:	441a      	add	r2, r3
 8010428:	8afb      	ldrh	r3, [r7, #22]
 801042a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801042e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801043a:	b29b      	uxth	r3, r3
 801043c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801043e:	687a      	ldr	r2, [r7, #4]
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	4413      	add	r3, r2
 8010448:	881b      	ldrh	r3, [r3, #0]
 801044a:	b29b      	uxth	r3, r3
 801044c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010454:	82bb      	strh	r3, [r7, #20]
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	009b      	lsls	r3, r3, #2
 801045e:	441a      	add	r2, r3
 8010460:	8abb      	ldrh	r3, [r7, #20]
 8010462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801046a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801046e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010472:	b29b      	uxth	r3, r3
 8010474:	8013      	strh	r3, [r2, #0]
 8010476:	e0a3      	b.n	80105c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	009b      	lsls	r3, r3, #2
 8010480:	4413      	add	r3, r2
 8010482:	881b      	ldrh	r3, [r3, #0]
 8010484:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010486:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801048c:	2b00      	cmp	r3, #0
 801048e:	d01b      	beq.n	80104c8 <USB_DeactivateEndpoint+0x2d4>
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	4413      	add	r3, r2
 801049a:	881b      	ldrh	r3, [r3, #0]
 801049c:	b29b      	uxth	r3, r3
 801049e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	441a      	add	r2, r3
 80104b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80104b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80104c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80104c8:	687a      	ldr	r2, [r7, #4]
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	009b      	lsls	r3, r3, #2
 80104d0:	4413      	add	r3, r2
 80104d2:	881b      	ldrh	r3, [r3, #0]
 80104d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80104d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80104d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d01b      	beq.n	8010518 <USB_DeactivateEndpoint+0x324>
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	009b      	lsls	r3, r3, #2
 80104e8:	4413      	add	r3, r2
 80104ea:	881b      	ldrh	r3, [r3, #0]
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104f6:	853b      	strh	r3, [r7, #40]	; 0x28
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	009b      	lsls	r3, r3, #2
 8010500:	441a      	add	r2, r3
 8010502:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801050c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010514:	b29b      	uxth	r3, r3
 8010516:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010518:	687a      	ldr	r2, [r7, #4]
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	4413      	add	r3, r2
 8010522:	881b      	ldrh	r3, [r3, #0]
 8010524:	b29b      	uxth	r3, r3
 8010526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801052a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801052e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010530:	687a      	ldr	r2, [r7, #4]
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	009b      	lsls	r3, r3, #2
 8010538:	441a      	add	r2, r3
 801053a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801053c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801054c:	b29b      	uxth	r3, r3
 801054e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010550:	687a      	ldr	r2, [r7, #4]
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	4413      	add	r3, r2
 801055a:	881b      	ldrh	r3, [r3, #0]
 801055c:	b29b      	uxth	r3, r3
 801055e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010566:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	441a      	add	r2, r3
 8010572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801057c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010584:	b29b      	uxth	r3, r3
 8010586:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	781b      	ldrb	r3, [r3, #0]
 801058e:	009b      	lsls	r3, r3, #2
 8010590:	4413      	add	r3, r2
 8010592:	881b      	ldrh	r3, [r3, #0]
 8010594:	b29b      	uxth	r3, r3
 8010596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801059a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801059e:	847b      	strh	r3, [r7, #34]	; 0x22
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	009b      	lsls	r3, r3, #2
 80105a8:	441a      	add	r2, r3
 80105aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105bc:	b29b      	uxth	r3, r3
 80105be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80105c0:	2300      	movs	r3, #0
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3734      	adds	r7, #52	; 0x34
 80105c6:	46bd      	mov	sp, r7
 80105c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105cc:	4770      	bx	lr

080105ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b0c2      	sub	sp, #264	; 0x108
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105dc:	6018      	str	r0, [r3, #0]
 80105de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105e6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80105e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	785b      	ldrb	r3, [r3, #1]
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	f040 86b7 	bne.w	8011368 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80105fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	699a      	ldr	r2, [r3, #24]
 8010606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801060a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	691b      	ldr	r3, [r3, #16]
 8010612:	429a      	cmp	r2, r3
 8010614:	d908      	bls.n	8010628 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801061a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	691b      	ldr	r3, [r3, #16]
 8010622:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010626:	e007      	b.n	8010638 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801062c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801063c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	7b1b      	ldrb	r3, [r3, #12]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d13a      	bne.n	80106be <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801064c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	6959      	ldr	r1, [r3, #20]
 8010654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	88da      	ldrh	r2, [r3, #6]
 8010660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010664:	b29b      	uxth	r3, r3
 8010666:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801066a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801066e:	6800      	ldr	r0, [r0, #0]
 8010670:	f001 fc98 	bl	8011fa4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	613b      	str	r3, [r7, #16]
 8010680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801068e:	b29b      	uxth	r3, r3
 8010690:	461a      	mov	r2, r3
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	4413      	add	r3, r2
 8010696:	613b      	str	r3, [r7, #16]
 8010698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801069c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	00da      	lsls	r2, r3, #3
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	4413      	add	r3, r2
 80106aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80106ae:	60fb      	str	r3, [r7, #12]
 80106b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	801a      	strh	r2, [r3, #0]
 80106ba:	f000 be1f 	b.w	80112fc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80106be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	78db      	ldrb	r3, [r3, #3]
 80106ca:	2b02      	cmp	r3, #2
 80106cc:	f040 8462 	bne.w	8010f94 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80106d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	6a1a      	ldr	r2, [r3, #32]
 80106dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	691b      	ldr	r3, [r3, #16]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	f240 83df 	bls.w	8010eac <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80106ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106f6:	681a      	ldr	r2, [r3, #0]
 80106f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	009b      	lsls	r3, r3, #2
 8010706:	4413      	add	r3, r2
 8010708:	881b      	ldrh	r3, [r3, #0]
 801070a:	b29b      	uxth	r3, r3
 801070c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010714:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8010718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801071c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	009b      	lsls	r3, r3, #2
 8010730:	441a      	add	r2, r3
 8010732:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801073a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801073e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010746:	b29b      	uxth	r3, r3
 8010748:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801074a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801074e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	6a1a      	ldr	r2, [r3, #32]
 8010756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801075a:	1ad2      	subs	r2, r2, r3
 801075c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801076c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	4413      	add	r3, r2
 8010782:	881b      	ldrh	r3, [r3, #0]
 8010784:	b29b      	uxth	r3, r3
 8010786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801078a:	2b00      	cmp	r3, #0
 801078c:	f000 81c7 	beq.w	8010b1e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	633b      	str	r3, [r7, #48]	; 0x30
 801079c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	785b      	ldrb	r3, [r3, #1]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d177      	bne.n	801089c <USB_EPStartXfer+0x2ce>
 80107ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80107b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	461a      	mov	r2, r3
 80107ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107cc:	4413      	add	r3, r2
 80107ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80107d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	00da      	lsls	r2, r3, #3
 80107de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e0:	4413      	add	r3, r2
 80107e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80107e6:	627b      	str	r3, [r7, #36]	; 0x24
 80107e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ea:	881b      	ldrh	r3, [r3, #0]
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f6:	801a      	strh	r2, [r3, #0]
 80107f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107fc:	2b3e      	cmp	r3, #62	; 0x3e
 80107fe:	d921      	bls.n	8010844 <USB_EPStartXfer+0x276>
 8010800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010804:	095b      	lsrs	r3, r3, #5
 8010806:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801080a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801080e:	f003 031f 	and.w	r3, r3, #31
 8010812:	2b00      	cmp	r3, #0
 8010814:	d104      	bne.n	8010820 <USB_EPStartXfer+0x252>
 8010816:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801081a:	3b01      	subs	r3, #1
 801081c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010822:	881b      	ldrh	r3, [r3, #0]
 8010824:	b29a      	uxth	r2, r3
 8010826:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801082a:	b29b      	uxth	r3, r3
 801082c:	029b      	lsls	r3, r3, #10
 801082e:	b29b      	uxth	r3, r3
 8010830:	4313      	orrs	r3, r2
 8010832:	b29b      	uxth	r3, r3
 8010834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801083c:	b29a      	uxth	r2, r3
 801083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010840:	801a      	strh	r2, [r3, #0]
 8010842:	e050      	b.n	80108e6 <USB_EPStartXfer+0x318>
 8010844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010848:	2b00      	cmp	r3, #0
 801084a:	d10a      	bne.n	8010862 <USB_EPStartXfer+0x294>
 801084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084e:	881b      	ldrh	r3, [r3, #0]
 8010850:	b29b      	uxth	r3, r3
 8010852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801085a:	b29a      	uxth	r2, r3
 801085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085e:	801a      	strh	r2, [r3, #0]
 8010860:	e041      	b.n	80108e6 <USB_EPStartXfer+0x318>
 8010862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010866:	085b      	lsrs	r3, r3, #1
 8010868:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801086c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010870:	f003 0301 	and.w	r3, r3, #1
 8010874:	2b00      	cmp	r3, #0
 8010876:	d004      	beq.n	8010882 <USB_EPStartXfer+0x2b4>
 8010878:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801087c:	3301      	adds	r3, #1
 801087e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010884:	881b      	ldrh	r3, [r3, #0]
 8010886:	b29a      	uxth	r2, r3
 8010888:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801088c:	b29b      	uxth	r3, r3
 801088e:	029b      	lsls	r3, r3, #10
 8010890:	b29b      	uxth	r3, r3
 8010892:	4313      	orrs	r3, r2
 8010894:	b29a      	uxth	r2, r3
 8010896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010898:	801a      	strh	r2, [r3, #0]
 801089a:	e024      	b.n	80108e6 <USB_EPStartXfer+0x318>
 801089c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	785b      	ldrb	r3, [r3, #1]
 80108a8:	2b01      	cmp	r3, #1
 80108aa:	d11c      	bne.n	80108e6 <USB_EPStartXfer+0x318>
 80108ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	461a      	mov	r2, r3
 80108be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c0:	4413      	add	r3, r2
 80108c2:	633b      	str	r3, [r7, #48]	; 0x30
 80108c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	00da      	lsls	r2, r3, #3
 80108d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d4:	4413      	add	r3, r2
 80108d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80108da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108e0:	b29a      	uxth	r2, r3
 80108e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80108e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	895b      	ldrh	r3, [r3, #10]
 80108f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80108f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	6959      	ldr	r1, [r3, #20]
 8010902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010906:	b29b      	uxth	r3, r3
 8010908:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801090c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010910:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010914:	6800      	ldr	r0, [r0, #0]
 8010916:	f001 fb45 	bl	8011fa4 <USB_WritePMA>
            ep->xfer_buff += len;
 801091a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801091e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	695a      	ldr	r2, [r3, #20]
 8010926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801092a:	441a      	add	r2, r3
 801092c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801093c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	6a1a      	ldr	r2, [r3, #32]
 8010944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	691b      	ldr	r3, [r3, #16]
 8010950:	429a      	cmp	r2, r3
 8010952:	d90f      	bls.n	8010974 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8010954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	6a1a      	ldr	r2, [r3, #32]
 8010960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010964:	1ad2      	subs	r2, r2, r3
 8010966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801096a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	621a      	str	r2, [r3, #32]
 8010972:	e00e      	b.n	8010992 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8010974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	6a1b      	ldr	r3, [r3, #32]
 8010980:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2200      	movs	r2, #0
 8010990:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	785b      	ldrb	r3, [r3, #1]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d177      	bne.n	8010a92 <USB_EPStartXfer+0x4c4>
 80109a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	61bb      	str	r3, [r7, #24]
 80109ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109bc:	b29b      	uxth	r3, r3
 80109be:	461a      	mov	r2, r3
 80109c0:	69bb      	ldr	r3, [r7, #24]
 80109c2:	4413      	add	r3, r2
 80109c4:	61bb      	str	r3, [r7, #24]
 80109c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	00da      	lsls	r2, r3, #3
 80109d4:	69bb      	ldr	r3, [r7, #24]
 80109d6:	4413      	add	r3, r2
 80109d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80109dc:	617b      	str	r3, [r7, #20]
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	881b      	ldrh	r3, [r3, #0]
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	697b      	ldr	r3, [r7, #20]
 80109ec:	801a      	strh	r2, [r3, #0]
 80109ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109f2:	2b3e      	cmp	r3, #62	; 0x3e
 80109f4:	d921      	bls.n	8010a3a <USB_EPStartXfer+0x46c>
 80109f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109fa:	095b      	lsrs	r3, r3, #5
 80109fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a04:	f003 031f 	and.w	r3, r3, #31
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d104      	bne.n	8010a16 <USB_EPStartXfer+0x448>
 8010a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a10:	3b01      	subs	r3, #1
 8010a12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	881b      	ldrh	r3, [r3, #0]
 8010a1a:	b29a      	uxth	r2, r3
 8010a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	029b      	lsls	r3, r3, #10
 8010a24:	b29b      	uxth	r3, r3
 8010a26:	4313      	orrs	r3, r2
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	801a      	strh	r2, [r3, #0]
 8010a38:	e056      	b.n	8010ae8 <USB_EPStartXfer+0x51a>
 8010a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d10a      	bne.n	8010a58 <USB_EPStartXfer+0x48a>
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	881b      	ldrh	r3, [r3, #0]
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a50:	b29a      	uxth	r2, r3
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	801a      	strh	r2, [r3, #0]
 8010a56:	e047      	b.n	8010ae8 <USB_EPStartXfer+0x51a>
 8010a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a5c:	085b      	lsrs	r3, r3, #1
 8010a5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a66:	f003 0301 	and.w	r3, r3, #1
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d004      	beq.n	8010a78 <USB_EPStartXfer+0x4aa>
 8010a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a72:	3301      	adds	r3, #1
 8010a74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	881b      	ldrh	r3, [r3, #0]
 8010a7c:	b29a      	uxth	r2, r3
 8010a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	029b      	lsls	r3, r3, #10
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	4313      	orrs	r3, r2
 8010a8a:	b29a      	uxth	r2, r3
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	801a      	strh	r2, [r3, #0]
 8010a90:	e02a      	b.n	8010ae8 <USB_EPStartXfer+0x51a>
 8010a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	785b      	ldrb	r3, [r3, #1]
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d122      	bne.n	8010ae8 <USB_EPStartXfer+0x51a>
 8010aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	623b      	str	r3, [r7, #32]
 8010aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	461a      	mov	r2, r3
 8010ac0:	6a3b      	ldr	r3, [r7, #32]
 8010ac2:	4413      	add	r3, r2
 8010ac4:	623b      	str	r3, [r7, #32]
 8010ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	00da      	lsls	r2, r3, #3
 8010ad4:	6a3b      	ldr	r3, [r7, #32]
 8010ad6:	4413      	add	r3, r2
 8010ad8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010adc:	61fb      	str	r3, [r7, #28]
 8010ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	69fb      	ldr	r3, [r7, #28]
 8010ae6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	891b      	ldrh	r3, [r3, #8]
 8010af4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	6959      	ldr	r1, [r3, #20]
 8010b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010b0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010b12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010b16:	6800      	ldr	r0, [r0, #0]
 8010b18:	f001 fa44 	bl	8011fa4 <USB_WritePMA>
 8010b1c:	e3ee      	b.n	80112fc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	785b      	ldrb	r3, [r3, #1]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d177      	bne.n	8010c1e <USB_EPStartXfer+0x650>
 8010b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b48:	b29b      	uxth	r3, r3
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b4e:	4413      	add	r3, r2
 8010b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	00da      	lsls	r2, r3, #3
 8010b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b62:	4413      	add	r3, r2
 8010b64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010b68:	647b      	str	r3, [r7, #68]	; 0x44
 8010b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b6c:	881b      	ldrh	r3, [r3, #0]
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b74:	b29a      	uxth	r2, r3
 8010b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b78:	801a      	strh	r2, [r3, #0]
 8010b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8010b80:	d921      	bls.n	8010bc6 <USB_EPStartXfer+0x5f8>
 8010b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b86:	095b      	lsrs	r3, r3, #5
 8010b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b90:	f003 031f 	and.w	r3, r3, #31
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d104      	bne.n	8010ba2 <USB_EPStartXfer+0x5d4>
 8010b98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010b9c:	3b01      	subs	r3, #1
 8010b9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ba4:	881b      	ldrh	r3, [r3, #0]
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	029b      	lsls	r3, r3, #10
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bbe:	b29a      	uxth	r2, r3
 8010bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bc2:	801a      	strh	r2, [r3, #0]
 8010bc4:	e056      	b.n	8010c74 <USB_EPStartXfer+0x6a6>
 8010bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d10a      	bne.n	8010be4 <USB_EPStartXfer+0x616>
 8010bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bd0:	881b      	ldrh	r3, [r3, #0]
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010be0:	801a      	strh	r2, [r3, #0]
 8010be2:	e047      	b.n	8010c74 <USB_EPStartXfer+0x6a6>
 8010be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010be8:	085b      	lsrs	r3, r3, #1
 8010bea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bf2:	f003 0301 	and.w	r3, r3, #1
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d004      	beq.n	8010c04 <USB_EPStartXfer+0x636>
 8010bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010bfe:	3301      	adds	r3, #1
 8010c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c06:	881b      	ldrh	r3, [r3, #0]
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	029b      	lsls	r3, r3, #10
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	4313      	orrs	r3, r2
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c1a:	801a      	strh	r2, [r3, #0]
 8010c1c:	e02a      	b.n	8010c74 <USB_EPStartXfer+0x6a6>
 8010c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	785b      	ldrb	r3, [r3, #1]
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d122      	bne.n	8010c74 <USB_EPStartXfer+0x6a6>
 8010c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	653b      	str	r3, [r7, #80]	; 0x50
 8010c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c4e:	4413      	add	r3, r2
 8010c50:	653b      	str	r3, [r7, #80]	; 0x50
 8010c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	00da      	lsls	r2, r3, #3
 8010c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c62:	4413      	add	r3, r2
 8010c64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010c68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c6e:	b29a      	uxth	r2, r3
 8010c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	891b      	ldrh	r3, [r3, #8]
 8010c80:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	6959      	ldr	r1, [r3, #20]
 8010c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c94:	b29b      	uxth	r3, r3
 8010c96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010c9a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010c9e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010ca2:	6800      	ldr	r0, [r0, #0]
 8010ca4:	f001 f97e 	bl	8011fa4 <USB_WritePMA>
            ep->xfer_buff += len;
 8010ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	695a      	ldr	r2, [r3, #20]
 8010cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cb8:	441a      	add	r2, r3
 8010cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	6a1a      	ldr	r2, [r3, #32]
 8010cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	691b      	ldr	r3, [r3, #16]
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	d90f      	bls.n	8010d02 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8010ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	6a1a      	ldr	r2, [r3, #32]
 8010cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cf2:	1ad2      	subs	r2, r2, r3
 8010cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	621a      	str	r2, [r3, #32]
 8010d00:	e00e      	b.n	8010d20 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8010d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	6a1b      	ldr	r3, [r3, #32]
 8010d0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8010d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	785b      	ldrb	r3, [r3, #1]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d177      	bne.n	8010e2c <USB_EPStartXfer+0x85e>
 8010d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	461a      	mov	r2, r3
 8010d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d5c:	4413      	add	r3, r2
 8010d5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	00da      	lsls	r2, r3, #3
 8010d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d70:	4413      	add	r3, r2
 8010d72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010d76:	637b      	str	r3, [r7, #52]	; 0x34
 8010d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d7a:	881b      	ldrh	r3, [r3, #0]
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010d82:	b29a      	uxth	r2, r3
 8010d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d86:	801a      	strh	r2, [r3, #0]
 8010d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8010d8e:	d921      	bls.n	8010dd4 <USB_EPStartXfer+0x806>
 8010d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d94:	095b      	lsrs	r3, r3, #5
 8010d96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d9e:	f003 031f 	and.w	r3, r3, #31
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d104      	bne.n	8010db0 <USB_EPStartXfer+0x7e2>
 8010da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010daa:	3b01      	subs	r3, #1
 8010dac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010db2:	881b      	ldrh	r3, [r3, #0]
 8010db4:	b29a      	uxth	r2, r3
 8010db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	029b      	lsls	r3, r3, #10
 8010dbe:	b29b      	uxth	r3, r3
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd0:	801a      	strh	r2, [r3, #0]
 8010dd2:	e050      	b.n	8010e76 <USB_EPStartXfer+0x8a8>
 8010dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d10a      	bne.n	8010df2 <USB_EPStartXfer+0x824>
 8010ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dde:	881b      	ldrh	r3, [r3, #0]
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010dea:	b29a      	uxth	r2, r3
 8010dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dee:	801a      	strh	r2, [r3, #0]
 8010df0:	e041      	b.n	8010e76 <USB_EPStartXfer+0x8a8>
 8010df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010df6:	085b      	lsrs	r3, r3, #1
 8010df8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e00:	f003 0301 	and.w	r3, r3, #1
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d004      	beq.n	8010e12 <USB_EPStartXfer+0x844>
 8010e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e14:	881b      	ldrh	r3, [r3, #0]
 8010e16:	b29a      	uxth	r2, r3
 8010e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	029b      	lsls	r3, r3, #10
 8010e20:	b29b      	uxth	r3, r3
 8010e22:	4313      	orrs	r3, r2
 8010e24:	b29a      	uxth	r2, r3
 8010e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e28:	801a      	strh	r2, [r3, #0]
 8010e2a:	e024      	b.n	8010e76 <USB_EPStartXfer+0x8a8>
 8010e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	785b      	ldrb	r3, [r3, #1]
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	d11c      	bne.n	8010e76 <USB_EPStartXfer+0x8a8>
 8010e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	461a      	mov	r2, r3
 8010e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e50:	4413      	add	r3, r2
 8010e52:	643b      	str	r3, [r7, #64]	; 0x40
 8010e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	00da      	lsls	r2, r3, #3
 8010e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e64:	4413      	add	r3, r2
 8010e66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e70:	b29a      	uxth	r2, r3
 8010e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	895b      	ldrh	r3, [r3, #10]
 8010e82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	6959      	ldr	r1, [r3, #20]
 8010e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010e9c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010ea0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010ea4:	6800      	ldr	r0, [r0, #0]
 8010ea6:	f001 f87d 	bl	8011fa4 <USB_WritePMA>
 8010eaa:	e227      	b.n	80112fc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	6a1b      	ldr	r3, [r3, #32]
 8010eb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ec4:	681a      	ldr	r2, [r3, #0]
 8010ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	009b      	lsls	r3, r3, #2
 8010ed4:	4413      	add	r3, r2
 8010ed6:	881b      	ldrh	r3, [r3, #0]
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ee2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010eee:	681a      	ldr	r2, [r3, #0]
 8010ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	009b      	lsls	r3, r3, #2
 8010efe:	441a      	add	r2, r3
 8010f00:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	461a      	mov	r2, r3
 8010f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f38:	4413      	add	r3, r2
 8010f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	00da      	lsls	r2, r3, #3
 8010f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f4c:	4413      	add	r3, r2
 8010f4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010f52:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	891b      	ldrh	r3, [r3, #8]
 8010f6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	6959      	ldr	r1, [r3, #20]
 8010f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010f84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010f88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010f8c:	6800      	ldr	r0, [r0, #0]
 8010f8e:	f001 f809 	bl	8011fa4 <USB_WritePMA>
 8010f92:	e1b3      	b.n	80112fc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8010f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	6a1a      	ldr	r2, [r3, #32]
 8010fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fa4:	1ad2      	subs	r2, r2, r3
 8010fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	009b      	lsls	r3, r3, #2
 8010fca:	4413      	add	r3, r2
 8010fcc:	881b      	ldrh	r3, [r3, #0]
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	f000 80c6 	beq.w	8011166 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	673b      	str	r3, [r7, #112]	; 0x70
 8010fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	785b      	ldrb	r3, [r3, #1]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d177      	bne.n	80110e6 <USB_EPStartXfer+0xb18>
 8010ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	66bb      	str	r3, [r7, #104]	; 0x68
 8011002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011010:	b29b      	uxth	r3, r3
 8011012:	461a      	mov	r2, r3
 8011014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011016:	4413      	add	r3, r2
 8011018:	66bb      	str	r3, [r7, #104]	; 0x68
 801101a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801101e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	00da      	lsls	r2, r3, #3
 8011028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801102a:	4413      	add	r3, r2
 801102c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011030:	667b      	str	r3, [r7, #100]	; 0x64
 8011032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	b29b      	uxth	r3, r3
 8011038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801103c:	b29a      	uxth	r2, r3
 801103e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011040:	801a      	strh	r2, [r3, #0]
 8011042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011046:	2b3e      	cmp	r3, #62	; 0x3e
 8011048:	d921      	bls.n	801108e <USB_EPStartXfer+0xac0>
 801104a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801104e:	095b      	lsrs	r3, r3, #5
 8011050:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011058:	f003 031f 	and.w	r3, r3, #31
 801105c:	2b00      	cmp	r3, #0
 801105e:	d104      	bne.n	801106a <USB_EPStartXfer+0xa9c>
 8011060:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011064:	3b01      	subs	r3, #1
 8011066:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801106a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801106c:	881b      	ldrh	r3, [r3, #0]
 801106e:	b29a      	uxth	r2, r3
 8011070:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011074:	b29b      	uxth	r3, r3
 8011076:	029b      	lsls	r3, r3, #10
 8011078:	b29b      	uxth	r3, r3
 801107a:	4313      	orrs	r3, r2
 801107c:	b29b      	uxth	r3, r3
 801107e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011086:	b29a      	uxth	r2, r3
 8011088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801108a:	801a      	strh	r2, [r3, #0]
 801108c:	e050      	b.n	8011130 <USB_EPStartXfer+0xb62>
 801108e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011092:	2b00      	cmp	r3, #0
 8011094:	d10a      	bne.n	80110ac <USB_EPStartXfer+0xade>
 8011096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011098:	881b      	ldrh	r3, [r3, #0]
 801109a:	b29b      	uxth	r3, r3
 801109c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110a8:	801a      	strh	r2, [r3, #0]
 80110aa:	e041      	b.n	8011130 <USB_EPStartXfer+0xb62>
 80110ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110b0:	085b      	lsrs	r3, r3, #1
 80110b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80110b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110ba:	f003 0301 	and.w	r3, r3, #1
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d004      	beq.n	80110cc <USB_EPStartXfer+0xafe>
 80110c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80110c6:	3301      	adds	r3, #1
 80110c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80110cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110ce:	881b      	ldrh	r3, [r3, #0]
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	029b      	lsls	r3, r3, #10
 80110da:	b29b      	uxth	r3, r3
 80110dc:	4313      	orrs	r3, r2
 80110de:	b29a      	uxth	r2, r3
 80110e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110e2:	801a      	strh	r2, [r3, #0]
 80110e4:	e024      	b.n	8011130 <USB_EPStartXfer+0xb62>
 80110e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	785b      	ldrb	r3, [r3, #1]
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	d11c      	bne.n	8011130 <USB_EPStartXfer+0xb62>
 80110f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011104:	b29b      	uxth	r3, r3
 8011106:	461a      	mov	r2, r3
 8011108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801110a:	4413      	add	r3, r2
 801110c:	673b      	str	r3, [r7, #112]	; 0x70
 801110e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	00da      	lsls	r2, r3, #3
 801111c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801111e:	4413      	add	r3, r2
 8011120:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011124:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801112a:	b29a      	uxth	r2, r3
 801112c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801112e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	895b      	ldrh	r3, [r3, #10]
 801113c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	6959      	ldr	r1, [r3, #20]
 801114c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011150:	b29b      	uxth	r3, r3
 8011152:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011156:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801115a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801115e:	6800      	ldr	r0, [r0, #0]
 8011160:	f000 ff20 	bl	8011fa4 <USB_WritePMA>
 8011164:	e0ca      	b.n	80112fc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801116a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	785b      	ldrb	r3, [r3, #1]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d177      	bne.n	8011266 <USB_EPStartXfer+0xc98>
 8011176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801117a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011190:	b29b      	uxth	r3, r3
 8011192:	461a      	mov	r2, r3
 8011194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011196:	4413      	add	r3, r2
 8011198:	67fb      	str	r3, [r7, #124]	; 0x7c
 801119a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801119e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	00da      	lsls	r2, r3, #3
 80111a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80111aa:	4413      	add	r3, r2
 80111ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80111b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80111b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111b4:	881b      	ldrh	r3, [r3, #0]
 80111b6:	b29b      	uxth	r3, r3
 80111b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80111bc:	b29a      	uxth	r2, r3
 80111be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111c0:	801a      	strh	r2, [r3, #0]
 80111c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111c6:	2b3e      	cmp	r3, #62	; 0x3e
 80111c8:	d921      	bls.n	801120e <USB_EPStartXfer+0xc40>
 80111ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111ce:	095b      	lsrs	r3, r3, #5
 80111d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80111d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111d8:	f003 031f 	and.w	r3, r3, #31
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d104      	bne.n	80111ea <USB_EPStartXfer+0xc1c>
 80111e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80111e4:	3b01      	subs	r3, #1
 80111e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80111ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111ec:	881b      	ldrh	r3, [r3, #0]
 80111ee:	b29a      	uxth	r2, r3
 80111f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	029b      	lsls	r3, r3, #10
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	4313      	orrs	r3, r2
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011206:	b29a      	uxth	r2, r3
 8011208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801120a:	801a      	strh	r2, [r3, #0]
 801120c:	e05c      	b.n	80112c8 <USB_EPStartXfer+0xcfa>
 801120e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011212:	2b00      	cmp	r3, #0
 8011214:	d10a      	bne.n	801122c <USB_EPStartXfer+0xc5e>
 8011216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011218:	881b      	ldrh	r3, [r3, #0]
 801121a:	b29b      	uxth	r3, r3
 801121c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011224:	b29a      	uxth	r2, r3
 8011226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011228:	801a      	strh	r2, [r3, #0]
 801122a:	e04d      	b.n	80112c8 <USB_EPStartXfer+0xcfa>
 801122c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011230:	085b      	lsrs	r3, r3, #1
 8011232:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801123a:	f003 0301 	and.w	r3, r3, #1
 801123e:	2b00      	cmp	r3, #0
 8011240:	d004      	beq.n	801124c <USB_EPStartXfer+0xc7e>
 8011242:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011246:	3301      	adds	r3, #1
 8011248:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801124c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801124e:	881b      	ldrh	r3, [r3, #0]
 8011250:	b29a      	uxth	r2, r3
 8011252:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011256:	b29b      	uxth	r3, r3
 8011258:	029b      	lsls	r3, r3, #10
 801125a:	b29b      	uxth	r3, r3
 801125c:	4313      	orrs	r3, r2
 801125e:	b29a      	uxth	r2, r3
 8011260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011262:	801a      	strh	r2, [r3, #0]
 8011264:	e030      	b.n	80112c8 <USB_EPStartXfer+0xcfa>
 8011266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801126a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	785b      	ldrb	r3, [r3, #1]
 8011272:	2b01      	cmp	r3, #1
 8011274:	d128      	bne.n	80112c8 <USB_EPStartXfer+0xcfa>
 8011276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801127a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011292:	b29b      	uxth	r3, r3
 8011294:	461a      	mov	r2, r3
 8011296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801129a:	4413      	add	r3, r2
 801129c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80112a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	781b      	ldrb	r3, [r3, #0]
 80112ac:	00da      	lsls	r2, r3, #3
 80112ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80112b2:	4413      	add	r3, r2
 80112b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80112b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80112bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80112c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80112c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	891b      	ldrh	r3, [r3, #8]
 80112d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80112d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	6959      	ldr	r1, [r3, #20]
 80112e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80112ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80112f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80112f6:	6800      	ldr	r0, [r0, #0]
 80112f8:	f000 fe54 	bl	8011fa4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80112fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011304:	681a      	ldr	r2, [r3, #0]
 8011306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801130a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	009b      	lsls	r3, r3, #2
 8011314:	4413      	add	r3, r2
 8011316:	881b      	ldrh	r3, [r3, #0]
 8011318:	b29b      	uxth	r3, r3
 801131a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801131e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011322:	817b      	strh	r3, [r7, #10]
 8011324:	897b      	ldrh	r3, [r7, #10]
 8011326:	f083 0310 	eor.w	r3, r3, #16
 801132a:	817b      	strh	r3, [r7, #10]
 801132c:	897b      	ldrh	r3, [r7, #10]
 801132e:	f083 0320 	eor.w	r3, r3, #32
 8011332:	817b      	strh	r3, [r7, #10]
 8011334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	441a      	add	r2, r3
 801134e:	897b      	ldrh	r3, [r7, #10]
 8011350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801135c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011360:	b29b      	uxth	r3, r3
 8011362:	8013      	strh	r3, [r2, #0]
 8011364:	f000 bcde 	b.w	8011d24 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801136c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	7b1b      	ldrb	r3, [r3, #12]
 8011374:	2b00      	cmp	r3, #0
 8011376:	f040 80bb 	bne.w	80114f0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801137a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801137e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	699a      	ldr	r2, [r3, #24]
 8011386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801138a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	691b      	ldr	r3, [r3, #16]
 8011392:	429a      	cmp	r2, r3
 8011394:	d917      	bls.n	80113c6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8011396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801139a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	691b      	ldr	r3, [r3, #16]
 80113a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80113a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	699a      	ldr	r2, [r3, #24]
 80113b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113b6:	1ad2      	subs	r2, r2, r3
 80113b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	619a      	str	r2, [r3, #24]
 80113c4:	e00e      	b.n	80113e4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80113c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	699b      	ldr	r3, [r3, #24]
 80113d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80113d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	2200      	movs	r2, #0
 80113e2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80113e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80113f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011400:	b29b      	uxth	r3, r3
 8011402:	461a      	mov	r2, r3
 8011404:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011408:	4413      	add	r3, r2
 801140a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801140e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	00da      	lsls	r2, r3, #3
 801141c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011420:	4413      	add	r3, r2
 8011422:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801142a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801142e:	881b      	ldrh	r3, [r3, #0]
 8011430:	b29b      	uxth	r3, r3
 8011432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011436:	b29a      	uxth	r2, r3
 8011438:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801143c:	801a      	strh	r2, [r3, #0]
 801143e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011442:	2b3e      	cmp	r3, #62	; 0x3e
 8011444:	d924      	bls.n	8011490 <USB_EPStartXfer+0xec2>
 8011446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801144a:	095b      	lsrs	r3, r3, #5
 801144c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011454:	f003 031f 	and.w	r3, r3, #31
 8011458:	2b00      	cmp	r3, #0
 801145a:	d104      	bne.n	8011466 <USB_EPStartXfer+0xe98>
 801145c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011460:	3b01      	subs	r3, #1
 8011462:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801146a:	881b      	ldrh	r3, [r3, #0]
 801146c:	b29a      	uxth	r2, r3
 801146e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011472:	b29b      	uxth	r3, r3
 8011474:	029b      	lsls	r3, r3, #10
 8011476:	b29b      	uxth	r3, r3
 8011478:	4313      	orrs	r3, r2
 801147a:	b29b      	uxth	r3, r3
 801147c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011484:	b29a      	uxth	r2, r3
 8011486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801148a:	801a      	strh	r2, [r3, #0]
 801148c:	f000 bc10 	b.w	8011cb0 <USB_EPStartXfer+0x16e2>
 8011490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011494:	2b00      	cmp	r3, #0
 8011496:	d10c      	bne.n	80114b2 <USB_EPStartXfer+0xee4>
 8011498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801149c:	881b      	ldrh	r3, [r3, #0]
 801149e:	b29b      	uxth	r3, r3
 80114a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114a8:	b29a      	uxth	r2, r3
 80114aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80114ae:	801a      	strh	r2, [r3, #0]
 80114b0:	e3fe      	b.n	8011cb0 <USB_EPStartXfer+0x16e2>
 80114b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114b6:	085b      	lsrs	r3, r3, #1
 80114b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80114bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114c0:	f003 0301 	and.w	r3, r3, #1
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d004      	beq.n	80114d2 <USB_EPStartXfer+0xf04>
 80114c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80114cc:	3301      	adds	r3, #1
 80114ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80114d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80114d6:	881b      	ldrh	r3, [r3, #0]
 80114d8:	b29a      	uxth	r2, r3
 80114da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80114de:	b29b      	uxth	r3, r3
 80114e0:	029b      	lsls	r3, r3, #10
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	4313      	orrs	r3, r2
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80114ec:	801a      	strh	r2, [r3, #0]
 80114ee:	e3df      	b.n	8011cb0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80114f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	78db      	ldrb	r3, [r3, #3]
 80114fc:	2b02      	cmp	r3, #2
 80114fe:	f040 8218 	bne.w	8011932 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	785b      	ldrb	r3, [r3, #1]
 801150e:	2b00      	cmp	r3, #0
 8011510:	f040 809d 	bne.w	801164e <USB_EPStartXfer+0x1080>
 8011514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011530:	b29b      	uxth	r3, r3
 8011532:	461a      	mov	r2, r3
 8011534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011538:	4413      	add	r3, r2
 801153a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801153e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	00da      	lsls	r2, r3, #3
 801154c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011550:	4413      	add	r3, r2
 8011552:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011556:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801155a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801155e:	881b      	ldrh	r3, [r3, #0]
 8011560:	b29b      	uxth	r3, r3
 8011562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011566:	b29a      	uxth	r2, r3
 8011568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801156c:	801a      	strh	r2, [r3, #0]
 801156e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	691b      	ldr	r3, [r3, #16]
 801157a:	2b3e      	cmp	r3, #62	; 0x3e
 801157c:	d92b      	bls.n	80115d6 <USB_EPStartXfer+0x1008>
 801157e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	691b      	ldr	r3, [r3, #16]
 801158a:	095b      	lsrs	r3, r3, #5
 801158c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	691b      	ldr	r3, [r3, #16]
 801159c:	f003 031f 	and.w	r3, r3, #31
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d104      	bne.n	80115ae <USB_EPStartXfer+0xfe0>
 80115a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115a8:	3b01      	subs	r3, #1
 80115aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80115ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80115b2:	881b      	ldrh	r3, [r3, #0]
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	029b      	lsls	r3, r3, #10
 80115be:	b29b      	uxth	r3, r3
 80115c0:	4313      	orrs	r3, r2
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80115d2:	801a      	strh	r2, [r3, #0]
 80115d4:	e070      	b.n	80116b8 <USB_EPStartXfer+0x10ea>
 80115d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	691b      	ldr	r3, [r3, #16]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d10c      	bne.n	8011600 <USB_EPStartXfer+0x1032>
 80115e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80115ea:	881b      	ldrh	r3, [r3, #0]
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115f6:	b29a      	uxth	r2, r3
 80115f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80115fc:	801a      	strh	r2, [r3, #0]
 80115fe:	e05b      	b.n	80116b8 <USB_EPStartXfer+0x10ea>
 8011600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	691b      	ldr	r3, [r3, #16]
 801160c:	085b      	lsrs	r3, r3, #1
 801160e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	691b      	ldr	r3, [r3, #16]
 801161e:	f003 0301 	and.w	r3, r3, #1
 8011622:	2b00      	cmp	r3, #0
 8011624:	d004      	beq.n	8011630 <USB_EPStartXfer+0x1062>
 8011626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801162a:	3301      	adds	r3, #1
 801162c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011630:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011634:	881b      	ldrh	r3, [r3, #0]
 8011636:	b29a      	uxth	r2, r3
 8011638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801163c:	b29b      	uxth	r3, r3
 801163e:	029b      	lsls	r3, r3, #10
 8011640:	b29b      	uxth	r3, r3
 8011642:	4313      	orrs	r3, r2
 8011644:	b29a      	uxth	r2, r3
 8011646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801164a:	801a      	strh	r2, [r3, #0]
 801164c:	e034      	b.n	80116b8 <USB_EPStartXfer+0x10ea>
 801164e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	785b      	ldrb	r3, [r3, #1]
 801165a:	2b01      	cmp	r3, #1
 801165c:	d12c      	bne.n	80116b8 <USB_EPStartXfer+0x10ea>
 801165e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801166c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801167a:	b29b      	uxth	r3, r3
 801167c:	461a      	mov	r2, r3
 801167e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011682:	4413      	add	r3, r2
 8011684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801168c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	00da      	lsls	r2, r3, #3
 8011696:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801169a:	4413      	add	r3, r2
 801169c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80116a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80116a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	691b      	ldr	r3, [r3, #16]
 80116b0:	b29a      	uxth	r2, r3
 80116b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80116b6:	801a      	strh	r2, [r3, #0]
 80116b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80116c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	785b      	ldrb	r3, [r3, #1]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	f040 809d 	bne.w	8011812 <USB_EPStartXfer+0x1244>
 80116d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80116e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	461a      	mov	r2, r3
 80116f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80116fc:	4413      	add	r3, r2
 80116fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	00da      	lsls	r2, r3, #3
 8011710:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011714:	4413      	add	r3, r2
 8011716:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801171a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801171e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011722:	881b      	ldrh	r3, [r3, #0]
 8011724:	b29b      	uxth	r3, r3
 8011726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801172a:	b29a      	uxth	r2, r3
 801172c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011730:	801a      	strh	r2, [r3, #0]
 8011732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	691b      	ldr	r3, [r3, #16]
 801173e:	2b3e      	cmp	r3, #62	; 0x3e
 8011740:	d92b      	bls.n	801179a <USB_EPStartXfer+0x11cc>
 8011742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	691b      	ldr	r3, [r3, #16]
 801174e:	095b      	lsrs	r3, r3, #5
 8011750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	691b      	ldr	r3, [r3, #16]
 8011760:	f003 031f 	and.w	r3, r3, #31
 8011764:	2b00      	cmp	r3, #0
 8011766:	d104      	bne.n	8011772 <USB_EPStartXfer+0x11a4>
 8011768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801176c:	3b01      	subs	r3, #1
 801176e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011772:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011776:	881b      	ldrh	r3, [r3, #0]
 8011778:	b29a      	uxth	r2, r3
 801177a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801177e:	b29b      	uxth	r3, r3
 8011780:	029b      	lsls	r3, r3, #10
 8011782:	b29b      	uxth	r3, r3
 8011784:	4313      	orrs	r3, r2
 8011786:	b29b      	uxth	r3, r3
 8011788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801178c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011790:	b29a      	uxth	r2, r3
 8011792:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011796:	801a      	strh	r2, [r3, #0]
 8011798:	e069      	b.n	801186e <USB_EPStartXfer+0x12a0>
 801179a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801179e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	691b      	ldr	r3, [r3, #16]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d10c      	bne.n	80117c4 <USB_EPStartXfer+0x11f6>
 80117aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117ae:	881b      	ldrh	r3, [r3, #0]
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80117b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117c0:	801a      	strh	r2, [r3, #0]
 80117c2:	e054      	b.n	801186e <USB_EPStartXfer+0x12a0>
 80117c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	691b      	ldr	r3, [r3, #16]
 80117d0:	085b      	lsrs	r3, r3, #1
 80117d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80117d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	691b      	ldr	r3, [r3, #16]
 80117e2:	f003 0301 	and.w	r3, r3, #1
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d004      	beq.n	80117f4 <USB_EPStartXfer+0x1226>
 80117ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117ee:	3301      	adds	r3, #1
 80117f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80117f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117f8:	881b      	ldrh	r3, [r3, #0]
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011800:	b29b      	uxth	r3, r3
 8011802:	029b      	lsls	r3, r3, #10
 8011804:	b29b      	uxth	r3, r3
 8011806:	4313      	orrs	r3, r2
 8011808:	b29a      	uxth	r2, r3
 801180a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801180e:	801a      	strh	r2, [r3, #0]
 8011810:	e02d      	b.n	801186e <USB_EPStartXfer+0x12a0>
 8011812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	785b      	ldrb	r3, [r3, #1]
 801181e:	2b01      	cmp	r3, #1
 8011820:	d125      	bne.n	801186e <USB_EPStartXfer+0x12a0>
 8011822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011830:	b29b      	uxth	r3, r3
 8011832:	461a      	mov	r2, r3
 8011834:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011838:	4413      	add	r3, r2
 801183a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801183e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	00da      	lsls	r2, r3, #3
 801184c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011850:	4413      	add	r3, r2
 8011852:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801185a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801185e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	691b      	ldr	r3, [r3, #16]
 8011866:	b29a      	uxth	r2, r3
 8011868:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801186c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801186e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	69db      	ldr	r3, [r3, #28]
 801187a:	2b00      	cmp	r3, #0
 801187c:	f000 8218 	beq.w	8011cb0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801188e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	781b      	ldrb	r3, [r3, #0]
 8011896:	009b      	lsls	r3, r3, #2
 8011898:	4413      	add	r3, r2
 801189a:	881b      	ldrh	r3, [r3, #0]
 801189c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80118a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80118a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d005      	beq.n	80118b8 <USB_EPStartXfer+0x12ea>
 80118ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80118b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d10d      	bne.n	80118d4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80118b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80118bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	f040 81f5 	bne.w	8011cb0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80118c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80118ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f040 81ee 	bne.w	8011cb0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80118d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118dc:	681a      	ldr	r2, [r3, #0]
 80118de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	781b      	ldrb	r3, [r3, #0]
 80118ea:	009b      	lsls	r3, r3, #2
 80118ec:	4413      	add	r3, r2
 80118ee:	881b      	ldrh	r3, [r3, #0]
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80118f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118fa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80118fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011902:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801190c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	441a      	add	r2, r3
 8011918:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801191c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801192c:	b29b      	uxth	r3, r3
 801192e:	8013      	strh	r3, [r2, #0]
 8011930:	e1be      	b.n	8011cb0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	78db      	ldrb	r3, [r3, #3]
 801193e:	2b01      	cmp	r3, #1
 8011940:	f040 81b4 	bne.w	8011cac <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8011944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	699a      	ldr	r2, [r3, #24]
 8011950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	691b      	ldr	r3, [r3, #16]
 801195c:	429a      	cmp	r2, r3
 801195e:	d917      	bls.n	8011990 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8011960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	691b      	ldr	r3, [r3, #16]
 801196c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8011970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	699a      	ldr	r2, [r3, #24]
 801197c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011980:	1ad2      	subs	r2, r2, r3
 8011982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	619a      	str	r2, [r3, #24]
 801198e:	e00e      	b.n	80119ae <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8011990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	699b      	ldr	r3, [r3, #24]
 801199c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80119a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	2200      	movs	r2, #0
 80119ac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80119ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	785b      	ldrb	r3, [r3, #1]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	f040 8085 	bne.w	8011aca <USB_EPStartXfer+0x14fc>
 80119c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80119ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119dc:	b29b      	uxth	r3, r3
 80119de:	461a      	mov	r2, r3
 80119e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80119e4:	4413      	add	r3, r2
 80119e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80119ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	00da      	lsls	r2, r3, #3
 80119f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80119fc:	4413      	add	r3, r2
 80119fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011a06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a0a:	881b      	ldrh	r3, [r3, #0]
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a12:	b29a      	uxth	r2, r3
 8011a14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a18:	801a      	strh	r2, [r3, #0]
 8011a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a1e:	2b3e      	cmp	r3, #62	; 0x3e
 8011a20:	d923      	bls.n	8011a6a <USB_EPStartXfer+0x149c>
 8011a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a26:	095b      	lsrs	r3, r3, #5
 8011a28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a30:	f003 031f 	and.w	r3, r3, #31
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d104      	bne.n	8011a42 <USB_EPStartXfer+0x1474>
 8011a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011a3c:	3b01      	subs	r3, #1
 8011a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a46:	881b      	ldrh	r3, [r3, #0]
 8011a48:	b29a      	uxth	r2, r3
 8011a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	029b      	lsls	r3, r3, #10
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	4313      	orrs	r3, r2
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a60:	b29a      	uxth	r2, r3
 8011a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a66:	801a      	strh	r2, [r3, #0]
 8011a68:	e060      	b.n	8011b2c <USB_EPStartXfer+0x155e>
 8011a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d10c      	bne.n	8011a8c <USB_EPStartXfer+0x14be>
 8011a72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a76:	881b      	ldrh	r3, [r3, #0]
 8011a78:	b29b      	uxth	r3, r3
 8011a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a82:	b29a      	uxth	r2, r3
 8011a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a88:	801a      	strh	r2, [r3, #0]
 8011a8a:	e04f      	b.n	8011b2c <USB_EPStartXfer+0x155e>
 8011a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a90:	085b      	lsrs	r3, r3, #1
 8011a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a9a:	f003 0301 	and.w	r3, r3, #1
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d004      	beq.n	8011aac <USB_EPStartXfer+0x14de>
 8011aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	029b      	lsls	r3, r3, #10
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	4313      	orrs	r3, r2
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011ac6:	801a      	strh	r2, [r3, #0]
 8011ac8:	e030      	b.n	8011b2c <USB_EPStartXfer+0x155e>
 8011aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	785b      	ldrb	r3, [r3, #1]
 8011ad6:	2b01      	cmp	r3, #1
 8011ad8:	d128      	bne.n	8011b2c <USB_EPStartXfer+0x155e>
 8011ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	461a      	mov	r2, r3
 8011afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011afe:	4413      	add	r3, r2
 8011b00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	00da      	lsls	r2, r3, #3
 8011b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011b16:	4413      	add	r3, r2
 8011b18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b24:	b29a      	uxth	r2, r3
 8011b26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011b2a:	801a      	strh	r2, [r3, #0]
 8011b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	785b      	ldrb	r3, [r3, #1]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	f040 8085 	bne.w	8011c56 <USB_EPStartXfer+0x1688>
 8011b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011b70:	4413      	add	r3, r2
 8011b72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	00da      	lsls	r2, r3, #3
 8011b84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011b88:	4413      	add	r3, r2
 8011b8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011b96:	881b      	ldrh	r3, [r3, #0]
 8011b98:	b29b      	uxth	r3, r3
 8011b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b9e:	b29a      	uxth	r2, r3
 8011ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011ba4:	801a      	strh	r2, [r3, #0]
 8011ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011baa:	2b3e      	cmp	r3, #62	; 0x3e
 8011bac:	d923      	bls.n	8011bf6 <USB_EPStartXfer+0x1628>
 8011bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bb2:	095b      	lsrs	r3, r3, #5
 8011bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bbc:	f003 031f 	and.w	r3, r3, #31
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d104      	bne.n	8011bce <USB_EPStartXfer+0x1600>
 8011bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011bc8:	3b01      	subs	r3, #1
 8011bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011bce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011bd2:	881b      	ldrh	r3, [r3, #0]
 8011bd4:	b29a      	uxth	r2, r3
 8011bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011bda:	b29b      	uxth	r3, r3
 8011bdc:	029b      	lsls	r3, r3, #10
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	4313      	orrs	r3, r2
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bec:	b29a      	uxth	r2, r3
 8011bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011bf2:	801a      	strh	r2, [r3, #0]
 8011bf4:	e05c      	b.n	8011cb0 <USB_EPStartXfer+0x16e2>
 8011bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d10c      	bne.n	8011c18 <USB_EPStartXfer+0x164a>
 8011bfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c02:	881b      	ldrh	r3, [r3, #0]
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c0e:	b29a      	uxth	r2, r3
 8011c10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c14:	801a      	strh	r2, [r3, #0]
 8011c16:	e04b      	b.n	8011cb0 <USB_EPStartXfer+0x16e2>
 8011c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c1c:	085b      	lsrs	r3, r3, #1
 8011c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c26:	f003 0301 	and.w	r3, r3, #1
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d004      	beq.n	8011c38 <USB_EPStartXfer+0x166a>
 8011c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011c32:	3301      	adds	r3, #1
 8011c34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c3c:	881b      	ldrh	r3, [r3, #0]
 8011c3e:	b29a      	uxth	r2, r3
 8011c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011c44:	b29b      	uxth	r3, r3
 8011c46:	029b      	lsls	r3, r3, #10
 8011c48:	b29b      	uxth	r3, r3
 8011c4a:	4313      	orrs	r3, r2
 8011c4c:	b29a      	uxth	r2, r3
 8011c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c52:	801a      	strh	r2, [r3, #0]
 8011c54:	e02c      	b.n	8011cb0 <USB_EPStartXfer+0x16e2>
 8011c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	785b      	ldrb	r3, [r3, #1]
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d124      	bne.n	8011cb0 <USB_EPStartXfer+0x16e2>
 8011c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c74:	b29b      	uxth	r3, r3
 8011c76:	461a      	mov	r2, r3
 8011c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011c7c:	4413      	add	r3, r2
 8011c7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	00da      	lsls	r2, r3, #3
 8011c90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011c94:	4413      	add	r3, r2
 8011c96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ca2:	b29a      	uxth	r2, r3
 8011ca4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011ca8:	801a      	strh	r2, [r3, #0]
 8011caa:	e001      	b.n	8011cb0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8011cac:	2301      	movs	r3, #1
 8011cae:	e03a      	b.n	8011d26 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	4413      	add	r3, r2
 8011cca:	881b      	ldrh	r3, [r3, #0]
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011cd6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011cda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011cde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011ce2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011ce6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011cea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011cee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cfa:	681a      	ldr	r2, [r3, #0]
 8011cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	009b      	lsls	r3, r3, #2
 8011d0a:	441a      	add	r2, r3
 8011d0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011d24:	2300      	movs	r3, #0
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}

08011d30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011d30:	b480      	push	{r7}
 8011d32:	b085      	sub	sp, #20
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	785b      	ldrb	r3, [r3, #1]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d020      	beq.n	8011d84 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	4413      	add	r3, r2
 8011d4c:	881b      	ldrh	r3, [r3, #0]
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d58:	81bb      	strh	r3, [r7, #12]
 8011d5a:	89bb      	ldrh	r3, [r7, #12]
 8011d5c:	f083 0310 	eor.w	r3, r3, #16
 8011d60:	81bb      	strh	r3, [r7, #12]
 8011d62:	687a      	ldr	r2, [r7, #4]
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	781b      	ldrb	r3, [r3, #0]
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	441a      	add	r2, r3
 8011d6c:	89bb      	ldrh	r3, [r7, #12]
 8011d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	8013      	strh	r3, [r2, #0]
 8011d82:	e01f      	b.n	8011dc4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	009b      	lsls	r3, r3, #2
 8011d8c:	4413      	add	r3, r2
 8011d8e:	881b      	ldrh	r3, [r3, #0]
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d9a:	81fb      	strh	r3, [r7, #14]
 8011d9c:	89fb      	ldrh	r3, [r7, #14]
 8011d9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011da2:	81fb      	strh	r3, [r7, #14]
 8011da4:	687a      	ldr	r2, [r7, #4]
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	441a      	add	r2, r3
 8011dae:	89fb      	ldrh	r3, [r7, #14]
 8011db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011dc4:	2300      	movs	r3, #0
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3714      	adds	r7, #20
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr

08011dd2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011dd2:	b480      	push	{r7}
 8011dd4:	b087      	sub	sp, #28
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
 8011dda:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	7b1b      	ldrb	r3, [r3, #12]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	f040 809d 	bne.w	8011f20 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	785b      	ldrb	r3, [r3, #1]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d04c      	beq.n	8011e88 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	009b      	lsls	r3, r3, #2
 8011df6:	4413      	add	r3, r2
 8011df8:	881b      	ldrh	r3, [r3, #0]
 8011dfa:	823b      	strh	r3, [r7, #16]
 8011dfc:	8a3b      	ldrh	r3, [r7, #16]
 8011dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d01b      	beq.n	8011e3e <USB_EPClearStall+0x6c>
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	4413      	add	r3, r2
 8011e10:	881b      	ldrh	r3, [r3, #0]
 8011e12:	b29b      	uxth	r3, r3
 8011e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e1c:	81fb      	strh	r3, [r7, #14]
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	009b      	lsls	r3, r3, #2
 8011e26:	441a      	add	r2, r3
 8011e28:	89fb      	ldrh	r3, [r7, #14]
 8011e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011e3a:	b29b      	uxth	r3, r3
 8011e3c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	78db      	ldrb	r3, [r3, #3]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d06c      	beq.n	8011f20 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011e46:	687a      	ldr	r2, [r7, #4]
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	4413      	add	r3, r2
 8011e50:	881b      	ldrh	r3, [r3, #0]
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e5c:	81bb      	strh	r3, [r7, #12]
 8011e5e:	89bb      	ldrh	r3, [r7, #12]
 8011e60:	f083 0320 	eor.w	r3, r3, #32
 8011e64:	81bb      	strh	r3, [r7, #12]
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	441a      	add	r2, r3
 8011e70:	89bb      	ldrh	r3, [r7, #12]
 8011e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	8013      	strh	r3, [r2, #0]
 8011e86:	e04b      	b.n	8011f20 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011e88:	687a      	ldr	r2, [r7, #4]
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	781b      	ldrb	r3, [r3, #0]
 8011e8e:	009b      	lsls	r3, r3, #2
 8011e90:	4413      	add	r3, r2
 8011e92:	881b      	ldrh	r3, [r3, #0]
 8011e94:	82fb      	strh	r3, [r7, #22]
 8011e96:	8afb      	ldrh	r3, [r7, #22]
 8011e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d01b      	beq.n	8011ed8 <USB_EPClearStall+0x106>
 8011ea0:	687a      	ldr	r2, [r7, #4]
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	009b      	lsls	r3, r3, #2
 8011ea8:	4413      	add	r3, r2
 8011eaa:	881b      	ldrh	r3, [r3, #0]
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011eb6:	82bb      	strh	r3, [r7, #20]
 8011eb8:	687a      	ldr	r2, [r7, #4]
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	009b      	lsls	r3, r3, #2
 8011ec0:	441a      	add	r2, r3
 8011ec2:	8abb      	ldrh	r3, [r7, #20]
 8011ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	009b      	lsls	r3, r3, #2
 8011ee0:	4413      	add	r3, r2
 8011ee2:	881b      	ldrh	r3, [r3, #0]
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011eee:	827b      	strh	r3, [r7, #18]
 8011ef0:	8a7b      	ldrh	r3, [r7, #18]
 8011ef2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011ef6:	827b      	strh	r3, [r7, #18]
 8011ef8:	8a7b      	ldrh	r3, [r7, #18]
 8011efa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011efe:	827b      	strh	r3, [r7, #18]
 8011f00:	687a      	ldr	r2, [r7, #4]
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	441a      	add	r2, r3
 8011f0a:	8a7b      	ldrh	r3, [r7, #18]
 8011f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8011f20:	2300      	movs	r3, #0
}
 8011f22:	4618      	mov	r0, r3
 8011f24:	371c      	adds	r7, #28
 8011f26:	46bd      	mov	sp, r7
 8011f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2c:	4770      	bx	lr

08011f2e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011f2e:	b480      	push	{r7}
 8011f30:	b083      	sub	sp, #12
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
 8011f36:	460b      	mov	r3, r1
 8011f38:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011f3a:	78fb      	ldrb	r3, [r7, #3]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d103      	bne.n	8011f48 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2280      	movs	r2, #128	; 0x80
 8011f44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8011f48:	2300      	movs	r3, #0
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	370c      	adds	r7, #12
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr

08011f56 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011f56:	b480      	push	{r7}
 8011f58:	b083      	sub	sp, #12
 8011f5a:	af00      	add	r7, sp, #0
 8011f5c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011f64:	b29b      	uxth	r3, r3
 8011f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f6e:	b29a      	uxth	r2, r3
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8011f76:	2300      	movs	r3, #0
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr

08011f84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011f84:	b480      	push	{r7}
 8011f86:	b085      	sub	sp, #20
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011f96:	68fb      	ldr	r3, [r7, #12]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3714      	adds	r7, #20
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa2:	4770      	bx	lr

08011fa4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b08b      	sub	sp, #44	; 0x2c
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	60f8      	str	r0, [r7, #12]
 8011fac:	60b9      	str	r1, [r7, #8]
 8011fae:	4611      	mov	r1, r2
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	80fb      	strh	r3, [r7, #6]
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011fba:	88bb      	ldrh	r3, [r7, #4]
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	085b      	lsrs	r3, r3, #1
 8011fc0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011fca:	88fa      	ldrh	r2, [r7, #6]
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	4413      	add	r3, r2
 8011fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011fd4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011fd6:	69bb      	ldr	r3, [r7, #24]
 8011fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8011fda:	e01b      	b.n	8012014 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011fdc:	69fb      	ldr	r3, [r7, #28]
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	021b      	lsls	r3, r3, #8
 8011fea:	b21a      	sxth	r2, r3
 8011fec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011ff0:	4313      	orrs	r3, r2
 8011ff2:	b21b      	sxth	r3, r3
 8011ff4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011ff6:	6a3b      	ldr	r3, [r7, #32]
 8011ff8:	8a7a      	ldrh	r2, [r7, #18]
 8011ffa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011ffc:	6a3b      	ldr	r3, [r7, #32]
 8011ffe:	3302      	adds	r3, #2
 8012000:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012002:	69fb      	ldr	r3, [r7, #28]
 8012004:	3301      	adds	r3, #1
 8012006:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	3301      	adds	r3, #1
 801200c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012010:	3b01      	subs	r3, #1
 8012012:	627b      	str	r3, [r7, #36]	; 0x24
 8012014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012016:	2b00      	cmp	r3, #0
 8012018:	d1e0      	bne.n	8011fdc <USB_WritePMA+0x38>
  }
}
 801201a:	bf00      	nop
 801201c:	bf00      	nop
 801201e:	372c      	adds	r7, #44	; 0x2c
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr

08012028 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012028:	b480      	push	{r7}
 801202a:	b08b      	sub	sp, #44	; 0x2c
 801202c:	af00      	add	r7, sp, #0
 801202e:	60f8      	str	r0, [r7, #12]
 8012030:	60b9      	str	r1, [r7, #8]
 8012032:	4611      	mov	r1, r2
 8012034:	461a      	mov	r2, r3
 8012036:	460b      	mov	r3, r1
 8012038:	80fb      	strh	r3, [r7, #6]
 801203a:	4613      	mov	r3, r2
 801203c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801203e:	88bb      	ldrh	r3, [r7, #4]
 8012040:	085b      	lsrs	r3, r3, #1
 8012042:	b29b      	uxth	r3, r3
 8012044:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801204e:	88fa      	ldrh	r2, [r7, #6]
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	4413      	add	r3, r2
 8012054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012058:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801205a:	69bb      	ldr	r3, [r7, #24]
 801205c:	627b      	str	r3, [r7, #36]	; 0x24
 801205e:	e018      	b.n	8012092 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012060:	6a3b      	ldr	r3, [r7, #32]
 8012062:	881b      	ldrh	r3, [r3, #0]
 8012064:	b29b      	uxth	r3, r3
 8012066:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012068:	6a3b      	ldr	r3, [r7, #32]
 801206a:	3302      	adds	r3, #2
 801206c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	b2da      	uxtb	r2, r3
 8012072:	69fb      	ldr	r3, [r7, #28]
 8012074:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012076:	69fb      	ldr	r3, [r7, #28]
 8012078:	3301      	adds	r3, #1
 801207a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801207c:	693b      	ldr	r3, [r7, #16]
 801207e:	0a1b      	lsrs	r3, r3, #8
 8012080:	b2da      	uxtb	r2, r3
 8012082:	69fb      	ldr	r3, [r7, #28]
 8012084:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012086:	69fb      	ldr	r3, [r7, #28]
 8012088:	3301      	adds	r3, #1
 801208a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208e:	3b01      	subs	r3, #1
 8012090:	627b      	str	r3, [r7, #36]	; 0x24
 8012092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012094:	2b00      	cmp	r3, #0
 8012096:	d1e3      	bne.n	8012060 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012098:	88bb      	ldrh	r3, [r7, #4]
 801209a:	f003 0301 	and.w	r3, r3, #1
 801209e:	b29b      	uxth	r3, r3
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d007      	beq.n	80120b4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80120a4:	6a3b      	ldr	r3, [r7, #32]
 80120a6:	881b      	ldrh	r3, [r3, #0]
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	b2da      	uxtb	r2, r3
 80120b0:	69fb      	ldr	r3, [r7, #28]
 80120b2:	701a      	strb	r2, [r3, #0]
  }
}
 80120b4:	bf00      	nop
 80120b6:	372c      	adds	r7, #44	; 0x2c
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr

080120c0 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 80120c0:	b480      	push	{r7}
 80120c2:	b085      	sub	sp, #20
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	1c5a      	adds	r2, r3, #1
 80120cc:	607a      	str	r2, [r7, #4]
 80120ce:	781b      	ldrb	r3, [r3, #0]
 80120d0:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 80120d2:	89fb      	ldrh	r3, [r7, #14]
 80120d4:	021b      	lsls	r3, r3, #8
 80120d6:	b21a      	sxth	r2, r3
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	b21b      	sxth	r3, r3
 80120de:	4313      	orrs	r3, r2
 80120e0:	b21b      	sxth	r3, r3
 80120e2:	b29b      	uxth	r3, r3
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3714      	adds	r7, #20
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr

080120f0 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 80120f0:	b480      	push	{r7}
 80120f2:	b085      	sub	sp, #20
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	683a      	ldr	r2, [r7, #0]
 80120fe:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2204      	movs	r2, #4
 8012104:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2204      	movs	r2, #4
 801210a:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012114:	b29a      	uxth	r2, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801211c:	b29b      	uxth	r3, r3
 801211e:	1ad3      	subs	r3, r2, r3
 8012120:	b29b      	uxth	r3, r3
 8012122:	3b01      	subs	r3, #1
 8012124:	b29b      	uxth	r3, r3
 8012126:	b21a      	sxth	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012134:	b29a      	uxth	r2, r3
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801213c:	b29b      	uxth	r3, r3
 801213e:	1ad3      	subs	r3, r2, r3
 8012140:	b29b      	uxth	r3, r3
 8012142:	3b01      	subs	r3, #1
 8012144:	b29b      	uxth	r3, r3
 8012146:	b21a      	sxth	r2, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2201      	movs	r2, #1
 8012164:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2201      	movs	r2, #1
 801216c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2200      	movs	r2, #0
 8012174:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2200      	movs	r2, #0
 801217a:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2200      	movs	r2, #0
 8012196:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2200      	movs	r2, #0
 801219c:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2200      	movs	r2, #0
 80121a2:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2200      	movs	r2, #0
 80121a8:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2200      	movs	r2, #0
 80121ae:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f645 425d 	movw	r2, #23645	; 0x5c5d
 80121b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2200      	movs	r2, #0
 80121d0:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2200      	movs	r2, #0
 80121d6:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2200      	movs	r2, #0
 80121dc:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80121de:	2300      	movs	r3, #0
 80121e0:	73fb      	strb	r3, [r7, #15]
 80121e2:	e010      	b.n	8012206 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 80121e4:	7bfb      	ldrb	r3, [r7, #15]
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	330a      	adds	r3, #10
 80121ea:	00db      	lsls	r3, r3, #3
 80121ec:	4413      	add	r3, r2
 80121ee:	2200      	movs	r2, #0
 80121f0:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80121f2:	7bfb      	ldrb	r3, [r7, #15]
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	330a      	adds	r3, #10
 80121f8:	00db      	lsls	r3, r3, #3
 80121fa:	4413      	add	r3, r2
 80121fc:	2200      	movs	r2, #0
 80121fe:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8012200:	7bfb      	ldrb	r3, [r7, #15]
 8012202:	3301      	adds	r3, #1
 8012204:	73fb      	strb	r3, [r7, #15]
 8012206:	7bfb      	ldrb	r3, [r7, #15]
 8012208:	2b03      	cmp	r3, #3
 801220a:	d9eb      	bls.n	80121e4 <UG_Init+0xf4>
   }

   gui = g;
 801220c:	4a04      	ldr	r2, [pc, #16]	; (8012220 <UG_Init+0x130>)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6013      	str	r3, [r2, #0]
   return 1;
 8012212:	2301      	movs	r3, #1
}
 8012214:	4618      	mov	r0, r3
 8012216:	3714      	adds	r7, #20
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr
 8012220:	200023c0 	.word	0x200023c0

08012224 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8012224:	b480      	push	{r7}
 8012226:	b083      	sub	sp, #12
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  gui->font = font;
 801222c:	4b04      	ldr	r3, [pc, #16]	; (8012240 <UG_FontSelect+0x1c>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	687a      	ldr	r2, [r7, #4]
 8012232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012234:	bf00      	nop
 8012236:	370c      	adds	r7, #12
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr
 8012240:	200023c0 	.word	0x200023c0

08012244 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	af02      	add	r7, sp, #8
 801224a:	4603      	mov	r3, r0
 801224c:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 801224e:	4b0e      	ldr	r3, [pc, #56]	; (8012288 <UG_FillScreen+0x44>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012258:	b29b      	uxth	r3, r3
 801225a:	3b01      	subs	r3, #1
 801225c:	b29b      	uxth	r3, r3
 801225e:	b21a      	sxth	r2, r3
 8012260:	4b09      	ldr	r3, [pc, #36]	; (8012288 <UG_FillScreen+0x44>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801226a:	b29b      	uxth	r3, r3
 801226c:	3b01      	subs	r3, #1
 801226e:	b29b      	uxth	r3, r3
 8012270:	b219      	sxth	r1, r3
 8012272:	88fb      	ldrh	r3, [r7, #6]
 8012274:	9300      	str	r3, [sp, #0]
 8012276:	460b      	mov	r3, r1
 8012278:	2100      	movs	r1, #0
 801227a:	2000      	movs	r0, #0
 801227c:	f000 f806 	bl	801228c <UG_FillFrame>
}
 8012280:	bf00      	nop
 8012282:	3708      	adds	r7, #8
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}
 8012288:	200023c0 	.word	0x200023c0

0801228c <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 801228c:	b5b0      	push	{r4, r5, r7, lr}
 801228e:	b086      	sub	sp, #24
 8012290:	af02      	add	r7, sp, #8
 8012292:	4604      	mov	r4, r0
 8012294:	4608      	mov	r0, r1
 8012296:	4611      	mov	r1, r2
 8012298:	461a      	mov	r2, r3
 801229a:	4623      	mov	r3, r4
 801229c:	80fb      	strh	r3, [r7, #6]
 801229e:	4603      	mov	r3, r0
 80122a0:	80bb      	strh	r3, [r7, #4]
 80122a2:	460b      	mov	r3, r1
 80122a4:	807b      	strh	r3, [r7, #2]
 80122a6:	4613      	mov	r3, r2
 80122a8:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80122aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80122ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	da05      	bge.n	80122c2 <UG_FillFrame+0x36>
     swap(x1,x2);
 80122b6:	88fb      	ldrh	r3, [r7, #6]
 80122b8:	817b      	strh	r3, [r7, #10]
 80122ba:	887b      	ldrh	r3, [r7, #2]
 80122bc:	80fb      	strh	r3, [r7, #6]
 80122be:	897b      	ldrh	r3, [r7, #10]
 80122c0:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 80122c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80122c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	da05      	bge.n	80122da <UG_FillFrame+0x4e>
     swap(y1,y2);
 80122ce:	88bb      	ldrh	r3, [r7, #4]
 80122d0:	813b      	strh	r3, [r7, #8]
 80122d2:	883b      	ldrh	r3, [r7, #0]
 80122d4:	80bb      	strh	r3, [r7, #4]
 80122d6:	893b      	ldrh	r3, [r7, #8]
 80122d8:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80122da:	4b24      	ldr	r3, [pc, #144]	; (801236c <UG_FillFrame+0xe0>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80122e2:	f003 0302 	and.w	r3, r3, #2
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d012      	beq.n	8012310 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80122ea:	4b20      	ldr	r3, [pc, #128]	; (801236c <UG_FillFrame+0xe0>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122f0:	461d      	mov	r5, r3
 80122f2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80122f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80122fa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80122fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012302:	8c3b      	ldrh	r3, [r7, #32]
 8012304:	9300      	str	r3, [sp, #0]
 8012306:	4623      	mov	r3, r4
 8012308:	47a8      	blx	r5
 801230a:	4603      	mov	r3, r0
 801230c:	2b00      	cmp	r3, #0
 801230e:	d028      	beq.n	8012362 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8012310:	88bb      	ldrh	r3, [r7, #4]
 8012312:	81bb      	strh	r3, [r7, #12]
 8012314:	e01e      	b.n	8012354 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 8012316:	88fb      	ldrh	r3, [r7, #6]
 8012318:	81fb      	strh	r3, [r7, #14]
 801231a:	e00f      	b.n	801233c <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 801231c:	4b13      	ldr	r3, [pc, #76]	; (801236c <UG_FillFrame+0xe0>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	8c3a      	ldrh	r2, [r7, #32]
 8012326:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 801232a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801232e:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8012330:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012334:	b29b      	uxth	r3, r3
 8012336:	3301      	adds	r3, #1
 8012338:	b29b      	uxth	r3, r3
 801233a:	81fb      	strh	r3, [r7, #14]
 801233c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012340:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012344:	429a      	cmp	r2, r3
 8012346:	dde9      	ble.n	801231c <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8012348:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801234c:	b29b      	uxth	r3, r3
 801234e:	3301      	adds	r3, #1
 8012350:	b29b      	uxth	r3, r3
 8012352:	81bb      	strh	r3, [r7, #12]
 8012354:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8012358:	f9b7 3000 	ldrsh.w	r3, [r7]
 801235c:	429a      	cmp	r2, r3
 801235e:	ddda      	ble.n	8012316 <UG_FillFrame+0x8a>
 8012360:	e000      	b.n	8012364 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012362:	bf00      	nop
      }
   }
}
 8012364:	3710      	adds	r7, #16
 8012366:	46bd      	mov	sp, r7
 8012368:	bdb0      	pop	{r4, r5, r7, pc}
 801236a:	bf00      	nop
 801236c:	200023c0 	.word	0x200023c0

08012370 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012370:	b590      	push	{r4, r7, lr}
 8012372:	b085      	sub	sp, #20
 8012374:	af02      	add	r7, sp, #8
 8012376:	4604      	mov	r4, r0
 8012378:	4608      	mov	r0, r1
 801237a:	4611      	mov	r1, r2
 801237c:	461a      	mov	r2, r3
 801237e:	4623      	mov	r3, r4
 8012380:	80fb      	strh	r3, [r7, #6]
 8012382:	4603      	mov	r3, r0
 8012384:	80bb      	strh	r3, [r7, #4]
 8012386:	460b      	mov	r3, r1
 8012388:	807b      	strh	r3, [r7, #2]
 801238a:	4613      	mov	r3, r2
 801238c:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 801238e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8012392:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012396:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801239a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801239e:	8b3b      	ldrh	r3, [r7, #24]
 80123a0:	9300      	str	r3, [sp, #0]
 80123a2:	4623      	mov	r3, r4
 80123a4:	f000 f912 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 80123a8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80123ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80123b0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80123b4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80123b8:	8b3b      	ldrh	r3, [r7, #24]
 80123ba:	9300      	str	r3, [sp, #0]
 80123bc:	4623      	mov	r3, r4
 80123be:	f000 f905 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 80123c2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80123c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80123ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80123ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80123d2:	8b3b      	ldrh	r3, [r7, #24]
 80123d4:	9300      	str	r3, [sp, #0]
 80123d6:	4623      	mov	r3, r4
 80123d8:	f000 f8f8 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 80123dc:	f9b7 4000 	ldrsh.w	r4, [r7]
 80123e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80123e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80123e8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80123ec:	8b3b      	ldrh	r3, [r7, #24]
 80123ee:	9300      	str	r3, [sp, #0]
 80123f0:	4623      	mov	r3, r4
 80123f2:	f000 f8eb 	bl	80125cc <UG_DrawLine>
}
 80123f6:	bf00      	nop
 80123f8:	370c      	adds	r7, #12
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd90      	pop	{r4, r7, pc}
	...

08012400 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8012400:	b590      	push	{r4, r7, lr}
 8012402:	b087      	sub	sp, #28
 8012404:	af00      	add	r7, sp, #0
 8012406:	4604      	mov	r4, r0
 8012408:	4608      	mov	r0, r1
 801240a:	4611      	mov	r1, r2
 801240c:	461a      	mov	r2, r3
 801240e:	4623      	mov	r3, r4
 8012410:	80fb      	strh	r3, [r7, #6]
 8012412:	4603      	mov	r3, r0
 8012414:	80bb      	strh	r3, [r7, #4]
 8012416:	460b      	mov	r3, r1
 8012418:	807b      	strh	r3, [r7, #2]
 801241a:	4613      	mov	r3, r2
 801241c:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 801241e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012422:	2b00      	cmp	r3, #0
 8012424:	f2c0 80c8 	blt.w	80125b8 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 8012428:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801242c:	2b00      	cmp	r3, #0
 801242e:	f2c0 80c5 	blt.w	80125bc <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 8012432:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012436:	2b00      	cmp	r3, #0
 8012438:	f340 80c2 	ble.w	80125c0 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 801243c:	887b      	ldrh	r3, [r7, #2]
 801243e:	005b      	lsls	r3, r3, #1
 8012440:	b29b      	uxth	r3, r3
 8012442:	f1c3 0301 	rsb	r3, r3, #1
 8012446:	b29b      	uxth	r3, r3
 8012448:	827b      	strh	r3, [r7, #18]
   yd = 0;
 801244a:	2300      	movs	r3, #0
 801244c:	823b      	strh	r3, [r7, #16]
   e = 0;
 801244e:	2300      	movs	r3, #0
 8012450:	81fb      	strh	r3, [r7, #14]
   x = r;
 8012452:	887b      	ldrh	r3, [r7, #2]
 8012454:	82fb      	strh	r3, [r7, #22]
   y = 0;
 8012456:	2300      	movs	r3, #0
 8012458:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 801245a:	e0a5      	b.n	80125a8 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 801245c:	4b5a      	ldr	r3, [pc, #360]	; (80125c8 <UG_DrawCircle+0x1c8>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	88f9      	ldrh	r1, [r7, #6]
 8012466:	8afa      	ldrh	r2, [r7, #22]
 8012468:	1a8a      	subs	r2, r1, r2
 801246a:	b292      	uxth	r2, r2
 801246c:	b210      	sxth	r0, r2
 801246e:	88b9      	ldrh	r1, [r7, #4]
 8012470:	8aba      	ldrh	r2, [r7, #20]
 8012472:	440a      	add	r2, r1
 8012474:	b292      	uxth	r2, r2
 8012476:	b211      	sxth	r1, r2
 8012478:	883a      	ldrh	r2, [r7, #0]
 801247a:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 801247c:	4b52      	ldr	r3, [pc, #328]	; (80125c8 <UG_DrawCircle+0x1c8>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	88f9      	ldrh	r1, [r7, #6]
 8012486:	8afa      	ldrh	r2, [r7, #22]
 8012488:	1a8a      	subs	r2, r1, r2
 801248a:	b292      	uxth	r2, r2
 801248c:	b210      	sxth	r0, r2
 801248e:	88b9      	ldrh	r1, [r7, #4]
 8012490:	8aba      	ldrh	r2, [r7, #20]
 8012492:	1a8a      	subs	r2, r1, r2
 8012494:	b292      	uxth	r2, r2
 8012496:	b211      	sxth	r1, r2
 8012498:	883a      	ldrh	r2, [r7, #0]
 801249a:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 801249c:	4b4a      	ldr	r3, [pc, #296]	; (80125c8 <UG_DrawCircle+0x1c8>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	88f9      	ldrh	r1, [r7, #6]
 80124a6:	8afa      	ldrh	r2, [r7, #22]
 80124a8:	440a      	add	r2, r1
 80124aa:	b292      	uxth	r2, r2
 80124ac:	b210      	sxth	r0, r2
 80124ae:	88b9      	ldrh	r1, [r7, #4]
 80124b0:	8aba      	ldrh	r2, [r7, #20]
 80124b2:	440a      	add	r2, r1
 80124b4:	b292      	uxth	r2, r2
 80124b6:	b211      	sxth	r1, r2
 80124b8:	883a      	ldrh	r2, [r7, #0]
 80124ba:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 80124bc:	4b42      	ldr	r3, [pc, #264]	; (80125c8 <UG_DrawCircle+0x1c8>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	88f9      	ldrh	r1, [r7, #6]
 80124c6:	8afa      	ldrh	r2, [r7, #22]
 80124c8:	440a      	add	r2, r1
 80124ca:	b292      	uxth	r2, r2
 80124cc:	b210      	sxth	r0, r2
 80124ce:	88b9      	ldrh	r1, [r7, #4]
 80124d0:	8aba      	ldrh	r2, [r7, #20]
 80124d2:	1a8a      	subs	r2, r1, r2
 80124d4:	b292      	uxth	r2, r2
 80124d6:	b211      	sxth	r1, r2
 80124d8:	883a      	ldrh	r2, [r7, #0]
 80124da:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 80124dc:	4b3a      	ldr	r3, [pc, #232]	; (80125c8 <UG_DrawCircle+0x1c8>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	88f9      	ldrh	r1, [r7, #6]
 80124e6:	8aba      	ldrh	r2, [r7, #20]
 80124e8:	1a8a      	subs	r2, r1, r2
 80124ea:	b292      	uxth	r2, r2
 80124ec:	b210      	sxth	r0, r2
 80124ee:	88b9      	ldrh	r1, [r7, #4]
 80124f0:	8afa      	ldrh	r2, [r7, #22]
 80124f2:	440a      	add	r2, r1
 80124f4:	b292      	uxth	r2, r2
 80124f6:	b211      	sxth	r1, r2
 80124f8:	883a      	ldrh	r2, [r7, #0]
 80124fa:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 80124fc:	4b32      	ldr	r3, [pc, #200]	; (80125c8 <UG_DrawCircle+0x1c8>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	685b      	ldr	r3, [r3, #4]
 8012504:	88f9      	ldrh	r1, [r7, #6]
 8012506:	8aba      	ldrh	r2, [r7, #20]
 8012508:	1a8a      	subs	r2, r1, r2
 801250a:	b292      	uxth	r2, r2
 801250c:	b210      	sxth	r0, r2
 801250e:	88b9      	ldrh	r1, [r7, #4]
 8012510:	8afa      	ldrh	r2, [r7, #22]
 8012512:	1a8a      	subs	r2, r1, r2
 8012514:	b292      	uxth	r2, r2
 8012516:	b211      	sxth	r1, r2
 8012518:	883a      	ldrh	r2, [r7, #0]
 801251a:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 801251c:	4b2a      	ldr	r3, [pc, #168]	; (80125c8 <UG_DrawCircle+0x1c8>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	88f9      	ldrh	r1, [r7, #6]
 8012526:	8aba      	ldrh	r2, [r7, #20]
 8012528:	440a      	add	r2, r1
 801252a:	b292      	uxth	r2, r2
 801252c:	b210      	sxth	r0, r2
 801252e:	88b9      	ldrh	r1, [r7, #4]
 8012530:	8afa      	ldrh	r2, [r7, #22]
 8012532:	440a      	add	r2, r1
 8012534:	b292      	uxth	r2, r2
 8012536:	b211      	sxth	r1, r2
 8012538:	883a      	ldrh	r2, [r7, #0]
 801253a:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 801253c:	4b22      	ldr	r3, [pc, #136]	; (80125c8 <UG_DrawCircle+0x1c8>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	88f9      	ldrh	r1, [r7, #6]
 8012546:	8aba      	ldrh	r2, [r7, #20]
 8012548:	440a      	add	r2, r1
 801254a:	b292      	uxth	r2, r2
 801254c:	b210      	sxth	r0, r2
 801254e:	88b9      	ldrh	r1, [r7, #4]
 8012550:	8afa      	ldrh	r2, [r7, #22]
 8012552:	1a8a      	subs	r2, r1, r2
 8012554:	b292      	uxth	r2, r2
 8012556:	b211      	sxth	r1, r2
 8012558:	883a      	ldrh	r2, [r7, #0]
 801255a:	4798      	blx	r3

      y++;
 801255c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012560:	b29b      	uxth	r3, r3
 8012562:	3301      	adds	r3, #1
 8012564:	b29b      	uxth	r3, r3
 8012566:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8012568:	89fa      	ldrh	r2, [r7, #14]
 801256a:	8a3b      	ldrh	r3, [r7, #16]
 801256c:	4413      	add	r3, r2
 801256e:	b29b      	uxth	r3, r3
 8012570:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8012572:	8a3b      	ldrh	r3, [r7, #16]
 8012574:	3302      	adds	r3, #2
 8012576:	b29b      	uxth	r3, r3
 8012578:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 801257a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801257e:	005a      	lsls	r2, r3, #1
 8012580:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012584:	4413      	add	r3, r2
 8012586:	2b00      	cmp	r3, #0
 8012588:	dd0e      	ble.n	80125a8 <UG_DrawCircle+0x1a8>
      {
         x--;
 801258a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801258e:	b29b      	uxth	r3, r3
 8012590:	3b01      	subs	r3, #1
 8012592:	b29b      	uxth	r3, r3
 8012594:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8012596:	89fa      	ldrh	r2, [r7, #14]
 8012598:	8a7b      	ldrh	r3, [r7, #18]
 801259a:	4413      	add	r3, r2
 801259c:	b29b      	uxth	r3, r3
 801259e:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 80125a0:	8a7b      	ldrh	r3, [r7, #18]
 80125a2:	3302      	adds	r3, #2
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 80125a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80125b0:	429a      	cmp	r2, r3
 80125b2:	f6bf af53 	bge.w	801245c <UG_DrawCircle+0x5c>
 80125b6:	e004      	b.n	80125c2 <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 80125b8:	bf00      	nop
 80125ba:	e002      	b.n	80125c2 <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 80125bc:	bf00      	nop
 80125be:	e000      	b.n	80125c2 <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 80125c0:	bf00      	nop
      }
   }
}
 80125c2:	371c      	adds	r7, #28
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd90      	pop	{r4, r7, pc}
 80125c8:	200023c0 	.word	0x200023c0

080125cc <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80125cc:	b5b0      	push	{r4, r5, r7, lr}
 80125ce:	b08a      	sub	sp, #40	; 0x28
 80125d0:	af02      	add	r7, sp, #8
 80125d2:	4604      	mov	r4, r0
 80125d4:	4608      	mov	r0, r1
 80125d6:	4611      	mov	r1, r2
 80125d8:	461a      	mov	r2, r3
 80125da:	4623      	mov	r3, r4
 80125dc:	80fb      	strh	r3, [r7, #6]
 80125de:	4603      	mov	r3, r0
 80125e0:	80bb      	strh	r3, [r7, #4]
 80125e2:	460b      	mov	r3, r1
 80125e4:	807b      	strh	r3, [r7, #2]
 80125e6:	4613      	mov	r3, r2
 80125e8:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80125ea:	4b67      	ldr	r3, [pc, #412]	; (8012788 <UG_DrawLine+0x1bc>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80125f2:	f003 0302 	and.w	r3, r3, #2
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d013      	beq.n	8012622 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80125fa:	4b63      	ldr	r3, [pc, #396]	; (8012788 <UG_DrawLine+0x1bc>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012600:	461d      	mov	r5, r3
 8012602:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012606:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801260a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801260e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012612:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012614:	9300      	str	r3, [sp, #0]
 8012616:	4623      	mov	r3, r4
 8012618:	47a8      	blx	r5
 801261a:	4603      	mov	r3, r0
 801261c:	2b00      	cmp	r3, #0
 801261e:	f000 80ae 	beq.w	801277e <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8012622:	887a      	ldrh	r2, [r7, #2]
 8012624:	88fb      	ldrh	r3, [r7, #6]
 8012626:	1ad3      	subs	r3, r2, r3
 8012628:	b29b      	uxth	r3, r3
 801262a:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 801262c:	883a      	ldrh	r2, [r7, #0]
 801262e:	88bb      	ldrh	r3, [r7, #4]
 8012630:	1ad3      	subs	r3, r2, r3
 8012632:	b29b      	uxth	r3, r3
 8012634:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8012636:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801263a:	2b00      	cmp	r3, #0
 801263c:	bfb8      	it	lt
 801263e:	425b      	neglt	r3, r3
 8012640:	b29b      	uxth	r3, r3
 8012642:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8012644:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012648:	2b00      	cmp	r3, #0
 801264a:	bfb8      	it	lt
 801264c:	425b      	neglt	r3, r3
 801264e:	b29b      	uxth	r3, r3
 8012650:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8012652:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012656:	2b00      	cmp	r3, #0
 8012658:	dd01      	ble.n	801265e <UG_DrawLine+0x92>
 801265a:	2301      	movs	r3, #1
 801265c:	e001      	b.n	8012662 <UG_DrawLine+0x96>
 801265e:	f04f 33ff 	mov.w	r3, #4294967295
 8012662:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8012664:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012668:	2b00      	cmp	r3, #0
 801266a:	dd01      	ble.n	8012670 <UG_DrawLine+0xa4>
 801266c:	2301      	movs	r3, #1
 801266e:	e001      	b.n	8012674 <UG_DrawLine+0xa8>
 8012670:	f04f 33ff 	mov.w	r3, #4294967295
 8012674:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8012676:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801267a:	105b      	asrs	r3, r3, #1
 801267c:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 801267e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012682:	105b      	asrs	r3, r3, #1
 8012684:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8012686:	88fb      	ldrh	r3, [r7, #6]
 8012688:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 801268a:	88bb      	ldrh	r3, [r7, #4]
 801268c:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 801268e:	4b3e      	ldr	r3, [pc, #248]	; (8012788 <UG_DrawLine+0x1bc>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8012698:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801269c:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80126a0:	4798      	blx	r3

   if( dxabs >= dyabs )
 80126a2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80126a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80126aa:	429a      	cmp	r2, r3
 80126ac:	db33      	blt.n	8012716 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 80126ae:	2300      	movs	r3, #0
 80126b0:	83fb      	strh	r3, [r7, #30]
 80126b2:	e029      	b.n	8012708 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 80126b4:	8b7a      	ldrh	r2, [r7, #26]
 80126b6:	89fb      	ldrh	r3, [r7, #14]
 80126b8:	4413      	add	r3, r2
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 80126be:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80126c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	db09      	blt.n	80126de <UG_DrawLine+0x112>
         {
            y -= dxabs;
 80126ca:	8b7a      	ldrh	r2, [r7, #26]
 80126cc:	8a3b      	ldrh	r3, [r7, #16]
 80126ce:	1ad3      	subs	r3, r2, r3
 80126d0:	b29b      	uxth	r3, r3
 80126d2:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 80126d4:	8afa      	ldrh	r2, [r7, #22]
 80126d6:	897b      	ldrh	r3, [r7, #10]
 80126d8:	4413      	add	r3, r2
 80126da:	b29b      	uxth	r3, r3
 80126dc:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 80126de:	8b3a      	ldrh	r2, [r7, #24]
 80126e0:	89bb      	ldrh	r3, [r7, #12]
 80126e2:	4413      	add	r3, r2
 80126e4:	b29b      	uxth	r3, r3
 80126e6:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 80126e8:	4b27      	ldr	r3, [pc, #156]	; (8012788 <UG_DrawLine+0x1bc>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	685b      	ldr	r3, [r3, #4]
 80126f0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80126f2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80126f6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80126fa:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 80126fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012700:	b29b      	uxth	r3, r3
 8012702:	3301      	adds	r3, #1
 8012704:	b29b      	uxth	r3, r3
 8012706:	83fb      	strh	r3, [r7, #30]
 8012708:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801270c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012710:	429a      	cmp	r2, r3
 8012712:	dbcf      	blt.n	80126b4 <UG_DrawLine+0xe8>
 8012714:	e034      	b.n	8012780 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8012716:	2300      	movs	r3, #0
 8012718:	83fb      	strh	r3, [r7, #30]
 801271a:	e029      	b.n	8012770 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 801271c:	8bba      	ldrh	r2, [r7, #28]
 801271e:	8a3b      	ldrh	r3, [r7, #16]
 8012720:	4413      	add	r3, r2
 8012722:	b29b      	uxth	r3, r3
 8012724:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8012726:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 801272a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801272e:	429a      	cmp	r2, r3
 8012730:	db09      	blt.n	8012746 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8012732:	8bba      	ldrh	r2, [r7, #28]
 8012734:	89fb      	ldrh	r3, [r7, #14]
 8012736:	1ad3      	subs	r3, r2, r3
 8012738:	b29b      	uxth	r3, r3
 801273a:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 801273c:	8b3a      	ldrh	r2, [r7, #24]
 801273e:	89bb      	ldrh	r3, [r7, #12]
 8012740:	4413      	add	r3, r2
 8012742:	b29b      	uxth	r3, r3
 8012744:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8012746:	8afa      	ldrh	r2, [r7, #22]
 8012748:	897b      	ldrh	r3, [r7, #10]
 801274a:	4413      	add	r3, r2
 801274c:	b29b      	uxth	r3, r3
 801274e:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8012750:	4b0d      	ldr	r3, [pc, #52]	; (8012788 <UG_DrawLine+0x1bc>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 801275a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801275e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8012762:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8012764:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012768:	b29b      	uxth	r3, r3
 801276a:	3301      	adds	r3, #1
 801276c:	b29b      	uxth	r3, r3
 801276e:	83fb      	strh	r3, [r7, #30]
 8012770:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8012774:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012778:	429a      	cmp	r2, r3
 801277a:	dbcf      	blt.n	801271c <UG_DrawLine+0x150>
 801277c:	e000      	b.n	8012780 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 801277e:	bf00      	nop
      }
   }  
}
 8012780:	3720      	adds	r7, #32
 8012782:	46bd      	mov	sp, r7
 8012784:	bdb0      	pop	{r4, r5, r7, pc}
 8012786:	bf00      	nop
 8012788:	200023c0 	.word	0x200023c0

0801278c <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 801278c:	b590      	push	{r4, r7, lr}
 801278e:	b087      	sub	sp, #28
 8012790:	af02      	add	r7, sp, #8
 8012792:	4603      	mov	r3, r0
 8012794:	603a      	str	r2, [r7, #0]
 8012796:	80fb      	strh	r3, [r7, #6]
 8012798:	460b      	mov	r3, r1
 801279a:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 801279c:	88fb      	ldrh	r3, [r7, #6]
 801279e:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80127a0:	88bb      	ldrh	r3, [r7, #4]
 80127a2:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 80127a4:	4b44      	ldr	r3, [pc, #272]	; (80128b8 <UG_PutString+0x12c>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127aa:	4618      	mov	r0, r3
 80127ac:	f000 fa96 	bl	8012cdc <_UG_FontSelect>
   while ( *str != 0 )
 80127b0:	e064      	b.n	801287c <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80127b2:	4b41      	ldr	r3, [pc, #260]	; (80128b8 <UG_PutString+0x12c>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d106      	bne.n	80127cc <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 80127be:	463b      	mov	r3, r7
 80127c0:	4618      	mov	r0, r3
 80127c2:	f000 f8c7 	bl	8012954 <_UG_DecodeUTF8>
 80127c6:	4603      	mov	r3, r0
 80127c8:	817b      	strh	r3, [r7, #10]
 80127ca:	e004      	b.n	80127d6 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	1c5a      	adds	r2, r3, #1
 80127d0:	603a      	str	r2, [r7, #0]
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 80127d6:	897b      	ldrh	r3, [r7, #10]
 80127d8:	2b0a      	cmp	r3, #10
 80127da:	d105      	bne.n	80127e8 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 80127dc:	4b36      	ldr	r3, [pc, #216]	; (80128b8 <UG_PutString+0x12c>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	881b      	ldrh	r3, [r3, #0]
 80127e4:	81fb      	strh	r3, [r7, #14]
         continue;
 80127e6:	e049      	b.n	801287c <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80127e8:	897b      	ldrh	r3, [r7, #10]
 80127ea:	2100      	movs	r1, #0
 80127ec:	4618      	mov	r0, r3
 80127ee:	f000 f929 	bl	8012a44 <_UG_GetCharData>
 80127f2:	4603      	mov	r3, r0
 80127f4:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80127f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80127fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127fe:	d100      	bne.n	8012802 <UG_PutString+0x76>
 8012800:	e03c      	b.n	801287c <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 8012802:	4b2d      	ldr	r3, [pc, #180]	; (80128b8 <UG_PutString+0x12c>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	f9b3 3000 	ldrsh.w	r3, [r3]
 801280c:	4619      	mov	r1, r3
 801280e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012812:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012816:	4413      	add	r3, r2
 8012818:	4299      	cmp	r1, r3
 801281a:	dc12      	bgt.n	8012842 <UG_PutString+0xb6>
      {
         xp = x;
 801281c:	88fb      	ldrh	r3, [r7, #6]
 801281e:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8012820:	4b25      	ldr	r3, [pc, #148]	; (80128b8 <UG_PutString+0x12c>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012828:	b21a      	sxth	r2, r3
 801282a:	4b23      	ldr	r3, [pc, #140]	; (80128b8 <UG_PutString+0x12c>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 8012832:	b21b      	sxth	r3, r3
 8012834:	4413      	add	r3, r2
 8012836:	b21b      	sxth	r3, r3
 8012838:	b29a      	uxth	r2, r3
 801283a:	89bb      	ldrh	r3, [r7, #12]
 801283c:	4413      	add	r3, r2
 801283e:	b29b      	uxth	r3, r3
 8012840:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8012842:	4b1d      	ldr	r3, [pc, #116]	; (80128b8 <UG_PutString+0x12c>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 801284a:	4b1b      	ldr	r3, [pc, #108]	; (80128b8 <UG_PutString+0x12c>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8012852:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8012856:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801285a:	8978      	ldrh	r0, [r7, #10]
 801285c:	9300      	str	r3, [sp, #0]
 801285e:	4623      	mov	r3, r4
 8012860:	f000 fabe 	bl	8012de0 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8012864:	4b14      	ldr	r3, [pc, #80]	; (80128b8 <UG_PutString+0x12c>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 801286c:	b29a      	uxth	r2, r3
 801286e:	893b      	ldrh	r3, [r7, #8]
 8012870:	4413      	add	r3, r2
 8012872:	b29a      	uxth	r2, r3
 8012874:	89fb      	ldrh	r3, [r7, #14]
 8012876:	4413      	add	r3, r2
 8012878:	b29b      	uxth	r3, r3
 801287a:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d196      	bne.n	80127b2 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8012884:	4b0c      	ldr	r3, [pc, #48]	; (80128b8 <UG_PutString+0x12c>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801288c:	f003 0302 	and.w	r3, r3, #2
 8012890:	2b00      	cmp	r3, #0
 8012892:	d00c      	beq.n	80128ae <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8012894:	4b08      	ldr	r3, [pc, #32]	; (80128b8 <UG_PutString+0x12c>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801289a:	461c      	mov	r4, r3
 801289c:	f04f 33ff 	mov.w	r3, #4294967295
 80128a0:	f04f 32ff 	mov.w	r2, #4294967295
 80128a4:	f04f 31ff 	mov.w	r1, #4294967295
 80128a8:	f04f 30ff 	mov.w	r0, #4294967295
 80128ac:	47a0      	blx	r4
}
 80128ae:	bf00      	nop
 80128b0:	3714      	adds	r7, #20
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd90      	pop	{r4, r7, pc}
 80128b6:	bf00      	nop
 80128b8:	200023c0 	.word	0x200023c0

080128bc <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 80128bc:	b480      	push	{r7}
 80128be:	b083      	sub	sp, #12
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	4603      	mov	r3, r0
 80128c4:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 80128c6:	4b05      	ldr	r3, [pc, #20]	; (80128dc <UG_SetForecolor+0x20>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	88fa      	ldrh	r2, [r7, #6]
 80128cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 80128d0:	bf00      	nop
 80128d2:	370c      	adds	r7, #12
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr
 80128dc:	200023c0 	.word	0x200023c0

080128e0 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80128e0:	b480      	push	{r7}
 80128e2:	b083      	sub	sp, #12
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	4603      	mov	r3, r0
 80128e8:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80128ea:	4b05      	ldr	r3, [pc, #20]	; (8012900 <UG_SetBackcolor+0x20>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	88fa      	ldrh	r2, [r7, #6]
 80128f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80128f4:	bf00      	nop
 80128f6:	370c      	adds	r7, #12
 80128f8:	46bd      	mov	sp, r7
 80128fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fe:	4770      	bx	lr
 8012900:	200023c0 	.word	0x200023c0

08012904 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8012904:	b480      	push	{r7}
 8012906:	b083      	sub	sp, #12
 8012908:	af00      	add	r7, sp, #0
 801290a:	4603      	mov	r3, r0
 801290c:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 801290e:	4b06      	ldr	r3, [pc, #24]	; (8012928 <UG_FontSetHSpace+0x24>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	88fa      	ldrh	r2, [r7, #6]
 8012914:	b252      	sxtb	r2, r2
 8012916:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 801291a:	bf00      	nop
 801291c:	370c      	adds	r7, #12
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr
 8012926:	bf00      	nop
 8012928:	200023c0 	.word	0x200023c0

0801292c <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 801292c:	b480      	push	{r7}
 801292e:	b083      	sub	sp, #12
 8012930:	af00      	add	r7, sp, #0
 8012932:	4603      	mov	r3, r0
 8012934:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8012936:	4b06      	ldr	r3, [pc, #24]	; (8012950 <UG_FontSetVSpace+0x24>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	88fa      	ldrh	r2, [r7, #6]
 801293c:	b252      	sxtb	r2, r2
 801293e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 8012942:	bf00      	nop
 8012944:	370c      	adds	r7, #12
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop
 8012950:	200023c0 	.word	0x200023c0

08012954 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8012954:	b480      	push	{r7}
 8012956:	b085      	sub	sp, #20
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]

  char c=**str;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8012964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012968:	2b00      	cmp	r3, #0
 801296a:	db07      	blt.n	801297c <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	1c5a      	adds	r2, r3, #1
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	601a      	str	r2, [r3, #0]
    return c;
 8012976:	7bfb      	ldrb	r3, [r7, #15]
 8012978:	b29b      	uxth	r3, r3
 801297a:	e05c      	b.n	8012a36 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 801297c:	2300      	movs	r3, #0
 801297e:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8012980:	2300      	movs	r3, #0
 8012982:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8012984:	e04f      	b.n	8012a26 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	1c5a      	adds	r2, r3, #1
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8012998:	7bbb      	ldrb	r3, [r7, #14]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d130      	bne.n	8012a00 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 801299e:	7bfb      	ldrb	r3, [r7, #15]
 80129a0:	2bdf      	cmp	r3, #223	; 0xdf
 80129a2:	d806      	bhi.n	80129b2 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 80129a4:	2301      	movs	r3, #1
 80129a6:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 80129a8:	7bfb      	ldrb	r3, [r7, #15]
 80129aa:	f003 031f 	and.w	r3, r3, #31
 80129ae:	73fb      	strb	r3, [r7, #15]
 80129b0:	e023      	b.n	80129fa <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 80129b2:	7bfb      	ldrb	r3, [r7, #15]
 80129b4:	2bef      	cmp	r3, #239	; 0xef
 80129b6:	d806      	bhi.n	80129c6 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 80129b8:	2302      	movs	r3, #2
 80129ba:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 80129bc:	7bfb      	ldrb	r3, [r7, #15]
 80129be:	f003 030f 	and.w	r3, r3, #15
 80129c2:	73fb      	strb	r3, [r7, #15]
 80129c4:	e019      	b.n	80129fa <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 80129c6:	7bfb      	ldrb	r3, [r7, #15]
 80129c8:	2bf7      	cmp	r3, #247	; 0xf7
 80129ca:	d806      	bhi.n	80129da <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 80129cc:	2303      	movs	r3, #3
 80129ce:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 80129d0:	7bfb      	ldrb	r3, [r7, #15]
 80129d2:	f003 0307 	and.w	r3, r3, #7
 80129d6:	73fb      	strb	r3, [r7, #15]
 80129d8:	e00f      	b.n	80129fa <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 80129da:	7bfb      	ldrb	r3, [r7, #15]
 80129dc:	2bfb      	cmp	r3, #251	; 0xfb
 80129de:	d806      	bhi.n	80129ee <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 80129e0:	2304      	movs	r3, #4
 80129e2:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 80129e4:	7bfb      	ldrb	r3, [r7, #15]
 80129e6:	f003 0303 	and.w	r3, r3, #3
 80129ea:	73fb      	strb	r3, [r7, #15]
 80129ec:	e005      	b.n	80129fa <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 80129ee:	2305      	movs	r3, #5
 80129f0:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 80129f2:	7bfb      	ldrb	r3, [r7, #15]
 80129f4:	f003 0301 	and.w	r3, r3, #1
 80129f8:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 80129fa:	7bfb      	ldrb	r3, [r7, #15]
 80129fc:	81bb      	strh	r3, [r7, #12]
 80129fe:	e012      	b.n	8012a26 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8012a00:	89bb      	ldrh	r3, [r7, #12]
 8012a02:	019b      	lsls	r3, r3, #6
 8012a04:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8012a06:	7bfb      	ldrb	r3, [r7, #15]
 8012a08:	b21b      	sxth	r3, r3
 8012a0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a0e:	b21a      	sxth	r2, r3
 8012a10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012a14:	4313      	orrs	r3, r2
 8012a16:	b21b      	sxth	r3, r3
 8012a18:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8012a1a:	7bbb      	ldrb	r3, [r7, #14]
 8012a1c:	3b01      	subs	r3, #1
 8012a1e:	73bb      	strb	r3, [r7, #14]
 8012a20:	7bbb      	ldrb	r3, [r7, #14]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d005      	beq.n	8012a32 <_UG_DecodeUTF8+0xde>
  while(**str)
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d1aa      	bne.n	8012986 <_UG_DecodeUTF8+0x32>
 8012a30:	e000      	b.n	8012a34 <_UG_DecodeUTF8+0xe0>
        break;
 8012a32:	bf00      	nop
    }
  }
  return encoding;
 8012a34:	89bb      	ldrh	r3, [r7, #12]
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3714      	adds	r7, #20
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a40:	4770      	bx	lr
	...

08012a44 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b086      	sub	sp, #24
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	6039      	str	r1, [r7, #0]
 8012a4e:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8012a50:	2300      	movs	r3, #0
 8012a52:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8012a54:	2300      	movs	r3, #0
 8012a56:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8012a60:	2300      	movs	r3, #0
 8012a62:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8012a64:	4b98      	ldr	r3, [pc, #608]	; (8012cc8 <_UG_GetCharData+0x284>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a6a:	4b98      	ldr	r3, [pc, #608]	; (8012ccc <_UG_GetCharData+0x288>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d10f      	bne.n	8012a92 <_UG_GetCharData+0x4e>
 8012a72:	4b97      	ldr	r3, [pc, #604]	; (8012cd0 <_UG_GetCharData+0x28c>)
 8012a74:	881b      	ldrh	r3, [r3, #0]
 8012a76:	88fa      	ldrh	r2, [r7, #6]
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d10a      	bne.n	8012a92 <_UG_GetCharData+0x4e>
    if(p){
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d003      	beq.n	8012a8a <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8012a82:	4b94      	ldr	r3, [pc, #592]	; (8012cd4 <_UG_GetCharData+0x290>)
 8012a84:	681a      	ldr	r2, [r3, #0]
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8012a8a:	4b93      	ldr	r3, [pc, #588]	; (8012cd8 <_UG_GetCharData+0x294>)
 8012a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a90:	e116      	b.n	8012cc0 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8012a92:	4b8d      	ldr	r3, [pc, #564]	; (8012cc8 <_UG_GetCharData+0x284>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	f000 80cc 	beq.w	8012c38 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8012aa0:	88fb      	ldrh	r3, [r7, #6]
 8012aa2:	2bfc      	cmp	r3, #252	; 0xfc
 8012aa4:	f300 80c8 	bgt.w	8012c38 <_UG_GetCharData+0x1f4>
 8012aa8:	2bd6      	cmp	r3, #214	; 0xd6
 8012aaa:	da09      	bge.n	8012ac0 <_UG_GetCharData+0x7c>
 8012aac:	2bc4      	cmp	r3, #196	; 0xc4
 8012aae:	d06c      	beq.n	8012b8a <_UG_GetCharData+0x146>
 8012ab0:	2bc4      	cmp	r3, #196	; 0xc4
 8012ab2:	f300 80c1 	bgt.w	8012c38 <_UG_GetCharData+0x1f4>
 8012ab6:	2bb0      	cmp	r3, #176	; 0xb0
 8012ab8:	d06d      	beq.n	8012b96 <_UG_GetCharData+0x152>
 8012aba:	2bb5      	cmp	r3, #181	; 0xb5
 8012abc:	d068      	beq.n	8012b90 <_UG_GetCharData+0x14c>
 8012abe:	e06e      	b.n	8012b9e <_UG_GetCharData+0x15a>
 8012ac0:	3bd6      	subs	r3, #214	; 0xd6
 8012ac2:	2b26      	cmp	r3, #38	; 0x26
 8012ac4:	f200 80b8 	bhi.w	8012c38 <_UG_GetCharData+0x1f4>
 8012ac8:	a201      	add	r2, pc, #4	; (adr r2, 8012ad0 <_UG_GetCharData+0x8c>)
 8012aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ace:	bf00      	nop
 8012ad0:	08012b73 	.word	0x08012b73
 8012ad4:	08012c39 	.word	0x08012c39
 8012ad8:	08012c39 	.word	0x08012c39
 8012adc:	08012c39 	.word	0x08012c39
 8012ae0:	08012c39 	.word	0x08012c39
 8012ae4:	08012c39 	.word	0x08012c39
 8012ae8:	08012b7f 	.word	0x08012b7f
 8012aec:	08012c39 	.word	0x08012c39
 8012af0:	08012c39 	.word	0x08012c39
 8012af4:	08012c39 	.word	0x08012c39
 8012af8:	08012c39 	.word	0x08012c39
 8012afc:	08012c39 	.word	0x08012c39
 8012b00:	08012c39 	.word	0x08012c39
 8012b04:	08012c39 	.word	0x08012c39
 8012b08:	08012b85 	.word	0x08012b85
 8012b0c:	08012c39 	.word	0x08012c39
 8012b10:	08012c39 	.word	0x08012c39
 8012b14:	08012c39 	.word	0x08012c39
 8012b18:	08012c39 	.word	0x08012c39
 8012b1c:	08012c39 	.word	0x08012c39
 8012b20:	08012c39 	.word	0x08012c39
 8012b24:	08012c39 	.word	0x08012c39
 8012b28:	08012c39 	.word	0x08012c39
 8012b2c:	08012c39 	.word	0x08012c39
 8012b30:	08012c39 	.word	0x08012c39
 8012b34:	08012c39 	.word	0x08012c39
 8012b38:	08012c39 	.word	0x08012c39
 8012b3c:	08012c39 	.word	0x08012c39
 8012b40:	08012c39 	.word	0x08012c39
 8012b44:	08012c39 	.word	0x08012c39
 8012b48:	08012c39 	.word	0x08012c39
 8012b4c:	08012c39 	.word	0x08012c39
 8012b50:	08012b6d 	.word	0x08012b6d
 8012b54:	08012c39 	.word	0x08012c39
 8012b58:	08012c39 	.word	0x08012c39
 8012b5c:	08012c39 	.word	0x08012c39
 8012b60:	08012c39 	.word	0x08012c39
 8012b64:	08012c39 	.word	0x08012c39
 8012b68:	08012b79 	.word	0x08012b79
    {
       case 0xF6: encoding = 0x94; break; // ö
 8012b6c:	2394      	movs	r3, #148	; 0x94
 8012b6e:	80fb      	strh	r3, [r7, #6]
 8012b70:	e015      	b.n	8012b9e <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8012b72:	2399      	movs	r3, #153	; 0x99
 8012b74:	80fb      	strh	r3, [r7, #6]
 8012b76:	e012      	b.n	8012b9e <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8012b78:	2381      	movs	r3, #129	; 0x81
 8012b7a:	80fb      	strh	r3, [r7, #6]
 8012b7c:	e00f      	b.n	8012b9e <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8012b7e:	239a      	movs	r3, #154	; 0x9a
 8012b80:	80fb      	strh	r3, [r7, #6]
 8012b82:	e00c      	b.n	8012b9e <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8012b84:	2384      	movs	r3, #132	; 0x84
 8012b86:	80fb      	strh	r3, [r7, #6]
 8012b88:	e009      	b.n	8012b9e <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8012b8a:	238e      	movs	r3, #142	; 0x8e
 8012b8c:	80fb      	strh	r3, [r7, #6]
 8012b8e:	e006      	b.n	8012b9e <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8012b90:	23e6      	movs	r3, #230	; 0xe6
 8012b92:	80fb      	strh	r3, [r7, #6]
 8012b94:	e003      	b.n	8012b9e <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8012b96:	23f8      	movs	r3, #248	; 0xf8
 8012b98:	80fb      	strh	r3, [r7, #6]
 8012b9a:	bf00      	nop
 8012b9c:	e04c      	b.n	8012c38 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8012b9e:	e04b      	b.n	8012c38 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8012ba0:	4b49      	ldr	r3, [pc, #292]	; (8012cc8 <_UG_GetCharData+0x284>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ba6:	8a7a      	ldrh	r2, [r7, #18]
 8012ba8:	0052      	lsls	r2, r2, #1
 8012baa:	4413      	add	r3, r2
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7ff fa87 	bl	80120c0 <ptr_8to16>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8012bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	da06      	bge.n	8012bcc <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8012bbe:	89fb      	ldrh	r3, [r7, #14]
 8012bc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012bc4:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	747b      	strb	r3, [r7, #17]
 8012bca:	e032      	b.n	8012c32 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8012bcc:	7c7b      	ldrb	r3, [r7, #17]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d021      	beq.n	8012c16 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8012bd2:	88fa      	ldrh	r2, [r7, #6]
 8012bd4:	8afb      	ldrh	r3, [r7, #22]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d30d      	bcc.n	8012bf6 <_UG_GetCharData+0x1b2>
 8012bda:	88fa      	ldrh	r2, [r7, #6]
 8012bdc:	89fb      	ldrh	r3, [r7, #14]
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d809      	bhi.n	8012bf6 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8012be2:	88fa      	ldrh	r2, [r7, #6]
 8012be4:	8afb      	ldrh	r3, [r7, #22]
 8012be6:	1ad3      	subs	r3, r2, r3
 8012be8:	b29a      	uxth	r2, r3
 8012bea:	8abb      	ldrh	r3, [r7, #20]
 8012bec:	4413      	add	r3, r2
 8012bee:	82bb      	strh	r3, [r7, #20]
        found=1;
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	743b      	strb	r3, [r7, #16]
        break;
 8012bf4:	e02a      	b.n	8012c4c <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8012bf6:	88fa      	ldrh	r2, [r7, #6]
 8012bf8:	8afb      	ldrh	r3, [r7, #22]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d323      	bcc.n	8012c46 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8012bfe:	89fa      	ldrh	r2, [r7, #14]
 8012c00:	8afb      	ldrh	r3, [r7, #22]
 8012c02:	1ad3      	subs	r3, r2, r3
 8012c04:	b29a      	uxth	r2, r3
 8012c06:	8abb      	ldrh	r3, [r7, #20]
 8012c08:	4413      	add	r3, r2
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	82bb      	strh	r3, [r7, #20]
      range=0;
 8012c10:	2300      	movs	r3, #0
 8012c12:	747b      	strb	r3, [r7, #17]
 8012c14:	e00d      	b.n	8012c32 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8012c16:	88fa      	ldrh	r2, [r7, #6]
 8012c18:	89fb      	ldrh	r3, [r7, #14]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d102      	bne.n	8012c24 <_UG_GetCharData+0x1e0>
      {
        found=1;
 8012c1e:	2301      	movs	r3, #1
 8012c20:	743b      	strb	r3, [r7, #16]
        break;
 8012c22:	e013      	b.n	8012c4c <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8012c24:	88fa      	ldrh	r2, [r7, #6]
 8012c26:	89fb      	ldrh	r3, [r7, #14]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d30e      	bcc.n	8012c4a <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8012c2c:	8abb      	ldrh	r3, [r7, #20]
 8012c2e:	3301      	adds	r3, #1
 8012c30:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8012c32:	8a7b      	ldrh	r3, [r7, #18]
 8012c34:	3301      	adds	r3, #1
 8012c36:	827b      	strh	r3, [r7, #18]
 8012c38:	4b23      	ldr	r3, [pc, #140]	; (8012cc8 <_UG_GetCharData+0x284>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8012c3e:	8a7a      	ldrh	r2, [r7, #18]
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d3ad      	bcc.n	8012ba0 <_UG_GetCharData+0x15c>
 8012c44:	e002      	b.n	8012c4c <_UG_GetCharData+0x208>
        break;
 8012c46:	bf00      	nop
 8012c48:	e000      	b.n	8012c4c <_UG_GetCharData+0x208>
        break;
 8012c4a:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8012c4c:	7c3b      	ldrb	r3, [r7, #16]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d034      	beq.n	8012cbc <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8012c52:	4b1d      	ldr	r3, [pc, #116]	; (8012cc8 <_UG_GetCharData+0x284>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c58:	4a1c      	ldr	r2, [pc, #112]	; (8012ccc <_UG_GetCharData+0x288>)
 8012c5a:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8012c5c:	4a1c      	ldr	r2, [pc, #112]	; (8012cd0 <_UG_GetCharData+0x28c>)
 8012c5e:	88fb      	ldrh	r3, [r7, #6]
 8012c60:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8012c62:	4b19      	ldr	r3, [pc, #100]	; (8012cc8 <_UG_GetCharData+0x284>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c68:	8aba      	ldrh	r2, [r7, #20]
 8012c6a:	4917      	ldr	r1, [pc, #92]	; (8012cc8 <_UG_GetCharData+0x284>)
 8012c6c:	6809      	ldr	r1, [r1, #0]
 8012c6e:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8012c70:	fb01 f202 	mul.w	r2, r1, r2
 8012c74:	4413      	add	r3, r2
 8012c76:	4a17      	ldr	r2, [pc, #92]	; (8012cd4 <_UG_GetCharData+0x290>)
 8012c78:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8012c7a:	4b13      	ldr	r3, [pc, #76]	; (8012cc8 <_UG_GetCharData+0x284>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d009      	beq.n	8012c98 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8012c84:	4b10      	ldr	r3, [pc, #64]	; (8012cc8 <_UG_GetCharData+0x284>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c8a:	8abb      	ldrh	r3, [r7, #20]
 8012c8c:	4413      	add	r3, r2
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	b21a      	sxth	r2, r3
 8012c92:	4b11      	ldr	r3, [pc, #68]	; (8012cd8 <_UG_GetCharData+0x294>)
 8012c94:	801a      	strh	r2, [r3, #0]
 8012c96:	e006      	b.n	8012ca6 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8012c98:	4b0b      	ldr	r3, [pc, #44]	; (8012cc8 <_UG_GetCharData+0x284>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012ca0:	b21a      	sxth	r2, r3
 8012ca2:	4b0d      	ldr	r3, [pc, #52]	; (8012cd8 <_UG_GetCharData+0x294>)
 8012ca4:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d003      	beq.n	8012cb4 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8012cac:	4b09      	ldr	r3, [pc, #36]	; (8012cd4 <_UG_GetCharData+0x290>)
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8012cb4:	4b08      	ldr	r3, [pc, #32]	; (8012cd8 <_UG_GetCharData+0x294>)
 8012cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012cba:	e001      	b.n	8012cc0 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8012cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3718      	adds	r7, #24
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	200023c0 	.word	0x200023c0
 8012ccc:	200023c4 	.word	0x200023c4
 8012cd0:	200023c8 	.word	0x200023c8
 8012cd4:	200023cc 	.word	0x200023cc
 8012cd8:	200023d0 	.word	0x200023d0

08012cdc <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8012cdc:	b590      	push	{r4, r7, lr}
 8012cde:	b083      	sub	sp, #12
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8012ce4:	4b3d      	ldr	r3, [pc, #244]	; (8012ddc <_UG_FontSelect+0x100>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012cea:	687a      	ldr	r2, [r7, #4]
 8012cec:	429a      	cmp	r2, r3
 8012cee:	d070      	beq.n	8012dd2 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8012cf0:	4b3a      	ldr	r3, [pc, #232]	; (8012ddc <_UG_FontSelect+0x100>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	781a      	ldrb	r2, [r3, #0]
 8012cfc:	4b37      	ldr	r3, [pc, #220]	; (8012ddc <_UG_FontSelect+0x100>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012d04:	b2d2      	uxtb	r2, r2
 8012d06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	1c5a      	adds	r2, r3, #1
 8012d0e:	607a      	str	r2, [r7, #4]
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	b25b      	sxtb	r3, r3
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	da01      	bge.n	8012d1c <_UG_FontSelect+0x40>
 8012d18:	2201      	movs	r2, #1
 8012d1a:	e000      	b.n	8012d1e <_UG_FontSelect+0x42>
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	4b2f      	ldr	r3, [pc, #188]	; (8012ddc <_UG_FontSelect+0x100>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	b2d2      	uxtb	r2, r2
 8012d24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	1c5a      	adds	r2, r3, #1
 8012d2c:	607a      	str	r2, [r7, #4]
 8012d2e:	4a2b      	ldr	r2, [pc, #172]	; (8012ddc <_UG_FontSelect+0x100>)
 8012d30:	6812      	ldr	r2, [r2, #0]
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	1c5a      	adds	r2, r3, #1
 8012d3c:	607a      	str	r2, [r7, #4]
 8012d3e:	4a27      	ldr	r2, [pc, #156]	; (8012ddc <_UG_FontSelect+0x100>)
 8012d40:	6812      	ldr	r2, [r2, #0]
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8012d48:	4b24      	ldr	r3, [pc, #144]	; (8012ddc <_UG_FontSelect+0x100>)
 8012d4a:	681c      	ldr	r4, [r3, #0]
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f7ff f9b7 	bl	80120c0 <ptr_8to16>
 8012d52:	4603      	mov	r3, r0
 8012d54:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	3302      	adds	r3, #2
 8012d5a:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8012d5c:	4b1f      	ldr	r3, [pc, #124]	; (8012ddc <_UG_FontSelect+0x100>)
 8012d5e:	681c      	ldr	r4, [r3, #0]
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f7ff f9ad 	bl	80120c0 <ptr_8to16>
 8012d66:	4603      	mov	r3, r0
 8012d68:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	3302      	adds	r3, #2
 8012d6e:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8012d70:	4b1a      	ldr	r3, [pc, #104]	; (8012ddc <_UG_FontSelect+0x100>)
 8012d72:	681c      	ldr	r4, [r3, #0]
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f7ff f9a3 	bl	80120c0 <ptr_8to16>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	3302      	adds	r3, #2
 8012d82:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	1c5a      	adds	r2, r3, #1
 8012d88:	607a      	str	r2, [r7, #4]
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d00b      	beq.n	8012da8 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8012d90:	4b12      	ldr	r3, [pc, #72]	; (8012ddc <_UG_FontSelect+0x100>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	687a      	ldr	r2, [r7, #4]
 8012d96:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8012d98:	4b10      	ldr	r3, [pc, #64]	; (8012ddc <_UG_FontSelect+0x100>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d9e:	461a      	mov	r2, r3
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	4413      	add	r3, r2
 8012da4:	607b      	str	r3, [r7, #4]
 8012da6:	e003      	b.n	8012db0 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8012da8:	4b0c      	ldr	r3, [pc, #48]	; (8012ddc <_UG_FontSelect+0x100>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	2200      	movs	r2, #0
 8012dae:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8012db0:	4b0a      	ldr	r3, [pc, #40]	; (8012ddc <_UG_FontSelect+0x100>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	687a      	ldr	r2, [r7, #4]
 8012db6:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8012db8:	4b08      	ldr	r3, [pc, #32]	; (8012ddc <_UG_FontSelect+0x100>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8012dbe:	005b      	lsls	r3, r3, #1
 8012dc0:	461a      	mov	r2, r3
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8012dc8:	4b04      	ldr	r3, [pc, #16]	; (8012ddc <_UG_FontSelect+0x100>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	641a      	str	r2, [r3, #64]	; 0x40
 8012dd0:	e000      	b.n	8012dd4 <_UG_FontSelect+0xf8>
    return;
 8012dd2:	bf00      	nop
}
 8012dd4:	370c      	adds	r7, #12
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd90      	pop	{r4, r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	200023c0 	.word	0x200023c0

08012de0 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8012de0:	b5b0      	push	{r4, r5, r7, lr}
 8012de2:	b08c      	sub	sp, #48	; 0x30
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	4604      	mov	r4, r0
 8012de8:	4608      	mov	r0, r1
 8012dea:	4611      	mov	r1, r2
 8012dec:	461a      	mov	r2, r3
 8012dee:	4623      	mov	r3, r4
 8012df0:	80fb      	strh	r3, [r7, #6]
 8012df2:	4603      	mov	r3, r0
 8012df4:	80bb      	strh	r3, [r7, #4]
 8012df6:	460b      	mov	r3, r1
 8012df8:	807b      	strh	r3, [r7, #2]
 8012dfa:	4613      	mov	r3, r2
 8012dfc:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012e02:	2300      	movs	r3, #0
 8012e04:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012e06:	2300      	movs	r3, #0
 8012e08:	847b      	strh	r3, [r7, #34]	; 0x22
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8012e0e:	4b8c      	ldr	r3, [pc, #560]	; (8013040 <_UG_PutChar+0x260>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012e16:	75fb      	strb	r3, [r7, #23]
 8012e18:	4b89      	ldr	r3, [pc, #548]	; (8013040 <_UG_PutChar+0x260>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012e20:	f003 0302 	and.w	r3, r3, #2
 8012e24:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8012e26:	2300      	movs	r3, #0
 8012e28:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8012e2a:	f107 0208 	add.w	r2, r7, #8
 8012e2e:	88fb      	ldrh	r3, [r7, #6]
 8012e30:	4611      	mov	r1, r2
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7ff fe06 	bl	8012a44 <_UG_GetCharData>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8012e3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e44:	d102      	bne.n	8012e4c <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8012e46:	f04f 33ff 	mov.w	r3, #4294967295
 8012e4a:	e226      	b.n	801329a <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8012e4c:	4b7c      	ldr	r3, [pc, #496]	; (8013040 <_UG_PutChar+0x260>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012e54:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8012e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d101      	bne.n	8012e60 <_UG_PutChar+0x80>
     return 0;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	e21c      	b.n	801329a <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8012e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e62:	08db      	lsrs	r3, r3, #3
 8012e64:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8012e66:	4b76      	ldr	r3, [pc, #472]	; (8013040 <_UG_PutChar+0x260>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012e6e:	f003 0307 	and.w	r3, r3, #7
 8012e72:	b2db      	uxtb	r3, r3
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d002      	beq.n	8012e7e <_UG_PutChar+0x9e>
 8012e78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8012e7e:	7dbb      	ldrb	r3, [r7, #22]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d01d      	beq.n	8012ec0 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8012e84:	4b6e      	ldr	r3, [pc, #440]	; (8013040 <_UG_PutChar+0x260>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e8a:	461d      	mov	r5, r3
 8012e8c:	88ba      	ldrh	r2, [r7, #4]
 8012e8e:	8abb      	ldrh	r3, [r7, #20]
 8012e90:	4413      	add	r3, r2
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	3b01      	subs	r3, #1
 8012e96:	b29b      	uxth	r3, r3
 8012e98:	b21c      	sxth	r4, r3
 8012e9a:	4b69      	ldr	r3, [pc, #420]	; (8013040 <_UG_PutChar+0x260>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012ea2:	b29a      	uxth	r2, r3
 8012ea4:	887b      	ldrh	r3, [r7, #2]
 8012ea6:	4413      	add	r3, r2
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	3b01      	subs	r3, #1
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	b21b      	sxth	r3, r3
 8012eb0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012eb4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8012eb8:	4622      	mov	r2, r4
 8012eba:	47a8      	blx	r5
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8012ec0:	4b5f      	ldr	r3, [pc, #380]	; (8013040 <_UG_PutChar+0x260>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	f040 8172 	bne.w	80131b2 <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8012ece:	2300      	movs	r3, #0
 8012ed0:	853b      	strh	r3, [r7, #40]	; 0x28
 8012ed2:	e0ec      	b.n	80130ae <_UG_PutChar+0x2ce>
     {
       c=0;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8012ed8:	2300      	movs	r3, #0
 8012eda:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012edc:	e0df      	b.n	801309e <_UG_PutChar+0x2be>
       {
         b = *data++;
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	1c5a      	adds	r2, r3, #1
 8012ee2:	60ba      	str	r2, [r7, #8]
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8012ee8:	2300      	movs	r3, #0
 8012eea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012eec:	e0ca      	b.n	8013084 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8012eee:	7f7b      	ldrb	r3, [r7, #29]
 8012ef0:	f003 0301 	and.w	r3, r3, #1
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d033      	beq.n	8012f60 <_UG_PutChar+0x180>
           {
             if(driver)
 8012ef8:	7dbb      	ldrb	r3, [r7, #22]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d01f      	beq.n	8012f3e <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8012efe:	8c3b      	ldrh	r3, [r7, #32]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d00a      	beq.n	8012f1a <_UG_PutChar+0x13a>
 8012f04:	7dfb      	ldrb	r3, [r7, #23]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d107      	bne.n	8012f1a <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8012f0a:	8c3a      	ldrh	r2, [r7, #32]
 8012f0c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8012f10:	69bb      	ldr	r3, [r7, #24]
 8012f12:	4610      	mov	r0, r2
 8012f14:	4798      	blx	r3
                 bpixels=0;
 8012f16:	2300      	movs	r3, #0
 8012f18:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8012f1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d10a      	bne.n	8012f36 <_UG_PutChar+0x156>
 8012f20:	7dfb      	ldrb	r3, [r7, #23]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d007      	beq.n	8012f36 <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8012f26:	88ba      	ldrh	r2, [r7, #4]
 8012f28:	8bfb      	ldrh	r3, [r7, #30]
 8012f2a:	4413      	add	r3, r2
 8012f2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8012f2e:	887a      	ldrh	r2, [r7, #2]
 8012f30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012f32:	4413      	add	r3, r2
 8012f34:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8012f36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f38:	3301      	adds	r3, #1
 8012f3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8012f3c:	e096      	b.n	801306c <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8012f3e:	4b40      	ldr	r3, [pc, #256]	; (8013040 <_UG_PutChar+0x260>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	685b      	ldr	r3, [r3, #4]
 8012f46:	88b9      	ldrh	r1, [r7, #4]
 8012f48:	8bfa      	ldrh	r2, [r7, #30]
 8012f4a:	440a      	add	r2, r1
 8012f4c:	b292      	uxth	r2, r2
 8012f4e:	b210      	sxth	r0, r2
 8012f50:	8879      	ldrh	r1, [r7, #2]
 8012f52:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012f54:	440a      	add	r2, r1
 8012f56:	b292      	uxth	r2, r2
 8012f58:	b211      	sxth	r1, r2
 8012f5a:	883a      	ldrh	r2, [r7, #0]
 8012f5c:	4798      	blx	r3
 8012f5e:	e085      	b.n	801306c <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8012f60:	7dbb      	ldrb	r3, [r7, #22]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d06e      	beq.n	8013044 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8012f66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d064      	beq.n	8013036 <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8012f6c:	7dfb      	ldrb	r3, [r7, #23]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d15e      	bne.n	8013030 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8012f72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f74:	8839      	ldrh	r1, [r7, #0]
 8012f76:	69bb      	ldr	r3, [r7, #24]
 8012f78:	4610      	mov	r0, r2
 8012f7a:	4798      	blx	r3
                   fpixels=0;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8012f80:	e059      	b.n	8013036 <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8012f82:	88ba      	ldrh	r2, [r7, #4]
 8012f84:	8abb      	ldrh	r3, [r7, #20]
 8012f86:	4413      	add	r3, r2
 8012f88:	b29a      	uxth	r2, r3
 8012f8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012f8c:	1ad3      	subs	r3, r2, r3
 8012f8e:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8012f90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d003      	beq.n	8012fa2 <_UG_PutChar+0x1c2>
 8012f9a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f9c:	89fb      	ldrh	r3, [r7, #14]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d224      	bcs.n	8012fec <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8012fa2:	4b27      	ldr	r3, [pc, #156]	; (8013040 <_UG_PutChar+0x260>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fa8:	461d      	mov	r5, r3
 8012faa:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012fae:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012fb2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012fb4:	89fb      	ldrh	r3, [r7, #14]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	3b01      	subs	r3, #1
 8012fbc:	b29b      	uxth	r3, r3
 8012fbe:	b21c      	sxth	r4, r3
 8012fc0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012fc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8012fca:	b29a      	uxth	r2, r3
 8012fcc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012fce:	4413      	add	r3, r2
 8012fd0:	b29b      	uxth	r3, r3
 8012fd2:	b21b      	sxth	r3, r3
 8012fd4:	4622      	mov	r2, r4
 8012fd6:	47a8      	blx	r5
 8012fd8:	4603      	mov	r3, r0
 8012fda:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012fdc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fde:	8839      	ldrh	r1, [r7, #0]
 8012fe0:	69bb      	ldr	r3, [r7, #24]
 8012fe2:	4610      	mov	r0, r2
 8012fe4:	4798      	blx	r3
                       fpixels=0;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	847b      	strh	r3, [r7, #34]	; 0x22
 8012fea:	e021      	b.n	8013030 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8012fec:	4b14      	ldr	r3, [pc, #80]	; (8013040 <_UG_PutChar+0x260>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ff2:	461c      	mov	r4, r3
 8012ff4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012ff8:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012ffc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012ffe:	89fb      	ldrh	r3, [r7, #14]
 8013000:	4413      	add	r3, r2
 8013002:	b29b      	uxth	r3, r3
 8013004:	3b01      	subs	r3, #1
 8013006:	b29b      	uxth	r3, r3
 8013008:	b21a      	sxth	r2, r3
 801300a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801300e:	47a0      	blx	r4
 8013010:	4603      	mov	r3, r0
 8013012:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8013014:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013016:	8839      	ldrh	r1, [r7, #0]
 8013018:	69bb      	ldr	r3, [r7, #24]
 801301a:	4610      	mov	r0, r2
 801301c:	4798      	blx	r3
                       fpixels -= width;
 801301e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013020:	89fb      	ldrh	r3, [r7, #14]
 8013022:	1ad3      	subs	r3, r2, r3
 8013024:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8013026:	88bb      	ldrh	r3, [r7, #4]
 8013028:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 801302a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801302c:	3301      	adds	r3, #1
 801302e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8013030:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013032:	2b00      	cmp	r3, #0
 8013034:	d1a5      	bne.n	8012f82 <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8013036:	8c3b      	ldrh	r3, [r7, #32]
 8013038:	3301      	adds	r3, #1
 801303a:	843b      	strh	r3, [r7, #32]
 801303c:	e016      	b.n	801306c <_UG_PutChar+0x28c>
 801303e:	bf00      	nop
 8013040:	200023c0 	.word	0x200023c0
             }
             else if(!trans)                           // Not accelerated output
 8013044:	7dfb      	ldrb	r3, [r7, #23]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d110      	bne.n	801306c <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 801304a:	4b96      	ldr	r3, [pc, #600]	; (80132a4 <_UG_PutChar+0x4c4>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	685b      	ldr	r3, [r3, #4]
 8013052:	88b9      	ldrh	r1, [r7, #4]
 8013054:	8bfa      	ldrh	r2, [r7, #30]
 8013056:	440a      	add	r2, r1
 8013058:	b292      	uxth	r2, r2
 801305a:	b210      	sxth	r0, r2
 801305c:	8879      	ldrh	r1, [r7, #2]
 801305e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013060:	440a      	add	r2, r1
 8013062:	b292      	uxth	r2, r2
 8013064:	b211      	sxth	r1, r2
 8013066:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801306a:	4798      	blx	r3
             }
           }
           b >>= 1;
 801306c:	7f7b      	ldrb	r3, [r7, #29]
 801306e:	085b      	lsrs	r3, r3, #1
 8013070:	777b      	strb	r3, [r7, #29]
           c++;
 8013072:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013076:	b29b      	uxth	r3, r3
 8013078:	3301      	adds	r3, #1
 801307a:	b29b      	uxth	r3, r3
 801307c:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 801307e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013080:	3301      	adds	r3, #1
 8013082:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013086:	2b07      	cmp	r3, #7
 8013088:	d806      	bhi.n	8013098 <_UG_PutChar+0x2b8>
 801308a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801308e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013092:	429a      	cmp	r2, r3
 8013094:	f6ff af2b 	blt.w	8012eee <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 8013098:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801309a:	3301      	adds	r3, #1
 801309c:	857b      	strh	r3, [r7, #42]	; 0x2a
 801309e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80130a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80130a2:	429a      	cmp	r2, r3
 80130a4:	f4ff af1b 	bcc.w	8012ede <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80130a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80130aa:	3301      	adds	r3, #1
 80130ac:	853b      	strh	r3, [r7, #40]	; 0x28
 80130ae:	4b7d      	ldr	r3, [pc, #500]	; (80132a4 <_UG_PutChar+0x4c4>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80130b6:	b29b      	uxth	r3, r3
 80130b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80130ba:	429a      	cmp	r2, r3
 80130bc:	f4ff af0a 	bcc.w	8012ed4 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 80130c0:	7dbb      	ldrb	r3, [r7, #22]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	f000 80e7 	beq.w	8013296 <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 80130c8:	8c3b      	ldrh	r3, [r7, #32]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d009      	beq.n	80130e2 <_UG_PutChar+0x302>
 80130ce:	7dfb      	ldrb	r3, [r7, #23]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d106      	bne.n	80130e2 <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 80130d4:	8c3a      	ldrh	r2, [r7, #32]
 80130d6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80130da:	69bb      	ldr	r3, [r7, #24]
 80130dc:	4610      	mov	r0, r2
 80130de:	4798      	blx	r3
 80130e0:	e0d9      	b.n	8013296 <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 80130e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	f000 80d6 	beq.w	8013296 <_UG_PutChar+0x4b6>
       {
         if(!trans)
 80130ea:	7dfb      	ldrb	r3, [r7, #23]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d15c      	bne.n	80131aa <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 80130f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80130f2:	8839      	ldrh	r1, [r7, #0]
 80130f4:	69bb      	ldr	r3, [r7, #24]
 80130f6:	4610      	mov	r0, r2
 80130f8:	4798      	blx	r3
 80130fa:	e0cc      	b.n	8013296 <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 80130fc:	88ba      	ldrh	r2, [r7, #4]
 80130fe:	8abb      	ldrh	r3, [r7, #20]
 8013100:	4413      	add	r3, r2
 8013102:	b29a      	uxth	r2, r3
 8013104:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013106:	1ad3      	subs	r3, r2, r3
 8013108:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 801310a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801310c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013110:	429a      	cmp	r2, r3
 8013112:	d003      	beq.n	801311c <_UG_PutChar+0x33c>
 8013114:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013116:	8a3b      	ldrh	r3, [r7, #16]
 8013118:	429a      	cmp	r2, r3
 801311a:	d224      	bcs.n	8013166 <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 801311c:	4b61      	ldr	r3, [pc, #388]	; (80132a4 <_UG_PutChar+0x4c4>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013122:	461d      	mov	r5, r3
 8013124:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013128:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801312c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801312e:	8a3b      	ldrh	r3, [r7, #16]
 8013130:	4413      	add	r3, r2
 8013132:	b29b      	uxth	r3, r3
 8013134:	3b01      	subs	r3, #1
 8013136:	b29b      	uxth	r3, r3
 8013138:	b21c      	sxth	r4, r3
 801313a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801313c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013140:	fb92 f3f3 	sdiv	r3, r2, r3
 8013144:	b29a      	uxth	r2, r3
 8013146:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013148:	4413      	add	r3, r2
 801314a:	b29b      	uxth	r3, r3
 801314c:	b21b      	sxth	r3, r3
 801314e:	4622      	mov	r2, r4
 8013150:	47a8      	blx	r5
 8013152:	4603      	mov	r3, r0
 8013154:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8013156:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013158:	8839      	ldrh	r1, [r7, #0]
 801315a:	69bb      	ldr	r3, [r7, #24]
 801315c:	4610      	mov	r0, r2
 801315e:	4798      	blx	r3
               fpixels=0;
 8013160:	2300      	movs	r3, #0
 8013162:	847b      	strh	r3, [r7, #34]	; 0x22
 8013164:	e021      	b.n	80131aa <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8013166:	4b4f      	ldr	r3, [pc, #316]	; (80132a4 <_UG_PutChar+0x4c4>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801316c:	461c      	mov	r4, r3
 801316e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013172:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013176:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013178:	8a3b      	ldrh	r3, [r7, #16]
 801317a:	4413      	add	r3, r2
 801317c:	b29b      	uxth	r3, r3
 801317e:	3b01      	subs	r3, #1
 8013180:	b29b      	uxth	r3, r3
 8013182:	b21a      	sxth	r2, r3
 8013184:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8013188:	47a0      	blx	r4
 801318a:	4603      	mov	r3, r0
 801318c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 801318e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013190:	8839      	ldrh	r1, [r7, #0]
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	4610      	mov	r0, r2
 8013196:	4798      	blx	r3
               fpixels -= width;
 8013198:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801319a:	8a3b      	ldrh	r3, [r7, #16]
 801319c:	1ad3      	subs	r3, r2, r3
 801319e:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 80131a0:	88bb      	ldrh	r3, [r7, #4]
 80131a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 80131a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80131a6:	3301      	adds	r3, #1
 80131a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 80131aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d1a5      	bne.n	80130fc <_UG_PutChar+0x31c>
 80131b0:	e071      	b.n	8013296 <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 80131b2:	4b3c      	ldr	r3, [pc, #240]	; (80132a4 <_UG_PutChar+0x4c4>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80131ba:	2b01      	cmp	r3, #1
 80131bc:	d16b      	bne.n	8013296 <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80131be:	2300      	movs	r3, #0
 80131c0:	853b      	strh	r3, [r7, #40]	; 0x28
 80131c2:	e060      	b.n	8013286 <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 80131c4:	2300      	movs	r3, #0
 80131c6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80131c8:	e04a      	b.n	8013260 <_UG_PutChar+0x480>
       {
         b = *data++;
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	1c5a      	adds	r2, r3, #1
 80131ce:	60ba      	str	r2, [r7, #8]
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80131d4:	883b      	ldrh	r3, [r7, #0]
 80131d6:	b2db      	uxtb	r3, r3
 80131d8:	7f7a      	ldrb	r2, [r7, #29]
 80131da:	fb03 f202 	mul.w	r2, r3, r2
 80131de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80131e2:	b2db      	uxtb	r3, r3
 80131e4:	7f79      	ldrb	r1, [r7, #29]
 80131e6:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80131ea:	fb01 f303 	mul.w	r3, r1, r3
 80131ee:	4413      	add	r3, r2
 80131f0:	121b      	asrs	r3, r3, #8
 80131f2:	b21b      	sxth	r3, r3
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80131f8:	883b      	ldrh	r3, [r7, #0]
 80131fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80131fe:	7f79      	ldrb	r1, [r7, #29]
 8013200:	fb03 f101 	mul.w	r1, r3, r1
 8013204:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013208:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801320c:	7f78      	ldrb	r0, [r7, #29]
 801320e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013212:	fb00 f303 	mul.w	r3, r0, r3
 8013216:	440b      	add	r3, r1
 8013218:	121b      	asrs	r3, r3, #8
 801321a:	b21b      	sxth	r3, r3
 801321c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013220:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8013222:	4313      	orrs	r3, r2
 8013224:	b21b      	sxth	r3, r3
 8013226:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8013228:	7dbb      	ldrb	r3, [r7, #22]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d005      	beq.n	801323a <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 801322e:	8a7a      	ldrh	r2, [r7, #18]
 8013230:	69bb      	ldr	r3, [r7, #24]
 8013232:	4611      	mov	r1, r2
 8013234:	2001      	movs	r0, #1
 8013236:	4798      	blx	r3
 8013238:	e00f      	b.n	801325a <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 801323a:	4b1a      	ldr	r3, [pc, #104]	; (80132a4 <_UG_PutChar+0x4c4>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	685b      	ldr	r3, [r3, #4]
 8013242:	88b9      	ldrh	r1, [r7, #4]
 8013244:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013246:	440a      	add	r2, r1
 8013248:	b292      	uxth	r2, r2
 801324a:	b210      	sxth	r0, r2
 801324c:	8879      	ldrh	r1, [r7, #2]
 801324e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013250:	440a      	add	r2, r1
 8013252:	b292      	uxth	r2, r2
 8013254:	b211      	sxth	r1, r2
 8013256:	8a7a      	ldrh	r2, [r7, #18]
 8013258:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 801325a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801325c:	3301      	adds	r3, #1
 801325e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013260:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013262:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013266:	429a      	cmp	r2, r3
 8013268:	dbaf      	blt.n	80131ca <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	4a0d      	ldr	r2, [pc, #52]	; (80132a4 <_UG_PutChar+0x4c4>)
 801326e:	6812      	ldr	r2, [r2, #0]
 8013270:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8013274:	4611      	mov	r1, r2
 8013276:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801327a:	1a8a      	subs	r2, r1, r2
 801327c:	4413      	add	r3, r2
 801327e:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013280:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013282:	3301      	adds	r3, #1
 8013284:	853b      	strh	r3, [r7, #40]	; 0x28
 8013286:	4b07      	ldr	r3, [pc, #28]	; (80132a4 <_UG_PutChar+0x4c4>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801328e:	b29b      	uxth	r3, r3
 8013290:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013292:	429a      	cmp	r2, r3
 8013294:	d396      	bcc.n	80131c4 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 8013296:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801329a:	4618      	mov	r0, r3
 801329c:	3730      	adds	r7, #48	; 0x30
 801329e:	46bd      	mov	sp, r7
 80132a0:	bdb0      	pop	{r4, r5, r7, pc}
 80132a2:	bf00      	nop
 80132a4:	200023c0 	.word	0x200023c0

080132a8 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 80132a8:	b480      	push	{r7}
 80132aa:	b089      	sub	sp, #36	; 0x24
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 80132b0:	4b57      	ldr	r3, [pc, #348]	; (8013410 <_UG_ProcessTouchData+0x168>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	88db      	ldrh	r3, [r3, #6]
 80132b6:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 80132b8:	4b55      	ldr	r3, [pc, #340]	; (8013410 <_UG_ProcessTouchData+0x168>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	891b      	ldrh	r3, [r3, #8]
 80132be:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 80132c0:	4b53      	ldr	r3, [pc, #332]	; (8013410 <_UG_ProcessTouchData+0x168>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	791b      	ldrb	r3, [r3, #4]
 80132c6:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80132ce:	2300      	movs	r3, #0
 80132d0:	83fb      	strh	r3, [r7, #30]
 80132d2:	e090      	b.n	80133f6 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	685a      	ldr	r2, [r3, #4]
 80132d8:	8bfb      	ldrh	r3, [r7, #30]
 80132da:	015b      	lsls	r3, r3, #5
 80132dc:	4413      	add	r3, r2
 80132de:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80132e0:	693b      	ldr	r3, [r7, #16]
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	785b      	ldrb	r3, [r3, #1]
 80132ea:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80132ec:	7bfb      	ldrb	r3, [r7, #15]
 80132ee:	f003 0301 	and.w	r3, r3, #1
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d179      	bne.n	80133ea <_UG_ProcessTouchData+0x142>
 80132f6:	7bfb      	ldrb	r3, [r7, #15]
 80132f8:	f003 0302 	and.w	r3, r3, #2
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d074      	beq.n	80133ea <_UG_ProcessTouchData+0x142>
 8013300:	7bfb      	ldrb	r3, [r7, #15]
 8013302:	f003 0308 	and.w	r3, r3, #8
 8013306:	2b00      	cmp	r3, #0
 8013308:	d06f      	beq.n	80133ea <_UG_ProcessTouchData+0x142>
 801330a:	7bfb      	ldrb	r3, [r7, #15]
 801330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013310:	2b00      	cmp	r3, #0
 8013312:	d16a      	bne.n	80133ea <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8013314:	7dfb      	ldrb	r3, [r7, #23]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d047      	beq.n	80133aa <_UG_ProcessTouchData+0x102>
 801331a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013322:	d042      	beq.n	80133aa <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8013324:	7f7b      	ldrb	r3, [r7, #29]
 8013326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801332a:	2b00      	cmp	r3, #0
 801332c:	d107      	bne.n	801333e <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 801332e:	7f7b      	ldrb	r3, [r7, #29]
 8013330:	f043 0305 	orr.w	r3, r3, #5
 8013334:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8013336:	7f7b      	ldrb	r3, [r7, #29]
 8013338:	f023 0318 	bic.w	r3, r3, #24
 801333c:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 801333e:	7f7b      	ldrb	r3, [r7, #29]
 8013340:	f023 0320 	bic.w	r3, r3, #32
 8013344:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801334c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013350:	429a      	cmp	r2, r3
 8013352:	db25      	blt.n	80133a0 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801335a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801335e:	429a      	cmp	r2, r3
 8013360:	dc1e      	bgt.n	80133a0 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013368:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801336c:	429a      	cmp	r2, r3
 801336e:	db17      	blt.n	80133a0 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8013370:	693b      	ldr	r3, [r7, #16]
 8013372:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013376:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801337a:	429a      	cmp	r2, r3
 801337c:	dc10      	bgt.n	80133a0 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 801337e:	7f7b      	ldrb	r3, [r7, #29]
 8013380:	f043 0320 	orr.w	r3, r3, #32
 8013384:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8013386:	7f7b      	ldrb	r3, [r7, #29]
 8013388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801338c:	2b00      	cmp	r3, #0
 801338e:	d107      	bne.n	80133a0 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8013390:	7f7b      	ldrb	r3, [r7, #29]
 8013392:	f023 0304 	bic.w	r3, r3, #4
 8013396:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8013398:	7f7b      	ldrb	r3, [r7, #29]
 801339a:	f043 0302 	orr.w	r3, r3, #2
 801339e:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 80133a0:	7f7b      	ldrb	r3, [r7, #29]
 80133a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133a6:	777b      	strb	r3, [r7, #29]
 80133a8:	e01f      	b.n	80133ea <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80133aa:	7f7b      	ldrb	r3, [r7, #29]
 80133ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d01a      	beq.n	80133ea <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 80133b4:	7f7b      	ldrb	r3, [r7, #29]
 80133b6:	f003 0320 	and.w	r3, r3, #32
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d004      	beq.n	80133c8 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 80133be:	7f7b      	ldrb	r3, [r7, #29]
 80133c0:	f043 0308 	orr.w	r3, r3, #8
 80133c4:	777b      	strb	r3, [r7, #29]
 80133c6:	e003      	b.n	80133d0 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 80133c8:	7f7b      	ldrb	r3, [r7, #29]
 80133ca:	f043 0310 	orr.w	r3, r3, #16
 80133ce:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80133d0:	7f7b      	ldrb	r3, [r7, #29]
 80133d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d003      	beq.n	80133e2 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 80133da:	7f7b      	ldrb	r3, [r7, #29]
 80133dc:	f043 0301 	orr.w	r3, r3, #1
 80133e0:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 80133e2:	7f7b      	ldrb	r3, [r7, #29]
 80133e4:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 80133e8:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	7f7a      	ldrb	r2, [r7, #29]
 80133ee:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 80133f0:	8bfb      	ldrh	r3, [r7, #30]
 80133f2:	3301      	adds	r3, #1
 80133f4:	83fb      	strh	r3, [r7, #30]
 80133f6:	8bfa      	ldrh	r2, [r7, #30]
 80133f8:	8abb      	ldrh	r3, [r7, #20]
 80133fa:	429a      	cmp	r2, r3
 80133fc:	f4ff af6a 	bcc.w	80132d4 <_UG_ProcessTouchData+0x2c>
   }
}
 8013400:	bf00      	nop
 8013402:	bf00      	nop
 8013404:	3724      	adds	r7, #36	; 0x24
 8013406:	46bd      	mov	sp, r7
 8013408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340c:	4770      	bx	lr
 801340e:	bf00      	nop
 8013410:	200023c0 	.word	0x200023c0

08013414 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b086      	sub	sp, #24
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8013422:	2300      	movs	r3, #0
 8013424:	82fb      	strh	r3, [r7, #22]
 8013426:	e035      	b.n	8013494 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	685a      	ldr	r2, [r3, #4]
 801342c:	8afb      	ldrh	r3, [r7, #22]
 801342e:	015b      	lsls	r3, r3, #5
 8013430:	4413      	add	r3, r2
 8013432:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8013434:	693b      	ldr	r3, [r7, #16]
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 801343a:	693b      	ldr	r3, [r7, #16]
 801343c:	785b      	ldrb	r3, [r3, #1]
 801343e:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8013440:	7bfb      	ldrb	r3, [r7, #15]
 8013442:	f003 0301 	and.w	r3, r3, #1
 8013446:	2b00      	cmp	r3, #0
 8013448:	d121      	bne.n	801348e <_UG_UpdateObjects+0x7a>
 801344a:	7bfb      	ldrb	r3, [r7, #15]
 801344c:	f003 0302 	and.w	r3, r3, #2
 8013450:	2b00      	cmp	r3, #0
 8013452:	d01c      	beq.n	801348e <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8013454:	7bfb      	ldrb	r3, [r7, #15]
 8013456:	f003 0320 	and.w	r3, r3, #32
 801345a:	2b00      	cmp	r3, #0
 801345c:	d004      	beq.n	8013468 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	685b      	ldr	r3, [r3, #4]
 8013462:	6939      	ldr	r1, [r7, #16]
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8013468:	7bfb      	ldrb	r3, [r7, #15]
 801346a:	f003 0308 	and.w	r3, r3, #8
 801346e:	2b00      	cmp	r3, #0
 8013470:	d00d      	beq.n	801348e <_UG_UpdateObjects+0x7a>
 8013472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013476:	2b00      	cmp	r3, #0
 8013478:	da09      	bge.n	801348e <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 801347a:	7bbb      	ldrb	r3, [r7, #14]
 801347c:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8013480:	2b00      	cmp	r3, #0
 8013482:	d004      	beq.n	801348e <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	6939      	ldr	r1, [r7, #16]
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 801348e:	8afb      	ldrh	r3, [r7, #22]
 8013490:	3301      	adds	r3, #1
 8013492:	82fb      	strh	r3, [r7, #22]
 8013494:	8afa      	ldrh	r2, [r7, #22]
 8013496:	8abb      	ldrh	r3, [r7, #20]
 8013498:	429a      	cmp	r2, r3
 801349a:	d3c5      	bcc.n	8013428 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 801349c:	bf00      	nop
 801349e:	bf00      	nop
 80134a0:	3718      	adds	r7, #24
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}
	...

080134a8 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b086      	sub	sp, #24
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 80134b0:	4b22      	ldr	r3, [pc, #136]	; (801353c <_UG_HandleEvents+0x94>)
 80134b2:	2200      	movs	r2, #0
 80134b4:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 80134b6:	4b21      	ldr	r3, [pc, #132]	; (801353c <_UG_HandleEvents+0x94>)
 80134b8:	2202      	movs	r2, #2
 80134ba:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80134c2:	2300      	movs	r3, #0
 80134c4:	82fb      	strh	r3, [r7, #22]
 80134c6:	e02f      	b.n	8013528 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	685a      	ldr	r2, [r3, #4]
 80134cc:	8afb      	ldrh	r3, [r7, #22]
 80134ce:	015b      	lsls	r3, r3, #5
 80134d0:	4413      	add	r3, r2
 80134d2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	781b      	ldrb	r3, [r3, #0]
 80134d8:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80134da:	7bfb      	ldrb	r3, [r7, #15]
 80134dc:	f003 0301 	and.w	r3, r3, #1
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d11e      	bne.n	8013522 <_UG_HandleEvents+0x7a>
 80134e4:	7bfb      	ldrb	r3, [r7, #15]
 80134e6:	f003 0302 	and.w	r3, r3, #2
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d019      	beq.n	8013522 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	7e9b      	ldrb	r3, [r3, #26]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d015      	beq.n	8013522 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80134f6:	4a11      	ldr	r2, [pc, #68]	; (801353c <_UG_HandleEvents+0x94>)
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 80134fc:	693b      	ldr	r3, [r7, #16]
 80134fe:	7e1a      	ldrb	r2, [r3, #24]
 8013500:	4b0e      	ldr	r3, [pc, #56]	; (801353c <_UG_HandleEvents+0x94>)
 8013502:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	7e5a      	ldrb	r2, [r3, #25]
 8013508:	4b0c      	ldr	r3, [pc, #48]	; (801353c <_UG_HandleEvents+0x94>)
 801350a:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	7e9a      	ldrb	r2, [r3, #26]
 8013510:	4b0a      	ldr	r3, [pc, #40]	; (801353c <_UG_HandleEvents+0x94>)
 8013512:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013518:	4808      	ldr	r0, [pc, #32]	; (801353c <_UG_HandleEvents+0x94>)
 801351a:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	2200      	movs	r2, #0
 8013520:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8013522:	8afb      	ldrh	r3, [r7, #22]
 8013524:	3301      	adds	r3, #1
 8013526:	82fb      	strh	r3, [r7, #22]
 8013528:	8afa      	ldrh	r2, [r7, #22]
 801352a:	8abb      	ldrh	r3, [r7, #20]
 801352c:	429a      	cmp	r2, r3
 801352e:	d3cb      	bcc.n	80134c8 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8013530:	bf00      	nop
 8013532:	bf00      	nop
 8013534:	3718      	adds	r7, #24
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	200023d4 	.word	0x200023d4

08013540 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8013540:	b590      	push	{r4, r7, lr}
 8013542:	b08f      	sub	sp, #60	; 0x3c
 8013544:	af02      	add	r7, sp, #8
 8013546:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	2b00      	cmp	r3, #0
 801354e:	f000 812c 	beq.w	80137aa <_UG_PutText+0x26a>
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	2b00      	cmp	r3, #0
 8013558:	f000 8127 	beq.w	80137aa <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	89db      	ldrh	r3, [r3, #14]
 8013560:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	895b      	ldrh	r3, [r3, #10]
 8013566:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	685b      	ldr	r3, [r3, #4]
 801356c:	3302      	adds	r3, #2
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8013572:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8013576:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801357a:	1ad2      	subs	r2, r2, r3
 801357c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013580:	429a      	cmp	r2, r3
 8013582:	f2c0 8114 	blt.w	80137ae <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	891b      	ldrh	r3, [r3, #8]
 801358a:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	899b      	ldrh	r3, [r3, #12]
 8013590:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	7d1b      	ldrb	r3, [r3, #20]
 8013596:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	8adb      	ldrh	r3, [r3, #22]
 801359c:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	8b1b      	ldrh	r3, [r3, #24]
 80135a2:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	60fb      	str	r3, [r7, #12]
   char* c = str;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7ff fb92 	bl	8012cdc <_UG_FontSelect>

   rc=1;
 80135b8:	2301      	movs	r3, #1
 80135ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80135c0:	4b80      	ldr	r3, [pc, #512]	; (80137c4 <_UG_PutText+0x284>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d107      	bne.n	80135dc <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 80135cc:	f107 0308 	add.w	r3, r7, #8
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7ff f9bf 	bl	8012954 <_UG_DecodeUTF8>
 80135d6:	4603      	mov	r3, r0
 80135d8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80135da:	e004      	b.n	80135e6 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	1c5a      	adds	r2, r3, #1
 80135e0:	60ba      	str	r2, [r7, #8]
 80135e2:	781b      	ldrb	r3, [r3, #0]
 80135e4:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 80135e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d006      	beq.n	80135fa <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 80135ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135ee:	2b0a      	cmp	r3, #10
 80135f0:	d1e6      	bne.n	80135c0 <_UG_PutText+0x80>
 80135f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80135f4:	3301      	adds	r3, #1
 80135f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80135f8:	e7e2      	b.n	80135c0 <_UG_PutText+0x80>
     if(!chr) break;
 80135fa:	bf00      	nop
   }

   yp = 0;
 80135fc:	2300      	movs	r3, #0
 80135fe:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8013600:	7e7b      	ldrb	r3, [r7, #25]
 8013602:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013606:	2b00      	cmp	r3, #0
 8013608:	d01f      	beq.n	801364a <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 801360a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801360c:	8c3b      	ldrh	r3, [r7, #32]
 801360e:	1ad3      	subs	r3, r2, r3
 8013610:	b29b      	uxth	r3, r3
 8013612:	3301      	adds	r3, #1
 8013614:	b29b      	uxth	r3, r3
 8013616:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8013618:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801361a:	8bfb      	ldrh	r3, [r7, #30]
 801361c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 801361e:	fb11 f303 	smulbb	r3, r1, r3
 8013622:	b29b      	uxth	r3, r3
 8013624:	1ad3      	subs	r3, r2, r3
 8013626:	b29b      	uxth	r3, r3
 8013628:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 801362a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801362c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801362e:	3b01      	subs	r3, #1
 8013630:	b299      	uxth	r1, r3
 8013632:	8abb      	ldrh	r3, [r7, #20]
 8013634:	fb11 f303 	smulbb	r3, r1, r3
 8013638:	b29b      	uxth	r3, r3
 801363a:	1ad3      	subs	r3, r2, r3
 801363c:	b29b      	uxth	r3, r3
 801363e:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8013640:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013644:	2b00      	cmp	r3, #0
 8013646:	f2c0 80b4 	blt.w	80137b2 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 801364a:	7e7b      	ldrb	r3, [r7, #25]
 801364c:	f003 0310 	and.w	r3, r3, #16
 8013650:	2b00      	cmp	r3, #0
 8013652:	d003      	beq.n	801365c <_UG_PutText+0x11c>
 8013654:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013658:	105b      	asrs	r3, r3, #1
 801365a:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 801365c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801365e:	8c3b      	ldrh	r3, [r7, #32]
 8013660:	4413      	add	r3, r2
 8013662:	b29b      	uxth	r3, r3
 8013664:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8013666:	2300      	movs	r3, #0
 8013668:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	60bb      	str	r3, [r7, #8]
      wl = 0;
 801366e:	2300      	movs	r3, #0
 8013670:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013672:	4b54      	ldr	r3, [pc, #336]	; (80137c4 <_UG_PutText+0x284>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801367a:	2b00      	cmp	r3, #0
 801367c:	d107      	bne.n	801368e <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 801367e:	f107 0308 	add.w	r3, r7, #8
 8013682:	4618      	mov	r0, r3
 8013684:	f7ff f966 	bl	8012954 <_UG_DecodeUTF8>
 8013688:	4603      	mov	r3, r0
 801368a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801368c:	e004      	b.n	8013698 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	1c5a      	adds	r2, r3, #1
 8013692:	60ba      	str	r2, [r7, #8]
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8013698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801369a:	2b00      	cmp	r3, #0
 801369c:	d01b      	beq.n	80136d6 <_UG_PutText+0x196>
 801369e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136a0:	2b0a      	cmp	r3, #10
 80136a2:	d018      	beq.n	80136d6 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 80136a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136a6:	2100      	movs	r1, #0
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7ff f9cb 	bl	8012a44 <_UG_GetCharData>
 80136ae:	4603      	mov	r3, r0
 80136b0:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 80136b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80136b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136ba:	d00a      	beq.n	80136d2 <_UG_PutText+0x192>
         sl++;
 80136bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80136be:	3301      	adds	r3, #1
 80136c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 80136c2:	8a7a      	ldrh	r2, [r7, #18]
 80136c4:	8afb      	ldrh	r3, [r7, #22]
 80136c6:	4413      	add	r3, r2
 80136c8:	b29a      	uxth	r2, r3
 80136ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80136cc:	4413      	add	r3, r2
 80136ce:	857b      	strh	r3, [r7, #42]	; 0x2a
 80136d0:	e7cf      	b.n	8013672 <_UG_PutText+0x132>
         if (w == -1){continue;}
 80136d2:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80136d4:	e7cd      	b.n	8013672 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 80136d6:	8afb      	ldrh	r3, [r7, #22]
 80136d8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80136da:	1ad3      	subs	r3, r2, r3
 80136dc:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 80136de:	8b7a      	ldrh	r2, [r7, #26]
 80136e0:	8bbb      	ldrh	r3, [r7, #28]
 80136e2:	1ad3      	subs	r3, r2, r3
 80136e4:	b29b      	uxth	r3, r3
 80136e6:	3301      	adds	r3, #1
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 80136ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80136ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80136f0:	1ad3      	subs	r3, r2, r3
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 80136f6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	db5b      	blt.n	80137b6 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 80136fe:	7e7b      	ldrb	r3, [r7, #25]
 8013700:	f003 0301 	and.w	r3, r3, #1
 8013704:	2b00      	cmp	r3, #0
 8013706:	d002      	beq.n	801370e <_UG_PutText+0x1ce>
 8013708:	2300      	movs	r3, #0
 801370a:	853b      	strh	r3, [r7, #40]	; 0x28
 801370c:	e008      	b.n	8013720 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 801370e:	7e7b      	ldrb	r3, [r7, #25]
 8013710:	f003 0302 	and.w	r3, r3, #2
 8013714:	2b00      	cmp	r3, #0
 8013716:	d003      	beq.n	8013720 <_UG_PutText+0x1e0>
 8013718:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801371c:	105b      	asrs	r3, r3, #1
 801371e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8013720:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013722:	8bbb      	ldrh	r3, [r7, #28]
 8013724:	4413      	add	r3, r2
 8013726:	b29b      	uxth	r3, r3
 8013728:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801372a:	4b26      	ldr	r3, [pc, #152]	; (80137c4 <_UG_PutText+0x284>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013732:	2b00      	cmp	r3, #0
 8013734:	d107      	bne.n	8013746 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8013736:	f107 030c 	add.w	r3, r7, #12
 801373a:	4618      	mov	r0, r3
 801373c:	f7ff f90a 	bl	8012954 <_UG_DecodeUTF8>
 8013740:	4603      	mov	r3, r0
 8013742:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013744:	e004      	b.n	8013750 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	1c5a      	adds	r2, r3, #1
 801374a:	60fa      	str	r2, [r7, #12]
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8013750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013752:	2b00      	cmp	r3, #0
 8013754:	d031      	beq.n	80137ba <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8013756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013758:	2b0a      	cmp	r3, #10
 801375a:	d01c      	beq.n	8013796 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	8a1c      	ldrh	r4, [r3, #16]
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	8a5b      	ldrh	r3, [r3, #18]
 8013764:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8013768:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 801376c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 801376e:	9300      	str	r3, [sp, #0]
 8013770:	4623      	mov	r3, r4
 8013772:	f7ff fb35 	bl	8012de0 <_UG_PutChar>
 8013776:	4603      	mov	r3, r0
 8013778:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 801377a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801377e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013782:	d0d2      	beq.n	801372a <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8013784:	8a7a      	ldrh	r2, [r7, #18]
 8013786:	8afb      	ldrh	r3, [r7, #22]
 8013788:	4413      	add	r3, r2
 801378a:	b29a      	uxth	r2, r3
 801378c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801378e:	4413      	add	r3, r2
 8013790:	b29b      	uxth	r3, r3
 8013792:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013794:	e7c9      	b.n	801372a <_UG_PutText+0x1ea>
           break;
 8013796:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8013798:	8bfa      	ldrh	r2, [r7, #30]
 801379a:	8abb      	ldrh	r3, [r7, #20]
 801379c:	4413      	add	r3, r2
 801379e:	b29a      	uxth	r2, r3
 80137a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80137a2:	4413      	add	r3, r2
 80137a4:	b29b      	uxth	r3, r3
 80137a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 80137a8:	e75d      	b.n	8013666 <_UG_PutText+0x126>
     return;
 80137aa:	bf00      	nop
 80137ac:	e006      	b.n	80137bc <_UG_PutText+0x27c>
     return;
 80137ae:	bf00      	nop
 80137b0:	e004      	b.n	80137bc <_UG_PutText+0x27c>
        return;
 80137b2:	bf00      	nop
 80137b4:	e002      	b.n	80137bc <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 80137b6:	bf00      	nop
 80137b8:	e000      	b.n	80137bc <_UG_PutText+0x27c>
           return;
 80137ba:	bf00      	nop
   }
}
 80137bc:	3734      	adds	r7, #52	; 0x34
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd90      	pop	{r4, r7, pc}
 80137c2:	bf00      	nop
 80137c4:	200023c0 	.word	0x200023c0

080137c8 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 80137c8:	b5b0      	push	{r4, r5, r7, lr}
 80137ca:	b084      	sub	sp, #16
 80137cc:	af02      	add	r7, sp, #8
 80137ce:	4604      	mov	r4, r0
 80137d0:	4608      	mov	r0, r1
 80137d2:	4611      	mov	r1, r2
 80137d4:	461a      	mov	r2, r3
 80137d6:	4623      	mov	r3, r4
 80137d8:	80fb      	strh	r3, [r7, #6]
 80137da:	4603      	mov	r3, r0
 80137dc:	80bb      	strh	r3, [r7, #4]
 80137de:	460b      	mov	r3, r1
 80137e0:	807b      	strh	r3, [r7, #2]
 80137e2:	4613      	mov	r3, r2
 80137e4:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 80137e6:	887b      	ldrh	r3, [r7, #2]
 80137e8:	3b01      	subs	r3, #1
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	b21c      	sxth	r4, r3
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	1c9a      	adds	r2, r3, #2
 80137f2:	61ba      	str	r2, [r7, #24]
 80137f4:	881b      	ldrh	r3, [r3, #0]
 80137f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80137fa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80137fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	4613      	mov	r3, r2
 8013806:	4622      	mov	r2, r4
 8013808:	f7fe fee0 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 801380c:	88bb      	ldrh	r3, [r7, #4]
 801380e:	3301      	adds	r3, #1
 8013810:	b29b      	uxth	r3, r3
 8013812:	b219      	sxth	r1, r3
 8013814:	883b      	ldrh	r3, [r7, #0]
 8013816:	3b01      	subs	r3, #1
 8013818:	b29b      	uxth	r3, r3
 801381a:	b21c      	sxth	r4, r3
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	1c9a      	adds	r2, r3, #2
 8013820:	61ba      	str	r2, [r7, #24]
 8013822:	881b      	ldrh	r3, [r3, #0]
 8013824:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013828:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801382c:	9300      	str	r3, [sp, #0]
 801382e:	4623      	mov	r3, r4
 8013830:	f7fe fecc 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8013834:	69bb      	ldr	r3, [r7, #24]
 8013836:	1c9a      	adds	r2, r3, #2
 8013838:	61ba      	str	r2, [r7, #24]
 801383a:	881b      	ldrh	r3, [r3, #0]
 801383c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8013840:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013844:	f9b7 1000 	ldrsh.w	r1, [r7]
 8013848:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801384c:	9300      	str	r3, [sp, #0]
 801384e:	4623      	mov	r3, r4
 8013850:	f7fe febc 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8013854:	883b      	ldrh	r3, [r7, #0]
 8013856:	3b01      	subs	r3, #1
 8013858:	b29b      	uxth	r3, r3
 801385a:	b21c      	sxth	r4, r3
 801385c:	69bb      	ldr	r3, [r7, #24]
 801385e:	1c9a      	adds	r2, r3, #2
 8013860:	61ba      	str	r2, [r7, #24]
 8013862:	881b      	ldrh	r3, [r3, #0]
 8013864:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013868:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801386c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8013870:	9300      	str	r3, [sp, #0]
 8013872:	4623      	mov	r3, r4
 8013874:	f7fe feaa 	bl	80125cc <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8013878:	88fb      	ldrh	r3, [r7, #6]
 801387a:	3301      	adds	r3, #1
 801387c:	b29b      	uxth	r3, r3
 801387e:	b218      	sxth	r0, r3
 8013880:	88bb      	ldrh	r3, [r7, #4]
 8013882:	3301      	adds	r3, #1
 8013884:	b29b      	uxth	r3, r3
 8013886:	b219      	sxth	r1, r3
 8013888:	887b      	ldrh	r3, [r7, #2]
 801388a:	3b02      	subs	r3, #2
 801388c:	b29b      	uxth	r3, r3
 801388e:	b21c      	sxth	r4, r3
 8013890:	88bb      	ldrh	r3, [r7, #4]
 8013892:	3301      	adds	r3, #1
 8013894:	b29b      	uxth	r3, r3
 8013896:	b21d      	sxth	r5, r3
 8013898:	69bb      	ldr	r3, [r7, #24]
 801389a:	1c9a      	adds	r2, r3, #2
 801389c:	61ba      	str	r2, [r7, #24]
 801389e:	881b      	ldrh	r3, [r3, #0]
 80138a0:	9300      	str	r3, [sp, #0]
 80138a2:	462b      	mov	r3, r5
 80138a4:	4622      	mov	r2, r4
 80138a6:	f7fe fe91 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 80138aa:	88fb      	ldrh	r3, [r7, #6]
 80138ac:	3301      	adds	r3, #1
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	b218      	sxth	r0, r3
 80138b2:	88bb      	ldrh	r3, [r7, #4]
 80138b4:	3302      	adds	r3, #2
 80138b6:	b29b      	uxth	r3, r3
 80138b8:	b219      	sxth	r1, r3
 80138ba:	88fb      	ldrh	r3, [r7, #6]
 80138bc:	3301      	adds	r3, #1
 80138be:	b29b      	uxth	r3, r3
 80138c0:	b21c      	sxth	r4, r3
 80138c2:	883b      	ldrh	r3, [r7, #0]
 80138c4:	3b02      	subs	r3, #2
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	b21d      	sxth	r5, r3
 80138ca:	69bb      	ldr	r3, [r7, #24]
 80138cc:	1c9a      	adds	r2, r3, #2
 80138ce:	61ba      	str	r2, [r7, #24]
 80138d0:	881b      	ldrh	r3, [r3, #0]
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	462b      	mov	r3, r5
 80138d6:	4622      	mov	r2, r4
 80138d8:	f7fe fe78 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80138dc:	88fb      	ldrh	r3, [r7, #6]
 80138de:	3301      	adds	r3, #1
 80138e0:	b29b      	uxth	r3, r3
 80138e2:	b218      	sxth	r0, r3
 80138e4:	883b      	ldrh	r3, [r7, #0]
 80138e6:	3b01      	subs	r3, #1
 80138e8:	b29b      	uxth	r3, r3
 80138ea:	b219      	sxth	r1, r3
 80138ec:	887b      	ldrh	r3, [r7, #2]
 80138ee:	3b01      	subs	r3, #1
 80138f0:	b29b      	uxth	r3, r3
 80138f2:	b21c      	sxth	r4, r3
 80138f4:	883b      	ldrh	r3, [r7, #0]
 80138f6:	3b01      	subs	r3, #1
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	b21d      	sxth	r5, r3
 80138fc:	69bb      	ldr	r3, [r7, #24]
 80138fe:	1c9a      	adds	r2, r3, #2
 8013900:	61ba      	str	r2, [r7, #24]
 8013902:	881b      	ldrh	r3, [r3, #0]
 8013904:	9300      	str	r3, [sp, #0]
 8013906:	462b      	mov	r3, r5
 8013908:	4622      	mov	r2, r4
 801390a:	f7fe fe5f 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 801390e:	887b      	ldrh	r3, [r7, #2]
 8013910:	3b01      	subs	r3, #1
 8013912:	b29b      	uxth	r3, r3
 8013914:	b218      	sxth	r0, r3
 8013916:	88bb      	ldrh	r3, [r7, #4]
 8013918:	3301      	adds	r3, #1
 801391a:	b29b      	uxth	r3, r3
 801391c:	b219      	sxth	r1, r3
 801391e:	887b      	ldrh	r3, [r7, #2]
 8013920:	3b01      	subs	r3, #1
 8013922:	b29b      	uxth	r3, r3
 8013924:	b21c      	sxth	r4, r3
 8013926:	883b      	ldrh	r3, [r7, #0]
 8013928:	3b02      	subs	r3, #2
 801392a:	b29b      	uxth	r3, r3
 801392c:	b21d      	sxth	r5, r3
 801392e:	69bb      	ldr	r3, [r7, #24]
 8013930:	1c9a      	adds	r2, r3, #2
 8013932:	61ba      	str	r2, [r7, #24]
 8013934:	881b      	ldrh	r3, [r3, #0]
 8013936:	9300      	str	r3, [sp, #0]
 8013938:	462b      	mov	r3, r5
 801393a:	4622      	mov	r2, r4
 801393c:	f7fe fe46 	bl	80125cc <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8013940:	88fb      	ldrh	r3, [r7, #6]
 8013942:	3302      	adds	r3, #2
 8013944:	b29b      	uxth	r3, r3
 8013946:	b218      	sxth	r0, r3
 8013948:	88bb      	ldrh	r3, [r7, #4]
 801394a:	3302      	adds	r3, #2
 801394c:	b29b      	uxth	r3, r3
 801394e:	b219      	sxth	r1, r3
 8013950:	887b      	ldrh	r3, [r7, #2]
 8013952:	3b03      	subs	r3, #3
 8013954:	b29b      	uxth	r3, r3
 8013956:	b21c      	sxth	r4, r3
 8013958:	88bb      	ldrh	r3, [r7, #4]
 801395a:	3302      	adds	r3, #2
 801395c:	b29b      	uxth	r3, r3
 801395e:	b21d      	sxth	r5, r3
 8013960:	69bb      	ldr	r3, [r7, #24]
 8013962:	1c9a      	adds	r2, r3, #2
 8013964:	61ba      	str	r2, [r7, #24]
 8013966:	881b      	ldrh	r3, [r3, #0]
 8013968:	9300      	str	r3, [sp, #0]
 801396a:	462b      	mov	r3, r5
 801396c:	4622      	mov	r2, r4
 801396e:	f7fe fe2d 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8013972:	88fb      	ldrh	r3, [r7, #6]
 8013974:	3302      	adds	r3, #2
 8013976:	b29b      	uxth	r3, r3
 8013978:	b218      	sxth	r0, r3
 801397a:	88bb      	ldrh	r3, [r7, #4]
 801397c:	3303      	adds	r3, #3
 801397e:	b29b      	uxth	r3, r3
 8013980:	b219      	sxth	r1, r3
 8013982:	88fb      	ldrh	r3, [r7, #6]
 8013984:	3302      	adds	r3, #2
 8013986:	b29b      	uxth	r3, r3
 8013988:	b21c      	sxth	r4, r3
 801398a:	883b      	ldrh	r3, [r7, #0]
 801398c:	3b03      	subs	r3, #3
 801398e:	b29b      	uxth	r3, r3
 8013990:	b21d      	sxth	r5, r3
 8013992:	69bb      	ldr	r3, [r7, #24]
 8013994:	1c9a      	adds	r2, r3, #2
 8013996:	61ba      	str	r2, [r7, #24]
 8013998:	881b      	ldrh	r3, [r3, #0]
 801399a:	9300      	str	r3, [sp, #0]
 801399c:	462b      	mov	r3, r5
 801399e:	4622      	mov	r2, r4
 80139a0:	f7fe fe14 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 80139a4:	88fb      	ldrh	r3, [r7, #6]
 80139a6:	3302      	adds	r3, #2
 80139a8:	b29b      	uxth	r3, r3
 80139aa:	b218      	sxth	r0, r3
 80139ac:	883b      	ldrh	r3, [r7, #0]
 80139ae:	3b02      	subs	r3, #2
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	b219      	sxth	r1, r3
 80139b4:	887b      	ldrh	r3, [r7, #2]
 80139b6:	3b02      	subs	r3, #2
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	b21c      	sxth	r4, r3
 80139bc:	883b      	ldrh	r3, [r7, #0]
 80139be:	3b02      	subs	r3, #2
 80139c0:	b29b      	uxth	r3, r3
 80139c2:	b21d      	sxth	r5, r3
 80139c4:	69bb      	ldr	r3, [r7, #24]
 80139c6:	1c9a      	adds	r2, r3, #2
 80139c8:	61ba      	str	r2, [r7, #24]
 80139ca:	881b      	ldrh	r3, [r3, #0]
 80139cc:	9300      	str	r3, [sp, #0]
 80139ce:	462b      	mov	r3, r5
 80139d0:	4622      	mov	r2, r4
 80139d2:	f7fe fdfb 	bl	80125cc <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80139d6:	887b      	ldrh	r3, [r7, #2]
 80139d8:	3b02      	subs	r3, #2
 80139da:	b29b      	uxth	r3, r3
 80139dc:	b218      	sxth	r0, r3
 80139de:	88bb      	ldrh	r3, [r7, #4]
 80139e0:	3302      	adds	r3, #2
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	b219      	sxth	r1, r3
 80139e6:	887b      	ldrh	r3, [r7, #2]
 80139e8:	3b02      	subs	r3, #2
 80139ea:	b29b      	uxth	r3, r3
 80139ec:	b21a      	sxth	r2, r3
 80139ee:	883b      	ldrh	r3, [r7, #0]
 80139f0:	3b03      	subs	r3, #3
 80139f2:	b29b      	uxth	r3, r3
 80139f4:	b21c      	sxth	r4, r3
 80139f6:	69bb      	ldr	r3, [r7, #24]
 80139f8:	881b      	ldrh	r3, [r3, #0]
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	4623      	mov	r3, r4
 80139fe:	f7fe fde5 	bl	80125cc <UG_DrawLine>
}
 8013a02:	bf00      	nop
 8013a04:	3708      	adds	r7, #8
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013a0c <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	b083      	sub	sp, #12
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	4603      	mov	r3, r0
 8013a14:	6039      	str	r1, [r7, #0]
 8013a16:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8013a18:	79fb      	ldrb	r3, [r7, #7]
 8013a1a:	2b03      	cmp	r3, #3
 8013a1c:	d810      	bhi.n	8013a40 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8013a1e:	4b0b      	ldr	r3, [pc, #44]	; (8013a4c <UG_DriverRegister+0x40>)
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	79fb      	ldrb	r3, [r7, #7]
 8013a24:	330a      	adds	r3, #10
 8013a26:	00db      	lsls	r3, r3, #3
 8013a28:	4413      	add	r3, r2
 8013a2a:	683a      	ldr	r2, [r7, #0]
 8013a2c:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8013a2e:	4b07      	ldr	r3, [pc, #28]	; (8013a4c <UG_DriverRegister+0x40>)
 8013a30:	681a      	ldr	r2, [r3, #0]
 8013a32:	79fb      	ldrb	r3, [r7, #7]
 8013a34:	330a      	adds	r3, #10
 8013a36:	00db      	lsls	r3, r3, #3
 8013a38:	4413      	add	r3, r2
 8013a3a:	2203      	movs	r2, #3
 8013a3c:	721a      	strb	r2, [r3, #8]
 8013a3e:	e000      	b.n	8013a42 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8013a40:	bf00      	nop
}
 8013a42:	370c      	adds	r7, #12
 8013a44:	46bd      	mov	sp, r7
 8013a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4a:	4770      	bx	lr
 8013a4c:	200023c0 	.word	0x200023c0

08013a50 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8013a56:	4b5e      	ldr	r3, [pc, #376]	; (8013bd0 <UG_Update+0x180>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8013a5e:	f003 0301 	and.w	r3, r3, #1
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d00a      	beq.n	8013a7c <UG_Update+0x2c>
 8013a66:	4b5a      	ldr	r3, [pc, #360]	; (8013bd0 <UG_Update+0x180>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8013a6e:	4b58      	ldr	r3, [pc, #352]	; (8013bd0 <UG_Update+0x180>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	f022 0201 	bic.w	r2, r2, #1
 8013a76:	b2d2      	uxtb	r2, r2
 8013a78:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8013a7c:	4b54      	ldr	r3, [pc, #336]	; (8013bd0 <UG_Update+0x180>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	68da      	ldr	r2, [r3, #12]
 8013a82:	4b53      	ldr	r3, [pc, #332]	; (8013bd0 <UG_Update+0x180>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	691b      	ldr	r3, [r3, #16]
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	d071      	beq.n	8013b70 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8013a8c:	4b50      	ldr	r3, [pc, #320]	; (8013bd0 <UG_Update+0x180>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	68db      	ldr	r3, [r3, #12]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d06c      	beq.n	8013b70 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8013a96:	4b4e      	ldr	r3, [pc, #312]	; (8013bd0 <UG_Update+0x180>)
 8013a98:	681a      	ldr	r2, [r3, #0]
 8013a9a:	4b4d      	ldr	r3, [pc, #308]	; (8013bd0 <UG_Update+0x180>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	6912      	ldr	r2, [r2, #16]
 8013aa0:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8013aa2:	4b4b      	ldr	r3, [pc, #300]	; (8013bd0 <UG_Update+0x180>)
 8013aa4:	681a      	ldr	r2, [r3, #0]
 8013aa6:	4b4a      	ldr	r3, [pc, #296]	; (8013bd0 <UG_Update+0x180>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	68d2      	ldr	r2, [r2, #12]
 8013aac:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8013aae:	4b48      	ldr	r3, [pc, #288]	; (8013bd0 <UG_Update+0x180>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	695b      	ldr	r3, [r3, #20]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d045      	beq.n	8013b44 <UG_Update+0xf4>
 8013ab8:	4b45      	ldr	r3, [pc, #276]	; (8013bd0 <UG_Update+0x180>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	695b      	ldr	r3, [r3, #20]
 8013abe:	7d9b      	ldrb	r3, [r3, #22]
 8013ac0:	f003 0302 	and.w	r3, r3, #2
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d03d      	beq.n	8013b44 <UG_Update+0xf4>
 8013ac8:	4b41      	ldr	r3, [pc, #260]	; (8013bd0 <UG_Update+0x180>)
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	695b      	ldr	r3, [r3, #20]
 8013ace:	7a1b      	ldrb	r3, [r3, #8]
 8013ad0:	f003 0308 	and.w	r3, r3, #8
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d035      	beq.n	8013b44 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8013ad8:	4b3d      	ldr	r3, [pc, #244]	; (8013bd0 <UG_Update+0x180>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	695b      	ldr	r3, [r3, #20]
 8013ade:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8013ae2:	4b3b      	ldr	r3, [pc, #236]	; (8013bd0 <UG_Update+0x180>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	691b      	ldr	r3, [r3, #16]
 8013ae8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d123      	bne.n	8013b38 <UG_Update+0xe8>
 8013af0:	4b37      	ldr	r3, [pc, #220]	; (8013bd0 <UG_Update+0x180>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	695b      	ldr	r3, [r3, #20]
 8013af6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013afa:	4b35      	ldr	r3, [pc, #212]	; (8013bd0 <UG_Update+0x180>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	691b      	ldr	r3, [r3, #16]
 8013b00:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d117      	bne.n	8013b38 <UG_Update+0xe8>
 8013b08:	4b31      	ldr	r3, [pc, #196]	; (8013bd0 <UG_Update+0x180>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	695b      	ldr	r3, [r3, #20]
 8013b0e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8013b12:	4b2f      	ldr	r3, [pc, #188]	; (8013bd0 <UG_Update+0x180>)
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	691b      	ldr	r3, [r3, #16]
 8013b18:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d10b      	bne.n	8013b38 <UG_Update+0xe8>
 8013b20:	4b2b      	ldr	r3, [pc, #172]	; (8013bd0 <UG_Update+0x180>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	695b      	ldr	r3, [r3, #20]
 8013b26:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8013b2a:	4b29      	ldr	r3, [pc, #164]	; (8013bd0 <UG_Update+0x180>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	691b      	ldr	r3, [r3, #16]
 8013b30:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d005      	beq.n	8013b44 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8013b38:	4b25      	ldr	r3, [pc, #148]	; (8013bd0 <UG_Update+0x180>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	695b      	ldr	r3, [r3, #20]
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f000 f848 	bl	8013bd4 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8013b44:	4b22      	ldr	r3, [pc, #136]	; (8013bd0 <UG_Update+0x180>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	691b      	ldr	r3, [r3, #16]
 8013b4a:	7a1a      	ldrb	r2, [r3, #8]
 8013b4c:	4b20      	ldr	r3, [pc, #128]	; (8013bd0 <UG_Update+0x180>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	691b      	ldr	r3, [r3, #16]
 8013b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013b56:	b2d2      	uxtb	r2, r2
 8013b58:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8013b5a:	4b1d      	ldr	r3, [pc, #116]	; (8013bd0 <UG_Update+0x180>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	691b      	ldr	r3, [r3, #16]
 8013b60:	7a1a      	ldrb	r2, [r3, #8]
 8013b62:	4b1b      	ldr	r3, [pc, #108]	; (8013bd0 <UG_Update+0x180>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	691b      	ldr	r3, [r3, #16]
 8013b68:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8013b6c:	b2d2      	uxtb	r2, r2
 8013b6e:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8013b70:	4b17      	ldr	r3, [pc, #92]	; (8013bd0 <UG_Update+0x180>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	691b      	ldr	r3, [r3, #16]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d01b      	beq.n	8013bb2 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8013b7a:	4b15      	ldr	r3, [pc, #84]	; (8013bd0 <UG_Update+0x180>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	691b      	ldr	r3, [r3, #16]
 8013b80:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	7a1b      	ldrb	r3, [r3, #8]
 8013b86:	f003 0320 	and.w	r3, r3, #32
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d002      	beq.n	8013b94 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f000 f8ca 	bl	8013d28 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	7a1b      	ldrb	r3, [r3, #8]
 8013b98:	f003 0308 	and.w	r3, r3, #8
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d008      	beq.n	8013bb2 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f7ff fb81 	bl	80132a8 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f7ff fc34 	bl	8013414 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f7ff fc7b 	bl	80134a8 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8013bb2:	4b07      	ldr	r3, [pc, #28]	; (8013bd0 <UG_Update+0x180>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	689b      	ldr	r3, [r3, #8]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d004      	beq.n	8013bc8 <UG_Update+0x178>
     gui->device->flush();
 8013bbe:	4b04      	ldr	r3, [pc, #16]	; (8013bd0 <UG_Update+0x180>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	689b      	ldr	r3, [r3, #8]
 8013bc6:	4798      	blx	r3
   }
}
 8013bc8:	bf00      	nop
 8013bca:	3708      	adds	r7, #8
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	200023c0 	.word	0x200023c0

08013bd4 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8013bd4:	b590      	push	{r4, r7, lr}
 8013bd6:	b08f      	sub	sp, #60	; 0x3c
 8013bd8:	af02      	add	r7, sp, #8
 8013bda:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	f000 809a 	beq.w	8013d18 <_UG_WindowDrawTitle+0x144>
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	7a1b      	ldrb	r3, [r3, #8]
 8013be8:	f003 0302 	and.w	r3, r3, #2
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	f000 8093 	beq.w	8013d18 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	89db      	ldrh	r3, [r3, #14]
 8013bf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	8a1b      	ldrh	r3, [r3, #16]
 8013bfc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	8a5b      	ldrh	r3, [r3, #18]
 8013c02:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	8a9b      	ldrh	r3, [r3, #20]
 8013c08:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	7d9b      	ldrb	r3, [r3, #22]
 8013c0e:	f003 0301 	and.w	r3, r3, #1
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d00f      	beq.n	8013c36 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8013c16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013c18:	3303      	adds	r3, #3
 8013c1a:	b29b      	uxth	r3, r3
 8013c1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8013c1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013c20:	3303      	adds	r3, #3
 8013c22:	b29b      	uxth	r3, r3
 8013c24:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8013c26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013c28:	3b03      	subs	r3, #3
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8013c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013c30:	3b03      	subs	r3, #3
 8013c32:	b29b      	uxth	r3, r3
 8013c34:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8013c36:	4b3b      	ldr	r3, [pc, #236]	; (8013d24 <_UG_WindowDrawTitle+0x150>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	691b      	ldr	r3, [r3, #16]
 8013c3c:	687a      	ldr	r2, [r7, #4]
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d106      	bne.n	8013c50 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013c46:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c4c:	83bb      	strh	r3, [r7, #28]
 8013c4e:	e005      	b.n	8013c5c <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c54:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c5a:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013c62:	b29a      	uxth	r2, r3
 8013c64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013c66:	4413      	add	r3, r2
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	3b01      	subs	r3, #1
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	b21c      	sxth	r4, r3
 8013c70:	8bfb      	ldrh	r3, [r7, #30]
 8013c72:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013c76:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013c7a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013c7e:	9300      	str	r3, [sp, #0]
 8013c80:	4623      	mov	r3, r4
 8013c82:	f7fe fb03 	bl	801228c <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	699b      	ldr	r3, [r3, #24]
 8013c8a:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	69db      	ldr	r3, [r3, #28]
 8013c90:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8013c92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013c94:	3303      	adds	r3, #3
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	b21b      	sxth	r3, r3
 8013c9a:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8013c9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013c9e:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8013ca0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ca2:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013caa:	b29a      	uxth	r2, r3
 8013cac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013cae:	4413      	add	r3, r2
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	3b01      	subs	r3, #1
 8013cb4:	b29b      	uxth	r3, r3
 8013cb6:	b21b      	sxth	r3, r3
 8013cb8:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013cc0:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8013cca:	b21b      	sxth	r3, r3
 8013ccc:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8013cd4:	b21b      	sxth	r3, r3
 8013cd6:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8013cd8:	f107 030c 	add.w	r3, r7, #12
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7ff fc2f 	bl	8013540 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013ce8:	b29a      	uxth	r2, r3
 8013cea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013cec:	4413      	add	r3, r2
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	b219      	sxth	r1, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013cf8:	b29a      	uxth	r2, r3
 8013cfa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013cfc:	4413      	add	r3, r2
 8013cfe:	b29b      	uxth	r3, r3
 8013d00:	b21b      	sxth	r3, r3
 8013d02:	f649 5413 	movw	r4, #40211	; 0x9d13
 8013d06:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013d0a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013d0e:	9400      	str	r4, [sp, #0]
 8013d10:	f7fe fc5c 	bl	80125cc <UG_DrawLine>
      return UG_RESULT_OK;
 8013d14:	2300      	movs	r3, #0
 8013d16:	e001      	b.n	8013d1c <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8013d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3734      	adds	r7, #52	; 0x34
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd90      	pop	{r4, r7, pc}
 8013d24:	200023c0 	.word	0x200023c0

08013d28 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8013d28:	b590      	push	{r4, r7, lr}
 8013d2a:	b089      	sub	sp, #36	; 0x24
 8013d2c:	af02      	add	r7, sp, #8
 8013d2e:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	89db      	ldrh	r3, [r3, #14]
 8013d34:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	8a1b      	ldrh	r3, [r3, #16]
 8013d3a:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	8a5b      	ldrh	r3, [r3, #18]
 8013d40:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	8a9b      	ldrh	r3, [r3, #20]
 8013d46:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	7a1b      	ldrb	r3, [r3, #8]
 8013d4c:	f023 0320 	bic.w	r3, r3, #32
 8013d50:	b2da      	uxtb	r2, r3
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	7a1b      	ldrb	r3, [r3, #8]
 8013d5a:	f003 0308 	and.w	r3, r3, #8
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	f000 8084 	beq.w	8013e6c <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	7d9b      	ldrb	r3, [r3, #22]
 8013d68:	f003 0301 	and.w	r3, r3, #1
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d021      	beq.n	8013db4 <_UG_WindowUpdate+0x8c>
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	7a1b      	ldrb	r3, [r3, #8]
 8013d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d11b      	bne.n	8013db4 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8013d7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013d80:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013d84:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013d88:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8013d8c:	4c43      	ldr	r4, [pc, #268]	; (8013e9c <_UG_WindowUpdate+0x174>)
 8013d8e:	9400      	str	r4, [sp, #0]
 8013d90:	f7ff fd1a 	bl	80137c8 <_UG_DrawObjectFrame>
         xs+=3;
 8013d94:	8abb      	ldrh	r3, [r7, #20]
 8013d96:	3303      	adds	r3, #3
 8013d98:	b29b      	uxth	r3, r3
 8013d9a:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8013d9c:	8a7b      	ldrh	r3, [r7, #18]
 8013d9e:	3303      	adds	r3, #3
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8013da4:	8a3b      	ldrh	r3, [r7, #16]
 8013da6:	3b03      	subs	r3, #3
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8013dac:	89fb      	ldrh	r3, [r7, #14]
 8013dae:	3b03      	subs	r3, #3
 8013db0:	b29b      	uxth	r3, r3
 8013db2:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	7d9b      	ldrb	r3, [r3, #22]
 8013db8:	f003 0302 	and.w	r3, r3, #2
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d01a      	beq.n	8013df6 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f7ff ff07 	bl	8013bd4 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013dcc:	b29a      	uxth	r2, r3
 8013dce:	8a7b      	ldrh	r3, [r7, #18]
 8013dd0:	4413      	add	r3, r2
 8013dd2:	b29b      	uxth	r3, r3
 8013dd4:	3301      	adds	r3, #1
 8013dd6:	b29b      	uxth	r3, r3
 8013dd8:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	7a1b      	ldrb	r3, [r3, #8]
 8013dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d007      	beq.n	8013df6 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	7a1b      	ldrb	r3, [r3, #8]
 8013dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013dee:	b2da      	uxtb	r2, r3
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	721a      	strb	r2, [r3, #8]
            return;
 8013df4:	e04e      	b.n	8013e94 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	899b      	ldrh	r3, [r3, #12]
 8013dfa:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8013dfe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013e02:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013e06:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8013e0a:	9300      	str	r3, [sp, #0]
 8013e0c:	4623      	mov	r3, r4
 8013e0e:	f7fe fa3d 	bl	801228c <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8013e18:	2300      	movs	r3, #0
 8013e1a:	82fb      	strh	r3, [r7, #22]
 8013e1c:	e021      	b.n	8013e62 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	685a      	ldr	r2, [r3, #4]
 8013e22:	8afb      	ldrh	r3, [r7, #22]
 8013e24:	015b      	lsls	r3, r3, #5
 8013e26:	4413      	add	r3, r2
 8013e28:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	781b      	ldrb	r3, [r3, #0]
 8013e2e:	f003 0301 	and.w	r3, r3, #1
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d112      	bne.n	8013e5c <_UG_WindowUpdate+0x134>
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	f003 0302 	and.w	r3, r3, #2
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d00c      	beq.n	8013e5c <_UG_WindowUpdate+0x134>
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	f003 0308 	and.w	r3, r3, #8
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d006      	beq.n	8013e5c <_UG_WindowUpdate+0x134>
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013e56:	b2da      	uxtb	r2, r3
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8013e5c:	8afb      	ldrh	r3, [r7, #22]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	82fb      	strh	r3, [r7, #22]
 8013e62:	8afa      	ldrh	r2, [r7, #22]
 8013e64:	89bb      	ldrh	r3, [r7, #12]
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d3d9      	bcc.n	8013e1e <_UG_WindowUpdate+0xf6>
 8013e6a:	e013      	b.n	8013e94 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8013e84:	4b06      	ldr	r3, [pc, #24]	; (8013ea0 <_UG_WindowUpdate+0x178>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013e8c:	9300      	str	r3, [sp, #0]
 8013e8e:	4623      	mov	r3, r4
 8013e90:	f7fe f9fc 	bl	801228c <UG_FillFrame>
   }
}
 8013e94:	371c      	adds	r7, #28
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd90      	pop	{r4, r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	0801d5f8 	.word	0x0801d5f8
 8013ea0:	200023c0 	.word	0x200023c0

08013ea4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b084      	sub	sp, #16
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
 8013eac:	460b      	mov	r3, r1
 8013eae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013eb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013eb4:	f002 f8fc 	bl	80160b0 <USBD_static_malloc>
 8013eb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d105      	bne.n	8013ecc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013ec8:	2302      	movs	r3, #2
 8013eca:	e066      	b.n	8013f9a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	68fa      	ldr	r2, [r7, #12]
 8013ed0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	7c1b      	ldrb	r3, [r3, #16]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d119      	bne.n	8013f10 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ee0:	2202      	movs	r2, #2
 8013ee2:	2181      	movs	r1, #129	; 0x81
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f001 ff8a 	bl	8015dfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	2201      	movs	r2, #1
 8013eee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ef4:	2202      	movs	r2, #2
 8013ef6:	2101      	movs	r1, #1
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f001 ff80 	bl	8015dfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2201      	movs	r2, #1
 8013f02:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2210      	movs	r2, #16
 8013f0a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013f0e:	e016      	b.n	8013f3e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013f10:	2340      	movs	r3, #64	; 0x40
 8013f12:	2202      	movs	r2, #2
 8013f14:	2181      	movs	r1, #129	; 0x81
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f001 ff71 	bl	8015dfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2201      	movs	r2, #1
 8013f20:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013f22:	2340      	movs	r3, #64	; 0x40
 8013f24:	2202      	movs	r2, #2
 8013f26:	2101      	movs	r1, #1
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f001 ff68 	bl	8015dfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2201      	movs	r2, #1
 8013f32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2210      	movs	r2, #16
 8013f3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013f3e:	2308      	movs	r3, #8
 8013f40:	2203      	movs	r2, #3
 8013f42:	2182      	movs	r1, #130	; 0x82
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f001 ff5a 	bl	8015dfe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	2200      	movs	r2, #0
 8013f60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2200      	movs	r2, #0
 8013f68:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	7c1b      	ldrb	r3, [r3, #16]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d109      	bne.n	8013f88 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f7e:	2101      	movs	r1, #1
 8013f80:	6878      	ldr	r0, [r7, #4]
 8013f82:	f002 f82b 	bl	8015fdc <USBD_LL_PrepareReceive>
 8013f86:	e007      	b.n	8013f98 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013f8e:	2340      	movs	r3, #64	; 0x40
 8013f90:	2101      	movs	r1, #1
 8013f92:	6878      	ldr	r0, [r7, #4]
 8013f94:	f002 f822 	bl	8015fdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013f98:	2300      	movs	r3, #0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3710      	adds	r7, #16
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}

08013fa2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013fa2:	b580      	push	{r7, lr}
 8013fa4:	b082      	sub	sp, #8
 8013fa6:	af00      	add	r7, sp, #0
 8013fa8:	6078      	str	r0, [r7, #4]
 8013faa:	460b      	mov	r3, r1
 8013fac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013fae:	2181      	movs	r1, #129	; 0x81
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f001 ff4a 	bl	8015e4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013fbc:	2101      	movs	r1, #1
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f001 ff43 	bl	8015e4a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013fcc:	2182      	movs	r1, #130	; 0x82
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f001 ff3b 	bl	8015e4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d00e      	beq.n	801400c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ff4:	685b      	ldr	r3, [r3, #4]
 8013ff6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ffe:	4618      	mov	r0, r3
 8014000:	f002 f864 	bl	80160cc <USBD_static_free>
    pdev->pClassData = NULL;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2200      	movs	r2, #0
 8014008:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801400c:	2300      	movs	r3, #0
}
 801400e:	4618      	mov	r0, r3
 8014010:	3708      	adds	r7, #8
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}
	...

08014018 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b086      	sub	sp, #24
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014028:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801402a:	2300      	movs	r3, #0
 801402c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801402e:	2300      	movs	r3, #0
 8014030:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014032:	2300      	movs	r3, #0
 8014034:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014036:	693b      	ldr	r3, [r7, #16]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d101      	bne.n	8014040 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801403c:	2303      	movs	r3, #3
 801403e:	e0af      	b.n	80141a0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	781b      	ldrb	r3, [r3, #0]
 8014044:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014048:	2b00      	cmp	r3, #0
 801404a:	d03f      	beq.n	80140cc <USBD_CDC_Setup+0xb4>
 801404c:	2b20      	cmp	r3, #32
 801404e:	f040 809f 	bne.w	8014190 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	88db      	ldrh	r3, [r3, #6]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d02e      	beq.n	80140b8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	b25b      	sxtb	r3, r3
 8014060:	2b00      	cmp	r3, #0
 8014062:	da16      	bge.n	8014092 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801406a:	689b      	ldr	r3, [r3, #8]
 801406c:	683a      	ldr	r2, [r7, #0]
 801406e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8014070:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014072:	683a      	ldr	r2, [r7, #0]
 8014074:	88d2      	ldrh	r2, [r2, #6]
 8014076:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	88db      	ldrh	r3, [r3, #6]
 801407c:	2b07      	cmp	r3, #7
 801407e:	bf28      	it	cs
 8014080:	2307      	movcs	r3, #7
 8014082:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014084:	693b      	ldr	r3, [r7, #16]
 8014086:	89fa      	ldrh	r2, [r7, #14]
 8014088:	4619      	mov	r1, r3
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f001 facf 	bl	801562e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8014090:	e085      	b.n	801419e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	785a      	ldrb	r2, [r3, #1]
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	88db      	ldrh	r3, [r3, #6]
 80140a0:	b2da      	uxtb	r2, r3
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80140a8:	6939      	ldr	r1, [r7, #16]
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	88db      	ldrh	r3, [r3, #6]
 80140ae:	461a      	mov	r2, r3
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f001 fae8 	bl	8015686 <USBD_CtlPrepareRx>
      break;
 80140b6:	e072      	b.n	801419e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140be:	689b      	ldr	r3, [r3, #8]
 80140c0:	683a      	ldr	r2, [r7, #0]
 80140c2:	7850      	ldrb	r0, [r2, #1]
 80140c4:	2200      	movs	r2, #0
 80140c6:	6839      	ldr	r1, [r7, #0]
 80140c8:	4798      	blx	r3
      break;
 80140ca:	e068      	b.n	801419e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	785b      	ldrb	r3, [r3, #1]
 80140d0:	2b0b      	cmp	r3, #11
 80140d2:	d852      	bhi.n	801417a <USBD_CDC_Setup+0x162>
 80140d4:	a201      	add	r2, pc, #4	; (adr r2, 80140dc <USBD_CDC_Setup+0xc4>)
 80140d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140da:	bf00      	nop
 80140dc:	0801410d 	.word	0x0801410d
 80140e0:	08014189 	.word	0x08014189
 80140e4:	0801417b 	.word	0x0801417b
 80140e8:	0801417b 	.word	0x0801417b
 80140ec:	0801417b 	.word	0x0801417b
 80140f0:	0801417b 	.word	0x0801417b
 80140f4:	0801417b 	.word	0x0801417b
 80140f8:	0801417b 	.word	0x0801417b
 80140fc:	0801417b 	.word	0x0801417b
 8014100:	0801417b 	.word	0x0801417b
 8014104:	08014137 	.word	0x08014137
 8014108:	08014161 	.word	0x08014161
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014112:	b2db      	uxtb	r3, r3
 8014114:	2b03      	cmp	r3, #3
 8014116:	d107      	bne.n	8014128 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014118:	f107 030a 	add.w	r3, r7, #10
 801411c:	2202      	movs	r2, #2
 801411e:	4619      	mov	r1, r3
 8014120:	6878      	ldr	r0, [r7, #4]
 8014122:	f001 fa84 	bl	801562e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014126:	e032      	b.n	801418e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014128:	6839      	ldr	r1, [r7, #0]
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f001 fa0e 	bl	801554c <USBD_CtlError>
            ret = USBD_FAIL;
 8014130:	2303      	movs	r3, #3
 8014132:	75fb      	strb	r3, [r7, #23]
          break;
 8014134:	e02b      	b.n	801418e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801413c:	b2db      	uxtb	r3, r3
 801413e:	2b03      	cmp	r3, #3
 8014140:	d107      	bne.n	8014152 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014142:	f107 030d 	add.w	r3, r7, #13
 8014146:	2201      	movs	r2, #1
 8014148:	4619      	mov	r1, r3
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f001 fa6f 	bl	801562e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014150:	e01d      	b.n	801418e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014152:	6839      	ldr	r1, [r7, #0]
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f001 f9f9 	bl	801554c <USBD_CtlError>
            ret = USBD_FAIL;
 801415a:	2303      	movs	r3, #3
 801415c:	75fb      	strb	r3, [r7, #23]
          break;
 801415e:	e016      	b.n	801418e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014166:	b2db      	uxtb	r3, r3
 8014168:	2b03      	cmp	r3, #3
 801416a:	d00f      	beq.n	801418c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801416c:	6839      	ldr	r1, [r7, #0]
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f001 f9ec 	bl	801554c <USBD_CtlError>
            ret = USBD_FAIL;
 8014174:	2303      	movs	r3, #3
 8014176:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014178:	e008      	b.n	801418c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801417a:	6839      	ldr	r1, [r7, #0]
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f001 f9e5 	bl	801554c <USBD_CtlError>
          ret = USBD_FAIL;
 8014182:	2303      	movs	r3, #3
 8014184:	75fb      	strb	r3, [r7, #23]
          break;
 8014186:	e002      	b.n	801418e <USBD_CDC_Setup+0x176>
          break;
 8014188:	bf00      	nop
 801418a:	e008      	b.n	801419e <USBD_CDC_Setup+0x186>
          break;
 801418c:	bf00      	nop
      }
      break;
 801418e:	e006      	b.n	801419e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8014190:	6839      	ldr	r1, [r7, #0]
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f001 f9da 	bl	801554c <USBD_CtlError>
      ret = USBD_FAIL;
 8014198:	2303      	movs	r3, #3
 801419a:	75fb      	strb	r3, [r7, #23]
      break;
 801419c:	bf00      	nop
  }

  return (uint8_t)ret;
 801419e:	7dfb      	ldrb	r3, [r7, #23]
}
 80141a0:	4618      	mov	r0, r3
 80141a2:	3718      	adds	r7, #24
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bd80      	pop	{r7, pc}

080141a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b084      	sub	sp, #16
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
 80141b0:	460b      	mov	r3, r1
 80141b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80141ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d101      	bne.n	80141ca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80141c6:	2303      	movs	r3, #3
 80141c8:	e04f      	b.n	801426a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80141d2:	78fa      	ldrb	r2, [r7, #3]
 80141d4:	6879      	ldr	r1, [r7, #4]
 80141d6:	4613      	mov	r3, r2
 80141d8:	009b      	lsls	r3, r3, #2
 80141da:	4413      	add	r3, r2
 80141dc:	009b      	lsls	r3, r3, #2
 80141de:	440b      	add	r3, r1
 80141e0:	3318      	adds	r3, #24
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d029      	beq.n	801423c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80141e8:	78fa      	ldrb	r2, [r7, #3]
 80141ea:	6879      	ldr	r1, [r7, #4]
 80141ec:	4613      	mov	r3, r2
 80141ee:	009b      	lsls	r3, r3, #2
 80141f0:	4413      	add	r3, r2
 80141f2:	009b      	lsls	r3, r3, #2
 80141f4:	440b      	add	r3, r1
 80141f6:	3318      	adds	r3, #24
 80141f8:	681a      	ldr	r2, [r3, #0]
 80141fa:	78f9      	ldrb	r1, [r7, #3]
 80141fc:	68f8      	ldr	r0, [r7, #12]
 80141fe:	460b      	mov	r3, r1
 8014200:	009b      	lsls	r3, r3, #2
 8014202:	440b      	add	r3, r1
 8014204:	00db      	lsls	r3, r3, #3
 8014206:	4403      	add	r3, r0
 8014208:	3320      	adds	r3, #32
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	fbb2 f1f3 	udiv	r1, r2, r3
 8014210:	fb01 f303 	mul.w	r3, r1, r3
 8014214:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014216:	2b00      	cmp	r3, #0
 8014218:	d110      	bne.n	801423c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801421a:	78fa      	ldrb	r2, [r7, #3]
 801421c:	6879      	ldr	r1, [r7, #4]
 801421e:	4613      	mov	r3, r2
 8014220:	009b      	lsls	r3, r3, #2
 8014222:	4413      	add	r3, r2
 8014224:	009b      	lsls	r3, r3, #2
 8014226:	440b      	add	r3, r1
 8014228:	3318      	adds	r3, #24
 801422a:	2200      	movs	r2, #0
 801422c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801422e:	78f9      	ldrb	r1, [r7, #3]
 8014230:	2300      	movs	r3, #0
 8014232:	2200      	movs	r2, #0
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	f001 feb0 	bl	8015f9a <USBD_LL_Transmit>
 801423a:	e015      	b.n	8014268 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	2200      	movs	r2, #0
 8014240:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801424a:	691b      	ldr	r3, [r3, #16]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d00b      	beq.n	8014268 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014256:	691b      	ldr	r3, [r3, #16]
 8014258:	68ba      	ldr	r2, [r7, #8]
 801425a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801425e:	68ba      	ldr	r2, [r7, #8]
 8014260:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014264:	78fa      	ldrb	r2, [r7, #3]
 8014266:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014268:	2300      	movs	r3, #0
}
 801426a:	4618      	mov	r0, r3
 801426c:	3710      	adds	r7, #16
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}

08014272 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014272:	b580      	push	{r7, lr}
 8014274:	b084      	sub	sp, #16
 8014276:	af00      	add	r7, sp, #0
 8014278:	6078      	str	r0, [r7, #4]
 801427a:	460b      	mov	r3, r1
 801427c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014284:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801428c:	2b00      	cmp	r3, #0
 801428e:	d101      	bne.n	8014294 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014290:	2303      	movs	r3, #3
 8014292:	e015      	b.n	80142c0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014294:	78fb      	ldrb	r3, [r7, #3]
 8014296:	4619      	mov	r1, r3
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f001 fec0 	bl	801601e <USBD_LL_GetRxDataSize>
 801429e:	4602      	mov	r2, r0
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142ac:	68db      	ldr	r3, [r3, #12]
 80142ae:	68fa      	ldr	r2, [r7, #12]
 80142b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80142b4:	68fa      	ldr	r2, [r7, #12]
 80142b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80142ba:	4611      	mov	r1, r2
 80142bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80142be:	2300      	movs	r3, #0
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3710      	adds	r7, #16
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d101      	bne.n	80142e2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80142de:	2303      	movs	r3, #3
 80142e0:	e01b      	b.n	801431a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d015      	beq.n	8014318 <USBD_CDC_EP0_RxReady+0x50>
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80142f2:	2bff      	cmp	r3, #255	; 0xff
 80142f4:	d010      	beq.n	8014318 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142fc:	689b      	ldr	r3, [r3, #8]
 80142fe:	68fa      	ldr	r2, [r7, #12]
 8014300:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8014304:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8014306:	68fa      	ldr	r2, [r7, #12]
 8014308:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801430c:	b292      	uxth	r2, r2
 801430e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	22ff      	movs	r2, #255	; 0xff
 8014314:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014318:	2300      	movs	r3, #0
}
 801431a:	4618      	mov	r0, r3
 801431c:	3710      	adds	r7, #16
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
	...

08014324 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014324:	b480      	push	{r7}
 8014326:	b083      	sub	sp, #12
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2243      	movs	r2, #67	; 0x43
 8014330:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8014332:	4b03      	ldr	r3, [pc, #12]	; (8014340 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8014334:	4618      	mov	r0, r3
 8014336:	370c      	adds	r7, #12
 8014338:	46bd      	mov	sp, r7
 801433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433e:	4770      	bx	lr
 8014340:	20000288 	.word	0x20000288

08014344 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014344:	b480      	push	{r7}
 8014346:	b083      	sub	sp, #12
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2243      	movs	r2, #67	; 0x43
 8014350:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8014352:	4b03      	ldr	r3, [pc, #12]	; (8014360 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8014354:	4618      	mov	r0, r3
 8014356:	370c      	adds	r7, #12
 8014358:	46bd      	mov	sp, r7
 801435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435e:	4770      	bx	lr
 8014360:	20000244 	.word	0x20000244

08014364 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014364:	b480      	push	{r7}
 8014366:	b083      	sub	sp, #12
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	2243      	movs	r2, #67	; 0x43
 8014370:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8014372:	4b03      	ldr	r3, [pc, #12]	; (8014380 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8014374:	4618      	mov	r0, r3
 8014376:	370c      	adds	r7, #12
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr
 8014380:	200002cc 	.word	0x200002cc

08014384 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014384:	b480      	push	{r7}
 8014386:	b083      	sub	sp, #12
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	220a      	movs	r2, #10
 8014390:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014392:	4b03      	ldr	r3, [pc, #12]	; (80143a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014394:	4618      	mov	r0, r3
 8014396:	370c      	adds	r7, #12
 8014398:	46bd      	mov	sp, r7
 801439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439e:	4770      	bx	lr
 80143a0:	20000200 	.word	0x20000200

080143a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80143a4:	b480      	push	{r7}
 80143a6:	b083      	sub	sp, #12
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d101      	bne.n	80143b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80143b4:	2303      	movs	r3, #3
 80143b6:	e004      	b.n	80143c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	683a      	ldr	r2, [r7, #0]
 80143bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80143c0:	2300      	movs	r3, #0
}
 80143c2:	4618      	mov	r0, r3
 80143c4:	370c      	adds	r7, #12
 80143c6:	46bd      	mov	sp, r7
 80143c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143cc:	4770      	bx	lr

080143ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80143ce:	b480      	push	{r7}
 80143d0:	b087      	sub	sp, #28
 80143d2:	af00      	add	r7, sp, #0
 80143d4:	60f8      	str	r0, [r7, #12]
 80143d6:	60b9      	str	r1, [r7, #8]
 80143d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80143e0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d101      	bne.n	80143ec <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80143e8:	2303      	movs	r3, #3
 80143ea:	e008      	b.n	80143fe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	68ba      	ldr	r2, [r7, #8]
 80143f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	687a      	ldr	r2, [r7, #4]
 80143f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80143fc:	2300      	movs	r3, #0
}
 80143fe:	4618      	mov	r0, r3
 8014400:	371c      	adds	r7, #28
 8014402:	46bd      	mov	sp, r7
 8014404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014408:	4770      	bx	lr

0801440a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801440a:	b480      	push	{r7}
 801440c:	b085      	sub	sp, #20
 801440e:	af00      	add	r7, sp, #0
 8014410:	6078      	str	r0, [r7, #4]
 8014412:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801441a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d101      	bne.n	8014426 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8014422:	2303      	movs	r3, #3
 8014424:	e004      	b.n	8014430 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	683a      	ldr	r2, [r7, #0]
 801442a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801442e:	2300      	movs	r3, #0
}
 8014430:	4618      	mov	r0, r3
 8014432:	3714      	adds	r7, #20
 8014434:	46bd      	mov	sp, r7
 8014436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443a:	4770      	bx	lr

0801443c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b084      	sub	sp, #16
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801444a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801444c:	2301      	movs	r3, #1
 801444e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014456:	2b00      	cmp	r3, #0
 8014458:	d101      	bne.n	801445e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801445a:	2303      	movs	r3, #3
 801445c:	e01a      	b.n	8014494 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014464:	2b00      	cmp	r3, #0
 8014466:	d114      	bne.n	8014492 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	2201      	movs	r2, #1
 801446c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014486:	2181      	movs	r1, #129	; 0x81
 8014488:	6878      	ldr	r0, [r7, #4]
 801448a:	f001 fd86 	bl	8015f9a <USBD_LL_Transmit>

    ret = USBD_OK;
 801448e:	2300      	movs	r3, #0
 8014490:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014492:	7bfb      	ldrb	r3, [r7, #15]
}
 8014494:	4618      	mov	r0, r3
 8014496:	3710      	adds	r7, #16
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}

0801449c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801449c:	b580      	push	{r7, lr}
 801449e:	b084      	sub	sp, #16
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80144aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d101      	bne.n	80144ba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80144b6:	2303      	movs	r3, #3
 80144b8:	e016      	b.n	80144e8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	7c1b      	ldrb	r3, [r3, #16]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d109      	bne.n	80144d6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80144c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144cc:	2101      	movs	r1, #1
 80144ce:	6878      	ldr	r0, [r7, #4]
 80144d0:	f001 fd84 	bl	8015fdc <USBD_LL_PrepareReceive>
 80144d4:	e007      	b.n	80144e6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80144dc:	2340      	movs	r3, #64	; 0x40
 80144de:	2101      	movs	r1, #1
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f001 fd7b 	bl	8015fdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80144e6:	2300      	movs	r3, #0
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3710      	adds	r7, #16
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b086      	sub	sp, #24
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	60b9      	str	r1, [r7, #8]
 80144fa:	4613      	mov	r3, r2
 80144fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d101      	bne.n	8014508 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014504:	2303      	movs	r3, #3
 8014506:	e01f      	b.n	8014548 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	2200      	movs	r2, #0
 801450c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	2200      	movs	r2, #0
 8014514:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2200      	movs	r2, #0
 801451c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014520:	68bb      	ldr	r3, [r7, #8]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d003      	beq.n	801452e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	68ba      	ldr	r2, [r7, #8]
 801452a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	2201      	movs	r2, #1
 8014532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	79fa      	ldrb	r2, [r7, #7]
 801453a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801453c:	68f8      	ldr	r0, [r7, #12]
 801453e:	f001 fbe3 	bl	8015d08 <USBD_LL_Init>
 8014542:	4603      	mov	r3, r0
 8014544:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014546:	7dfb      	ldrb	r3, [r7, #23]
}
 8014548:	4618      	mov	r0, r3
 801454a:	3718      	adds	r7, #24
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}

08014550 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b084      	sub	sp, #16
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801455a:	2300      	movs	r3, #0
 801455c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d101      	bne.n	8014568 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8014564:	2303      	movs	r3, #3
 8014566:	e016      	b.n	8014596 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	683a      	ldr	r2, [r7, #0]
 801456c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014578:	2b00      	cmp	r3, #0
 801457a:	d00b      	beq.n	8014594 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014584:	f107 020e 	add.w	r2, r7, #14
 8014588:	4610      	mov	r0, r2
 801458a:	4798      	blx	r3
 801458c:	4602      	mov	r2, r0
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8014594:	2300      	movs	r3, #0
}
 8014596:	4618      	mov	r0, r3
 8014598:	3710      	adds	r7, #16
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}

0801459e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801459e:	b580      	push	{r7, lr}
 80145a0:	b082      	sub	sp, #8
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f001 fc0e 	bl	8015dc8 <USBD_LL_Start>
 80145ac:	4603      	mov	r3, r0
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3708      	adds	r7, #8
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}

080145b6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80145b6:	b480      	push	{r7}
 80145b8:	b083      	sub	sp, #12
 80145ba:	af00      	add	r7, sp, #0
 80145bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80145be:	2300      	movs	r3, #0
}
 80145c0:	4618      	mov	r0, r3
 80145c2:	370c      	adds	r7, #12
 80145c4:	46bd      	mov	sp, r7
 80145c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ca:	4770      	bx	lr

080145cc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	460b      	mov	r3, r1
 80145d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80145d8:	2303      	movs	r3, #3
 80145da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d009      	beq.n	80145fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	78fa      	ldrb	r2, [r7, #3]
 80145f0:	4611      	mov	r1, r2
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	4798      	blx	r3
 80145f6:	4603      	mov	r3, r0
 80145f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80145fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80145fc:	4618      	mov	r0, r3
 80145fe:	3710      	adds	r7, #16
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}

08014604 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
 801460c:	460b      	mov	r3, r1
 801460e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014616:	2b00      	cmp	r3, #0
 8014618:	d007      	beq.n	801462a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014620:	685b      	ldr	r3, [r3, #4]
 8014622:	78fa      	ldrb	r2, [r7, #3]
 8014624:	4611      	mov	r1, r2
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	4798      	blx	r3
  }

  return USBD_OK;
 801462a:	2300      	movs	r3, #0
}
 801462c:	4618      	mov	r0, r3
 801462e:	3708      	adds	r7, #8
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}

08014634 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b084      	sub	sp, #16
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
 801463c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014644:	6839      	ldr	r1, [r7, #0]
 8014646:	4618      	mov	r0, r3
 8014648:	f000 ff46 	bl	80154d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2201      	movs	r2, #1
 8014650:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801465a:	461a      	mov	r2, r3
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014668:	f003 031f 	and.w	r3, r3, #31
 801466c:	2b02      	cmp	r3, #2
 801466e:	d01a      	beq.n	80146a6 <USBD_LL_SetupStage+0x72>
 8014670:	2b02      	cmp	r3, #2
 8014672:	d822      	bhi.n	80146ba <USBD_LL_SetupStage+0x86>
 8014674:	2b00      	cmp	r3, #0
 8014676:	d002      	beq.n	801467e <USBD_LL_SetupStage+0x4a>
 8014678:	2b01      	cmp	r3, #1
 801467a:	d00a      	beq.n	8014692 <USBD_LL_SetupStage+0x5e>
 801467c:	e01d      	b.n	80146ba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014684:	4619      	mov	r1, r3
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f000 f9ee 	bl	8014a68 <USBD_StdDevReq>
 801468c:	4603      	mov	r3, r0
 801468e:	73fb      	strb	r3, [r7, #15]
      break;
 8014690:	e020      	b.n	80146d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014698:	4619      	mov	r1, r3
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f000 fa52 	bl	8014b44 <USBD_StdItfReq>
 80146a0:	4603      	mov	r3, r0
 80146a2:	73fb      	strb	r3, [r7, #15]
      break;
 80146a4:	e016      	b.n	80146d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80146ac:	4619      	mov	r1, r3
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f000 fa91 	bl	8014bd6 <USBD_StdEPReq>
 80146b4:	4603      	mov	r3, r0
 80146b6:	73fb      	strb	r3, [r7, #15]
      break;
 80146b8:	e00c      	b.n	80146d4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80146c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80146c4:	b2db      	uxtb	r3, r3
 80146c6:	4619      	mov	r1, r3
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f001 fbdd 	bl	8015e88 <USBD_LL_StallEP>
 80146ce:	4603      	mov	r3, r0
 80146d0:	73fb      	strb	r3, [r7, #15]
      break;
 80146d2:	bf00      	nop
  }

  return ret;
 80146d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	3710      	adds	r7, #16
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}

080146de <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80146de:	b580      	push	{r7, lr}
 80146e0:	b086      	sub	sp, #24
 80146e2:	af00      	add	r7, sp, #0
 80146e4:	60f8      	str	r0, [r7, #12]
 80146e6:	460b      	mov	r3, r1
 80146e8:	607a      	str	r2, [r7, #4]
 80146ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80146ec:	7afb      	ldrb	r3, [r7, #11]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d138      	bne.n	8014764 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80146f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014700:	2b03      	cmp	r3, #3
 8014702:	d14a      	bne.n	801479a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	689a      	ldr	r2, [r3, #8]
 8014708:	693b      	ldr	r3, [r7, #16]
 801470a:	68db      	ldr	r3, [r3, #12]
 801470c:	429a      	cmp	r2, r3
 801470e:	d913      	bls.n	8014738 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014710:	693b      	ldr	r3, [r7, #16]
 8014712:	689a      	ldr	r2, [r3, #8]
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	68db      	ldr	r3, [r3, #12]
 8014718:	1ad2      	subs	r2, r2, r3
 801471a:	693b      	ldr	r3, [r7, #16]
 801471c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801471e:	693b      	ldr	r3, [r7, #16]
 8014720:	68da      	ldr	r2, [r3, #12]
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	689b      	ldr	r3, [r3, #8]
 8014726:	4293      	cmp	r3, r2
 8014728:	bf28      	it	cs
 801472a:	4613      	movcs	r3, r2
 801472c:	461a      	mov	r2, r3
 801472e:	6879      	ldr	r1, [r7, #4]
 8014730:	68f8      	ldr	r0, [r7, #12]
 8014732:	f000 ffc5 	bl	80156c0 <USBD_CtlContinueRx>
 8014736:	e030      	b.n	801479a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801473e:	b2db      	uxtb	r3, r3
 8014740:	2b03      	cmp	r3, #3
 8014742:	d10b      	bne.n	801475c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801474a:	691b      	ldr	r3, [r3, #16]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d005      	beq.n	801475c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014756:	691b      	ldr	r3, [r3, #16]
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801475c:	68f8      	ldr	r0, [r7, #12]
 801475e:	f000 ffc0 	bl	80156e2 <USBD_CtlSendStatus>
 8014762:	e01a      	b.n	801479a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801476a:	b2db      	uxtb	r3, r3
 801476c:	2b03      	cmp	r3, #3
 801476e:	d114      	bne.n	801479a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014776:	699b      	ldr	r3, [r3, #24]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d00e      	beq.n	801479a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014782:	699b      	ldr	r3, [r3, #24]
 8014784:	7afa      	ldrb	r2, [r7, #11]
 8014786:	4611      	mov	r1, r2
 8014788:	68f8      	ldr	r0, [r7, #12]
 801478a:	4798      	blx	r3
 801478c:	4603      	mov	r3, r0
 801478e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014790:	7dfb      	ldrb	r3, [r7, #23]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d001      	beq.n	801479a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8014796:	7dfb      	ldrb	r3, [r7, #23]
 8014798:	e000      	b.n	801479c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801479a:	2300      	movs	r3, #0
}
 801479c:	4618      	mov	r0, r3
 801479e:	3718      	adds	r7, #24
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b086      	sub	sp, #24
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	460b      	mov	r3, r1
 80147ae:	607a      	str	r2, [r7, #4]
 80147b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80147b2:	7afb      	ldrb	r3, [r7, #11]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d16b      	bne.n	8014890 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	3314      	adds	r3, #20
 80147bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80147c4:	2b02      	cmp	r3, #2
 80147c6:	d156      	bne.n	8014876 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80147c8:	693b      	ldr	r3, [r7, #16]
 80147ca:	689a      	ldr	r2, [r3, #8]
 80147cc:	693b      	ldr	r3, [r7, #16]
 80147ce:	68db      	ldr	r3, [r3, #12]
 80147d0:	429a      	cmp	r2, r3
 80147d2:	d914      	bls.n	80147fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80147d4:	693b      	ldr	r3, [r7, #16]
 80147d6:	689a      	ldr	r2, [r3, #8]
 80147d8:	693b      	ldr	r3, [r7, #16]
 80147da:	68db      	ldr	r3, [r3, #12]
 80147dc:	1ad2      	subs	r2, r2, r3
 80147de:	693b      	ldr	r3, [r7, #16]
 80147e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	689b      	ldr	r3, [r3, #8]
 80147e6:	461a      	mov	r2, r3
 80147e8:	6879      	ldr	r1, [r7, #4]
 80147ea:	68f8      	ldr	r0, [r7, #12]
 80147ec:	f000 ff3a 	bl	8015664 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80147f0:	2300      	movs	r3, #0
 80147f2:	2200      	movs	r2, #0
 80147f4:	2100      	movs	r1, #0
 80147f6:	68f8      	ldr	r0, [r7, #12]
 80147f8:	f001 fbf0 	bl	8015fdc <USBD_LL_PrepareReceive>
 80147fc:	e03b      	b.n	8014876 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80147fe:	693b      	ldr	r3, [r7, #16]
 8014800:	68da      	ldr	r2, [r3, #12]
 8014802:	693b      	ldr	r3, [r7, #16]
 8014804:	689b      	ldr	r3, [r3, #8]
 8014806:	429a      	cmp	r2, r3
 8014808:	d11c      	bne.n	8014844 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	685a      	ldr	r2, [r3, #4]
 801480e:	693b      	ldr	r3, [r7, #16]
 8014810:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014812:	429a      	cmp	r2, r3
 8014814:	d316      	bcc.n	8014844 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	685a      	ldr	r2, [r3, #4]
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014820:	429a      	cmp	r2, r3
 8014822:	d20f      	bcs.n	8014844 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014824:	2200      	movs	r2, #0
 8014826:	2100      	movs	r1, #0
 8014828:	68f8      	ldr	r0, [r7, #12]
 801482a:	f000 ff1b 	bl	8015664 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	2200      	movs	r2, #0
 8014832:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014836:	2300      	movs	r3, #0
 8014838:	2200      	movs	r2, #0
 801483a:	2100      	movs	r1, #0
 801483c:	68f8      	ldr	r0, [r7, #12]
 801483e:	f001 fbcd 	bl	8015fdc <USBD_LL_PrepareReceive>
 8014842:	e018      	b.n	8014876 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801484a:	b2db      	uxtb	r3, r3
 801484c:	2b03      	cmp	r3, #3
 801484e:	d10b      	bne.n	8014868 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014856:	68db      	ldr	r3, [r3, #12]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d005      	beq.n	8014868 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014862:	68db      	ldr	r3, [r3, #12]
 8014864:	68f8      	ldr	r0, [r7, #12]
 8014866:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014868:	2180      	movs	r1, #128	; 0x80
 801486a:	68f8      	ldr	r0, [r7, #12]
 801486c:	f001 fb0c 	bl	8015e88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014870:	68f8      	ldr	r0, [r7, #12]
 8014872:	f000 ff49 	bl	8015708 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801487c:	2b01      	cmp	r3, #1
 801487e:	d122      	bne.n	80148c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014880:	68f8      	ldr	r0, [r7, #12]
 8014882:	f7ff fe98 	bl	80145b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	2200      	movs	r2, #0
 801488a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801488e:	e01a      	b.n	80148c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014896:	b2db      	uxtb	r3, r3
 8014898:	2b03      	cmp	r3, #3
 801489a:	d114      	bne.n	80148c6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148a2:	695b      	ldr	r3, [r3, #20]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d00e      	beq.n	80148c6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148ae:	695b      	ldr	r3, [r3, #20]
 80148b0:	7afa      	ldrb	r2, [r7, #11]
 80148b2:	4611      	mov	r1, r2
 80148b4:	68f8      	ldr	r0, [r7, #12]
 80148b6:	4798      	blx	r3
 80148b8:	4603      	mov	r3, r0
 80148ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80148bc:	7dfb      	ldrb	r3, [r7, #23]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d001      	beq.n	80148c6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80148c2:	7dfb      	ldrb	r3, [r7, #23]
 80148c4:	e000      	b.n	80148c8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80148c6:	2300      	movs	r3, #0
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3718      	adds	r7, #24
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b082      	sub	sp, #8
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2201      	movs	r2, #1
 80148dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	2200      	movs	r2, #0
 80148e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	2200      	movs	r2, #0
 80148ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2200      	movs	r2, #0
 80148f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d101      	bne.n	8014904 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8014900:	2303      	movs	r3, #3
 8014902:	e02f      	b.n	8014964 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801490a:	2b00      	cmp	r3, #0
 801490c:	d00f      	beq.n	801492e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d009      	beq.n	801492e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014920:	685b      	ldr	r3, [r3, #4]
 8014922:	687a      	ldr	r2, [r7, #4]
 8014924:	6852      	ldr	r2, [r2, #4]
 8014926:	b2d2      	uxtb	r2, r2
 8014928:	4611      	mov	r1, r2
 801492a:	6878      	ldr	r0, [r7, #4]
 801492c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801492e:	2340      	movs	r3, #64	; 0x40
 8014930:	2200      	movs	r2, #0
 8014932:	2100      	movs	r1, #0
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f001 fa62 	bl	8015dfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2201      	movs	r2, #1
 801493e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2240      	movs	r2, #64	; 0x40
 8014946:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801494a:	2340      	movs	r3, #64	; 0x40
 801494c:	2200      	movs	r2, #0
 801494e:	2180      	movs	r1, #128	; 0x80
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	f001 fa54 	bl	8015dfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	2201      	movs	r2, #1
 801495a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2240      	movs	r2, #64	; 0x40
 8014960:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8014962:	2300      	movs	r3, #0
}
 8014964:	4618      	mov	r0, r3
 8014966:	3708      	adds	r7, #8
 8014968:	46bd      	mov	sp, r7
 801496a:	bd80      	pop	{r7, pc}

0801496c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	460b      	mov	r3, r1
 8014976:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	78fa      	ldrb	r2, [r7, #3]
 801497c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801497e:	2300      	movs	r3, #0
}
 8014980:	4618      	mov	r0, r3
 8014982:	370c      	adds	r7, #12
 8014984:	46bd      	mov	sp, r7
 8014986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498a:	4770      	bx	lr

0801498c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801498c:	b480      	push	{r7}
 801498e:	b083      	sub	sp, #12
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801499a:	b2da      	uxtb	r2, r3
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2204      	movs	r2, #4
 80149a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80149aa:	2300      	movs	r3, #0
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	370c      	adds	r7, #12
 80149b0:	46bd      	mov	sp, r7
 80149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b6:	4770      	bx	lr

080149b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80149b8:	b480      	push	{r7}
 80149ba:	b083      	sub	sp, #12
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149c6:	b2db      	uxtb	r3, r3
 80149c8:	2b04      	cmp	r3, #4
 80149ca:	d106      	bne.n	80149da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80149d2:	b2da      	uxtb	r2, r3
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80149da:	2300      	movs	r3, #0
}
 80149dc:	4618      	mov	r0, r3
 80149de:	370c      	adds	r7, #12
 80149e0:	46bd      	mov	sp, r7
 80149e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e6:	4770      	bx	lr

080149e8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b082      	sub	sp, #8
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d101      	bne.n	80149fe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80149fa:	2303      	movs	r3, #3
 80149fc:	e012      	b.n	8014a24 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	2b03      	cmp	r3, #3
 8014a08:	d10b      	bne.n	8014a22 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a10:	69db      	ldr	r3, [r3, #28]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d005      	beq.n	8014a22 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a1c:	69db      	ldr	r3, [r3, #28]
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014a22:	2300      	movs	r3, #0
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3708      	adds	r7, #8
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}

08014a2c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014a2c:	b480      	push	{r7}
 8014a2e:	b087      	sub	sp, #28
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014a3e:	697b      	ldr	r3, [r7, #20]
 8014a40:	3301      	adds	r3, #1
 8014a42:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014a4a:	8a3b      	ldrh	r3, [r7, #16]
 8014a4c:	021b      	lsls	r3, r3, #8
 8014a4e:	b21a      	sxth	r2, r3
 8014a50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014a54:	4313      	orrs	r3, r2
 8014a56:	b21b      	sxth	r3, r3
 8014a58:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014a5a:	89fb      	ldrh	r3, [r7, #14]
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	371c      	adds	r7, #28
 8014a60:	46bd      	mov	sp, r7
 8014a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a66:	4770      	bx	lr

08014a68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b084      	sub	sp, #16
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
 8014a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a72:	2300      	movs	r3, #0
 8014a74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a7e:	2b40      	cmp	r3, #64	; 0x40
 8014a80:	d005      	beq.n	8014a8e <USBD_StdDevReq+0x26>
 8014a82:	2b40      	cmp	r3, #64	; 0x40
 8014a84:	d853      	bhi.n	8014b2e <USBD_StdDevReq+0xc6>
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d00b      	beq.n	8014aa2 <USBD_StdDevReq+0x3a>
 8014a8a:	2b20      	cmp	r3, #32
 8014a8c:	d14f      	bne.n	8014b2e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a94:	689b      	ldr	r3, [r3, #8]
 8014a96:	6839      	ldr	r1, [r7, #0]
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	4798      	blx	r3
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8014aa0:	e04a      	b.n	8014b38 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	785b      	ldrb	r3, [r3, #1]
 8014aa6:	2b09      	cmp	r3, #9
 8014aa8:	d83b      	bhi.n	8014b22 <USBD_StdDevReq+0xba>
 8014aaa:	a201      	add	r2, pc, #4	; (adr r2, 8014ab0 <USBD_StdDevReq+0x48>)
 8014aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ab0:	08014b05 	.word	0x08014b05
 8014ab4:	08014b19 	.word	0x08014b19
 8014ab8:	08014b23 	.word	0x08014b23
 8014abc:	08014b0f 	.word	0x08014b0f
 8014ac0:	08014b23 	.word	0x08014b23
 8014ac4:	08014ae3 	.word	0x08014ae3
 8014ac8:	08014ad9 	.word	0x08014ad9
 8014acc:	08014b23 	.word	0x08014b23
 8014ad0:	08014afb 	.word	0x08014afb
 8014ad4:	08014aed 	.word	0x08014aed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014ad8:	6839      	ldr	r1, [r7, #0]
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f000 f9de 	bl	8014e9c <USBD_GetDescriptor>
          break;
 8014ae0:	e024      	b.n	8014b2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014ae2:	6839      	ldr	r1, [r7, #0]
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f000 fb6d 	bl	80151c4 <USBD_SetAddress>
          break;
 8014aea:	e01f      	b.n	8014b2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014aec:	6839      	ldr	r1, [r7, #0]
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	f000 fbac 	bl	801524c <USBD_SetConfig>
 8014af4:	4603      	mov	r3, r0
 8014af6:	73fb      	strb	r3, [r7, #15]
          break;
 8014af8:	e018      	b.n	8014b2c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014afa:	6839      	ldr	r1, [r7, #0]
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f000 fc4b 	bl	8015398 <USBD_GetConfig>
          break;
 8014b02:	e013      	b.n	8014b2c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014b04:	6839      	ldr	r1, [r7, #0]
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f000 fc7c 	bl	8015404 <USBD_GetStatus>
          break;
 8014b0c:	e00e      	b.n	8014b2c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014b0e:	6839      	ldr	r1, [r7, #0]
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f000 fcab 	bl	801546c <USBD_SetFeature>
          break;
 8014b16:	e009      	b.n	8014b2c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014b18:	6839      	ldr	r1, [r7, #0]
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 fcba 	bl	8015494 <USBD_ClrFeature>
          break;
 8014b20:	e004      	b.n	8014b2c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8014b22:	6839      	ldr	r1, [r7, #0]
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f000 fd11 	bl	801554c <USBD_CtlError>
          break;
 8014b2a:	bf00      	nop
      }
      break;
 8014b2c:	e004      	b.n	8014b38 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8014b2e:	6839      	ldr	r1, [r7, #0]
 8014b30:	6878      	ldr	r0, [r7, #4]
 8014b32:	f000 fd0b 	bl	801554c <USBD_CtlError>
      break;
 8014b36:	bf00      	nop
  }

  return ret;
 8014b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3710      	adds	r7, #16
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop

08014b44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b084      	sub	sp, #16
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b4e:	2300      	movs	r3, #0
 8014b50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	781b      	ldrb	r3, [r3, #0]
 8014b56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b5a:	2b40      	cmp	r3, #64	; 0x40
 8014b5c:	d005      	beq.n	8014b6a <USBD_StdItfReq+0x26>
 8014b5e:	2b40      	cmp	r3, #64	; 0x40
 8014b60:	d82f      	bhi.n	8014bc2 <USBD_StdItfReq+0x7e>
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d001      	beq.n	8014b6a <USBD_StdItfReq+0x26>
 8014b66:	2b20      	cmp	r3, #32
 8014b68:	d12b      	bne.n	8014bc2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b70:	b2db      	uxtb	r3, r3
 8014b72:	3b01      	subs	r3, #1
 8014b74:	2b02      	cmp	r3, #2
 8014b76:	d81d      	bhi.n	8014bb4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	889b      	ldrh	r3, [r3, #4]
 8014b7c:	b2db      	uxtb	r3, r3
 8014b7e:	2b01      	cmp	r3, #1
 8014b80:	d813      	bhi.n	8014baa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b88:	689b      	ldr	r3, [r3, #8]
 8014b8a:	6839      	ldr	r1, [r7, #0]
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	4798      	blx	r3
 8014b90:	4603      	mov	r3, r0
 8014b92:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	88db      	ldrh	r3, [r3, #6]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d110      	bne.n	8014bbe <USBD_StdItfReq+0x7a>
 8014b9c:	7bfb      	ldrb	r3, [r7, #15]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d10d      	bne.n	8014bbe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f000 fd9d 	bl	80156e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014ba8:	e009      	b.n	8014bbe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014baa:	6839      	ldr	r1, [r7, #0]
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f000 fccd 	bl	801554c <USBD_CtlError>
          break;
 8014bb2:	e004      	b.n	8014bbe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8014bb4:	6839      	ldr	r1, [r7, #0]
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f000 fcc8 	bl	801554c <USBD_CtlError>
          break;
 8014bbc:	e000      	b.n	8014bc0 <USBD_StdItfReq+0x7c>
          break;
 8014bbe:	bf00      	nop
      }
      break;
 8014bc0:	e004      	b.n	8014bcc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8014bc2:	6839      	ldr	r1, [r7, #0]
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f000 fcc1 	bl	801554c <USBD_CtlError>
      break;
 8014bca:	bf00      	nop
  }

  return ret;
 8014bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	3710      	adds	r7, #16
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}

08014bd6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bd6:	b580      	push	{r7, lr}
 8014bd8:	b084      	sub	sp, #16
 8014bda:	af00      	add	r7, sp, #0
 8014bdc:	6078      	str	r0, [r7, #4]
 8014bde:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014be0:	2300      	movs	r3, #0
 8014be2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	889b      	ldrh	r3, [r3, #4]
 8014be8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014bf2:	2b40      	cmp	r3, #64	; 0x40
 8014bf4:	d007      	beq.n	8014c06 <USBD_StdEPReq+0x30>
 8014bf6:	2b40      	cmp	r3, #64	; 0x40
 8014bf8:	f200 8145 	bhi.w	8014e86 <USBD_StdEPReq+0x2b0>
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d00c      	beq.n	8014c1a <USBD_StdEPReq+0x44>
 8014c00:	2b20      	cmp	r3, #32
 8014c02:	f040 8140 	bne.w	8014e86 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c0c:	689b      	ldr	r3, [r3, #8]
 8014c0e:	6839      	ldr	r1, [r7, #0]
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	4798      	blx	r3
 8014c14:	4603      	mov	r3, r0
 8014c16:	73fb      	strb	r3, [r7, #15]
      break;
 8014c18:	e13a      	b.n	8014e90 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	785b      	ldrb	r3, [r3, #1]
 8014c1e:	2b03      	cmp	r3, #3
 8014c20:	d007      	beq.n	8014c32 <USBD_StdEPReq+0x5c>
 8014c22:	2b03      	cmp	r3, #3
 8014c24:	f300 8129 	bgt.w	8014e7a <USBD_StdEPReq+0x2a4>
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d07f      	beq.n	8014d2c <USBD_StdEPReq+0x156>
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	d03c      	beq.n	8014caa <USBD_StdEPReq+0xd4>
 8014c30:	e123      	b.n	8014e7a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c38:	b2db      	uxtb	r3, r3
 8014c3a:	2b02      	cmp	r3, #2
 8014c3c:	d002      	beq.n	8014c44 <USBD_StdEPReq+0x6e>
 8014c3e:	2b03      	cmp	r3, #3
 8014c40:	d016      	beq.n	8014c70 <USBD_StdEPReq+0x9a>
 8014c42:	e02c      	b.n	8014c9e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c44:	7bbb      	ldrb	r3, [r7, #14]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d00d      	beq.n	8014c66 <USBD_StdEPReq+0x90>
 8014c4a:	7bbb      	ldrb	r3, [r7, #14]
 8014c4c:	2b80      	cmp	r3, #128	; 0x80
 8014c4e:	d00a      	beq.n	8014c66 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014c50:	7bbb      	ldrb	r3, [r7, #14]
 8014c52:	4619      	mov	r1, r3
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f001 f917 	bl	8015e88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c5a:	2180      	movs	r1, #128	; 0x80
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f001 f913 	bl	8015e88 <USBD_LL_StallEP>
 8014c62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014c64:	e020      	b.n	8014ca8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8014c66:	6839      	ldr	r1, [r7, #0]
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f000 fc6f 	bl	801554c <USBD_CtlError>
              break;
 8014c6e:	e01b      	b.n	8014ca8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	885b      	ldrh	r3, [r3, #2]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d10e      	bne.n	8014c96 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014c78:	7bbb      	ldrb	r3, [r7, #14]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d00b      	beq.n	8014c96 <USBD_StdEPReq+0xc0>
 8014c7e:	7bbb      	ldrb	r3, [r7, #14]
 8014c80:	2b80      	cmp	r3, #128	; 0x80
 8014c82:	d008      	beq.n	8014c96 <USBD_StdEPReq+0xc0>
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	88db      	ldrh	r3, [r3, #6]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d104      	bne.n	8014c96 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014c8c:	7bbb      	ldrb	r3, [r7, #14]
 8014c8e:	4619      	mov	r1, r3
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f001 f8f9 	bl	8015e88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f000 fd23 	bl	80156e2 <USBD_CtlSendStatus>

              break;
 8014c9c:	e004      	b.n	8014ca8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8014c9e:	6839      	ldr	r1, [r7, #0]
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f000 fc53 	bl	801554c <USBD_CtlError>
              break;
 8014ca6:	bf00      	nop
          }
          break;
 8014ca8:	e0ec      	b.n	8014e84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cb0:	b2db      	uxtb	r3, r3
 8014cb2:	2b02      	cmp	r3, #2
 8014cb4:	d002      	beq.n	8014cbc <USBD_StdEPReq+0xe6>
 8014cb6:	2b03      	cmp	r3, #3
 8014cb8:	d016      	beq.n	8014ce8 <USBD_StdEPReq+0x112>
 8014cba:	e030      	b.n	8014d1e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014cbc:	7bbb      	ldrb	r3, [r7, #14]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d00d      	beq.n	8014cde <USBD_StdEPReq+0x108>
 8014cc2:	7bbb      	ldrb	r3, [r7, #14]
 8014cc4:	2b80      	cmp	r3, #128	; 0x80
 8014cc6:	d00a      	beq.n	8014cde <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014cc8:	7bbb      	ldrb	r3, [r7, #14]
 8014cca:	4619      	mov	r1, r3
 8014ccc:	6878      	ldr	r0, [r7, #4]
 8014cce:	f001 f8db 	bl	8015e88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014cd2:	2180      	movs	r1, #128	; 0x80
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f001 f8d7 	bl	8015e88 <USBD_LL_StallEP>
 8014cda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014cdc:	e025      	b.n	8014d2a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014cde:	6839      	ldr	r1, [r7, #0]
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f000 fc33 	bl	801554c <USBD_CtlError>
              break;
 8014ce6:	e020      	b.n	8014d2a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	885b      	ldrh	r3, [r3, #2]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d11b      	bne.n	8014d28 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014cf0:	7bbb      	ldrb	r3, [r7, #14]
 8014cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d004      	beq.n	8014d04 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014cfa:	7bbb      	ldrb	r3, [r7, #14]
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f001 f8e1 	bl	8015ec6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f000 fcec 	bl	80156e2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d10:	689b      	ldr	r3, [r3, #8]
 8014d12:	6839      	ldr	r1, [r7, #0]
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	4798      	blx	r3
 8014d18:	4603      	mov	r3, r0
 8014d1a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014d1c:	e004      	b.n	8014d28 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8014d1e:	6839      	ldr	r1, [r7, #0]
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f000 fc13 	bl	801554c <USBD_CtlError>
              break;
 8014d26:	e000      	b.n	8014d2a <USBD_StdEPReq+0x154>
              break;
 8014d28:	bf00      	nop
          }
          break;
 8014d2a:	e0ab      	b.n	8014e84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d32:	b2db      	uxtb	r3, r3
 8014d34:	2b02      	cmp	r3, #2
 8014d36:	d002      	beq.n	8014d3e <USBD_StdEPReq+0x168>
 8014d38:	2b03      	cmp	r3, #3
 8014d3a:	d032      	beq.n	8014da2 <USBD_StdEPReq+0x1cc>
 8014d3c:	e097      	b.n	8014e6e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014d3e:	7bbb      	ldrb	r3, [r7, #14]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d007      	beq.n	8014d54 <USBD_StdEPReq+0x17e>
 8014d44:	7bbb      	ldrb	r3, [r7, #14]
 8014d46:	2b80      	cmp	r3, #128	; 0x80
 8014d48:	d004      	beq.n	8014d54 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8014d4a:	6839      	ldr	r1, [r7, #0]
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f000 fbfd 	bl	801554c <USBD_CtlError>
                break;
 8014d52:	e091      	b.n	8014e78 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	da0b      	bge.n	8014d74 <USBD_StdEPReq+0x19e>
 8014d5c:	7bbb      	ldrb	r3, [r7, #14]
 8014d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014d62:	4613      	mov	r3, r2
 8014d64:	009b      	lsls	r3, r3, #2
 8014d66:	4413      	add	r3, r2
 8014d68:	009b      	lsls	r3, r3, #2
 8014d6a:	3310      	adds	r3, #16
 8014d6c:	687a      	ldr	r2, [r7, #4]
 8014d6e:	4413      	add	r3, r2
 8014d70:	3304      	adds	r3, #4
 8014d72:	e00b      	b.n	8014d8c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014d74:	7bbb      	ldrb	r3, [r7, #14]
 8014d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	009b      	lsls	r3, r3, #2
 8014d7e:	4413      	add	r3, r2
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014d86:	687a      	ldr	r2, [r7, #4]
 8014d88:	4413      	add	r3, r2
 8014d8a:	3304      	adds	r3, #4
 8014d8c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014d8e:	68bb      	ldr	r3, [r7, #8]
 8014d90:	2200      	movs	r2, #0
 8014d92:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014d94:	68bb      	ldr	r3, [r7, #8]
 8014d96:	2202      	movs	r2, #2
 8014d98:	4619      	mov	r1, r3
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f000 fc47 	bl	801562e <USBD_CtlSendData>
              break;
 8014da0:	e06a      	b.n	8014e78 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014da2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	da11      	bge.n	8014dce <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014daa:	7bbb      	ldrb	r3, [r7, #14]
 8014dac:	f003 020f 	and.w	r2, r3, #15
 8014db0:	6879      	ldr	r1, [r7, #4]
 8014db2:	4613      	mov	r3, r2
 8014db4:	009b      	lsls	r3, r3, #2
 8014db6:	4413      	add	r3, r2
 8014db8:	009b      	lsls	r3, r3, #2
 8014dba:	440b      	add	r3, r1
 8014dbc:	3324      	adds	r3, #36	; 0x24
 8014dbe:	881b      	ldrh	r3, [r3, #0]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d117      	bne.n	8014df4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014dc4:	6839      	ldr	r1, [r7, #0]
 8014dc6:	6878      	ldr	r0, [r7, #4]
 8014dc8:	f000 fbc0 	bl	801554c <USBD_CtlError>
                  break;
 8014dcc:	e054      	b.n	8014e78 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014dce:	7bbb      	ldrb	r3, [r7, #14]
 8014dd0:	f003 020f 	and.w	r2, r3, #15
 8014dd4:	6879      	ldr	r1, [r7, #4]
 8014dd6:	4613      	mov	r3, r2
 8014dd8:	009b      	lsls	r3, r3, #2
 8014dda:	4413      	add	r3, r2
 8014ddc:	009b      	lsls	r3, r3, #2
 8014dde:	440b      	add	r3, r1
 8014de0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014de4:	881b      	ldrh	r3, [r3, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d104      	bne.n	8014df4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014dea:	6839      	ldr	r1, [r7, #0]
 8014dec:	6878      	ldr	r0, [r7, #4]
 8014dee:	f000 fbad 	bl	801554c <USBD_CtlError>
                  break;
 8014df2:	e041      	b.n	8014e78 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	da0b      	bge.n	8014e14 <USBD_StdEPReq+0x23e>
 8014dfc:	7bbb      	ldrb	r3, [r7, #14]
 8014dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014e02:	4613      	mov	r3, r2
 8014e04:	009b      	lsls	r3, r3, #2
 8014e06:	4413      	add	r3, r2
 8014e08:	009b      	lsls	r3, r3, #2
 8014e0a:	3310      	adds	r3, #16
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	4413      	add	r3, r2
 8014e10:	3304      	adds	r3, #4
 8014e12:	e00b      	b.n	8014e2c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014e14:	7bbb      	ldrb	r3, [r7, #14]
 8014e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014e1a:	4613      	mov	r3, r2
 8014e1c:	009b      	lsls	r3, r3, #2
 8014e1e:	4413      	add	r3, r2
 8014e20:	009b      	lsls	r3, r3, #2
 8014e22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014e26:	687a      	ldr	r2, [r7, #4]
 8014e28:	4413      	add	r3, r2
 8014e2a:	3304      	adds	r3, #4
 8014e2c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014e2e:	7bbb      	ldrb	r3, [r7, #14]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d002      	beq.n	8014e3a <USBD_StdEPReq+0x264>
 8014e34:	7bbb      	ldrb	r3, [r7, #14]
 8014e36:	2b80      	cmp	r3, #128	; 0x80
 8014e38:	d103      	bne.n	8014e42 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	601a      	str	r2, [r3, #0]
 8014e40:	e00e      	b.n	8014e60 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014e42:	7bbb      	ldrb	r3, [r7, #14]
 8014e44:	4619      	mov	r1, r3
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f001 f85c 	bl	8015f04 <USBD_LL_IsStallEP>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d003      	beq.n	8014e5a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8014e52:	68bb      	ldr	r3, [r7, #8]
 8014e54:	2201      	movs	r2, #1
 8014e56:	601a      	str	r2, [r3, #0]
 8014e58:	e002      	b.n	8014e60 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014e5a:	68bb      	ldr	r3, [r7, #8]
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	2202      	movs	r2, #2
 8014e64:	4619      	mov	r1, r3
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f000 fbe1 	bl	801562e <USBD_CtlSendData>
              break;
 8014e6c:	e004      	b.n	8014e78 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8014e6e:	6839      	ldr	r1, [r7, #0]
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f000 fb6b 	bl	801554c <USBD_CtlError>
              break;
 8014e76:	bf00      	nop
          }
          break;
 8014e78:	e004      	b.n	8014e84 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8014e7a:	6839      	ldr	r1, [r7, #0]
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f000 fb65 	bl	801554c <USBD_CtlError>
          break;
 8014e82:	bf00      	nop
      }
      break;
 8014e84:	e004      	b.n	8014e90 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8014e86:	6839      	ldr	r1, [r7, #0]
 8014e88:	6878      	ldr	r0, [r7, #4]
 8014e8a:	f000 fb5f 	bl	801554c <USBD_CtlError>
      break;
 8014e8e:	bf00      	nop
  }

  return ret;
 8014e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3710      	adds	r7, #16
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
	...

08014e9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b084      	sub	sp, #16
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
 8014ea4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	885b      	ldrh	r3, [r3, #2]
 8014eb6:	0a1b      	lsrs	r3, r3, #8
 8014eb8:	b29b      	uxth	r3, r3
 8014eba:	3b01      	subs	r3, #1
 8014ebc:	2b0e      	cmp	r3, #14
 8014ebe:	f200 8152 	bhi.w	8015166 <USBD_GetDescriptor+0x2ca>
 8014ec2:	a201      	add	r2, pc, #4	; (adr r2, 8014ec8 <USBD_GetDescriptor+0x2c>)
 8014ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ec8:	08014f39 	.word	0x08014f39
 8014ecc:	08014f51 	.word	0x08014f51
 8014ed0:	08014f91 	.word	0x08014f91
 8014ed4:	08015167 	.word	0x08015167
 8014ed8:	08015167 	.word	0x08015167
 8014edc:	08015107 	.word	0x08015107
 8014ee0:	08015133 	.word	0x08015133
 8014ee4:	08015167 	.word	0x08015167
 8014ee8:	08015167 	.word	0x08015167
 8014eec:	08015167 	.word	0x08015167
 8014ef0:	08015167 	.word	0x08015167
 8014ef4:	08015167 	.word	0x08015167
 8014ef8:	08015167 	.word	0x08015167
 8014efc:	08015167 	.word	0x08015167
 8014f00:	08014f05 	.word	0x08014f05
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f0a:	69db      	ldr	r3, [r3, #28]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d00b      	beq.n	8014f28 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f16:	69db      	ldr	r3, [r3, #28]
 8014f18:	687a      	ldr	r2, [r7, #4]
 8014f1a:	7c12      	ldrb	r2, [r2, #16]
 8014f1c:	f107 0108 	add.w	r1, r7, #8
 8014f20:	4610      	mov	r0, r2
 8014f22:	4798      	blx	r3
 8014f24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014f26:	e126      	b.n	8015176 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014f28:	6839      	ldr	r1, [r7, #0]
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f000 fb0e 	bl	801554c <USBD_CtlError>
        err++;
 8014f30:	7afb      	ldrb	r3, [r7, #11]
 8014f32:	3301      	adds	r3, #1
 8014f34:	72fb      	strb	r3, [r7, #11]
      break;
 8014f36:	e11e      	b.n	8015176 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	687a      	ldr	r2, [r7, #4]
 8014f42:	7c12      	ldrb	r2, [r2, #16]
 8014f44:	f107 0108 	add.w	r1, r7, #8
 8014f48:	4610      	mov	r0, r2
 8014f4a:	4798      	blx	r3
 8014f4c:	60f8      	str	r0, [r7, #12]
      break;
 8014f4e:	e112      	b.n	8015176 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	7c1b      	ldrb	r3, [r3, #16]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d10d      	bne.n	8014f74 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f60:	f107 0208 	add.w	r2, r7, #8
 8014f64:	4610      	mov	r0, r2
 8014f66:	4798      	blx	r3
 8014f68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	2202      	movs	r2, #2
 8014f70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014f72:	e100      	b.n	8015176 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f7c:	f107 0208 	add.w	r2, r7, #8
 8014f80:	4610      	mov	r0, r2
 8014f82:	4798      	blx	r3
 8014f84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	3301      	adds	r3, #1
 8014f8a:	2202      	movs	r2, #2
 8014f8c:	701a      	strb	r2, [r3, #0]
      break;
 8014f8e:	e0f2      	b.n	8015176 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	885b      	ldrh	r3, [r3, #2]
 8014f94:	b2db      	uxtb	r3, r3
 8014f96:	2b05      	cmp	r3, #5
 8014f98:	f200 80ac 	bhi.w	80150f4 <USBD_GetDescriptor+0x258>
 8014f9c:	a201      	add	r2, pc, #4	; (adr r2, 8014fa4 <USBD_GetDescriptor+0x108>)
 8014f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fa2:	bf00      	nop
 8014fa4:	08014fbd 	.word	0x08014fbd
 8014fa8:	08014ff1 	.word	0x08014ff1
 8014fac:	08015025 	.word	0x08015025
 8014fb0:	08015059 	.word	0x08015059
 8014fb4:	0801508d 	.word	0x0801508d
 8014fb8:	080150c1 	.word	0x080150c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fc2:	685b      	ldr	r3, [r3, #4]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d00b      	beq.n	8014fe0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fce:	685b      	ldr	r3, [r3, #4]
 8014fd0:	687a      	ldr	r2, [r7, #4]
 8014fd2:	7c12      	ldrb	r2, [r2, #16]
 8014fd4:	f107 0108 	add.w	r1, r7, #8
 8014fd8:	4610      	mov	r0, r2
 8014fda:	4798      	blx	r3
 8014fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fde:	e091      	b.n	8015104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014fe0:	6839      	ldr	r1, [r7, #0]
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	f000 fab2 	bl	801554c <USBD_CtlError>
            err++;
 8014fe8:	7afb      	ldrb	r3, [r7, #11]
 8014fea:	3301      	adds	r3, #1
 8014fec:	72fb      	strb	r3, [r7, #11]
          break;
 8014fee:	e089      	b.n	8015104 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ff6:	689b      	ldr	r3, [r3, #8]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d00b      	beq.n	8015014 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015002:	689b      	ldr	r3, [r3, #8]
 8015004:	687a      	ldr	r2, [r7, #4]
 8015006:	7c12      	ldrb	r2, [r2, #16]
 8015008:	f107 0108 	add.w	r1, r7, #8
 801500c:	4610      	mov	r0, r2
 801500e:	4798      	blx	r3
 8015010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015012:	e077      	b.n	8015104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015014:	6839      	ldr	r1, [r7, #0]
 8015016:	6878      	ldr	r0, [r7, #4]
 8015018:	f000 fa98 	bl	801554c <USBD_CtlError>
            err++;
 801501c:	7afb      	ldrb	r3, [r7, #11]
 801501e:	3301      	adds	r3, #1
 8015020:	72fb      	strb	r3, [r7, #11]
          break;
 8015022:	e06f      	b.n	8015104 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801502a:	68db      	ldr	r3, [r3, #12]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d00b      	beq.n	8015048 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015036:	68db      	ldr	r3, [r3, #12]
 8015038:	687a      	ldr	r2, [r7, #4]
 801503a:	7c12      	ldrb	r2, [r2, #16]
 801503c:	f107 0108 	add.w	r1, r7, #8
 8015040:	4610      	mov	r0, r2
 8015042:	4798      	blx	r3
 8015044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015046:	e05d      	b.n	8015104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015048:	6839      	ldr	r1, [r7, #0]
 801504a:	6878      	ldr	r0, [r7, #4]
 801504c:	f000 fa7e 	bl	801554c <USBD_CtlError>
            err++;
 8015050:	7afb      	ldrb	r3, [r7, #11]
 8015052:	3301      	adds	r3, #1
 8015054:	72fb      	strb	r3, [r7, #11]
          break;
 8015056:	e055      	b.n	8015104 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801505e:	691b      	ldr	r3, [r3, #16]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d00b      	beq.n	801507c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801506a:	691b      	ldr	r3, [r3, #16]
 801506c:	687a      	ldr	r2, [r7, #4]
 801506e:	7c12      	ldrb	r2, [r2, #16]
 8015070:	f107 0108 	add.w	r1, r7, #8
 8015074:	4610      	mov	r0, r2
 8015076:	4798      	blx	r3
 8015078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801507a:	e043      	b.n	8015104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801507c:	6839      	ldr	r1, [r7, #0]
 801507e:	6878      	ldr	r0, [r7, #4]
 8015080:	f000 fa64 	bl	801554c <USBD_CtlError>
            err++;
 8015084:	7afb      	ldrb	r3, [r7, #11]
 8015086:	3301      	adds	r3, #1
 8015088:	72fb      	strb	r3, [r7, #11]
          break;
 801508a:	e03b      	b.n	8015104 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015092:	695b      	ldr	r3, [r3, #20]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d00b      	beq.n	80150b0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801509e:	695b      	ldr	r3, [r3, #20]
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	7c12      	ldrb	r2, [r2, #16]
 80150a4:	f107 0108 	add.w	r1, r7, #8
 80150a8:	4610      	mov	r0, r2
 80150aa:	4798      	blx	r3
 80150ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80150ae:	e029      	b.n	8015104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80150b0:	6839      	ldr	r1, [r7, #0]
 80150b2:	6878      	ldr	r0, [r7, #4]
 80150b4:	f000 fa4a 	bl	801554c <USBD_CtlError>
            err++;
 80150b8:	7afb      	ldrb	r3, [r7, #11]
 80150ba:	3301      	adds	r3, #1
 80150bc:	72fb      	strb	r3, [r7, #11]
          break;
 80150be:	e021      	b.n	8015104 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80150c6:	699b      	ldr	r3, [r3, #24]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d00b      	beq.n	80150e4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80150d2:	699b      	ldr	r3, [r3, #24]
 80150d4:	687a      	ldr	r2, [r7, #4]
 80150d6:	7c12      	ldrb	r2, [r2, #16]
 80150d8:	f107 0108 	add.w	r1, r7, #8
 80150dc:	4610      	mov	r0, r2
 80150de:	4798      	blx	r3
 80150e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80150e2:	e00f      	b.n	8015104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80150e4:	6839      	ldr	r1, [r7, #0]
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f000 fa30 	bl	801554c <USBD_CtlError>
            err++;
 80150ec:	7afb      	ldrb	r3, [r7, #11]
 80150ee:	3301      	adds	r3, #1
 80150f0:	72fb      	strb	r3, [r7, #11]
          break;
 80150f2:	e007      	b.n	8015104 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80150f4:	6839      	ldr	r1, [r7, #0]
 80150f6:	6878      	ldr	r0, [r7, #4]
 80150f8:	f000 fa28 	bl	801554c <USBD_CtlError>
          err++;
 80150fc:	7afb      	ldrb	r3, [r7, #11]
 80150fe:	3301      	adds	r3, #1
 8015100:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8015102:	bf00      	nop
      }
      break;
 8015104:	e037      	b.n	8015176 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	7c1b      	ldrb	r3, [r3, #16]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d109      	bne.n	8015122 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015116:	f107 0208 	add.w	r2, r7, #8
 801511a:	4610      	mov	r0, r2
 801511c:	4798      	blx	r3
 801511e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015120:	e029      	b.n	8015176 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015122:	6839      	ldr	r1, [r7, #0]
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f000 fa11 	bl	801554c <USBD_CtlError>
        err++;
 801512a:	7afb      	ldrb	r3, [r7, #11]
 801512c:	3301      	adds	r3, #1
 801512e:	72fb      	strb	r3, [r7, #11]
      break;
 8015130:	e021      	b.n	8015176 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	7c1b      	ldrb	r3, [r3, #16]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d10d      	bne.n	8015156 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015142:	f107 0208 	add.w	r2, r7, #8
 8015146:	4610      	mov	r0, r2
 8015148:	4798      	blx	r3
 801514a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	3301      	adds	r3, #1
 8015150:	2207      	movs	r2, #7
 8015152:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015154:	e00f      	b.n	8015176 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015156:	6839      	ldr	r1, [r7, #0]
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f000 f9f7 	bl	801554c <USBD_CtlError>
        err++;
 801515e:	7afb      	ldrb	r3, [r7, #11]
 8015160:	3301      	adds	r3, #1
 8015162:	72fb      	strb	r3, [r7, #11]
      break;
 8015164:	e007      	b.n	8015176 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015166:	6839      	ldr	r1, [r7, #0]
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f000 f9ef 	bl	801554c <USBD_CtlError>
      err++;
 801516e:	7afb      	ldrb	r3, [r7, #11]
 8015170:	3301      	adds	r3, #1
 8015172:	72fb      	strb	r3, [r7, #11]
      break;
 8015174:	bf00      	nop
  }

  if (err != 0U)
 8015176:	7afb      	ldrb	r3, [r7, #11]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d11e      	bne.n	80151ba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	88db      	ldrh	r3, [r3, #6]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d016      	beq.n	80151b2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015184:	893b      	ldrh	r3, [r7, #8]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d00e      	beq.n	80151a8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	88da      	ldrh	r2, [r3, #6]
 801518e:	893b      	ldrh	r3, [r7, #8]
 8015190:	4293      	cmp	r3, r2
 8015192:	bf28      	it	cs
 8015194:	4613      	movcs	r3, r2
 8015196:	b29b      	uxth	r3, r3
 8015198:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801519a:	893b      	ldrh	r3, [r7, #8]
 801519c:	461a      	mov	r2, r3
 801519e:	68f9      	ldr	r1, [r7, #12]
 80151a0:	6878      	ldr	r0, [r7, #4]
 80151a2:	f000 fa44 	bl	801562e <USBD_CtlSendData>
 80151a6:	e009      	b.n	80151bc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80151a8:	6839      	ldr	r1, [r7, #0]
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	f000 f9ce 	bl	801554c <USBD_CtlError>
 80151b0:	e004      	b.n	80151bc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f000 fa95 	bl	80156e2 <USBD_CtlSendStatus>
 80151b8:	e000      	b.n	80151bc <USBD_GetDescriptor+0x320>
    return;
 80151ba:	bf00      	nop
  }
}
 80151bc:	3710      	adds	r7, #16
 80151be:	46bd      	mov	sp, r7
 80151c0:	bd80      	pop	{r7, pc}
 80151c2:	bf00      	nop

080151c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b084      	sub	sp, #16
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
 80151cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80151ce:	683b      	ldr	r3, [r7, #0]
 80151d0:	889b      	ldrh	r3, [r3, #4]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d131      	bne.n	801523a <USBD_SetAddress+0x76>
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	88db      	ldrh	r3, [r3, #6]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d12d      	bne.n	801523a <USBD_SetAddress+0x76>
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	885b      	ldrh	r3, [r3, #2]
 80151e2:	2b7f      	cmp	r3, #127	; 0x7f
 80151e4:	d829      	bhi.n	801523a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	885b      	ldrh	r3, [r3, #2]
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151f8:	b2db      	uxtb	r3, r3
 80151fa:	2b03      	cmp	r3, #3
 80151fc:	d104      	bne.n	8015208 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80151fe:	6839      	ldr	r1, [r7, #0]
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f000 f9a3 	bl	801554c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015206:	e01d      	b.n	8015244 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	7bfa      	ldrb	r2, [r7, #15]
 801520c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015210:	7bfb      	ldrb	r3, [r7, #15]
 8015212:	4619      	mov	r1, r3
 8015214:	6878      	ldr	r0, [r7, #4]
 8015216:	f000 fea1 	bl	8015f5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801521a:	6878      	ldr	r0, [r7, #4]
 801521c:	f000 fa61 	bl	80156e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015220:	7bfb      	ldrb	r3, [r7, #15]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d004      	beq.n	8015230 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	2202      	movs	r2, #2
 801522a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801522e:	e009      	b.n	8015244 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2201      	movs	r2, #1
 8015234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015238:	e004      	b.n	8015244 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801523a:	6839      	ldr	r1, [r7, #0]
 801523c:	6878      	ldr	r0, [r7, #4]
 801523e:	f000 f985 	bl	801554c <USBD_CtlError>
  }
}
 8015242:	bf00      	nop
 8015244:	bf00      	nop
 8015246:	3710      	adds	r7, #16
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}

0801524c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b084      	sub	sp, #16
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015256:	2300      	movs	r3, #0
 8015258:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	885b      	ldrh	r3, [r3, #2]
 801525e:	b2da      	uxtb	r2, r3
 8015260:	4b4c      	ldr	r3, [pc, #304]	; (8015394 <USBD_SetConfig+0x148>)
 8015262:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015264:	4b4b      	ldr	r3, [pc, #300]	; (8015394 <USBD_SetConfig+0x148>)
 8015266:	781b      	ldrb	r3, [r3, #0]
 8015268:	2b01      	cmp	r3, #1
 801526a:	d905      	bls.n	8015278 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801526c:	6839      	ldr	r1, [r7, #0]
 801526e:	6878      	ldr	r0, [r7, #4]
 8015270:	f000 f96c 	bl	801554c <USBD_CtlError>
    return USBD_FAIL;
 8015274:	2303      	movs	r3, #3
 8015276:	e088      	b.n	801538a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801527e:	b2db      	uxtb	r3, r3
 8015280:	2b02      	cmp	r3, #2
 8015282:	d002      	beq.n	801528a <USBD_SetConfig+0x3e>
 8015284:	2b03      	cmp	r3, #3
 8015286:	d025      	beq.n	80152d4 <USBD_SetConfig+0x88>
 8015288:	e071      	b.n	801536e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801528a:	4b42      	ldr	r3, [pc, #264]	; (8015394 <USBD_SetConfig+0x148>)
 801528c:	781b      	ldrb	r3, [r3, #0]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d01c      	beq.n	80152cc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8015292:	4b40      	ldr	r3, [pc, #256]	; (8015394 <USBD_SetConfig+0x148>)
 8015294:	781b      	ldrb	r3, [r3, #0]
 8015296:	461a      	mov	r2, r3
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801529c:	4b3d      	ldr	r3, [pc, #244]	; (8015394 <USBD_SetConfig+0x148>)
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	4619      	mov	r1, r3
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f7ff f992 	bl	80145cc <USBD_SetClassConfig>
 80152a8:	4603      	mov	r3, r0
 80152aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80152ac:	7bfb      	ldrb	r3, [r7, #15]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d004      	beq.n	80152bc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80152b2:	6839      	ldr	r1, [r7, #0]
 80152b4:	6878      	ldr	r0, [r7, #4]
 80152b6:	f000 f949 	bl	801554c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80152ba:	e065      	b.n	8015388 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f000 fa10 	bl	80156e2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2203      	movs	r2, #3
 80152c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80152ca:	e05d      	b.n	8015388 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80152cc:	6878      	ldr	r0, [r7, #4]
 80152ce:	f000 fa08 	bl	80156e2 <USBD_CtlSendStatus>
      break;
 80152d2:	e059      	b.n	8015388 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80152d4:	4b2f      	ldr	r3, [pc, #188]	; (8015394 <USBD_SetConfig+0x148>)
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d112      	bne.n	8015302 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2202      	movs	r2, #2
 80152e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80152e4:	4b2b      	ldr	r3, [pc, #172]	; (8015394 <USBD_SetConfig+0x148>)
 80152e6:	781b      	ldrb	r3, [r3, #0]
 80152e8:	461a      	mov	r2, r3
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80152ee:	4b29      	ldr	r3, [pc, #164]	; (8015394 <USBD_SetConfig+0x148>)
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	4619      	mov	r1, r3
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7ff f985 	bl	8014604 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f000 f9f1 	bl	80156e2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015300:	e042      	b.n	8015388 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8015302:	4b24      	ldr	r3, [pc, #144]	; (8015394 <USBD_SetConfig+0x148>)
 8015304:	781b      	ldrb	r3, [r3, #0]
 8015306:	461a      	mov	r2, r3
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	429a      	cmp	r2, r3
 801530e:	d02a      	beq.n	8015366 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	685b      	ldr	r3, [r3, #4]
 8015314:	b2db      	uxtb	r3, r3
 8015316:	4619      	mov	r1, r3
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f7ff f973 	bl	8014604 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801531e:	4b1d      	ldr	r3, [pc, #116]	; (8015394 <USBD_SetConfig+0x148>)
 8015320:	781b      	ldrb	r3, [r3, #0]
 8015322:	461a      	mov	r2, r3
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015328:	4b1a      	ldr	r3, [pc, #104]	; (8015394 <USBD_SetConfig+0x148>)
 801532a:	781b      	ldrb	r3, [r3, #0]
 801532c:	4619      	mov	r1, r3
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	f7ff f94c 	bl	80145cc <USBD_SetClassConfig>
 8015334:	4603      	mov	r3, r0
 8015336:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015338:	7bfb      	ldrb	r3, [r7, #15]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d00f      	beq.n	801535e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801533e:	6839      	ldr	r1, [r7, #0]
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f000 f903 	bl	801554c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	b2db      	uxtb	r3, r3
 801534c:	4619      	mov	r1, r3
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f7ff f958 	bl	8014604 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2202      	movs	r2, #2
 8015358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801535c:	e014      	b.n	8015388 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f000 f9bf 	bl	80156e2 <USBD_CtlSendStatus>
      break;
 8015364:	e010      	b.n	8015388 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f000 f9bb 	bl	80156e2 <USBD_CtlSendStatus>
      break;
 801536c:	e00c      	b.n	8015388 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801536e:	6839      	ldr	r1, [r7, #0]
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	f000 f8eb 	bl	801554c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015376:	4b07      	ldr	r3, [pc, #28]	; (8015394 <USBD_SetConfig+0x148>)
 8015378:	781b      	ldrb	r3, [r3, #0]
 801537a:	4619      	mov	r1, r3
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f7ff f941 	bl	8014604 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015382:	2303      	movs	r3, #3
 8015384:	73fb      	strb	r3, [r7, #15]
      break;
 8015386:	bf00      	nop
  }

  return ret;
 8015388:	7bfb      	ldrb	r3, [r7, #15]
}
 801538a:	4618      	mov	r0, r3
 801538c:	3710      	adds	r7, #16
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	200023dc 	.word	0x200023dc

08015398 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	88db      	ldrh	r3, [r3, #6]
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	d004      	beq.n	80153b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80153aa:	6839      	ldr	r1, [r7, #0]
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f000 f8cd 	bl	801554c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80153b2:	e023      	b.n	80153fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	2b02      	cmp	r3, #2
 80153be:	dc02      	bgt.n	80153c6 <USBD_GetConfig+0x2e>
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	dc03      	bgt.n	80153cc <USBD_GetConfig+0x34>
 80153c4:	e015      	b.n	80153f2 <USBD_GetConfig+0x5a>
 80153c6:	2b03      	cmp	r3, #3
 80153c8:	d00b      	beq.n	80153e2 <USBD_GetConfig+0x4a>
 80153ca:	e012      	b.n	80153f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2200      	movs	r2, #0
 80153d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	3308      	adds	r3, #8
 80153d6:	2201      	movs	r2, #1
 80153d8:	4619      	mov	r1, r3
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f000 f927 	bl	801562e <USBD_CtlSendData>
        break;
 80153e0:	e00c      	b.n	80153fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	3304      	adds	r3, #4
 80153e6:	2201      	movs	r2, #1
 80153e8:	4619      	mov	r1, r3
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	f000 f91f 	bl	801562e <USBD_CtlSendData>
        break;
 80153f0:	e004      	b.n	80153fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80153f2:	6839      	ldr	r1, [r7, #0]
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f000 f8a9 	bl	801554c <USBD_CtlError>
        break;
 80153fa:	bf00      	nop
}
 80153fc:	bf00      	nop
 80153fe:	3708      	adds	r7, #8
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}

08015404 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b082      	sub	sp, #8
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
 801540c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015414:	b2db      	uxtb	r3, r3
 8015416:	3b01      	subs	r3, #1
 8015418:	2b02      	cmp	r3, #2
 801541a:	d81e      	bhi.n	801545a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	88db      	ldrh	r3, [r3, #6]
 8015420:	2b02      	cmp	r3, #2
 8015422:	d004      	beq.n	801542e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015424:	6839      	ldr	r1, [r7, #0]
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f000 f890 	bl	801554c <USBD_CtlError>
        break;
 801542c:	e01a      	b.n	8015464 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2201      	movs	r2, #1
 8015432:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801543a:	2b00      	cmp	r3, #0
 801543c:	d005      	beq.n	801544a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	68db      	ldr	r3, [r3, #12]
 8015442:	f043 0202 	orr.w	r2, r3, #2
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	330c      	adds	r3, #12
 801544e:	2202      	movs	r2, #2
 8015450:	4619      	mov	r1, r3
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f000 f8eb 	bl	801562e <USBD_CtlSendData>
      break;
 8015458:	e004      	b.n	8015464 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801545a:	6839      	ldr	r1, [r7, #0]
 801545c:	6878      	ldr	r0, [r7, #4]
 801545e:	f000 f875 	bl	801554c <USBD_CtlError>
      break;
 8015462:	bf00      	nop
  }
}
 8015464:	bf00      	nop
 8015466:	3708      	adds	r7, #8
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}

0801546c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b082      	sub	sp, #8
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
 8015474:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	885b      	ldrh	r3, [r3, #2]
 801547a:	2b01      	cmp	r3, #1
 801547c:	d106      	bne.n	801548c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	2201      	movs	r2, #1
 8015482:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015486:	6878      	ldr	r0, [r7, #4]
 8015488:	f000 f92b 	bl	80156e2 <USBD_CtlSendStatus>
  }
}
 801548c:	bf00      	nop
 801548e:	3708      	adds	r7, #8
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b082      	sub	sp, #8
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
 801549c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	3b01      	subs	r3, #1
 80154a8:	2b02      	cmp	r3, #2
 80154aa:	d80b      	bhi.n	80154c4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	885b      	ldrh	r3, [r3, #2]
 80154b0:	2b01      	cmp	r3, #1
 80154b2:	d10c      	bne.n	80154ce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	2200      	movs	r2, #0
 80154b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f000 f910 	bl	80156e2 <USBD_CtlSendStatus>
      }
      break;
 80154c2:	e004      	b.n	80154ce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80154c4:	6839      	ldr	r1, [r7, #0]
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f000 f840 	bl	801554c <USBD_CtlError>
      break;
 80154cc:	e000      	b.n	80154d0 <USBD_ClrFeature+0x3c>
      break;
 80154ce:	bf00      	nop
  }
}
 80154d0:	bf00      	nop
 80154d2:	3708      	adds	r7, #8
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}

080154d8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b084      	sub	sp, #16
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
 80154e0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80154e2:	683b      	ldr	r3, [r7, #0]
 80154e4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	781a      	ldrb	r2, [r3, #0]
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	3301      	adds	r3, #1
 80154f2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	781a      	ldrb	r2, [r3, #0]
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	3301      	adds	r3, #1
 8015500:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015502:	68f8      	ldr	r0, [r7, #12]
 8015504:	f7ff fa92 	bl	8014a2c <SWAPBYTE>
 8015508:	4603      	mov	r3, r0
 801550a:	461a      	mov	r2, r3
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	3301      	adds	r3, #1
 8015514:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	3301      	adds	r3, #1
 801551a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801551c:	68f8      	ldr	r0, [r7, #12]
 801551e:	f7ff fa85 	bl	8014a2c <SWAPBYTE>
 8015522:	4603      	mov	r3, r0
 8015524:	461a      	mov	r2, r3
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	3301      	adds	r3, #1
 801552e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	3301      	adds	r3, #1
 8015534:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015536:	68f8      	ldr	r0, [r7, #12]
 8015538:	f7ff fa78 	bl	8014a2c <SWAPBYTE>
 801553c:	4603      	mov	r3, r0
 801553e:	461a      	mov	r2, r3
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	80da      	strh	r2, [r3, #6]
}
 8015544:	bf00      	nop
 8015546:	3710      	adds	r7, #16
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}

0801554c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b082      	sub	sp, #8
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015556:	2180      	movs	r1, #128	; 0x80
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	f000 fc95 	bl	8015e88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801555e:	2100      	movs	r1, #0
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	f000 fc91 	bl	8015e88 <USBD_LL_StallEP>
}
 8015566:	bf00      	nop
 8015568:	3708      	adds	r7, #8
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}

0801556e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801556e:	b580      	push	{r7, lr}
 8015570:	b086      	sub	sp, #24
 8015572:	af00      	add	r7, sp, #0
 8015574:	60f8      	str	r0, [r7, #12]
 8015576:	60b9      	str	r1, [r7, #8]
 8015578:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801557a:	2300      	movs	r3, #0
 801557c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d036      	beq.n	80155f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015588:	6938      	ldr	r0, [r7, #16]
 801558a:	f000 f836 	bl	80155fa <USBD_GetLen>
 801558e:	4603      	mov	r3, r0
 8015590:	3301      	adds	r3, #1
 8015592:	b29b      	uxth	r3, r3
 8015594:	005b      	lsls	r3, r3, #1
 8015596:	b29a      	uxth	r2, r3
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801559c:	7dfb      	ldrb	r3, [r7, #23]
 801559e:	68ba      	ldr	r2, [r7, #8]
 80155a0:	4413      	add	r3, r2
 80155a2:	687a      	ldr	r2, [r7, #4]
 80155a4:	7812      	ldrb	r2, [r2, #0]
 80155a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80155a8:	7dfb      	ldrb	r3, [r7, #23]
 80155aa:	3301      	adds	r3, #1
 80155ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80155ae:	7dfb      	ldrb	r3, [r7, #23]
 80155b0:	68ba      	ldr	r2, [r7, #8]
 80155b2:	4413      	add	r3, r2
 80155b4:	2203      	movs	r2, #3
 80155b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80155b8:	7dfb      	ldrb	r3, [r7, #23]
 80155ba:	3301      	adds	r3, #1
 80155bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80155be:	e013      	b.n	80155e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80155c0:	7dfb      	ldrb	r3, [r7, #23]
 80155c2:	68ba      	ldr	r2, [r7, #8]
 80155c4:	4413      	add	r3, r2
 80155c6:	693a      	ldr	r2, [r7, #16]
 80155c8:	7812      	ldrb	r2, [r2, #0]
 80155ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	3301      	adds	r3, #1
 80155d0:	613b      	str	r3, [r7, #16]
    idx++;
 80155d2:	7dfb      	ldrb	r3, [r7, #23]
 80155d4:	3301      	adds	r3, #1
 80155d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80155d8:	7dfb      	ldrb	r3, [r7, #23]
 80155da:	68ba      	ldr	r2, [r7, #8]
 80155dc:	4413      	add	r3, r2
 80155de:	2200      	movs	r2, #0
 80155e0:	701a      	strb	r2, [r3, #0]
    idx++;
 80155e2:	7dfb      	ldrb	r3, [r7, #23]
 80155e4:	3301      	adds	r3, #1
 80155e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	781b      	ldrb	r3, [r3, #0]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d1e7      	bne.n	80155c0 <USBD_GetString+0x52>
 80155f0:	e000      	b.n	80155f4 <USBD_GetString+0x86>
    return;
 80155f2:	bf00      	nop
  }
}
 80155f4:	3718      	adds	r7, #24
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}

080155fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80155fa:	b480      	push	{r7}
 80155fc:	b085      	sub	sp, #20
 80155fe:	af00      	add	r7, sp, #0
 8015600:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015602:	2300      	movs	r3, #0
 8015604:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801560a:	e005      	b.n	8015618 <USBD_GetLen+0x1e>
  {
    len++;
 801560c:	7bfb      	ldrb	r3, [r7, #15]
 801560e:	3301      	adds	r3, #1
 8015610:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	3301      	adds	r3, #1
 8015616:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d1f5      	bne.n	801560c <USBD_GetLen+0x12>
  }

  return len;
 8015620:	7bfb      	ldrb	r3, [r7, #15]
}
 8015622:	4618      	mov	r0, r3
 8015624:	3714      	adds	r7, #20
 8015626:	46bd      	mov	sp, r7
 8015628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562c:	4770      	bx	lr

0801562e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801562e:	b580      	push	{r7, lr}
 8015630:	b084      	sub	sp, #16
 8015632:	af00      	add	r7, sp, #0
 8015634:	60f8      	str	r0, [r7, #12]
 8015636:	60b9      	str	r1, [r7, #8]
 8015638:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	2202      	movs	r2, #2
 801563e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	687a      	ldr	r2, [r7, #4]
 801564c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	68ba      	ldr	r2, [r7, #8]
 8015652:	2100      	movs	r1, #0
 8015654:	68f8      	ldr	r0, [r7, #12]
 8015656:	f000 fca0 	bl	8015f9a <USBD_LL_Transmit>

  return USBD_OK;
 801565a:	2300      	movs	r3, #0
}
 801565c:	4618      	mov	r0, r3
 801565e:	3710      	adds	r7, #16
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}

08015664 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b084      	sub	sp, #16
 8015668:	af00      	add	r7, sp, #0
 801566a:	60f8      	str	r0, [r7, #12]
 801566c:	60b9      	str	r1, [r7, #8]
 801566e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	68ba      	ldr	r2, [r7, #8]
 8015674:	2100      	movs	r1, #0
 8015676:	68f8      	ldr	r0, [r7, #12]
 8015678:	f000 fc8f 	bl	8015f9a <USBD_LL_Transmit>

  return USBD_OK;
 801567c:	2300      	movs	r3, #0
}
 801567e:	4618      	mov	r0, r3
 8015680:	3710      	adds	r7, #16
 8015682:	46bd      	mov	sp, r7
 8015684:	bd80      	pop	{r7, pc}

08015686 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015686:	b580      	push	{r7, lr}
 8015688:	b084      	sub	sp, #16
 801568a:	af00      	add	r7, sp, #0
 801568c:	60f8      	str	r0, [r7, #12]
 801568e:	60b9      	str	r1, [r7, #8]
 8015690:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	2203      	movs	r2, #3
 8015696:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	687a      	ldr	r2, [r7, #4]
 801569e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	687a      	ldr	r2, [r7, #4]
 80156a6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	68ba      	ldr	r2, [r7, #8]
 80156ae:	2100      	movs	r1, #0
 80156b0:	68f8      	ldr	r0, [r7, #12]
 80156b2:	f000 fc93 	bl	8015fdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80156b6:	2300      	movs	r3, #0
}
 80156b8:	4618      	mov	r0, r3
 80156ba:	3710      	adds	r7, #16
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}

080156c0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	60f8      	str	r0, [r7, #12]
 80156c8:	60b9      	str	r1, [r7, #8]
 80156ca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	68ba      	ldr	r2, [r7, #8]
 80156d0:	2100      	movs	r1, #0
 80156d2:	68f8      	ldr	r0, [r7, #12]
 80156d4:	f000 fc82 	bl	8015fdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80156d8:	2300      	movs	r3, #0
}
 80156da:	4618      	mov	r0, r3
 80156dc:	3710      	adds	r7, #16
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}

080156e2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80156e2:	b580      	push	{r7, lr}
 80156e4:	b082      	sub	sp, #8
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	2204      	movs	r2, #4
 80156ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80156f2:	2300      	movs	r3, #0
 80156f4:	2200      	movs	r2, #0
 80156f6:	2100      	movs	r1, #0
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f000 fc4e 	bl	8015f9a <USBD_LL_Transmit>

  return USBD_OK;
 80156fe:	2300      	movs	r3, #0
}
 8015700:	4618      	mov	r0, r3
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}

08015708 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b082      	sub	sp, #8
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	2205      	movs	r2, #5
 8015714:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015718:	2300      	movs	r3, #0
 801571a:	2200      	movs	r2, #0
 801571c:	2100      	movs	r1, #0
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f000 fc5c 	bl	8015fdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015724:	2300      	movs	r3, #0
}
 8015726:	4618      	mov	r0, r3
 8015728:	3708      	adds	r7, #8
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}
	...

08015730 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8015734:	2200      	movs	r2, #0
 8015736:	4912      	ldr	r1, [pc, #72]	; (8015780 <MX_USB_Device_Init+0x50>)
 8015738:	4812      	ldr	r0, [pc, #72]	; (8015784 <MX_USB_Device_Init+0x54>)
 801573a:	f7fe fed9 	bl	80144f0 <USBD_Init>
 801573e:	4603      	mov	r3, r0
 8015740:	2b00      	cmp	r3, #0
 8015742:	d001      	beq.n	8015748 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8015744:	f7ee fdaa 	bl	800429c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015748:	490f      	ldr	r1, [pc, #60]	; (8015788 <MX_USB_Device_Init+0x58>)
 801574a:	480e      	ldr	r0, [pc, #56]	; (8015784 <MX_USB_Device_Init+0x54>)
 801574c:	f7fe ff00 	bl	8014550 <USBD_RegisterClass>
 8015750:	4603      	mov	r3, r0
 8015752:	2b00      	cmp	r3, #0
 8015754:	d001      	beq.n	801575a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8015756:	f7ee fda1 	bl	800429c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801575a:	490c      	ldr	r1, [pc, #48]	; (801578c <MX_USB_Device_Init+0x5c>)
 801575c:	4809      	ldr	r0, [pc, #36]	; (8015784 <MX_USB_Device_Init+0x54>)
 801575e:	f7fe fe21 	bl	80143a4 <USBD_CDC_RegisterInterface>
 8015762:	4603      	mov	r3, r0
 8015764:	2b00      	cmp	r3, #0
 8015766:	d001      	beq.n	801576c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8015768:	f7ee fd98 	bl	800429c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801576c:	4805      	ldr	r0, [pc, #20]	; (8015784 <MX_USB_Device_Init+0x54>)
 801576e:	f7fe ff16 	bl	801459e <USBD_Start>
 8015772:	4603      	mov	r3, r0
 8015774:	2b00      	cmp	r3, #0
 8015776:	d001      	beq.n	801577c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8015778:	f7ee fd90 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801577c:	bf00      	nop
 801577e:	bd80      	pop	{r7, pc}
 8015780:	20000324 	.word	0x20000324
 8015784:	200023e0 	.word	0x200023e0
 8015788:	2000020c 	.word	0x2000020c
 801578c:	20000310 	.word	0x20000310

08015790 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015794:	2200      	movs	r2, #0
 8015796:	4905      	ldr	r1, [pc, #20]	; (80157ac <CDC_Init_FS+0x1c>)
 8015798:	4805      	ldr	r0, [pc, #20]	; (80157b0 <CDC_Init_FS+0x20>)
 801579a:	f7fe fe18 	bl	80143ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801579e:	4905      	ldr	r1, [pc, #20]	; (80157b4 <CDC_Init_FS+0x24>)
 80157a0:	4803      	ldr	r0, [pc, #12]	; (80157b0 <CDC_Init_FS+0x20>)
 80157a2:	f7fe fe32 	bl	801440a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80157a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	20002ab0 	.word	0x20002ab0
 80157b0:	200023e0 	.word	0x200023e0
 80157b4:	200026b0 	.word	0x200026b0

080157b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80157b8:	b480      	push	{r7}
 80157ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80157bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80157be:	4618      	mov	r0, r3
 80157c0:	46bd      	mov	sp, r7
 80157c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c6:	4770      	bx	lr

080157c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80157c8:	b480      	push	{r7}
 80157ca:	b083      	sub	sp, #12
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	4603      	mov	r3, r0
 80157d0:	6039      	str	r1, [r7, #0]
 80157d2:	71fb      	strb	r3, [r7, #7]
 80157d4:	4613      	mov	r3, r2
 80157d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80157d8:	79fb      	ldrb	r3, [r7, #7]
 80157da:	2b23      	cmp	r3, #35	; 0x23
 80157dc:	d84a      	bhi.n	8015874 <CDC_Control_FS+0xac>
 80157de:	a201      	add	r2, pc, #4	; (adr r2, 80157e4 <CDC_Control_FS+0x1c>)
 80157e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157e4:	08015875 	.word	0x08015875
 80157e8:	08015875 	.word	0x08015875
 80157ec:	08015875 	.word	0x08015875
 80157f0:	08015875 	.word	0x08015875
 80157f4:	08015875 	.word	0x08015875
 80157f8:	08015875 	.word	0x08015875
 80157fc:	08015875 	.word	0x08015875
 8015800:	08015875 	.word	0x08015875
 8015804:	08015875 	.word	0x08015875
 8015808:	08015875 	.word	0x08015875
 801580c:	08015875 	.word	0x08015875
 8015810:	08015875 	.word	0x08015875
 8015814:	08015875 	.word	0x08015875
 8015818:	08015875 	.word	0x08015875
 801581c:	08015875 	.word	0x08015875
 8015820:	08015875 	.word	0x08015875
 8015824:	08015875 	.word	0x08015875
 8015828:	08015875 	.word	0x08015875
 801582c:	08015875 	.word	0x08015875
 8015830:	08015875 	.word	0x08015875
 8015834:	08015875 	.word	0x08015875
 8015838:	08015875 	.word	0x08015875
 801583c:	08015875 	.word	0x08015875
 8015840:	08015875 	.word	0x08015875
 8015844:	08015875 	.word	0x08015875
 8015848:	08015875 	.word	0x08015875
 801584c:	08015875 	.word	0x08015875
 8015850:	08015875 	.word	0x08015875
 8015854:	08015875 	.word	0x08015875
 8015858:	08015875 	.word	0x08015875
 801585c:	08015875 	.word	0x08015875
 8015860:	08015875 	.word	0x08015875
 8015864:	08015875 	.word	0x08015875
 8015868:	08015875 	.word	0x08015875
 801586c:	08015875 	.word	0x08015875
 8015870:	08015875 	.word	0x08015875
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015874:	bf00      	nop
  }

  return (USBD_OK);
 8015876:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015878:	4618      	mov	r0, r3
 801587a:	370c      	adds	r7, #12
 801587c:	46bd      	mov	sp, r7
 801587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015882:	4770      	bx	lr

08015884 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b082      	sub	sp, #8
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801588e:	6879      	ldr	r1, [r7, #4]
 8015890:	4805      	ldr	r0, [pc, #20]	; (80158a8 <CDC_Receive_FS+0x24>)
 8015892:	f7fe fdba 	bl	801440a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015896:	4804      	ldr	r0, [pc, #16]	; (80158a8 <CDC_Receive_FS+0x24>)
 8015898:	f7fe fe00 	bl	801449c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801589c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801589e:	4618      	mov	r0, r3
 80158a0:	3708      	adds	r7, #8
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}
 80158a6:	bf00      	nop
 80158a8:	200023e0 	.word	0x200023e0

080158ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b084      	sub	sp, #16
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
 80158b4:	460b      	mov	r3, r1
 80158b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80158b8:	2300      	movs	r3, #0
 80158ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80158bc:	4b0d      	ldr	r3, [pc, #52]	; (80158f4 <CDC_Transmit_FS+0x48>)
 80158be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80158c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d001      	beq.n	80158d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80158ce:	2301      	movs	r3, #1
 80158d0:	e00b      	b.n	80158ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80158d2:	887b      	ldrh	r3, [r7, #2]
 80158d4:	461a      	mov	r2, r3
 80158d6:	6879      	ldr	r1, [r7, #4]
 80158d8:	4806      	ldr	r0, [pc, #24]	; (80158f4 <CDC_Transmit_FS+0x48>)
 80158da:	f7fe fd78 	bl	80143ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80158de:	4805      	ldr	r0, [pc, #20]	; (80158f4 <CDC_Transmit_FS+0x48>)
 80158e0:	f7fe fdac 	bl	801443c <USBD_CDC_TransmitPacket>
 80158e4:	4603      	mov	r3, r0
 80158e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80158e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3710      	adds	r7, #16
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	bf00      	nop
 80158f4:	200023e0 	.word	0x200023e0

080158f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80158f8:	b480      	push	{r7}
 80158fa:	b087      	sub	sp, #28
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	60b9      	str	r1, [r7, #8]
 8015902:	4613      	mov	r3, r2
 8015904:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015906:	2300      	movs	r3, #0
 8015908:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801590a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801590e:	4618      	mov	r0, r3
 8015910:	371c      	adds	r7, #28
 8015912:	46bd      	mov	sp, r7
 8015914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015918:	4770      	bx	lr
	...

0801591c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801591c:	b480      	push	{r7}
 801591e:	b083      	sub	sp, #12
 8015920:	af00      	add	r7, sp, #0
 8015922:	4603      	mov	r3, r0
 8015924:	6039      	str	r1, [r7, #0]
 8015926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	2212      	movs	r2, #18
 801592c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801592e:	4b03      	ldr	r3, [pc, #12]	; (801593c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8015930:	4618      	mov	r0, r3
 8015932:	370c      	adds	r7, #12
 8015934:	46bd      	mov	sp, r7
 8015936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593a:	4770      	bx	lr
 801593c:	20000344 	.word	0x20000344

08015940 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015940:	b480      	push	{r7}
 8015942:	b083      	sub	sp, #12
 8015944:	af00      	add	r7, sp, #0
 8015946:	4603      	mov	r3, r0
 8015948:	6039      	str	r1, [r7, #0]
 801594a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	2204      	movs	r2, #4
 8015950:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015952:	4b03      	ldr	r3, [pc, #12]	; (8015960 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8015954:	4618      	mov	r0, r3
 8015956:	370c      	adds	r7, #12
 8015958:	46bd      	mov	sp, r7
 801595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595e:	4770      	bx	lr
 8015960:	20000358 	.word	0x20000358

08015964 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b082      	sub	sp, #8
 8015968:	af00      	add	r7, sp, #0
 801596a:	4603      	mov	r3, r0
 801596c:	6039      	str	r1, [r7, #0]
 801596e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015970:	79fb      	ldrb	r3, [r7, #7]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d105      	bne.n	8015982 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015976:	683a      	ldr	r2, [r7, #0]
 8015978:	4907      	ldr	r1, [pc, #28]	; (8015998 <USBD_CDC_ProductStrDescriptor+0x34>)
 801597a:	4808      	ldr	r0, [pc, #32]	; (801599c <USBD_CDC_ProductStrDescriptor+0x38>)
 801597c:	f7ff fdf7 	bl	801556e <USBD_GetString>
 8015980:	e004      	b.n	801598c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015982:	683a      	ldr	r2, [r7, #0]
 8015984:	4904      	ldr	r1, [pc, #16]	; (8015998 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015986:	4805      	ldr	r0, [pc, #20]	; (801599c <USBD_CDC_ProductStrDescriptor+0x38>)
 8015988:	f7ff fdf1 	bl	801556e <USBD_GetString>
  }
  return USBD_StrDesc;
 801598c:	4b02      	ldr	r3, [pc, #8]	; (8015998 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801598e:	4618      	mov	r0, r3
 8015990:	3708      	adds	r7, #8
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}
 8015996:	bf00      	nop
 8015998:	20002eb0 	.word	0x20002eb0
 801599c:	0801ad94 	.word	0x0801ad94

080159a0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	4603      	mov	r3, r0
 80159a8:	6039      	str	r1, [r7, #0]
 80159aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80159ac:	683a      	ldr	r2, [r7, #0]
 80159ae:	4904      	ldr	r1, [pc, #16]	; (80159c0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80159b0:	4804      	ldr	r0, [pc, #16]	; (80159c4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80159b2:	f7ff fddc 	bl	801556e <USBD_GetString>
  return USBD_StrDesc;
 80159b6:	4b02      	ldr	r3, [pc, #8]	; (80159c0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3708      	adds	r7, #8
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}
 80159c0:	20002eb0 	.word	0x20002eb0
 80159c4:	0801adac 	.word	0x0801adac

080159c8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b082      	sub	sp, #8
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	4603      	mov	r3, r0
 80159d0:	6039      	str	r1, [r7, #0]
 80159d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	221a      	movs	r2, #26
 80159d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80159da:	f000 f843 	bl	8015a64 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80159de:	4b02      	ldr	r3, [pc, #8]	; (80159e8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3708      	adds	r7, #8
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}
 80159e8:	2000035c 	.word	0x2000035c

080159ec <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b082      	sub	sp, #8
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	4603      	mov	r3, r0
 80159f4:	6039      	str	r1, [r7, #0]
 80159f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80159f8:	79fb      	ldrb	r3, [r7, #7]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d105      	bne.n	8015a0a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80159fe:	683a      	ldr	r2, [r7, #0]
 8015a00:	4907      	ldr	r1, [pc, #28]	; (8015a20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015a02:	4808      	ldr	r0, [pc, #32]	; (8015a24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015a04:	f7ff fdb3 	bl	801556e <USBD_GetString>
 8015a08:	e004      	b.n	8015a14 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015a0a:	683a      	ldr	r2, [r7, #0]
 8015a0c:	4904      	ldr	r1, [pc, #16]	; (8015a20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015a0e:	4805      	ldr	r0, [pc, #20]	; (8015a24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015a10:	f7ff fdad 	bl	801556e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a14:	4b02      	ldr	r3, [pc, #8]	; (8015a20 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3708      	adds	r7, #8
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	20002eb0 	.word	0x20002eb0
 8015a24:	0801adc0 	.word	0x0801adc0

08015a28 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b082      	sub	sp, #8
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	4603      	mov	r3, r0
 8015a30:	6039      	str	r1, [r7, #0]
 8015a32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015a34:	79fb      	ldrb	r3, [r7, #7]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d105      	bne.n	8015a46 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015a3a:	683a      	ldr	r2, [r7, #0]
 8015a3c:	4907      	ldr	r1, [pc, #28]	; (8015a5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015a3e:	4808      	ldr	r0, [pc, #32]	; (8015a60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015a40:	f7ff fd95 	bl	801556e <USBD_GetString>
 8015a44:	e004      	b.n	8015a50 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015a46:	683a      	ldr	r2, [r7, #0]
 8015a48:	4904      	ldr	r1, [pc, #16]	; (8015a5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015a4a:	4805      	ldr	r0, [pc, #20]	; (8015a60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015a4c:	f7ff fd8f 	bl	801556e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a50:	4b02      	ldr	r3, [pc, #8]	; (8015a5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8015a52:	4618      	mov	r0, r3
 8015a54:	3708      	adds	r7, #8
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}
 8015a5a:	bf00      	nop
 8015a5c:	20002eb0 	.word	0x20002eb0
 8015a60:	0801adcc 	.word	0x0801adcc

08015a64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b084      	sub	sp, #16
 8015a68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015a6a:	4b0f      	ldr	r3, [pc, #60]	; (8015aa8 <Get_SerialNum+0x44>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015a70:	4b0e      	ldr	r3, [pc, #56]	; (8015aac <Get_SerialNum+0x48>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015a76:	4b0e      	ldr	r3, [pc, #56]	; (8015ab0 <Get_SerialNum+0x4c>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015a7c:	68fa      	ldr	r2, [r7, #12]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	4413      	add	r3, r2
 8015a82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d009      	beq.n	8015a9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015a8a:	2208      	movs	r2, #8
 8015a8c:	4909      	ldr	r1, [pc, #36]	; (8015ab4 <Get_SerialNum+0x50>)
 8015a8e:	68f8      	ldr	r0, [r7, #12]
 8015a90:	f000 f814 	bl	8015abc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015a94:	2204      	movs	r2, #4
 8015a96:	4908      	ldr	r1, [pc, #32]	; (8015ab8 <Get_SerialNum+0x54>)
 8015a98:	68b8      	ldr	r0, [r7, #8]
 8015a9a:	f000 f80f 	bl	8015abc <IntToUnicode>
  }
}
 8015a9e:	bf00      	nop
 8015aa0:	3710      	adds	r7, #16
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	1fff7590 	.word	0x1fff7590
 8015aac:	1fff7594 	.word	0x1fff7594
 8015ab0:	1fff7598 	.word	0x1fff7598
 8015ab4:	2000035e 	.word	0x2000035e
 8015ab8:	2000036e 	.word	0x2000036e

08015abc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015abc:	b480      	push	{r7}
 8015abe:	b087      	sub	sp, #28
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	60f8      	str	r0, [r7, #12]
 8015ac4:	60b9      	str	r1, [r7, #8]
 8015ac6:	4613      	mov	r3, r2
 8015ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015aca:	2300      	movs	r3, #0
 8015acc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015ace:	2300      	movs	r3, #0
 8015ad0:	75fb      	strb	r3, [r7, #23]
 8015ad2:	e027      	b.n	8015b24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	0f1b      	lsrs	r3, r3, #28
 8015ad8:	2b09      	cmp	r3, #9
 8015ada:	d80b      	bhi.n	8015af4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	0f1b      	lsrs	r3, r3, #28
 8015ae0:	b2da      	uxtb	r2, r3
 8015ae2:	7dfb      	ldrb	r3, [r7, #23]
 8015ae4:	005b      	lsls	r3, r3, #1
 8015ae6:	4619      	mov	r1, r3
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	440b      	add	r3, r1
 8015aec:	3230      	adds	r2, #48	; 0x30
 8015aee:	b2d2      	uxtb	r2, r2
 8015af0:	701a      	strb	r2, [r3, #0]
 8015af2:	e00a      	b.n	8015b0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	0f1b      	lsrs	r3, r3, #28
 8015af8:	b2da      	uxtb	r2, r3
 8015afa:	7dfb      	ldrb	r3, [r7, #23]
 8015afc:	005b      	lsls	r3, r3, #1
 8015afe:	4619      	mov	r1, r3
 8015b00:	68bb      	ldr	r3, [r7, #8]
 8015b02:	440b      	add	r3, r1
 8015b04:	3237      	adds	r2, #55	; 0x37
 8015b06:	b2d2      	uxtb	r2, r2
 8015b08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	011b      	lsls	r3, r3, #4
 8015b0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015b10:	7dfb      	ldrb	r3, [r7, #23]
 8015b12:	005b      	lsls	r3, r3, #1
 8015b14:	3301      	adds	r3, #1
 8015b16:	68ba      	ldr	r2, [r7, #8]
 8015b18:	4413      	add	r3, r2
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015b1e:	7dfb      	ldrb	r3, [r7, #23]
 8015b20:	3301      	adds	r3, #1
 8015b22:	75fb      	strb	r3, [r7, #23]
 8015b24:	7dfa      	ldrb	r2, [r7, #23]
 8015b26:	79fb      	ldrb	r3, [r7, #7]
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d3d3      	bcc.n	8015ad4 <IntToUnicode+0x18>
  }
}
 8015b2c:	bf00      	nop
 8015b2e:	bf00      	nop
 8015b30:	371c      	adds	r7, #28
 8015b32:	46bd      	mov	sp, r7
 8015b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b38:	4770      	bx	lr
	...

08015b3c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b094      	sub	sp, #80	; 0x50
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8015b44:	f107 030c 	add.w	r3, r7, #12
 8015b48:	2244      	movs	r2, #68	; 0x44
 8015b4a:	2100      	movs	r1, #0
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f001 fa94 	bl	801707a <memset>
  if(pcdHandle->Instance==USB)
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	4a15      	ldr	r2, [pc, #84]	; (8015bac <HAL_PCD_MspInit+0x70>)
 8015b58:	4293      	cmp	r3, r2
 8015b5a:	d122      	bne.n	8015ba2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015b60:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015b62:	2300      	movs	r3, #0
 8015b64:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015b66:	f107 030c 	add.w	r3, r7, #12
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f7f6 fc1e 	bl	800c3ac <HAL_RCCEx_PeriphCLKConfig>
 8015b70:	4603      	mov	r3, r0
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d001      	beq.n	8015b7a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8015b76:	f7ee fb91 	bl	800429c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015b7a:	4b0d      	ldr	r3, [pc, #52]	; (8015bb0 <HAL_PCD_MspInit+0x74>)
 8015b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b7e:	4a0c      	ldr	r2, [pc, #48]	; (8015bb0 <HAL_PCD_MspInit+0x74>)
 8015b80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015b84:	6593      	str	r3, [r2, #88]	; 0x58
 8015b86:	4b0a      	ldr	r3, [pc, #40]	; (8015bb0 <HAL_PCD_MspInit+0x74>)
 8015b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015b8e:	60bb      	str	r3, [r7, #8]
 8015b90:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8015b92:	2200      	movs	r2, #0
 8015b94:	2100      	movs	r1, #0
 8015b96:	2014      	movs	r0, #20
 8015b98:	f7f2 fe65 	bl	8008866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015b9c:	2014      	movs	r0, #20
 8015b9e:	f7f2 fe7c 	bl	800889a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015ba2:	bf00      	nop
 8015ba4:	3750      	adds	r7, #80	; 0x50
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd80      	pop	{r7, pc}
 8015baa:	bf00      	nop
 8015bac:	40005c00 	.word	0x40005c00
 8015bb0:	40021000 	.word	0x40021000

08015bb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b082      	sub	sp, #8
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015bc8:	4619      	mov	r1, r3
 8015bca:	4610      	mov	r0, r2
 8015bcc:	f7fe fd32 	bl	8014634 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015bd0:	bf00      	nop
 8015bd2:	3708      	adds	r7, #8
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}

08015bd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b082      	sub	sp, #8
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	460b      	mov	r3, r1
 8015be2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8015bea:	78fa      	ldrb	r2, [r7, #3]
 8015bec:	6879      	ldr	r1, [r7, #4]
 8015bee:	4613      	mov	r3, r2
 8015bf0:	009b      	lsls	r3, r3, #2
 8015bf2:	4413      	add	r3, r2
 8015bf4:	00db      	lsls	r3, r3, #3
 8015bf6:	440b      	add	r3, r1
 8015bf8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015bfc:	681a      	ldr	r2, [r3, #0]
 8015bfe:	78fb      	ldrb	r3, [r7, #3]
 8015c00:	4619      	mov	r1, r3
 8015c02:	f7fe fd6c 	bl	80146de <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8015c06:	bf00      	nop
 8015c08:	3708      	adds	r7, #8
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}

08015c0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c0e:	b580      	push	{r7, lr}
 8015c10:	b082      	sub	sp, #8
 8015c12:	af00      	add	r7, sp, #0
 8015c14:	6078      	str	r0, [r7, #4]
 8015c16:	460b      	mov	r3, r1
 8015c18:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8015c20:	78fa      	ldrb	r2, [r7, #3]
 8015c22:	6879      	ldr	r1, [r7, #4]
 8015c24:	4613      	mov	r3, r2
 8015c26:	009b      	lsls	r3, r3, #2
 8015c28:	4413      	add	r3, r2
 8015c2a:	00db      	lsls	r3, r3, #3
 8015c2c:	440b      	add	r3, r1
 8015c2e:	3324      	adds	r3, #36	; 0x24
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	78fb      	ldrb	r3, [r7, #3]
 8015c34:	4619      	mov	r1, r3
 8015c36:	f7fe fdb5 	bl	80147a4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8015c3a:	bf00      	nop
 8015c3c:	3708      	adds	r7, #8
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}

08015c42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c42:	b580      	push	{r7, lr}
 8015c44:	b082      	sub	sp, #8
 8015c46:	af00      	add	r7, sp, #0
 8015c48:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015c50:	4618      	mov	r0, r3
 8015c52:	f7fe fec9 	bl	80149e8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8015c56:	bf00      	nop
 8015c58:	3708      	adds	r7, #8
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}

08015c5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c5e:	b580      	push	{r7, lr}
 8015c60:	b084      	sub	sp, #16
 8015c62:	af00      	add	r7, sp, #0
 8015c64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015c66:	2301      	movs	r3, #1
 8015c68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	795b      	ldrb	r3, [r3, #5]
 8015c6e:	2b02      	cmp	r3, #2
 8015c70:	d001      	beq.n	8015c76 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015c72:	f7ee fb13 	bl	800429c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015c7c:	7bfa      	ldrb	r2, [r7, #15]
 8015c7e:	4611      	mov	r1, r2
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7fe fe73 	bl	801496c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f7fe fe1f 	bl	80148d0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015c92:	bf00      	nop
 8015c94:	3710      	adds	r7, #16
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd80      	pop	{r7, pc}
	...

08015c9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b082      	sub	sp, #8
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7fe fe6e 	bl	801498c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	7a5b      	ldrb	r3, [r3, #9]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d005      	beq.n	8015cc4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015cb8:	4b04      	ldr	r3, [pc, #16]	; (8015ccc <HAL_PCD_SuspendCallback+0x30>)
 8015cba:	691b      	ldr	r3, [r3, #16]
 8015cbc:	4a03      	ldr	r2, [pc, #12]	; (8015ccc <HAL_PCD_SuspendCallback+0x30>)
 8015cbe:	f043 0306 	orr.w	r3, r3, #6
 8015cc2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015cc4:	bf00      	nop
 8015cc6:	3708      	adds	r7, #8
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}
 8015ccc:	e000ed00 	.word	0xe000ed00

08015cd0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	7a5b      	ldrb	r3, [r3, #9]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d007      	beq.n	8015cf0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ce0:	4b08      	ldr	r3, [pc, #32]	; (8015d04 <HAL_PCD_ResumeCallback+0x34>)
 8015ce2:	691b      	ldr	r3, [r3, #16]
 8015ce4:	4a07      	ldr	r2, [pc, #28]	; (8015d04 <HAL_PCD_ResumeCallback+0x34>)
 8015ce6:	f023 0306 	bic.w	r3, r3, #6
 8015cea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015cec:	f000 f9f8 	bl	80160e0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f7fe fe5e 	bl	80149b8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8015cfc:	bf00      	nop
 8015cfe:	3708      	adds	r7, #8
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	e000ed00 	.word	0xe000ed00

08015d08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b082      	sub	sp, #8
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8015d10:	4a2b      	ldr	r2, [pc, #172]	; (8015dc0 <USBD_LL_Init+0xb8>)
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	4a29      	ldr	r2, [pc, #164]	; (8015dc0 <USBD_LL_Init+0xb8>)
 8015d1c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8015d20:	4b27      	ldr	r3, [pc, #156]	; (8015dc0 <USBD_LL_Init+0xb8>)
 8015d22:	4a28      	ldr	r2, [pc, #160]	; (8015dc4 <USBD_LL_Init+0xbc>)
 8015d24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015d26:	4b26      	ldr	r3, [pc, #152]	; (8015dc0 <USBD_LL_Init+0xb8>)
 8015d28:	2208      	movs	r2, #8
 8015d2a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015d2c:	4b24      	ldr	r3, [pc, #144]	; (8015dc0 <USBD_LL_Init+0xb8>)
 8015d2e:	2202      	movs	r2, #2
 8015d30:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015d32:	4b23      	ldr	r3, [pc, #140]	; (8015dc0 <USBD_LL_Init+0xb8>)
 8015d34:	2202      	movs	r2, #2
 8015d36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015d38:	4b21      	ldr	r3, [pc, #132]	; (8015dc0 <USBD_LL_Init+0xb8>)
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015d3e:	4b20      	ldr	r3, [pc, #128]	; (8015dc0 <USBD_LL_Init+0xb8>)
 8015d40:	2200      	movs	r2, #0
 8015d42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015d44:	4b1e      	ldr	r3, [pc, #120]	; (8015dc0 <USBD_LL_Init+0xb8>)
 8015d46:	2200      	movs	r2, #0
 8015d48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015d4a:	4b1d      	ldr	r3, [pc, #116]	; (8015dc0 <USBD_LL_Init+0xb8>)
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015d50:	481b      	ldr	r0, [pc, #108]	; (8015dc0 <USBD_LL_Init+0xb8>)
 8015d52:	f7f4 f815 	bl	8009d80 <HAL_PCD_Init>
 8015d56:	4603      	mov	r3, r0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d001      	beq.n	8015d60 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8015d5c:	f7ee fa9e 	bl	800429c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d66:	2318      	movs	r3, #24
 8015d68:	2200      	movs	r2, #0
 8015d6a:	2100      	movs	r1, #0
 8015d6c:	f7f5 fccf 	bl	800b70e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d76:	2358      	movs	r3, #88	; 0x58
 8015d78:	2200      	movs	r2, #0
 8015d7a:	2180      	movs	r1, #128	; 0x80
 8015d7c:	f7f5 fcc7 	bl	800b70e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d86:	23c0      	movs	r3, #192	; 0xc0
 8015d88:	2200      	movs	r2, #0
 8015d8a:	2181      	movs	r1, #129	; 0x81
 8015d8c:	f7f5 fcbf 	bl	800b70e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015d96:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	2101      	movs	r1, #1
 8015d9e:	f7f5 fcb6 	bl	800b70e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015dac:	2200      	movs	r2, #0
 8015dae:	2182      	movs	r1, #130	; 0x82
 8015db0:	f7f5 fcad 	bl	800b70e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015db4:	2300      	movs	r3, #0
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	3708      	adds	r7, #8
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop
 8015dc0:	200030b0 	.word	0x200030b0
 8015dc4:	40005c00 	.word	0x40005c00

08015dc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7f4 f89c 	bl	8009f1c <HAL_PCD_Start>
 8015de4:	4603      	mov	r3, r0
 8015de6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015de8:	7bfb      	ldrb	r3, [r7, #15]
 8015dea:	4618      	mov	r0, r3
 8015dec:	f000 f97e 	bl	80160ec <USBD_Get_USB_Status>
 8015df0:	4603      	mov	r3, r0
 8015df2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015df4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	3710      	adds	r7, #16
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}

08015dfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015dfe:	b580      	push	{r7, lr}
 8015e00:	b084      	sub	sp, #16
 8015e02:	af00      	add	r7, sp, #0
 8015e04:	6078      	str	r0, [r7, #4]
 8015e06:	4608      	mov	r0, r1
 8015e08:	4611      	mov	r1, r2
 8015e0a:	461a      	mov	r2, r3
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	70fb      	strb	r3, [r7, #3]
 8015e10:	460b      	mov	r3, r1
 8015e12:	70bb      	strb	r3, [r7, #2]
 8015e14:	4613      	mov	r3, r2
 8015e16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e26:	78bb      	ldrb	r3, [r7, #2]
 8015e28:	883a      	ldrh	r2, [r7, #0]
 8015e2a:	78f9      	ldrb	r1, [r7, #3]
 8015e2c:	f7f4 f9e3 	bl	800a1f6 <HAL_PCD_EP_Open>
 8015e30:	4603      	mov	r3, r0
 8015e32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e34:	7bfb      	ldrb	r3, [r7, #15]
 8015e36:	4618      	mov	r0, r3
 8015e38:	f000 f958 	bl	80160ec <USBD_Get_USB_Status>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e40:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	3710      	adds	r7, #16
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}

08015e4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e4a:	b580      	push	{r7, lr}
 8015e4c:	b084      	sub	sp, #16
 8015e4e:	af00      	add	r7, sp, #0
 8015e50:	6078      	str	r0, [r7, #4]
 8015e52:	460b      	mov	r3, r1
 8015e54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e56:	2300      	movs	r3, #0
 8015e58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e64:	78fa      	ldrb	r2, [r7, #3]
 8015e66:	4611      	mov	r1, r2
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f7f4 fa21 	bl	800a2b0 <HAL_PCD_EP_Close>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e72:	7bfb      	ldrb	r3, [r7, #15]
 8015e74:	4618      	mov	r0, r3
 8015e76:	f000 f939 	bl	80160ec <USBD_Get_USB_Status>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e80:	4618      	mov	r0, r3
 8015e82:	3710      	adds	r7, #16
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}

08015e88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b084      	sub	sp, #16
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
 8015e90:	460b      	mov	r3, r1
 8015e92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e94:	2300      	movs	r3, #0
 8015e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e98:	2300      	movs	r3, #0
 8015e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ea2:	78fa      	ldrb	r2, [r7, #3]
 8015ea4:	4611      	mov	r1, r2
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f7f4 faca 	bl	800a440 <HAL_PCD_EP_SetStall>
 8015eac:	4603      	mov	r3, r0
 8015eae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015eb0:	7bfb      	ldrb	r3, [r7, #15]
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	f000 f91a 	bl	80160ec <USBD_Get_USB_Status>
 8015eb8:	4603      	mov	r3, r0
 8015eba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	3710      	adds	r7, #16
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}

08015ec6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ec6:	b580      	push	{r7, lr}
 8015ec8:	b084      	sub	sp, #16
 8015eca:	af00      	add	r7, sp, #0
 8015ecc:	6078      	str	r0, [r7, #4]
 8015ece:	460b      	mov	r3, r1
 8015ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ee0:	78fa      	ldrb	r2, [r7, #3]
 8015ee2:	4611      	mov	r1, r2
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	f7f4 fafd 	bl	800a4e4 <HAL_PCD_EP_ClrStall>
 8015eea:	4603      	mov	r3, r0
 8015eec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015eee:	7bfb      	ldrb	r3, [r7, #15]
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f000 f8fb 	bl	80160ec <USBD_Get_USB_Status>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	3710      	adds	r7, #16
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}

08015f04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f04:	b480      	push	{r7}
 8015f06:	b085      	sub	sp, #20
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
 8015f0c:	460b      	mov	r3, r1
 8015f0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	da0b      	bge.n	8015f38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015f20:	78fb      	ldrb	r3, [r7, #3]
 8015f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015f26:	68f9      	ldr	r1, [r7, #12]
 8015f28:	4613      	mov	r3, r2
 8015f2a:	009b      	lsls	r3, r3, #2
 8015f2c:	4413      	add	r3, r2
 8015f2e:	00db      	lsls	r3, r3, #3
 8015f30:	440b      	add	r3, r1
 8015f32:	3312      	adds	r3, #18
 8015f34:	781b      	ldrb	r3, [r3, #0]
 8015f36:	e00b      	b.n	8015f50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015f38:	78fb      	ldrb	r3, [r7, #3]
 8015f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015f3e:	68f9      	ldr	r1, [r7, #12]
 8015f40:	4613      	mov	r3, r2
 8015f42:	009b      	lsls	r3, r3, #2
 8015f44:	4413      	add	r3, r2
 8015f46:	00db      	lsls	r3, r3, #3
 8015f48:	440b      	add	r3, r1
 8015f4a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8015f4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015f50:	4618      	mov	r0, r3
 8015f52:	3714      	adds	r7, #20
 8015f54:	46bd      	mov	sp, r7
 8015f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5a:	4770      	bx	lr

08015f5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b084      	sub	sp, #16
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
 8015f64:	460b      	mov	r3, r1
 8015f66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f68:	2300      	movs	r3, #0
 8015f6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f76:	78fa      	ldrb	r2, [r7, #3]
 8015f78:	4611      	mov	r1, r2
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	f7f4 f917 	bl	800a1ae <HAL_PCD_SetAddress>
 8015f80:	4603      	mov	r3, r0
 8015f82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f84:	7bfb      	ldrb	r3, [r7, #15]
 8015f86:	4618      	mov	r0, r3
 8015f88:	f000 f8b0 	bl	80160ec <USBD_Get_USB_Status>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f90:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f92:	4618      	mov	r0, r3
 8015f94:	3710      	adds	r7, #16
 8015f96:	46bd      	mov	sp, r7
 8015f98:	bd80      	pop	{r7, pc}

08015f9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015f9a:	b580      	push	{r7, lr}
 8015f9c:	b086      	sub	sp, #24
 8015f9e:	af00      	add	r7, sp, #0
 8015fa0:	60f8      	str	r0, [r7, #12]
 8015fa2:	607a      	str	r2, [r7, #4]
 8015fa4:	603b      	str	r3, [r7, #0]
 8015fa6:	460b      	mov	r3, r1
 8015fa8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015faa:	2300      	movs	r3, #0
 8015fac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015fb8:	7af9      	ldrb	r1, [r7, #11]
 8015fba:	683b      	ldr	r3, [r7, #0]
 8015fbc:	687a      	ldr	r2, [r7, #4]
 8015fbe:	f7f4 fa08 	bl	800a3d2 <HAL_PCD_EP_Transmit>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fc6:	7dfb      	ldrb	r3, [r7, #23]
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f000 f88f 	bl	80160ec <USBD_Get_USB_Status>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015fd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3718      	adds	r7, #24
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b086      	sub	sp, #24
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	60f8      	str	r0, [r7, #12]
 8015fe4:	607a      	str	r2, [r7, #4]
 8015fe6:	603b      	str	r3, [r7, #0]
 8015fe8:	460b      	mov	r3, r1
 8015fea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fec:	2300      	movs	r3, #0
 8015fee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015ffa:	7af9      	ldrb	r1, [r7, #11]
 8015ffc:	683b      	ldr	r3, [r7, #0]
 8015ffe:	687a      	ldr	r2, [r7, #4]
 8016000:	f7f4 f99e 	bl	800a340 <HAL_PCD_EP_Receive>
 8016004:	4603      	mov	r3, r0
 8016006:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016008:	7dfb      	ldrb	r3, [r7, #23]
 801600a:	4618      	mov	r0, r3
 801600c:	f000 f86e 	bl	80160ec <USBD_Get_USB_Status>
 8016010:	4603      	mov	r3, r0
 8016012:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016014:	7dbb      	ldrb	r3, [r7, #22]
}
 8016016:	4618      	mov	r0, r3
 8016018:	3718      	adds	r7, #24
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}

0801601e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801601e:	b580      	push	{r7, lr}
 8016020:	b082      	sub	sp, #8
 8016022:	af00      	add	r7, sp, #0
 8016024:	6078      	str	r0, [r7, #4]
 8016026:	460b      	mov	r3, r1
 8016028:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016030:	78fa      	ldrb	r2, [r7, #3]
 8016032:	4611      	mov	r1, r2
 8016034:	4618      	mov	r0, r3
 8016036:	f7f4 f9b4 	bl	800a3a2 <HAL_PCD_EP_GetRxCount>
 801603a:	4603      	mov	r3, r0
}
 801603c:	4618      	mov	r0, r3
 801603e:	3708      	adds	r7, #8
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}

08016044 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b082      	sub	sp, #8
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
 801604c:	460b      	mov	r3, r1
 801604e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8016050:	78fb      	ldrb	r3, [r7, #3]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d002      	beq.n	801605c <HAL_PCDEx_LPM_Callback+0x18>
 8016056:	2b01      	cmp	r3, #1
 8016058:	d013      	beq.n	8016082 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801605a:	e023      	b.n	80160a4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	7a5b      	ldrb	r3, [r3, #9]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d007      	beq.n	8016074 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8016064:	f000 f83c 	bl	80160e0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016068:	4b10      	ldr	r3, [pc, #64]	; (80160ac <HAL_PCDEx_LPM_Callback+0x68>)
 801606a:	691b      	ldr	r3, [r3, #16]
 801606c:	4a0f      	ldr	r2, [pc, #60]	; (80160ac <HAL_PCDEx_LPM_Callback+0x68>)
 801606e:	f023 0306 	bic.w	r3, r3, #6
 8016072:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801607a:	4618      	mov	r0, r3
 801607c:	f7fe fc9c 	bl	80149b8 <USBD_LL_Resume>
    break;
 8016080:	e010      	b.n	80160a4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016088:	4618      	mov	r0, r3
 801608a:	f7fe fc7f 	bl	801498c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	7a5b      	ldrb	r3, [r3, #9]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d005      	beq.n	80160a2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016096:	4b05      	ldr	r3, [pc, #20]	; (80160ac <HAL_PCDEx_LPM_Callback+0x68>)
 8016098:	691b      	ldr	r3, [r3, #16]
 801609a:	4a04      	ldr	r2, [pc, #16]	; (80160ac <HAL_PCDEx_LPM_Callback+0x68>)
 801609c:	f043 0306 	orr.w	r3, r3, #6
 80160a0:	6113      	str	r3, [r2, #16]
    break;
 80160a2:	bf00      	nop
}
 80160a4:	bf00      	nop
 80160a6:	3708      	adds	r7, #8
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}
 80160ac:	e000ed00 	.word	0xe000ed00

080160b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80160b0:	b480      	push	{r7}
 80160b2:	b083      	sub	sp, #12
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80160b8:	4b03      	ldr	r3, [pc, #12]	; (80160c8 <USBD_static_malloc+0x18>)
}
 80160ba:	4618      	mov	r0, r3
 80160bc:	370c      	adds	r7, #12
 80160be:	46bd      	mov	sp, r7
 80160c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c4:	4770      	bx	lr
 80160c6:	bf00      	nop
 80160c8:	2000338c 	.word	0x2000338c

080160cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80160cc:	b480      	push	{r7}
 80160ce:	b083      	sub	sp, #12
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]

}
 80160d4:	bf00      	nop
 80160d6:	370c      	adds	r7, #12
 80160d8:	46bd      	mov	sp, r7
 80160da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160de:	4770      	bx	lr

080160e0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80160e4:	f7ed fb2c 	bl	8003740 <SystemClock_Config>
}
 80160e8:	bf00      	nop
 80160ea:	bd80      	pop	{r7, pc}

080160ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80160ec:	b480      	push	{r7}
 80160ee:	b085      	sub	sp, #20
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	4603      	mov	r3, r0
 80160f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160f6:	2300      	movs	r3, #0
 80160f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80160fa:	79fb      	ldrb	r3, [r7, #7]
 80160fc:	2b03      	cmp	r3, #3
 80160fe:	d817      	bhi.n	8016130 <USBD_Get_USB_Status+0x44>
 8016100:	a201      	add	r2, pc, #4	; (adr r2, 8016108 <USBD_Get_USB_Status+0x1c>)
 8016102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016106:	bf00      	nop
 8016108:	08016119 	.word	0x08016119
 801610c:	0801611f 	.word	0x0801611f
 8016110:	08016125 	.word	0x08016125
 8016114:	0801612b 	.word	0x0801612b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016118:	2300      	movs	r3, #0
 801611a:	73fb      	strb	r3, [r7, #15]
    break;
 801611c:	e00b      	b.n	8016136 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801611e:	2303      	movs	r3, #3
 8016120:	73fb      	strb	r3, [r7, #15]
    break;
 8016122:	e008      	b.n	8016136 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016124:	2301      	movs	r3, #1
 8016126:	73fb      	strb	r3, [r7, #15]
    break;
 8016128:	e005      	b.n	8016136 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801612a:	2303      	movs	r3, #3
 801612c:	73fb      	strb	r3, [r7, #15]
    break;
 801612e:	e002      	b.n	8016136 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016130:	2303      	movs	r3, #3
 8016132:	73fb      	strb	r3, [r7, #15]
    break;
 8016134:	bf00      	nop
  }
  return usb_status;
 8016136:	7bfb      	ldrb	r3, [r7, #15]
}
 8016138:	4618      	mov	r0, r3
 801613a:	3714      	adds	r7, #20
 801613c:	46bd      	mov	sp, r7
 801613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016142:	4770      	bx	lr

08016144 <__cvt>:
 8016144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016148:	ec55 4b10 	vmov	r4, r5, d0
 801614c:	2d00      	cmp	r5, #0
 801614e:	460e      	mov	r6, r1
 8016150:	4619      	mov	r1, r3
 8016152:	462b      	mov	r3, r5
 8016154:	bfbb      	ittet	lt
 8016156:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801615a:	461d      	movlt	r5, r3
 801615c:	2300      	movge	r3, #0
 801615e:	232d      	movlt	r3, #45	; 0x2d
 8016160:	700b      	strb	r3, [r1, #0]
 8016162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016164:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016168:	4691      	mov	r9, r2
 801616a:	f023 0820 	bic.w	r8, r3, #32
 801616e:	bfbc      	itt	lt
 8016170:	4622      	movlt	r2, r4
 8016172:	4614      	movlt	r4, r2
 8016174:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016178:	d005      	beq.n	8016186 <__cvt+0x42>
 801617a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801617e:	d100      	bne.n	8016182 <__cvt+0x3e>
 8016180:	3601      	adds	r6, #1
 8016182:	2102      	movs	r1, #2
 8016184:	e000      	b.n	8016188 <__cvt+0x44>
 8016186:	2103      	movs	r1, #3
 8016188:	ab03      	add	r3, sp, #12
 801618a:	9301      	str	r3, [sp, #4]
 801618c:	ab02      	add	r3, sp, #8
 801618e:	9300      	str	r3, [sp, #0]
 8016190:	ec45 4b10 	vmov	d0, r4, r5
 8016194:	4653      	mov	r3, sl
 8016196:	4632      	mov	r2, r6
 8016198:	f001 f88e 	bl	80172b8 <_dtoa_r>
 801619c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80161a0:	4607      	mov	r7, r0
 80161a2:	d102      	bne.n	80161aa <__cvt+0x66>
 80161a4:	f019 0f01 	tst.w	r9, #1
 80161a8:	d022      	beq.n	80161f0 <__cvt+0xac>
 80161aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80161ae:	eb07 0906 	add.w	r9, r7, r6
 80161b2:	d110      	bne.n	80161d6 <__cvt+0x92>
 80161b4:	783b      	ldrb	r3, [r7, #0]
 80161b6:	2b30      	cmp	r3, #48	; 0x30
 80161b8:	d10a      	bne.n	80161d0 <__cvt+0x8c>
 80161ba:	2200      	movs	r2, #0
 80161bc:	2300      	movs	r3, #0
 80161be:	4620      	mov	r0, r4
 80161c0:	4629      	mov	r1, r5
 80161c2:	f7ea fca9 	bl	8000b18 <__aeabi_dcmpeq>
 80161c6:	b918      	cbnz	r0, 80161d0 <__cvt+0x8c>
 80161c8:	f1c6 0601 	rsb	r6, r6, #1
 80161cc:	f8ca 6000 	str.w	r6, [sl]
 80161d0:	f8da 3000 	ldr.w	r3, [sl]
 80161d4:	4499      	add	r9, r3
 80161d6:	2200      	movs	r2, #0
 80161d8:	2300      	movs	r3, #0
 80161da:	4620      	mov	r0, r4
 80161dc:	4629      	mov	r1, r5
 80161de:	f7ea fc9b 	bl	8000b18 <__aeabi_dcmpeq>
 80161e2:	b108      	cbz	r0, 80161e8 <__cvt+0xa4>
 80161e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80161e8:	2230      	movs	r2, #48	; 0x30
 80161ea:	9b03      	ldr	r3, [sp, #12]
 80161ec:	454b      	cmp	r3, r9
 80161ee:	d307      	bcc.n	8016200 <__cvt+0xbc>
 80161f0:	9b03      	ldr	r3, [sp, #12]
 80161f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161f4:	1bdb      	subs	r3, r3, r7
 80161f6:	4638      	mov	r0, r7
 80161f8:	6013      	str	r3, [r2, #0]
 80161fa:	b004      	add	sp, #16
 80161fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016200:	1c59      	adds	r1, r3, #1
 8016202:	9103      	str	r1, [sp, #12]
 8016204:	701a      	strb	r2, [r3, #0]
 8016206:	e7f0      	b.n	80161ea <__cvt+0xa6>

08016208 <__exponent>:
 8016208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801620a:	4603      	mov	r3, r0
 801620c:	2900      	cmp	r1, #0
 801620e:	bfb8      	it	lt
 8016210:	4249      	neglt	r1, r1
 8016212:	f803 2b02 	strb.w	r2, [r3], #2
 8016216:	bfb4      	ite	lt
 8016218:	222d      	movlt	r2, #45	; 0x2d
 801621a:	222b      	movge	r2, #43	; 0x2b
 801621c:	2909      	cmp	r1, #9
 801621e:	7042      	strb	r2, [r0, #1]
 8016220:	dd2a      	ble.n	8016278 <__exponent+0x70>
 8016222:	f10d 0207 	add.w	r2, sp, #7
 8016226:	4617      	mov	r7, r2
 8016228:	260a      	movs	r6, #10
 801622a:	4694      	mov	ip, r2
 801622c:	fb91 f5f6 	sdiv	r5, r1, r6
 8016230:	fb06 1415 	mls	r4, r6, r5, r1
 8016234:	3430      	adds	r4, #48	; 0x30
 8016236:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801623a:	460c      	mov	r4, r1
 801623c:	2c63      	cmp	r4, #99	; 0x63
 801623e:	f102 32ff 	add.w	r2, r2, #4294967295
 8016242:	4629      	mov	r1, r5
 8016244:	dcf1      	bgt.n	801622a <__exponent+0x22>
 8016246:	3130      	adds	r1, #48	; 0x30
 8016248:	f1ac 0402 	sub.w	r4, ip, #2
 801624c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016250:	1c41      	adds	r1, r0, #1
 8016252:	4622      	mov	r2, r4
 8016254:	42ba      	cmp	r2, r7
 8016256:	d30a      	bcc.n	801626e <__exponent+0x66>
 8016258:	f10d 0209 	add.w	r2, sp, #9
 801625c:	eba2 020c 	sub.w	r2, r2, ip
 8016260:	42bc      	cmp	r4, r7
 8016262:	bf88      	it	hi
 8016264:	2200      	movhi	r2, #0
 8016266:	4413      	add	r3, r2
 8016268:	1a18      	subs	r0, r3, r0
 801626a:	b003      	add	sp, #12
 801626c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801626e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016272:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016276:	e7ed      	b.n	8016254 <__exponent+0x4c>
 8016278:	2330      	movs	r3, #48	; 0x30
 801627a:	3130      	adds	r1, #48	; 0x30
 801627c:	7083      	strb	r3, [r0, #2]
 801627e:	70c1      	strb	r1, [r0, #3]
 8016280:	1d03      	adds	r3, r0, #4
 8016282:	e7f1      	b.n	8016268 <__exponent+0x60>

08016284 <_printf_float>:
 8016284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016288:	ed2d 8b02 	vpush	{d8}
 801628c:	b08d      	sub	sp, #52	; 0x34
 801628e:	460c      	mov	r4, r1
 8016290:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016294:	4616      	mov	r6, r2
 8016296:	461f      	mov	r7, r3
 8016298:	4605      	mov	r5, r0
 801629a:	f000 fef7 	bl	801708c <_localeconv_r>
 801629e:	f8d0 a000 	ldr.w	sl, [r0]
 80162a2:	4650      	mov	r0, sl
 80162a4:	f7ea f80c 	bl	80002c0 <strlen>
 80162a8:	2300      	movs	r3, #0
 80162aa:	930a      	str	r3, [sp, #40]	; 0x28
 80162ac:	6823      	ldr	r3, [r4, #0]
 80162ae:	9305      	str	r3, [sp, #20]
 80162b0:	f8d8 3000 	ldr.w	r3, [r8]
 80162b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80162b8:	3307      	adds	r3, #7
 80162ba:	f023 0307 	bic.w	r3, r3, #7
 80162be:	f103 0208 	add.w	r2, r3, #8
 80162c2:	f8c8 2000 	str.w	r2, [r8]
 80162c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80162ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80162ce:	9307      	str	r3, [sp, #28]
 80162d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80162d4:	ee08 0a10 	vmov	s16, r0
 80162d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80162dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162e0:	4b9e      	ldr	r3, [pc, #632]	; (801655c <_printf_float+0x2d8>)
 80162e2:	f04f 32ff 	mov.w	r2, #4294967295
 80162e6:	f7ea fc49 	bl	8000b7c <__aeabi_dcmpun>
 80162ea:	bb88      	cbnz	r0, 8016350 <_printf_float+0xcc>
 80162ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162f0:	4b9a      	ldr	r3, [pc, #616]	; (801655c <_printf_float+0x2d8>)
 80162f2:	f04f 32ff 	mov.w	r2, #4294967295
 80162f6:	f7ea fc23 	bl	8000b40 <__aeabi_dcmple>
 80162fa:	bb48      	cbnz	r0, 8016350 <_printf_float+0xcc>
 80162fc:	2200      	movs	r2, #0
 80162fe:	2300      	movs	r3, #0
 8016300:	4640      	mov	r0, r8
 8016302:	4649      	mov	r1, r9
 8016304:	f7ea fc12 	bl	8000b2c <__aeabi_dcmplt>
 8016308:	b110      	cbz	r0, 8016310 <_printf_float+0x8c>
 801630a:	232d      	movs	r3, #45	; 0x2d
 801630c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016310:	4a93      	ldr	r2, [pc, #588]	; (8016560 <_printf_float+0x2dc>)
 8016312:	4b94      	ldr	r3, [pc, #592]	; (8016564 <_printf_float+0x2e0>)
 8016314:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016318:	bf94      	ite	ls
 801631a:	4690      	movls	r8, r2
 801631c:	4698      	movhi	r8, r3
 801631e:	2303      	movs	r3, #3
 8016320:	6123      	str	r3, [r4, #16]
 8016322:	9b05      	ldr	r3, [sp, #20]
 8016324:	f023 0304 	bic.w	r3, r3, #4
 8016328:	6023      	str	r3, [r4, #0]
 801632a:	f04f 0900 	mov.w	r9, #0
 801632e:	9700      	str	r7, [sp, #0]
 8016330:	4633      	mov	r3, r6
 8016332:	aa0b      	add	r2, sp, #44	; 0x2c
 8016334:	4621      	mov	r1, r4
 8016336:	4628      	mov	r0, r5
 8016338:	f000 f9da 	bl	80166f0 <_printf_common>
 801633c:	3001      	adds	r0, #1
 801633e:	f040 8090 	bne.w	8016462 <_printf_float+0x1de>
 8016342:	f04f 30ff 	mov.w	r0, #4294967295
 8016346:	b00d      	add	sp, #52	; 0x34
 8016348:	ecbd 8b02 	vpop	{d8}
 801634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016350:	4642      	mov	r2, r8
 8016352:	464b      	mov	r3, r9
 8016354:	4640      	mov	r0, r8
 8016356:	4649      	mov	r1, r9
 8016358:	f7ea fc10 	bl	8000b7c <__aeabi_dcmpun>
 801635c:	b140      	cbz	r0, 8016370 <_printf_float+0xec>
 801635e:	464b      	mov	r3, r9
 8016360:	2b00      	cmp	r3, #0
 8016362:	bfbc      	itt	lt
 8016364:	232d      	movlt	r3, #45	; 0x2d
 8016366:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801636a:	4a7f      	ldr	r2, [pc, #508]	; (8016568 <_printf_float+0x2e4>)
 801636c:	4b7f      	ldr	r3, [pc, #508]	; (801656c <_printf_float+0x2e8>)
 801636e:	e7d1      	b.n	8016314 <_printf_float+0x90>
 8016370:	6863      	ldr	r3, [r4, #4]
 8016372:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016376:	9206      	str	r2, [sp, #24]
 8016378:	1c5a      	adds	r2, r3, #1
 801637a:	d13f      	bne.n	80163fc <_printf_float+0x178>
 801637c:	2306      	movs	r3, #6
 801637e:	6063      	str	r3, [r4, #4]
 8016380:	9b05      	ldr	r3, [sp, #20]
 8016382:	6861      	ldr	r1, [r4, #4]
 8016384:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016388:	2300      	movs	r3, #0
 801638a:	9303      	str	r3, [sp, #12]
 801638c:	ab0a      	add	r3, sp, #40	; 0x28
 801638e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016392:	ab09      	add	r3, sp, #36	; 0x24
 8016394:	ec49 8b10 	vmov	d0, r8, r9
 8016398:	9300      	str	r3, [sp, #0]
 801639a:	6022      	str	r2, [r4, #0]
 801639c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80163a0:	4628      	mov	r0, r5
 80163a2:	f7ff fecf 	bl	8016144 <__cvt>
 80163a6:	9b06      	ldr	r3, [sp, #24]
 80163a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163aa:	2b47      	cmp	r3, #71	; 0x47
 80163ac:	4680      	mov	r8, r0
 80163ae:	d108      	bne.n	80163c2 <_printf_float+0x13e>
 80163b0:	1cc8      	adds	r0, r1, #3
 80163b2:	db02      	blt.n	80163ba <_printf_float+0x136>
 80163b4:	6863      	ldr	r3, [r4, #4]
 80163b6:	4299      	cmp	r1, r3
 80163b8:	dd41      	ble.n	801643e <_printf_float+0x1ba>
 80163ba:	f1ab 0302 	sub.w	r3, fp, #2
 80163be:	fa5f fb83 	uxtb.w	fp, r3
 80163c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80163c6:	d820      	bhi.n	801640a <_printf_float+0x186>
 80163c8:	3901      	subs	r1, #1
 80163ca:	465a      	mov	r2, fp
 80163cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80163d0:	9109      	str	r1, [sp, #36]	; 0x24
 80163d2:	f7ff ff19 	bl	8016208 <__exponent>
 80163d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163d8:	1813      	adds	r3, r2, r0
 80163da:	2a01      	cmp	r2, #1
 80163dc:	4681      	mov	r9, r0
 80163de:	6123      	str	r3, [r4, #16]
 80163e0:	dc02      	bgt.n	80163e8 <_printf_float+0x164>
 80163e2:	6822      	ldr	r2, [r4, #0]
 80163e4:	07d2      	lsls	r2, r2, #31
 80163e6:	d501      	bpl.n	80163ec <_printf_float+0x168>
 80163e8:	3301      	adds	r3, #1
 80163ea:	6123      	str	r3, [r4, #16]
 80163ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d09c      	beq.n	801632e <_printf_float+0xaa>
 80163f4:	232d      	movs	r3, #45	; 0x2d
 80163f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163fa:	e798      	b.n	801632e <_printf_float+0xaa>
 80163fc:	9a06      	ldr	r2, [sp, #24]
 80163fe:	2a47      	cmp	r2, #71	; 0x47
 8016400:	d1be      	bne.n	8016380 <_printf_float+0xfc>
 8016402:	2b00      	cmp	r3, #0
 8016404:	d1bc      	bne.n	8016380 <_printf_float+0xfc>
 8016406:	2301      	movs	r3, #1
 8016408:	e7b9      	b.n	801637e <_printf_float+0xfa>
 801640a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801640e:	d118      	bne.n	8016442 <_printf_float+0x1be>
 8016410:	2900      	cmp	r1, #0
 8016412:	6863      	ldr	r3, [r4, #4]
 8016414:	dd0b      	ble.n	801642e <_printf_float+0x1aa>
 8016416:	6121      	str	r1, [r4, #16]
 8016418:	b913      	cbnz	r3, 8016420 <_printf_float+0x19c>
 801641a:	6822      	ldr	r2, [r4, #0]
 801641c:	07d0      	lsls	r0, r2, #31
 801641e:	d502      	bpl.n	8016426 <_printf_float+0x1a2>
 8016420:	3301      	adds	r3, #1
 8016422:	440b      	add	r3, r1
 8016424:	6123      	str	r3, [r4, #16]
 8016426:	65a1      	str	r1, [r4, #88]	; 0x58
 8016428:	f04f 0900 	mov.w	r9, #0
 801642c:	e7de      	b.n	80163ec <_printf_float+0x168>
 801642e:	b913      	cbnz	r3, 8016436 <_printf_float+0x1b2>
 8016430:	6822      	ldr	r2, [r4, #0]
 8016432:	07d2      	lsls	r2, r2, #31
 8016434:	d501      	bpl.n	801643a <_printf_float+0x1b6>
 8016436:	3302      	adds	r3, #2
 8016438:	e7f4      	b.n	8016424 <_printf_float+0x1a0>
 801643a:	2301      	movs	r3, #1
 801643c:	e7f2      	b.n	8016424 <_printf_float+0x1a0>
 801643e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016444:	4299      	cmp	r1, r3
 8016446:	db05      	blt.n	8016454 <_printf_float+0x1d0>
 8016448:	6823      	ldr	r3, [r4, #0]
 801644a:	6121      	str	r1, [r4, #16]
 801644c:	07d8      	lsls	r0, r3, #31
 801644e:	d5ea      	bpl.n	8016426 <_printf_float+0x1a2>
 8016450:	1c4b      	adds	r3, r1, #1
 8016452:	e7e7      	b.n	8016424 <_printf_float+0x1a0>
 8016454:	2900      	cmp	r1, #0
 8016456:	bfd4      	ite	le
 8016458:	f1c1 0202 	rsble	r2, r1, #2
 801645c:	2201      	movgt	r2, #1
 801645e:	4413      	add	r3, r2
 8016460:	e7e0      	b.n	8016424 <_printf_float+0x1a0>
 8016462:	6823      	ldr	r3, [r4, #0]
 8016464:	055a      	lsls	r2, r3, #21
 8016466:	d407      	bmi.n	8016478 <_printf_float+0x1f4>
 8016468:	6923      	ldr	r3, [r4, #16]
 801646a:	4642      	mov	r2, r8
 801646c:	4631      	mov	r1, r6
 801646e:	4628      	mov	r0, r5
 8016470:	47b8      	blx	r7
 8016472:	3001      	adds	r0, #1
 8016474:	d12c      	bne.n	80164d0 <_printf_float+0x24c>
 8016476:	e764      	b.n	8016342 <_printf_float+0xbe>
 8016478:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801647c:	f240 80e0 	bls.w	8016640 <_printf_float+0x3bc>
 8016480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016484:	2200      	movs	r2, #0
 8016486:	2300      	movs	r3, #0
 8016488:	f7ea fb46 	bl	8000b18 <__aeabi_dcmpeq>
 801648c:	2800      	cmp	r0, #0
 801648e:	d034      	beq.n	80164fa <_printf_float+0x276>
 8016490:	4a37      	ldr	r2, [pc, #220]	; (8016570 <_printf_float+0x2ec>)
 8016492:	2301      	movs	r3, #1
 8016494:	4631      	mov	r1, r6
 8016496:	4628      	mov	r0, r5
 8016498:	47b8      	blx	r7
 801649a:	3001      	adds	r0, #1
 801649c:	f43f af51 	beq.w	8016342 <_printf_float+0xbe>
 80164a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80164a4:	429a      	cmp	r2, r3
 80164a6:	db02      	blt.n	80164ae <_printf_float+0x22a>
 80164a8:	6823      	ldr	r3, [r4, #0]
 80164aa:	07d8      	lsls	r0, r3, #31
 80164ac:	d510      	bpl.n	80164d0 <_printf_float+0x24c>
 80164ae:	ee18 3a10 	vmov	r3, s16
 80164b2:	4652      	mov	r2, sl
 80164b4:	4631      	mov	r1, r6
 80164b6:	4628      	mov	r0, r5
 80164b8:	47b8      	blx	r7
 80164ba:	3001      	adds	r0, #1
 80164bc:	f43f af41 	beq.w	8016342 <_printf_float+0xbe>
 80164c0:	f04f 0800 	mov.w	r8, #0
 80164c4:	f104 091a 	add.w	r9, r4, #26
 80164c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164ca:	3b01      	subs	r3, #1
 80164cc:	4543      	cmp	r3, r8
 80164ce:	dc09      	bgt.n	80164e4 <_printf_float+0x260>
 80164d0:	6823      	ldr	r3, [r4, #0]
 80164d2:	079b      	lsls	r3, r3, #30
 80164d4:	f100 8107 	bmi.w	80166e6 <_printf_float+0x462>
 80164d8:	68e0      	ldr	r0, [r4, #12]
 80164da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164dc:	4298      	cmp	r0, r3
 80164de:	bfb8      	it	lt
 80164e0:	4618      	movlt	r0, r3
 80164e2:	e730      	b.n	8016346 <_printf_float+0xc2>
 80164e4:	2301      	movs	r3, #1
 80164e6:	464a      	mov	r2, r9
 80164e8:	4631      	mov	r1, r6
 80164ea:	4628      	mov	r0, r5
 80164ec:	47b8      	blx	r7
 80164ee:	3001      	adds	r0, #1
 80164f0:	f43f af27 	beq.w	8016342 <_printf_float+0xbe>
 80164f4:	f108 0801 	add.w	r8, r8, #1
 80164f8:	e7e6      	b.n	80164c8 <_printf_float+0x244>
 80164fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	dc39      	bgt.n	8016574 <_printf_float+0x2f0>
 8016500:	4a1b      	ldr	r2, [pc, #108]	; (8016570 <_printf_float+0x2ec>)
 8016502:	2301      	movs	r3, #1
 8016504:	4631      	mov	r1, r6
 8016506:	4628      	mov	r0, r5
 8016508:	47b8      	blx	r7
 801650a:	3001      	adds	r0, #1
 801650c:	f43f af19 	beq.w	8016342 <_printf_float+0xbe>
 8016510:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016514:	4313      	orrs	r3, r2
 8016516:	d102      	bne.n	801651e <_printf_float+0x29a>
 8016518:	6823      	ldr	r3, [r4, #0]
 801651a:	07d9      	lsls	r1, r3, #31
 801651c:	d5d8      	bpl.n	80164d0 <_printf_float+0x24c>
 801651e:	ee18 3a10 	vmov	r3, s16
 8016522:	4652      	mov	r2, sl
 8016524:	4631      	mov	r1, r6
 8016526:	4628      	mov	r0, r5
 8016528:	47b8      	blx	r7
 801652a:	3001      	adds	r0, #1
 801652c:	f43f af09 	beq.w	8016342 <_printf_float+0xbe>
 8016530:	f04f 0900 	mov.w	r9, #0
 8016534:	f104 0a1a 	add.w	sl, r4, #26
 8016538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801653a:	425b      	negs	r3, r3
 801653c:	454b      	cmp	r3, r9
 801653e:	dc01      	bgt.n	8016544 <_printf_float+0x2c0>
 8016540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016542:	e792      	b.n	801646a <_printf_float+0x1e6>
 8016544:	2301      	movs	r3, #1
 8016546:	4652      	mov	r2, sl
 8016548:	4631      	mov	r1, r6
 801654a:	4628      	mov	r0, r5
 801654c:	47b8      	blx	r7
 801654e:	3001      	adds	r0, #1
 8016550:	f43f aef7 	beq.w	8016342 <_printf_float+0xbe>
 8016554:	f109 0901 	add.w	r9, r9, #1
 8016558:	e7ee      	b.n	8016538 <_printf_float+0x2b4>
 801655a:	bf00      	nop
 801655c:	7fefffff 	.word	0x7fefffff
 8016560:	0801d610 	.word	0x0801d610
 8016564:	0801d614 	.word	0x0801d614
 8016568:	0801d618 	.word	0x0801d618
 801656c:	0801d61c 	.word	0x0801d61c
 8016570:	0801d620 	.word	0x0801d620
 8016574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016578:	429a      	cmp	r2, r3
 801657a:	bfa8      	it	ge
 801657c:	461a      	movge	r2, r3
 801657e:	2a00      	cmp	r2, #0
 8016580:	4691      	mov	r9, r2
 8016582:	dc37      	bgt.n	80165f4 <_printf_float+0x370>
 8016584:	f04f 0b00 	mov.w	fp, #0
 8016588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801658c:	f104 021a 	add.w	r2, r4, #26
 8016590:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016592:	9305      	str	r3, [sp, #20]
 8016594:	eba3 0309 	sub.w	r3, r3, r9
 8016598:	455b      	cmp	r3, fp
 801659a:	dc33      	bgt.n	8016604 <_printf_float+0x380>
 801659c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80165a0:	429a      	cmp	r2, r3
 80165a2:	db3b      	blt.n	801661c <_printf_float+0x398>
 80165a4:	6823      	ldr	r3, [r4, #0]
 80165a6:	07da      	lsls	r2, r3, #31
 80165a8:	d438      	bmi.n	801661c <_printf_float+0x398>
 80165aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80165ae:	eba2 0903 	sub.w	r9, r2, r3
 80165b2:	9b05      	ldr	r3, [sp, #20]
 80165b4:	1ad2      	subs	r2, r2, r3
 80165b6:	4591      	cmp	r9, r2
 80165b8:	bfa8      	it	ge
 80165ba:	4691      	movge	r9, r2
 80165bc:	f1b9 0f00 	cmp.w	r9, #0
 80165c0:	dc35      	bgt.n	801662e <_printf_float+0x3aa>
 80165c2:	f04f 0800 	mov.w	r8, #0
 80165c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80165ca:	f104 0a1a 	add.w	sl, r4, #26
 80165ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80165d2:	1a9b      	subs	r3, r3, r2
 80165d4:	eba3 0309 	sub.w	r3, r3, r9
 80165d8:	4543      	cmp	r3, r8
 80165da:	f77f af79 	ble.w	80164d0 <_printf_float+0x24c>
 80165de:	2301      	movs	r3, #1
 80165e0:	4652      	mov	r2, sl
 80165e2:	4631      	mov	r1, r6
 80165e4:	4628      	mov	r0, r5
 80165e6:	47b8      	blx	r7
 80165e8:	3001      	adds	r0, #1
 80165ea:	f43f aeaa 	beq.w	8016342 <_printf_float+0xbe>
 80165ee:	f108 0801 	add.w	r8, r8, #1
 80165f2:	e7ec      	b.n	80165ce <_printf_float+0x34a>
 80165f4:	4613      	mov	r3, r2
 80165f6:	4631      	mov	r1, r6
 80165f8:	4642      	mov	r2, r8
 80165fa:	4628      	mov	r0, r5
 80165fc:	47b8      	blx	r7
 80165fe:	3001      	adds	r0, #1
 8016600:	d1c0      	bne.n	8016584 <_printf_float+0x300>
 8016602:	e69e      	b.n	8016342 <_printf_float+0xbe>
 8016604:	2301      	movs	r3, #1
 8016606:	4631      	mov	r1, r6
 8016608:	4628      	mov	r0, r5
 801660a:	9205      	str	r2, [sp, #20]
 801660c:	47b8      	blx	r7
 801660e:	3001      	adds	r0, #1
 8016610:	f43f ae97 	beq.w	8016342 <_printf_float+0xbe>
 8016614:	9a05      	ldr	r2, [sp, #20]
 8016616:	f10b 0b01 	add.w	fp, fp, #1
 801661a:	e7b9      	b.n	8016590 <_printf_float+0x30c>
 801661c:	ee18 3a10 	vmov	r3, s16
 8016620:	4652      	mov	r2, sl
 8016622:	4631      	mov	r1, r6
 8016624:	4628      	mov	r0, r5
 8016626:	47b8      	blx	r7
 8016628:	3001      	adds	r0, #1
 801662a:	d1be      	bne.n	80165aa <_printf_float+0x326>
 801662c:	e689      	b.n	8016342 <_printf_float+0xbe>
 801662e:	9a05      	ldr	r2, [sp, #20]
 8016630:	464b      	mov	r3, r9
 8016632:	4442      	add	r2, r8
 8016634:	4631      	mov	r1, r6
 8016636:	4628      	mov	r0, r5
 8016638:	47b8      	blx	r7
 801663a:	3001      	adds	r0, #1
 801663c:	d1c1      	bne.n	80165c2 <_printf_float+0x33e>
 801663e:	e680      	b.n	8016342 <_printf_float+0xbe>
 8016640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016642:	2a01      	cmp	r2, #1
 8016644:	dc01      	bgt.n	801664a <_printf_float+0x3c6>
 8016646:	07db      	lsls	r3, r3, #31
 8016648:	d53a      	bpl.n	80166c0 <_printf_float+0x43c>
 801664a:	2301      	movs	r3, #1
 801664c:	4642      	mov	r2, r8
 801664e:	4631      	mov	r1, r6
 8016650:	4628      	mov	r0, r5
 8016652:	47b8      	blx	r7
 8016654:	3001      	adds	r0, #1
 8016656:	f43f ae74 	beq.w	8016342 <_printf_float+0xbe>
 801665a:	ee18 3a10 	vmov	r3, s16
 801665e:	4652      	mov	r2, sl
 8016660:	4631      	mov	r1, r6
 8016662:	4628      	mov	r0, r5
 8016664:	47b8      	blx	r7
 8016666:	3001      	adds	r0, #1
 8016668:	f43f ae6b 	beq.w	8016342 <_printf_float+0xbe>
 801666c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016670:	2200      	movs	r2, #0
 8016672:	2300      	movs	r3, #0
 8016674:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8016678:	f7ea fa4e 	bl	8000b18 <__aeabi_dcmpeq>
 801667c:	b9d8      	cbnz	r0, 80166b6 <_printf_float+0x432>
 801667e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016682:	f108 0201 	add.w	r2, r8, #1
 8016686:	4631      	mov	r1, r6
 8016688:	4628      	mov	r0, r5
 801668a:	47b8      	blx	r7
 801668c:	3001      	adds	r0, #1
 801668e:	d10e      	bne.n	80166ae <_printf_float+0x42a>
 8016690:	e657      	b.n	8016342 <_printf_float+0xbe>
 8016692:	2301      	movs	r3, #1
 8016694:	4652      	mov	r2, sl
 8016696:	4631      	mov	r1, r6
 8016698:	4628      	mov	r0, r5
 801669a:	47b8      	blx	r7
 801669c:	3001      	adds	r0, #1
 801669e:	f43f ae50 	beq.w	8016342 <_printf_float+0xbe>
 80166a2:	f108 0801 	add.w	r8, r8, #1
 80166a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166a8:	3b01      	subs	r3, #1
 80166aa:	4543      	cmp	r3, r8
 80166ac:	dcf1      	bgt.n	8016692 <_printf_float+0x40e>
 80166ae:	464b      	mov	r3, r9
 80166b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80166b4:	e6da      	b.n	801646c <_printf_float+0x1e8>
 80166b6:	f04f 0800 	mov.w	r8, #0
 80166ba:	f104 0a1a 	add.w	sl, r4, #26
 80166be:	e7f2      	b.n	80166a6 <_printf_float+0x422>
 80166c0:	2301      	movs	r3, #1
 80166c2:	4642      	mov	r2, r8
 80166c4:	e7df      	b.n	8016686 <_printf_float+0x402>
 80166c6:	2301      	movs	r3, #1
 80166c8:	464a      	mov	r2, r9
 80166ca:	4631      	mov	r1, r6
 80166cc:	4628      	mov	r0, r5
 80166ce:	47b8      	blx	r7
 80166d0:	3001      	adds	r0, #1
 80166d2:	f43f ae36 	beq.w	8016342 <_printf_float+0xbe>
 80166d6:	f108 0801 	add.w	r8, r8, #1
 80166da:	68e3      	ldr	r3, [r4, #12]
 80166dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166de:	1a5b      	subs	r3, r3, r1
 80166e0:	4543      	cmp	r3, r8
 80166e2:	dcf0      	bgt.n	80166c6 <_printf_float+0x442>
 80166e4:	e6f8      	b.n	80164d8 <_printf_float+0x254>
 80166e6:	f04f 0800 	mov.w	r8, #0
 80166ea:	f104 0919 	add.w	r9, r4, #25
 80166ee:	e7f4      	b.n	80166da <_printf_float+0x456>

080166f0 <_printf_common>:
 80166f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166f4:	4616      	mov	r6, r2
 80166f6:	4699      	mov	r9, r3
 80166f8:	688a      	ldr	r2, [r1, #8]
 80166fa:	690b      	ldr	r3, [r1, #16]
 80166fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016700:	4293      	cmp	r3, r2
 8016702:	bfb8      	it	lt
 8016704:	4613      	movlt	r3, r2
 8016706:	6033      	str	r3, [r6, #0]
 8016708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801670c:	4607      	mov	r7, r0
 801670e:	460c      	mov	r4, r1
 8016710:	b10a      	cbz	r2, 8016716 <_printf_common+0x26>
 8016712:	3301      	adds	r3, #1
 8016714:	6033      	str	r3, [r6, #0]
 8016716:	6823      	ldr	r3, [r4, #0]
 8016718:	0699      	lsls	r1, r3, #26
 801671a:	bf42      	ittt	mi
 801671c:	6833      	ldrmi	r3, [r6, #0]
 801671e:	3302      	addmi	r3, #2
 8016720:	6033      	strmi	r3, [r6, #0]
 8016722:	6825      	ldr	r5, [r4, #0]
 8016724:	f015 0506 	ands.w	r5, r5, #6
 8016728:	d106      	bne.n	8016738 <_printf_common+0x48>
 801672a:	f104 0a19 	add.w	sl, r4, #25
 801672e:	68e3      	ldr	r3, [r4, #12]
 8016730:	6832      	ldr	r2, [r6, #0]
 8016732:	1a9b      	subs	r3, r3, r2
 8016734:	42ab      	cmp	r3, r5
 8016736:	dc26      	bgt.n	8016786 <_printf_common+0x96>
 8016738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801673c:	1e13      	subs	r3, r2, #0
 801673e:	6822      	ldr	r2, [r4, #0]
 8016740:	bf18      	it	ne
 8016742:	2301      	movne	r3, #1
 8016744:	0692      	lsls	r2, r2, #26
 8016746:	d42b      	bmi.n	80167a0 <_printf_common+0xb0>
 8016748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801674c:	4649      	mov	r1, r9
 801674e:	4638      	mov	r0, r7
 8016750:	47c0      	blx	r8
 8016752:	3001      	adds	r0, #1
 8016754:	d01e      	beq.n	8016794 <_printf_common+0xa4>
 8016756:	6823      	ldr	r3, [r4, #0]
 8016758:	6922      	ldr	r2, [r4, #16]
 801675a:	f003 0306 	and.w	r3, r3, #6
 801675e:	2b04      	cmp	r3, #4
 8016760:	bf02      	ittt	eq
 8016762:	68e5      	ldreq	r5, [r4, #12]
 8016764:	6833      	ldreq	r3, [r6, #0]
 8016766:	1aed      	subeq	r5, r5, r3
 8016768:	68a3      	ldr	r3, [r4, #8]
 801676a:	bf0c      	ite	eq
 801676c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016770:	2500      	movne	r5, #0
 8016772:	4293      	cmp	r3, r2
 8016774:	bfc4      	itt	gt
 8016776:	1a9b      	subgt	r3, r3, r2
 8016778:	18ed      	addgt	r5, r5, r3
 801677a:	2600      	movs	r6, #0
 801677c:	341a      	adds	r4, #26
 801677e:	42b5      	cmp	r5, r6
 8016780:	d11a      	bne.n	80167b8 <_printf_common+0xc8>
 8016782:	2000      	movs	r0, #0
 8016784:	e008      	b.n	8016798 <_printf_common+0xa8>
 8016786:	2301      	movs	r3, #1
 8016788:	4652      	mov	r2, sl
 801678a:	4649      	mov	r1, r9
 801678c:	4638      	mov	r0, r7
 801678e:	47c0      	blx	r8
 8016790:	3001      	adds	r0, #1
 8016792:	d103      	bne.n	801679c <_printf_common+0xac>
 8016794:	f04f 30ff 	mov.w	r0, #4294967295
 8016798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801679c:	3501      	adds	r5, #1
 801679e:	e7c6      	b.n	801672e <_printf_common+0x3e>
 80167a0:	18e1      	adds	r1, r4, r3
 80167a2:	1c5a      	adds	r2, r3, #1
 80167a4:	2030      	movs	r0, #48	; 0x30
 80167a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80167aa:	4422      	add	r2, r4
 80167ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80167b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80167b4:	3302      	adds	r3, #2
 80167b6:	e7c7      	b.n	8016748 <_printf_common+0x58>
 80167b8:	2301      	movs	r3, #1
 80167ba:	4622      	mov	r2, r4
 80167bc:	4649      	mov	r1, r9
 80167be:	4638      	mov	r0, r7
 80167c0:	47c0      	blx	r8
 80167c2:	3001      	adds	r0, #1
 80167c4:	d0e6      	beq.n	8016794 <_printf_common+0xa4>
 80167c6:	3601      	adds	r6, #1
 80167c8:	e7d9      	b.n	801677e <_printf_common+0x8e>
	...

080167cc <_printf_i>:
 80167cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80167d0:	7e0f      	ldrb	r7, [r1, #24]
 80167d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80167d4:	2f78      	cmp	r7, #120	; 0x78
 80167d6:	4691      	mov	r9, r2
 80167d8:	4680      	mov	r8, r0
 80167da:	460c      	mov	r4, r1
 80167dc:	469a      	mov	sl, r3
 80167de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80167e2:	d807      	bhi.n	80167f4 <_printf_i+0x28>
 80167e4:	2f62      	cmp	r7, #98	; 0x62
 80167e6:	d80a      	bhi.n	80167fe <_printf_i+0x32>
 80167e8:	2f00      	cmp	r7, #0
 80167ea:	f000 80d4 	beq.w	8016996 <_printf_i+0x1ca>
 80167ee:	2f58      	cmp	r7, #88	; 0x58
 80167f0:	f000 80c0 	beq.w	8016974 <_printf_i+0x1a8>
 80167f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80167fc:	e03a      	b.n	8016874 <_printf_i+0xa8>
 80167fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016802:	2b15      	cmp	r3, #21
 8016804:	d8f6      	bhi.n	80167f4 <_printf_i+0x28>
 8016806:	a101      	add	r1, pc, #4	; (adr r1, 801680c <_printf_i+0x40>)
 8016808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801680c:	08016865 	.word	0x08016865
 8016810:	08016879 	.word	0x08016879
 8016814:	080167f5 	.word	0x080167f5
 8016818:	080167f5 	.word	0x080167f5
 801681c:	080167f5 	.word	0x080167f5
 8016820:	080167f5 	.word	0x080167f5
 8016824:	08016879 	.word	0x08016879
 8016828:	080167f5 	.word	0x080167f5
 801682c:	080167f5 	.word	0x080167f5
 8016830:	080167f5 	.word	0x080167f5
 8016834:	080167f5 	.word	0x080167f5
 8016838:	0801697d 	.word	0x0801697d
 801683c:	080168a5 	.word	0x080168a5
 8016840:	08016937 	.word	0x08016937
 8016844:	080167f5 	.word	0x080167f5
 8016848:	080167f5 	.word	0x080167f5
 801684c:	0801699f 	.word	0x0801699f
 8016850:	080167f5 	.word	0x080167f5
 8016854:	080168a5 	.word	0x080168a5
 8016858:	080167f5 	.word	0x080167f5
 801685c:	080167f5 	.word	0x080167f5
 8016860:	0801693f 	.word	0x0801693f
 8016864:	682b      	ldr	r3, [r5, #0]
 8016866:	1d1a      	adds	r2, r3, #4
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	602a      	str	r2, [r5, #0]
 801686c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016874:	2301      	movs	r3, #1
 8016876:	e09f      	b.n	80169b8 <_printf_i+0x1ec>
 8016878:	6820      	ldr	r0, [r4, #0]
 801687a:	682b      	ldr	r3, [r5, #0]
 801687c:	0607      	lsls	r7, r0, #24
 801687e:	f103 0104 	add.w	r1, r3, #4
 8016882:	6029      	str	r1, [r5, #0]
 8016884:	d501      	bpl.n	801688a <_printf_i+0xbe>
 8016886:	681e      	ldr	r6, [r3, #0]
 8016888:	e003      	b.n	8016892 <_printf_i+0xc6>
 801688a:	0646      	lsls	r6, r0, #25
 801688c:	d5fb      	bpl.n	8016886 <_printf_i+0xba>
 801688e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016892:	2e00      	cmp	r6, #0
 8016894:	da03      	bge.n	801689e <_printf_i+0xd2>
 8016896:	232d      	movs	r3, #45	; 0x2d
 8016898:	4276      	negs	r6, r6
 801689a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801689e:	485a      	ldr	r0, [pc, #360]	; (8016a08 <_printf_i+0x23c>)
 80168a0:	230a      	movs	r3, #10
 80168a2:	e012      	b.n	80168ca <_printf_i+0xfe>
 80168a4:	682b      	ldr	r3, [r5, #0]
 80168a6:	6820      	ldr	r0, [r4, #0]
 80168a8:	1d19      	adds	r1, r3, #4
 80168aa:	6029      	str	r1, [r5, #0]
 80168ac:	0605      	lsls	r5, r0, #24
 80168ae:	d501      	bpl.n	80168b4 <_printf_i+0xe8>
 80168b0:	681e      	ldr	r6, [r3, #0]
 80168b2:	e002      	b.n	80168ba <_printf_i+0xee>
 80168b4:	0641      	lsls	r1, r0, #25
 80168b6:	d5fb      	bpl.n	80168b0 <_printf_i+0xe4>
 80168b8:	881e      	ldrh	r6, [r3, #0]
 80168ba:	4853      	ldr	r0, [pc, #332]	; (8016a08 <_printf_i+0x23c>)
 80168bc:	2f6f      	cmp	r7, #111	; 0x6f
 80168be:	bf0c      	ite	eq
 80168c0:	2308      	moveq	r3, #8
 80168c2:	230a      	movne	r3, #10
 80168c4:	2100      	movs	r1, #0
 80168c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80168ca:	6865      	ldr	r5, [r4, #4]
 80168cc:	60a5      	str	r5, [r4, #8]
 80168ce:	2d00      	cmp	r5, #0
 80168d0:	bfa2      	ittt	ge
 80168d2:	6821      	ldrge	r1, [r4, #0]
 80168d4:	f021 0104 	bicge.w	r1, r1, #4
 80168d8:	6021      	strge	r1, [r4, #0]
 80168da:	b90e      	cbnz	r6, 80168e0 <_printf_i+0x114>
 80168dc:	2d00      	cmp	r5, #0
 80168de:	d04b      	beq.n	8016978 <_printf_i+0x1ac>
 80168e0:	4615      	mov	r5, r2
 80168e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80168e6:	fb03 6711 	mls	r7, r3, r1, r6
 80168ea:	5dc7      	ldrb	r7, [r0, r7]
 80168ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80168f0:	4637      	mov	r7, r6
 80168f2:	42bb      	cmp	r3, r7
 80168f4:	460e      	mov	r6, r1
 80168f6:	d9f4      	bls.n	80168e2 <_printf_i+0x116>
 80168f8:	2b08      	cmp	r3, #8
 80168fa:	d10b      	bne.n	8016914 <_printf_i+0x148>
 80168fc:	6823      	ldr	r3, [r4, #0]
 80168fe:	07de      	lsls	r6, r3, #31
 8016900:	d508      	bpl.n	8016914 <_printf_i+0x148>
 8016902:	6923      	ldr	r3, [r4, #16]
 8016904:	6861      	ldr	r1, [r4, #4]
 8016906:	4299      	cmp	r1, r3
 8016908:	bfde      	ittt	le
 801690a:	2330      	movle	r3, #48	; 0x30
 801690c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016914:	1b52      	subs	r2, r2, r5
 8016916:	6122      	str	r2, [r4, #16]
 8016918:	f8cd a000 	str.w	sl, [sp]
 801691c:	464b      	mov	r3, r9
 801691e:	aa03      	add	r2, sp, #12
 8016920:	4621      	mov	r1, r4
 8016922:	4640      	mov	r0, r8
 8016924:	f7ff fee4 	bl	80166f0 <_printf_common>
 8016928:	3001      	adds	r0, #1
 801692a:	d14a      	bne.n	80169c2 <_printf_i+0x1f6>
 801692c:	f04f 30ff 	mov.w	r0, #4294967295
 8016930:	b004      	add	sp, #16
 8016932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016936:	6823      	ldr	r3, [r4, #0]
 8016938:	f043 0320 	orr.w	r3, r3, #32
 801693c:	6023      	str	r3, [r4, #0]
 801693e:	4833      	ldr	r0, [pc, #204]	; (8016a0c <_printf_i+0x240>)
 8016940:	2778      	movs	r7, #120	; 0x78
 8016942:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016946:	6823      	ldr	r3, [r4, #0]
 8016948:	6829      	ldr	r1, [r5, #0]
 801694a:	061f      	lsls	r7, r3, #24
 801694c:	f851 6b04 	ldr.w	r6, [r1], #4
 8016950:	d402      	bmi.n	8016958 <_printf_i+0x18c>
 8016952:	065f      	lsls	r7, r3, #25
 8016954:	bf48      	it	mi
 8016956:	b2b6      	uxthmi	r6, r6
 8016958:	07df      	lsls	r7, r3, #31
 801695a:	bf48      	it	mi
 801695c:	f043 0320 	orrmi.w	r3, r3, #32
 8016960:	6029      	str	r1, [r5, #0]
 8016962:	bf48      	it	mi
 8016964:	6023      	strmi	r3, [r4, #0]
 8016966:	b91e      	cbnz	r6, 8016970 <_printf_i+0x1a4>
 8016968:	6823      	ldr	r3, [r4, #0]
 801696a:	f023 0320 	bic.w	r3, r3, #32
 801696e:	6023      	str	r3, [r4, #0]
 8016970:	2310      	movs	r3, #16
 8016972:	e7a7      	b.n	80168c4 <_printf_i+0xf8>
 8016974:	4824      	ldr	r0, [pc, #144]	; (8016a08 <_printf_i+0x23c>)
 8016976:	e7e4      	b.n	8016942 <_printf_i+0x176>
 8016978:	4615      	mov	r5, r2
 801697a:	e7bd      	b.n	80168f8 <_printf_i+0x12c>
 801697c:	682b      	ldr	r3, [r5, #0]
 801697e:	6826      	ldr	r6, [r4, #0]
 8016980:	6961      	ldr	r1, [r4, #20]
 8016982:	1d18      	adds	r0, r3, #4
 8016984:	6028      	str	r0, [r5, #0]
 8016986:	0635      	lsls	r5, r6, #24
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	d501      	bpl.n	8016990 <_printf_i+0x1c4>
 801698c:	6019      	str	r1, [r3, #0]
 801698e:	e002      	b.n	8016996 <_printf_i+0x1ca>
 8016990:	0670      	lsls	r0, r6, #25
 8016992:	d5fb      	bpl.n	801698c <_printf_i+0x1c0>
 8016994:	8019      	strh	r1, [r3, #0]
 8016996:	2300      	movs	r3, #0
 8016998:	6123      	str	r3, [r4, #16]
 801699a:	4615      	mov	r5, r2
 801699c:	e7bc      	b.n	8016918 <_printf_i+0x14c>
 801699e:	682b      	ldr	r3, [r5, #0]
 80169a0:	1d1a      	adds	r2, r3, #4
 80169a2:	602a      	str	r2, [r5, #0]
 80169a4:	681d      	ldr	r5, [r3, #0]
 80169a6:	6862      	ldr	r2, [r4, #4]
 80169a8:	2100      	movs	r1, #0
 80169aa:	4628      	mov	r0, r5
 80169ac:	f7e9 fc38 	bl	8000220 <memchr>
 80169b0:	b108      	cbz	r0, 80169b6 <_printf_i+0x1ea>
 80169b2:	1b40      	subs	r0, r0, r5
 80169b4:	6060      	str	r0, [r4, #4]
 80169b6:	6863      	ldr	r3, [r4, #4]
 80169b8:	6123      	str	r3, [r4, #16]
 80169ba:	2300      	movs	r3, #0
 80169bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80169c0:	e7aa      	b.n	8016918 <_printf_i+0x14c>
 80169c2:	6923      	ldr	r3, [r4, #16]
 80169c4:	462a      	mov	r2, r5
 80169c6:	4649      	mov	r1, r9
 80169c8:	4640      	mov	r0, r8
 80169ca:	47d0      	blx	sl
 80169cc:	3001      	adds	r0, #1
 80169ce:	d0ad      	beq.n	801692c <_printf_i+0x160>
 80169d0:	6823      	ldr	r3, [r4, #0]
 80169d2:	079b      	lsls	r3, r3, #30
 80169d4:	d413      	bmi.n	80169fe <_printf_i+0x232>
 80169d6:	68e0      	ldr	r0, [r4, #12]
 80169d8:	9b03      	ldr	r3, [sp, #12]
 80169da:	4298      	cmp	r0, r3
 80169dc:	bfb8      	it	lt
 80169de:	4618      	movlt	r0, r3
 80169e0:	e7a6      	b.n	8016930 <_printf_i+0x164>
 80169e2:	2301      	movs	r3, #1
 80169e4:	4632      	mov	r2, r6
 80169e6:	4649      	mov	r1, r9
 80169e8:	4640      	mov	r0, r8
 80169ea:	47d0      	blx	sl
 80169ec:	3001      	adds	r0, #1
 80169ee:	d09d      	beq.n	801692c <_printf_i+0x160>
 80169f0:	3501      	adds	r5, #1
 80169f2:	68e3      	ldr	r3, [r4, #12]
 80169f4:	9903      	ldr	r1, [sp, #12]
 80169f6:	1a5b      	subs	r3, r3, r1
 80169f8:	42ab      	cmp	r3, r5
 80169fa:	dcf2      	bgt.n	80169e2 <_printf_i+0x216>
 80169fc:	e7eb      	b.n	80169d6 <_printf_i+0x20a>
 80169fe:	2500      	movs	r5, #0
 8016a00:	f104 0619 	add.w	r6, r4, #25
 8016a04:	e7f5      	b.n	80169f2 <_printf_i+0x226>
 8016a06:	bf00      	nop
 8016a08:	0801d622 	.word	0x0801d622
 8016a0c:	0801d633 	.word	0x0801d633

08016a10 <_scanf_float>:
 8016a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a14:	b087      	sub	sp, #28
 8016a16:	4617      	mov	r7, r2
 8016a18:	9303      	str	r3, [sp, #12]
 8016a1a:	688b      	ldr	r3, [r1, #8]
 8016a1c:	1e5a      	subs	r2, r3, #1
 8016a1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016a22:	bf83      	ittte	hi
 8016a24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016a28:	195b      	addhi	r3, r3, r5
 8016a2a:	9302      	strhi	r3, [sp, #8]
 8016a2c:	2300      	movls	r3, #0
 8016a2e:	bf86      	itte	hi
 8016a30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016a34:	608b      	strhi	r3, [r1, #8]
 8016a36:	9302      	strls	r3, [sp, #8]
 8016a38:	680b      	ldr	r3, [r1, #0]
 8016a3a:	468b      	mov	fp, r1
 8016a3c:	2500      	movs	r5, #0
 8016a3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016a42:	f84b 3b1c 	str.w	r3, [fp], #28
 8016a46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016a4a:	4680      	mov	r8, r0
 8016a4c:	460c      	mov	r4, r1
 8016a4e:	465e      	mov	r6, fp
 8016a50:	46aa      	mov	sl, r5
 8016a52:	46a9      	mov	r9, r5
 8016a54:	9501      	str	r5, [sp, #4]
 8016a56:	68a2      	ldr	r2, [r4, #8]
 8016a58:	b152      	cbz	r2, 8016a70 <_scanf_float+0x60>
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	781b      	ldrb	r3, [r3, #0]
 8016a5e:	2b4e      	cmp	r3, #78	; 0x4e
 8016a60:	d864      	bhi.n	8016b2c <_scanf_float+0x11c>
 8016a62:	2b40      	cmp	r3, #64	; 0x40
 8016a64:	d83c      	bhi.n	8016ae0 <_scanf_float+0xd0>
 8016a66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016a6a:	b2c8      	uxtb	r0, r1
 8016a6c:	280e      	cmp	r0, #14
 8016a6e:	d93a      	bls.n	8016ae6 <_scanf_float+0xd6>
 8016a70:	f1b9 0f00 	cmp.w	r9, #0
 8016a74:	d003      	beq.n	8016a7e <_scanf_float+0x6e>
 8016a76:	6823      	ldr	r3, [r4, #0]
 8016a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016a7c:	6023      	str	r3, [r4, #0]
 8016a7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a82:	f1ba 0f01 	cmp.w	sl, #1
 8016a86:	f200 8113 	bhi.w	8016cb0 <_scanf_float+0x2a0>
 8016a8a:	455e      	cmp	r6, fp
 8016a8c:	f200 8105 	bhi.w	8016c9a <_scanf_float+0x28a>
 8016a90:	2501      	movs	r5, #1
 8016a92:	4628      	mov	r0, r5
 8016a94:	b007      	add	sp, #28
 8016a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016a9e:	2a0d      	cmp	r2, #13
 8016aa0:	d8e6      	bhi.n	8016a70 <_scanf_float+0x60>
 8016aa2:	a101      	add	r1, pc, #4	; (adr r1, 8016aa8 <_scanf_float+0x98>)
 8016aa4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016aa8:	08016be7 	.word	0x08016be7
 8016aac:	08016a71 	.word	0x08016a71
 8016ab0:	08016a71 	.word	0x08016a71
 8016ab4:	08016a71 	.word	0x08016a71
 8016ab8:	08016c47 	.word	0x08016c47
 8016abc:	08016c1f 	.word	0x08016c1f
 8016ac0:	08016a71 	.word	0x08016a71
 8016ac4:	08016a71 	.word	0x08016a71
 8016ac8:	08016bf5 	.word	0x08016bf5
 8016acc:	08016a71 	.word	0x08016a71
 8016ad0:	08016a71 	.word	0x08016a71
 8016ad4:	08016a71 	.word	0x08016a71
 8016ad8:	08016a71 	.word	0x08016a71
 8016adc:	08016bad 	.word	0x08016bad
 8016ae0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016ae4:	e7db      	b.n	8016a9e <_scanf_float+0x8e>
 8016ae6:	290e      	cmp	r1, #14
 8016ae8:	d8c2      	bhi.n	8016a70 <_scanf_float+0x60>
 8016aea:	a001      	add	r0, pc, #4	; (adr r0, 8016af0 <_scanf_float+0xe0>)
 8016aec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016af0:	08016b9f 	.word	0x08016b9f
 8016af4:	08016a71 	.word	0x08016a71
 8016af8:	08016b9f 	.word	0x08016b9f
 8016afc:	08016c33 	.word	0x08016c33
 8016b00:	08016a71 	.word	0x08016a71
 8016b04:	08016b4d 	.word	0x08016b4d
 8016b08:	08016b89 	.word	0x08016b89
 8016b0c:	08016b89 	.word	0x08016b89
 8016b10:	08016b89 	.word	0x08016b89
 8016b14:	08016b89 	.word	0x08016b89
 8016b18:	08016b89 	.word	0x08016b89
 8016b1c:	08016b89 	.word	0x08016b89
 8016b20:	08016b89 	.word	0x08016b89
 8016b24:	08016b89 	.word	0x08016b89
 8016b28:	08016b89 	.word	0x08016b89
 8016b2c:	2b6e      	cmp	r3, #110	; 0x6e
 8016b2e:	d809      	bhi.n	8016b44 <_scanf_float+0x134>
 8016b30:	2b60      	cmp	r3, #96	; 0x60
 8016b32:	d8b2      	bhi.n	8016a9a <_scanf_float+0x8a>
 8016b34:	2b54      	cmp	r3, #84	; 0x54
 8016b36:	d077      	beq.n	8016c28 <_scanf_float+0x218>
 8016b38:	2b59      	cmp	r3, #89	; 0x59
 8016b3a:	d199      	bne.n	8016a70 <_scanf_float+0x60>
 8016b3c:	2d07      	cmp	r5, #7
 8016b3e:	d197      	bne.n	8016a70 <_scanf_float+0x60>
 8016b40:	2508      	movs	r5, #8
 8016b42:	e029      	b.n	8016b98 <_scanf_float+0x188>
 8016b44:	2b74      	cmp	r3, #116	; 0x74
 8016b46:	d06f      	beq.n	8016c28 <_scanf_float+0x218>
 8016b48:	2b79      	cmp	r3, #121	; 0x79
 8016b4a:	e7f6      	b.n	8016b3a <_scanf_float+0x12a>
 8016b4c:	6821      	ldr	r1, [r4, #0]
 8016b4e:	05c8      	lsls	r0, r1, #23
 8016b50:	d51a      	bpl.n	8016b88 <_scanf_float+0x178>
 8016b52:	9b02      	ldr	r3, [sp, #8]
 8016b54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016b58:	6021      	str	r1, [r4, #0]
 8016b5a:	f109 0901 	add.w	r9, r9, #1
 8016b5e:	b11b      	cbz	r3, 8016b68 <_scanf_float+0x158>
 8016b60:	3b01      	subs	r3, #1
 8016b62:	3201      	adds	r2, #1
 8016b64:	9302      	str	r3, [sp, #8]
 8016b66:	60a2      	str	r2, [r4, #8]
 8016b68:	68a3      	ldr	r3, [r4, #8]
 8016b6a:	3b01      	subs	r3, #1
 8016b6c:	60a3      	str	r3, [r4, #8]
 8016b6e:	6923      	ldr	r3, [r4, #16]
 8016b70:	3301      	adds	r3, #1
 8016b72:	6123      	str	r3, [r4, #16]
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	3b01      	subs	r3, #1
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	607b      	str	r3, [r7, #4]
 8016b7c:	f340 8084 	ble.w	8016c88 <_scanf_float+0x278>
 8016b80:	683b      	ldr	r3, [r7, #0]
 8016b82:	3301      	adds	r3, #1
 8016b84:	603b      	str	r3, [r7, #0]
 8016b86:	e766      	b.n	8016a56 <_scanf_float+0x46>
 8016b88:	eb1a 0f05 	cmn.w	sl, r5
 8016b8c:	f47f af70 	bne.w	8016a70 <_scanf_float+0x60>
 8016b90:	6822      	ldr	r2, [r4, #0]
 8016b92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016b96:	6022      	str	r2, [r4, #0]
 8016b98:	f806 3b01 	strb.w	r3, [r6], #1
 8016b9c:	e7e4      	b.n	8016b68 <_scanf_float+0x158>
 8016b9e:	6822      	ldr	r2, [r4, #0]
 8016ba0:	0610      	lsls	r0, r2, #24
 8016ba2:	f57f af65 	bpl.w	8016a70 <_scanf_float+0x60>
 8016ba6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016baa:	e7f4      	b.n	8016b96 <_scanf_float+0x186>
 8016bac:	f1ba 0f00 	cmp.w	sl, #0
 8016bb0:	d10e      	bne.n	8016bd0 <_scanf_float+0x1c0>
 8016bb2:	f1b9 0f00 	cmp.w	r9, #0
 8016bb6:	d10e      	bne.n	8016bd6 <_scanf_float+0x1c6>
 8016bb8:	6822      	ldr	r2, [r4, #0]
 8016bba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016bbe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016bc2:	d108      	bne.n	8016bd6 <_scanf_float+0x1c6>
 8016bc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016bc8:	6022      	str	r2, [r4, #0]
 8016bca:	f04f 0a01 	mov.w	sl, #1
 8016bce:	e7e3      	b.n	8016b98 <_scanf_float+0x188>
 8016bd0:	f1ba 0f02 	cmp.w	sl, #2
 8016bd4:	d055      	beq.n	8016c82 <_scanf_float+0x272>
 8016bd6:	2d01      	cmp	r5, #1
 8016bd8:	d002      	beq.n	8016be0 <_scanf_float+0x1d0>
 8016bda:	2d04      	cmp	r5, #4
 8016bdc:	f47f af48 	bne.w	8016a70 <_scanf_float+0x60>
 8016be0:	3501      	adds	r5, #1
 8016be2:	b2ed      	uxtb	r5, r5
 8016be4:	e7d8      	b.n	8016b98 <_scanf_float+0x188>
 8016be6:	f1ba 0f01 	cmp.w	sl, #1
 8016bea:	f47f af41 	bne.w	8016a70 <_scanf_float+0x60>
 8016bee:	f04f 0a02 	mov.w	sl, #2
 8016bf2:	e7d1      	b.n	8016b98 <_scanf_float+0x188>
 8016bf4:	b97d      	cbnz	r5, 8016c16 <_scanf_float+0x206>
 8016bf6:	f1b9 0f00 	cmp.w	r9, #0
 8016bfa:	f47f af3c 	bne.w	8016a76 <_scanf_float+0x66>
 8016bfe:	6822      	ldr	r2, [r4, #0]
 8016c00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016c04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016c08:	f47f af39 	bne.w	8016a7e <_scanf_float+0x6e>
 8016c0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016c10:	6022      	str	r2, [r4, #0]
 8016c12:	2501      	movs	r5, #1
 8016c14:	e7c0      	b.n	8016b98 <_scanf_float+0x188>
 8016c16:	2d03      	cmp	r5, #3
 8016c18:	d0e2      	beq.n	8016be0 <_scanf_float+0x1d0>
 8016c1a:	2d05      	cmp	r5, #5
 8016c1c:	e7de      	b.n	8016bdc <_scanf_float+0x1cc>
 8016c1e:	2d02      	cmp	r5, #2
 8016c20:	f47f af26 	bne.w	8016a70 <_scanf_float+0x60>
 8016c24:	2503      	movs	r5, #3
 8016c26:	e7b7      	b.n	8016b98 <_scanf_float+0x188>
 8016c28:	2d06      	cmp	r5, #6
 8016c2a:	f47f af21 	bne.w	8016a70 <_scanf_float+0x60>
 8016c2e:	2507      	movs	r5, #7
 8016c30:	e7b2      	b.n	8016b98 <_scanf_float+0x188>
 8016c32:	6822      	ldr	r2, [r4, #0]
 8016c34:	0591      	lsls	r1, r2, #22
 8016c36:	f57f af1b 	bpl.w	8016a70 <_scanf_float+0x60>
 8016c3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016c3e:	6022      	str	r2, [r4, #0]
 8016c40:	f8cd 9004 	str.w	r9, [sp, #4]
 8016c44:	e7a8      	b.n	8016b98 <_scanf_float+0x188>
 8016c46:	6822      	ldr	r2, [r4, #0]
 8016c48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016c4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016c50:	d006      	beq.n	8016c60 <_scanf_float+0x250>
 8016c52:	0550      	lsls	r0, r2, #21
 8016c54:	f57f af0c 	bpl.w	8016a70 <_scanf_float+0x60>
 8016c58:	f1b9 0f00 	cmp.w	r9, #0
 8016c5c:	f43f af0f 	beq.w	8016a7e <_scanf_float+0x6e>
 8016c60:	0591      	lsls	r1, r2, #22
 8016c62:	bf58      	it	pl
 8016c64:	9901      	ldrpl	r1, [sp, #4]
 8016c66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016c6a:	bf58      	it	pl
 8016c6c:	eba9 0101 	subpl.w	r1, r9, r1
 8016c70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016c74:	bf58      	it	pl
 8016c76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016c7a:	6022      	str	r2, [r4, #0]
 8016c7c:	f04f 0900 	mov.w	r9, #0
 8016c80:	e78a      	b.n	8016b98 <_scanf_float+0x188>
 8016c82:	f04f 0a03 	mov.w	sl, #3
 8016c86:	e787      	b.n	8016b98 <_scanf_float+0x188>
 8016c88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c8c:	4639      	mov	r1, r7
 8016c8e:	4640      	mov	r0, r8
 8016c90:	4798      	blx	r3
 8016c92:	2800      	cmp	r0, #0
 8016c94:	f43f aedf 	beq.w	8016a56 <_scanf_float+0x46>
 8016c98:	e6ea      	b.n	8016a70 <_scanf_float+0x60>
 8016c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016ca2:	463a      	mov	r2, r7
 8016ca4:	4640      	mov	r0, r8
 8016ca6:	4798      	blx	r3
 8016ca8:	6923      	ldr	r3, [r4, #16]
 8016caa:	3b01      	subs	r3, #1
 8016cac:	6123      	str	r3, [r4, #16]
 8016cae:	e6ec      	b.n	8016a8a <_scanf_float+0x7a>
 8016cb0:	1e6b      	subs	r3, r5, #1
 8016cb2:	2b06      	cmp	r3, #6
 8016cb4:	d825      	bhi.n	8016d02 <_scanf_float+0x2f2>
 8016cb6:	2d02      	cmp	r5, #2
 8016cb8:	d836      	bhi.n	8016d28 <_scanf_float+0x318>
 8016cba:	455e      	cmp	r6, fp
 8016cbc:	f67f aee8 	bls.w	8016a90 <_scanf_float+0x80>
 8016cc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016cc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016cc8:	463a      	mov	r2, r7
 8016cca:	4640      	mov	r0, r8
 8016ccc:	4798      	blx	r3
 8016cce:	6923      	ldr	r3, [r4, #16]
 8016cd0:	3b01      	subs	r3, #1
 8016cd2:	6123      	str	r3, [r4, #16]
 8016cd4:	e7f1      	b.n	8016cba <_scanf_float+0x2aa>
 8016cd6:	9802      	ldr	r0, [sp, #8]
 8016cd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016cdc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016ce0:	9002      	str	r0, [sp, #8]
 8016ce2:	463a      	mov	r2, r7
 8016ce4:	4640      	mov	r0, r8
 8016ce6:	4798      	blx	r3
 8016ce8:	6923      	ldr	r3, [r4, #16]
 8016cea:	3b01      	subs	r3, #1
 8016cec:	6123      	str	r3, [r4, #16]
 8016cee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016cf2:	fa5f fa8a 	uxtb.w	sl, sl
 8016cf6:	f1ba 0f02 	cmp.w	sl, #2
 8016cfa:	d1ec      	bne.n	8016cd6 <_scanf_float+0x2c6>
 8016cfc:	3d03      	subs	r5, #3
 8016cfe:	b2ed      	uxtb	r5, r5
 8016d00:	1b76      	subs	r6, r6, r5
 8016d02:	6823      	ldr	r3, [r4, #0]
 8016d04:	05da      	lsls	r2, r3, #23
 8016d06:	d52f      	bpl.n	8016d68 <_scanf_float+0x358>
 8016d08:	055b      	lsls	r3, r3, #21
 8016d0a:	d510      	bpl.n	8016d2e <_scanf_float+0x31e>
 8016d0c:	455e      	cmp	r6, fp
 8016d0e:	f67f aebf 	bls.w	8016a90 <_scanf_float+0x80>
 8016d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016d1a:	463a      	mov	r2, r7
 8016d1c:	4640      	mov	r0, r8
 8016d1e:	4798      	blx	r3
 8016d20:	6923      	ldr	r3, [r4, #16]
 8016d22:	3b01      	subs	r3, #1
 8016d24:	6123      	str	r3, [r4, #16]
 8016d26:	e7f1      	b.n	8016d0c <_scanf_float+0x2fc>
 8016d28:	46aa      	mov	sl, r5
 8016d2a:	9602      	str	r6, [sp, #8]
 8016d2c:	e7df      	b.n	8016cee <_scanf_float+0x2de>
 8016d2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016d32:	6923      	ldr	r3, [r4, #16]
 8016d34:	2965      	cmp	r1, #101	; 0x65
 8016d36:	f103 33ff 	add.w	r3, r3, #4294967295
 8016d3a:	f106 35ff 	add.w	r5, r6, #4294967295
 8016d3e:	6123      	str	r3, [r4, #16]
 8016d40:	d00c      	beq.n	8016d5c <_scanf_float+0x34c>
 8016d42:	2945      	cmp	r1, #69	; 0x45
 8016d44:	d00a      	beq.n	8016d5c <_scanf_float+0x34c>
 8016d46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d4a:	463a      	mov	r2, r7
 8016d4c:	4640      	mov	r0, r8
 8016d4e:	4798      	blx	r3
 8016d50:	6923      	ldr	r3, [r4, #16]
 8016d52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016d56:	3b01      	subs	r3, #1
 8016d58:	1eb5      	subs	r5, r6, #2
 8016d5a:	6123      	str	r3, [r4, #16]
 8016d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d60:	463a      	mov	r2, r7
 8016d62:	4640      	mov	r0, r8
 8016d64:	4798      	blx	r3
 8016d66:	462e      	mov	r6, r5
 8016d68:	6825      	ldr	r5, [r4, #0]
 8016d6a:	f015 0510 	ands.w	r5, r5, #16
 8016d6e:	d158      	bne.n	8016e22 <_scanf_float+0x412>
 8016d70:	7035      	strb	r5, [r6, #0]
 8016d72:	6823      	ldr	r3, [r4, #0]
 8016d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016d7c:	d11c      	bne.n	8016db8 <_scanf_float+0x3a8>
 8016d7e:	9b01      	ldr	r3, [sp, #4]
 8016d80:	454b      	cmp	r3, r9
 8016d82:	eba3 0209 	sub.w	r2, r3, r9
 8016d86:	d124      	bne.n	8016dd2 <_scanf_float+0x3c2>
 8016d88:	2200      	movs	r2, #0
 8016d8a:	4659      	mov	r1, fp
 8016d8c:	4640      	mov	r0, r8
 8016d8e:	f002 fc3f 	bl	8019610 <_strtod_r>
 8016d92:	9b03      	ldr	r3, [sp, #12]
 8016d94:	6821      	ldr	r1, [r4, #0]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	f011 0f02 	tst.w	r1, #2
 8016d9c:	ec57 6b10 	vmov	r6, r7, d0
 8016da0:	f103 0204 	add.w	r2, r3, #4
 8016da4:	d020      	beq.n	8016de8 <_scanf_float+0x3d8>
 8016da6:	9903      	ldr	r1, [sp, #12]
 8016da8:	600a      	str	r2, [r1, #0]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	e9c3 6700 	strd	r6, r7, [r3]
 8016db0:	68e3      	ldr	r3, [r4, #12]
 8016db2:	3301      	adds	r3, #1
 8016db4:	60e3      	str	r3, [r4, #12]
 8016db6:	e66c      	b.n	8016a92 <_scanf_float+0x82>
 8016db8:	9b04      	ldr	r3, [sp, #16]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d0e4      	beq.n	8016d88 <_scanf_float+0x378>
 8016dbe:	9905      	ldr	r1, [sp, #20]
 8016dc0:	230a      	movs	r3, #10
 8016dc2:	462a      	mov	r2, r5
 8016dc4:	3101      	adds	r1, #1
 8016dc6:	4640      	mov	r0, r8
 8016dc8:	f002 fcaa 	bl	8019720 <_strtol_r>
 8016dcc:	9b04      	ldr	r3, [sp, #16]
 8016dce:	9e05      	ldr	r6, [sp, #20]
 8016dd0:	1ac2      	subs	r2, r0, r3
 8016dd2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016dd6:	429e      	cmp	r6, r3
 8016dd8:	bf28      	it	cs
 8016dda:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016dde:	4912      	ldr	r1, [pc, #72]	; (8016e28 <_scanf_float+0x418>)
 8016de0:	4630      	mov	r0, r6
 8016de2:	f000 f8e7 	bl	8016fb4 <siprintf>
 8016de6:	e7cf      	b.n	8016d88 <_scanf_float+0x378>
 8016de8:	f011 0f04 	tst.w	r1, #4
 8016dec:	9903      	ldr	r1, [sp, #12]
 8016dee:	600a      	str	r2, [r1, #0]
 8016df0:	d1db      	bne.n	8016daa <_scanf_float+0x39a>
 8016df2:	f8d3 8000 	ldr.w	r8, [r3]
 8016df6:	ee10 2a10 	vmov	r2, s0
 8016dfa:	ee10 0a10 	vmov	r0, s0
 8016dfe:	463b      	mov	r3, r7
 8016e00:	4639      	mov	r1, r7
 8016e02:	f7e9 febb 	bl	8000b7c <__aeabi_dcmpun>
 8016e06:	b128      	cbz	r0, 8016e14 <_scanf_float+0x404>
 8016e08:	4808      	ldr	r0, [pc, #32]	; (8016e2c <_scanf_float+0x41c>)
 8016e0a:	f000 f9c5 	bl	8017198 <nanf>
 8016e0e:	ed88 0a00 	vstr	s0, [r8]
 8016e12:	e7cd      	b.n	8016db0 <_scanf_float+0x3a0>
 8016e14:	4630      	mov	r0, r6
 8016e16:	4639      	mov	r1, r7
 8016e18:	f7e9 ff0e 	bl	8000c38 <__aeabi_d2f>
 8016e1c:	f8c8 0000 	str.w	r0, [r8]
 8016e20:	e7c6      	b.n	8016db0 <_scanf_float+0x3a0>
 8016e22:	2500      	movs	r5, #0
 8016e24:	e635      	b.n	8016a92 <_scanf_float+0x82>
 8016e26:	bf00      	nop
 8016e28:	0801d644 	.word	0x0801d644
 8016e2c:	0801d9d5 	.word	0x0801d9d5

08016e30 <std>:
 8016e30:	2300      	movs	r3, #0
 8016e32:	b510      	push	{r4, lr}
 8016e34:	4604      	mov	r4, r0
 8016e36:	e9c0 3300 	strd	r3, r3, [r0]
 8016e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e3e:	6083      	str	r3, [r0, #8]
 8016e40:	8181      	strh	r1, [r0, #12]
 8016e42:	6643      	str	r3, [r0, #100]	; 0x64
 8016e44:	81c2      	strh	r2, [r0, #14]
 8016e46:	6183      	str	r3, [r0, #24]
 8016e48:	4619      	mov	r1, r3
 8016e4a:	2208      	movs	r2, #8
 8016e4c:	305c      	adds	r0, #92	; 0x5c
 8016e4e:	f000 f914 	bl	801707a <memset>
 8016e52:	4b0d      	ldr	r3, [pc, #52]	; (8016e88 <std+0x58>)
 8016e54:	6263      	str	r3, [r4, #36]	; 0x24
 8016e56:	4b0d      	ldr	r3, [pc, #52]	; (8016e8c <std+0x5c>)
 8016e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e5a:	4b0d      	ldr	r3, [pc, #52]	; (8016e90 <std+0x60>)
 8016e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e5e:	4b0d      	ldr	r3, [pc, #52]	; (8016e94 <std+0x64>)
 8016e60:	6323      	str	r3, [r4, #48]	; 0x30
 8016e62:	4b0d      	ldr	r3, [pc, #52]	; (8016e98 <std+0x68>)
 8016e64:	6224      	str	r4, [r4, #32]
 8016e66:	429c      	cmp	r4, r3
 8016e68:	d006      	beq.n	8016e78 <std+0x48>
 8016e6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016e6e:	4294      	cmp	r4, r2
 8016e70:	d002      	beq.n	8016e78 <std+0x48>
 8016e72:	33d0      	adds	r3, #208	; 0xd0
 8016e74:	429c      	cmp	r4, r3
 8016e76:	d105      	bne.n	8016e84 <std+0x54>
 8016e78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e80:	f000 b978 	b.w	8017174 <__retarget_lock_init_recursive>
 8016e84:	bd10      	pop	{r4, pc}
 8016e86:	bf00      	nop
 8016e88:	08016ff5 	.word	0x08016ff5
 8016e8c:	08017017 	.word	0x08017017
 8016e90:	0801704f 	.word	0x0801704f
 8016e94:	08017073 	.word	0x08017073
 8016e98:	200035ac 	.word	0x200035ac

08016e9c <stdio_exit_handler>:
 8016e9c:	4a02      	ldr	r2, [pc, #8]	; (8016ea8 <stdio_exit_handler+0xc>)
 8016e9e:	4903      	ldr	r1, [pc, #12]	; (8016eac <stdio_exit_handler+0x10>)
 8016ea0:	4803      	ldr	r0, [pc, #12]	; (8016eb0 <stdio_exit_handler+0x14>)
 8016ea2:	f000 b869 	b.w	8016f78 <_fwalk_sglue>
 8016ea6:	bf00      	nop
 8016ea8:	20000378 	.word	0x20000378
 8016eac:	08019ae1 	.word	0x08019ae1
 8016eb0:	20000384 	.word	0x20000384

08016eb4 <cleanup_stdio>:
 8016eb4:	6841      	ldr	r1, [r0, #4]
 8016eb6:	4b0c      	ldr	r3, [pc, #48]	; (8016ee8 <cleanup_stdio+0x34>)
 8016eb8:	4299      	cmp	r1, r3
 8016eba:	b510      	push	{r4, lr}
 8016ebc:	4604      	mov	r4, r0
 8016ebe:	d001      	beq.n	8016ec4 <cleanup_stdio+0x10>
 8016ec0:	f002 fe0e 	bl	8019ae0 <_fflush_r>
 8016ec4:	68a1      	ldr	r1, [r4, #8]
 8016ec6:	4b09      	ldr	r3, [pc, #36]	; (8016eec <cleanup_stdio+0x38>)
 8016ec8:	4299      	cmp	r1, r3
 8016eca:	d002      	beq.n	8016ed2 <cleanup_stdio+0x1e>
 8016ecc:	4620      	mov	r0, r4
 8016ece:	f002 fe07 	bl	8019ae0 <_fflush_r>
 8016ed2:	68e1      	ldr	r1, [r4, #12]
 8016ed4:	4b06      	ldr	r3, [pc, #24]	; (8016ef0 <cleanup_stdio+0x3c>)
 8016ed6:	4299      	cmp	r1, r3
 8016ed8:	d004      	beq.n	8016ee4 <cleanup_stdio+0x30>
 8016eda:	4620      	mov	r0, r4
 8016edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ee0:	f002 bdfe 	b.w	8019ae0 <_fflush_r>
 8016ee4:	bd10      	pop	{r4, pc}
 8016ee6:	bf00      	nop
 8016ee8:	200035ac 	.word	0x200035ac
 8016eec:	20003614 	.word	0x20003614
 8016ef0:	2000367c 	.word	0x2000367c

08016ef4 <global_stdio_init.part.0>:
 8016ef4:	b510      	push	{r4, lr}
 8016ef6:	4b0b      	ldr	r3, [pc, #44]	; (8016f24 <global_stdio_init.part.0+0x30>)
 8016ef8:	4c0b      	ldr	r4, [pc, #44]	; (8016f28 <global_stdio_init.part.0+0x34>)
 8016efa:	4a0c      	ldr	r2, [pc, #48]	; (8016f2c <global_stdio_init.part.0+0x38>)
 8016efc:	601a      	str	r2, [r3, #0]
 8016efe:	4620      	mov	r0, r4
 8016f00:	2200      	movs	r2, #0
 8016f02:	2104      	movs	r1, #4
 8016f04:	f7ff ff94 	bl	8016e30 <std>
 8016f08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016f0c:	2201      	movs	r2, #1
 8016f0e:	2109      	movs	r1, #9
 8016f10:	f7ff ff8e 	bl	8016e30 <std>
 8016f14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016f18:	2202      	movs	r2, #2
 8016f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f1e:	2112      	movs	r1, #18
 8016f20:	f7ff bf86 	b.w	8016e30 <std>
 8016f24:	200036e4 	.word	0x200036e4
 8016f28:	200035ac 	.word	0x200035ac
 8016f2c:	08016e9d 	.word	0x08016e9d

08016f30 <__sfp_lock_acquire>:
 8016f30:	4801      	ldr	r0, [pc, #4]	; (8016f38 <__sfp_lock_acquire+0x8>)
 8016f32:	f000 b920 	b.w	8017176 <__retarget_lock_acquire_recursive>
 8016f36:	bf00      	nop
 8016f38:	200036ed 	.word	0x200036ed

08016f3c <__sfp_lock_release>:
 8016f3c:	4801      	ldr	r0, [pc, #4]	; (8016f44 <__sfp_lock_release+0x8>)
 8016f3e:	f000 b91b 	b.w	8017178 <__retarget_lock_release_recursive>
 8016f42:	bf00      	nop
 8016f44:	200036ed 	.word	0x200036ed

08016f48 <__sinit>:
 8016f48:	b510      	push	{r4, lr}
 8016f4a:	4604      	mov	r4, r0
 8016f4c:	f7ff fff0 	bl	8016f30 <__sfp_lock_acquire>
 8016f50:	6a23      	ldr	r3, [r4, #32]
 8016f52:	b11b      	cbz	r3, 8016f5c <__sinit+0x14>
 8016f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f58:	f7ff bff0 	b.w	8016f3c <__sfp_lock_release>
 8016f5c:	4b04      	ldr	r3, [pc, #16]	; (8016f70 <__sinit+0x28>)
 8016f5e:	6223      	str	r3, [r4, #32]
 8016f60:	4b04      	ldr	r3, [pc, #16]	; (8016f74 <__sinit+0x2c>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d1f5      	bne.n	8016f54 <__sinit+0xc>
 8016f68:	f7ff ffc4 	bl	8016ef4 <global_stdio_init.part.0>
 8016f6c:	e7f2      	b.n	8016f54 <__sinit+0xc>
 8016f6e:	bf00      	nop
 8016f70:	08016eb5 	.word	0x08016eb5
 8016f74:	200036e4 	.word	0x200036e4

08016f78 <_fwalk_sglue>:
 8016f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f7c:	4607      	mov	r7, r0
 8016f7e:	4688      	mov	r8, r1
 8016f80:	4614      	mov	r4, r2
 8016f82:	2600      	movs	r6, #0
 8016f84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016f88:	f1b9 0901 	subs.w	r9, r9, #1
 8016f8c:	d505      	bpl.n	8016f9a <_fwalk_sglue+0x22>
 8016f8e:	6824      	ldr	r4, [r4, #0]
 8016f90:	2c00      	cmp	r4, #0
 8016f92:	d1f7      	bne.n	8016f84 <_fwalk_sglue+0xc>
 8016f94:	4630      	mov	r0, r6
 8016f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f9a:	89ab      	ldrh	r3, [r5, #12]
 8016f9c:	2b01      	cmp	r3, #1
 8016f9e:	d907      	bls.n	8016fb0 <_fwalk_sglue+0x38>
 8016fa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016fa4:	3301      	adds	r3, #1
 8016fa6:	d003      	beq.n	8016fb0 <_fwalk_sglue+0x38>
 8016fa8:	4629      	mov	r1, r5
 8016faa:	4638      	mov	r0, r7
 8016fac:	47c0      	blx	r8
 8016fae:	4306      	orrs	r6, r0
 8016fb0:	3568      	adds	r5, #104	; 0x68
 8016fb2:	e7e9      	b.n	8016f88 <_fwalk_sglue+0x10>

08016fb4 <siprintf>:
 8016fb4:	b40e      	push	{r1, r2, r3}
 8016fb6:	b500      	push	{lr}
 8016fb8:	b09c      	sub	sp, #112	; 0x70
 8016fba:	ab1d      	add	r3, sp, #116	; 0x74
 8016fbc:	9002      	str	r0, [sp, #8]
 8016fbe:	9006      	str	r0, [sp, #24]
 8016fc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016fc4:	4809      	ldr	r0, [pc, #36]	; (8016fec <siprintf+0x38>)
 8016fc6:	9107      	str	r1, [sp, #28]
 8016fc8:	9104      	str	r1, [sp, #16]
 8016fca:	4909      	ldr	r1, [pc, #36]	; (8016ff0 <siprintf+0x3c>)
 8016fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fd0:	9105      	str	r1, [sp, #20]
 8016fd2:	6800      	ldr	r0, [r0, #0]
 8016fd4:	9301      	str	r3, [sp, #4]
 8016fd6:	a902      	add	r1, sp, #8
 8016fd8:	f002 fbfe 	bl	80197d8 <_svfiprintf_r>
 8016fdc:	9b02      	ldr	r3, [sp, #8]
 8016fde:	2200      	movs	r2, #0
 8016fe0:	701a      	strb	r2, [r3, #0]
 8016fe2:	b01c      	add	sp, #112	; 0x70
 8016fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016fe8:	b003      	add	sp, #12
 8016fea:	4770      	bx	lr
 8016fec:	200003d0 	.word	0x200003d0
 8016ff0:	ffff0208 	.word	0xffff0208

08016ff4 <__sread>:
 8016ff4:	b510      	push	{r4, lr}
 8016ff6:	460c      	mov	r4, r1
 8016ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ffc:	f000 f86c 	bl	80170d8 <_read_r>
 8017000:	2800      	cmp	r0, #0
 8017002:	bfab      	itete	ge
 8017004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017006:	89a3      	ldrhlt	r3, [r4, #12]
 8017008:	181b      	addge	r3, r3, r0
 801700a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801700e:	bfac      	ite	ge
 8017010:	6563      	strge	r3, [r4, #84]	; 0x54
 8017012:	81a3      	strhlt	r3, [r4, #12]
 8017014:	bd10      	pop	{r4, pc}

08017016 <__swrite>:
 8017016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801701a:	461f      	mov	r7, r3
 801701c:	898b      	ldrh	r3, [r1, #12]
 801701e:	05db      	lsls	r3, r3, #23
 8017020:	4605      	mov	r5, r0
 8017022:	460c      	mov	r4, r1
 8017024:	4616      	mov	r6, r2
 8017026:	d505      	bpl.n	8017034 <__swrite+0x1e>
 8017028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801702c:	2302      	movs	r3, #2
 801702e:	2200      	movs	r2, #0
 8017030:	f000 f840 	bl	80170b4 <_lseek_r>
 8017034:	89a3      	ldrh	r3, [r4, #12]
 8017036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801703a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801703e:	81a3      	strh	r3, [r4, #12]
 8017040:	4632      	mov	r2, r6
 8017042:	463b      	mov	r3, r7
 8017044:	4628      	mov	r0, r5
 8017046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801704a:	f000 b857 	b.w	80170fc <_write_r>

0801704e <__sseek>:
 801704e:	b510      	push	{r4, lr}
 8017050:	460c      	mov	r4, r1
 8017052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017056:	f000 f82d 	bl	80170b4 <_lseek_r>
 801705a:	1c43      	adds	r3, r0, #1
 801705c:	89a3      	ldrh	r3, [r4, #12]
 801705e:	bf15      	itete	ne
 8017060:	6560      	strne	r0, [r4, #84]	; 0x54
 8017062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801706a:	81a3      	strheq	r3, [r4, #12]
 801706c:	bf18      	it	ne
 801706e:	81a3      	strhne	r3, [r4, #12]
 8017070:	bd10      	pop	{r4, pc}

08017072 <__sclose>:
 8017072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017076:	f000 b80d 	b.w	8017094 <_close_r>

0801707a <memset>:
 801707a:	4402      	add	r2, r0
 801707c:	4603      	mov	r3, r0
 801707e:	4293      	cmp	r3, r2
 8017080:	d100      	bne.n	8017084 <memset+0xa>
 8017082:	4770      	bx	lr
 8017084:	f803 1b01 	strb.w	r1, [r3], #1
 8017088:	e7f9      	b.n	801707e <memset+0x4>
	...

0801708c <_localeconv_r>:
 801708c:	4800      	ldr	r0, [pc, #0]	; (8017090 <_localeconv_r+0x4>)
 801708e:	4770      	bx	lr
 8017090:	200004c4 	.word	0x200004c4

08017094 <_close_r>:
 8017094:	b538      	push	{r3, r4, r5, lr}
 8017096:	4d06      	ldr	r5, [pc, #24]	; (80170b0 <_close_r+0x1c>)
 8017098:	2300      	movs	r3, #0
 801709a:	4604      	mov	r4, r0
 801709c:	4608      	mov	r0, r1
 801709e:	602b      	str	r3, [r5, #0]
 80170a0:	f7ee fab5 	bl	800560e <_close>
 80170a4:	1c43      	adds	r3, r0, #1
 80170a6:	d102      	bne.n	80170ae <_close_r+0x1a>
 80170a8:	682b      	ldr	r3, [r5, #0]
 80170aa:	b103      	cbz	r3, 80170ae <_close_r+0x1a>
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	bd38      	pop	{r3, r4, r5, pc}
 80170b0:	200036e8 	.word	0x200036e8

080170b4 <_lseek_r>:
 80170b4:	b538      	push	{r3, r4, r5, lr}
 80170b6:	4d07      	ldr	r5, [pc, #28]	; (80170d4 <_lseek_r+0x20>)
 80170b8:	4604      	mov	r4, r0
 80170ba:	4608      	mov	r0, r1
 80170bc:	4611      	mov	r1, r2
 80170be:	2200      	movs	r2, #0
 80170c0:	602a      	str	r2, [r5, #0]
 80170c2:	461a      	mov	r2, r3
 80170c4:	f7ee faca 	bl	800565c <_lseek>
 80170c8:	1c43      	adds	r3, r0, #1
 80170ca:	d102      	bne.n	80170d2 <_lseek_r+0x1e>
 80170cc:	682b      	ldr	r3, [r5, #0]
 80170ce:	b103      	cbz	r3, 80170d2 <_lseek_r+0x1e>
 80170d0:	6023      	str	r3, [r4, #0]
 80170d2:	bd38      	pop	{r3, r4, r5, pc}
 80170d4:	200036e8 	.word	0x200036e8

080170d8 <_read_r>:
 80170d8:	b538      	push	{r3, r4, r5, lr}
 80170da:	4d07      	ldr	r5, [pc, #28]	; (80170f8 <_read_r+0x20>)
 80170dc:	4604      	mov	r4, r0
 80170de:	4608      	mov	r0, r1
 80170e0:	4611      	mov	r1, r2
 80170e2:	2200      	movs	r2, #0
 80170e4:	602a      	str	r2, [r5, #0]
 80170e6:	461a      	mov	r2, r3
 80170e8:	f7ee fa58 	bl	800559c <_read>
 80170ec:	1c43      	adds	r3, r0, #1
 80170ee:	d102      	bne.n	80170f6 <_read_r+0x1e>
 80170f0:	682b      	ldr	r3, [r5, #0]
 80170f2:	b103      	cbz	r3, 80170f6 <_read_r+0x1e>
 80170f4:	6023      	str	r3, [r4, #0]
 80170f6:	bd38      	pop	{r3, r4, r5, pc}
 80170f8:	200036e8 	.word	0x200036e8

080170fc <_write_r>:
 80170fc:	b538      	push	{r3, r4, r5, lr}
 80170fe:	4d07      	ldr	r5, [pc, #28]	; (801711c <_write_r+0x20>)
 8017100:	4604      	mov	r4, r0
 8017102:	4608      	mov	r0, r1
 8017104:	4611      	mov	r1, r2
 8017106:	2200      	movs	r2, #0
 8017108:	602a      	str	r2, [r5, #0]
 801710a:	461a      	mov	r2, r3
 801710c:	f7ee fa63 	bl	80055d6 <_write>
 8017110:	1c43      	adds	r3, r0, #1
 8017112:	d102      	bne.n	801711a <_write_r+0x1e>
 8017114:	682b      	ldr	r3, [r5, #0]
 8017116:	b103      	cbz	r3, 801711a <_write_r+0x1e>
 8017118:	6023      	str	r3, [r4, #0]
 801711a:	bd38      	pop	{r3, r4, r5, pc}
 801711c:	200036e8 	.word	0x200036e8

08017120 <__errno>:
 8017120:	4b01      	ldr	r3, [pc, #4]	; (8017128 <__errno+0x8>)
 8017122:	6818      	ldr	r0, [r3, #0]
 8017124:	4770      	bx	lr
 8017126:	bf00      	nop
 8017128:	200003d0 	.word	0x200003d0

0801712c <__libc_init_array>:
 801712c:	b570      	push	{r4, r5, r6, lr}
 801712e:	4d0d      	ldr	r5, [pc, #52]	; (8017164 <__libc_init_array+0x38>)
 8017130:	4c0d      	ldr	r4, [pc, #52]	; (8017168 <__libc_init_array+0x3c>)
 8017132:	1b64      	subs	r4, r4, r5
 8017134:	10a4      	asrs	r4, r4, #2
 8017136:	2600      	movs	r6, #0
 8017138:	42a6      	cmp	r6, r4
 801713a:	d109      	bne.n	8017150 <__libc_init_array+0x24>
 801713c:	4d0b      	ldr	r5, [pc, #44]	; (801716c <__libc_init_array+0x40>)
 801713e:	4c0c      	ldr	r4, [pc, #48]	; (8017170 <__libc_init_array+0x44>)
 8017140:	f003 fd5a 	bl	801abf8 <_init>
 8017144:	1b64      	subs	r4, r4, r5
 8017146:	10a4      	asrs	r4, r4, #2
 8017148:	2600      	movs	r6, #0
 801714a:	42a6      	cmp	r6, r4
 801714c:	d105      	bne.n	801715a <__libc_init_array+0x2e>
 801714e:	bd70      	pop	{r4, r5, r6, pc}
 8017150:	f855 3b04 	ldr.w	r3, [r5], #4
 8017154:	4798      	blx	r3
 8017156:	3601      	adds	r6, #1
 8017158:	e7ee      	b.n	8017138 <__libc_init_array+0xc>
 801715a:	f855 3b04 	ldr.w	r3, [r5], #4
 801715e:	4798      	blx	r3
 8017160:	3601      	adds	r6, #1
 8017162:	e7f2      	b.n	801714a <__libc_init_array+0x1e>
 8017164:	0801da50 	.word	0x0801da50
 8017168:	0801da50 	.word	0x0801da50
 801716c:	0801da50 	.word	0x0801da50
 8017170:	0801da54 	.word	0x0801da54

08017174 <__retarget_lock_init_recursive>:
 8017174:	4770      	bx	lr

08017176 <__retarget_lock_acquire_recursive>:
 8017176:	4770      	bx	lr

08017178 <__retarget_lock_release_recursive>:
 8017178:	4770      	bx	lr

0801717a <memcpy>:
 801717a:	440a      	add	r2, r1
 801717c:	4291      	cmp	r1, r2
 801717e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017182:	d100      	bne.n	8017186 <memcpy+0xc>
 8017184:	4770      	bx	lr
 8017186:	b510      	push	{r4, lr}
 8017188:	f811 4b01 	ldrb.w	r4, [r1], #1
 801718c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017190:	4291      	cmp	r1, r2
 8017192:	d1f9      	bne.n	8017188 <memcpy+0xe>
 8017194:	bd10      	pop	{r4, pc}
	...

08017198 <nanf>:
 8017198:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80171a0 <nanf+0x8>
 801719c:	4770      	bx	lr
 801719e:	bf00      	nop
 80171a0:	7fc00000 	.word	0x7fc00000

080171a4 <quorem>:
 80171a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171a8:	6903      	ldr	r3, [r0, #16]
 80171aa:	690c      	ldr	r4, [r1, #16]
 80171ac:	42a3      	cmp	r3, r4
 80171ae:	4607      	mov	r7, r0
 80171b0:	db7e      	blt.n	80172b0 <quorem+0x10c>
 80171b2:	3c01      	subs	r4, #1
 80171b4:	f101 0814 	add.w	r8, r1, #20
 80171b8:	f100 0514 	add.w	r5, r0, #20
 80171bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80171c0:	9301      	str	r3, [sp, #4]
 80171c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80171c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80171ca:	3301      	adds	r3, #1
 80171cc:	429a      	cmp	r2, r3
 80171ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80171d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80171d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80171da:	d331      	bcc.n	8017240 <quorem+0x9c>
 80171dc:	f04f 0e00 	mov.w	lr, #0
 80171e0:	4640      	mov	r0, r8
 80171e2:	46ac      	mov	ip, r5
 80171e4:	46f2      	mov	sl, lr
 80171e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80171ea:	b293      	uxth	r3, r2
 80171ec:	fb06 e303 	mla	r3, r6, r3, lr
 80171f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80171f4:	0c1a      	lsrs	r2, r3, #16
 80171f6:	b29b      	uxth	r3, r3
 80171f8:	ebaa 0303 	sub.w	r3, sl, r3
 80171fc:	f8dc a000 	ldr.w	sl, [ip]
 8017200:	fa13 f38a 	uxtah	r3, r3, sl
 8017204:	fb06 220e 	mla	r2, r6, lr, r2
 8017208:	9300      	str	r3, [sp, #0]
 801720a:	9b00      	ldr	r3, [sp, #0]
 801720c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017210:	b292      	uxth	r2, r2
 8017212:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017216:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801721a:	f8bd 3000 	ldrh.w	r3, [sp]
 801721e:	4581      	cmp	r9, r0
 8017220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017224:	f84c 3b04 	str.w	r3, [ip], #4
 8017228:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801722c:	d2db      	bcs.n	80171e6 <quorem+0x42>
 801722e:	f855 300b 	ldr.w	r3, [r5, fp]
 8017232:	b92b      	cbnz	r3, 8017240 <quorem+0x9c>
 8017234:	9b01      	ldr	r3, [sp, #4]
 8017236:	3b04      	subs	r3, #4
 8017238:	429d      	cmp	r5, r3
 801723a:	461a      	mov	r2, r3
 801723c:	d32c      	bcc.n	8017298 <quorem+0xf4>
 801723e:	613c      	str	r4, [r7, #16]
 8017240:	4638      	mov	r0, r7
 8017242:	f001 f9f1 	bl	8018628 <__mcmp>
 8017246:	2800      	cmp	r0, #0
 8017248:	db22      	blt.n	8017290 <quorem+0xec>
 801724a:	3601      	adds	r6, #1
 801724c:	4629      	mov	r1, r5
 801724e:	2000      	movs	r0, #0
 8017250:	f858 2b04 	ldr.w	r2, [r8], #4
 8017254:	f8d1 c000 	ldr.w	ip, [r1]
 8017258:	b293      	uxth	r3, r2
 801725a:	1ac3      	subs	r3, r0, r3
 801725c:	0c12      	lsrs	r2, r2, #16
 801725e:	fa13 f38c 	uxtah	r3, r3, ip
 8017262:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017266:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801726a:	b29b      	uxth	r3, r3
 801726c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017270:	45c1      	cmp	r9, r8
 8017272:	f841 3b04 	str.w	r3, [r1], #4
 8017276:	ea4f 4022 	mov.w	r0, r2, asr #16
 801727a:	d2e9      	bcs.n	8017250 <quorem+0xac>
 801727c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017280:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017284:	b922      	cbnz	r2, 8017290 <quorem+0xec>
 8017286:	3b04      	subs	r3, #4
 8017288:	429d      	cmp	r5, r3
 801728a:	461a      	mov	r2, r3
 801728c:	d30a      	bcc.n	80172a4 <quorem+0x100>
 801728e:	613c      	str	r4, [r7, #16]
 8017290:	4630      	mov	r0, r6
 8017292:	b003      	add	sp, #12
 8017294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017298:	6812      	ldr	r2, [r2, #0]
 801729a:	3b04      	subs	r3, #4
 801729c:	2a00      	cmp	r2, #0
 801729e:	d1ce      	bne.n	801723e <quorem+0x9a>
 80172a0:	3c01      	subs	r4, #1
 80172a2:	e7c9      	b.n	8017238 <quorem+0x94>
 80172a4:	6812      	ldr	r2, [r2, #0]
 80172a6:	3b04      	subs	r3, #4
 80172a8:	2a00      	cmp	r2, #0
 80172aa:	d1f0      	bne.n	801728e <quorem+0xea>
 80172ac:	3c01      	subs	r4, #1
 80172ae:	e7eb      	b.n	8017288 <quorem+0xe4>
 80172b0:	2000      	movs	r0, #0
 80172b2:	e7ee      	b.n	8017292 <quorem+0xee>
 80172b4:	0000      	movs	r0, r0
	...

080172b8 <_dtoa_r>:
 80172b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172bc:	ed2d 8b04 	vpush	{d8-d9}
 80172c0:	69c5      	ldr	r5, [r0, #28]
 80172c2:	b093      	sub	sp, #76	; 0x4c
 80172c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80172c8:	ec57 6b10 	vmov	r6, r7, d0
 80172cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80172d0:	9107      	str	r1, [sp, #28]
 80172d2:	4604      	mov	r4, r0
 80172d4:	920a      	str	r2, [sp, #40]	; 0x28
 80172d6:	930d      	str	r3, [sp, #52]	; 0x34
 80172d8:	b975      	cbnz	r5, 80172f8 <_dtoa_r+0x40>
 80172da:	2010      	movs	r0, #16
 80172dc:	f000 fe2a 	bl	8017f34 <malloc>
 80172e0:	4602      	mov	r2, r0
 80172e2:	61e0      	str	r0, [r4, #28]
 80172e4:	b920      	cbnz	r0, 80172f0 <_dtoa_r+0x38>
 80172e6:	4bae      	ldr	r3, [pc, #696]	; (80175a0 <_dtoa_r+0x2e8>)
 80172e8:	21ef      	movs	r1, #239	; 0xef
 80172ea:	48ae      	ldr	r0, [pc, #696]	; (80175a4 <_dtoa_r+0x2ec>)
 80172ec:	f002 fc64 	bl	8019bb8 <__assert_func>
 80172f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80172f4:	6005      	str	r5, [r0, #0]
 80172f6:	60c5      	str	r5, [r0, #12]
 80172f8:	69e3      	ldr	r3, [r4, #28]
 80172fa:	6819      	ldr	r1, [r3, #0]
 80172fc:	b151      	cbz	r1, 8017314 <_dtoa_r+0x5c>
 80172fe:	685a      	ldr	r2, [r3, #4]
 8017300:	604a      	str	r2, [r1, #4]
 8017302:	2301      	movs	r3, #1
 8017304:	4093      	lsls	r3, r2
 8017306:	608b      	str	r3, [r1, #8]
 8017308:	4620      	mov	r0, r4
 801730a:	f000 ff07 	bl	801811c <_Bfree>
 801730e:	69e3      	ldr	r3, [r4, #28]
 8017310:	2200      	movs	r2, #0
 8017312:	601a      	str	r2, [r3, #0]
 8017314:	1e3b      	subs	r3, r7, #0
 8017316:	bfbb      	ittet	lt
 8017318:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801731c:	9303      	strlt	r3, [sp, #12]
 801731e:	2300      	movge	r3, #0
 8017320:	2201      	movlt	r2, #1
 8017322:	bfac      	ite	ge
 8017324:	f8c8 3000 	strge.w	r3, [r8]
 8017328:	f8c8 2000 	strlt.w	r2, [r8]
 801732c:	4b9e      	ldr	r3, [pc, #632]	; (80175a8 <_dtoa_r+0x2f0>)
 801732e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017332:	ea33 0308 	bics.w	r3, r3, r8
 8017336:	d11b      	bne.n	8017370 <_dtoa_r+0xb8>
 8017338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801733a:	f242 730f 	movw	r3, #9999	; 0x270f
 801733e:	6013      	str	r3, [r2, #0]
 8017340:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017344:	4333      	orrs	r3, r6
 8017346:	f000 8593 	beq.w	8017e70 <_dtoa_r+0xbb8>
 801734a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801734c:	b963      	cbnz	r3, 8017368 <_dtoa_r+0xb0>
 801734e:	4b97      	ldr	r3, [pc, #604]	; (80175ac <_dtoa_r+0x2f4>)
 8017350:	e027      	b.n	80173a2 <_dtoa_r+0xea>
 8017352:	4b97      	ldr	r3, [pc, #604]	; (80175b0 <_dtoa_r+0x2f8>)
 8017354:	9300      	str	r3, [sp, #0]
 8017356:	3308      	adds	r3, #8
 8017358:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801735a:	6013      	str	r3, [r2, #0]
 801735c:	9800      	ldr	r0, [sp, #0]
 801735e:	b013      	add	sp, #76	; 0x4c
 8017360:	ecbd 8b04 	vpop	{d8-d9}
 8017364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017368:	4b90      	ldr	r3, [pc, #576]	; (80175ac <_dtoa_r+0x2f4>)
 801736a:	9300      	str	r3, [sp, #0]
 801736c:	3303      	adds	r3, #3
 801736e:	e7f3      	b.n	8017358 <_dtoa_r+0xa0>
 8017370:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017374:	2200      	movs	r2, #0
 8017376:	ec51 0b17 	vmov	r0, r1, d7
 801737a:	eeb0 8a47 	vmov.f32	s16, s14
 801737e:	eef0 8a67 	vmov.f32	s17, s15
 8017382:	2300      	movs	r3, #0
 8017384:	f7e9 fbc8 	bl	8000b18 <__aeabi_dcmpeq>
 8017388:	4681      	mov	r9, r0
 801738a:	b160      	cbz	r0, 80173a6 <_dtoa_r+0xee>
 801738c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801738e:	2301      	movs	r3, #1
 8017390:	6013      	str	r3, [r2, #0]
 8017392:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017394:	2b00      	cmp	r3, #0
 8017396:	f000 8568 	beq.w	8017e6a <_dtoa_r+0xbb2>
 801739a:	4b86      	ldr	r3, [pc, #536]	; (80175b4 <_dtoa_r+0x2fc>)
 801739c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801739e:	6013      	str	r3, [r2, #0]
 80173a0:	3b01      	subs	r3, #1
 80173a2:	9300      	str	r3, [sp, #0]
 80173a4:	e7da      	b.n	801735c <_dtoa_r+0xa4>
 80173a6:	aa10      	add	r2, sp, #64	; 0x40
 80173a8:	a911      	add	r1, sp, #68	; 0x44
 80173aa:	4620      	mov	r0, r4
 80173ac:	eeb0 0a48 	vmov.f32	s0, s16
 80173b0:	eef0 0a68 	vmov.f32	s1, s17
 80173b4:	f001 fa4e 	bl	8018854 <__d2b>
 80173b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80173bc:	4682      	mov	sl, r0
 80173be:	2d00      	cmp	r5, #0
 80173c0:	d07f      	beq.n	80174c2 <_dtoa_r+0x20a>
 80173c2:	ee18 3a90 	vmov	r3, s17
 80173c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80173ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80173ce:	ec51 0b18 	vmov	r0, r1, d8
 80173d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80173d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80173da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80173de:	4619      	mov	r1, r3
 80173e0:	2200      	movs	r2, #0
 80173e2:	4b75      	ldr	r3, [pc, #468]	; (80175b8 <_dtoa_r+0x300>)
 80173e4:	f7e8 ff78 	bl	80002d8 <__aeabi_dsub>
 80173e8:	a367      	add	r3, pc, #412	; (adr r3, 8017588 <_dtoa_r+0x2d0>)
 80173ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ee:	f7e9 f92b 	bl	8000648 <__aeabi_dmul>
 80173f2:	a367      	add	r3, pc, #412	; (adr r3, 8017590 <_dtoa_r+0x2d8>)
 80173f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f8:	f7e8 ff70 	bl	80002dc <__adddf3>
 80173fc:	4606      	mov	r6, r0
 80173fe:	4628      	mov	r0, r5
 8017400:	460f      	mov	r7, r1
 8017402:	f7e9 f8b7 	bl	8000574 <__aeabi_i2d>
 8017406:	a364      	add	r3, pc, #400	; (adr r3, 8017598 <_dtoa_r+0x2e0>)
 8017408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801740c:	f7e9 f91c 	bl	8000648 <__aeabi_dmul>
 8017410:	4602      	mov	r2, r0
 8017412:	460b      	mov	r3, r1
 8017414:	4630      	mov	r0, r6
 8017416:	4639      	mov	r1, r7
 8017418:	f7e8 ff60 	bl	80002dc <__adddf3>
 801741c:	4606      	mov	r6, r0
 801741e:	460f      	mov	r7, r1
 8017420:	f7e9 fbc2 	bl	8000ba8 <__aeabi_d2iz>
 8017424:	2200      	movs	r2, #0
 8017426:	4683      	mov	fp, r0
 8017428:	2300      	movs	r3, #0
 801742a:	4630      	mov	r0, r6
 801742c:	4639      	mov	r1, r7
 801742e:	f7e9 fb7d 	bl	8000b2c <__aeabi_dcmplt>
 8017432:	b148      	cbz	r0, 8017448 <_dtoa_r+0x190>
 8017434:	4658      	mov	r0, fp
 8017436:	f7e9 f89d 	bl	8000574 <__aeabi_i2d>
 801743a:	4632      	mov	r2, r6
 801743c:	463b      	mov	r3, r7
 801743e:	f7e9 fb6b 	bl	8000b18 <__aeabi_dcmpeq>
 8017442:	b908      	cbnz	r0, 8017448 <_dtoa_r+0x190>
 8017444:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017448:	f1bb 0f16 	cmp.w	fp, #22
 801744c:	d857      	bhi.n	80174fe <_dtoa_r+0x246>
 801744e:	4b5b      	ldr	r3, [pc, #364]	; (80175bc <_dtoa_r+0x304>)
 8017450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017458:	ec51 0b18 	vmov	r0, r1, d8
 801745c:	f7e9 fb66 	bl	8000b2c <__aeabi_dcmplt>
 8017460:	2800      	cmp	r0, #0
 8017462:	d04e      	beq.n	8017502 <_dtoa_r+0x24a>
 8017464:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017468:	2300      	movs	r3, #0
 801746a:	930c      	str	r3, [sp, #48]	; 0x30
 801746c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801746e:	1b5b      	subs	r3, r3, r5
 8017470:	1e5a      	subs	r2, r3, #1
 8017472:	bf45      	ittet	mi
 8017474:	f1c3 0301 	rsbmi	r3, r3, #1
 8017478:	9305      	strmi	r3, [sp, #20]
 801747a:	2300      	movpl	r3, #0
 801747c:	2300      	movmi	r3, #0
 801747e:	9206      	str	r2, [sp, #24]
 8017480:	bf54      	ite	pl
 8017482:	9305      	strpl	r3, [sp, #20]
 8017484:	9306      	strmi	r3, [sp, #24]
 8017486:	f1bb 0f00 	cmp.w	fp, #0
 801748a:	db3c      	blt.n	8017506 <_dtoa_r+0x24e>
 801748c:	9b06      	ldr	r3, [sp, #24]
 801748e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017492:	445b      	add	r3, fp
 8017494:	9306      	str	r3, [sp, #24]
 8017496:	2300      	movs	r3, #0
 8017498:	9308      	str	r3, [sp, #32]
 801749a:	9b07      	ldr	r3, [sp, #28]
 801749c:	2b09      	cmp	r3, #9
 801749e:	d868      	bhi.n	8017572 <_dtoa_r+0x2ba>
 80174a0:	2b05      	cmp	r3, #5
 80174a2:	bfc4      	itt	gt
 80174a4:	3b04      	subgt	r3, #4
 80174a6:	9307      	strgt	r3, [sp, #28]
 80174a8:	9b07      	ldr	r3, [sp, #28]
 80174aa:	f1a3 0302 	sub.w	r3, r3, #2
 80174ae:	bfcc      	ite	gt
 80174b0:	2500      	movgt	r5, #0
 80174b2:	2501      	movle	r5, #1
 80174b4:	2b03      	cmp	r3, #3
 80174b6:	f200 8085 	bhi.w	80175c4 <_dtoa_r+0x30c>
 80174ba:	e8df f003 	tbb	[pc, r3]
 80174be:	3b2e      	.short	0x3b2e
 80174c0:	5839      	.short	0x5839
 80174c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80174c6:	441d      	add	r5, r3
 80174c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80174cc:	2b20      	cmp	r3, #32
 80174ce:	bfc1      	itttt	gt
 80174d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80174d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80174d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80174dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80174e0:	bfd6      	itet	le
 80174e2:	f1c3 0320 	rsble	r3, r3, #32
 80174e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80174ea:	fa06 f003 	lslle.w	r0, r6, r3
 80174ee:	f7e9 f831 	bl	8000554 <__aeabi_ui2d>
 80174f2:	2201      	movs	r2, #1
 80174f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80174f8:	3d01      	subs	r5, #1
 80174fa:	920e      	str	r2, [sp, #56]	; 0x38
 80174fc:	e76f      	b.n	80173de <_dtoa_r+0x126>
 80174fe:	2301      	movs	r3, #1
 8017500:	e7b3      	b.n	801746a <_dtoa_r+0x1b2>
 8017502:	900c      	str	r0, [sp, #48]	; 0x30
 8017504:	e7b2      	b.n	801746c <_dtoa_r+0x1b4>
 8017506:	9b05      	ldr	r3, [sp, #20]
 8017508:	eba3 030b 	sub.w	r3, r3, fp
 801750c:	9305      	str	r3, [sp, #20]
 801750e:	f1cb 0300 	rsb	r3, fp, #0
 8017512:	9308      	str	r3, [sp, #32]
 8017514:	2300      	movs	r3, #0
 8017516:	930b      	str	r3, [sp, #44]	; 0x2c
 8017518:	e7bf      	b.n	801749a <_dtoa_r+0x1e2>
 801751a:	2300      	movs	r3, #0
 801751c:	9309      	str	r3, [sp, #36]	; 0x24
 801751e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017520:	2b00      	cmp	r3, #0
 8017522:	dc52      	bgt.n	80175ca <_dtoa_r+0x312>
 8017524:	2301      	movs	r3, #1
 8017526:	9301      	str	r3, [sp, #4]
 8017528:	9304      	str	r3, [sp, #16]
 801752a:	461a      	mov	r2, r3
 801752c:	920a      	str	r2, [sp, #40]	; 0x28
 801752e:	e00b      	b.n	8017548 <_dtoa_r+0x290>
 8017530:	2301      	movs	r3, #1
 8017532:	e7f3      	b.n	801751c <_dtoa_r+0x264>
 8017534:	2300      	movs	r3, #0
 8017536:	9309      	str	r3, [sp, #36]	; 0x24
 8017538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801753a:	445b      	add	r3, fp
 801753c:	9301      	str	r3, [sp, #4]
 801753e:	3301      	adds	r3, #1
 8017540:	2b01      	cmp	r3, #1
 8017542:	9304      	str	r3, [sp, #16]
 8017544:	bfb8      	it	lt
 8017546:	2301      	movlt	r3, #1
 8017548:	69e0      	ldr	r0, [r4, #28]
 801754a:	2100      	movs	r1, #0
 801754c:	2204      	movs	r2, #4
 801754e:	f102 0614 	add.w	r6, r2, #20
 8017552:	429e      	cmp	r6, r3
 8017554:	d93d      	bls.n	80175d2 <_dtoa_r+0x31a>
 8017556:	6041      	str	r1, [r0, #4]
 8017558:	4620      	mov	r0, r4
 801755a:	f000 fd9f 	bl	801809c <_Balloc>
 801755e:	9000      	str	r0, [sp, #0]
 8017560:	2800      	cmp	r0, #0
 8017562:	d139      	bne.n	80175d8 <_dtoa_r+0x320>
 8017564:	4b16      	ldr	r3, [pc, #88]	; (80175c0 <_dtoa_r+0x308>)
 8017566:	4602      	mov	r2, r0
 8017568:	f240 11af 	movw	r1, #431	; 0x1af
 801756c:	e6bd      	b.n	80172ea <_dtoa_r+0x32>
 801756e:	2301      	movs	r3, #1
 8017570:	e7e1      	b.n	8017536 <_dtoa_r+0x27e>
 8017572:	2501      	movs	r5, #1
 8017574:	2300      	movs	r3, #0
 8017576:	9307      	str	r3, [sp, #28]
 8017578:	9509      	str	r5, [sp, #36]	; 0x24
 801757a:	f04f 33ff 	mov.w	r3, #4294967295
 801757e:	9301      	str	r3, [sp, #4]
 8017580:	9304      	str	r3, [sp, #16]
 8017582:	2200      	movs	r2, #0
 8017584:	2312      	movs	r3, #18
 8017586:	e7d1      	b.n	801752c <_dtoa_r+0x274>
 8017588:	636f4361 	.word	0x636f4361
 801758c:	3fd287a7 	.word	0x3fd287a7
 8017590:	8b60c8b3 	.word	0x8b60c8b3
 8017594:	3fc68a28 	.word	0x3fc68a28
 8017598:	509f79fb 	.word	0x509f79fb
 801759c:	3fd34413 	.word	0x3fd34413
 80175a0:	0801d656 	.word	0x0801d656
 80175a4:	0801d66d 	.word	0x0801d66d
 80175a8:	7ff00000 	.word	0x7ff00000
 80175ac:	0801d652 	.word	0x0801d652
 80175b0:	0801d649 	.word	0x0801d649
 80175b4:	0801d621 	.word	0x0801d621
 80175b8:	3ff80000 	.word	0x3ff80000
 80175bc:	0801d758 	.word	0x0801d758
 80175c0:	0801d6c5 	.word	0x0801d6c5
 80175c4:	2301      	movs	r3, #1
 80175c6:	9309      	str	r3, [sp, #36]	; 0x24
 80175c8:	e7d7      	b.n	801757a <_dtoa_r+0x2c2>
 80175ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175cc:	9301      	str	r3, [sp, #4]
 80175ce:	9304      	str	r3, [sp, #16]
 80175d0:	e7ba      	b.n	8017548 <_dtoa_r+0x290>
 80175d2:	3101      	adds	r1, #1
 80175d4:	0052      	lsls	r2, r2, #1
 80175d6:	e7ba      	b.n	801754e <_dtoa_r+0x296>
 80175d8:	69e3      	ldr	r3, [r4, #28]
 80175da:	9a00      	ldr	r2, [sp, #0]
 80175dc:	601a      	str	r2, [r3, #0]
 80175de:	9b04      	ldr	r3, [sp, #16]
 80175e0:	2b0e      	cmp	r3, #14
 80175e2:	f200 80a8 	bhi.w	8017736 <_dtoa_r+0x47e>
 80175e6:	2d00      	cmp	r5, #0
 80175e8:	f000 80a5 	beq.w	8017736 <_dtoa_r+0x47e>
 80175ec:	f1bb 0f00 	cmp.w	fp, #0
 80175f0:	dd38      	ble.n	8017664 <_dtoa_r+0x3ac>
 80175f2:	4bc0      	ldr	r3, [pc, #768]	; (80178f4 <_dtoa_r+0x63c>)
 80175f4:	f00b 020f 	and.w	r2, fp, #15
 80175f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80175fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017600:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017604:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017608:	d019      	beq.n	801763e <_dtoa_r+0x386>
 801760a:	4bbb      	ldr	r3, [pc, #748]	; (80178f8 <_dtoa_r+0x640>)
 801760c:	ec51 0b18 	vmov	r0, r1, d8
 8017610:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017614:	f7e9 f942 	bl	800089c <__aeabi_ddiv>
 8017618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801761c:	f008 080f 	and.w	r8, r8, #15
 8017620:	2503      	movs	r5, #3
 8017622:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80178f8 <_dtoa_r+0x640>
 8017626:	f1b8 0f00 	cmp.w	r8, #0
 801762a:	d10a      	bne.n	8017642 <_dtoa_r+0x38a>
 801762c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017630:	4632      	mov	r2, r6
 8017632:	463b      	mov	r3, r7
 8017634:	f7e9 f932 	bl	800089c <__aeabi_ddiv>
 8017638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801763c:	e02b      	b.n	8017696 <_dtoa_r+0x3de>
 801763e:	2502      	movs	r5, #2
 8017640:	e7ef      	b.n	8017622 <_dtoa_r+0x36a>
 8017642:	f018 0f01 	tst.w	r8, #1
 8017646:	d008      	beq.n	801765a <_dtoa_r+0x3a2>
 8017648:	4630      	mov	r0, r6
 801764a:	4639      	mov	r1, r7
 801764c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017650:	f7e8 fffa 	bl	8000648 <__aeabi_dmul>
 8017654:	3501      	adds	r5, #1
 8017656:	4606      	mov	r6, r0
 8017658:	460f      	mov	r7, r1
 801765a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801765e:	f109 0908 	add.w	r9, r9, #8
 8017662:	e7e0      	b.n	8017626 <_dtoa_r+0x36e>
 8017664:	f000 809f 	beq.w	80177a6 <_dtoa_r+0x4ee>
 8017668:	f1cb 0600 	rsb	r6, fp, #0
 801766c:	4ba1      	ldr	r3, [pc, #644]	; (80178f4 <_dtoa_r+0x63c>)
 801766e:	4fa2      	ldr	r7, [pc, #648]	; (80178f8 <_dtoa_r+0x640>)
 8017670:	f006 020f 	and.w	r2, r6, #15
 8017674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801767c:	ec51 0b18 	vmov	r0, r1, d8
 8017680:	f7e8 ffe2 	bl	8000648 <__aeabi_dmul>
 8017684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017688:	1136      	asrs	r6, r6, #4
 801768a:	2300      	movs	r3, #0
 801768c:	2502      	movs	r5, #2
 801768e:	2e00      	cmp	r6, #0
 8017690:	d17e      	bne.n	8017790 <_dtoa_r+0x4d8>
 8017692:	2b00      	cmp	r3, #0
 8017694:	d1d0      	bne.n	8017638 <_dtoa_r+0x380>
 8017696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017698:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801769c:	2b00      	cmp	r3, #0
 801769e:	f000 8084 	beq.w	80177aa <_dtoa_r+0x4f2>
 80176a2:	4b96      	ldr	r3, [pc, #600]	; (80178fc <_dtoa_r+0x644>)
 80176a4:	2200      	movs	r2, #0
 80176a6:	4640      	mov	r0, r8
 80176a8:	4649      	mov	r1, r9
 80176aa:	f7e9 fa3f 	bl	8000b2c <__aeabi_dcmplt>
 80176ae:	2800      	cmp	r0, #0
 80176b0:	d07b      	beq.n	80177aa <_dtoa_r+0x4f2>
 80176b2:	9b04      	ldr	r3, [sp, #16]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d078      	beq.n	80177aa <_dtoa_r+0x4f2>
 80176b8:	9b01      	ldr	r3, [sp, #4]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	dd39      	ble.n	8017732 <_dtoa_r+0x47a>
 80176be:	4b90      	ldr	r3, [pc, #576]	; (8017900 <_dtoa_r+0x648>)
 80176c0:	2200      	movs	r2, #0
 80176c2:	4640      	mov	r0, r8
 80176c4:	4649      	mov	r1, r9
 80176c6:	f7e8 ffbf 	bl	8000648 <__aeabi_dmul>
 80176ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176ce:	9e01      	ldr	r6, [sp, #4]
 80176d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80176d4:	3501      	adds	r5, #1
 80176d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80176da:	4628      	mov	r0, r5
 80176dc:	f7e8 ff4a 	bl	8000574 <__aeabi_i2d>
 80176e0:	4642      	mov	r2, r8
 80176e2:	464b      	mov	r3, r9
 80176e4:	f7e8 ffb0 	bl	8000648 <__aeabi_dmul>
 80176e8:	4b86      	ldr	r3, [pc, #536]	; (8017904 <_dtoa_r+0x64c>)
 80176ea:	2200      	movs	r2, #0
 80176ec:	f7e8 fdf6 	bl	80002dc <__adddf3>
 80176f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80176f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176f8:	9303      	str	r3, [sp, #12]
 80176fa:	2e00      	cmp	r6, #0
 80176fc:	d158      	bne.n	80177b0 <_dtoa_r+0x4f8>
 80176fe:	4b82      	ldr	r3, [pc, #520]	; (8017908 <_dtoa_r+0x650>)
 8017700:	2200      	movs	r2, #0
 8017702:	4640      	mov	r0, r8
 8017704:	4649      	mov	r1, r9
 8017706:	f7e8 fde7 	bl	80002d8 <__aeabi_dsub>
 801770a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801770e:	4680      	mov	r8, r0
 8017710:	4689      	mov	r9, r1
 8017712:	f7e9 fa29 	bl	8000b68 <__aeabi_dcmpgt>
 8017716:	2800      	cmp	r0, #0
 8017718:	f040 8296 	bne.w	8017c48 <_dtoa_r+0x990>
 801771c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017720:	4640      	mov	r0, r8
 8017722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017726:	4649      	mov	r1, r9
 8017728:	f7e9 fa00 	bl	8000b2c <__aeabi_dcmplt>
 801772c:	2800      	cmp	r0, #0
 801772e:	f040 8289 	bne.w	8017c44 <_dtoa_r+0x98c>
 8017732:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017736:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017738:	2b00      	cmp	r3, #0
 801773a:	f2c0 814e 	blt.w	80179da <_dtoa_r+0x722>
 801773e:	f1bb 0f0e 	cmp.w	fp, #14
 8017742:	f300 814a 	bgt.w	80179da <_dtoa_r+0x722>
 8017746:	4b6b      	ldr	r3, [pc, #428]	; (80178f4 <_dtoa_r+0x63c>)
 8017748:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801774c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017752:	2b00      	cmp	r3, #0
 8017754:	f280 80dc 	bge.w	8017910 <_dtoa_r+0x658>
 8017758:	9b04      	ldr	r3, [sp, #16]
 801775a:	2b00      	cmp	r3, #0
 801775c:	f300 80d8 	bgt.w	8017910 <_dtoa_r+0x658>
 8017760:	f040 826f 	bne.w	8017c42 <_dtoa_r+0x98a>
 8017764:	4b68      	ldr	r3, [pc, #416]	; (8017908 <_dtoa_r+0x650>)
 8017766:	2200      	movs	r2, #0
 8017768:	4640      	mov	r0, r8
 801776a:	4649      	mov	r1, r9
 801776c:	f7e8 ff6c 	bl	8000648 <__aeabi_dmul>
 8017770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017774:	f7e9 f9ee 	bl	8000b54 <__aeabi_dcmpge>
 8017778:	9e04      	ldr	r6, [sp, #16]
 801777a:	4637      	mov	r7, r6
 801777c:	2800      	cmp	r0, #0
 801777e:	f040 8245 	bne.w	8017c0c <_dtoa_r+0x954>
 8017782:	9d00      	ldr	r5, [sp, #0]
 8017784:	2331      	movs	r3, #49	; 0x31
 8017786:	f805 3b01 	strb.w	r3, [r5], #1
 801778a:	f10b 0b01 	add.w	fp, fp, #1
 801778e:	e241      	b.n	8017c14 <_dtoa_r+0x95c>
 8017790:	07f2      	lsls	r2, r6, #31
 8017792:	d505      	bpl.n	80177a0 <_dtoa_r+0x4e8>
 8017794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017798:	f7e8 ff56 	bl	8000648 <__aeabi_dmul>
 801779c:	3501      	adds	r5, #1
 801779e:	2301      	movs	r3, #1
 80177a0:	1076      	asrs	r6, r6, #1
 80177a2:	3708      	adds	r7, #8
 80177a4:	e773      	b.n	801768e <_dtoa_r+0x3d6>
 80177a6:	2502      	movs	r5, #2
 80177a8:	e775      	b.n	8017696 <_dtoa_r+0x3de>
 80177aa:	9e04      	ldr	r6, [sp, #16]
 80177ac:	465f      	mov	r7, fp
 80177ae:	e792      	b.n	80176d6 <_dtoa_r+0x41e>
 80177b0:	9900      	ldr	r1, [sp, #0]
 80177b2:	4b50      	ldr	r3, [pc, #320]	; (80178f4 <_dtoa_r+0x63c>)
 80177b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80177b8:	4431      	add	r1, r6
 80177ba:	9102      	str	r1, [sp, #8]
 80177bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80177be:	eeb0 9a47 	vmov.f32	s18, s14
 80177c2:	eef0 9a67 	vmov.f32	s19, s15
 80177c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80177ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80177ce:	2900      	cmp	r1, #0
 80177d0:	d044      	beq.n	801785c <_dtoa_r+0x5a4>
 80177d2:	494e      	ldr	r1, [pc, #312]	; (801790c <_dtoa_r+0x654>)
 80177d4:	2000      	movs	r0, #0
 80177d6:	f7e9 f861 	bl	800089c <__aeabi_ddiv>
 80177da:	ec53 2b19 	vmov	r2, r3, d9
 80177de:	f7e8 fd7b 	bl	80002d8 <__aeabi_dsub>
 80177e2:	9d00      	ldr	r5, [sp, #0]
 80177e4:	ec41 0b19 	vmov	d9, r0, r1
 80177e8:	4649      	mov	r1, r9
 80177ea:	4640      	mov	r0, r8
 80177ec:	f7e9 f9dc 	bl	8000ba8 <__aeabi_d2iz>
 80177f0:	4606      	mov	r6, r0
 80177f2:	f7e8 febf 	bl	8000574 <__aeabi_i2d>
 80177f6:	4602      	mov	r2, r0
 80177f8:	460b      	mov	r3, r1
 80177fa:	4640      	mov	r0, r8
 80177fc:	4649      	mov	r1, r9
 80177fe:	f7e8 fd6b 	bl	80002d8 <__aeabi_dsub>
 8017802:	3630      	adds	r6, #48	; 0x30
 8017804:	f805 6b01 	strb.w	r6, [r5], #1
 8017808:	ec53 2b19 	vmov	r2, r3, d9
 801780c:	4680      	mov	r8, r0
 801780e:	4689      	mov	r9, r1
 8017810:	f7e9 f98c 	bl	8000b2c <__aeabi_dcmplt>
 8017814:	2800      	cmp	r0, #0
 8017816:	d164      	bne.n	80178e2 <_dtoa_r+0x62a>
 8017818:	4642      	mov	r2, r8
 801781a:	464b      	mov	r3, r9
 801781c:	4937      	ldr	r1, [pc, #220]	; (80178fc <_dtoa_r+0x644>)
 801781e:	2000      	movs	r0, #0
 8017820:	f7e8 fd5a 	bl	80002d8 <__aeabi_dsub>
 8017824:	ec53 2b19 	vmov	r2, r3, d9
 8017828:	f7e9 f980 	bl	8000b2c <__aeabi_dcmplt>
 801782c:	2800      	cmp	r0, #0
 801782e:	f040 80b6 	bne.w	801799e <_dtoa_r+0x6e6>
 8017832:	9b02      	ldr	r3, [sp, #8]
 8017834:	429d      	cmp	r5, r3
 8017836:	f43f af7c 	beq.w	8017732 <_dtoa_r+0x47a>
 801783a:	4b31      	ldr	r3, [pc, #196]	; (8017900 <_dtoa_r+0x648>)
 801783c:	ec51 0b19 	vmov	r0, r1, d9
 8017840:	2200      	movs	r2, #0
 8017842:	f7e8 ff01 	bl	8000648 <__aeabi_dmul>
 8017846:	4b2e      	ldr	r3, [pc, #184]	; (8017900 <_dtoa_r+0x648>)
 8017848:	ec41 0b19 	vmov	d9, r0, r1
 801784c:	2200      	movs	r2, #0
 801784e:	4640      	mov	r0, r8
 8017850:	4649      	mov	r1, r9
 8017852:	f7e8 fef9 	bl	8000648 <__aeabi_dmul>
 8017856:	4680      	mov	r8, r0
 8017858:	4689      	mov	r9, r1
 801785a:	e7c5      	b.n	80177e8 <_dtoa_r+0x530>
 801785c:	ec51 0b17 	vmov	r0, r1, d7
 8017860:	f7e8 fef2 	bl	8000648 <__aeabi_dmul>
 8017864:	9b02      	ldr	r3, [sp, #8]
 8017866:	9d00      	ldr	r5, [sp, #0]
 8017868:	930f      	str	r3, [sp, #60]	; 0x3c
 801786a:	ec41 0b19 	vmov	d9, r0, r1
 801786e:	4649      	mov	r1, r9
 8017870:	4640      	mov	r0, r8
 8017872:	f7e9 f999 	bl	8000ba8 <__aeabi_d2iz>
 8017876:	4606      	mov	r6, r0
 8017878:	f7e8 fe7c 	bl	8000574 <__aeabi_i2d>
 801787c:	3630      	adds	r6, #48	; 0x30
 801787e:	4602      	mov	r2, r0
 8017880:	460b      	mov	r3, r1
 8017882:	4640      	mov	r0, r8
 8017884:	4649      	mov	r1, r9
 8017886:	f7e8 fd27 	bl	80002d8 <__aeabi_dsub>
 801788a:	f805 6b01 	strb.w	r6, [r5], #1
 801788e:	9b02      	ldr	r3, [sp, #8]
 8017890:	429d      	cmp	r5, r3
 8017892:	4680      	mov	r8, r0
 8017894:	4689      	mov	r9, r1
 8017896:	f04f 0200 	mov.w	r2, #0
 801789a:	d124      	bne.n	80178e6 <_dtoa_r+0x62e>
 801789c:	4b1b      	ldr	r3, [pc, #108]	; (801790c <_dtoa_r+0x654>)
 801789e:	ec51 0b19 	vmov	r0, r1, d9
 80178a2:	f7e8 fd1b 	bl	80002dc <__adddf3>
 80178a6:	4602      	mov	r2, r0
 80178a8:	460b      	mov	r3, r1
 80178aa:	4640      	mov	r0, r8
 80178ac:	4649      	mov	r1, r9
 80178ae:	f7e9 f95b 	bl	8000b68 <__aeabi_dcmpgt>
 80178b2:	2800      	cmp	r0, #0
 80178b4:	d173      	bne.n	801799e <_dtoa_r+0x6e6>
 80178b6:	ec53 2b19 	vmov	r2, r3, d9
 80178ba:	4914      	ldr	r1, [pc, #80]	; (801790c <_dtoa_r+0x654>)
 80178bc:	2000      	movs	r0, #0
 80178be:	f7e8 fd0b 	bl	80002d8 <__aeabi_dsub>
 80178c2:	4602      	mov	r2, r0
 80178c4:	460b      	mov	r3, r1
 80178c6:	4640      	mov	r0, r8
 80178c8:	4649      	mov	r1, r9
 80178ca:	f7e9 f92f 	bl	8000b2c <__aeabi_dcmplt>
 80178ce:	2800      	cmp	r0, #0
 80178d0:	f43f af2f 	beq.w	8017732 <_dtoa_r+0x47a>
 80178d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80178d6:	1e6b      	subs	r3, r5, #1
 80178d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80178da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80178de:	2b30      	cmp	r3, #48	; 0x30
 80178e0:	d0f8      	beq.n	80178d4 <_dtoa_r+0x61c>
 80178e2:	46bb      	mov	fp, r7
 80178e4:	e04a      	b.n	801797c <_dtoa_r+0x6c4>
 80178e6:	4b06      	ldr	r3, [pc, #24]	; (8017900 <_dtoa_r+0x648>)
 80178e8:	f7e8 feae 	bl	8000648 <__aeabi_dmul>
 80178ec:	4680      	mov	r8, r0
 80178ee:	4689      	mov	r9, r1
 80178f0:	e7bd      	b.n	801786e <_dtoa_r+0x5b6>
 80178f2:	bf00      	nop
 80178f4:	0801d758 	.word	0x0801d758
 80178f8:	0801d730 	.word	0x0801d730
 80178fc:	3ff00000 	.word	0x3ff00000
 8017900:	40240000 	.word	0x40240000
 8017904:	401c0000 	.word	0x401c0000
 8017908:	40140000 	.word	0x40140000
 801790c:	3fe00000 	.word	0x3fe00000
 8017910:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017914:	9d00      	ldr	r5, [sp, #0]
 8017916:	4642      	mov	r2, r8
 8017918:	464b      	mov	r3, r9
 801791a:	4630      	mov	r0, r6
 801791c:	4639      	mov	r1, r7
 801791e:	f7e8 ffbd 	bl	800089c <__aeabi_ddiv>
 8017922:	f7e9 f941 	bl	8000ba8 <__aeabi_d2iz>
 8017926:	9001      	str	r0, [sp, #4]
 8017928:	f7e8 fe24 	bl	8000574 <__aeabi_i2d>
 801792c:	4642      	mov	r2, r8
 801792e:	464b      	mov	r3, r9
 8017930:	f7e8 fe8a 	bl	8000648 <__aeabi_dmul>
 8017934:	4602      	mov	r2, r0
 8017936:	460b      	mov	r3, r1
 8017938:	4630      	mov	r0, r6
 801793a:	4639      	mov	r1, r7
 801793c:	f7e8 fccc 	bl	80002d8 <__aeabi_dsub>
 8017940:	9e01      	ldr	r6, [sp, #4]
 8017942:	9f04      	ldr	r7, [sp, #16]
 8017944:	3630      	adds	r6, #48	; 0x30
 8017946:	f805 6b01 	strb.w	r6, [r5], #1
 801794a:	9e00      	ldr	r6, [sp, #0]
 801794c:	1bae      	subs	r6, r5, r6
 801794e:	42b7      	cmp	r7, r6
 8017950:	4602      	mov	r2, r0
 8017952:	460b      	mov	r3, r1
 8017954:	d134      	bne.n	80179c0 <_dtoa_r+0x708>
 8017956:	f7e8 fcc1 	bl	80002dc <__adddf3>
 801795a:	4642      	mov	r2, r8
 801795c:	464b      	mov	r3, r9
 801795e:	4606      	mov	r6, r0
 8017960:	460f      	mov	r7, r1
 8017962:	f7e9 f901 	bl	8000b68 <__aeabi_dcmpgt>
 8017966:	b9c8      	cbnz	r0, 801799c <_dtoa_r+0x6e4>
 8017968:	4642      	mov	r2, r8
 801796a:	464b      	mov	r3, r9
 801796c:	4630      	mov	r0, r6
 801796e:	4639      	mov	r1, r7
 8017970:	f7e9 f8d2 	bl	8000b18 <__aeabi_dcmpeq>
 8017974:	b110      	cbz	r0, 801797c <_dtoa_r+0x6c4>
 8017976:	9b01      	ldr	r3, [sp, #4]
 8017978:	07db      	lsls	r3, r3, #31
 801797a:	d40f      	bmi.n	801799c <_dtoa_r+0x6e4>
 801797c:	4651      	mov	r1, sl
 801797e:	4620      	mov	r0, r4
 8017980:	f000 fbcc 	bl	801811c <_Bfree>
 8017984:	2300      	movs	r3, #0
 8017986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017988:	702b      	strb	r3, [r5, #0]
 801798a:	f10b 0301 	add.w	r3, fp, #1
 801798e:	6013      	str	r3, [r2, #0]
 8017990:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017992:	2b00      	cmp	r3, #0
 8017994:	f43f ace2 	beq.w	801735c <_dtoa_r+0xa4>
 8017998:	601d      	str	r5, [r3, #0]
 801799a:	e4df      	b.n	801735c <_dtoa_r+0xa4>
 801799c:	465f      	mov	r7, fp
 801799e:	462b      	mov	r3, r5
 80179a0:	461d      	mov	r5, r3
 80179a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80179a6:	2a39      	cmp	r2, #57	; 0x39
 80179a8:	d106      	bne.n	80179b8 <_dtoa_r+0x700>
 80179aa:	9a00      	ldr	r2, [sp, #0]
 80179ac:	429a      	cmp	r2, r3
 80179ae:	d1f7      	bne.n	80179a0 <_dtoa_r+0x6e8>
 80179b0:	9900      	ldr	r1, [sp, #0]
 80179b2:	2230      	movs	r2, #48	; 0x30
 80179b4:	3701      	adds	r7, #1
 80179b6:	700a      	strb	r2, [r1, #0]
 80179b8:	781a      	ldrb	r2, [r3, #0]
 80179ba:	3201      	adds	r2, #1
 80179bc:	701a      	strb	r2, [r3, #0]
 80179be:	e790      	b.n	80178e2 <_dtoa_r+0x62a>
 80179c0:	4ba3      	ldr	r3, [pc, #652]	; (8017c50 <_dtoa_r+0x998>)
 80179c2:	2200      	movs	r2, #0
 80179c4:	f7e8 fe40 	bl	8000648 <__aeabi_dmul>
 80179c8:	2200      	movs	r2, #0
 80179ca:	2300      	movs	r3, #0
 80179cc:	4606      	mov	r6, r0
 80179ce:	460f      	mov	r7, r1
 80179d0:	f7e9 f8a2 	bl	8000b18 <__aeabi_dcmpeq>
 80179d4:	2800      	cmp	r0, #0
 80179d6:	d09e      	beq.n	8017916 <_dtoa_r+0x65e>
 80179d8:	e7d0      	b.n	801797c <_dtoa_r+0x6c4>
 80179da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179dc:	2a00      	cmp	r2, #0
 80179de:	f000 80ca 	beq.w	8017b76 <_dtoa_r+0x8be>
 80179e2:	9a07      	ldr	r2, [sp, #28]
 80179e4:	2a01      	cmp	r2, #1
 80179e6:	f300 80ad 	bgt.w	8017b44 <_dtoa_r+0x88c>
 80179ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179ec:	2a00      	cmp	r2, #0
 80179ee:	f000 80a5 	beq.w	8017b3c <_dtoa_r+0x884>
 80179f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80179f6:	9e08      	ldr	r6, [sp, #32]
 80179f8:	9d05      	ldr	r5, [sp, #20]
 80179fa:	9a05      	ldr	r2, [sp, #20]
 80179fc:	441a      	add	r2, r3
 80179fe:	9205      	str	r2, [sp, #20]
 8017a00:	9a06      	ldr	r2, [sp, #24]
 8017a02:	2101      	movs	r1, #1
 8017a04:	441a      	add	r2, r3
 8017a06:	4620      	mov	r0, r4
 8017a08:	9206      	str	r2, [sp, #24]
 8017a0a:	f000 fc87 	bl	801831c <__i2b>
 8017a0e:	4607      	mov	r7, r0
 8017a10:	b165      	cbz	r5, 8017a2c <_dtoa_r+0x774>
 8017a12:	9b06      	ldr	r3, [sp, #24]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	dd09      	ble.n	8017a2c <_dtoa_r+0x774>
 8017a18:	42ab      	cmp	r3, r5
 8017a1a:	9a05      	ldr	r2, [sp, #20]
 8017a1c:	bfa8      	it	ge
 8017a1e:	462b      	movge	r3, r5
 8017a20:	1ad2      	subs	r2, r2, r3
 8017a22:	9205      	str	r2, [sp, #20]
 8017a24:	9a06      	ldr	r2, [sp, #24]
 8017a26:	1aed      	subs	r5, r5, r3
 8017a28:	1ad3      	subs	r3, r2, r3
 8017a2a:	9306      	str	r3, [sp, #24]
 8017a2c:	9b08      	ldr	r3, [sp, #32]
 8017a2e:	b1f3      	cbz	r3, 8017a6e <_dtoa_r+0x7b6>
 8017a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	f000 80a3 	beq.w	8017b7e <_dtoa_r+0x8c6>
 8017a38:	2e00      	cmp	r6, #0
 8017a3a:	dd10      	ble.n	8017a5e <_dtoa_r+0x7a6>
 8017a3c:	4639      	mov	r1, r7
 8017a3e:	4632      	mov	r2, r6
 8017a40:	4620      	mov	r0, r4
 8017a42:	f000 fd2b 	bl	801849c <__pow5mult>
 8017a46:	4652      	mov	r2, sl
 8017a48:	4601      	mov	r1, r0
 8017a4a:	4607      	mov	r7, r0
 8017a4c:	4620      	mov	r0, r4
 8017a4e:	f000 fc7b 	bl	8018348 <__multiply>
 8017a52:	4651      	mov	r1, sl
 8017a54:	4680      	mov	r8, r0
 8017a56:	4620      	mov	r0, r4
 8017a58:	f000 fb60 	bl	801811c <_Bfree>
 8017a5c:	46c2      	mov	sl, r8
 8017a5e:	9b08      	ldr	r3, [sp, #32]
 8017a60:	1b9a      	subs	r2, r3, r6
 8017a62:	d004      	beq.n	8017a6e <_dtoa_r+0x7b6>
 8017a64:	4651      	mov	r1, sl
 8017a66:	4620      	mov	r0, r4
 8017a68:	f000 fd18 	bl	801849c <__pow5mult>
 8017a6c:	4682      	mov	sl, r0
 8017a6e:	2101      	movs	r1, #1
 8017a70:	4620      	mov	r0, r4
 8017a72:	f000 fc53 	bl	801831c <__i2b>
 8017a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	4606      	mov	r6, r0
 8017a7c:	f340 8081 	ble.w	8017b82 <_dtoa_r+0x8ca>
 8017a80:	461a      	mov	r2, r3
 8017a82:	4601      	mov	r1, r0
 8017a84:	4620      	mov	r0, r4
 8017a86:	f000 fd09 	bl	801849c <__pow5mult>
 8017a8a:	9b07      	ldr	r3, [sp, #28]
 8017a8c:	2b01      	cmp	r3, #1
 8017a8e:	4606      	mov	r6, r0
 8017a90:	dd7a      	ble.n	8017b88 <_dtoa_r+0x8d0>
 8017a92:	f04f 0800 	mov.w	r8, #0
 8017a96:	6933      	ldr	r3, [r6, #16]
 8017a98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017a9c:	6918      	ldr	r0, [r3, #16]
 8017a9e:	f000 fbef 	bl	8018280 <__hi0bits>
 8017aa2:	f1c0 0020 	rsb	r0, r0, #32
 8017aa6:	9b06      	ldr	r3, [sp, #24]
 8017aa8:	4418      	add	r0, r3
 8017aaa:	f010 001f 	ands.w	r0, r0, #31
 8017aae:	f000 8094 	beq.w	8017bda <_dtoa_r+0x922>
 8017ab2:	f1c0 0320 	rsb	r3, r0, #32
 8017ab6:	2b04      	cmp	r3, #4
 8017ab8:	f340 8085 	ble.w	8017bc6 <_dtoa_r+0x90e>
 8017abc:	9b05      	ldr	r3, [sp, #20]
 8017abe:	f1c0 001c 	rsb	r0, r0, #28
 8017ac2:	4403      	add	r3, r0
 8017ac4:	9305      	str	r3, [sp, #20]
 8017ac6:	9b06      	ldr	r3, [sp, #24]
 8017ac8:	4403      	add	r3, r0
 8017aca:	4405      	add	r5, r0
 8017acc:	9306      	str	r3, [sp, #24]
 8017ace:	9b05      	ldr	r3, [sp, #20]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	dd05      	ble.n	8017ae0 <_dtoa_r+0x828>
 8017ad4:	4651      	mov	r1, sl
 8017ad6:	461a      	mov	r2, r3
 8017ad8:	4620      	mov	r0, r4
 8017ada:	f000 fd39 	bl	8018550 <__lshift>
 8017ade:	4682      	mov	sl, r0
 8017ae0:	9b06      	ldr	r3, [sp, #24]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	dd05      	ble.n	8017af2 <_dtoa_r+0x83a>
 8017ae6:	4631      	mov	r1, r6
 8017ae8:	461a      	mov	r2, r3
 8017aea:	4620      	mov	r0, r4
 8017aec:	f000 fd30 	bl	8018550 <__lshift>
 8017af0:	4606      	mov	r6, r0
 8017af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d072      	beq.n	8017bde <_dtoa_r+0x926>
 8017af8:	4631      	mov	r1, r6
 8017afa:	4650      	mov	r0, sl
 8017afc:	f000 fd94 	bl	8018628 <__mcmp>
 8017b00:	2800      	cmp	r0, #0
 8017b02:	da6c      	bge.n	8017bde <_dtoa_r+0x926>
 8017b04:	2300      	movs	r3, #0
 8017b06:	4651      	mov	r1, sl
 8017b08:	220a      	movs	r2, #10
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	f000 fb28 	bl	8018160 <__multadd>
 8017b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017b16:	4682      	mov	sl, r0
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	f000 81b0 	beq.w	8017e7e <_dtoa_r+0xbc6>
 8017b1e:	2300      	movs	r3, #0
 8017b20:	4639      	mov	r1, r7
 8017b22:	220a      	movs	r2, #10
 8017b24:	4620      	mov	r0, r4
 8017b26:	f000 fb1b 	bl	8018160 <__multadd>
 8017b2a:	9b01      	ldr	r3, [sp, #4]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	4607      	mov	r7, r0
 8017b30:	f300 8096 	bgt.w	8017c60 <_dtoa_r+0x9a8>
 8017b34:	9b07      	ldr	r3, [sp, #28]
 8017b36:	2b02      	cmp	r3, #2
 8017b38:	dc59      	bgt.n	8017bee <_dtoa_r+0x936>
 8017b3a:	e091      	b.n	8017c60 <_dtoa_r+0x9a8>
 8017b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017b42:	e758      	b.n	80179f6 <_dtoa_r+0x73e>
 8017b44:	9b04      	ldr	r3, [sp, #16]
 8017b46:	1e5e      	subs	r6, r3, #1
 8017b48:	9b08      	ldr	r3, [sp, #32]
 8017b4a:	42b3      	cmp	r3, r6
 8017b4c:	bfbf      	itttt	lt
 8017b4e:	9b08      	ldrlt	r3, [sp, #32]
 8017b50:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017b52:	9608      	strlt	r6, [sp, #32]
 8017b54:	1af3      	sublt	r3, r6, r3
 8017b56:	bfb4      	ite	lt
 8017b58:	18d2      	addlt	r2, r2, r3
 8017b5a:	1b9e      	subge	r6, r3, r6
 8017b5c:	9b04      	ldr	r3, [sp, #16]
 8017b5e:	bfbc      	itt	lt
 8017b60:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017b62:	2600      	movlt	r6, #0
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	bfb7      	itett	lt
 8017b68:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8017b6c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017b70:	1a9d      	sublt	r5, r3, r2
 8017b72:	2300      	movlt	r3, #0
 8017b74:	e741      	b.n	80179fa <_dtoa_r+0x742>
 8017b76:	9e08      	ldr	r6, [sp, #32]
 8017b78:	9d05      	ldr	r5, [sp, #20]
 8017b7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017b7c:	e748      	b.n	8017a10 <_dtoa_r+0x758>
 8017b7e:	9a08      	ldr	r2, [sp, #32]
 8017b80:	e770      	b.n	8017a64 <_dtoa_r+0x7ac>
 8017b82:	9b07      	ldr	r3, [sp, #28]
 8017b84:	2b01      	cmp	r3, #1
 8017b86:	dc19      	bgt.n	8017bbc <_dtoa_r+0x904>
 8017b88:	9b02      	ldr	r3, [sp, #8]
 8017b8a:	b9bb      	cbnz	r3, 8017bbc <_dtoa_r+0x904>
 8017b8c:	9b03      	ldr	r3, [sp, #12]
 8017b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017b92:	b99b      	cbnz	r3, 8017bbc <_dtoa_r+0x904>
 8017b94:	9b03      	ldr	r3, [sp, #12]
 8017b96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017b9a:	0d1b      	lsrs	r3, r3, #20
 8017b9c:	051b      	lsls	r3, r3, #20
 8017b9e:	b183      	cbz	r3, 8017bc2 <_dtoa_r+0x90a>
 8017ba0:	9b05      	ldr	r3, [sp, #20]
 8017ba2:	3301      	adds	r3, #1
 8017ba4:	9305      	str	r3, [sp, #20]
 8017ba6:	9b06      	ldr	r3, [sp, #24]
 8017ba8:	3301      	adds	r3, #1
 8017baa:	9306      	str	r3, [sp, #24]
 8017bac:	f04f 0801 	mov.w	r8, #1
 8017bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	f47f af6f 	bne.w	8017a96 <_dtoa_r+0x7de>
 8017bb8:	2001      	movs	r0, #1
 8017bba:	e774      	b.n	8017aa6 <_dtoa_r+0x7ee>
 8017bbc:	f04f 0800 	mov.w	r8, #0
 8017bc0:	e7f6      	b.n	8017bb0 <_dtoa_r+0x8f8>
 8017bc2:	4698      	mov	r8, r3
 8017bc4:	e7f4      	b.n	8017bb0 <_dtoa_r+0x8f8>
 8017bc6:	d082      	beq.n	8017ace <_dtoa_r+0x816>
 8017bc8:	9a05      	ldr	r2, [sp, #20]
 8017bca:	331c      	adds	r3, #28
 8017bcc:	441a      	add	r2, r3
 8017bce:	9205      	str	r2, [sp, #20]
 8017bd0:	9a06      	ldr	r2, [sp, #24]
 8017bd2:	441a      	add	r2, r3
 8017bd4:	441d      	add	r5, r3
 8017bd6:	9206      	str	r2, [sp, #24]
 8017bd8:	e779      	b.n	8017ace <_dtoa_r+0x816>
 8017bda:	4603      	mov	r3, r0
 8017bdc:	e7f4      	b.n	8017bc8 <_dtoa_r+0x910>
 8017bde:	9b04      	ldr	r3, [sp, #16]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	dc37      	bgt.n	8017c54 <_dtoa_r+0x99c>
 8017be4:	9b07      	ldr	r3, [sp, #28]
 8017be6:	2b02      	cmp	r3, #2
 8017be8:	dd34      	ble.n	8017c54 <_dtoa_r+0x99c>
 8017bea:	9b04      	ldr	r3, [sp, #16]
 8017bec:	9301      	str	r3, [sp, #4]
 8017bee:	9b01      	ldr	r3, [sp, #4]
 8017bf0:	b963      	cbnz	r3, 8017c0c <_dtoa_r+0x954>
 8017bf2:	4631      	mov	r1, r6
 8017bf4:	2205      	movs	r2, #5
 8017bf6:	4620      	mov	r0, r4
 8017bf8:	f000 fab2 	bl	8018160 <__multadd>
 8017bfc:	4601      	mov	r1, r0
 8017bfe:	4606      	mov	r6, r0
 8017c00:	4650      	mov	r0, sl
 8017c02:	f000 fd11 	bl	8018628 <__mcmp>
 8017c06:	2800      	cmp	r0, #0
 8017c08:	f73f adbb 	bgt.w	8017782 <_dtoa_r+0x4ca>
 8017c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c0e:	9d00      	ldr	r5, [sp, #0]
 8017c10:	ea6f 0b03 	mvn.w	fp, r3
 8017c14:	f04f 0800 	mov.w	r8, #0
 8017c18:	4631      	mov	r1, r6
 8017c1a:	4620      	mov	r0, r4
 8017c1c:	f000 fa7e 	bl	801811c <_Bfree>
 8017c20:	2f00      	cmp	r7, #0
 8017c22:	f43f aeab 	beq.w	801797c <_dtoa_r+0x6c4>
 8017c26:	f1b8 0f00 	cmp.w	r8, #0
 8017c2a:	d005      	beq.n	8017c38 <_dtoa_r+0x980>
 8017c2c:	45b8      	cmp	r8, r7
 8017c2e:	d003      	beq.n	8017c38 <_dtoa_r+0x980>
 8017c30:	4641      	mov	r1, r8
 8017c32:	4620      	mov	r0, r4
 8017c34:	f000 fa72 	bl	801811c <_Bfree>
 8017c38:	4639      	mov	r1, r7
 8017c3a:	4620      	mov	r0, r4
 8017c3c:	f000 fa6e 	bl	801811c <_Bfree>
 8017c40:	e69c      	b.n	801797c <_dtoa_r+0x6c4>
 8017c42:	2600      	movs	r6, #0
 8017c44:	4637      	mov	r7, r6
 8017c46:	e7e1      	b.n	8017c0c <_dtoa_r+0x954>
 8017c48:	46bb      	mov	fp, r7
 8017c4a:	4637      	mov	r7, r6
 8017c4c:	e599      	b.n	8017782 <_dtoa_r+0x4ca>
 8017c4e:	bf00      	nop
 8017c50:	40240000 	.word	0x40240000
 8017c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	f000 80c8 	beq.w	8017dec <_dtoa_r+0xb34>
 8017c5c:	9b04      	ldr	r3, [sp, #16]
 8017c5e:	9301      	str	r3, [sp, #4]
 8017c60:	2d00      	cmp	r5, #0
 8017c62:	dd05      	ble.n	8017c70 <_dtoa_r+0x9b8>
 8017c64:	4639      	mov	r1, r7
 8017c66:	462a      	mov	r2, r5
 8017c68:	4620      	mov	r0, r4
 8017c6a:	f000 fc71 	bl	8018550 <__lshift>
 8017c6e:	4607      	mov	r7, r0
 8017c70:	f1b8 0f00 	cmp.w	r8, #0
 8017c74:	d05b      	beq.n	8017d2e <_dtoa_r+0xa76>
 8017c76:	6879      	ldr	r1, [r7, #4]
 8017c78:	4620      	mov	r0, r4
 8017c7a:	f000 fa0f 	bl	801809c <_Balloc>
 8017c7e:	4605      	mov	r5, r0
 8017c80:	b928      	cbnz	r0, 8017c8e <_dtoa_r+0x9d6>
 8017c82:	4b83      	ldr	r3, [pc, #524]	; (8017e90 <_dtoa_r+0xbd8>)
 8017c84:	4602      	mov	r2, r0
 8017c86:	f240 21ef 	movw	r1, #751	; 0x2ef
 8017c8a:	f7ff bb2e 	b.w	80172ea <_dtoa_r+0x32>
 8017c8e:	693a      	ldr	r2, [r7, #16]
 8017c90:	3202      	adds	r2, #2
 8017c92:	0092      	lsls	r2, r2, #2
 8017c94:	f107 010c 	add.w	r1, r7, #12
 8017c98:	300c      	adds	r0, #12
 8017c9a:	f7ff fa6e 	bl	801717a <memcpy>
 8017c9e:	2201      	movs	r2, #1
 8017ca0:	4629      	mov	r1, r5
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	f000 fc54 	bl	8018550 <__lshift>
 8017ca8:	9b00      	ldr	r3, [sp, #0]
 8017caa:	3301      	adds	r3, #1
 8017cac:	9304      	str	r3, [sp, #16]
 8017cae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017cb2:	4413      	add	r3, r2
 8017cb4:	9308      	str	r3, [sp, #32]
 8017cb6:	9b02      	ldr	r3, [sp, #8]
 8017cb8:	f003 0301 	and.w	r3, r3, #1
 8017cbc:	46b8      	mov	r8, r7
 8017cbe:	9306      	str	r3, [sp, #24]
 8017cc0:	4607      	mov	r7, r0
 8017cc2:	9b04      	ldr	r3, [sp, #16]
 8017cc4:	4631      	mov	r1, r6
 8017cc6:	3b01      	subs	r3, #1
 8017cc8:	4650      	mov	r0, sl
 8017cca:	9301      	str	r3, [sp, #4]
 8017ccc:	f7ff fa6a 	bl	80171a4 <quorem>
 8017cd0:	4641      	mov	r1, r8
 8017cd2:	9002      	str	r0, [sp, #8]
 8017cd4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017cd8:	4650      	mov	r0, sl
 8017cda:	f000 fca5 	bl	8018628 <__mcmp>
 8017cde:	463a      	mov	r2, r7
 8017ce0:	9005      	str	r0, [sp, #20]
 8017ce2:	4631      	mov	r1, r6
 8017ce4:	4620      	mov	r0, r4
 8017ce6:	f000 fcbb 	bl	8018660 <__mdiff>
 8017cea:	68c2      	ldr	r2, [r0, #12]
 8017cec:	4605      	mov	r5, r0
 8017cee:	bb02      	cbnz	r2, 8017d32 <_dtoa_r+0xa7a>
 8017cf0:	4601      	mov	r1, r0
 8017cf2:	4650      	mov	r0, sl
 8017cf4:	f000 fc98 	bl	8018628 <__mcmp>
 8017cf8:	4602      	mov	r2, r0
 8017cfa:	4629      	mov	r1, r5
 8017cfc:	4620      	mov	r0, r4
 8017cfe:	9209      	str	r2, [sp, #36]	; 0x24
 8017d00:	f000 fa0c 	bl	801811c <_Bfree>
 8017d04:	9b07      	ldr	r3, [sp, #28]
 8017d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d08:	9d04      	ldr	r5, [sp, #16]
 8017d0a:	ea43 0102 	orr.w	r1, r3, r2
 8017d0e:	9b06      	ldr	r3, [sp, #24]
 8017d10:	4319      	orrs	r1, r3
 8017d12:	d110      	bne.n	8017d36 <_dtoa_r+0xa7e>
 8017d14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017d18:	d029      	beq.n	8017d6e <_dtoa_r+0xab6>
 8017d1a:	9b05      	ldr	r3, [sp, #20]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	dd02      	ble.n	8017d26 <_dtoa_r+0xa6e>
 8017d20:	9b02      	ldr	r3, [sp, #8]
 8017d22:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8017d26:	9b01      	ldr	r3, [sp, #4]
 8017d28:	f883 9000 	strb.w	r9, [r3]
 8017d2c:	e774      	b.n	8017c18 <_dtoa_r+0x960>
 8017d2e:	4638      	mov	r0, r7
 8017d30:	e7ba      	b.n	8017ca8 <_dtoa_r+0x9f0>
 8017d32:	2201      	movs	r2, #1
 8017d34:	e7e1      	b.n	8017cfa <_dtoa_r+0xa42>
 8017d36:	9b05      	ldr	r3, [sp, #20]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	db04      	blt.n	8017d46 <_dtoa_r+0xa8e>
 8017d3c:	9907      	ldr	r1, [sp, #28]
 8017d3e:	430b      	orrs	r3, r1
 8017d40:	9906      	ldr	r1, [sp, #24]
 8017d42:	430b      	orrs	r3, r1
 8017d44:	d120      	bne.n	8017d88 <_dtoa_r+0xad0>
 8017d46:	2a00      	cmp	r2, #0
 8017d48:	dded      	ble.n	8017d26 <_dtoa_r+0xa6e>
 8017d4a:	4651      	mov	r1, sl
 8017d4c:	2201      	movs	r2, #1
 8017d4e:	4620      	mov	r0, r4
 8017d50:	f000 fbfe 	bl	8018550 <__lshift>
 8017d54:	4631      	mov	r1, r6
 8017d56:	4682      	mov	sl, r0
 8017d58:	f000 fc66 	bl	8018628 <__mcmp>
 8017d5c:	2800      	cmp	r0, #0
 8017d5e:	dc03      	bgt.n	8017d68 <_dtoa_r+0xab0>
 8017d60:	d1e1      	bne.n	8017d26 <_dtoa_r+0xa6e>
 8017d62:	f019 0f01 	tst.w	r9, #1
 8017d66:	d0de      	beq.n	8017d26 <_dtoa_r+0xa6e>
 8017d68:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017d6c:	d1d8      	bne.n	8017d20 <_dtoa_r+0xa68>
 8017d6e:	9a01      	ldr	r2, [sp, #4]
 8017d70:	2339      	movs	r3, #57	; 0x39
 8017d72:	7013      	strb	r3, [r2, #0]
 8017d74:	462b      	mov	r3, r5
 8017d76:	461d      	mov	r5, r3
 8017d78:	3b01      	subs	r3, #1
 8017d7a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017d7e:	2a39      	cmp	r2, #57	; 0x39
 8017d80:	d06c      	beq.n	8017e5c <_dtoa_r+0xba4>
 8017d82:	3201      	adds	r2, #1
 8017d84:	701a      	strb	r2, [r3, #0]
 8017d86:	e747      	b.n	8017c18 <_dtoa_r+0x960>
 8017d88:	2a00      	cmp	r2, #0
 8017d8a:	dd07      	ble.n	8017d9c <_dtoa_r+0xae4>
 8017d8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017d90:	d0ed      	beq.n	8017d6e <_dtoa_r+0xab6>
 8017d92:	9a01      	ldr	r2, [sp, #4]
 8017d94:	f109 0301 	add.w	r3, r9, #1
 8017d98:	7013      	strb	r3, [r2, #0]
 8017d9a:	e73d      	b.n	8017c18 <_dtoa_r+0x960>
 8017d9c:	9b04      	ldr	r3, [sp, #16]
 8017d9e:	9a08      	ldr	r2, [sp, #32]
 8017da0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8017da4:	4293      	cmp	r3, r2
 8017da6:	d043      	beq.n	8017e30 <_dtoa_r+0xb78>
 8017da8:	4651      	mov	r1, sl
 8017daa:	2300      	movs	r3, #0
 8017dac:	220a      	movs	r2, #10
 8017dae:	4620      	mov	r0, r4
 8017db0:	f000 f9d6 	bl	8018160 <__multadd>
 8017db4:	45b8      	cmp	r8, r7
 8017db6:	4682      	mov	sl, r0
 8017db8:	f04f 0300 	mov.w	r3, #0
 8017dbc:	f04f 020a 	mov.w	r2, #10
 8017dc0:	4641      	mov	r1, r8
 8017dc2:	4620      	mov	r0, r4
 8017dc4:	d107      	bne.n	8017dd6 <_dtoa_r+0xb1e>
 8017dc6:	f000 f9cb 	bl	8018160 <__multadd>
 8017dca:	4680      	mov	r8, r0
 8017dcc:	4607      	mov	r7, r0
 8017dce:	9b04      	ldr	r3, [sp, #16]
 8017dd0:	3301      	adds	r3, #1
 8017dd2:	9304      	str	r3, [sp, #16]
 8017dd4:	e775      	b.n	8017cc2 <_dtoa_r+0xa0a>
 8017dd6:	f000 f9c3 	bl	8018160 <__multadd>
 8017dda:	4639      	mov	r1, r7
 8017ddc:	4680      	mov	r8, r0
 8017dde:	2300      	movs	r3, #0
 8017de0:	220a      	movs	r2, #10
 8017de2:	4620      	mov	r0, r4
 8017de4:	f000 f9bc 	bl	8018160 <__multadd>
 8017de8:	4607      	mov	r7, r0
 8017dea:	e7f0      	b.n	8017dce <_dtoa_r+0xb16>
 8017dec:	9b04      	ldr	r3, [sp, #16]
 8017dee:	9301      	str	r3, [sp, #4]
 8017df0:	9d00      	ldr	r5, [sp, #0]
 8017df2:	4631      	mov	r1, r6
 8017df4:	4650      	mov	r0, sl
 8017df6:	f7ff f9d5 	bl	80171a4 <quorem>
 8017dfa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017dfe:	9b00      	ldr	r3, [sp, #0]
 8017e00:	f805 9b01 	strb.w	r9, [r5], #1
 8017e04:	1aea      	subs	r2, r5, r3
 8017e06:	9b01      	ldr	r3, [sp, #4]
 8017e08:	4293      	cmp	r3, r2
 8017e0a:	dd07      	ble.n	8017e1c <_dtoa_r+0xb64>
 8017e0c:	4651      	mov	r1, sl
 8017e0e:	2300      	movs	r3, #0
 8017e10:	220a      	movs	r2, #10
 8017e12:	4620      	mov	r0, r4
 8017e14:	f000 f9a4 	bl	8018160 <__multadd>
 8017e18:	4682      	mov	sl, r0
 8017e1a:	e7ea      	b.n	8017df2 <_dtoa_r+0xb3a>
 8017e1c:	9b01      	ldr	r3, [sp, #4]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	bfc8      	it	gt
 8017e22:	461d      	movgt	r5, r3
 8017e24:	9b00      	ldr	r3, [sp, #0]
 8017e26:	bfd8      	it	le
 8017e28:	2501      	movle	r5, #1
 8017e2a:	441d      	add	r5, r3
 8017e2c:	f04f 0800 	mov.w	r8, #0
 8017e30:	4651      	mov	r1, sl
 8017e32:	2201      	movs	r2, #1
 8017e34:	4620      	mov	r0, r4
 8017e36:	f000 fb8b 	bl	8018550 <__lshift>
 8017e3a:	4631      	mov	r1, r6
 8017e3c:	4682      	mov	sl, r0
 8017e3e:	f000 fbf3 	bl	8018628 <__mcmp>
 8017e42:	2800      	cmp	r0, #0
 8017e44:	dc96      	bgt.n	8017d74 <_dtoa_r+0xabc>
 8017e46:	d102      	bne.n	8017e4e <_dtoa_r+0xb96>
 8017e48:	f019 0f01 	tst.w	r9, #1
 8017e4c:	d192      	bne.n	8017d74 <_dtoa_r+0xabc>
 8017e4e:	462b      	mov	r3, r5
 8017e50:	461d      	mov	r5, r3
 8017e52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017e56:	2a30      	cmp	r2, #48	; 0x30
 8017e58:	d0fa      	beq.n	8017e50 <_dtoa_r+0xb98>
 8017e5a:	e6dd      	b.n	8017c18 <_dtoa_r+0x960>
 8017e5c:	9a00      	ldr	r2, [sp, #0]
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d189      	bne.n	8017d76 <_dtoa_r+0xabe>
 8017e62:	f10b 0b01 	add.w	fp, fp, #1
 8017e66:	2331      	movs	r3, #49	; 0x31
 8017e68:	e796      	b.n	8017d98 <_dtoa_r+0xae0>
 8017e6a:	4b0a      	ldr	r3, [pc, #40]	; (8017e94 <_dtoa_r+0xbdc>)
 8017e6c:	f7ff ba99 	b.w	80173a2 <_dtoa_r+0xea>
 8017e70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	f47f aa6d 	bne.w	8017352 <_dtoa_r+0x9a>
 8017e78:	4b07      	ldr	r3, [pc, #28]	; (8017e98 <_dtoa_r+0xbe0>)
 8017e7a:	f7ff ba92 	b.w	80173a2 <_dtoa_r+0xea>
 8017e7e:	9b01      	ldr	r3, [sp, #4]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	dcb5      	bgt.n	8017df0 <_dtoa_r+0xb38>
 8017e84:	9b07      	ldr	r3, [sp, #28]
 8017e86:	2b02      	cmp	r3, #2
 8017e88:	f73f aeb1 	bgt.w	8017bee <_dtoa_r+0x936>
 8017e8c:	e7b0      	b.n	8017df0 <_dtoa_r+0xb38>
 8017e8e:	bf00      	nop
 8017e90:	0801d6c5 	.word	0x0801d6c5
 8017e94:	0801d620 	.word	0x0801d620
 8017e98:	0801d649 	.word	0x0801d649

08017e9c <_free_r>:
 8017e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e9e:	2900      	cmp	r1, #0
 8017ea0:	d044      	beq.n	8017f2c <_free_r+0x90>
 8017ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ea6:	9001      	str	r0, [sp, #4]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8017eae:	bfb8      	it	lt
 8017eb0:	18e4      	addlt	r4, r4, r3
 8017eb2:	f000 f8e7 	bl	8018084 <__malloc_lock>
 8017eb6:	4a1e      	ldr	r2, [pc, #120]	; (8017f30 <_free_r+0x94>)
 8017eb8:	9801      	ldr	r0, [sp, #4]
 8017eba:	6813      	ldr	r3, [r2, #0]
 8017ebc:	b933      	cbnz	r3, 8017ecc <_free_r+0x30>
 8017ebe:	6063      	str	r3, [r4, #4]
 8017ec0:	6014      	str	r4, [r2, #0]
 8017ec2:	b003      	add	sp, #12
 8017ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ec8:	f000 b8e2 	b.w	8018090 <__malloc_unlock>
 8017ecc:	42a3      	cmp	r3, r4
 8017ece:	d908      	bls.n	8017ee2 <_free_r+0x46>
 8017ed0:	6825      	ldr	r5, [r4, #0]
 8017ed2:	1961      	adds	r1, r4, r5
 8017ed4:	428b      	cmp	r3, r1
 8017ed6:	bf01      	itttt	eq
 8017ed8:	6819      	ldreq	r1, [r3, #0]
 8017eda:	685b      	ldreq	r3, [r3, #4]
 8017edc:	1949      	addeq	r1, r1, r5
 8017ede:	6021      	streq	r1, [r4, #0]
 8017ee0:	e7ed      	b.n	8017ebe <_free_r+0x22>
 8017ee2:	461a      	mov	r2, r3
 8017ee4:	685b      	ldr	r3, [r3, #4]
 8017ee6:	b10b      	cbz	r3, 8017eec <_free_r+0x50>
 8017ee8:	42a3      	cmp	r3, r4
 8017eea:	d9fa      	bls.n	8017ee2 <_free_r+0x46>
 8017eec:	6811      	ldr	r1, [r2, #0]
 8017eee:	1855      	adds	r5, r2, r1
 8017ef0:	42a5      	cmp	r5, r4
 8017ef2:	d10b      	bne.n	8017f0c <_free_r+0x70>
 8017ef4:	6824      	ldr	r4, [r4, #0]
 8017ef6:	4421      	add	r1, r4
 8017ef8:	1854      	adds	r4, r2, r1
 8017efa:	42a3      	cmp	r3, r4
 8017efc:	6011      	str	r1, [r2, #0]
 8017efe:	d1e0      	bne.n	8017ec2 <_free_r+0x26>
 8017f00:	681c      	ldr	r4, [r3, #0]
 8017f02:	685b      	ldr	r3, [r3, #4]
 8017f04:	6053      	str	r3, [r2, #4]
 8017f06:	440c      	add	r4, r1
 8017f08:	6014      	str	r4, [r2, #0]
 8017f0a:	e7da      	b.n	8017ec2 <_free_r+0x26>
 8017f0c:	d902      	bls.n	8017f14 <_free_r+0x78>
 8017f0e:	230c      	movs	r3, #12
 8017f10:	6003      	str	r3, [r0, #0]
 8017f12:	e7d6      	b.n	8017ec2 <_free_r+0x26>
 8017f14:	6825      	ldr	r5, [r4, #0]
 8017f16:	1961      	adds	r1, r4, r5
 8017f18:	428b      	cmp	r3, r1
 8017f1a:	bf04      	itt	eq
 8017f1c:	6819      	ldreq	r1, [r3, #0]
 8017f1e:	685b      	ldreq	r3, [r3, #4]
 8017f20:	6063      	str	r3, [r4, #4]
 8017f22:	bf04      	itt	eq
 8017f24:	1949      	addeq	r1, r1, r5
 8017f26:	6021      	streq	r1, [r4, #0]
 8017f28:	6054      	str	r4, [r2, #4]
 8017f2a:	e7ca      	b.n	8017ec2 <_free_r+0x26>
 8017f2c:	b003      	add	sp, #12
 8017f2e:	bd30      	pop	{r4, r5, pc}
 8017f30:	200036f0 	.word	0x200036f0

08017f34 <malloc>:
 8017f34:	4b02      	ldr	r3, [pc, #8]	; (8017f40 <malloc+0xc>)
 8017f36:	4601      	mov	r1, r0
 8017f38:	6818      	ldr	r0, [r3, #0]
 8017f3a:	f000 b823 	b.w	8017f84 <_malloc_r>
 8017f3e:	bf00      	nop
 8017f40:	200003d0 	.word	0x200003d0

08017f44 <sbrk_aligned>:
 8017f44:	b570      	push	{r4, r5, r6, lr}
 8017f46:	4e0e      	ldr	r6, [pc, #56]	; (8017f80 <sbrk_aligned+0x3c>)
 8017f48:	460c      	mov	r4, r1
 8017f4a:	6831      	ldr	r1, [r6, #0]
 8017f4c:	4605      	mov	r5, r0
 8017f4e:	b911      	cbnz	r1, 8017f56 <sbrk_aligned+0x12>
 8017f50:	f001 fe1a 	bl	8019b88 <_sbrk_r>
 8017f54:	6030      	str	r0, [r6, #0]
 8017f56:	4621      	mov	r1, r4
 8017f58:	4628      	mov	r0, r5
 8017f5a:	f001 fe15 	bl	8019b88 <_sbrk_r>
 8017f5e:	1c43      	adds	r3, r0, #1
 8017f60:	d00a      	beq.n	8017f78 <sbrk_aligned+0x34>
 8017f62:	1cc4      	adds	r4, r0, #3
 8017f64:	f024 0403 	bic.w	r4, r4, #3
 8017f68:	42a0      	cmp	r0, r4
 8017f6a:	d007      	beq.n	8017f7c <sbrk_aligned+0x38>
 8017f6c:	1a21      	subs	r1, r4, r0
 8017f6e:	4628      	mov	r0, r5
 8017f70:	f001 fe0a 	bl	8019b88 <_sbrk_r>
 8017f74:	3001      	adds	r0, #1
 8017f76:	d101      	bne.n	8017f7c <sbrk_aligned+0x38>
 8017f78:	f04f 34ff 	mov.w	r4, #4294967295
 8017f7c:	4620      	mov	r0, r4
 8017f7e:	bd70      	pop	{r4, r5, r6, pc}
 8017f80:	200036f4 	.word	0x200036f4

08017f84 <_malloc_r>:
 8017f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f88:	1ccd      	adds	r5, r1, #3
 8017f8a:	f025 0503 	bic.w	r5, r5, #3
 8017f8e:	3508      	adds	r5, #8
 8017f90:	2d0c      	cmp	r5, #12
 8017f92:	bf38      	it	cc
 8017f94:	250c      	movcc	r5, #12
 8017f96:	2d00      	cmp	r5, #0
 8017f98:	4607      	mov	r7, r0
 8017f9a:	db01      	blt.n	8017fa0 <_malloc_r+0x1c>
 8017f9c:	42a9      	cmp	r1, r5
 8017f9e:	d905      	bls.n	8017fac <_malloc_r+0x28>
 8017fa0:	230c      	movs	r3, #12
 8017fa2:	603b      	str	r3, [r7, #0]
 8017fa4:	2600      	movs	r6, #0
 8017fa6:	4630      	mov	r0, r6
 8017fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017fac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018080 <_malloc_r+0xfc>
 8017fb0:	f000 f868 	bl	8018084 <__malloc_lock>
 8017fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8017fb8:	461c      	mov	r4, r3
 8017fba:	bb5c      	cbnz	r4, 8018014 <_malloc_r+0x90>
 8017fbc:	4629      	mov	r1, r5
 8017fbe:	4638      	mov	r0, r7
 8017fc0:	f7ff ffc0 	bl	8017f44 <sbrk_aligned>
 8017fc4:	1c43      	adds	r3, r0, #1
 8017fc6:	4604      	mov	r4, r0
 8017fc8:	d155      	bne.n	8018076 <_malloc_r+0xf2>
 8017fca:	f8d8 4000 	ldr.w	r4, [r8]
 8017fce:	4626      	mov	r6, r4
 8017fd0:	2e00      	cmp	r6, #0
 8017fd2:	d145      	bne.n	8018060 <_malloc_r+0xdc>
 8017fd4:	2c00      	cmp	r4, #0
 8017fd6:	d048      	beq.n	801806a <_malloc_r+0xe6>
 8017fd8:	6823      	ldr	r3, [r4, #0]
 8017fda:	4631      	mov	r1, r6
 8017fdc:	4638      	mov	r0, r7
 8017fde:	eb04 0903 	add.w	r9, r4, r3
 8017fe2:	f001 fdd1 	bl	8019b88 <_sbrk_r>
 8017fe6:	4581      	cmp	r9, r0
 8017fe8:	d13f      	bne.n	801806a <_malloc_r+0xe6>
 8017fea:	6821      	ldr	r1, [r4, #0]
 8017fec:	1a6d      	subs	r5, r5, r1
 8017fee:	4629      	mov	r1, r5
 8017ff0:	4638      	mov	r0, r7
 8017ff2:	f7ff ffa7 	bl	8017f44 <sbrk_aligned>
 8017ff6:	3001      	adds	r0, #1
 8017ff8:	d037      	beq.n	801806a <_malloc_r+0xe6>
 8017ffa:	6823      	ldr	r3, [r4, #0]
 8017ffc:	442b      	add	r3, r5
 8017ffe:	6023      	str	r3, [r4, #0]
 8018000:	f8d8 3000 	ldr.w	r3, [r8]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d038      	beq.n	801807a <_malloc_r+0xf6>
 8018008:	685a      	ldr	r2, [r3, #4]
 801800a:	42a2      	cmp	r2, r4
 801800c:	d12b      	bne.n	8018066 <_malloc_r+0xe2>
 801800e:	2200      	movs	r2, #0
 8018010:	605a      	str	r2, [r3, #4]
 8018012:	e00f      	b.n	8018034 <_malloc_r+0xb0>
 8018014:	6822      	ldr	r2, [r4, #0]
 8018016:	1b52      	subs	r2, r2, r5
 8018018:	d41f      	bmi.n	801805a <_malloc_r+0xd6>
 801801a:	2a0b      	cmp	r2, #11
 801801c:	d917      	bls.n	801804e <_malloc_r+0xca>
 801801e:	1961      	adds	r1, r4, r5
 8018020:	42a3      	cmp	r3, r4
 8018022:	6025      	str	r5, [r4, #0]
 8018024:	bf18      	it	ne
 8018026:	6059      	strne	r1, [r3, #4]
 8018028:	6863      	ldr	r3, [r4, #4]
 801802a:	bf08      	it	eq
 801802c:	f8c8 1000 	streq.w	r1, [r8]
 8018030:	5162      	str	r2, [r4, r5]
 8018032:	604b      	str	r3, [r1, #4]
 8018034:	4638      	mov	r0, r7
 8018036:	f104 060b 	add.w	r6, r4, #11
 801803a:	f000 f829 	bl	8018090 <__malloc_unlock>
 801803e:	f026 0607 	bic.w	r6, r6, #7
 8018042:	1d23      	adds	r3, r4, #4
 8018044:	1af2      	subs	r2, r6, r3
 8018046:	d0ae      	beq.n	8017fa6 <_malloc_r+0x22>
 8018048:	1b9b      	subs	r3, r3, r6
 801804a:	50a3      	str	r3, [r4, r2]
 801804c:	e7ab      	b.n	8017fa6 <_malloc_r+0x22>
 801804e:	42a3      	cmp	r3, r4
 8018050:	6862      	ldr	r2, [r4, #4]
 8018052:	d1dd      	bne.n	8018010 <_malloc_r+0x8c>
 8018054:	f8c8 2000 	str.w	r2, [r8]
 8018058:	e7ec      	b.n	8018034 <_malloc_r+0xb0>
 801805a:	4623      	mov	r3, r4
 801805c:	6864      	ldr	r4, [r4, #4]
 801805e:	e7ac      	b.n	8017fba <_malloc_r+0x36>
 8018060:	4634      	mov	r4, r6
 8018062:	6876      	ldr	r6, [r6, #4]
 8018064:	e7b4      	b.n	8017fd0 <_malloc_r+0x4c>
 8018066:	4613      	mov	r3, r2
 8018068:	e7cc      	b.n	8018004 <_malloc_r+0x80>
 801806a:	230c      	movs	r3, #12
 801806c:	603b      	str	r3, [r7, #0]
 801806e:	4638      	mov	r0, r7
 8018070:	f000 f80e 	bl	8018090 <__malloc_unlock>
 8018074:	e797      	b.n	8017fa6 <_malloc_r+0x22>
 8018076:	6025      	str	r5, [r4, #0]
 8018078:	e7dc      	b.n	8018034 <_malloc_r+0xb0>
 801807a:	605b      	str	r3, [r3, #4]
 801807c:	deff      	udf	#255	; 0xff
 801807e:	bf00      	nop
 8018080:	200036f0 	.word	0x200036f0

08018084 <__malloc_lock>:
 8018084:	4801      	ldr	r0, [pc, #4]	; (801808c <__malloc_lock+0x8>)
 8018086:	f7ff b876 	b.w	8017176 <__retarget_lock_acquire_recursive>
 801808a:	bf00      	nop
 801808c:	200036ec 	.word	0x200036ec

08018090 <__malloc_unlock>:
 8018090:	4801      	ldr	r0, [pc, #4]	; (8018098 <__malloc_unlock+0x8>)
 8018092:	f7ff b871 	b.w	8017178 <__retarget_lock_release_recursive>
 8018096:	bf00      	nop
 8018098:	200036ec 	.word	0x200036ec

0801809c <_Balloc>:
 801809c:	b570      	push	{r4, r5, r6, lr}
 801809e:	69c6      	ldr	r6, [r0, #28]
 80180a0:	4604      	mov	r4, r0
 80180a2:	460d      	mov	r5, r1
 80180a4:	b976      	cbnz	r6, 80180c4 <_Balloc+0x28>
 80180a6:	2010      	movs	r0, #16
 80180a8:	f7ff ff44 	bl	8017f34 <malloc>
 80180ac:	4602      	mov	r2, r0
 80180ae:	61e0      	str	r0, [r4, #28]
 80180b0:	b920      	cbnz	r0, 80180bc <_Balloc+0x20>
 80180b2:	4b18      	ldr	r3, [pc, #96]	; (8018114 <_Balloc+0x78>)
 80180b4:	4818      	ldr	r0, [pc, #96]	; (8018118 <_Balloc+0x7c>)
 80180b6:	216b      	movs	r1, #107	; 0x6b
 80180b8:	f001 fd7e 	bl	8019bb8 <__assert_func>
 80180bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80180c0:	6006      	str	r6, [r0, #0]
 80180c2:	60c6      	str	r6, [r0, #12]
 80180c4:	69e6      	ldr	r6, [r4, #28]
 80180c6:	68f3      	ldr	r3, [r6, #12]
 80180c8:	b183      	cbz	r3, 80180ec <_Balloc+0x50>
 80180ca:	69e3      	ldr	r3, [r4, #28]
 80180cc:	68db      	ldr	r3, [r3, #12]
 80180ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80180d2:	b9b8      	cbnz	r0, 8018104 <_Balloc+0x68>
 80180d4:	2101      	movs	r1, #1
 80180d6:	fa01 f605 	lsl.w	r6, r1, r5
 80180da:	1d72      	adds	r2, r6, #5
 80180dc:	0092      	lsls	r2, r2, #2
 80180de:	4620      	mov	r0, r4
 80180e0:	f001 fd88 	bl	8019bf4 <_calloc_r>
 80180e4:	b160      	cbz	r0, 8018100 <_Balloc+0x64>
 80180e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80180ea:	e00e      	b.n	801810a <_Balloc+0x6e>
 80180ec:	2221      	movs	r2, #33	; 0x21
 80180ee:	2104      	movs	r1, #4
 80180f0:	4620      	mov	r0, r4
 80180f2:	f001 fd7f 	bl	8019bf4 <_calloc_r>
 80180f6:	69e3      	ldr	r3, [r4, #28]
 80180f8:	60f0      	str	r0, [r6, #12]
 80180fa:	68db      	ldr	r3, [r3, #12]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d1e4      	bne.n	80180ca <_Balloc+0x2e>
 8018100:	2000      	movs	r0, #0
 8018102:	bd70      	pop	{r4, r5, r6, pc}
 8018104:	6802      	ldr	r2, [r0, #0]
 8018106:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801810a:	2300      	movs	r3, #0
 801810c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018110:	e7f7      	b.n	8018102 <_Balloc+0x66>
 8018112:	bf00      	nop
 8018114:	0801d656 	.word	0x0801d656
 8018118:	0801d6d6 	.word	0x0801d6d6

0801811c <_Bfree>:
 801811c:	b570      	push	{r4, r5, r6, lr}
 801811e:	69c6      	ldr	r6, [r0, #28]
 8018120:	4605      	mov	r5, r0
 8018122:	460c      	mov	r4, r1
 8018124:	b976      	cbnz	r6, 8018144 <_Bfree+0x28>
 8018126:	2010      	movs	r0, #16
 8018128:	f7ff ff04 	bl	8017f34 <malloc>
 801812c:	4602      	mov	r2, r0
 801812e:	61e8      	str	r0, [r5, #28]
 8018130:	b920      	cbnz	r0, 801813c <_Bfree+0x20>
 8018132:	4b09      	ldr	r3, [pc, #36]	; (8018158 <_Bfree+0x3c>)
 8018134:	4809      	ldr	r0, [pc, #36]	; (801815c <_Bfree+0x40>)
 8018136:	218f      	movs	r1, #143	; 0x8f
 8018138:	f001 fd3e 	bl	8019bb8 <__assert_func>
 801813c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018140:	6006      	str	r6, [r0, #0]
 8018142:	60c6      	str	r6, [r0, #12]
 8018144:	b13c      	cbz	r4, 8018156 <_Bfree+0x3a>
 8018146:	69eb      	ldr	r3, [r5, #28]
 8018148:	6862      	ldr	r2, [r4, #4]
 801814a:	68db      	ldr	r3, [r3, #12]
 801814c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018150:	6021      	str	r1, [r4, #0]
 8018152:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018156:	bd70      	pop	{r4, r5, r6, pc}
 8018158:	0801d656 	.word	0x0801d656
 801815c:	0801d6d6 	.word	0x0801d6d6

08018160 <__multadd>:
 8018160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018164:	690d      	ldr	r5, [r1, #16]
 8018166:	4607      	mov	r7, r0
 8018168:	460c      	mov	r4, r1
 801816a:	461e      	mov	r6, r3
 801816c:	f101 0c14 	add.w	ip, r1, #20
 8018170:	2000      	movs	r0, #0
 8018172:	f8dc 3000 	ldr.w	r3, [ip]
 8018176:	b299      	uxth	r1, r3
 8018178:	fb02 6101 	mla	r1, r2, r1, r6
 801817c:	0c1e      	lsrs	r6, r3, #16
 801817e:	0c0b      	lsrs	r3, r1, #16
 8018180:	fb02 3306 	mla	r3, r2, r6, r3
 8018184:	b289      	uxth	r1, r1
 8018186:	3001      	adds	r0, #1
 8018188:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801818c:	4285      	cmp	r5, r0
 801818e:	f84c 1b04 	str.w	r1, [ip], #4
 8018192:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018196:	dcec      	bgt.n	8018172 <__multadd+0x12>
 8018198:	b30e      	cbz	r6, 80181de <__multadd+0x7e>
 801819a:	68a3      	ldr	r3, [r4, #8]
 801819c:	42ab      	cmp	r3, r5
 801819e:	dc19      	bgt.n	80181d4 <__multadd+0x74>
 80181a0:	6861      	ldr	r1, [r4, #4]
 80181a2:	4638      	mov	r0, r7
 80181a4:	3101      	adds	r1, #1
 80181a6:	f7ff ff79 	bl	801809c <_Balloc>
 80181aa:	4680      	mov	r8, r0
 80181ac:	b928      	cbnz	r0, 80181ba <__multadd+0x5a>
 80181ae:	4602      	mov	r2, r0
 80181b0:	4b0c      	ldr	r3, [pc, #48]	; (80181e4 <__multadd+0x84>)
 80181b2:	480d      	ldr	r0, [pc, #52]	; (80181e8 <__multadd+0x88>)
 80181b4:	21ba      	movs	r1, #186	; 0xba
 80181b6:	f001 fcff 	bl	8019bb8 <__assert_func>
 80181ba:	6922      	ldr	r2, [r4, #16]
 80181bc:	3202      	adds	r2, #2
 80181be:	f104 010c 	add.w	r1, r4, #12
 80181c2:	0092      	lsls	r2, r2, #2
 80181c4:	300c      	adds	r0, #12
 80181c6:	f7fe ffd8 	bl	801717a <memcpy>
 80181ca:	4621      	mov	r1, r4
 80181cc:	4638      	mov	r0, r7
 80181ce:	f7ff ffa5 	bl	801811c <_Bfree>
 80181d2:	4644      	mov	r4, r8
 80181d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80181d8:	3501      	adds	r5, #1
 80181da:	615e      	str	r6, [r3, #20]
 80181dc:	6125      	str	r5, [r4, #16]
 80181de:	4620      	mov	r0, r4
 80181e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181e4:	0801d6c5 	.word	0x0801d6c5
 80181e8:	0801d6d6 	.word	0x0801d6d6

080181ec <__s2b>:
 80181ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181f0:	460c      	mov	r4, r1
 80181f2:	4615      	mov	r5, r2
 80181f4:	461f      	mov	r7, r3
 80181f6:	2209      	movs	r2, #9
 80181f8:	3308      	adds	r3, #8
 80181fa:	4606      	mov	r6, r0
 80181fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8018200:	2100      	movs	r1, #0
 8018202:	2201      	movs	r2, #1
 8018204:	429a      	cmp	r2, r3
 8018206:	db09      	blt.n	801821c <__s2b+0x30>
 8018208:	4630      	mov	r0, r6
 801820a:	f7ff ff47 	bl	801809c <_Balloc>
 801820e:	b940      	cbnz	r0, 8018222 <__s2b+0x36>
 8018210:	4602      	mov	r2, r0
 8018212:	4b19      	ldr	r3, [pc, #100]	; (8018278 <__s2b+0x8c>)
 8018214:	4819      	ldr	r0, [pc, #100]	; (801827c <__s2b+0x90>)
 8018216:	21d3      	movs	r1, #211	; 0xd3
 8018218:	f001 fcce 	bl	8019bb8 <__assert_func>
 801821c:	0052      	lsls	r2, r2, #1
 801821e:	3101      	adds	r1, #1
 8018220:	e7f0      	b.n	8018204 <__s2b+0x18>
 8018222:	9b08      	ldr	r3, [sp, #32]
 8018224:	6143      	str	r3, [r0, #20]
 8018226:	2d09      	cmp	r5, #9
 8018228:	f04f 0301 	mov.w	r3, #1
 801822c:	6103      	str	r3, [r0, #16]
 801822e:	dd16      	ble.n	801825e <__s2b+0x72>
 8018230:	f104 0909 	add.w	r9, r4, #9
 8018234:	46c8      	mov	r8, r9
 8018236:	442c      	add	r4, r5
 8018238:	f818 3b01 	ldrb.w	r3, [r8], #1
 801823c:	4601      	mov	r1, r0
 801823e:	3b30      	subs	r3, #48	; 0x30
 8018240:	220a      	movs	r2, #10
 8018242:	4630      	mov	r0, r6
 8018244:	f7ff ff8c 	bl	8018160 <__multadd>
 8018248:	45a0      	cmp	r8, r4
 801824a:	d1f5      	bne.n	8018238 <__s2b+0x4c>
 801824c:	f1a5 0408 	sub.w	r4, r5, #8
 8018250:	444c      	add	r4, r9
 8018252:	1b2d      	subs	r5, r5, r4
 8018254:	1963      	adds	r3, r4, r5
 8018256:	42bb      	cmp	r3, r7
 8018258:	db04      	blt.n	8018264 <__s2b+0x78>
 801825a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801825e:	340a      	adds	r4, #10
 8018260:	2509      	movs	r5, #9
 8018262:	e7f6      	b.n	8018252 <__s2b+0x66>
 8018264:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018268:	4601      	mov	r1, r0
 801826a:	3b30      	subs	r3, #48	; 0x30
 801826c:	220a      	movs	r2, #10
 801826e:	4630      	mov	r0, r6
 8018270:	f7ff ff76 	bl	8018160 <__multadd>
 8018274:	e7ee      	b.n	8018254 <__s2b+0x68>
 8018276:	bf00      	nop
 8018278:	0801d6c5 	.word	0x0801d6c5
 801827c:	0801d6d6 	.word	0x0801d6d6

08018280 <__hi0bits>:
 8018280:	0c03      	lsrs	r3, r0, #16
 8018282:	041b      	lsls	r3, r3, #16
 8018284:	b9d3      	cbnz	r3, 80182bc <__hi0bits+0x3c>
 8018286:	0400      	lsls	r0, r0, #16
 8018288:	2310      	movs	r3, #16
 801828a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801828e:	bf04      	itt	eq
 8018290:	0200      	lsleq	r0, r0, #8
 8018292:	3308      	addeq	r3, #8
 8018294:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018298:	bf04      	itt	eq
 801829a:	0100      	lsleq	r0, r0, #4
 801829c:	3304      	addeq	r3, #4
 801829e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80182a2:	bf04      	itt	eq
 80182a4:	0080      	lsleq	r0, r0, #2
 80182a6:	3302      	addeq	r3, #2
 80182a8:	2800      	cmp	r0, #0
 80182aa:	db05      	blt.n	80182b8 <__hi0bits+0x38>
 80182ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80182b0:	f103 0301 	add.w	r3, r3, #1
 80182b4:	bf08      	it	eq
 80182b6:	2320      	moveq	r3, #32
 80182b8:	4618      	mov	r0, r3
 80182ba:	4770      	bx	lr
 80182bc:	2300      	movs	r3, #0
 80182be:	e7e4      	b.n	801828a <__hi0bits+0xa>

080182c0 <__lo0bits>:
 80182c0:	6803      	ldr	r3, [r0, #0]
 80182c2:	f013 0207 	ands.w	r2, r3, #7
 80182c6:	d00c      	beq.n	80182e2 <__lo0bits+0x22>
 80182c8:	07d9      	lsls	r1, r3, #31
 80182ca:	d422      	bmi.n	8018312 <__lo0bits+0x52>
 80182cc:	079a      	lsls	r2, r3, #30
 80182ce:	bf49      	itett	mi
 80182d0:	085b      	lsrmi	r3, r3, #1
 80182d2:	089b      	lsrpl	r3, r3, #2
 80182d4:	6003      	strmi	r3, [r0, #0]
 80182d6:	2201      	movmi	r2, #1
 80182d8:	bf5c      	itt	pl
 80182da:	6003      	strpl	r3, [r0, #0]
 80182dc:	2202      	movpl	r2, #2
 80182de:	4610      	mov	r0, r2
 80182e0:	4770      	bx	lr
 80182e2:	b299      	uxth	r1, r3
 80182e4:	b909      	cbnz	r1, 80182ea <__lo0bits+0x2a>
 80182e6:	0c1b      	lsrs	r3, r3, #16
 80182e8:	2210      	movs	r2, #16
 80182ea:	b2d9      	uxtb	r1, r3
 80182ec:	b909      	cbnz	r1, 80182f2 <__lo0bits+0x32>
 80182ee:	3208      	adds	r2, #8
 80182f0:	0a1b      	lsrs	r3, r3, #8
 80182f2:	0719      	lsls	r1, r3, #28
 80182f4:	bf04      	itt	eq
 80182f6:	091b      	lsreq	r3, r3, #4
 80182f8:	3204      	addeq	r2, #4
 80182fa:	0799      	lsls	r1, r3, #30
 80182fc:	bf04      	itt	eq
 80182fe:	089b      	lsreq	r3, r3, #2
 8018300:	3202      	addeq	r2, #2
 8018302:	07d9      	lsls	r1, r3, #31
 8018304:	d403      	bmi.n	801830e <__lo0bits+0x4e>
 8018306:	085b      	lsrs	r3, r3, #1
 8018308:	f102 0201 	add.w	r2, r2, #1
 801830c:	d003      	beq.n	8018316 <__lo0bits+0x56>
 801830e:	6003      	str	r3, [r0, #0]
 8018310:	e7e5      	b.n	80182de <__lo0bits+0x1e>
 8018312:	2200      	movs	r2, #0
 8018314:	e7e3      	b.n	80182de <__lo0bits+0x1e>
 8018316:	2220      	movs	r2, #32
 8018318:	e7e1      	b.n	80182de <__lo0bits+0x1e>
	...

0801831c <__i2b>:
 801831c:	b510      	push	{r4, lr}
 801831e:	460c      	mov	r4, r1
 8018320:	2101      	movs	r1, #1
 8018322:	f7ff febb 	bl	801809c <_Balloc>
 8018326:	4602      	mov	r2, r0
 8018328:	b928      	cbnz	r0, 8018336 <__i2b+0x1a>
 801832a:	4b05      	ldr	r3, [pc, #20]	; (8018340 <__i2b+0x24>)
 801832c:	4805      	ldr	r0, [pc, #20]	; (8018344 <__i2b+0x28>)
 801832e:	f240 1145 	movw	r1, #325	; 0x145
 8018332:	f001 fc41 	bl	8019bb8 <__assert_func>
 8018336:	2301      	movs	r3, #1
 8018338:	6144      	str	r4, [r0, #20]
 801833a:	6103      	str	r3, [r0, #16]
 801833c:	bd10      	pop	{r4, pc}
 801833e:	bf00      	nop
 8018340:	0801d6c5 	.word	0x0801d6c5
 8018344:	0801d6d6 	.word	0x0801d6d6

08018348 <__multiply>:
 8018348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801834c:	4691      	mov	r9, r2
 801834e:	690a      	ldr	r2, [r1, #16]
 8018350:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018354:	429a      	cmp	r2, r3
 8018356:	bfb8      	it	lt
 8018358:	460b      	movlt	r3, r1
 801835a:	460c      	mov	r4, r1
 801835c:	bfbc      	itt	lt
 801835e:	464c      	movlt	r4, r9
 8018360:	4699      	movlt	r9, r3
 8018362:	6927      	ldr	r7, [r4, #16]
 8018364:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018368:	68a3      	ldr	r3, [r4, #8]
 801836a:	6861      	ldr	r1, [r4, #4]
 801836c:	eb07 060a 	add.w	r6, r7, sl
 8018370:	42b3      	cmp	r3, r6
 8018372:	b085      	sub	sp, #20
 8018374:	bfb8      	it	lt
 8018376:	3101      	addlt	r1, #1
 8018378:	f7ff fe90 	bl	801809c <_Balloc>
 801837c:	b930      	cbnz	r0, 801838c <__multiply+0x44>
 801837e:	4602      	mov	r2, r0
 8018380:	4b44      	ldr	r3, [pc, #272]	; (8018494 <__multiply+0x14c>)
 8018382:	4845      	ldr	r0, [pc, #276]	; (8018498 <__multiply+0x150>)
 8018384:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018388:	f001 fc16 	bl	8019bb8 <__assert_func>
 801838c:	f100 0514 	add.w	r5, r0, #20
 8018390:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018394:	462b      	mov	r3, r5
 8018396:	2200      	movs	r2, #0
 8018398:	4543      	cmp	r3, r8
 801839a:	d321      	bcc.n	80183e0 <__multiply+0x98>
 801839c:	f104 0314 	add.w	r3, r4, #20
 80183a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80183a4:	f109 0314 	add.w	r3, r9, #20
 80183a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80183ac:	9202      	str	r2, [sp, #8]
 80183ae:	1b3a      	subs	r2, r7, r4
 80183b0:	3a15      	subs	r2, #21
 80183b2:	f022 0203 	bic.w	r2, r2, #3
 80183b6:	3204      	adds	r2, #4
 80183b8:	f104 0115 	add.w	r1, r4, #21
 80183bc:	428f      	cmp	r7, r1
 80183be:	bf38      	it	cc
 80183c0:	2204      	movcc	r2, #4
 80183c2:	9201      	str	r2, [sp, #4]
 80183c4:	9a02      	ldr	r2, [sp, #8]
 80183c6:	9303      	str	r3, [sp, #12]
 80183c8:	429a      	cmp	r2, r3
 80183ca:	d80c      	bhi.n	80183e6 <__multiply+0x9e>
 80183cc:	2e00      	cmp	r6, #0
 80183ce:	dd03      	ble.n	80183d8 <__multiply+0x90>
 80183d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d05b      	beq.n	8018490 <__multiply+0x148>
 80183d8:	6106      	str	r6, [r0, #16]
 80183da:	b005      	add	sp, #20
 80183dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183e0:	f843 2b04 	str.w	r2, [r3], #4
 80183e4:	e7d8      	b.n	8018398 <__multiply+0x50>
 80183e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80183ea:	f1ba 0f00 	cmp.w	sl, #0
 80183ee:	d024      	beq.n	801843a <__multiply+0xf2>
 80183f0:	f104 0e14 	add.w	lr, r4, #20
 80183f4:	46a9      	mov	r9, r5
 80183f6:	f04f 0c00 	mov.w	ip, #0
 80183fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80183fe:	f8d9 1000 	ldr.w	r1, [r9]
 8018402:	fa1f fb82 	uxth.w	fp, r2
 8018406:	b289      	uxth	r1, r1
 8018408:	fb0a 110b 	mla	r1, sl, fp, r1
 801840c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018410:	f8d9 2000 	ldr.w	r2, [r9]
 8018414:	4461      	add	r1, ip
 8018416:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801841a:	fb0a c20b 	mla	r2, sl, fp, ip
 801841e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018422:	b289      	uxth	r1, r1
 8018424:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018428:	4577      	cmp	r7, lr
 801842a:	f849 1b04 	str.w	r1, [r9], #4
 801842e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018432:	d8e2      	bhi.n	80183fa <__multiply+0xb2>
 8018434:	9a01      	ldr	r2, [sp, #4]
 8018436:	f845 c002 	str.w	ip, [r5, r2]
 801843a:	9a03      	ldr	r2, [sp, #12]
 801843c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018440:	3304      	adds	r3, #4
 8018442:	f1b9 0f00 	cmp.w	r9, #0
 8018446:	d021      	beq.n	801848c <__multiply+0x144>
 8018448:	6829      	ldr	r1, [r5, #0]
 801844a:	f104 0c14 	add.w	ip, r4, #20
 801844e:	46ae      	mov	lr, r5
 8018450:	f04f 0a00 	mov.w	sl, #0
 8018454:	f8bc b000 	ldrh.w	fp, [ip]
 8018458:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801845c:	fb09 220b 	mla	r2, r9, fp, r2
 8018460:	4452      	add	r2, sl
 8018462:	b289      	uxth	r1, r1
 8018464:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018468:	f84e 1b04 	str.w	r1, [lr], #4
 801846c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018470:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018474:	f8be 1000 	ldrh.w	r1, [lr]
 8018478:	fb09 110a 	mla	r1, r9, sl, r1
 801847c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018480:	4567      	cmp	r7, ip
 8018482:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018486:	d8e5      	bhi.n	8018454 <__multiply+0x10c>
 8018488:	9a01      	ldr	r2, [sp, #4]
 801848a:	50a9      	str	r1, [r5, r2]
 801848c:	3504      	adds	r5, #4
 801848e:	e799      	b.n	80183c4 <__multiply+0x7c>
 8018490:	3e01      	subs	r6, #1
 8018492:	e79b      	b.n	80183cc <__multiply+0x84>
 8018494:	0801d6c5 	.word	0x0801d6c5
 8018498:	0801d6d6 	.word	0x0801d6d6

0801849c <__pow5mult>:
 801849c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184a0:	4615      	mov	r5, r2
 80184a2:	f012 0203 	ands.w	r2, r2, #3
 80184a6:	4606      	mov	r6, r0
 80184a8:	460f      	mov	r7, r1
 80184aa:	d007      	beq.n	80184bc <__pow5mult+0x20>
 80184ac:	4c25      	ldr	r4, [pc, #148]	; (8018544 <__pow5mult+0xa8>)
 80184ae:	3a01      	subs	r2, #1
 80184b0:	2300      	movs	r3, #0
 80184b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80184b6:	f7ff fe53 	bl	8018160 <__multadd>
 80184ba:	4607      	mov	r7, r0
 80184bc:	10ad      	asrs	r5, r5, #2
 80184be:	d03d      	beq.n	801853c <__pow5mult+0xa0>
 80184c0:	69f4      	ldr	r4, [r6, #28]
 80184c2:	b97c      	cbnz	r4, 80184e4 <__pow5mult+0x48>
 80184c4:	2010      	movs	r0, #16
 80184c6:	f7ff fd35 	bl	8017f34 <malloc>
 80184ca:	4602      	mov	r2, r0
 80184cc:	61f0      	str	r0, [r6, #28]
 80184ce:	b928      	cbnz	r0, 80184dc <__pow5mult+0x40>
 80184d0:	4b1d      	ldr	r3, [pc, #116]	; (8018548 <__pow5mult+0xac>)
 80184d2:	481e      	ldr	r0, [pc, #120]	; (801854c <__pow5mult+0xb0>)
 80184d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80184d8:	f001 fb6e 	bl	8019bb8 <__assert_func>
 80184dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80184e0:	6004      	str	r4, [r0, #0]
 80184e2:	60c4      	str	r4, [r0, #12]
 80184e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80184e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80184ec:	b94c      	cbnz	r4, 8018502 <__pow5mult+0x66>
 80184ee:	f240 2171 	movw	r1, #625	; 0x271
 80184f2:	4630      	mov	r0, r6
 80184f4:	f7ff ff12 	bl	801831c <__i2b>
 80184f8:	2300      	movs	r3, #0
 80184fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80184fe:	4604      	mov	r4, r0
 8018500:	6003      	str	r3, [r0, #0]
 8018502:	f04f 0900 	mov.w	r9, #0
 8018506:	07eb      	lsls	r3, r5, #31
 8018508:	d50a      	bpl.n	8018520 <__pow5mult+0x84>
 801850a:	4639      	mov	r1, r7
 801850c:	4622      	mov	r2, r4
 801850e:	4630      	mov	r0, r6
 8018510:	f7ff ff1a 	bl	8018348 <__multiply>
 8018514:	4639      	mov	r1, r7
 8018516:	4680      	mov	r8, r0
 8018518:	4630      	mov	r0, r6
 801851a:	f7ff fdff 	bl	801811c <_Bfree>
 801851e:	4647      	mov	r7, r8
 8018520:	106d      	asrs	r5, r5, #1
 8018522:	d00b      	beq.n	801853c <__pow5mult+0xa0>
 8018524:	6820      	ldr	r0, [r4, #0]
 8018526:	b938      	cbnz	r0, 8018538 <__pow5mult+0x9c>
 8018528:	4622      	mov	r2, r4
 801852a:	4621      	mov	r1, r4
 801852c:	4630      	mov	r0, r6
 801852e:	f7ff ff0b 	bl	8018348 <__multiply>
 8018532:	6020      	str	r0, [r4, #0]
 8018534:	f8c0 9000 	str.w	r9, [r0]
 8018538:	4604      	mov	r4, r0
 801853a:	e7e4      	b.n	8018506 <__pow5mult+0x6a>
 801853c:	4638      	mov	r0, r7
 801853e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018542:	bf00      	nop
 8018544:	0801d820 	.word	0x0801d820
 8018548:	0801d656 	.word	0x0801d656
 801854c:	0801d6d6 	.word	0x0801d6d6

08018550 <__lshift>:
 8018550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018554:	460c      	mov	r4, r1
 8018556:	6849      	ldr	r1, [r1, #4]
 8018558:	6923      	ldr	r3, [r4, #16]
 801855a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801855e:	68a3      	ldr	r3, [r4, #8]
 8018560:	4607      	mov	r7, r0
 8018562:	4691      	mov	r9, r2
 8018564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018568:	f108 0601 	add.w	r6, r8, #1
 801856c:	42b3      	cmp	r3, r6
 801856e:	db0b      	blt.n	8018588 <__lshift+0x38>
 8018570:	4638      	mov	r0, r7
 8018572:	f7ff fd93 	bl	801809c <_Balloc>
 8018576:	4605      	mov	r5, r0
 8018578:	b948      	cbnz	r0, 801858e <__lshift+0x3e>
 801857a:	4602      	mov	r2, r0
 801857c:	4b28      	ldr	r3, [pc, #160]	; (8018620 <__lshift+0xd0>)
 801857e:	4829      	ldr	r0, [pc, #164]	; (8018624 <__lshift+0xd4>)
 8018580:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018584:	f001 fb18 	bl	8019bb8 <__assert_func>
 8018588:	3101      	adds	r1, #1
 801858a:	005b      	lsls	r3, r3, #1
 801858c:	e7ee      	b.n	801856c <__lshift+0x1c>
 801858e:	2300      	movs	r3, #0
 8018590:	f100 0114 	add.w	r1, r0, #20
 8018594:	f100 0210 	add.w	r2, r0, #16
 8018598:	4618      	mov	r0, r3
 801859a:	4553      	cmp	r3, sl
 801859c:	db33      	blt.n	8018606 <__lshift+0xb6>
 801859e:	6920      	ldr	r0, [r4, #16]
 80185a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80185a4:	f104 0314 	add.w	r3, r4, #20
 80185a8:	f019 091f 	ands.w	r9, r9, #31
 80185ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80185b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80185b4:	d02b      	beq.n	801860e <__lshift+0xbe>
 80185b6:	f1c9 0e20 	rsb	lr, r9, #32
 80185ba:	468a      	mov	sl, r1
 80185bc:	2200      	movs	r2, #0
 80185be:	6818      	ldr	r0, [r3, #0]
 80185c0:	fa00 f009 	lsl.w	r0, r0, r9
 80185c4:	4310      	orrs	r0, r2
 80185c6:	f84a 0b04 	str.w	r0, [sl], #4
 80185ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80185ce:	459c      	cmp	ip, r3
 80185d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80185d4:	d8f3      	bhi.n	80185be <__lshift+0x6e>
 80185d6:	ebac 0304 	sub.w	r3, ip, r4
 80185da:	3b15      	subs	r3, #21
 80185dc:	f023 0303 	bic.w	r3, r3, #3
 80185e0:	3304      	adds	r3, #4
 80185e2:	f104 0015 	add.w	r0, r4, #21
 80185e6:	4584      	cmp	ip, r0
 80185e8:	bf38      	it	cc
 80185ea:	2304      	movcc	r3, #4
 80185ec:	50ca      	str	r2, [r1, r3]
 80185ee:	b10a      	cbz	r2, 80185f4 <__lshift+0xa4>
 80185f0:	f108 0602 	add.w	r6, r8, #2
 80185f4:	3e01      	subs	r6, #1
 80185f6:	4638      	mov	r0, r7
 80185f8:	612e      	str	r6, [r5, #16]
 80185fa:	4621      	mov	r1, r4
 80185fc:	f7ff fd8e 	bl	801811c <_Bfree>
 8018600:	4628      	mov	r0, r5
 8018602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018606:	f842 0f04 	str.w	r0, [r2, #4]!
 801860a:	3301      	adds	r3, #1
 801860c:	e7c5      	b.n	801859a <__lshift+0x4a>
 801860e:	3904      	subs	r1, #4
 8018610:	f853 2b04 	ldr.w	r2, [r3], #4
 8018614:	f841 2f04 	str.w	r2, [r1, #4]!
 8018618:	459c      	cmp	ip, r3
 801861a:	d8f9      	bhi.n	8018610 <__lshift+0xc0>
 801861c:	e7ea      	b.n	80185f4 <__lshift+0xa4>
 801861e:	bf00      	nop
 8018620:	0801d6c5 	.word	0x0801d6c5
 8018624:	0801d6d6 	.word	0x0801d6d6

08018628 <__mcmp>:
 8018628:	b530      	push	{r4, r5, lr}
 801862a:	6902      	ldr	r2, [r0, #16]
 801862c:	690c      	ldr	r4, [r1, #16]
 801862e:	1b12      	subs	r2, r2, r4
 8018630:	d10e      	bne.n	8018650 <__mcmp+0x28>
 8018632:	f100 0314 	add.w	r3, r0, #20
 8018636:	3114      	adds	r1, #20
 8018638:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801863c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018640:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018644:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018648:	42a5      	cmp	r5, r4
 801864a:	d003      	beq.n	8018654 <__mcmp+0x2c>
 801864c:	d305      	bcc.n	801865a <__mcmp+0x32>
 801864e:	2201      	movs	r2, #1
 8018650:	4610      	mov	r0, r2
 8018652:	bd30      	pop	{r4, r5, pc}
 8018654:	4283      	cmp	r3, r0
 8018656:	d3f3      	bcc.n	8018640 <__mcmp+0x18>
 8018658:	e7fa      	b.n	8018650 <__mcmp+0x28>
 801865a:	f04f 32ff 	mov.w	r2, #4294967295
 801865e:	e7f7      	b.n	8018650 <__mcmp+0x28>

08018660 <__mdiff>:
 8018660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018664:	460c      	mov	r4, r1
 8018666:	4606      	mov	r6, r0
 8018668:	4611      	mov	r1, r2
 801866a:	4620      	mov	r0, r4
 801866c:	4690      	mov	r8, r2
 801866e:	f7ff ffdb 	bl	8018628 <__mcmp>
 8018672:	1e05      	subs	r5, r0, #0
 8018674:	d110      	bne.n	8018698 <__mdiff+0x38>
 8018676:	4629      	mov	r1, r5
 8018678:	4630      	mov	r0, r6
 801867a:	f7ff fd0f 	bl	801809c <_Balloc>
 801867e:	b930      	cbnz	r0, 801868e <__mdiff+0x2e>
 8018680:	4b3a      	ldr	r3, [pc, #232]	; (801876c <__mdiff+0x10c>)
 8018682:	4602      	mov	r2, r0
 8018684:	f240 2137 	movw	r1, #567	; 0x237
 8018688:	4839      	ldr	r0, [pc, #228]	; (8018770 <__mdiff+0x110>)
 801868a:	f001 fa95 	bl	8019bb8 <__assert_func>
 801868e:	2301      	movs	r3, #1
 8018690:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018698:	bfa4      	itt	ge
 801869a:	4643      	movge	r3, r8
 801869c:	46a0      	movge	r8, r4
 801869e:	4630      	mov	r0, r6
 80186a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80186a4:	bfa6      	itte	ge
 80186a6:	461c      	movge	r4, r3
 80186a8:	2500      	movge	r5, #0
 80186aa:	2501      	movlt	r5, #1
 80186ac:	f7ff fcf6 	bl	801809c <_Balloc>
 80186b0:	b920      	cbnz	r0, 80186bc <__mdiff+0x5c>
 80186b2:	4b2e      	ldr	r3, [pc, #184]	; (801876c <__mdiff+0x10c>)
 80186b4:	4602      	mov	r2, r0
 80186b6:	f240 2145 	movw	r1, #581	; 0x245
 80186ba:	e7e5      	b.n	8018688 <__mdiff+0x28>
 80186bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80186c0:	6926      	ldr	r6, [r4, #16]
 80186c2:	60c5      	str	r5, [r0, #12]
 80186c4:	f104 0914 	add.w	r9, r4, #20
 80186c8:	f108 0514 	add.w	r5, r8, #20
 80186cc:	f100 0e14 	add.w	lr, r0, #20
 80186d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80186d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80186d8:	f108 0210 	add.w	r2, r8, #16
 80186dc:	46f2      	mov	sl, lr
 80186de:	2100      	movs	r1, #0
 80186e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80186e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80186e8:	fa11 f88b 	uxtah	r8, r1, fp
 80186ec:	b299      	uxth	r1, r3
 80186ee:	0c1b      	lsrs	r3, r3, #16
 80186f0:	eba8 0801 	sub.w	r8, r8, r1
 80186f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80186f8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80186fc:	fa1f f888 	uxth.w	r8, r8
 8018700:	1419      	asrs	r1, r3, #16
 8018702:	454e      	cmp	r6, r9
 8018704:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018708:	f84a 3b04 	str.w	r3, [sl], #4
 801870c:	d8e8      	bhi.n	80186e0 <__mdiff+0x80>
 801870e:	1b33      	subs	r3, r6, r4
 8018710:	3b15      	subs	r3, #21
 8018712:	f023 0303 	bic.w	r3, r3, #3
 8018716:	3304      	adds	r3, #4
 8018718:	3415      	adds	r4, #21
 801871a:	42a6      	cmp	r6, r4
 801871c:	bf38      	it	cc
 801871e:	2304      	movcc	r3, #4
 8018720:	441d      	add	r5, r3
 8018722:	4473      	add	r3, lr
 8018724:	469e      	mov	lr, r3
 8018726:	462e      	mov	r6, r5
 8018728:	4566      	cmp	r6, ip
 801872a:	d30e      	bcc.n	801874a <__mdiff+0xea>
 801872c:	f10c 0203 	add.w	r2, ip, #3
 8018730:	1b52      	subs	r2, r2, r5
 8018732:	f022 0203 	bic.w	r2, r2, #3
 8018736:	3d03      	subs	r5, #3
 8018738:	45ac      	cmp	ip, r5
 801873a:	bf38      	it	cc
 801873c:	2200      	movcc	r2, #0
 801873e:	4413      	add	r3, r2
 8018740:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018744:	b17a      	cbz	r2, 8018766 <__mdiff+0x106>
 8018746:	6107      	str	r7, [r0, #16]
 8018748:	e7a4      	b.n	8018694 <__mdiff+0x34>
 801874a:	f856 8b04 	ldr.w	r8, [r6], #4
 801874e:	fa11 f288 	uxtah	r2, r1, r8
 8018752:	1414      	asrs	r4, r2, #16
 8018754:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018758:	b292      	uxth	r2, r2
 801875a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801875e:	f84e 2b04 	str.w	r2, [lr], #4
 8018762:	1421      	asrs	r1, r4, #16
 8018764:	e7e0      	b.n	8018728 <__mdiff+0xc8>
 8018766:	3f01      	subs	r7, #1
 8018768:	e7ea      	b.n	8018740 <__mdiff+0xe0>
 801876a:	bf00      	nop
 801876c:	0801d6c5 	.word	0x0801d6c5
 8018770:	0801d6d6 	.word	0x0801d6d6

08018774 <__ulp>:
 8018774:	b082      	sub	sp, #8
 8018776:	ed8d 0b00 	vstr	d0, [sp]
 801877a:	9a01      	ldr	r2, [sp, #4]
 801877c:	4b0f      	ldr	r3, [pc, #60]	; (80187bc <__ulp+0x48>)
 801877e:	4013      	ands	r3, r2
 8018780:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8018784:	2b00      	cmp	r3, #0
 8018786:	dc08      	bgt.n	801879a <__ulp+0x26>
 8018788:	425b      	negs	r3, r3
 801878a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801878e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018792:	da04      	bge.n	801879e <__ulp+0x2a>
 8018794:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018798:	4113      	asrs	r3, r2
 801879a:	2200      	movs	r2, #0
 801879c:	e008      	b.n	80187b0 <__ulp+0x3c>
 801879e:	f1a2 0314 	sub.w	r3, r2, #20
 80187a2:	2b1e      	cmp	r3, #30
 80187a4:	bfda      	itte	le
 80187a6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80187aa:	40da      	lsrle	r2, r3
 80187ac:	2201      	movgt	r2, #1
 80187ae:	2300      	movs	r3, #0
 80187b0:	4619      	mov	r1, r3
 80187b2:	4610      	mov	r0, r2
 80187b4:	ec41 0b10 	vmov	d0, r0, r1
 80187b8:	b002      	add	sp, #8
 80187ba:	4770      	bx	lr
 80187bc:	7ff00000 	.word	0x7ff00000

080187c0 <__b2d>:
 80187c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187c4:	6906      	ldr	r6, [r0, #16]
 80187c6:	f100 0814 	add.w	r8, r0, #20
 80187ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80187ce:	1f37      	subs	r7, r6, #4
 80187d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80187d4:	4610      	mov	r0, r2
 80187d6:	f7ff fd53 	bl	8018280 <__hi0bits>
 80187da:	f1c0 0320 	rsb	r3, r0, #32
 80187de:	280a      	cmp	r0, #10
 80187e0:	600b      	str	r3, [r1, #0]
 80187e2:	491b      	ldr	r1, [pc, #108]	; (8018850 <__b2d+0x90>)
 80187e4:	dc15      	bgt.n	8018812 <__b2d+0x52>
 80187e6:	f1c0 0c0b 	rsb	ip, r0, #11
 80187ea:	fa22 f30c 	lsr.w	r3, r2, ip
 80187ee:	45b8      	cmp	r8, r7
 80187f0:	ea43 0501 	orr.w	r5, r3, r1
 80187f4:	bf34      	ite	cc
 80187f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80187fa:	2300      	movcs	r3, #0
 80187fc:	3015      	adds	r0, #21
 80187fe:	fa02 f000 	lsl.w	r0, r2, r0
 8018802:	fa23 f30c 	lsr.w	r3, r3, ip
 8018806:	4303      	orrs	r3, r0
 8018808:	461c      	mov	r4, r3
 801880a:	ec45 4b10 	vmov	d0, r4, r5
 801880e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018812:	45b8      	cmp	r8, r7
 8018814:	bf3a      	itte	cc
 8018816:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801881a:	f1a6 0708 	subcc.w	r7, r6, #8
 801881e:	2300      	movcs	r3, #0
 8018820:	380b      	subs	r0, #11
 8018822:	d012      	beq.n	801884a <__b2d+0x8a>
 8018824:	f1c0 0120 	rsb	r1, r0, #32
 8018828:	fa23 f401 	lsr.w	r4, r3, r1
 801882c:	4082      	lsls	r2, r0
 801882e:	4322      	orrs	r2, r4
 8018830:	4547      	cmp	r7, r8
 8018832:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8018836:	bf8c      	ite	hi
 8018838:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801883c:	2200      	movls	r2, #0
 801883e:	4083      	lsls	r3, r0
 8018840:	40ca      	lsrs	r2, r1
 8018842:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018846:	4313      	orrs	r3, r2
 8018848:	e7de      	b.n	8018808 <__b2d+0x48>
 801884a:	ea42 0501 	orr.w	r5, r2, r1
 801884e:	e7db      	b.n	8018808 <__b2d+0x48>
 8018850:	3ff00000 	.word	0x3ff00000

08018854 <__d2b>:
 8018854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018858:	460f      	mov	r7, r1
 801885a:	2101      	movs	r1, #1
 801885c:	ec59 8b10 	vmov	r8, r9, d0
 8018860:	4616      	mov	r6, r2
 8018862:	f7ff fc1b 	bl	801809c <_Balloc>
 8018866:	4604      	mov	r4, r0
 8018868:	b930      	cbnz	r0, 8018878 <__d2b+0x24>
 801886a:	4602      	mov	r2, r0
 801886c:	4b24      	ldr	r3, [pc, #144]	; (8018900 <__d2b+0xac>)
 801886e:	4825      	ldr	r0, [pc, #148]	; (8018904 <__d2b+0xb0>)
 8018870:	f240 310f 	movw	r1, #783	; 0x30f
 8018874:	f001 f9a0 	bl	8019bb8 <__assert_func>
 8018878:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801887c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018880:	bb2d      	cbnz	r5, 80188ce <__d2b+0x7a>
 8018882:	9301      	str	r3, [sp, #4]
 8018884:	f1b8 0300 	subs.w	r3, r8, #0
 8018888:	d026      	beq.n	80188d8 <__d2b+0x84>
 801888a:	4668      	mov	r0, sp
 801888c:	9300      	str	r3, [sp, #0]
 801888e:	f7ff fd17 	bl	80182c0 <__lo0bits>
 8018892:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018896:	b1e8      	cbz	r0, 80188d4 <__d2b+0x80>
 8018898:	f1c0 0320 	rsb	r3, r0, #32
 801889c:	fa02 f303 	lsl.w	r3, r2, r3
 80188a0:	430b      	orrs	r3, r1
 80188a2:	40c2      	lsrs	r2, r0
 80188a4:	6163      	str	r3, [r4, #20]
 80188a6:	9201      	str	r2, [sp, #4]
 80188a8:	9b01      	ldr	r3, [sp, #4]
 80188aa:	61a3      	str	r3, [r4, #24]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	bf14      	ite	ne
 80188b0:	2202      	movne	r2, #2
 80188b2:	2201      	moveq	r2, #1
 80188b4:	6122      	str	r2, [r4, #16]
 80188b6:	b1bd      	cbz	r5, 80188e8 <__d2b+0x94>
 80188b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80188bc:	4405      	add	r5, r0
 80188be:	603d      	str	r5, [r7, #0]
 80188c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80188c4:	6030      	str	r0, [r6, #0]
 80188c6:	4620      	mov	r0, r4
 80188c8:	b003      	add	sp, #12
 80188ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80188d2:	e7d6      	b.n	8018882 <__d2b+0x2e>
 80188d4:	6161      	str	r1, [r4, #20]
 80188d6:	e7e7      	b.n	80188a8 <__d2b+0x54>
 80188d8:	a801      	add	r0, sp, #4
 80188da:	f7ff fcf1 	bl	80182c0 <__lo0bits>
 80188de:	9b01      	ldr	r3, [sp, #4]
 80188e0:	6163      	str	r3, [r4, #20]
 80188e2:	3020      	adds	r0, #32
 80188e4:	2201      	movs	r2, #1
 80188e6:	e7e5      	b.n	80188b4 <__d2b+0x60>
 80188e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80188ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80188f0:	6038      	str	r0, [r7, #0]
 80188f2:	6918      	ldr	r0, [r3, #16]
 80188f4:	f7ff fcc4 	bl	8018280 <__hi0bits>
 80188f8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80188fc:	e7e2      	b.n	80188c4 <__d2b+0x70>
 80188fe:	bf00      	nop
 8018900:	0801d6c5 	.word	0x0801d6c5
 8018904:	0801d6d6 	.word	0x0801d6d6

08018908 <__ratio>:
 8018908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801890c:	4688      	mov	r8, r1
 801890e:	4669      	mov	r1, sp
 8018910:	4681      	mov	r9, r0
 8018912:	f7ff ff55 	bl	80187c0 <__b2d>
 8018916:	a901      	add	r1, sp, #4
 8018918:	4640      	mov	r0, r8
 801891a:	ec55 4b10 	vmov	r4, r5, d0
 801891e:	f7ff ff4f 	bl	80187c0 <__b2d>
 8018922:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018926:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801892a:	eba3 0c02 	sub.w	ip, r3, r2
 801892e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018932:	1a9b      	subs	r3, r3, r2
 8018934:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018938:	ec51 0b10 	vmov	r0, r1, d0
 801893c:	2b00      	cmp	r3, #0
 801893e:	bfd6      	itet	le
 8018940:	460a      	movle	r2, r1
 8018942:	462a      	movgt	r2, r5
 8018944:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018948:	468b      	mov	fp, r1
 801894a:	462f      	mov	r7, r5
 801894c:	bfd4      	ite	le
 801894e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018952:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018956:	4620      	mov	r0, r4
 8018958:	ee10 2a10 	vmov	r2, s0
 801895c:	465b      	mov	r3, fp
 801895e:	4639      	mov	r1, r7
 8018960:	f7e7 ff9c 	bl	800089c <__aeabi_ddiv>
 8018964:	ec41 0b10 	vmov	d0, r0, r1
 8018968:	b003      	add	sp, #12
 801896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801896e <__copybits>:
 801896e:	3901      	subs	r1, #1
 8018970:	b570      	push	{r4, r5, r6, lr}
 8018972:	1149      	asrs	r1, r1, #5
 8018974:	6914      	ldr	r4, [r2, #16]
 8018976:	3101      	adds	r1, #1
 8018978:	f102 0314 	add.w	r3, r2, #20
 801897c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018980:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018984:	1f05      	subs	r5, r0, #4
 8018986:	42a3      	cmp	r3, r4
 8018988:	d30c      	bcc.n	80189a4 <__copybits+0x36>
 801898a:	1aa3      	subs	r3, r4, r2
 801898c:	3b11      	subs	r3, #17
 801898e:	f023 0303 	bic.w	r3, r3, #3
 8018992:	3211      	adds	r2, #17
 8018994:	42a2      	cmp	r2, r4
 8018996:	bf88      	it	hi
 8018998:	2300      	movhi	r3, #0
 801899a:	4418      	add	r0, r3
 801899c:	2300      	movs	r3, #0
 801899e:	4288      	cmp	r0, r1
 80189a0:	d305      	bcc.n	80189ae <__copybits+0x40>
 80189a2:	bd70      	pop	{r4, r5, r6, pc}
 80189a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80189a8:	f845 6f04 	str.w	r6, [r5, #4]!
 80189ac:	e7eb      	b.n	8018986 <__copybits+0x18>
 80189ae:	f840 3b04 	str.w	r3, [r0], #4
 80189b2:	e7f4      	b.n	801899e <__copybits+0x30>

080189b4 <__any_on>:
 80189b4:	f100 0214 	add.w	r2, r0, #20
 80189b8:	6900      	ldr	r0, [r0, #16]
 80189ba:	114b      	asrs	r3, r1, #5
 80189bc:	4298      	cmp	r0, r3
 80189be:	b510      	push	{r4, lr}
 80189c0:	db11      	blt.n	80189e6 <__any_on+0x32>
 80189c2:	dd0a      	ble.n	80189da <__any_on+0x26>
 80189c4:	f011 011f 	ands.w	r1, r1, #31
 80189c8:	d007      	beq.n	80189da <__any_on+0x26>
 80189ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80189ce:	fa24 f001 	lsr.w	r0, r4, r1
 80189d2:	fa00 f101 	lsl.w	r1, r0, r1
 80189d6:	428c      	cmp	r4, r1
 80189d8:	d10b      	bne.n	80189f2 <__any_on+0x3e>
 80189da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80189de:	4293      	cmp	r3, r2
 80189e0:	d803      	bhi.n	80189ea <__any_on+0x36>
 80189e2:	2000      	movs	r0, #0
 80189e4:	bd10      	pop	{r4, pc}
 80189e6:	4603      	mov	r3, r0
 80189e8:	e7f7      	b.n	80189da <__any_on+0x26>
 80189ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80189ee:	2900      	cmp	r1, #0
 80189f0:	d0f5      	beq.n	80189de <__any_on+0x2a>
 80189f2:	2001      	movs	r0, #1
 80189f4:	e7f6      	b.n	80189e4 <__any_on+0x30>

080189f6 <sulp>:
 80189f6:	b570      	push	{r4, r5, r6, lr}
 80189f8:	4604      	mov	r4, r0
 80189fa:	460d      	mov	r5, r1
 80189fc:	ec45 4b10 	vmov	d0, r4, r5
 8018a00:	4616      	mov	r6, r2
 8018a02:	f7ff feb7 	bl	8018774 <__ulp>
 8018a06:	ec51 0b10 	vmov	r0, r1, d0
 8018a0a:	b17e      	cbz	r6, 8018a2c <sulp+0x36>
 8018a0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018a10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	dd09      	ble.n	8018a2c <sulp+0x36>
 8018a18:	051b      	lsls	r3, r3, #20
 8018a1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8018a1e:	2400      	movs	r4, #0
 8018a20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018a24:	4622      	mov	r2, r4
 8018a26:	462b      	mov	r3, r5
 8018a28:	f7e7 fe0e 	bl	8000648 <__aeabi_dmul>
 8018a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018a30 <_strtod_l>:
 8018a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a34:	ed2d 8b02 	vpush	{d8}
 8018a38:	b09b      	sub	sp, #108	; 0x6c
 8018a3a:	4604      	mov	r4, r0
 8018a3c:	9213      	str	r2, [sp, #76]	; 0x4c
 8018a3e:	2200      	movs	r2, #0
 8018a40:	9216      	str	r2, [sp, #88]	; 0x58
 8018a42:	460d      	mov	r5, r1
 8018a44:	f04f 0800 	mov.w	r8, #0
 8018a48:	f04f 0900 	mov.w	r9, #0
 8018a4c:	460a      	mov	r2, r1
 8018a4e:	9215      	str	r2, [sp, #84]	; 0x54
 8018a50:	7811      	ldrb	r1, [r2, #0]
 8018a52:	292b      	cmp	r1, #43	; 0x2b
 8018a54:	d04c      	beq.n	8018af0 <_strtod_l+0xc0>
 8018a56:	d83a      	bhi.n	8018ace <_strtod_l+0x9e>
 8018a58:	290d      	cmp	r1, #13
 8018a5a:	d834      	bhi.n	8018ac6 <_strtod_l+0x96>
 8018a5c:	2908      	cmp	r1, #8
 8018a5e:	d834      	bhi.n	8018aca <_strtod_l+0x9a>
 8018a60:	2900      	cmp	r1, #0
 8018a62:	d03d      	beq.n	8018ae0 <_strtod_l+0xb0>
 8018a64:	2200      	movs	r2, #0
 8018a66:	920a      	str	r2, [sp, #40]	; 0x28
 8018a68:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8018a6a:	7832      	ldrb	r2, [r6, #0]
 8018a6c:	2a30      	cmp	r2, #48	; 0x30
 8018a6e:	f040 80b4 	bne.w	8018bda <_strtod_l+0x1aa>
 8018a72:	7872      	ldrb	r2, [r6, #1]
 8018a74:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8018a78:	2a58      	cmp	r2, #88	; 0x58
 8018a7a:	d170      	bne.n	8018b5e <_strtod_l+0x12e>
 8018a7c:	9302      	str	r3, [sp, #8]
 8018a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a80:	9301      	str	r3, [sp, #4]
 8018a82:	ab16      	add	r3, sp, #88	; 0x58
 8018a84:	9300      	str	r3, [sp, #0]
 8018a86:	4a8e      	ldr	r2, [pc, #568]	; (8018cc0 <_strtod_l+0x290>)
 8018a88:	ab17      	add	r3, sp, #92	; 0x5c
 8018a8a:	a915      	add	r1, sp, #84	; 0x54
 8018a8c:	4620      	mov	r0, r4
 8018a8e:	f001 f92f 	bl	8019cf0 <__gethex>
 8018a92:	f010 070f 	ands.w	r7, r0, #15
 8018a96:	4605      	mov	r5, r0
 8018a98:	d005      	beq.n	8018aa6 <_strtod_l+0x76>
 8018a9a:	2f06      	cmp	r7, #6
 8018a9c:	d12a      	bne.n	8018af4 <_strtod_l+0xc4>
 8018a9e:	3601      	adds	r6, #1
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	9615      	str	r6, [sp, #84]	; 0x54
 8018aa4:	930a      	str	r3, [sp, #40]	; 0x28
 8018aa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	f040 857f 	bne.w	80195ac <_strtod_l+0xb7c>
 8018aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ab0:	b1db      	cbz	r3, 8018aea <_strtod_l+0xba>
 8018ab2:	4642      	mov	r2, r8
 8018ab4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018ab8:	ec43 2b10 	vmov	d0, r2, r3
 8018abc:	b01b      	add	sp, #108	; 0x6c
 8018abe:	ecbd 8b02 	vpop	{d8}
 8018ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ac6:	2920      	cmp	r1, #32
 8018ac8:	d1cc      	bne.n	8018a64 <_strtod_l+0x34>
 8018aca:	3201      	adds	r2, #1
 8018acc:	e7bf      	b.n	8018a4e <_strtod_l+0x1e>
 8018ace:	292d      	cmp	r1, #45	; 0x2d
 8018ad0:	d1c8      	bne.n	8018a64 <_strtod_l+0x34>
 8018ad2:	2101      	movs	r1, #1
 8018ad4:	910a      	str	r1, [sp, #40]	; 0x28
 8018ad6:	1c51      	adds	r1, r2, #1
 8018ad8:	9115      	str	r1, [sp, #84]	; 0x54
 8018ada:	7852      	ldrb	r2, [r2, #1]
 8018adc:	2a00      	cmp	r2, #0
 8018ade:	d1c3      	bne.n	8018a68 <_strtod_l+0x38>
 8018ae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018ae2:	9515      	str	r5, [sp, #84]	; 0x54
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	f040 855f 	bne.w	80195a8 <_strtod_l+0xb78>
 8018aea:	4642      	mov	r2, r8
 8018aec:	464b      	mov	r3, r9
 8018aee:	e7e3      	b.n	8018ab8 <_strtod_l+0x88>
 8018af0:	2100      	movs	r1, #0
 8018af2:	e7ef      	b.n	8018ad4 <_strtod_l+0xa4>
 8018af4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018af6:	b13a      	cbz	r2, 8018b08 <_strtod_l+0xd8>
 8018af8:	2135      	movs	r1, #53	; 0x35
 8018afa:	a818      	add	r0, sp, #96	; 0x60
 8018afc:	f7ff ff37 	bl	801896e <__copybits>
 8018b00:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018b02:	4620      	mov	r0, r4
 8018b04:	f7ff fb0a 	bl	801811c <_Bfree>
 8018b08:	3f01      	subs	r7, #1
 8018b0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018b0c:	2f04      	cmp	r7, #4
 8018b0e:	d806      	bhi.n	8018b1e <_strtod_l+0xee>
 8018b10:	e8df f007 	tbb	[pc, r7]
 8018b14:	201d0314 	.word	0x201d0314
 8018b18:	14          	.byte	0x14
 8018b19:	00          	.byte	0x00
 8018b1a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8018b1e:	05e9      	lsls	r1, r5, #23
 8018b20:	bf48      	it	mi
 8018b22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8018b26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018b2a:	0d1b      	lsrs	r3, r3, #20
 8018b2c:	051b      	lsls	r3, r3, #20
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d1b9      	bne.n	8018aa6 <_strtod_l+0x76>
 8018b32:	f7fe faf5 	bl	8017120 <__errno>
 8018b36:	2322      	movs	r3, #34	; 0x22
 8018b38:	6003      	str	r3, [r0, #0]
 8018b3a:	e7b4      	b.n	8018aa6 <_strtod_l+0x76>
 8018b3c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8018b40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018b44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018b48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8018b4c:	e7e7      	b.n	8018b1e <_strtod_l+0xee>
 8018b4e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018cc8 <_strtod_l+0x298>
 8018b52:	e7e4      	b.n	8018b1e <_strtod_l+0xee>
 8018b54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018b58:	f04f 38ff 	mov.w	r8, #4294967295
 8018b5c:	e7df      	b.n	8018b1e <_strtod_l+0xee>
 8018b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b60:	1c5a      	adds	r2, r3, #1
 8018b62:	9215      	str	r2, [sp, #84]	; 0x54
 8018b64:	785b      	ldrb	r3, [r3, #1]
 8018b66:	2b30      	cmp	r3, #48	; 0x30
 8018b68:	d0f9      	beq.n	8018b5e <_strtod_l+0x12e>
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d09b      	beq.n	8018aa6 <_strtod_l+0x76>
 8018b6e:	2301      	movs	r3, #1
 8018b70:	f04f 0a00 	mov.w	sl, #0
 8018b74:	9304      	str	r3, [sp, #16]
 8018b76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b78:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b7a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018b7e:	46d3      	mov	fp, sl
 8018b80:	220a      	movs	r2, #10
 8018b82:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018b84:	7806      	ldrb	r6, [r0, #0]
 8018b86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8018b8a:	b2d9      	uxtb	r1, r3
 8018b8c:	2909      	cmp	r1, #9
 8018b8e:	d926      	bls.n	8018bde <_strtod_l+0x1ae>
 8018b90:	494c      	ldr	r1, [pc, #304]	; (8018cc4 <_strtod_l+0x294>)
 8018b92:	2201      	movs	r2, #1
 8018b94:	f000 ffe6 	bl	8019b64 <strncmp>
 8018b98:	2800      	cmp	r0, #0
 8018b9a:	d030      	beq.n	8018bfe <_strtod_l+0x1ce>
 8018b9c:	2000      	movs	r0, #0
 8018b9e:	4632      	mov	r2, r6
 8018ba0:	9005      	str	r0, [sp, #20]
 8018ba2:	465e      	mov	r6, fp
 8018ba4:	4603      	mov	r3, r0
 8018ba6:	2a65      	cmp	r2, #101	; 0x65
 8018ba8:	d001      	beq.n	8018bae <_strtod_l+0x17e>
 8018baa:	2a45      	cmp	r2, #69	; 0x45
 8018bac:	d113      	bne.n	8018bd6 <_strtod_l+0x1a6>
 8018bae:	b91e      	cbnz	r6, 8018bb8 <_strtod_l+0x188>
 8018bb0:	9a04      	ldr	r2, [sp, #16]
 8018bb2:	4302      	orrs	r2, r0
 8018bb4:	d094      	beq.n	8018ae0 <_strtod_l+0xb0>
 8018bb6:	2600      	movs	r6, #0
 8018bb8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8018bba:	1c6a      	adds	r2, r5, #1
 8018bbc:	9215      	str	r2, [sp, #84]	; 0x54
 8018bbe:	786a      	ldrb	r2, [r5, #1]
 8018bc0:	2a2b      	cmp	r2, #43	; 0x2b
 8018bc2:	d074      	beq.n	8018cae <_strtod_l+0x27e>
 8018bc4:	2a2d      	cmp	r2, #45	; 0x2d
 8018bc6:	d078      	beq.n	8018cba <_strtod_l+0x28a>
 8018bc8:	f04f 0c00 	mov.w	ip, #0
 8018bcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8018bd0:	2909      	cmp	r1, #9
 8018bd2:	d97f      	bls.n	8018cd4 <_strtod_l+0x2a4>
 8018bd4:	9515      	str	r5, [sp, #84]	; 0x54
 8018bd6:	2700      	movs	r7, #0
 8018bd8:	e09e      	b.n	8018d18 <_strtod_l+0x2e8>
 8018bda:	2300      	movs	r3, #0
 8018bdc:	e7c8      	b.n	8018b70 <_strtod_l+0x140>
 8018bde:	f1bb 0f08 	cmp.w	fp, #8
 8018be2:	bfd8      	it	le
 8018be4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8018be6:	f100 0001 	add.w	r0, r0, #1
 8018bea:	bfda      	itte	le
 8018bec:	fb02 3301 	mlale	r3, r2, r1, r3
 8018bf0:	9309      	strle	r3, [sp, #36]	; 0x24
 8018bf2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8018bf6:	f10b 0b01 	add.w	fp, fp, #1
 8018bfa:	9015      	str	r0, [sp, #84]	; 0x54
 8018bfc:	e7c1      	b.n	8018b82 <_strtod_l+0x152>
 8018bfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c00:	1c5a      	adds	r2, r3, #1
 8018c02:	9215      	str	r2, [sp, #84]	; 0x54
 8018c04:	785a      	ldrb	r2, [r3, #1]
 8018c06:	f1bb 0f00 	cmp.w	fp, #0
 8018c0a:	d037      	beq.n	8018c7c <_strtod_l+0x24c>
 8018c0c:	9005      	str	r0, [sp, #20]
 8018c0e:	465e      	mov	r6, fp
 8018c10:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8018c14:	2b09      	cmp	r3, #9
 8018c16:	d912      	bls.n	8018c3e <_strtod_l+0x20e>
 8018c18:	2301      	movs	r3, #1
 8018c1a:	e7c4      	b.n	8018ba6 <_strtod_l+0x176>
 8018c1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c1e:	1c5a      	adds	r2, r3, #1
 8018c20:	9215      	str	r2, [sp, #84]	; 0x54
 8018c22:	785a      	ldrb	r2, [r3, #1]
 8018c24:	3001      	adds	r0, #1
 8018c26:	2a30      	cmp	r2, #48	; 0x30
 8018c28:	d0f8      	beq.n	8018c1c <_strtod_l+0x1ec>
 8018c2a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018c2e:	2b08      	cmp	r3, #8
 8018c30:	f200 84c1 	bhi.w	80195b6 <_strtod_l+0xb86>
 8018c34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c36:	9005      	str	r0, [sp, #20]
 8018c38:	2000      	movs	r0, #0
 8018c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c3c:	4606      	mov	r6, r0
 8018c3e:	3a30      	subs	r2, #48	; 0x30
 8018c40:	f100 0301 	add.w	r3, r0, #1
 8018c44:	d014      	beq.n	8018c70 <_strtod_l+0x240>
 8018c46:	9905      	ldr	r1, [sp, #20]
 8018c48:	4419      	add	r1, r3
 8018c4a:	9105      	str	r1, [sp, #20]
 8018c4c:	4633      	mov	r3, r6
 8018c4e:	eb00 0c06 	add.w	ip, r0, r6
 8018c52:	210a      	movs	r1, #10
 8018c54:	4563      	cmp	r3, ip
 8018c56:	d113      	bne.n	8018c80 <_strtod_l+0x250>
 8018c58:	1833      	adds	r3, r6, r0
 8018c5a:	2b08      	cmp	r3, #8
 8018c5c:	f106 0601 	add.w	r6, r6, #1
 8018c60:	4406      	add	r6, r0
 8018c62:	dc1a      	bgt.n	8018c9a <_strtod_l+0x26a>
 8018c64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018c66:	230a      	movs	r3, #10
 8018c68:	fb03 2301 	mla	r3, r3, r1, r2
 8018c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8018c6e:	2300      	movs	r3, #0
 8018c70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018c72:	1c51      	adds	r1, r2, #1
 8018c74:	9115      	str	r1, [sp, #84]	; 0x54
 8018c76:	7852      	ldrb	r2, [r2, #1]
 8018c78:	4618      	mov	r0, r3
 8018c7a:	e7c9      	b.n	8018c10 <_strtod_l+0x1e0>
 8018c7c:	4658      	mov	r0, fp
 8018c7e:	e7d2      	b.n	8018c26 <_strtod_l+0x1f6>
 8018c80:	2b08      	cmp	r3, #8
 8018c82:	f103 0301 	add.w	r3, r3, #1
 8018c86:	dc03      	bgt.n	8018c90 <_strtod_l+0x260>
 8018c88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018c8a:	434f      	muls	r7, r1
 8018c8c:	9709      	str	r7, [sp, #36]	; 0x24
 8018c8e:	e7e1      	b.n	8018c54 <_strtod_l+0x224>
 8018c90:	2b10      	cmp	r3, #16
 8018c92:	bfd8      	it	le
 8018c94:	fb01 fa0a 	mulle.w	sl, r1, sl
 8018c98:	e7dc      	b.n	8018c54 <_strtod_l+0x224>
 8018c9a:	2e10      	cmp	r6, #16
 8018c9c:	bfdc      	itt	le
 8018c9e:	230a      	movle	r3, #10
 8018ca0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8018ca4:	e7e3      	b.n	8018c6e <_strtod_l+0x23e>
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	9305      	str	r3, [sp, #20]
 8018caa:	2301      	movs	r3, #1
 8018cac:	e780      	b.n	8018bb0 <_strtod_l+0x180>
 8018cae:	f04f 0c00 	mov.w	ip, #0
 8018cb2:	1caa      	adds	r2, r5, #2
 8018cb4:	9215      	str	r2, [sp, #84]	; 0x54
 8018cb6:	78aa      	ldrb	r2, [r5, #2]
 8018cb8:	e788      	b.n	8018bcc <_strtod_l+0x19c>
 8018cba:	f04f 0c01 	mov.w	ip, #1
 8018cbe:	e7f8      	b.n	8018cb2 <_strtod_l+0x282>
 8018cc0:	0801d830 	.word	0x0801d830
 8018cc4:	0801d82c 	.word	0x0801d82c
 8018cc8:	7ff00000 	.word	0x7ff00000
 8018ccc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018cce:	1c51      	adds	r1, r2, #1
 8018cd0:	9115      	str	r1, [sp, #84]	; 0x54
 8018cd2:	7852      	ldrb	r2, [r2, #1]
 8018cd4:	2a30      	cmp	r2, #48	; 0x30
 8018cd6:	d0f9      	beq.n	8018ccc <_strtod_l+0x29c>
 8018cd8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8018cdc:	2908      	cmp	r1, #8
 8018cde:	f63f af7a 	bhi.w	8018bd6 <_strtod_l+0x1a6>
 8018ce2:	3a30      	subs	r2, #48	; 0x30
 8018ce4:	9208      	str	r2, [sp, #32]
 8018ce6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018ce8:	920c      	str	r2, [sp, #48]	; 0x30
 8018cea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018cec:	1c57      	adds	r7, r2, #1
 8018cee:	9715      	str	r7, [sp, #84]	; 0x54
 8018cf0:	7852      	ldrb	r2, [r2, #1]
 8018cf2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8018cf6:	f1be 0f09 	cmp.w	lr, #9
 8018cfa:	d938      	bls.n	8018d6e <_strtod_l+0x33e>
 8018cfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018cfe:	1a7f      	subs	r7, r7, r1
 8018d00:	2f08      	cmp	r7, #8
 8018d02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8018d06:	dc03      	bgt.n	8018d10 <_strtod_l+0x2e0>
 8018d08:	9908      	ldr	r1, [sp, #32]
 8018d0a:	428f      	cmp	r7, r1
 8018d0c:	bfa8      	it	ge
 8018d0e:	460f      	movge	r7, r1
 8018d10:	f1bc 0f00 	cmp.w	ip, #0
 8018d14:	d000      	beq.n	8018d18 <_strtod_l+0x2e8>
 8018d16:	427f      	negs	r7, r7
 8018d18:	2e00      	cmp	r6, #0
 8018d1a:	d14f      	bne.n	8018dbc <_strtod_l+0x38c>
 8018d1c:	9904      	ldr	r1, [sp, #16]
 8018d1e:	4301      	orrs	r1, r0
 8018d20:	f47f aec1 	bne.w	8018aa6 <_strtod_l+0x76>
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	f47f aedb 	bne.w	8018ae0 <_strtod_l+0xb0>
 8018d2a:	2a69      	cmp	r2, #105	; 0x69
 8018d2c:	d029      	beq.n	8018d82 <_strtod_l+0x352>
 8018d2e:	dc26      	bgt.n	8018d7e <_strtod_l+0x34e>
 8018d30:	2a49      	cmp	r2, #73	; 0x49
 8018d32:	d026      	beq.n	8018d82 <_strtod_l+0x352>
 8018d34:	2a4e      	cmp	r2, #78	; 0x4e
 8018d36:	f47f aed3 	bne.w	8018ae0 <_strtod_l+0xb0>
 8018d3a:	499b      	ldr	r1, [pc, #620]	; (8018fa8 <_strtod_l+0x578>)
 8018d3c:	a815      	add	r0, sp, #84	; 0x54
 8018d3e:	f001 fa17 	bl	801a170 <__match>
 8018d42:	2800      	cmp	r0, #0
 8018d44:	f43f aecc 	beq.w	8018ae0 <_strtod_l+0xb0>
 8018d48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018d4a:	781b      	ldrb	r3, [r3, #0]
 8018d4c:	2b28      	cmp	r3, #40	; 0x28
 8018d4e:	d12f      	bne.n	8018db0 <_strtod_l+0x380>
 8018d50:	4996      	ldr	r1, [pc, #600]	; (8018fac <_strtod_l+0x57c>)
 8018d52:	aa18      	add	r2, sp, #96	; 0x60
 8018d54:	a815      	add	r0, sp, #84	; 0x54
 8018d56:	f001 fa1f 	bl	801a198 <__hexnan>
 8018d5a:	2805      	cmp	r0, #5
 8018d5c:	d128      	bne.n	8018db0 <_strtod_l+0x380>
 8018d5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018d60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018d64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8018d68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8018d6c:	e69b      	b.n	8018aa6 <_strtod_l+0x76>
 8018d6e:	9f08      	ldr	r7, [sp, #32]
 8018d70:	210a      	movs	r1, #10
 8018d72:	fb01 2107 	mla	r1, r1, r7, r2
 8018d76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018d7a:	9208      	str	r2, [sp, #32]
 8018d7c:	e7b5      	b.n	8018cea <_strtod_l+0x2ba>
 8018d7e:	2a6e      	cmp	r2, #110	; 0x6e
 8018d80:	e7d9      	b.n	8018d36 <_strtod_l+0x306>
 8018d82:	498b      	ldr	r1, [pc, #556]	; (8018fb0 <_strtod_l+0x580>)
 8018d84:	a815      	add	r0, sp, #84	; 0x54
 8018d86:	f001 f9f3 	bl	801a170 <__match>
 8018d8a:	2800      	cmp	r0, #0
 8018d8c:	f43f aea8 	beq.w	8018ae0 <_strtod_l+0xb0>
 8018d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018d92:	4988      	ldr	r1, [pc, #544]	; (8018fb4 <_strtod_l+0x584>)
 8018d94:	3b01      	subs	r3, #1
 8018d96:	a815      	add	r0, sp, #84	; 0x54
 8018d98:	9315      	str	r3, [sp, #84]	; 0x54
 8018d9a:	f001 f9e9 	bl	801a170 <__match>
 8018d9e:	b910      	cbnz	r0, 8018da6 <_strtod_l+0x376>
 8018da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018da2:	3301      	adds	r3, #1
 8018da4:	9315      	str	r3, [sp, #84]	; 0x54
 8018da6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8018fc4 <_strtod_l+0x594>
 8018daa:	f04f 0800 	mov.w	r8, #0
 8018dae:	e67a      	b.n	8018aa6 <_strtod_l+0x76>
 8018db0:	4881      	ldr	r0, [pc, #516]	; (8018fb8 <_strtod_l+0x588>)
 8018db2:	f000 fef9 	bl	8019ba8 <nan>
 8018db6:	ec59 8b10 	vmov	r8, r9, d0
 8018dba:	e674      	b.n	8018aa6 <_strtod_l+0x76>
 8018dbc:	9b05      	ldr	r3, [sp, #20]
 8018dbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018dc0:	1afb      	subs	r3, r7, r3
 8018dc2:	f1bb 0f00 	cmp.w	fp, #0
 8018dc6:	bf08      	it	eq
 8018dc8:	46b3      	moveq	fp, r6
 8018dca:	2e10      	cmp	r6, #16
 8018dcc:	9308      	str	r3, [sp, #32]
 8018dce:	4635      	mov	r5, r6
 8018dd0:	bfa8      	it	ge
 8018dd2:	2510      	movge	r5, #16
 8018dd4:	f7e7 fbbe 	bl	8000554 <__aeabi_ui2d>
 8018dd8:	2e09      	cmp	r6, #9
 8018dda:	4680      	mov	r8, r0
 8018ddc:	4689      	mov	r9, r1
 8018dde:	dd13      	ble.n	8018e08 <_strtod_l+0x3d8>
 8018de0:	4b76      	ldr	r3, [pc, #472]	; (8018fbc <_strtod_l+0x58c>)
 8018de2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018de6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018dea:	f7e7 fc2d 	bl	8000648 <__aeabi_dmul>
 8018dee:	4680      	mov	r8, r0
 8018df0:	4650      	mov	r0, sl
 8018df2:	4689      	mov	r9, r1
 8018df4:	f7e7 fbae 	bl	8000554 <__aeabi_ui2d>
 8018df8:	4602      	mov	r2, r0
 8018dfa:	460b      	mov	r3, r1
 8018dfc:	4640      	mov	r0, r8
 8018dfe:	4649      	mov	r1, r9
 8018e00:	f7e7 fa6c 	bl	80002dc <__adddf3>
 8018e04:	4680      	mov	r8, r0
 8018e06:	4689      	mov	r9, r1
 8018e08:	2e0f      	cmp	r6, #15
 8018e0a:	dc38      	bgt.n	8018e7e <_strtod_l+0x44e>
 8018e0c:	9b08      	ldr	r3, [sp, #32]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	f43f ae49 	beq.w	8018aa6 <_strtod_l+0x76>
 8018e14:	dd24      	ble.n	8018e60 <_strtod_l+0x430>
 8018e16:	2b16      	cmp	r3, #22
 8018e18:	dc0b      	bgt.n	8018e32 <_strtod_l+0x402>
 8018e1a:	4968      	ldr	r1, [pc, #416]	; (8018fbc <_strtod_l+0x58c>)
 8018e1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e24:	4642      	mov	r2, r8
 8018e26:	464b      	mov	r3, r9
 8018e28:	f7e7 fc0e 	bl	8000648 <__aeabi_dmul>
 8018e2c:	4680      	mov	r8, r0
 8018e2e:	4689      	mov	r9, r1
 8018e30:	e639      	b.n	8018aa6 <_strtod_l+0x76>
 8018e32:	9a08      	ldr	r2, [sp, #32]
 8018e34:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8018e38:	4293      	cmp	r3, r2
 8018e3a:	db20      	blt.n	8018e7e <_strtod_l+0x44e>
 8018e3c:	4c5f      	ldr	r4, [pc, #380]	; (8018fbc <_strtod_l+0x58c>)
 8018e3e:	f1c6 060f 	rsb	r6, r6, #15
 8018e42:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8018e46:	4642      	mov	r2, r8
 8018e48:	464b      	mov	r3, r9
 8018e4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e4e:	f7e7 fbfb 	bl	8000648 <__aeabi_dmul>
 8018e52:	9b08      	ldr	r3, [sp, #32]
 8018e54:	1b9e      	subs	r6, r3, r6
 8018e56:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8018e5a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018e5e:	e7e3      	b.n	8018e28 <_strtod_l+0x3f8>
 8018e60:	9b08      	ldr	r3, [sp, #32]
 8018e62:	3316      	adds	r3, #22
 8018e64:	db0b      	blt.n	8018e7e <_strtod_l+0x44e>
 8018e66:	9b05      	ldr	r3, [sp, #20]
 8018e68:	1bdf      	subs	r7, r3, r7
 8018e6a:	4b54      	ldr	r3, [pc, #336]	; (8018fbc <_strtod_l+0x58c>)
 8018e6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8018e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018e74:	4640      	mov	r0, r8
 8018e76:	4649      	mov	r1, r9
 8018e78:	f7e7 fd10 	bl	800089c <__aeabi_ddiv>
 8018e7c:	e7d6      	b.n	8018e2c <_strtod_l+0x3fc>
 8018e7e:	9b08      	ldr	r3, [sp, #32]
 8018e80:	1b75      	subs	r5, r6, r5
 8018e82:	441d      	add	r5, r3
 8018e84:	2d00      	cmp	r5, #0
 8018e86:	dd70      	ble.n	8018f6a <_strtod_l+0x53a>
 8018e88:	f015 030f 	ands.w	r3, r5, #15
 8018e8c:	d00a      	beq.n	8018ea4 <_strtod_l+0x474>
 8018e8e:	494b      	ldr	r1, [pc, #300]	; (8018fbc <_strtod_l+0x58c>)
 8018e90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018e94:	4642      	mov	r2, r8
 8018e96:	464b      	mov	r3, r9
 8018e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e9c:	f7e7 fbd4 	bl	8000648 <__aeabi_dmul>
 8018ea0:	4680      	mov	r8, r0
 8018ea2:	4689      	mov	r9, r1
 8018ea4:	f035 050f 	bics.w	r5, r5, #15
 8018ea8:	d04d      	beq.n	8018f46 <_strtod_l+0x516>
 8018eaa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8018eae:	dd22      	ble.n	8018ef6 <_strtod_l+0x4c6>
 8018eb0:	2500      	movs	r5, #0
 8018eb2:	46ab      	mov	fp, r5
 8018eb4:	9509      	str	r5, [sp, #36]	; 0x24
 8018eb6:	9505      	str	r5, [sp, #20]
 8018eb8:	2322      	movs	r3, #34	; 0x22
 8018eba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8018fc4 <_strtod_l+0x594>
 8018ebe:	6023      	str	r3, [r4, #0]
 8018ec0:	f04f 0800 	mov.w	r8, #0
 8018ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	f43f aded 	beq.w	8018aa6 <_strtod_l+0x76>
 8018ecc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018ece:	4620      	mov	r0, r4
 8018ed0:	f7ff f924 	bl	801811c <_Bfree>
 8018ed4:	9905      	ldr	r1, [sp, #20]
 8018ed6:	4620      	mov	r0, r4
 8018ed8:	f7ff f920 	bl	801811c <_Bfree>
 8018edc:	4659      	mov	r1, fp
 8018ede:	4620      	mov	r0, r4
 8018ee0:	f7ff f91c 	bl	801811c <_Bfree>
 8018ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018ee6:	4620      	mov	r0, r4
 8018ee8:	f7ff f918 	bl	801811c <_Bfree>
 8018eec:	4629      	mov	r1, r5
 8018eee:	4620      	mov	r0, r4
 8018ef0:	f7ff f914 	bl	801811c <_Bfree>
 8018ef4:	e5d7      	b.n	8018aa6 <_strtod_l+0x76>
 8018ef6:	4b32      	ldr	r3, [pc, #200]	; (8018fc0 <_strtod_l+0x590>)
 8018ef8:	9304      	str	r3, [sp, #16]
 8018efa:	2300      	movs	r3, #0
 8018efc:	112d      	asrs	r5, r5, #4
 8018efe:	4640      	mov	r0, r8
 8018f00:	4649      	mov	r1, r9
 8018f02:	469a      	mov	sl, r3
 8018f04:	2d01      	cmp	r5, #1
 8018f06:	dc21      	bgt.n	8018f4c <_strtod_l+0x51c>
 8018f08:	b10b      	cbz	r3, 8018f0e <_strtod_l+0x4de>
 8018f0a:	4680      	mov	r8, r0
 8018f0c:	4689      	mov	r9, r1
 8018f0e:	492c      	ldr	r1, [pc, #176]	; (8018fc0 <_strtod_l+0x590>)
 8018f10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8018f14:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018f18:	4642      	mov	r2, r8
 8018f1a:	464b      	mov	r3, r9
 8018f1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f20:	f7e7 fb92 	bl	8000648 <__aeabi_dmul>
 8018f24:	4b27      	ldr	r3, [pc, #156]	; (8018fc4 <_strtod_l+0x594>)
 8018f26:	460a      	mov	r2, r1
 8018f28:	400b      	ands	r3, r1
 8018f2a:	4927      	ldr	r1, [pc, #156]	; (8018fc8 <_strtod_l+0x598>)
 8018f2c:	428b      	cmp	r3, r1
 8018f2e:	4680      	mov	r8, r0
 8018f30:	d8be      	bhi.n	8018eb0 <_strtod_l+0x480>
 8018f32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018f36:	428b      	cmp	r3, r1
 8018f38:	bf86      	itte	hi
 8018f3a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8018fcc <_strtod_l+0x59c>
 8018f3e:	f04f 38ff 	movhi.w	r8, #4294967295
 8018f42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8018f46:	2300      	movs	r3, #0
 8018f48:	9304      	str	r3, [sp, #16]
 8018f4a:	e07b      	b.n	8019044 <_strtod_l+0x614>
 8018f4c:	07ea      	lsls	r2, r5, #31
 8018f4e:	d505      	bpl.n	8018f5c <_strtod_l+0x52c>
 8018f50:	9b04      	ldr	r3, [sp, #16]
 8018f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f56:	f7e7 fb77 	bl	8000648 <__aeabi_dmul>
 8018f5a:	2301      	movs	r3, #1
 8018f5c:	9a04      	ldr	r2, [sp, #16]
 8018f5e:	3208      	adds	r2, #8
 8018f60:	f10a 0a01 	add.w	sl, sl, #1
 8018f64:	106d      	asrs	r5, r5, #1
 8018f66:	9204      	str	r2, [sp, #16]
 8018f68:	e7cc      	b.n	8018f04 <_strtod_l+0x4d4>
 8018f6a:	d0ec      	beq.n	8018f46 <_strtod_l+0x516>
 8018f6c:	426d      	negs	r5, r5
 8018f6e:	f015 020f 	ands.w	r2, r5, #15
 8018f72:	d00a      	beq.n	8018f8a <_strtod_l+0x55a>
 8018f74:	4b11      	ldr	r3, [pc, #68]	; (8018fbc <_strtod_l+0x58c>)
 8018f76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018f7a:	4640      	mov	r0, r8
 8018f7c:	4649      	mov	r1, r9
 8018f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f82:	f7e7 fc8b 	bl	800089c <__aeabi_ddiv>
 8018f86:	4680      	mov	r8, r0
 8018f88:	4689      	mov	r9, r1
 8018f8a:	112d      	asrs	r5, r5, #4
 8018f8c:	d0db      	beq.n	8018f46 <_strtod_l+0x516>
 8018f8e:	2d1f      	cmp	r5, #31
 8018f90:	dd1e      	ble.n	8018fd0 <_strtod_l+0x5a0>
 8018f92:	2500      	movs	r5, #0
 8018f94:	46ab      	mov	fp, r5
 8018f96:	9509      	str	r5, [sp, #36]	; 0x24
 8018f98:	9505      	str	r5, [sp, #20]
 8018f9a:	2322      	movs	r3, #34	; 0x22
 8018f9c:	f04f 0800 	mov.w	r8, #0
 8018fa0:	f04f 0900 	mov.w	r9, #0
 8018fa4:	6023      	str	r3, [r4, #0]
 8018fa6:	e78d      	b.n	8018ec4 <_strtod_l+0x494>
 8018fa8:	0801d61d 	.word	0x0801d61d
 8018fac:	0801d844 	.word	0x0801d844
 8018fb0:	0801d615 	.word	0x0801d615
 8018fb4:	0801d64c 	.word	0x0801d64c
 8018fb8:	0801d9d5 	.word	0x0801d9d5
 8018fbc:	0801d758 	.word	0x0801d758
 8018fc0:	0801d730 	.word	0x0801d730
 8018fc4:	7ff00000 	.word	0x7ff00000
 8018fc8:	7ca00000 	.word	0x7ca00000
 8018fcc:	7fefffff 	.word	0x7fefffff
 8018fd0:	f015 0310 	ands.w	r3, r5, #16
 8018fd4:	bf18      	it	ne
 8018fd6:	236a      	movne	r3, #106	; 0x6a
 8018fd8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801937c <_strtod_l+0x94c>
 8018fdc:	9304      	str	r3, [sp, #16]
 8018fde:	4640      	mov	r0, r8
 8018fe0:	4649      	mov	r1, r9
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	07ea      	lsls	r2, r5, #31
 8018fe6:	d504      	bpl.n	8018ff2 <_strtod_l+0x5c2>
 8018fe8:	e9da 2300 	ldrd	r2, r3, [sl]
 8018fec:	f7e7 fb2c 	bl	8000648 <__aeabi_dmul>
 8018ff0:	2301      	movs	r3, #1
 8018ff2:	106d      	asrs	r5, r5, #1
 8018ff4:	f10a 0a08 	add.w	sl, sl, #8
 8018ff8:	d1f4      	bne.n	8018fe4 <_strtod_l+0x5b4>
 8018ffa:	b10b      	cbz	r3, 8019000 <_strtod_l+0x5d0>
 8018ffc:	4680      	mov	r8, r0
 8018ffe:	4689      	mov	r9, r1
 8019000:	9b04      	ldr	r3, [sp, #16]
 8019002:	b1bb      	cbz	r3, 8019034 <_strtod_l+0x604>
 8019004:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8019008:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801900c:	2b00      	cmp	r3, #0
 801900e:	4649      	mov	r1, r9
 8019010:	dd10      	ble.n	8019034 <_strtod_l+0x604>
 8019012:	2b1f      	cmp	r3, #31
 8019014:	f340 811e 	ble.w	8019254 <_strtod_l+0x824>
 8019018:	2b34      	cmp	r3, #52	; 0x34
 801901a:	bfde      	ittt	le
 801901c:	f04f 33ff 	movle.w	r3, #4294967295
 8019020:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8019024:	4093      	lslle	r3, r2
 8019026:	f04f 0800 	mov.w	r8, #0
 801902a:	bfcc      	ite	gt
 801902c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019030:	ea03 0901 	andle.w	r9, r3, r1
 8019034:	2200      	movs	r2, #0
 8019036:	2300      	movs	r3, #0
 8019038:	4640      	mov	r0, r8
 801903a:	4649      	mov	r1, r9
 801903c:	f7e7 fd6c 	bl	8000b18 <__aeabi_dcmpeq>
 8019040:	2800      	cmp	r0, #0
 8019042:	d1a6      	bne.n	8018f92 <_strtod_l+0x562>
 8019044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019046:	9300      	str	r3, [sp, #0]
 8019048:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801904a:	4633      	mov	r3, r6
 801904c:	465a      	mov	r2, fp
 801904e:	4620      	mov	r0, r4
 8019050:	f7ff f8cc 	bl	80181ec <__s2b>
 8019054:	9009      	str	r0, [sp, #36]	; 0x24
 8019056:	2800      	cmp	r0, #0
 8019058:	f43f af2a 	beq.w	8018eb0 <_strtod_l+0x480>
 801905c:	9a08      	ldr	r2, [sp, #32]
 801905e:	9b05      	ldr	r3, [sp, #20]
 8019060:	2a00      	cmp	r2, #0
 8019062:	eba3 0307 	sub.w	r3, r3, r7
 8019066:	bfa8      	it	ge
 8019068:	2300      	movge	r3, #0
 801906a:	930c      	str	r3, [sp, #48]	; 0x30
 801906c:	2500      	movs	r5, #0
 801906e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019072:	9312      	str	r3, [sp, #72]	; 0x48
 8019074:	46ab      	mov	fp, r5
 8019076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019078:	4620      	mov	r0, r4
 801907a:	6859      	ldr	r1, [r3, #4]
 801907c:	f7ff f80e 	bl	801809c <_Balloc>
 8019080:	9005      	str	r0, [sp, #20]
 8019082:	2800      	cmp	r0, #0
 8019084:	f43f af18 	beq.w	8018eb8 <_strtod_l+0x488>
 8019088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801908a:	691a      	ldr	r2, [r3, #16]
 801908c:	3202      	adds	r2, #2
 801908e:	f103 010c 	add.w	r1, r3, #12
 8019092:	0092      	lsls	r2, r2, #2
 8019094:	300c      	adds	r0, #12
 8019096:	f7fe f870 	bl	801717a <memcpy>
 801909a:	ec49 8b10 	vmov	d0, r8, r9
 801909e:	aa18      	add	r2, sp, #96	; 0x60
 80190a0:	a917      	add	r1, sp, #92	; 0x5c
 80190a2:	4620      	mov	r0, r4
 80190a4:	f7ff fbd6 	bl	8018854 <__d2b>
 80190a8:	ec49 8b18 	vmov	d8, r8, r9
 80190ac:	9016      	str	r0, [sp, #88]	; 0x58
 80190ae:	2800      	cmp	r0, #0
 80190b0:	f43f af02 	beq.w	8018eb8 <_strtod_l+0x488>
 80190b4:	2101      	movs	r1, #1
 80190b6:	4620      	mov	r0, r4
 80190b8:	f7ff f930 	bl	801831c <__i2b>
 80190bc:	4683      	mov	fp, r0
 80190be:	2800      	cmp	r0, #0
 80190c0:	f43f aefa 	beq.w	8018eb8 <_strtod_l+0x488>
 80190c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80190c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80190c8:	2e00      	cmp	r6, #0
 80190ca:	bfab      	itete	ge
 80190cc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80190ce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80190d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80190d2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80190d6:	bfac      	ite	ge
 80190d8:	eb06 0a03 	addge.w	sl, r6, r3
 80190dc:	1b9f      	sublt	r7, r3, r6
 80190de:	9b04      	ldr	r3, [sp, #16]
 80190e0:	1af6      	subs	r6, r6, r3
 80190e2:	4416      	add	r6, r2
 80190e4:	4ba0      	ldr	r3, [pc, #640]	; (8019368 <_strtod_l+0x938>)
 80190e6:	3e01      	subs	r6, #1
 80190e8:	429e      	cmp	r6, r3
 80190ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80190ee:	f280 80c4 	bge.w	801927a <_strtod_l+0x84a>
 80190f2:	1b9b      	subs	r3, r3, r6
 80190f4:	2b1f      	cmp	r3, #31
 80190f6:	eba2 0203 	sub.w	r2, r2, r3
 80190fa:	f04f 0101 	mov.w	r1, #1
 80190fe:	f300 80b0 	bgt.w	8019262 <_strtod_l+0x832>
 8019102:	fa01 f303 	lsl.w	r3, r1, r3
 8019106:	930e      	str	r3, [sp, #56]	; 0x38
 8019108:	2300      	movs	r3, #0
 801910a:	930d      	str	r3, [sp, #52]	; 0x34
 801910c:	eb0a 0602 	add.w	r6, sl, r2
 8019110:	9b04      	ldr	r3, [sp, #16]
 8019112:	45b2      	cmp	sl, r6
 8019114:	4417      	add	r7, r2
 8019116:	441f      	add	r7, r3
 8019118:	4653      	mov	r3, sl
 801911a:	bfa8      	it	ge
 801911c:	4633      	movge	r3, r6
 801911e:	42bb      	cmp	r3, r7
 8019120:	bfa8      	it	ge
 8019122:	463b      	movge	r3, r7
 8019124:	2b00      	cmp	r3, #0
 8019126:	bfc2      	ittt	gt
 8019128:	1af6      	subgt	r6, r6, r3
 801912a:	1aff      	subgt	r7, r7, r3
 801912c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8019130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019132:	2b00      	cmp	r3, #0
 8019134:	dd17      	ble.n	8019166 <_strtod_l+0x736>
 8019136:	4659      	mov	r1, fp
 8019138:	461a      	mov	r2, r3
 801913a:	4620      	mov	r0, r4
 801913c:	f7ff f9ae 	bl	801849c <__pow5mult>
 8019140:	4683      	mov	fp, r0
 8019142:	2800      	cmp	r0, #0
 8019144:	f43f aeb8 	beq.w	8018eb8 <_strtod_l+0x488>
 8019148:	4601      	mov	r1, r0
 801914a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801914c:	4620      	mov	r0, r4
 801914e:	f7ff f8fb 	bl	8018348 <__multiply>
 8019152:	900b      	str	r0, [sp, #44]	; 0x2c
 8019154:	2800      	cmp	r0, #0
 8019156:	f43f aeaf 	beq.w	8018eb8 <_strtod_l+0x488>
 801915a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801915c:	4620      	mov	r0, r4
 801915e:	f7fe ffdd 	bl	801811c <_Bfree>
 8019162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019164:	9316      	str	r3, [sp, #88]	; 0x58
 8019166:	2e00      	cmp	r6, #0
 8019168:	f300 808c 	bgt.w	8019284 <_strtod_l+0x854>
 801916c:	9b08      	ldr	r3, [sp, #32]
 801916e:	2b00      	cmp	r3, #0
 8019170:	dd08      	ble.n	8019184 <_strtod_l+0x754>
 8019172:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019174:	9905      	ldr	r1, [sp, #20]
 8019176:	4620      	mov	r0, r4
 8019178:	f7ff f990 	bl	801849c <__pow5mult>
 801917c:	9005      	str	r0, [sp, #20]
 801917e:	2800      	cmp	r0, #0
 8019180:	f43f ae9a 	beq.w	8018eb8 <_strtod_l+0x488>
 8019184:	2f00      	cmp	r7, #0
 8019186:	dd08      	ble.n	801919a <_strtod_l+0x76a>
 8019188:	9905      	ldr	r1, [sp, #20]
 801918a:	463a      	mov	r2, r7
 801918c:	4620      	mov	r0, r4
 801918e:	f7ff f9df 	bl	8018550 <__lshift>
 8019192:	9005      	str	r0, [sp, #20]
 8019194:	2800      	cmp	r0, #0
 8019196:	f43f ae8f 	beq.w	8018eb8 <_strtod_l+0x488>
 801919a:	f1ba 0f00 	cmp.w	sl, #0
 801919e:	dd08      	ble.n	80191b2 <_strtod_l+0x782>
 80191a0:	4659      	mov	r1, fp
 80191a2:	4652      	mov	r2, sl
 80191a4:	4620      	mov	r0, r4
 80191a6:	f7ff f9d3 	bl	8018550 <__lshift>
 80191aa:	4683      	mov	fp, r0
 80191ac:	2800      	cmp	r0, #0
 80191ae:	f43f ae83 	beq.w	8018eb8 <_strtod_l+0x488>
 80191b2:	9a05      	ldr	r2, [sp, #20]
 80191b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80191b6:	4620      	mov	r0, r4
 80191b8:	f7ff fa52 	bl	8018660 <__mdiff>
 80191bc:	4605      	mov	r5, r0
 80191be:	2800      	cmp	r0, #0
 80191c0:	f43f ae7a 	beq.w	8018eb8 <_strtod_l+0x488>
 80191c4:	68c3      	ldr	r3, [r0, #12]
 80191c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80191c8:	2300      	movs	r3, #0
 80191ca:	60c3      	str	r3, [r0, #12]
 80191cc:	4659      	mov	r1, fp
 80191ce:	f7ff fa2b 	bl	8018628 <__mcmp>
 80191d2:	2800      	cmp	r0, #0
 80191d4:	da60      	bge.n	8019298 <_strtod_l+0x868>
 80191d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80191d8:	ea53 0308 	orrs.w	r3, r3, r8
 80191dc:	f040 8084 	bne.w	80192e8 <_strtod_l+0x8b8>
 80191e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d17f      	bne.n	80192e8 <_strtod_l+0x8b8>
 80191e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80191ec:	0d1b      	lsrs	r3, r3, #20
 80191ee:	051b      	lsls	r3, r3, #20
 80191f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80191f4:	d978      	bls.n	80192e8 <_strtod_l+0x8b8>
 80191f6:	696b      	ldr	r3, [r5, #20]
 80191f8:	b913      	cbnz	r3, 8019200 <_strtod_l+0x7d0>
 80191fa:	692b      	ldr	r3, [r5, #16]
 80191fc:	2b01      	cmp	r3, #1
 80191fe:	dd73      	ble.n	80192e8 <_strtod_l+0x8b8>
 8019200:	4629      	mov	r1, r5
 8019202:	2201      	movs	r2, #1
 8019204:	4620      	mov	r0, r4
 8019206:	f7ff f9a3 	bl	8018550 <__lshift>
 801920a:	4659      	mov	r1, fp
 801920c:	4605      	mov	r5, r0
 801920e:	f7ff fa0b 	bl	8018628 <__mcmp>
 8019212:	2800      	cmp	r0, #0
 8019214:	dd68      	ble.n	80192e8 <_strtod_l+0x8b8>
 8019216:	9904      	ldr	r1, [sp, #16]
 8019218:	4a54      	ldr	r2, [pc, #336]	; (801936c <_strtod_l+0x93c>)
 801921a:	464b      	mov	r3, r9
 801921c:	2900      	cmp	r1, #0
 801921e:	f000 8084 	beq.w	801932a <_strtod_l+0x8fa>
 8019222:	ea02 0109 	and.w	r1, r2, r9
 8019226:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801922a:	dc7e      	bgt.n	801932a <_strtod_l+0x8fa>
 801922c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019230:	f77f aeb3 	ble.w	8018f9a <_strtod_l+0x56a>
 8019234:	4b4e      	ldr	r3, [pc, #312]	; (8019370 <_strtod_l+0x940>)
 8019236:	4640      	mov	r0, r8
 8019238:	4649      	mov	r1, r9
 801923a:	2200      	movs	r2, #0
 801923c:	f7e7 fa04 	bl	8000648 <__aeabi_dmul>
 8019240:	4b4a      	ldr	r3, [pc, #296]	; (801936c <_strtod_l+0x93c>)
 8019242:	400b      	ands	r3, r1
 8019244:	4680      	mov	r8, r0
 8019246:	4689      	mov	r9, r1
 8019248:	2b00      	cmp	r3, #0
 801924a:	f47f ae3f 	bne.w	8018ecc <_strtod_l+0x49c>
 801924e:	2322      	movs	r3, #34	; 0x22
 8019250:	6023      	str	r3, [r4, #0]
 8019252:	e63b      	b.n	8018ecc <_strtod_l+0x49c>
 8019254:	f04f 32ff 	mov.w	r2, #4294967295
 8019258:	fa02 f303 	lsl.w	r3, r2, r3
 801925c:	ea03 0808 	and.w	r8, r3, r8
 8019260:	e6e8      	b.n	8019034 <_strtod_l+0x604>
 8019262:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8019266:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801926a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801926e:	36e2      	adds	r6, #226	; 0xe2
 8019270:	fa01 f306 	lsl.w	r3, r1, r6
 8019274:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8019278:	e748      	b.n	801910c <_strtod_l+0x6dc>
 801927a:	2100      	movs	r1, #0
 801927c:	2301      	movs	r3, #1
 801927e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8019282:	e743      	b.n	801910c <_strtod_l+0x6dc>
 8019284:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019286:	4632      	mov	r2, r6
 8019288:	4620      	mov	r0, r4
 801928a:	f7ff f961 	bl	8018550 <__lshift>
 801928e:	9016      	str	r0, [sp, #88]	; 0x58
 8019290:	2800      	cmp	r0, #0
 8019292:	f47f af6b 	bne.w	801916c <_strtod_l+0x73c>
 8019296:	e60f      	b.n	8018eb8 <_strtod_l+0x488>
 8019298:	46ca      	mov	sl, r9
 801929a:	d171      	bne.n	8019380 <_strtod_l+0x950>
 801929c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801929e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80192a2:	b352      	cbz	r2, 80192fa <_strtod_l+0x8ca>
 80192a4:	4a33      	ldr	r2, [pc, #204]	; (8019374 <_strtod_l+0x944>)
 80192a6:	4293      	cmp	r3, r2
 80192a8:	d12a      	bne.n	8019300 <_strtod_l+0x8d0>
 80192aa:	9b04      	ldr	r3, [sp, #16]
 80192ac:	4641      	mov	r1, r8
 80192ae:	b1fb      	cbz	r3, 80192f0 <_strtod_l+0x8c0>
 80192b0:	4b2e      	ldr	r3, [pc, #184]	; (801936c <_strtod_l+0x93c>)
 80192b2:	ea09 0303 	and.w	r3, r9, r3
 80192b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80192ba:	f04f 32ff 	mov.w	r2, #4294967295
 80192be:	d81a      	bhi.n	80192f6 <_strtod_l+0x8c6>
 80192c0:	0d1b      	lsrs	r3, r3, #20
 80192c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80192c6:	fa02 f303 	lsl.w	r3, r2, r3
 80192ca:	4299      	cmp	r1, r3
 80192cc:	d118      	bne.n	8019300 <_strtod_l+0x8d0>
 80192ce:	4b2a      	ldr	r3, [pc, #168]	; (8019378 <_strtod_l+0x948>)
 80192d0:	459a      	cmp	sl, r3
 80192d2:	d102      	bne.n	80192da <_strtod_l+0x8aa>
 80192d4:	3101      	adds	r1, #1
 80192d6:	f43f adef 	beq.w	8018eb8 <_strtod_l+0x488>
 80192da:	4b24      	ldr	r3, [pc, #144]	; (801936c <_strtod_l+0x93c>)
 80192dc:	ea0a 0303 	and.w	r3, sl, r3
 80192e0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80192e4:	f04f 0800 	mov.w	r8, #0
 80192e8:	9b04      	ldr	r3, [sp, #16]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d1a2      	bne.n	8019234 <_strtod_l+0x804>
 80192ee:	e5ed      	b.n	8018ecc <_strtod_l+0x49c>
 80192f0:	f04f 33ff 	mov.w	r3, #4294967295
 80192f4:	e7e9      	b.n	80192ca <_strtod_l+0x89a>
 80192f6:	4613      	mov	r3, r2
 80192f8:	e7e7      	b.n	80192ca <_strtod_l+0x89a>
 80192fa:	ea53 0308 	orrs.w	r3, r3, r8
 80192fe:	d08a      	beq.n	8019216 <_strtod_l+0x7e6>
 8019300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019302:	b1e3      	cbz	r3, 801933e <_strtod_l+0x90e>
 8019304:	ea13 0f0a 	tst.w	r3, sl
 8019308:	d0ee      	beq.n	80192e8 <_strtod_l+0x8b8>
 801930a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801930c:	9a04      	ldr	r2, [sp, #16]
 801930e:	4640      	mov	r0, r8
 8019310:	4649      	mov	r1, r9
 8019312:	b1c3      	cbz	r3, 8019346 <_strtod_l+0x916>
 8019314:	f7ff fb6f 	bl	80189f6 <sulp>
 8019318:	4602      	mov	r2, r0
 801931a:	460b      	mov	r3, r1
 801931c:	ec51 0b18 	vmov	r0, r1, d8
 8019320:	f7e6 ffdc 	bl	80002dc <__adddf3>
 8019324:	4680      	mov	r8, r0
 8019326:	4689      	mov	r9, r1
 8019328:	e7de      	b.n	80192e8 <_strtod_l+0x8b8>
 801932a:	4013      	ands	r3, r2
 801932c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8019330:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8019334:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019338:	f04f 38ff 	mov.w	r8, #4294967295
 801933c:	e7d4      	b.n	80192e8 <_strtod_l+0x8b8>
 801933e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019340:	ea13 0f08 	tst.w	r3, r8
 8019344:	e7e0      	b.n	8019308 <_strtod_l+0x8d8>
 8019346:	f7ff fb56 	bl	80189f6 <sulp>
 801934a:	4602      	mov	r2, r0
 801934c:	460b      	mov	r3, r1
 801934e:	ec51 0b18 	vmov	r0, r1, d8
 8019352:	f7e6 ffc1 	bl	80002d8 <__aeabi_dsub>
 8019356:	2200      	movs	r2, #0
 8019358:	2300      	movs	r3, #0
 801935a:	4680      	mov	r8, r0
 801935c:	4689      	mov	r9, r1
 801935e:	f7e7 fbdb 	bl	8000b18 <__aeabi_dcmpeq>
 8019362:	2800      	cmp	r0, #0
 8019364:	d0c0      	beq.n	80192e8 <_strtod_l+0x8b8>
 8019366:	e618      	b.n	8018f9a <_strtod_l+0x56a>
 8019368:	fffffc02 	.word	0xfffffc02
 801936c:	7ff00000 	.word	0x7ff00000
 8019370:	39500000 	.word	0x39500000
 8019374:	000fffff 	.word	0x000fffff
 8019378:	7fefffff 	.word	0x7fefffff
 801937c:	0801d858 	.word	0x0801d858
 8019380:	4659      	mov	r1, fp
 8019382:	4628      	mov	r0, r5
 8019384:	f7ff fac0 	bl	8018908 <__ratio>
 8019388:	ec57 6b10 	vmov	r6, r7, d0
 801938c:	ee10 0a10 	vmov	r0, s0
 8019390:	2200      	movs	r2, #0
 8019392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019396:	4639      	mov	r1, r7
 8019398:	f7e7 fbd2 	bl	8000b40 <__aeabi_dcmple>
 801939c:	2800      	cmp	r0, #0
 801939e:	d071      	beq.n	8019484 <_strtod_l+0xa54>
 80193a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d17c      	bne.n	80194a0 <_strtod_l+0xa70>
 80193a6:	f1b8 0f00 	cmp.w	r8, #0
 80193aa:	d15a      	bne.n	8019462 <_strtod_l+0xa32>
 80193ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d15d      	bne.n	8019470 <_strtod_l+0xa40>
 80193b4:	4b90      	ldr	r3, [pc, #576]	; (80195f8 <_strtod_l+0xbc8>)
 80193b6:	2200      	movs	r2, #0
 80193b8:	4630      	mov	r0, r6
 80193ba:	4639      	mov	r1, r7
 80193bc:	f7e7 fbb6 	bl	8000b2c <__aeabi_dcmplt>
 80193c0:	2800      	cmp	r0, #0
 80193c2:	d15c      	bne.n	801947e <_strtod_l+0xa4e>
 80193c4:	4630      	mov	r0, r6
 80193c6:	4639      	mov	r1, r7
 80193c8:	4b8c      	ldr	r3, [pc, #560]	; (80195fc <_strtod_l+0xbcc>)
 80193ca:	2200      	movs	r2, #0
 80193cc:	f7e7 f93c 	bl	8000648 <__aeabi_dmul>
 80193d0:	4606      	mov	r6, r0
 80193d2:	460f      	mov	r7, r1
 80193d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80193d8:	9606      	str	r6, [sp, #24]
 80193da:	9307      	str	r3, [sp, #28]
 80193dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80193e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80193e4:	4b86      	ldr	r3, [pc, #536]	; (8019600 <_strtod_l+0xbd0>)
 80193e6:	ea0a 0303 	and.w	r3, sl, r3
 80193ea:	930d      	str	r3, [sp, #52]	; 0x34
 80193ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80193ee:	4b85      	ldr	r3, [pc, #532]	; (8019604 <_strtod_l+0xbd4>)
 80193f0:	429a      	cmp	r2, r3
 80193f2:	f040 8090 	bne.w	8019516 <_strtod_l+0xae6>
 80193f6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80193fa:	ec49 8b10 	vmov	d0, r8, r9
 80193fe:	f7ff f9b9 	bl	8018774 <__ulp>
 8019402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019406:	ec51 0b10 	vmov	r0, r1, d0
 801940a:	f7e7 f91d 	bl	8000648 <__aeabi_dmul>
 801940e:	4642      	mov	r2, r8
 8019410:	464b      	mov	r3, r9
 8019412:	f7e6 ff63 	bl	80002dc <__adddf3>
 8019416:	460b      	mov	r3, r1
 8019418:	4979      	ldr	r1, [pc, #484]	; (8019600 <_strtod_l+0xbd0>)
 801941a:	4a7b      	ldr	r2, [pc, #492]	; (8019608 <_strtod_l+0xbd8>)
 801941c:	4019      	ands	r1, r3
 801941e:	4291      	cmp	r1, r2
 8019420:	4680      	mov	r8, r0
 8019422:	d944      	bls.n	80194ae <_strtod_l+0xa7e>
 8019424:	ee18 2a90 	vmov	r2, s17
 8019428:	4b78      	ldr	r3, [pc, #480]	; (801960c <_strtod_l+0xbdc>)
 801942a:	429a      	cmp	r2, r3
 801942c:	d104      	bne.n	8019438 <_strtod_l+0xa08>
 801942e:	ee18 3a10 	vmov	r3, s16
 8019432:	3301      	adds	r3, #1
 8019434:	f43f ad40 	beq.w	8018eb8 <_strtod_l+0x488>
 8019438:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801960c <_strtod_l+0xbdc>
 801943c:	f04f 38ff 	mov.w	r8, #4294967295
 8019440:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019442:	4620      	mov	r0, r4
 8019444:	f7fe fe6a 	bl	801811c <_Bfree>
 8019448:	9905      	ldr	r1, [sp, #20]
 801944a:	4620      	mov	r0, r4
 801944c:	f7fe fe66 	bl	801811c <_Bfree>
 8019450:	4659      	mov	r1, fp
 8019452:	4620      	mov	r0, r4
 8019454:	f7fe fe62 	bl	801811c <_Bfree>
 8019458:	4629      	mov	r1, r5
 801945a:	4620      	mov	r0, r4
 801945c:	f7fe fe5e 	bl	801811c <_Bfree>
 8019460:	e609      	b.n	8019076 <_strtod_l+0x646>
 8019462:	f1b8 0f01 	cmp.w	r8, #1
 8019466:	d103      	bne.n	8019470 <_strtod_l+0xa40>
 8019468:	f1b9 0f00 	cmp.w	r9, #0
 801946c:	f43f ad95 	beq.w	8018f9a <_strtod_l+0x56a>
 8019470:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80195c8 <_strtod_l+0xb98>
 8019474:	4f60      	ldr	r7, [pc, #384]	; (80195f8 <_strtod_l+0xbc8>)
 8019476:	ed8d 7b06 	vstr	d7, [sp, #24]
 801947a:	2600      	movs	r6, #0
 801947c:	e7ae      	b.n	80193dc <_strtod_l+0x9ac>
 801947e:	4f5f      	ldr	r7, [pc, #380]	; (80195fc <_strtod_l+0xbcc>)
 8019480:	2600      	movs	r6, #0
 8019482:	e7a7      	b.n	80193d4 <_strtod_l+0x9a4>
 8019484:	4b5d      	ldr	r3, [pc, #372]	; (80195fc <_strtod_l+0xbcc>)
 8019486:	4630      	mov	r0, r6
 8019488:	4639      	mov	r1, r7
 801948a:	2200      	movs	r2, #0
 801948c:	f7e7 f8dc 	bl	8000648 <__aeabi_dmul>
 8019490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019492:	4606      	mov	r6, r0
 8019494:	460f      	mov	r7, r1
 8019496:	2b00      	cmp	r3, #0
 8019498:	d09c      	beq.n	80193d4 <_strtod_l+0x9a4>
 801949a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801949e:	e79d      	b.n	80193dc <_strtod_l+0x9ac>
 80194a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80195d0 <_strtod_l+0xba0>
 80194a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80194a8:	ec57 6b17 	vmov	r6, r7, d7
 80194ac:	e796      	b.n	80193dc <_strtod_l+0x9ac>
 80194ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80194b2:	9b04      	ldr	r3, [sp, #16]
 80194b4:	46ca      	mov	sl, r9
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d1c2      	bne.n	8019440 <_strtod_l+0xa10>
 80194ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80194be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80194c0:	0d1b      	lsrs	r3, r3, #20
 80194c2:	051b      	lsls	r3, r3, #20
 80194c4:	429a      	cmp	r2, r3
 80194c6:	d1bb      	bne.n	8019440 <_strtod_l+0xa10>
 80194c8:	4630      	mov	r0, r6
 80194ca:	4639      	mov	r1, r7
 80194cc:	f7e7 fc1c 	bl	8000d08 <__aeabi_d2lz>
 80194d0:	f7e7 f88c 	bl	80005ec <__aeabi_l2d>
 80194d4:	4602      	mov	r2, r0
 80194d6:	460b      	mov	r3, r1
 80194d8:	4630      	mov	r0, r6
 80194da:	4639      	mov	r1, r7
 80194dc:	f7e6 fefc 	bl	80002d8 <__aeabi_dsub>
 80194e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80194e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80194e6:	ea43 0308 	orr.w	r3, r3, r8
 80194ea:	4313      	orrs	r3, r2
 80194ec:	4606      	mov	r6, r0
 80194ee:	460f      	mov	r7, r1
 80194f0:	d054      	beq.n	801959c <_strtod_l+0xb6c>
 80194f2:	a339      	add	r3, pc, #228	; (adr r3, 80195d8 <_strtod_l+0xba8>)
 80194f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194f8:	f7e7 fb18 	bl	8000b2c <__aeabi_dcmplt>
 80194fc:	2800      	cmp	r0, #0
 80194fe:	f47f ace5 	bne.w	8018ecc <_strtod_l+0x49c>
 8019502:	a337      	add	r3, pc, #220	; (adr r3, 80195e0 <_strtod_l+0xbb0>)
 8019504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019508:	4630      	mov	r0, r6
 801950a:	4639      	mov	r1, r7
 801950c:	f7e7 fb2c 	bl	8000b68 <__aeabi_dcmpgt>
 8019510:	2800      	cmp	r0, #0
 8019512:	d095      	beq.n	8019440 <_strtod_l+0xa10>
 8019514:	e4da      	b.n	8018ecc <_strtod_l+0x49c>
 8019516:	9b04      	ldr	r3, [sp, #16]
 8019518:	b333      	cbz	r3, 8019568 <_strtod_l+0xb38>
 801951a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801951c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019520:	d822      	bhi.n	8019568 <_strtod_l+0xb38>
 8019522:	a331      	add	r3, pc, #196	; (adr r3, 80195e8 <_strtod_l+0xbb8>)
 8019524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019528:	4630      	mov	r0, r6
 801952a:	4639      	mov	r1, r7
 801952c:	f7e7 fb08 	bl	8000b40 <__aeabi_dcmple>
 8019530:	b1a0      	cbz	r0, 801955c <_strtod_l+0xb2c>
 8019532:	4639      	mov	r1, r7
 8019534:	4630      	mov	r0, r6
 8019536:	f7e7 fb5f 	bl	8000bf8 <__aeabi_d2uiz>
 801953a:	2801      	cmp	r0, #1
 801953c:	bf38      	it	cc
 801953e:	2001      	movcc	r0, #1
 8019540:	f7e7 f808 	bl	8000554 <__aeabi_ui2d>
 8019544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019546:	4606      	mov	r6, r0
 8019548:	460f      	mov	r7, r1
 801954a:	bb23      	cbnz	r3, 8019596 <_strtod_l+0xb66>
 801954c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019550:	9010      	str	r0, [sp, #64]	; 0x40
 8019552:	9311      	str	r3, [sp, #68]	; 0x44
 8019554:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019558:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801955c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801955e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019560:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8019564:	1a9b      	subs	r3, r3, r2
 8019566:	930f      	str	r3, [sp, #60]	; 0x3c
 8019568:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801956c:	eeb0 0a48 	vmov.f32	s0, s16
 8019570:	eef0 0a68 	vmov.f32	s1, s17
 8019574:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019578:	f7ff f8fc 	bl	8018774 <__ulp>
 801957c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019580:	ec53 2b10 	vmov	r2, r3, d0
 8019584:	f7e7 f860 	bl	8000648 <__aeabi_dmul>
 8019588:	ec53 2b18 	vmov	r2, r3, d8
 801958c:	f7e6 fea6 	bl	80002dc <__adddf3>
 8019590:	4680      	mov	r8, r0
 8019592:	4689      	mov	r9, r1
 8019594:	e78d      	b.n	80194b2 <_strtod_l+0xa82>
 8019596:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801959a:	e7db      	b.n	8019554 <_strtod_l+0xb24>
 801959c:	a314      	add	r3, pc, #80	; (adr r3, 80195f0 <_strtod_l+0xbc0>)
 801959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195a2:	f7e7 fac3 	bl	8000b2c <__aeabi_dcmplt>
 80195a6:	e7b3      	b.n	8019510 <_strtod_l+0xae0>
 80195a8:	2300      	movs	r3, #0
 80195aa:	930a      	str	r3, [sp, #40]	; 0x28
 80195ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80195ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80195b0:	6013      	str	r3, [r2, #0]
 80195b2:	f7ff ba7c 	b.w	8018aae <_strtod_l+0x7e>
 80195b6:	2a65      	cmp	r2, #101	; 0x65
 80195b8:	f43f ab75 	beq.w	8018ca6 <_strtod_l+0x276>
 80195bc:	2a45      	cmp	r2, #69	; 0x45
 80195be:	f43f ab72 	beq.w	8018ca6 <_strtod_l+0x276>
 80195c2:	2301      	movs	r3, #1
 80195c4:	f7ff bbaa 	b.w	8018d1c <_strtod_l+0x2ec>
 80195c8:	00000000 	.word	0x00000000
 80195cc:	bff00000 	.word	0xbff00000
 80195d0:	00000000 	.word	0x00000000
 80195d4:	3ff00000 	.word	0x3ff00000
 80195d8:	94a03595 	.word	0x94a03595
 80195dc:	3fdfffff 	.word	0x3fdfffff
 80195e0:	35afe535 	.word	0x35afe535
 80195e4:	3fe00000 	.word	0x3fe00000
 80195e8:	ffc00000 	.word	0xffc00000
 80195ec:	41dfffff 	.word	0x41dfffff
 80195f0:	94a03595 	.word	0x94a03595
 80195f4:	3fcfffff 	.word	0x3fcfffff
 80195f8:	3ff00000 	.word	0x3ff00000
 80195fc:	3fe00000 	.word	0x3fe00000
 8019600:	7ff00000 	.word	0x7ff00000
 8019604:	7fe00000 	.word	0x7fe00000
 8019608:	7c9fffff 	.word	0x7c9fffff
 801960c:	7fefffff 	.word	0x7fefffff

08019610 <_strtod_r>:
 8019610:	4b01      	ldr	r3, [pc, #4]	; (8019618 <_strtod_r+0x8>)
 8019612:	f7ff ba0d 	b.w	8018a30 <_strtod_l>
 8019616:	bf00      	nop
 8019618:	200003d4 	.word	0x200003d4

0801961c <_strtol_l.constprop.0>:
 801961c:	2b01      	cmp	r3, #1
 801961e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019622:	d001      	beq.n	8019628 <_strtol_l.constprop.0+0xc>
 8019624:	2b24      	cmp	r3, #36	; 0x24
 8019626:	d906      	bls.n	8019636 <_strtol_l.constprop.0+0x1a>
 8019628:	f7fd fd7a 	bl	8017120 <__errno>
 801962c:	2316      	movs	r3, #22
 801962e:	6003      	str	r3, [r0, #0]
 8019630:	2000      	movs	r0, #0
 8019632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019636:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801971c <_strtol_l.constprop.0+0x100>
 801963a:	460d      	mov	r5, r1
 801963c:	462e      	mov	r6, r5
 801963e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019642:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8019646:	f017 0708 	ands.w	r7, r7, #8
 801964a:	d1f7      	bne.n	801963c <_strtol_l.constprop.0+0x20>
 801964c:	2c2d      	cmp	r4, #45	; 0x2d
 801964e:	d132      	bne.n	80196b6 <_strtol_l.constprop.0+0x9a>
 8019650:	782c      	ldrb	r4, [r5, #0]
 8019652:	2701      	movs	r7, #1
 8019654:	1cb5      	adds	r5, r6, #2
 8019656:	2b00      	cmp	r3, #0
 8019658:	d05b      	beq.n	8019712 <_strtol_l.constprop.0+0xf6>
 801965a:	2b10      	cmp	r3, #16
 801965c:	d109      	bne.n	8019672 <_strtol_l.constprop.0+0x56>
 801965e:	2c30      	cmp	r4, #48	; 0x30
 8019660:	d107      	bne.n	8019672 <_strtol_l.constprop.0+0x56>
 8019662:	782c      	ldrb	r4, [r5, #0]
 8019664:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019668:	2c58      	cmp	r4, #88	; 0x58
 801966a:	d14d      	bne.n	8019708 <_strtol_l.constprop.0+0xec>
 801966c:	786c      	ldrb	r4, [r5, #1]
 801966e:	2310      	movs	r3, #16
 8019670:	3502      	adds	r5, #2
 8019672:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019676:	f108 38ff 	add.w	r8, r8, #4294967295
 801967a:	f04f 0e00 	mov.w	lr, #0
 801967e:	fbb8 f9f3 	udiv	r9, r8, r3
 8019682:	4676      	mov	r6, lr
 8019684:	fb03 8a19 	mls	sl, r3, r9, r8
 8019688:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801968c:	f1bc 0f09 	cmp.w	ip, #9
 8019690:	d816      	bhi.n	80196c0 <_strtol_l.constprop.0+0xa4>
 8019692:	4664      	mov	r4, ip
 8019694:	42a3      	cmp	r3, r4
 8019696:	dd24      	ble.n	80196e2 <_strtol_l.constprop.0+0xc6>
 8019698:	f1be 3fff 	cmp.w	lr, #4294967295
 801969c:	d008      	beq.n	80196b0 <_strtol_l.constprop.0+0x94>
 801969e:	45b1      	cmp	r9, r6
 80196a0:	d31c      	bcc.n	80196dc <_strtol_l.constprop.0+0xc0>
 80196a2:	d101      	bne.n	80196a8 <_strtol_l.constprop.0+0x8c>
 80196a4:	45a2      	cmp	sl, r4
 80196a6:	db19      	blt.n	80196dc <_strtol_l.constprop.0+0xc0>
 80196a8:	fb06 4603 	mla	r6, r6, r3, r4
 80196ac:	f04f 0e01 	mov.w	lr, #1
 80196b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80196b4:	e7e8      	b.n	8019688 <_strtol_l.constprop.0+0x6c>
 80196b6:	2c2b      	cmp	r4, #43	; 0x2b
 80196b8:	bf04      	itt	eq
 80196ba:	782c      	ldrbeq	r4, [r5, #0]
 80196bc:	1cb5      	addeq	r5, r6, #2
 80196be:	e7ca      	b.n	8019656 <_strtol_l.constprop.0+0x3a>
 80196c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80196c4:	f1bc 0f19 	cmp.w	ip, #25
 80196c8:	d801      	bhi.n	80196ce <_strtol_l.constprop.0+0xb2>
 80196ca:	3c37      	subs	r4, #55	; 0x37
 80196cc:	e7e2      	b.n	8019694 <_strtol_l.constprop.0+0x78>
 80196ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80196d2:	f1bc 0f19 	cmp.w	ip, #25
 80196d6:	d804      	bhi.n	80196e2 <_strtol_l.constprop.0+0xc6>
 80196d8:	3c57      	subs	r4, #87	; 0x57
 80196da:	e7db      	b.n	8019694 <_strtol_l.constprop.0+0x78>
 80196dc:	f04f 3eff 	mov.w	lr, #4294967295
 80196e0:	e7e6      	b.n	80196b0 <_strtol_l.constprop.0+0x94>
 80196e2:	f1be 3fff 	cmp.w	lr, #4294967295
 80196e6:	d105      	bne.n	80196f4 <_strtol_l.constprop.0+0xd8>
 80196e8:	2322      	movs	r3, #34	; 0x22
 80196ea:	6003      	str	r3, [r0, #0]
 80196ec:	4646      	mov	r6, r8
 80196ee:	b942      	cbnz	r2, 8019702 <_strtol_l.constprop.0+0xe6>
 80196f0:	4630      	mov	r0, r6
 80196f2:	e79e      	b.n	8019632 <_strtol_l.constprop.0+0x16>
 80196f4:	b107      	cbz	r7, 80196f8 <_strtol_l.constprop.0+0xdc>
 80196f6:	4276      	negs	r6, r6
 80196f8:	2a00      	cmp	r2, #0
 80196fa:	d0f9      	beq.n	80196f0 <_strtol_l.constprop.0+0xd4>
 80196fc:	f1be 0f00 	cmp.w	lr, #0
 8019700:	d000      	beq.n	8019704 <_strtol_l.constprop.0+0xe8>
 8019702:	1e69      	subs	r1, r5, #1
 8019704:	6011      	str	r1, [r2, #0]
 8019706:	e7f3      	b.n	80196f0 <_strtol_l.constprop.0+0xd4>
 8019708:	2430      	movs	r4, #48	; 0x30
 801970a:	2b00      	cmp	r3, #0
 801970c:	d1b1      	bne.n	8019672 <_strtol_l.constprop.0+0x56>
 801970e:	2308      	movs	r3, #8
 8019710:	e7af      	b.n	8019672 <_strtol_l.constprop.0+0x56>
 8019712:	2c30      	cmp	r4, #48	; 0x30
 8019714:	d0a5      	beq.n	8019662 <_strtol_l.constprop.0+0x46>
 8019716:	230a      	movs	r3, #10
 8019718:	e7ab      	b.n	8019672 <_strtol_l.constprop.0+0x56>
 801971a:	bf00      	nop
 801971c:	0801d881 	.word	0x0801d881

08019720 <_strtol_r>:
 8019720:	f7ff bf7c 	b.w	801961c <_strtol_l.constprop.0>

08019724 <__ssputs_r>:
 8019724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019728:	688e      	ldr	r6, [r1, #8]
 801972a:	461f      	mov	r7, r3
 801972c:	42be      	cmp	r6, r7
 801972e:	680b      	ldr	r3, [r1, #0]
 8019730:	4682      	mov	sl, r0
 8019732:	460c      	mov	r4, r1
 8019734:	4690      	mov	r8, r2
 8019736:	d82c      	bhi.n	8019792 <__ssputs_r+0x6e>
 8019738:	898a      	ldrh	r2, [r1, #12]
 801973a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801973e:	d026      	beq.n	801978e <__ssputs_r+0x6a>
 8019740:	6965      	ldr	r5, [r4, #20]
 8019742:	6909      	ldr	r1, [r1, #16]
 8019744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019748:	eba3 0901 	sub.w	r9, r3, r1
 801974c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019750:	1c7b      	adds	r3, r7, #1
 8019752:	444b      	add	r3, r9
 8019754:	106d      	asrs	r5, r5, #1
 8019756:	429d      	cmp	r5, r3
 8019758:	bf38      	it	cc
 801975a:	461d      	movcc	r5, r3
 801975c:	0553      	lsls	r3, r2, #21
 801975e:	d527      	bpl.n	80197b0 <__ssputs_r+0x8c>
 8019760:	4629      	mov	r1, r5
 8019762:	f7fe fc0f 	bl	8017f84 <_malloc_r>
 8019766:	4606      	mov	r6, r0
 8019768:	b360      	cbz	r0, 80197c4 <__ssputs_r+0xa0>
 801976a:	6921      	ldr	r1, [r4, #16]
 801976c:	464a      	mov	r2, r9
 801976e:	f7fd fd04 	bl	801717a <memcpy>
 8019772:	89a3      	ldrh	r3, [r4, #12]
 8019774:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801977c:	81a3      	strh	r3, [r4, #12]
 801977e:	6126      	str	r6, [r4, #16]
 8019780:	6165      	str	r5, [r4, #20]
 8019782:	444e      	add	r6, r9
 8019784:	eba5 0509 	sub.w	r5, r5, r9
 8019788:	6026      	str	r6, [r4, #0]
 801978a:	60a5      	str	r5, [r4, #8]
 801978c:	463e      	mov	r6, r7
 801978e:	42be      	cmp	r6, r7
 8019790:	d900      	bls.n	8019794 <__ssputs_r+0x70>
 8019792:	463e      	mov	r6, r7
 8019794:	6820      	ldr	r0, [r4, #0]
 8019796:	4632      	mov	r2, r6
 8019798:	4641      	mov	r1, r8
 801979a:	f000 f9c9 	bl	8019b30 <memmove>
 801979e:	68a3      	ldr	r3, [r4, #8]
 80197a0:	1b9b      	subs	r3, r3, r6
 80197a2:	60a3      	str	r3, [r4, #8]
 80197a4:	6823      	ldr	r3, [r4, #0]
 80197a6:	4433      	add	r3, r6
 80197a8:	6023      	str	r3, [r4, #0]
 80197aa:	2000      	movs	r0, #0
 80197ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197b0:	462a      	mov	r2, r5
 80197b2:	f000 fd9e 	bl	801a2f2 <_realloc_r>
 80197b6:	4606      	mov	r6, r0
 80197b8:	2800      	cmp	r0, #0
 80197ba:	d1e0      	bne.n	801977e <__ssputs_r+0x5a>
 80197bc:	6921      	ldr	r1, [r4, #16]
 80197be:	4650      	mov	r0, sl
 80197c0:	f7fe fb6c 	bl	8017e9c <_free_r>
 80197c4:	230c      	movs	r3, #12
 80197c6:	f8ca 3000 	str.w	r3, [sl]
 80197ca:	89a3      	ldrh	r3, [r4, #12]
 80197cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197d0:	81a3      	strh	r3, [r4, #12]
 80197d2:	f04f 30ff 	mov.w	r0, #4294967295
 80197d6:	e7e9      	b.n	80197ac <__ssputs_r+0x88>

080197d8 <_svfiprintf_r>:
 80197d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197dc:	4698      	mov	r8, r3
 80197de:	898b      	ldrh	r3, [r1, #12]
 80197e0:	061b      	lsls	r3, r3, #24
 80197e2:	b09d      	sub	sp, #116	; 0x74
 80197e4:	4607      	mov	r7, r0
 80197e6:	460d      	mov	r5, r1
 80197e8:	4614      	mov	r4, r2
 80197ea:	d50e      	bpl.n	801980a <_svfiprintf_r+0x32>
 80197ec:	690b      	ldr	r3, [r1, #16]
 80197ee:	b963      	cbnz	r3, 801980a <_svfiprintf_r+0x32>
 80197f0:	2140      	movs	r1, #64	; 0x40
 80197f2:	f7fe fbc7 	bl	8017f84 <_malloc_r>
 80197f6:	6028      	str	r0, [r5, #0]
 80197f8:	6128      	str	r0, [r5, #16]
 80197fa:	b920      	cbnz	r0, 8019806 <_svfiprintf_r+0x2e>
 80197fc:	230c      	movs	r3, #12
 80197fe:	603b      	str	r3, [r7, #0]
 8019800:	f04f 30ff 	mov.w	r0, #4294967295
 8019804:	e0d0      	b.n	80199a8 <_svfiprintf_r+0x1d0>
 8019806:	2340      	movs	r3, #64	; 0x40
 8019808:	616b      	str	r3, [r5, #20]
 801980a:	2300      	movs	r3, #0
 801980c:	9309      	str	r3, [sp, #36]	; 0x24
 801980e:	2320      	movs	r3, #32
 8019810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019814:	f8cd 800c 	str.w	r8, [sp, #12]
 8019818:	2330      	movs	r3, #48	; 0x30
 801981a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80199c0 <_svfiprintf_r+0x1e8>
 801981e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019822:	f04f 0901 	mov.w	r9, #1
 8019826:	4623      	mov	r3, r4
 8019828:	469a      	mov	sl, r3
 801982a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801982e:	b10a      	cbz	r2, 8019834 <_svfiprintf_r+0x5c>
 8019830:	2a25      	cmp	r2, #37	; 0x25
 8019832:	d1f9      	bne.n	8019828 <_svfiprintf_r+0x50>
 8019834:	ebba 0b04 	subs.w	fp, sl, r4
 8019838:	d00b      	beq.n	8019852 <_svfiprintf_r+0x7a>
 801983a:	465b      	mov	r3, fp
 801983c:	4622      	mov	r2, r4
 801983e:	4629      	mov	r1, r5
 8019840:	4638      	mov	r0, r7
 8019842:	f7ff ff6f 	bl	8019724 <__ssputs_r>
 8019846:	3001      	adds	r0, #1
 8019848:	f000 80a9 	beq.w	801999e <_svfiprintf_r+0x1c6>
 801984c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801984e:	445a      	add	r2, fp
 8019850:	9209      	str	r2, [sp, #36]	; 0x24
 8019852:	f89a 3000 	ldrb.w	r3, [sl]
 8019856:	2b00      	cmp	r3, #0
 8019858:	f000 80a1 	beq.w	801999e <_svfiprintf_r+0x1c6>
 801985c:	2300      	movs	r3, #0
 801985e:	f04f 32ff 	mov.w	r2, #4294967295
 8019862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019866:	f10a 0a01 	add.w	sl, sl, #1
 801986a:	9304      	str	r3, [sp, #16]
 801986c:	9307      	str	r3, [sp, #28]
 801986e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019872:	931a      	str	r3, [sp, #104]	; 0x68
 8019874:	4654      	mov	r4, sl
 8019876:	2205      	movs	r2, #5
 8019878:	f814 1b01 	ldrb.w	r1, [r4], #1
 801987c:	4850      	ldr	r0, [pc, #320]	; (80199c0 <_svfiprintf_r+0x1e8>)
 801987e:	f7e6 fccf 	bl	8000220 <memchr>
 8019882:	9a04      	ldr	r2, [sp, #16]
 8019884:	b9d8      	cbnz	r0, 80198be <_svfiprintf_r+0xe6>
 8019886:	06d0      	lsls	r0, r2, #27
 8019888:	bf44      	itt	mi
 801988a:	2320      	movmi	r3, #32
 801988c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019890:	0711      	lsls	r1, r2, #28
 8019892:	bf44      	itt	mi
 8019894:	232b      	movmi	r3, #43	; 0x2b
 8019896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801989a:	f89a 3000 	ldrb.w	r3, [sl]
 801989e:	2b2a      	cmp	r3, #42	; 0x2a
 80198a0:	d015      	beq.n	80198ce <_svfiprintf_r+0xf6>
 80198a2:	9a07      	ldr	r2, [sp, #28]
 80198a4:	4654      	mov	r4, sl
 80198a6:	2000      	movs	r0, #0
 80198a8:	f04f 0c0a 	mov.w	ip, #10
 80198ac:	4621      	mov	r1, r4
 80198ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198b2:	3b30      	subs	r3, #48	; 0x30
 80198b4:	2b09      	cmp	r3, #9
 80198b6:	d94d      	bls.n	8019954 <_svfiprintf_r+0x17c>
 80198b8:	b1b0      	cbz	r0, 80198e8 <_svfiprintf_r+0x110>
 80198ba:	9207      	str	r2, [sp, #28]
 80198bc:	e014      	b.n	80198e8 <_svfiprintf_r+0x110>
 80198be:	eba0 0308 	sub.w	r3, r0, r8
 80198c2:	fa09 f303 	lsl.w	r3, r9, r3
 80198c6:	4313      	orrs	r3, r2
 80198c8:	9304      	str	r3, [sp, #16]
 80198ca:	46a2      	mov	sl, r4
 80198cc:	e7d2      	b.n	8019874 <_svfiprintf_r+0x9c>
 80198ce:	9b03      	ldr	r3, [sp, #12]
 80198d0:	1d19      	adds	r1, r3, #4
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	9103      	str	r1, [sp, #12]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	bfbb      	ittet	lt
 80198da:	425b      	neglt	r3, r3
 80198dc:	f042 0202 	orrlt.w	r2, r2, #2
 80198e0:	9307      	strge	r3, [sp, #28]
 80198e2:	9307      	strlt	r3, [sp, #28]
 80198e4:	bfb8      	it	lt
 80198e6:	9204      	strlt	r2, [sp, #16]
 80198e8:	7823      	ldrb	r3, [r4, #0]
 80198ea:	2b2e      	cmp	r3, #46	; 0x2e
 80198ec:	d10c      	bne.n	8019908 <_svfiprintf_r+0x130>
 80198ee:	7863      	ldrb	r3, [r4, #1]
 80198f0:	2b2a      	cmp	r3, #42	; 0x2a
 80198f2:	d134      	bne.n	801995e <_svfiprintf_r+0x186>
 80198f4:	9b03      	ldr	r3, [sp, #12]
 80198f6:	1d1a      	adds	r2, r3, #4
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	9203      	str	r2, [sp, #12]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	bfb8      	it	lt
 8019900:	f04f 33ff 	movlt.w	r3, #4294967295
 8019904:	3402      	adds	r4, #2
 8019906:	9305      	str	r3, [sp, #20]
 8019908:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80199d0 <_svfiprintf_r+0x1f8>
 801990c:	7821      	ldrb	r1, [r4, #0]
 801990e:	2203      	movs	r2, #3
 8019910:	4650      	mov	r0, sl
 8019912:	f7e6 fc85 	bl	8000220 <memchr>
 8019916:	b138      	cbz	r0, 8019928 <_svfiprintf_r+0x150>
 8019918:	9b04      	ldr	r3, [sp, #16]
 801991a:	eba0 000a 	sub.w	r0, r0, sl
 801991e:	2240      	movs	r2, #64	; 0x40
 8019920:	4082      	lsls	r2, r0
 8019922:	4313      	orrs	r3, r2
 8019924:	3401      	adds	r4, #1
 8019926:	9304      	str	r3, [sp, #16]
 8019928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801992c:	4825      	ldr	r0, [pc, #148]	; (80199c4 <_svfiprintf_r+0x1ec>)
 801992e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019932:	2206      	movs	r2, #6
 8019934:	f7e6 fc74 	bl	8000220 <memchr>
 8019938:	2800      	cmp	r0, #0
 801993a:	d038      	beq.n	80199ae <_svfiprintf_r+0x1d6>
 801993c:	4b22      	ldr	r3, [pc, #136]	; (80199c8 <_svfiprintf_r+0x1f0>)
 801993e:	bb1b      	cbnz	r3, 8019988 <_svfiprintf_r+0x1b0>
 8019940:	9b03      	ldr	r3, [sp, #12]
 8019942:	3307      	adds	r3, #7
 8019944:	f023 0307 	bic.w	r3, r3, #7
 8019948:	3308      	adds	r3, #8
 801994a:	9303      	str	r3, [sp, #12]
 801994c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801994e:	4433      	add	r3, r6
 8019950:	9309      	str	r3, [sp, #36]	; 0x24
 8019952:	e768      	b.n	8019826 <_svfiprintf_r+0x4e>
 8019954:	fb0c 3202 	mla	r2, ip, r2, r3
 8019958:	460c      	mov	r4, r1
 801995a:	2001      	movs	r0, #1
 801995c:	e7a6      	b.n	80198ac <_svfiprintf_r+0xd4>
 801995e:	2300      	movs	r3, #0
 8019960:	3401      	adds	r4, #1
 8019962:	9305      	str	r3, [sp, #20]
 8019964:	4619      	mov	r1, r3
 8019966:	f04f 0c0a 	mov.w	ip, #10
 801996a:	4620      	mov	r0, r4
 801996c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019970:	3a30      	subs	r2, #48	; 0x30
 8019972:	2a09      	cmp	r2, #9
 8019974:	d903      	bls.n	801997e <_svfiprintf_r+0x1a6>
 8019976:	2b00      	cmp	r3, #0
 8019978:	d0c6      	beq.n	8019908 <_svfiprintf_r+0x130>
 801997a:	9105      	str	r1, [sp, #20]
 801997c:	e7c4      	b.n	8019908 <_svfiprintf_r+0x130>
 801997e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019982:	4604      	mov	r4, r0
 8019984:	2301      	movs	r3, #1
 8019986:	e7f0      	b.n	801996a <_svfiprintf_r+0x192>
 8019988:	ab03      	add	r3, sp, #12
 801998a:	9300      	str	r3, [sp, #0]
 801998c:	462a      	mov	r2, r5
 801998e:	4b0f      	ldr	r3, [pc, #60]	; (80199cc <_svfiprintf_r+0x1f4>)
 8019990:	a904      	add	r1, sp, #16
 8019992:	4638      	mov	r0, r7
 8019994:	f7fc fc76 	bl	8016284 <_printf_float>
 8019998:	1c42      	adds	r2, r0, #1
 801999a:	4606      	mov	r6, r0
 801999c:	d1d6      	bne.n	801994c <_svfiprintf_r+0x174>
 801999e:	89ab      	ldrh	r3, [r5, #12]
 80199a0:	065b      	lsls	r3, r3, #25
 80199a2:	f53f af2d 	bmi.w	8019800 <_svfiprintf_r+0x28>
 80199a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80199a8:	b01d      	add	sp, #116	; 0x74
 80199aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ae:	ab03      	add	r3, sp, #12
 80199b0:	9300      	str	r3, [sp, #0]
 80199b2:	462a      	mov	r2, r5
 80199b4:	4b05      	ldr	r3, [pc, #20]	; (80199cc <_svfiprintf_r+0x1f4>)
 80199b6:	a904      	add	r1, sp, #16
 80199b8:	4638      	mov	r0, r7
 80199ba:	f7fc ff07 	bl	80167cc <_printf_i>
 80199be:	e7eb      	b.n	8019998 <_svfiprintf_r+0x1c0>
 80199c0:	0801d981 	.word	0x0801d981
 80199c4:	0801d98b 	.word	0x0801d98b
 80199c8:	08016285 	.word	0x08016285
 80199cc:	08019725 	.word	0x08019725
 80199d0:	0801d987 	.word	0x0801d987

080199d4 <__sflush_r>:
 80199d4:	898a      	ldrh	r2, [r1, #12]
 80199d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199da:	4605      	mov	r5, r0
 80199dc:	0710      	lsls	r0, r2, #28
 80199de:	460c      	mov	r4, r1
 80199e0:	d458      	bmi.n	8019a94 <__sflush_r+0xc0>
 80199e2:	684b      	ldr	r3, [r1, #4]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	dc05      	bgt.n	80199f4 <__sflush_r+0x20>
 80199e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	dc02      	bgt.n	80199f4 <__sflush_r+0x20>
 80199ee:	2000      	movs	r0, #0
 80199f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199f6:	2e00      	cmp	r6, #0
 80199f8:	d0f9      	beq.n	80199ee <__sflush_r+0x1a>
 80199fa:	2300      	movs	r3, #0
 80199fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019a00:	682f      	ldr	r7, [r5, #0]
 8019a02:	6a21      	ldr	r1, [r4, #32]
 8019a04:	602b      	str	r3, [r5, #0]
 8019a06:	d032      	beq.n	8019a6e <__sflush_r+0x9a>
 8019a08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019a0a:	89a3      	ldrh	r3, [r4, #12]
 8019a0c:	075a      	lsls	r2, r3, #29
 8019a0e:	d505      	bpl.n	8019a1c <__sflush_r+0x48>
 8019a10:	6863      	ldr	r3, [r4, #4]
 8019a12:	1ac0      	subs	r0, r0, r3
 8019a14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a16:	b10b      	cbz	r3, 8019a1c <__sflush_r+0x48>
 8019a18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019a1a:	1ac0      	subs	r0, r0, r3
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	4602      	mov	r2, r0
 8019a20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019a22:	6a21      	ldr	r1, [r4, #32]
 8019a24:	4628      	mov	r0, r5
 8019a26:	47b0      	blx	r6
 8019a28:	1c43      	adds	r3, r0, #1
 8019a2a:	89a3      	ldrh	r3, [r4, #12]
 8019a2c:	d106      	bne.n	8019a3c <__sflush_r+0x68>
 8019a2e:	6829      	ldr	r1, [r5, #0]
 8019a30:	291d      	cmp	r1, #29
 8019a32:	d82b      	bhi.n	8019a8c <__sflush_r+0xb8>
 8019a34:	4a29      	ldr	r2, [pc, #164]	; (8019adc <__sflush_r+0x108>)
 8019a36:	410a      	asrs	r2, r1
 8019a38:	07d6      	lsls	r6, r2, #31
 8019a3a:	d427      	bmi.n	8019a8c <__sflush_r+0xb8>
 8019a3c:	2200      	movs	r2, #0
 8019a3e:	6062      	str	r2, [r4, #4]
 8019a40:	04d9      	lsls	r1, r3, #19
 8019a42:	6922      	ldr	r2, [r4, #16]
 8019a44:	6022      	str	r2, [r4, #0]
 8019a46:	d504      	bpl.n	8019a52 <__sflush_r+0x7e>
 8019a48:	1c42      	adds	r2, r0, #1
 8019a4a:	d101      	bne.n	8019a50 <__sflush_r+0x7c>
 8019a4c:	682b      	ldr	r3, [r5, #0]
 8019a4e:	b903      	cbnz	r3, 8019a52 <__sflush_r+0x7e>
 8019a50:	6560      	str	r0, [r4, #84]	; 0x54
 8019a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a54:	602f      	str	r7, [r5, #0]
 8019a56:	2900      	cmp	r1, #0
 8019a58:	d0c9      	beq.n	80199ee <__sflush_r+0x1a>
 8019a5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a5e:	4299      	cmp	r1, r3
 8019a60:	d002      	beq.n	8019a68 <__sflush_r+0x94>
 8019a62:	4628      	mov	r0, r5
 8019a64:	f7fe fa1a 	bl	8017e9c <_free_r>
 8019a68:	2000      	movs	r0, #0
 8019a6a:	6360      	str	r0, [r4, #52]	; 0x34
 8019a6c:	e7c0      	b.n	80199f0 <__sflush_r+0x1c>
 8019a6e:	2301      	movs	r3, #1
 8019a70:	4628      	mov	r0, r5
 8019a72:	47b0      	blx	r6
 8019a74:	1c41      	adds	r1, r0, #1
 8019a76:	d1c8      	bne.n	8019a0a <__sflush_r+0x36>
 8019a78:	682b      	ldr	r3, [r5, #0]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d0c5      	beq.n	8019a0a <__sflush_r+0x36>
 8019a7e:	2b1d      	cmp	r3, #29
 8019a80:	d001      	beq.n	8019a86 <__sflush_r+0xb2>
 8019a82:	2b16      	cmp	r3, #22
 8019a84:	d101      	bne.n	8019a8a <__sflush_r+0xb6>
 8019a86:	602f      	str	r7, [r5, #0]
 8019a88:	e7b1      	b.n	80199ee <__sflush_r+0x1a>
 8019a8a:	89a3      	ldrh	r3, [r4, #12]
 8019a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a90:	81a3      	strh	r3, [r4, #12]
 8019a92:	e7ad      	b.n	80199f0 <__sflush_r+0x1c>
 8019a94:	690f      	ldr	r7, [r1, #16]
 8019a96:	2f00      	cmp	r7, #0
 8019a98:	d0a9      	beq.n	80199ee <__sflush_r+0x1a>
 8019a9a:	0793      	lsls	r3, r2, #30
 8019a9c:	680e      	ldr	r6, [r1, #0]
 8019a9e:	bf08      	it	eq
 8019aa0:	694b      	ldreq	r3, [r1, #20]
 8019aa2:	600f      	str	r7, [r1, #0]
 8019aa4:	bf18      	it	ne
 8019aa6:	2300      	movne	r3, #0
 8019aa8:	eba6 0807 	sub.w	r8, r6, r7
 8019aac:	608b      	str	r3, [r1, #8]
 8019aae:	f1b8 0f00 	cmp.w	r8, #0
 8019ab2:	dd9c      	ble.n	80199ee <__sflush_r+0x1a>
 8019ab4:	6a21      	ldr	r1, [r4, #32]
 8019ab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019ab8:	4643      	mov	r3, r8
 8019aba:	463a      	mov	r2, r7
 8019abc:	4628      	mov	r0, r5
 8019abe:	47b0      	blx	r6
 8019ac0:	2800      	cmp	r0, #0
 8019ac2:	dc06      	bgt.n	8019ad2 <__sflush_r+0xfe>
 8019ac4:	89a3      	ldrh	r3, [r4, #12]
 8019ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019aca:	81a3      	strh	r3, [r4, #12]
 8019acc:	f04f 30ff 	mov.w	r0, #4294967295
 8019ad0:	e78e      	b.n	80199f0 <__sflush_r+0x1c>
 8019ad2:	4407      	add	r7, r0
 8019ad4:	eba8 0800 	sub.w	r8, r8, r0
 8019ad8:	e7e9      	b.n	8019aae <__sflush_r+0xda>
 8019ada:	bf00      	nop
 8019adc:	dfbffffe 	.word	0xdfbffffe

08019ae0 <_fflush_r>:
 8019ae0:	b538      	push	{r3, r4, r5, lr}
 8019ae2:	690b      	ldr	r3, [r1, #16]
 8019ae4:	4605      	mov	r5, r0
 8019ae6:	460c      	mov	r4, r1
 8019ae8:	b913      	cbnz	r3, 8019af0 <_fflush_r+0x10>
 8019aea:	2500      	movs	r5, #0
 8019aec:	4628      	mov	r0, r5
 8019aee:	bd38      	pop	{r3, r4, r5, pc}
 8019af0:	b118      	cbz	r0, 8019afa <_fflush_r+0x1a>
 8019af2:	6a03      	ldr	r3, [r0, #32]
 8019af4:	b90b      	cbnz	r3, 8019afa <_fflush_r+0x1a>
 8019af6:	f7fd fa27 	bl	8016f48 <__sinit>
 8019afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d0f3      	beq.n	8019aea <_fflush_r+0xa>
 8019b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019b04:	07d0      	lsls	r0, r2, #31
 8019b06:	d404      	bmi.n	8019b12 <_fflush_r+0x32>
 8019b08:	0599      	lsls	r1, r3, #22
 8019b0a:	d402      	bmi.n	8019b12 <_fflush_r+0x32>
 8019b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b0e:	f7fd fb32 	bl	8017176 <__retarget_lock_acquire_recursive>
 8019b12:	4628      	mov	r0, r5
 8019b14:	4621      	mov	r1, r4
 8019b16:	f7ff ff5d 	bl	80199d4 <__sflush_r>
 8019b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b1c:	07da      	lsls	r2, r3, #31
 8019b1e:	4605      	mov	r5, r0
 8019b20:	d4e4      	bmi.n	8019aec <_fflush_r+0xc>
 8019b22:	89a3      	ldrh	r3, [r4, #12]
 8019b24:	059b      	lsls	r3, r3, #22
 8019b26:	d4e1      	bmi.n	8019aec <_fflush_r+0xc>
 8019b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b2a:	f7fd fb25 	bl	8017178 <__retarget_lock_release_recursive>
 8019b2e:	e7dd      	b.n	8019aec <_fflush_r+0xc>

08019b30 <memmove>:
 8019b30:	4288      	cmp	r0, r1
 8019b32:	b510      	push	{r4, lr}
 8019b34:	eb01 0402 	add.w	r4, r1, r2
 8019b38:	d902      	bls.n	8019b40 <memmove+0x10>
 8019b3a:	4284      	cmp	r4, r0
 8019b3c:	4623      	mov	r3, r4
 8019b3e:	d807      	bhi.n	8019b50 <memmove+0x20>
 8019b40:	1e43      	subs	r3, r0, #1
 8019b42:	42a1      	cmp	r1, r4
 8019b44:	d008      	beq.n	8019b58 <memmove+0x28>
 8019b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019b4e:	e7f8      	b.n	8019b42 <memmove+0x12>
 8019b50:	4402      	add	r2, r0
 8019b52:	4601      	mov	r1, r0
 8019b54:	428a      	cmp	r2, r1
 8019b56:	d100      	bne.n	8019b5a <memmove+0x2a>
 8019b58:	bd10      	pop	{r4, pc}
 8019b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019b62:	e7f7      	b.n	8019b54 <memmove+0x24>

08019b64 <strncmp>:
 8019b64:	b510      	push	{r4, lr}
 8019b66:	b16a      	cbz	r2, 8019b84 <strncmp+0x20>
 8019b68:	3901      	subs	r1, #1
 8019b6a:	1884      	adds	r4, r0, r2
 8019b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019b74:	429a      	cmp	r2, r3
 8019b76:	d103      	bne.n	8019b80 <strncmp+0x1c>
 8019b78:	42a0      	cmp	r0, r4
 8019b7a:	d001      	beq.n	8019b80 <strncmp+0x1c>
 8019b7c:	2a00      	cmp	r2, #0
 8019b7e:	d1f5      	bne.n	8019b6c <strncmp+0x8>
 8019b80:	1ad0      	subs	r0, r2, r3
 8019b82:	bd10      	pop	{r4, pc}
 8019b84:	4610      	mov	r0, r2
 8019b86:	e7fc      	b.n	8019b82 <strncmp+0x1e>

08019b88 <_sbrk_r>:
 8019b88:	b538      	push	{r3, r4, r5, lr}
 8019b8a:	4d06      	ldr	r5, [pc, #24]	; (8019ba4 <_sbrk_r+0x1c>)
 8019b8c:	2300      	movs	r3, #0
 8019b8e:	4604      	mov	r4, r0
 8019b90:	4608      	mov	r0, r1
 8019b92:	602b      	str	r3, [r5, #0]
 8019b94:	f7eb fd70 	bl	8005678 <_sbrk>
 8019b98:	1c43      	adds	r3, r0, #1
 8019b9a:	d102      	bne.n	8019ba2 <_sbrk_r+0x1a>
 8019b9c:	682b      	ldr	r3, [r5, #0]
 8019b9e:	b103      	cbz	r3, 8019ba2 <_sbrk_r+0x1a>
 8019ba0:	6023      	str	r3, [r4, #0]
 8019ba2:	bd38      	pop	{r3, r4, r5, pc}
 8019ba4:	200036e8 	.word	0x200036e8

08019ba8 <nan>:
 8019ba8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019bb0 <nan+0x8>
 8019bac:	4770      	bx	lr
 8019bae:	bf00      	nop
 8019bb0:	00000000 	.word	0x00000000
 8019bb4:	7ff80000 	.word	0x7ff80000

08019bb8 <__assert_func>:
 8019bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019bba:	4614      	mov	r4, r2
 8019bbc:	461a      	mov	r2, r3
 8019bbe:	4b09      	ldr	r3, [pc, #36]	; (8019be4 <__assert_func+0x2c>)
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	4605      	mov	r5, r0
 8019bc4:	68d8      	ldr	r0, [r3, #12]
 8019bc6:	b14c      	cbz	r4, 8019bdc <__assert_func+0x24>
 8019bc8:	4b07      	ldr	r3, [pc, #28]	; (8019be8 <__assert_func+0x30>)
 8019bca:	9100      	str	r1, [sp, #0]
 8019bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019bd0:	4906      	ldr	r1, [pc, #24]	; (8019bec <__assert_func+0x34>)
 8019bd2:	462b      	mov	r3, r5
 8019bd4:	f000 fbca 	bl	801a36c <fiprintf>
 8019bd8:	f000 fbda 	bl	801a390 <abort>
 8019bdc:	4b04      	ldr	r3, [pc, #16]	; (8019bf0 <__assert_func+0x38>)
 8019bde:	461c      	mov	r4, r3
 8019be0:	e7f3      	b.n	8019bca <__assert_func+0x12>
 8019be2:	bf00      	nop
 8019be4:	200003d0 	.word	0x200003d0
 8019be8:	0801d99a 	.word	0x0801d99a
 8019bec:	0801d9a7 	.word	0x0801d9a7
 8019bf0:	0801d9d5 	.word	0x0801d9d5

08019bf4 <_calloc_r>:
 8019bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019bf6:	fba1 2402 	umull	r2, r4, r1, r2
 8019bfa:	b94c      	cbnz	r4, 8019c10 <_calloc_r+0x1c>
 8019bfc:	4611      	mov	r1, r2
 8019bfe:	9201      	str	r2, [sp, #4]
 8019c00:	f7fe f9c0 	bl	8017f84 <_malloc_r>
 8019c04:	9a01      	ldr	r2, [sp, #4]
 8019c06:	4605      	mov	r5, r0
 8019c08:	b930      	cbnz	r0, 8019c18 <_calloc_r+0x24>
 8019c0a:	4628      	mov	r0, r5
 8019c0c:	b003      	add	sp, #12
 8019c0e:	bd30      	pop	{r4, r5, pc}
 8019c10:	220c      	movs	r2, #12
 8019c12:	6002      	str	r2, [r0, #0]
 8019c14:	2500      	movs	r5, #0
 8019c16:	e7f8      	b.n	8019c0a <_calloc_r+0x16>
 8019c18:	4621      	mov	r1, r4
 8019c1a:	f7fd fa2e 	bl	801707a <memset>
 8019c1e:	e7f4      	b.n	8019c0a <_calloc_r+0x16>

08019c20 <rshift>:
 8019c20:	6903      	ldr	r3, [r0, #16]
 8019c22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019c26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019c2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019c2e:	f100 0414 	add.w	r4, r0, #20
 8019c32:	dd45      	ble.n	8019cc0 <rshift+0xa0>
 8019c34:	f011 011f 	ands.w	r1, r1, #31
 8019c38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019c3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019c40:	d10c      	bne.n	8019c5c <rshift+0x3c>
 8019c42:	f100 0710 	add.w	r7, r0, #16
 8019c46:	4629      	mov	r1, r5
 8019c48:	42b1      	cmp	r1, r6
 8019c4a:	d334      	bcc.n	8019cb6 <rshift+0x96>
 8019c4c:	1a9b      	subs	r3, r3, r2
 8019c4e:	009b      	lsls	r3, r3, #2
 8019c50:	1eea      	subs	r2, r5, #3
 8019c52:	4296      	cmp	r6, r2
 8019c54:	bf38      	it	cc
 8019c56:	2300      	movcc	r3, #0
 8019c58:	4423      	add	r3, r4
 8019c5a:	e015      	b.n	8019c88 <rshift+0x68>
 8019c5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019c60:	f1c1 0820 	rsb	r8, r1, #32
 8019c64:	40cf      	lsrs	r7, r1
 8019c66:	f105 0e04 	add.w	lr, r5, #4
 8019c6a:	46a1      	mov	r9, r4
 8019c6c:	4576      	cmp	r6, lr
 8019c6e:	46f4      	mov	ip, lr
 8019c70:	d815      	bhi.n	8019c9e <rshift+0x7e>
 8019c72:	1a9a      	subs	r2, r3, r2
 8019c74:	0092      	lsls	r2, r2, #2
 8019c76:	3a04      	subs	r2, #4
 8019c78:	3501      	adds	r5, #1
 8019c7a:	42ae      	cmp	r6, r5
 8019c7c:	bf38      	it	cc
 8019c7e:	2200      	movcc	r2, #0
 8019c80:	18a3      	adds	r3, r4, r2
 8019c82:	50a7      	str	r7, [r4, r2]
 8019c84:	b107      	cbz	r7, 8019c88 <rshift+0x68>
 8019c86:	3304      	adds	r3, #4
 8019c88:	1b1a      	subs	r2, r3, r4
 8019c8a:	42a3      	cmp	r3, r4
 8019c8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019c90:	bf08      	it	eq
 8019c92:	2300      	moveq	r3, #0
 8019c94:	6102      	str	r2, [r0, #16]
 8019c96:	bf08      	it	eq
 8019c98:	6143      	streq	r3, [r0, #20]
 8019c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c9e:	f8dc c000 	ldr.w	ip, [ip]
 8019ca2:	fa0c fc08 	lsl.w	ip, ip, r8
 8019ca6:	ea4c 0707 	orr.w	r7, ip, r7
 8019caa:	f849 7b04 	str.w	r7, [r9], #4
 8019cae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019cb2:	40cf      	lsrs	r7, r1
 8019cb4:	e7da      	b.n	8019c6c <rshift+0x4c>
 8019cb6:	f851 cb04 	ldr.w	ip, [r1], #4
 8019cba:	f847 cf04 	str.w	ip, [r7, #4]!
 8019cbe:	e7c3      	b.n	8019c48 <rshift+0x28>
 8019cc0:	4623      	mov	r3, r4
 8019cc2:	e7e1      	b.n	8019c88 <rshift+0x68>

08019cc4 <__hexdig_fun>:
 8019cc4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019cc8:	2b09      	cmp	r3, #9
 8019cca:	d802      	bhi.n	8019cd2 <__hexdig_fun+0xe>
 8019ccc:	3820      	subs	r0, #32
 8019cce:	b2c0      	uxtb	r0, r0
 8019cd0:	4770      	bx	lr
 8019cd2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019cd6:	2b05      	cmp	r3, #5
 8019cd8:	d801      	bhi.n	8019cde <__hexdig_fun+0x1a>
 8019cda:	3847      	subs	r0, #71	; 0x47
 8019cdc:	e7f7      	b.n	8019cce <__hexdig_fun+0xa>
 8019cde:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019ce2:	2b05      	cmp	r3, #5
 8019ce4:	d801      	bhi.n	8019cea <__hexdig_fun+0x26>
 8019ce6:	3827      	subs	r0, #39	; 0x27
 8019ce8:	e7f1      	b.n	8019cce <__hexdig_fun+0xa>
 8019cea:	2000      	movs	r0, #0
 8019cec:	4770      	bx	lr
	...

08019cf0 <__gethex>:
 8019cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cf4:	4617      	mov	r7, r2
 8019cf6:	680a      	ldr	r2, [r1, #0]
 8019cf8:	b085      	sub	sp, #20
 8019cfa:	f102 0b02 	add.w	fp, r2, #2
 8019cfe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019d02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019d06:	4681      	mov	r9, r0
 8019d08:	468a      	mov	sl, r1
 8019d0a:	9302      	str	r3, [sp, #8]
 8019d0c:	32fe      	adds	r2, #254	; 0xfe
 8019d0e:	eb02 030b 	add.w	r3, r2, fp
 8019d12:	46d8      	mov	r8, fp
 8019d14:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8019d18:	9301      	str	r3, [sp, #4]
 8019d1a:	2830      	cmp	r0, #48	; 0x30
 8019d1c:	d0f7      	beq.n	8019d0e <__gethex+0x1e>
 8019d1e:	f7ff ffd1 	bl	8019cc4 <__hexdig_fun>
 8019d22:	4604      	mov	r4, r0
 8019d24:	2800      	cmp	r0, #0
 8019d26:	d138      	bne.n	8019d9a <__gethex+0xaa>
 8019d28:	49a7      	ldr	r1, [pc, #668]	; (8019fc8 <__gethex+0x2d8>)
 8019d2a:	2201      	movs	r2, #1
 8019d2c:	4640      	mov	r0, r8
 8019d2e:	f7ff ff19 	bl	8019b64 <strncmp>
 8019d32:	4606      	mov	r6, r0
 8019d34:	2800      	cmp	r0, #0
 8019d36:	d169      	bne.n	8019e0c <__gethex+0x11c>
 8019d38:	f898 0001 	ldrb.w	r0, [r8, #1]
 8019d3c:	465d      	mov	r5, fp
 8019d3e:	f7ff ffc1 	bl	8019cc4 <__hexdig_fun>
 8019d42:	2800      	cmp	r0, #0
 8019d44:	d064      	beq.n	8019e10 <__gethex+0x120>
 8019d46:	465a      	mov	r2, fp
 8019d48:	7810      	ldrb	r0, [r2, #0]
 8019d4a:	2830      	cmp	r0, #48	; 0x30
 8019d4c:	4690      	mov	r8, r2
 8019d4e:	f102 0201 	add.w	r2, r2, #1
 8019d52:	d0f9      	beq.n	8019d48 <__gethex+0x58>
 8019d54:	f7ff ffb6 	bl	8019cc4 <__hexdig_fun>
 8019d58:	2301      	movs	r3, #1
 8019d5a:	fab0 f480 	clz	r4, r0
 8019d5e:	0964      	lsrs	r4, r4, #5
 8019d60:	465e      	mov	r6, fp
 8019d62:	9301      	str	r3, [sp, #4]
 8019d64:	4642      	mov	r2, r8
 8019d66:	4615      	mov	r5, r2
 8019d68:	3201      	adds	r2, #1
 8019d6a:	7828      	ldrb	r0, [r5, #0]
 8019d6c:	f7ff ffaa 	bl	8019cc4 <__hexdig_fun>
 8019d70:	2800      	cmp	r0, #0
 8019d72:	d1f8      	bne.n	8019d66 <__gethex+0x76>
 8019d74:	4994      	ldr	r1, [pc, #592]	; (8019fc8 <__gethex+0x2d8>)
 8019d76:	2201      	movs	r2, #1
 8019d78:	4628      	mov	r0, r5
 8019d7a:	f7ff fef3 	bl	8019b64 <strncmp>
 8019d7e:	b978      	cbnz	r0, 8019da0 <__gethex+0xb0>
 8019d80:	b946      	cbnz	r6, 8019d94 <__gethex+0xa4>
 8019d82:	1c6e      	adds	r6, r5, #1
 8019d84:	4632      	mov	r2, r6
 8019d86:	4615      	mov	r5, r2
 8019d88:	3201      	adds	r2, #1
 8019d8a:	7828      	ldrb	r0, [r5, #0]
 8019d8c:	f7ff ff9a 	bl	8019cc4 <__hexdig_fun>
 8019d90:	2800      	cmp	r0, #0
 8019d92:	d1f8      	bne.n	8019d86 <__gethex+0x96>
 8019d94:	1b73      	subs	r3, r6, r5
 8019d96:	009e      	lsls	r6, r3, #2
 8019d98:	e004      	b.n	8019da4 <__gethex+0xb4>
 8019d9a:	2400      	movs	r4, #0
 8019d9c:	4626      	mov	r6, r4
 8019d9e:	e7e1      	b.n	8019d64 <__gethex+0x74>
 8019da0:	2e00      	cmp	r6, #0
 8019da2:	d1f7      	bne.n	8019d94 <__gethex+0xa4>
 8019da4:	782b      	ldrb	r3, [r5, #0]
 8019da6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019daa:	2b50      	cmp	r3, #80	; 0x50
 8019dac:	d13d      	bne.n	8019e2a <__gethex+0x13a>
 8019dae:	786b      	ldrb	r3, [r5, #1]
 8019db0:	2b2b      	cmp	r3, #43	; 0x2b
 8019db2:	d02f      	beq.n	8019e14 <__gethex+0x124>
 8019db4:	2b2d      	cmp	r3, #45	; 0x2d
 8019db6:	d031      	beq.n	8019e1c <__gethex+0x12c>
 8019db8:	1c69      	adds	r1, r5, #1
 8019dba:	f04f 0b00 	mov.w	fp, #0
 8019dbe:	7808      	ldrb	r0, [r1, #0]
 8019dc0:	f7ff ff80 	bl	8019cc4 <__hexdig_fun>
 8019dc4:	1e42      	subs	r2, r0, #1
 8019dc6:	b2d2      	uxtb	r2, r2
 8019dc8:	2a18      	cmp	r2, #24
 8019dca:	d82e      	bhi.n	8019e2a <__gethex+0x13a>
 8019dcc:	f1a0 0210 	sub.w	r2, r0, #16
 8019dd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019dd4:	f7ff ff76 	bl	8019cc4 <__hexdig_fun>
 8019dd8:	f100 3cff 	add.w	ip, r0, #4294967295
 8019ddc:	fa5f fc8c 	uxtb.w	ip, ip
 8019de0:	f1bc 0f18 	cmp.w	ip, #24
 8019de4:	d91d      	bls.n	8019e22 <__gethex+0x132>
 8019de6:	f1bb 0f00 	cmp.w	fp, #0
 8019dea:	d000      	beq.n	8019dee <__gethex+0xfe>
 8019dec:	4252      	negs	r2, r2
 8019dee:	4416      	add	r6, r2
 8019df0:	f8ca 1000 	str.w	r1, [sl]
 8019df4:	b1dc      	cbz	r4, 8019e2e <__gethex+0x13e>
 8019df6:	9b01      	ldr	r3, [sp, #4]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	bf14      	ite	ne
 8019dfc:	f04f 0800 	movne.w	r8, #0
 8019e00:	f04f 0806 	moveq.w	r8, #6
 8019e04:	4640      	mov	r0, r8
 8019e06:	b005      	add	sp, #20
 8019e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e0c:	4645      	mov	r5, r8
 8019e0e:	4626      	mov	r6, r4
 8019e10:	2401      	movs	r4, #1
 8019e12:	e7c7      	b.n	8019da4 <__gethex+0xb4>
 8019e14:	f04f 0b00 	mov.w	fp, #0
 8019e18:	1ca9      	adds	r1, r5, #2
 8019e1a:	e7d0      	b.n	8019dbe <__gethex+0xce>
 8019e1c:	f04f 0b01 	mov.w	fp, #1
 8019e20:	e7fa      	b.n	8019e18 <__gethex+0x128>
 8019e22:	230a      	movs	r3, #10
 8019e24:	fb03 0002 	mla	r0, r3, r2, r0
 8019e28:	e7d0      	b.n	8019dcc <__gethex+0xdc>
 8019e2a:	4629      	mov	r1, r5
 8019e2c:	e7e0      	b.n	8019df0 <__gethex+0x100>
 8019e2e:	eba5 0308 	sub.w	r3, r5, r8
 8019e32:	3b01      	subs	r3, #1
 8019e34:	4621      	mov	r1, r4
 8019e36:	2b07      	cmp	r3, #7
 8019e38:	dc0a      	bgt.n	8019e50 <__gethex+0x160>
 8019e3a:	4648      	mov	r0, r9
 8019e3c:	f7fe f92e 	bl	801809c <_Balloc>
 8019e40:	4604      	mov	r4, r0
 8019e42:	b940      	cbnz	r0, 8019e56 <__gethex+0x166>
 8019e44:	4b61      	ldr	r3, [pc, #388]	; (8019fcc <__gethex+0x2dc>)
 8019e46:	4602      	mov	r2, r0
 8019e48:	21e4      	movs	r1, #228	; 0xe4
 8019e4a:	4861      	ldr	r0, [pc, #388]	; (8019fd0 <__gethex+0x2e0>)
 8019e4c:	f7ff feb4 	bl	8019bb8 <__assert_func>
 8019e50:	3101      	adds	r1, #1
 8019e52:	105b      	asrs	r3, r3, #1
 8019e54:	e7ef      	b.n	8019e36 <__gethex+0x146>
 8019e56:	f100 0a14 	add.w	sl, r0, #20
 8019e5a:	2300      	movs	r3, #0
 8019e5c:	495a      	ldr	r1, [pc, #360]	; (8019fc8 <__gethex+0x2d8>)
 8019e5e:	f8cd a004 	str.w	sl, [sp, #4]
 8019e62:	469b      	mov	fp, r3
 8019e64:	45a8      	cmp	r8, r5
 8019e66:	d342      	bcc.n	8019eee <__gethex+0x1fe>
 8019e68:	9801      	ldr	r0, [sp, #4]
 8019e6a:	f840 bb04 	str.w	fp, [r0], #4
 8019e6e:	eba0 000a 	sub.w	r0, r0, sl
 8019e72:	1080      	asrs	r0, r0, #2
 8019e74:	6120      	str	r0, [r4, #16]
 8019e76:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8019e7a:	4658      	mov	r0, fp
 8019e7c:	f7fe fa00 	bl	8018280 <__hi0bits>
 8019e80:	683d      	ldr	r5, [r7, #0]
 8019e82:	eba8 0000 	sub.w	r0, r8, r0
 8019e86:	42a8      	cmp	r0, r5
 8019e88:	dd59      	ble.n	8019f3e <__gethex+0x24e>
 8019e8a:	eba0 0805 	sub.w	r8, r0, r5
 8019e8e:	4641      	mov	r1, r8
 8019e90:	4620      	mov	r0, r4
 8019e92:	f7fe fd8f 	bl	80189b4 <__any_on>
 8019e96:	4683      	mov	fp, r0
 8019e98:	b1b8      	cbz	r0, 8019eca <__gethex+0x1da>
 8019e9a:	f108 33ff 	add.w	r3, r8, #4294967295
 8019e9e:	1159      	asrs	r1, r3, #5
 8019ea0:	f003 021f 	and.w	r2, r3, #31
 8019ea4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019ea8:	f04f 0b01 	mov.w	fp, #1
 8019eac:	fa0b f202 	lsl.w	r2, fp, r2
 8019eb0:	420a      	tst	r2, r1
 8019eb2:	d00a      	beq.n	8019eca <__gethex+0x1da>
 8019eb4:	455b      	cmp	r3, fp
 8019eb6:	dd06      	ble.n	8019ec6 <__gethex+0x1d6>
 8019eb8:	f1a8 0102 	sub.w	r1, r8, #2
 8019ebc:	4620      	mov	r0, r4
 8019ebe:	f7fe fd79 	bl	80189b4 <__any_on>
 8019ec2:	2800      	cmp	r0, #0
 8019ec4:	d138      	bne.n	8019f38 <__gethex+0x248>
 8019ec6:	f04f 0b02 	mov.w	fp, #2
 8019eca:	4641      	mov	r1, r8
 8019ecc:	4620      	mov	r0, r4
 8019ece:	f7ff fea7 	bl	8019c20 <rshift>
 8019ed2:	4446      	add	r6, r8
 8019ed4:	68bb      	ldr	r3, [r7, #8]
 8019ed6:	42b3      	cmp	r3, r6
 8019ed8:	da41      	bge.n	8019f5e <__gethex+0x26e>
 8019eda:	4621      	mov	r1, r4
 8019edc:	4648      	mov	r0, r9
 8019ede:	f7fe f91d 	bl	801811c <_Bfree>
 8019ee2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	6013      	str	r3, [r2, #0]
 8019ee8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8019eec:	e78a      	b.n	8019e04 <__gethex+0x114>
 8019eee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8019ef2:	2a2e      	cmp	r2, #46	; 0x2e
 8019ef4:	d014      	beq.n	8019f20 <__gethex+0x230>
 8019ef6:	2b20      	cmp	r3, #32
 8019ef8:	d106      	bne.n	8019f08 <__gethex+0x218>
 8019efa:	9b01      	ldr	r3, [sp, #4]
 8019efc:	f843 bb04 	str.w	fp, [r3], #4
 8019f00:	f04f 0b00 	mov.w	fp, #0
 8019f04:	9301      	str	r3, [sp, #4]
 8019f06:	465b      	mov	r3, fp
 8019f08:	7828      	ldrb	r0, [r5, #0]
 8019f0a:	9303      	str	r3, [sp, #12]
 8019f0c:	f7ff feda 	bl	8019cc4 <__hexdig_fun>
 8019f10:	9b03      	ldr	r3, [sp, #12]
 8019f12:	f000 000f 	and.w	r0, r0, #15
 8019f16:	4098      	lsls	r0, r3
 8019f18:	ea4b 0b00 	orr.w	fp, fp, r0
 8019f1c:	3304      	adds	r3, #4
 8019f1e:	e7a1      	b.n	8019e64 <__gethex+0x174>
 8019f20:	45a8      	cmp	r8, r5
 8019f22:	d8e8      	bhi.n	8019ef6 <__gethex+0x206>
 8019f24:	2201      	movs	r2, #1
 8019f26:	4628      	mov	r0, r5
 8019f28:	9303      	str	r3, [sp, #12]
 8019f2a:	f7ff fe1b 	bl	8019b64 <strncmp>
 8019f2e:	4926      	ldr	r1, [pc, #152]	; (8019fc8 <__gethex+0x2d8>)
 8019f30:	9b03      	ldr	r3, [sp, #12]
 8019f32:	2800      	cmp	r0, #0
 8019f34:	d1df      	bne.n	8019ef6 <__gethex+0x206>
 8019f36:	e795      	b.n	8019e64 <__gethex+0x174>
 8019f38:	f04f 0b03 	mov.w	fp, #3
 8019f3c:	e7c5      	b.n	8019eca <__gethex+0x1da>
 8019f3e:	da0b      	bge.n	8019f58 <__gethex+0x268>
 8019f40:	eba5 0800 	sub.w	r8, r5, r0
 8019f44:	4621      	mov	r1, r4
 8019f46:	4642      	mov	r2, r8
 8019f48:	4648      	mov	r0, r9
 8019f4a:	f7fe fb01 	bl	8018550 <__lshift>
 8019f4e:	eba6 0608 	sub.w	r6, r6, r8
 8019f52:	4604      	mov	r4, r0
 8019f54:	f100 0a14 	add.w	sl, r0, #20
 8019f58:	f04f 0b00 	mov.w	fp, #0
 8019f5c:	e7ba      	b.n	8019ed4 <__gethex+0x1e4>
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	42b3      	cmp	r3, r6
 8019f62:	dd73      	ble.n	801a04c <__gethex+0x35c>
 8019f64:	1b9e      	subs	r6, r3, r6
 8019f66:	42b5      	cmp	r5, r6
 8019f68:	dc34      	bgt.n	8019fd4 <__gethex+0x2e4>
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	2b02      	cmp	r3, #2
 8019f6e:	d023      	beq.n	8019fb8 <__gethex+0x2c8>
 8019f70:	2b03      	cmp	r3, #3
 8019f72:	d025      	beq.n	8019fc0 <__gethex+0x2d0>
 8019f74:	2b01      	cmp	r3, #1
 8019f76:	d115      	bne.n	8019fa4 <__gethex+0x2b4>
 8019f78:	42b5      	cmp	r5, r6
 8019f7a:	d113      	bne.n	8019fa4 <__gethex+0x2b4>
 8019f7c:	2d01      	cmp	r5, #1
 8019f7e:	d10b      	bne.n	8019f98 <__gethex+0x2a8>
 8019f80:	9a02      	ldr	r2, [sp, #8]
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	6013      	str	r3, [r2, #0]
 8019f86:	2301      	movs	r3, #1
 8019f88:	6123      	str	r3, [r4, #16]
 8019f8a:	f8ca 3000 	str.w	r3, [sl]
 8019f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f90:	f04f 0862 	mov.w	r8, #98	; 0x62
 8019f94:	601c      	str	r4, [r3, #0]
 8019f96:	e735      	b.n	8019e04 <__gethex+0x114>
 8019f98:	1e69      	subs	r1, r5, #1
 8019f9a:	4620      	mov	r0, r4
 8019f9c:	f7fe fd0a 	bl	80189b4 <__any_on>
 8019fa0:	2800      	cmp	r0, #0
 8019fa2:	d1ed      	bne.n	8019f80 <__gethex+0x290>
 8019fa4:	4621      	mov	r1, r4
 8019fa6:	4648      	mov	r0, r9
 8019fa8:	f7fe f8b8 	bl	801811c <_Bfree>
 8019fac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019fae:	2300      	movs	r3, #0
 8019fb0:	6013      	str	r3, [r2, #0]
 8019fb2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8019fb6:	e725      	b.n	8019e04 <__gethex+0x114>
 8019fb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d1f2      	bne.n	8019fa4 <__gethex+0x2b4>
 8019fbe:	e7df      	b.n	8019f80 <__gethex+0x290>
 8019fc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d1dc      	bne.n	8019f80 <__gethex+0x290>
 8019fc6:	e7ed      	b.n	8019fa4 <__gethex+0x2b4>
 8019fc8:	0801d82c 	.word	0x0801d82c
 8019fcc:	0801d6c5 	.word	0x0801d6c5
 8019fd0:	0801d9d6 	.word	0x0801d9d6
 8019fd4:	f106 38ff 	add.w	r8, r6, #4294967295
 8019fd8:	f1bb 0f00 	cmp.w	fp, #0
 8019fdc:	d133      	bne.n	801a046 <__gethex+0x356>
 8019fde:	f1b8 0f00 	cmp.w	r8, #0
 8019fe2:	d004      	beq.n	8019fee <__gethex+0x2fe>
 8019fe4:	4641      	mov	r1, r8
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	f7fe fce4 	bl	80189b4 <__any_on>
 8019fec:	4683      	mov	fp, r0
 8019fee:	ea4f 1268 	mov.w	r2, r8, asr #5
 8019ff2:	2301      	movs	r3, #1
 8019ff4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019ff8:	f008 081f 	and.w	r8, r8, #31
 8019ffc:	fa03 f308 	lsl.w	r3, r3, r8
 801a000:	4213      	tst	r3, r2
 801a002:	4631      	mov	r1, r6
 801a004:	4620      	mov	r0, r4
 801a006:	bf18      	it	ne
 801a008:	f04b 0b02 	orrne.w	fp, fp, #2
 801a00c:	1bad      	subs	r5, r5, r6
 801a00e:	f7ff fe07 	bl	8019c20 <rshift>
 801a012:	687e      	ldr	r6, [r7, #4]
 801a014:	f04f 0802 	mov.w	r8, #2
 801a018:	f1bb 0f00 	cmp.w	fp, #0
 801a01c:	d04a      	beq.n	801a0b4 <__gethex+0x3c4>
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	2b02      	cmp	r3, #2
 801a022:	d016      	beq.n	801a052 <__gethex+0x362>
 801a024:	2b03      	cmp	r3, #3
 801a026:	d018      	beq.n	801a05a <__gethex+0x36a>
 801a028:	2b01      	cmp	r3, #1
 801a02a:	d109      	bne.n	801a040 <__gethex+0x350>
 801a02c:	f01b 0f02 	tst.w	fp, #2
 801a030:	d006      	beq.n	801a040 <__gethex+0x350>
 801a032:	f8da 3000 	ldr.w	r3, [sl]
 801a036:	ea4b 0b03 	orr.w	fp, fp, r3
 801a03a:	f01b 0f01 	tst.w	fp, #1
 801a03e:	d10f      	bne.n	801a060 <__gethex+0x370>
 801a040:	f048 0810 	orr.w	r8, r8, #16
 801a044:	e036      	b.n	801a0b4 <__gethex+0x3c4>
 801a046:	f04f 0b01 	mov.w	fp, #1
 801a04a:	e7d0      	b.n	8019fee <__gethex+0x2fe>
 801a04c:	f04f 0801 	mov.w	r8, #1
 801a050:	e7e2      	b.n	801a018 <__gethex+0x328>
 801a052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a054:	f1c3 0301 	rsb	r3, r3, #1
 801a058:	930f      	str	r3, [sp, #60]	; 0x3c
 801a05a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	d0ef      	beq.n	801a040 <__gethex+0x350>
 801a060:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801a064:	f104 0214 	add.w	r2, r4, #20
 801a068:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801a06c:	9301      	str	r3, [sp, #4]
 801a06e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801a072:	2300      	movs	r3, #0
 801a074:	4694      	mov	ip, r2
 801a076:	f852 1b04 	ldr.w	r1, [r2], #4
 801a07a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801a07e:	d01e      	beq.n	801a0be <__gethex+0x3ce>
 801a080:	3101      	adds	r1, #1
 801a082:	f8cc 1000 	str.w	r1, [ip]
 801a086:	f1b8 0f02 	cmp.w	r8, #2
 801a08a:	f104 0214 	add.w	r2, r4, #20
 801a08e:	d13d      	bne.n	801a10c <__gethex+0x41c>
 801a090:	683b      	ldr	r3, [r7, #0]
 801a092:	3b01      	subs	r3, #1
 801a094:	42ab      	cmp	r3, r5
 801a096:	d10b      	bne.n	801a0b0 <__gethex+0x3c0>
 801a098:	1169      	asrs	r1, r5, #5
 801a09a:	2301      	movs	r3, #1
 801a09c:	f005 051f 	and.w	r5, r5, #31
 801a0a0:	fa03 f505 	lsl.w	r5, r3, r5
 801a0a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a0a8:	421d      	tst	r5, r3
 801a0aa:	bf18      	it	ne
 801a0ac:	f04f 0801 	movne.w	r8, #1
 801a0b0:	f048 0820 	orr.w	r8, r8, #32
 801a0b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0b6:	601c      	str	r4, [r3, #0]
 801a0b8:	9b02      	ldr	r3, [sp, #8]
 801a0ba:	601e      	str	r6, [r3, #0]
 801a0bc:	e6a2      	b.n	8019e04 <__gethex+0x114>
 801a0be:	4290      	cmp	r0, r2
 801a0c0:	f842 3c04 	str.w	r3, [r2, #-4]
 801a0c4:	d8d6      	bhi.n	801a074 <__gethex+0x384>
 801a0c6:	68a2      	ldr	r2, [r4, #8]
 801a0c8:	4593      	cmp	fp, r2
 801a0ca:	db17      	blt.n	801a0fc <__gethex+0x40c>
 801a0cc:	6861      	ldr	r1, [r4, #4]
 801a0ce:	4648      	mov	r0, r9
 801a0d0:	3101      	adds	r1, #1
 801a0d2:	f7fd ffe3 	bl	801809c <_Balloc>
 801a0d6:	4682      	mov	sl, r0
 801a0d8:	b918      	cbnz	r0, 801a0e2 <__gethex+0x3f2>
 801a0da:	4b1b      	ldr	r3, [pc, #108]	; (801a148 <__gethex+0x458>)
 801a0dc:	4602      	mov	r2, r0
 801a0de:	2184      	movs	r1, #132	; 0x84
 801a0e0:	e6b3      	b.n	8019e4a <__gethex+0x15a>
 801a0e2:	6922      	ldr	r2, [r4, #16]
 801a0e4:	3202      	adds	r2, #2
 801a0e6:	f104 010c 	add.w	r1, r4, #12
 801a0ea:	0092      	lsls	r2, r2, #2
 801a0ec:	300c      	adds	r0, #12
 801a0ee:	f7fd f844 	bl	801717a <memcpy>
 801a0f2:	4621      	mov	r1, r4
 801a0f4:	4648      	mov	r0, r9
 801a0f6:	f7fe f811 	bl	801811c <_Bfree>
 801a0fa:	4654      	mov	r4, sl
 801a0fc:	6922      	ldr	r2, [r4, #16]
 801a0fe:	1c51      	adds	r1, r2, #1
 801a100:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a104:	6121      	str	r1, [r4, #16]
 801a106:	2101      	movs	r1, #1
 801a108:	6151      	str	r1, [r2, #20]
 801a10a:	e7bc      	b.n	801a086 <__gethex+0x396>
 801a10c:	6921      	ldr	r1, [r4, #16]
 801a10e:	4559      	cmp	r1, fp
 801a110:	dd0b      	ble.n	801a12a <__gethex+0x43a>
 801a112:	2101      	movs	r1, #1
 801a114:	4620      	mov	r0, r4
 801a116:	f7ff fd83 	bl	8019c20 <rshift>
 801a11a:	68bb      	ldr	r3, [r7, #8]
 801a11c:	3601      	adds	r6, #1
 801a11e:	42b3      	cmp	r3, r6
 801a120:	f6ff aedb 	blt.w	8019eda <__gethex+0x1ea>
 801a124:	f04f 0801 	mov.w	r8, #1
 801a128:	e7c2      	b.n	801a0b0 <__gethex+0x3c0>
 801a12a:	f015 051f 	ands.w	r5, r5, #31
 801a12e:	d0f9      	beq.n	801a124 <__gethex+0x434>
 801a130:	9b01      	ldr	r3, [sp, #4]
 801a132:	441a      	add	r2, r3
 801a134:	f1c5 0520 	rsb	r5, r5, #32
 801a138:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801a13c:	f7fe f8a0 	bl	8018280 <__hi0bits>
 801a140:	42a8      	cmp	r0, r5
 801a142:	dbe6      	blt.n	801a112 <__gethex+0x422>
 801a144:	e7ee      	b.n	801a124 <__gethex+0x434>
 801a146:	bf00      	nop
 801a148:	0801d6c5 	.word	0x0801d6c5

0801a14c <L_shift>:
 801a14c:	f1c2 0208 	rsb	r2, r2, #8
 801a150:	0092      	lsls	r2, r2, #2
 801a152:	b570      	push	{r4, r5, r6, lr}
 801a154:	f1c2 0620 	rsb	r6, r2, #32
 801a158:	6843      	ldr	r3, [r0, #4]
 801a15a:	6804      	ldr	r4, [r0, #0]
 801a15c:	fa03 f506 	lsl.w	r5, r3, r6
 801a160:	432c      	orrs	r4, r5
 801a162:	40d3      	lsrs	r3, r2
 801a164:	6004      	str	r4, [r0, #0]
 801a166:	f840 3f04 	str.w	r3, [r0, #4]!
 801a16a:	4288      	cmp	r0, r1
 801a16c:	d3f4      	bcc.n	801a158 <L_shift+0xc>
 801a16e:	bd70      	pop	{r4, r5, r6, pc}

0801a170 <__match>:
 801a170:	b530      	push	{r4, r5, lr}
 801a172:	6803      	ldr	r3, [r0, #0]
 801a174:	3301      	adds	r3, #1
 801a176:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a17a:	b914      	cbnz	r4, 801a182 <__match+0x12>
 801a17c:	6003      	str	r3, [r0, #0]
 801a17e:	2001      	movs	r0, #1
 801a180:	bd30      	pop	{r4, r5, pc}
 801a182:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a186:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801a18a:	2d19      	cmp	r5, #25
 801a18c:	bf98      	it	ls
 801a18e:	3220      	addls	r2, #32
 801a190:	42a2      	cmp	r2, r4
 801a192:	d0f0      	beq.n	801a176 <__match+0x6>
 801a194:	2000      	movs	r0, #0
 801a196:	e7f3      	b.n	801a180 <__match+0x10>

0801a198 <__hexnan>:
 801a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a19c:	680b      	ldr	r3, [r1, #0]
 801a19e:	6801      	ldr	r1, [r0, #0]
 801a1a0:	115e      	asrs	r6, r3, #5
 801a1a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a1a6:	f013 031f 	ands.w	r3, r3, #31
 801a1aa:	b087      	sub	sp, #28
 801a1ac:	bf18      	it	ne
 801a1ae:	3604      	addne	r6, #4
 801a1b0:	2500      	movs	r5, #0
 801a1b2:	1f37      	subs	r7, r6, #4
 801a1b4:	4682      	mov	sl, r0
 801a1b6:	4690      	mov	r8, r2
 801a1b8:	9301      	str	r3, [sp, #4]
 801a1ba:	f846 5c04 	str.w	r5, [r6, #-4]
 801a1be:	46b9      	mov	r9, r7
 801a1c0:	463c      	mov	r4, r7
 801a1c2:	9502      	str	r5, [sp, #8]
 801a1c4:	46ab      	mov	fp, r5
 801a1c6:	784a      	ldrb	r2, [r1, #1]
 801a1c8:	1c4b      	adds	r3, r1, #1
 801a1ca:	9303      	str	r3, [sp, #12]
 801a1cc:	b342      	cbz	r2, 801a220 <__hexnan+0x88>
 801a1ce:	4610      	mov	r0, r2
 801a1d0:	9105      	str	r1, [sp, #20]
 801a1d2:	9204      	str	r2, [sp, #16]
 801a1d4:	f7ff fd76 	bl	8019cc4 <__hexdig_fun>
 801a1d8:	2800      	cmp	r0, #0
 801a1da:	d14f      	bne.n	801a27c <__hexnan+0xe4>
 801a1dc:	9a04      	ldr	r2, [sp, #16]
 801a1de:	9905      	ldr	r1, [sp, #20]
 801a1e0:	2a20      	cmp	r2, #32
 801a1e2:	d818      	bhi.n	801a216 <__hexnan+0x7e>
 801a1e4:	9b02      	ldr	r3, [sp, #8]
 801a1e6:	459b      	cmp	fp, r3
 801a1e8:	dd13      	ble.n	801a212 <__hexnan+0x7a>
 801a1ea:	454c      	cmp	r4, r9
 801a1ec:	d206      	bcs.n	801a1fc <__hexnan+0x64>
 801a1ee:	2d07      	cmp	r5, #7
 801a1f0:	dc04      	bgt.n	801a1fc <__hexnan+0x64>
 801a1f2:	462a      	mov	r2, r5
 801a1f4:	4649      	mov	r1, r9
 801a1f6:	4620      	mov	r0, r4
 801a1f8:	f7ff ffa8 	bl	801a14c <L_shift>
 801a1fc:	4544      	cmp	r4, r8
 801a1fe:	d950      	bls.n	801a2a2 <__hexnan+0x10a>
 801a200:	2300      	movs	r3, #0
 801a202:	f1a4 0904 	sub.w	r9, r4, #4
 801a206:	f844 3c04 	str.w	r3, [r4, #-4]
 801a20a:	f8cd b008 	str.w	fp, [sp, #8]
 801a20e:	464c      	mov	r4, r9
 801a210:	461d      	mov	r5, r3
 801a212:	9903      	ldr	r1, [sp, #12]
 801a214:	e7d7      	b.n	801a1c6 <__hexnan+0x2e>
 801a216:	2a29      	cmp	r2, #41	; 0x29
 801a218:	d155      	bne.n	801a2c6 <__hexnan+0x12e>
 801a21a:	3102      	adds	r1, #2
 801a21c:	f8ca 1000 	str.w	r1, [sl]
 801a220:	f1bb 0f00 	cmp.w	fp, #0
 801a224:	d04f      	beq.n	801a2c6 <__hexnan+0x12e>
 801a226:	454c      	cmp	r4, r9
 801a228:	d206      	bcs.n	801a238 <__hexnan+0xa0>
 801a22a:	2d07      	cmp	r5, #7
 801a22c:	dc04      	bgt.n	801a238 <__hexnan+0xa0>
 801a22e:	462a      	mov	r2, r5
 801a230:	4649      	mov	r1, r9
 801a232:	4620      	mov	r0, r4
 801a234:	f7ff ff8a 	bl	801a14c <L_shift>
 801a238:	4544      	cmp	r4, r8
 801a23a:	d934      	bls.n	801a2a6 <__hexnan+0x10e>
 801a23c:	f1a8 0204 	sub.w	r2, r8, #4
 801a240:	4623      	mov	r3, r4
 801a242:	f853 1b04 	ldr.w	r1, [r3], #4
 801a246:	f842 1f04 	str.w	r1, [r2, #4]!
 801a24a:	429f      	cmp	r7, r3
 801a24c:	d2f9      	bcs.n	801a242 <__hexnan+0xaa>
 801a24e:	1b3b      	subs	r3, r7, r4
 801a250:	f023 0303 	bic.w	r3, r3, #3
 801a254:	3304      	adds	r3, #4
 801a256:	3e03      	subs	r6, #3
 801a258:	3401      	adds	r4, #1
 801a25a:	42a6      	cmp	r6, r4
 801a25c:	bf38      	it	cc
 801a25e:	2304      	movcc	r3, #4
 801a260:	4443      	add	r3, r8
 801a262:	2200      	movs	r2, #0
 801a264:	f843 2b04 	str.w	r2, [r3], #4
 801a268:	429f      	cmp	r7, r3
 801a26a:	d2fb      	bcs.n	801a264 <__hexnan+0xcc>
 801a26c:	683b      	ldr	r3, [r7, #0]
 801a26e:	b91b      	cbnz	r3, 801a278 <__hexnan+0xe0>
 801a270:	4547      	cmp	r7, r8
 801a272:	d126      	bne.n	801a2c2 <__hexnan+0x12a>
 801a274:	2301      	movs	r3, #1
 801a276:	603b      	str	r3, [r7, #0]
 801a278:	2005      	movs	r0, #5
 801a27a:	e025      	b.n	801a2c8 <__hexnan+0x130>
 801a27c:	3501      	adds	r5, #1
 801a27e:	2d08      	cmp	r5, #8
 801a280:	f10b 0b01 	add.w	fp, fp, #1
 801a284:	dd06      	ble.n	801a294 <__hexnan+0xfc>
 801a286:	4544      	cmp	r4, r8
 801a288:	d9c3      	bls.n	801a212 <__hexnan+0x7a>
 801a28a:	2300      	movs	r3, #0
 801a28c:	f844 3c04 	str.w	r3, [r4, #-4]
 801a290:	2501      	movs	r5, #1
 801a292:	3c04      	subs	r4, #4
 801a294:	6822      	ldr	r2, [r4, #0]
 801a296:	f000 000f 	and.w	r0, r0, #15
 801a29a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801a29e:	6020      	str	r0, [r4, #0]
 801a2a0:	e7b7      	b.n	801a212 <__hexnan+0x7a>
 801a2a2:	2508      	movs	r5, #8
 801a2a4:	e7b5      	b.n	801a212 <__hexnan+0x7a>
 801a2a6:	9b01      	ldr	r3, [sp, #4]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d0df      	beq.n	801a26c <__hexnan+0xd4>
 801a2ac:	f1c3 0320 	rsb	r3, r3, #32
 801a2b0:	f04f 32ff 	mov.w	r2, #4294967295
 801a2b4:	40da      	lsrs	r2, r3
 801a2b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801a2ba:	4013      	ands	r3, r2
 801a2bc:	f846 3c04 	str.w	r3, [r6, #-4]
 801a2c0:	e7d4      	b.n	801a26c <__hexnan+0xd4>
 801a2c2:	3f04      	subs	r7, #4
 801a2c4:	e7d2      	b.n	801a26c <__hexnan+0xd4>
 801a2c6:	2004      	movs	r0, #4
 801a2c8:	b007      	add	sp, #28
 801a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a2ce <__ascii_mbtowc>:
 801a2ce:	b082      	sub	sp, #8
 801a2d0:	b901      	cbnz	r1, 801a2d4 <__ascii_mbtowc+0x6>
 801a2d2:	a901      	add	r1, sp, #4
 801a2d4:	b142      	cbz	r2, 801a2e8 <__ascii_mbtowc+0x1a>
 801a2d6:	b14b      	cbz	r3, 801a2ec <__ascii_mbtowc+0x1e>
 801a2d8:	7813      	ldrb	r3, [r2, #0]
 801a2da:	600b      	str	r3, [r1, #0]
 801a2dc:	7812      	ldrb	r2, [r2, #0]
 801a2de:	1e10      	subs	r0, r2, #0
 801a2e0:	bf18      	it	ne
 801a2e2:	2001      	movne	r0, #1
 801a2e4:	b002      	add	sp, #8
 801a2e6:	4770      	bx	lr
 801a2e8:	4610      	mov	r0, r2
 801a2ea:	e7fb      	b.n	801a2e4 <__ascii_mbtowc+0x16>
 801a2ec:	f06f 0001 	mvn.w	r0, #1
 801a2f0:	e7f8      	b.n	801a2e4 <__ascii_mbtowc+0x16>

0801a2f2 <_realloc_r>:
 801a2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2f6:	4680      	mov	r8, r0
 801a2f8:	4614      	mov	r4, r2
 801a2fa:	460e      	mov	r6, r1
 801a2fc:	b921      	cbnz	r1, 801a308 <_realloc_r+0x16>
 801a2fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a302:	4611      	mov	r1, r2
 801a304:	f7fd be3e 	b.w	8017f84 <_malloc_r>
 801a308:	b92a      	cbnz	r2, 801a316 <_realloc_r+0x24>
 801a30a:	f7fd fdc7 	bl	8017e9c <_free_r>
 801a30e:	4625      	mov	r5, r4
 801a310:	4628      	mov	r0, r5
 801a312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a316:	f000 f842 	bl	801a39e <_malloc_usable_size_r>
 801a31a:	4284      	cmp	r4, r0
 801a31c:	4607      	mov	r7, r0
 801a31e:	d802      	bhi.n	801a326 <_realloc_r+0x34>
 801a320:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a324:	d812      	bhi.n	801a34c <_realloc_r+0x5a>
 801a326:	4621      	mov	r1, r4
 801a328:	4640      	mov	r0, r8
 801a32a:	f7fd fe2b 	bl	8017f84 <_malloc_r>
 801a32e:	4605      	mov	r5, r0
 801a330:	2800      	cmp	r0, #0
 801a332:	d0ed      	beq.n	801a310 <_realloc_r+0x1e>
 801a334:	42bc      	cmp	r4, r7
 801a336:	4622      	mov	r2, r4
 801a338:	4631      	mov	r1, r6
 801a33a:	bf28      	it	cs
 801a33c:	463a      	movcs	r2, r7
 801a33e:	f7fc ff1c 	bl	801717a <memcpy>
 801a342:	4631      	mov	r1, r6
 801a344:	4640      	mov	r0, r8
 801a346:	f7fd fda9 	bl	8017e9c <_free_r>
 801a34a:	e7e1      	b.n	801a310 <_realloc_r+0x1e>
 801a34c:	4635      	mov	r5, r6
 801a34e:	e7df      	b.n	801a310 <_realloc_r+0x1e>

0801a350 <__ascii_wctomb>:
 801a350:	b149      	cbz	r1, 801a366 <__ascii_wctomb+0x16>
 801a352:	2aff      	cmp	r2, #255	; 0xff
 801a354:	bf85      	ittet	hi
 801a356:	238a      	movhi	r3, #138	; 0x8a
 801a358:	6003      	strhi	r3, [r0, #0]
 801a35a:	700a      	strbls	r2, [r1, #0]
 801a35c:	f04f 30ff 	movhi.w	r0, #4294967295
 801a360:	bf98      	it	ls
 801a362:	2001      	movls	r0, #1
 801a364:	4770      	bx	lr
 801a366:	4608      	mov	r0, r1
 801a368:	4770      	bx	lr
	...

0801a36c <fiprintf>:
 801a36c:	b40e      	push	{r1, r2, r3}
 801a36e:	b503      	push	{r0, r1, lr}
 801a370:	4601      	mov	r1, r0
 801a372:	ab03      	add	r3, sp, #12
 801a374:	4805      	ldr	r0, [pc, #20]	; (801a38c <fiprintf+0x20>)
 801a376:	f853 2b04 	ldr.w	r2, [r3], #4
 801a37a:	6800      	ldr	r0, [r0, #0]
 801a37c:	9301      	str	r3, [sp, #4]
 801a37e:	f000 f83f 	bl	801a400 <_vfiprintf_r>
 801a382:	b002      	add	sp, #8
 801a384:	f85d eb04 	ldr.w	lr, [sp], #4
 801a388:	b003      	add	sp, #12
 801a38a:	4770      	bx	lr
 801a38c:	200003d0 	.word	0x200003d0

0801a390 <abort>:
 801a390:	b508      	push	{r3, lr}
 801a392:	2006      	movs	r0, #6
 801a394:	f000 fa0c 	bl	801a7b0 <raise>
 801a398:	2001      	movs	r0, #1
 801a39a:	f7eb f8f5 	bl	8005588 <_exit>

0801a39e <_malloc_usable_size_r>:
 801a39e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3a2:	1f18      	subs	r0, r3, #4
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	bfbc      	itt	lt
 801a3a8:	580b      	ldrlt	r3, [r1, r0]
 801a3aa:	18c0      	addlt	r0, r0, r3
 801a3ac:	4770      	bx	lr

0801a3ae <__sfputc_r>:
 801a3ae:	6893      	ldr	r3, [r2, #8]
 801a3b0:	3b01      	subs	r3, #1
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	b410      	push	{r4}
 801a3b6:	6093      	str	r3, [r2, #8]
 801a3b8:	da08      	bge.n	801a3cc <__sfputc_r+0x1e>
 801a3ba:	6994      	ldr	r4, [r2, #24]
 801a3bc:	42a3      	cmp	r3, r4
 801a3be:	db01      	blt.n	801a3c4 <__sfputc_r+0x16>
 801a3c0:	290a      	cmp	r1, #10
 801a3c2:	d103      	bne.n	801a3cc <__sfputc_r+0x1e>
 801a3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3c8:	f000 b934 	b.w	801a634 <__swbuf_r>
 801a3cc:	6813      	ldr	r3, [r2, #0]
 801a3ce:	1c58      	adds	r0, r3, #1
 801a3d0:	6010      	str	r0, [r2, #0]
 801a3d2:	7019      	strb	r1, [r3, #0]
 801a3d4:	4608      	mov	r0, r1
 801a3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3da:	4770      	bx	lr

0801a3dc <__sfputs_r>:
 801a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3de:	4606      	mov	r6, r0
 801a3e0:	460f      	mov	r7, r1
 801a3e2:	4614      	mov	r4, r2
 801a3e4:	18d5      	adds	r5, r2, r3
 801a3e6:	42ac      	cmp	r4, r5
 801a3e8:	d101      	bne.n	801a3ee <__sfputs_r+0x12>
 801a3ea:	2000      	movs	r0, #0
 801a3ec:	e007      	b.n	801a3fe <__sfputs_r+0x22>
 801a3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3f2:	463a      	mov	r2, r7
 801a3f4:	4630      	mov	r0, r6
 801a3f6:	f7ff ffda 	bl	801a3ae <__sfputc_r>
 801a3fa:	1c43      	adds	r3, r0, #1
 801a3fc:	d1f3      	bne.n	801a3e6 <__sfputs_r+0xa>
 801a3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a400 <_vfiprintf_r>:
 801a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a404:	460d      	mov	r5, r1
 801a406:	b09d      	sub	sp, #116	; 0x74
 801a408:	4614      	mov	r4, r2
 801a40a:	4698      	mov	r8, r3
 801a40c:	4606      	mov	r6, r0
 801a40e:	b118      	cbz	r0, 801a418 <_vfiprintf_r+0x18>
 801a410:	6a03      	ldr	r3, [r0, #32]
 801a412:	b90b      	cbnz	r3, 801a418 <_vfiprintf_r+0x18>
 801a414:	f7fc fd98 	bl	8016f48 <__sinit>
 801a418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a41a:	07d9      	lsls	r1, r3, #31
 801a41c:	d405      	bmi.n	801a42a <_vfiprintf_r+0x2a>
 801a41e:	89ab      	ldrh	r3, [r5, #12]
 801a420:	059a      	lsls	r2, r3, #22
 801a422:	d402      	bmi.n	801a42a <_vfiprintf_r+0x2a>
 801a424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a426:	f7fc fea6 	bl	8017176 <__retarget_lock_acquire_recursive>
 801a42a:	89ab      	ldrh	r3, [r5, #12]
 801a42c:	071b      	lsls	r3, r3, #28
 801a42e:	d501      	bpl.n	801a434 <_vfiprintf_r+0x34>
 801a430:	692b      	ldr	r3, [r5, #16]
 801a432:	b99b      	cbnz	r3, 801a45c <_vfiprintf_r+0x5c>
 801a434:	4629      	mov	r1, r5
 801a436:	4630      	mov	r0, r6
 801a438:	f000 f93a 	bl	801a6b0 <__swsetup_r>
 801a43c:	b170      	cbz	r0, 801a45c <_vfiprintf_r+0x5c>
 801a43e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a440:	07dc      	lsls	r4, r3, #31
 801a442:	d504      	bpl.n	801a44e <_vfiprintf_r+0x4e>
 801a444:	f04f 30ff 	mov.w	r0, #4294967295
 801a448:	b01d      	add	sp, #116	; 0x74
 801a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a44e:	89ab      	ldrh	r3, [r5, #12]
 801a450:	0598      	lsls	r0, r3, #22
 801a452:	d4f7      	bmi.n	801a444 <_vfiprintf_r+0x44>
 801a454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a456:	f7fc fe8f 	bl	8017178 <__retarget_lock_release_recursive>
 801a45a:	e7f3      	b.n	801a444 <_vfiprintf_r+0x44>
 801a45c:	2300      	movs	r3, #0
 801a45e:	9309      	str	r3, [sp, #36]	; 0x24
 801a460:	2320      	movs	r3, #32
 801a462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a466:	f8cd 800c 	str.w	r8, [sp, #12]
 801a46a:	2330      	movs	r3, #48	; 0x30
 801a46c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a620 <_vfiprintf_r+0x220>
 801a470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a474:	f04f 0901 	mov.w	r9, #1
 801a478:	4623      	mov	r3, r4
 801a47a:	469a      	mov	sl, r3
 801a47c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a480:	b10a      	cbz	r2, 801a486 <_vfiprintf_r+0x86>
 801a482:	2a25      	cmp	r2, #37	; 0x25
 801a484:	d1f9      	bne.n	801a47a <_vfiprintf_r+0x7a>
 801a486:	ebba 0b04 	subs.w	fp, sl, r4
 801a48a:	d00b      	beq.n	801a4a4 <_vfiprintf_r+0xa4>
 801a48c:	465b      	mov	r3, fp
 801a48e:	4622      	mov	r2, r4
 801a490:	4629      	mov	r1, r5
 801a492:	4630      	mov	r0, r6
 801a494:	f7ff ffa2 	bl	801a3dc <__sfputs_r>
 801a498:	3001      	adds	r0, #1
 801a49a:	f000 80a9 	beq.w	801a5f0 <_vfiprintf_r+0x1f0>
 801a49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4a0:	445a      	add	r2, fp
 801a4a2:	9209      	str	r2, [sp, #36]	; 0x24
 801a4a4:	f89a 3000 	ldrb.w	r3, [sl]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	f000 80a1 	beq.w	801a5f0 <_vfiprintf_r+0x1f0>
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	f04f 32ff 	mov.w	r2, #4294967295
 801a4b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a4b8:	f10a 0a01 	add.w	sl, sl, #1
 801a4bc:	9304      	str	r3, [sp, #16]
 801a4be:	9307      	str	r3, [sp, #28]
 801a4c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a4c4:	931a      	str	r3, [sp, #104]	; 0x68
 801a4c6:	4654      	mov	r4, sl
 801a4c8:	2205      	movs	r2, #5
 801a4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4ce:	4854      	ldr	r0, [pc, #336]	; (801a620 <_vfiprintf_r+0x220>)
 801a4d0:	f7e5 fea6 	bl	8000220 <memchr>
 801a4d4:	9a04      	ldr	r2, [sp, #16]
 801a4d6:	b9d8      	cbnz	r0, 801a510 <_vfiprintf_r+0x110>
 801a4d8:	06d1      	lsls	r1, r2, #27
 801a4da:	bf44      	itt	mi
 801a4dc:	2320      	movmi	r3, #32
 801a4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4e2:	0713      	lsls	r3, r2, #28
 801a4e4:	bf44      	itt	mi
 801a4e6:	232b      	movmi	r3, #43	; 0x2b
 801a4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4ec:	f89a 3000 	ldrb.w	r3, [sl]
 801a4f0:	2b2a      	cmp	r3, #42	; 0x2a
 801a4f2:	d015      	beq.n	801a520 <_vfiprintf_r+0x120>
 801a4f4:	9a07      	ldr	r2, [sp, #28]
 801a4f6:	4654      	mov	r4, sl
 801a4f8:	2000      	movs	r0, #0
 801a4fa:	f04f 0c0a 	mov.w	ip, #10
 801a4fe:	4621      	mov	r1, r4
 801a500:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a504:	3b30      	subs	r3, #48	; 0x30
 801a506:	2b09      	cmp	r3, #9
 801a508:	d94d      	bls.n	801a5a6 <_vfiprintf_r+0x1a6>
 801a50a:	b1b0      	cbz	r0, 801a53a <_vfiprintf_r+0x13a>
 801a50c:	9207      	str	r2, [sp, #28]
 801a50e:	e014      	b.n	801a53a <_vfiprintf_r+0x13a>
 801a510:	eba0 0308 	sub.w	r3, r0, r8
 801a514:	fa09 f303 	lsl.w	r3, r9, r3
 801a518:	4313      	orrs	r3, r2
 801a51a:	9304      	str	r3, [sp, #16]
 801a51c:	46a2      	mov	sl, r4
 801a51e:	e7d2      	b.n	801a4c6 <_vfiprintf_r+0xc6>
 801a520:	9b03      	ldr	r3, [sp, #12]
 801a522:	1d19      	adds	r1, r3, #4
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	9103      	str	r1, [sp, #12]
 801a528:	2b00      	cmp	r3, #0
 801a52a:	bfbb      	ittet	lt
 801a52c:	425b      	neglt	r3, r3
 801a52e:	f042 0202 	orrlt.w	r2, r2, #2
 801a532:	9307      	strge	r3, [sp, #28]
 801a534:	9307      	strlt	r3, [sp, #28]
 801a536:	bfb8      	it	lt
 801a538:	9204      	strlt	r2, [sp, #16]
 801a53a:	7823      	ldrb	r3, [r4, #0]
 801a53c:	2b2e      	cmp	r3, #46	; 0x2e
 801a53e:	d10c      	bne.n	801a55a <_vfiprintf_r+0x15a>
 801a540:	7863      	ldrb	r3, [r4, #1]
 801a542:	2b2a      	cmp	r3, #42	; 0x2a
 801a544:	d134      	bne.n	801a5b0 <_vfiprintf_r+0x1b0>
 801a546:	9b03      	ldr	r3, [sp, #12]
 801a548:	1d1a      	adds	r2, r3, #4
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	9203      	str	r2, [sp, #12]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	bfb8      	it	lt
 801a552:	f04f 33ff 	movlt.w	r3, #4294967295
 801a556:	3402      	adds	r4, #2
 801a558:	9305      	str	r3, [sp, #20]
 801a55a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a630 <_vfiprintf_r+0x230>
 801a55e:	7821      	ldrb	r1, [r4, #0]
 801a560:	2203      	movs	r2, #3
 801a562:	4650      	mov	r0, sl
 801a564:	f7e5 fe5c 	bl	8000220 <memchr>
 801a568:	b138      	cbz	r0, 801a57a <_vfiprintf_r+0x17a>
 801a56a:	9b04      	ldr	r3, [sp, #16]
 801a56c:	eba0 000a 	sub.w	r0, r0, sl
 801a570:	2240      	movs	r2, #64	; 0x40
 801a572:	4082      	lsls	r2, r0
 801a574:	4313      	orrs	r3, r2
 801a576:	3401      	adds	r4, #1
 801a578:	9304      	str	r3, [sp, #16]
 801a57a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a57e:	4829      	ldr	r0, [pc, #164]	; (801a624 <_vfiprintf_r+0x224>)
 801a580:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a584:	2206      	movs	r2, #6
 801a586:	f7e5 fe4b 	bl	8000220 <memchr>
 801a58a:	2800      	cmp	r0, #0
 801a58c:	d03f      	beq.n	801a60e <_vfiprintf_r+0x20e>
 801a58e:	4b26      	ldr	r3, [pc, #152]	; (801a628 <_vfiprintf_r+0x228>)
 801a590:	bb1b      	cbnz	r3, 801a5da <_vfiprintf_r+0x1da>
 801a592:	9b03      	ldr	r3, [sp, #12]
 801a594:	3307      	adds	r3, #7
 801a596:	f023 0307 	bic.w	r3, r3, #7
 801a59a:	3308      	adds	r3, #8
 801a59c:	9303      	str	r3, [sp, #12]
 801a59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5a0:	443b      	add	r3, r7
 801a5a2:	9309      	str	r3, [sp, #36]	; 0x24
 801a5a4:	e768      	b.n	801a478 <_vfiprintf_r+0x78>
 801a5a6:	fb0c 3202 	mla	r2, ip, r2, r3
 801a5aa:	460c      	mov	r4, r1
 801a5ac:	2001      	movs	r0, #1
 801a5ae:	e7a6      	b.n	801a4fe <_vfiprintf_r+0xfe>
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	3401      	adds	r4, #1
 801a5b4:	9305      	str	r3, [sp, #20]
 801a5b6:	4619      	mov	r1, r3
 801a5b8:	f04f 0c0a 	mov.w	ip, #10
 801a5bc:	4620      	mov	r0, r4
 801a5be:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5c2:	3a30      	subs	r2, #48	; 0x30
 801a5c4:	2a09      	cmp	r2, #9
 801a5c6:	d903      	bls.n	801a5d0 <_vfiprintf_r+0x1d0>
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d0c6      	beq.n	801a55a <_vfiprintf_r+0x15a>
 801a5cc:	9105      	str	r1, [sp, #20]
 801a5ce:	e7c4      	b.n	801a55a <_vfiprintf_r+0x15a>
 801a5d0:	fb0c 2101 	mla	r1, ip, r1, r2
 801a5d4:	4604      	mov	r4, r0
 801a5d6:	2301      	movs	r3, #1
 801a5d8:	e7f0      	b.n	801a5bc <_vfiprintf_r+0x1bc>
 801a5da:	ab03      	add	r3, sp, #12
 801a5dc:	9300      	str	r3, [sp, #0]
 801a5de:	462a      	mov	r2, r5
 801a5e0:	4b12      	ldr	r3, [pc, #72]	; (801a62c <_vfiprintf_r+0x22c>)
 801a5e2:	a904      	add	r1, sp, #16
 801a5e4:	4630      	mov	r0, r6
 801a5e6:	f7fb fe4d 	bl	8016284 <_printf_float>
 801a5ea:	4607      	mov	r7, r0
 801a5ec:	1c78      	adds	r0, r7, #1
 801a5ee:	d1d6      	bne.n	801a59e <_vfiprintf_r+0x19e>
 801a5f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5f2:	07d9      	lsls	r1, r3, #31
 801a5f4:	d405      	bmi.n	801a602 <_vfiprintf_r+0x202>
 801a5f6:	89ab      	ldrh	r3, [r5, #12]
 801a5f8:	059a      	lsls	r2, r3, #22
 801a5fa:	d402      	bmi.n	801a602 <_vfiprintf_r+0x202>
 801a5fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5fe:	f7fc fdbb 	bl	8017178 <__retarget_lock_release_recursive>
 801a602:	89ab      	ldrh	r3, [r5, #12]
 801a604:	065b      	lsls	r3, r3, #25
 801a606:	f53f af1d 	bmi.w	801a444 <_vfiprintf_r+0x44>
 801a60a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a60c:	e71c      	b.n	801a448 <_vfiprintf_r+0x48>
 801a60e:	ab03      	add	r3, sp, #12
 801a610:	9300      	str	r3, [sp, #0]
 801a612:	462a      	mov	r2, r5
 801a614:	4b05      	ldr	r3, [pc, #20]	; (801a62c <_vfiprintf_r+0x22c>)
 801a616:	a904      	add	r1, sp, #16
 801a618:	4630      	mov	r0, r6
 801a61a:	f7fc f8d7 	bl	80167cc <_printf_i>
 801a61e:	e7e4      	b.n	801a5ea <_vfiprintf_r+0x1ea>
 801a620:	0801d981 	.word	0x0801d981
 801a624:	0801d98b 	.word	0x0801d98b
 801a628:	08016285 	.word	0x08016285
 801a62c:	0801a3dd 	.word	0x0801a3dd
 801a630:	0801d987 	.word	0x0801d987

0801a634 <__swbuf_r>:
 801a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a636:	460e      	mov	r6, r1
 801a638:	4614      	mov	r4, r2
 801a63a:	4605      	mov	r5, r0
 801a63c:	b118      	cbz	r0, 801a646 <__swbuf_r+0x12>
 801a63e:	6a03      	ldr	r3, [r0, #32]
 801a640:	b90b      	cbnz	r3, 801a646 <__swbuf_r+0x12>
 801a642:	f7fc fc81 	bl	8016f48 <__sinit>
 801a646:	69a3      	ldr	r3, [r4, #24]
 801a648:	60a3      	str	r3, [r4, #8]
 801a64a:	89a3      	ldrh	r3, [r4, #12]
 801a64c:	071a      	lsls	r2, r3, #28
 801a64e:	d525      	bpl.n	801a69c <__swbuf_r+0x68>
 801a650:	6923      	ldr	r3, [r4, #16]
 801a652:	b31b      	cbz	r3, 801a69c <__swbuf_r+0x68>
 801a654:	6823      	ldr	r3, [r4, #0]
 801a656:	6922      	ldr	r2, [r4, #16]
 801a658:	1a98      	subs	r0, r3, r2
 801a65a:	6963      	ldr	r3, [r4, #20]
 801a65c:	b2f6      	uxtb	r6, r6
 801a65e:	4283      	cmp	r3, r0
 801a660:	4637      	mov	r7, r6
 801a662:	dc04      	bgt.n	801a66e <__swbuf_r+0x3a>
 801a664:	4621      	mov	r1, r4
 801a666:	4628      	mov	r0, r5
 801a668:	f7ff fa3a 	bl	8019ae0 <_fflush_r>
 801a66c:	b9e0      	cbnz	r0, 801a6a8 <__swbuf_r+0x74>
 801a66e:	68a3      	ldr	r3, [r4, #8]
 801a670:	3b01      	subs	r3, #1
 801a672:	60a3      	str	r3, [r4, #8]
 801a674:	6823      	ldr	r3, [r4, #0]
 801a676:	1c5a      	adds	r2, r3, #1
 801a678:	6022      	str	r2, [r4, #0]
 801a67a:	701e      	strb	r6, [r3, #0]
 801a67c:	6962      	ldr	r2, [r4, #20]
 801a67e:	1c43      	adds	r3, r0, #1
 801a680:	429a      	cmp	r2, r3
 801a682:	d004      	beq.n	801a68e <__swbuf_r+0x5a>
 801a684:	89a3      	ldrh	r3, [r4, #12]
 801a686:	07db      	lsls	r3, r3, #31
 801a688:	d506      	bpl.n	801a698 <__swbuf_r+0x64>
 801a68a:	2e0a      	cmp	r6, #10
 801a68c:	d104      	bne.n	801a698 <__swbuf_r+0x64>
 801a68e:	4621      	mov	r1, r4
 801a690:	4628      	mov	r0, r5
 801a692:	f7ff fa25 	bl	8019ae0 <_fflush_r>
 801a696:	b938      	cbnz	r0, 801a6a8 <__swbuf_r+0x74>
 801a698:	4638      	mov	r0, r7
 801a69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a69c:	4621      	mov	r1, r4
 801a69e:	4628      	mov	r0, r5
 801a6a0:	f000 f806 	bl	801a6b0 <__swsetup_r>
 801a6a4:	2800      	cmp	r0, #0
 801a6a6:	d0d5      	beq.n	801a654 <__swbuf_r+0x20>
 801a6a8:	f04f 37ff 	mov.w	r7, #4294967295
 801a6ac:	e7f4      	b.n	801a698 <__swbuf_r+0x64>
	...

0801a6b0 <__swsetup_r>:
 801a6b0:	b538      	push	{r3, r4, r5, lr}
 801a6b2:	4b2a      	ldr	r3, [pc, #168]	; (801a75c <__swsetup_r+0xac>)
 801a6b4:	4605      	mov	r5, r0
 801a6b6:	6818      	ldr	r0, [r3, #0]
 801a6b8:	460c      	mov	r4, r1
 801a6ba:	b118      	cbz	r0, 801a6c4 <__swsetup_r+0x14>
 801a6bc:	6a03      	ldr	r3, [r0, #32]
 801a6be:	b90b      	cbnz	r3, 801a6c4 <__swsetup_r+0x14>
 801a6c0:	f7fc fc42 	bl	8016f48 <__sinit>
 801a6c4:	89a3      	ldrh	r3, [r4, #12]
 801a6c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a6ca:	0718      	lsls	r0, r3, #28
 801a6cc:	d422      	bmi.n	801a714 <__swsetup_r+0x64>
 801a6ce:	06d9      	lsls	r1, r3, #27
 801a6d0:	d407      	bmi.n	801a6e2 <__swsetup_r+0x32>
 801a6d2:	2309      	movs	r3, #9
 801a6d4:	602b      	str	r3, [r5, #0]
 801a6d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a6da:	81a3      	strh	r3, [r4, #12]
 801a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a6e0:	e034      	b.n	801a74c <__swsetup_r+0x9c>
 801a6e2:	0758      	lsls	r0, r3, #29
 801a6e4:	d512      	bpl.n	801a70c <__swsetup_r+0x5c>
 801a6e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a6e8:	b141      	cbz	r1, 801a6fc <__swsetup_r+0x4c>
 801a6ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a6ee:	4299      	cmp	r1, r3
 801a6f0:	d002      	beq.n	801a6f8 <__swsetup_r+0x48>
 801a6f2:	4628      	mov	r0, r5
 801a6f4:	f7fd fbd2 	bl	8017e9c <_free_r>
 801a6f8:	2300      	movs	r3, #0
 801a6fa:	6363      	str	r3, [r4, #52]	; 0x34
 801a6fc:	89a3      	ldrh	r3, [r4, #12]
 801a6fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a702:	81a3      	strh	r3, [r4, #12]
 801a704:	2300      	movs	r3, #0
 801a706:	6063      	str	r3, [r4, #4]
 801a708:	6923      	ldr	r3, [r4, #16]
 801a70a:	6023      	str	r3, [r4, #0]
 801a70c:	89a3      	ldrh	r3, [r4, #12]
 801a70e:	f043 0308 	orr.w	r3, r3, #8
 801a712:	81a3      	strh	r3, [r4, #12]
 801a714:	6923      	ldr	r3, [r4, #16]
 801a716:	b94b      	cbnz	r3, 801a72c <__swsetup_r+0x7c>
 801a718:	89a3      	ldrh	r3, [r4, #12]
 801a71a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a71e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a722:	d003      	beq.n	801a72c <__swsetup_r+0x7c>
 801a724:	4621      	mov	r1, r4
 801a726:	4628      	mov	r0, r5
 801a728:	f000 f884 	bl	801a834 <__smakebuf_r>
 801a72c:	89a0      	ldrh	r0, [r4, #12]
 801a72e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a732:	f010 0301 	ands.w	r3, r0, #1
 801a736:	d00a      	beq.n	801a74e <__swsetup_r+0x9e>
 801a738:	2300      	movs	r3, #0
 801a73a:	60a3      	str	r3, [r4, #8]
 801a73c:	6963      	ldr	r3, [r4, #20]
 801a73e:	425b      	negs	r3, r3
 801a740:	61a3      	str	r3, [r4, #24]
 801a742:	6923      	ldr	r3, [r4, #16]
 801a744:	b943      	cbnz	r3, 801a758 <__swsetup_r+0xa8>
 801a746:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a74a:	d1c4      	bne.n	801a6d6 <__swsetup_r+0x26>
 801a74c:	bd38      	pop	{r3, r4, r5, pc}
 801a74e:	0781      	lsls	r1, r0, #30
 801a750:	bf58      	it	pl
 801a752:	6963      	ldrpl	r3, [r4, #20]
 801a754:	60a3      	str	r3, [r4, #8]
 801a756:	e7f4      	b.n	801a742 <__swsetup_r+0x92>
 801a758:	2000      	movs	r0, #0
 801a75a:	e7f7      	b.n	801a74c <__swsetup_r+0x9c>
 801a75c:	200003d0 	.word	0x200003d0

0801a760 <_raise_r>:
 801a760:	291f      	cmp	r1, #31
 801a762:	b538      	push	{r3, r4, r5, lr}
 801a764:	4604      	mov	r4, r0
 801a766:	460d      	mov	r5, r1
 801a768:	d904      	bls.n	801a774 <_raise_r+0x14>
 801a76a:	2316      	movs	r3, #22
 801a76c:	6003      	str	r3, [r0, #0]
 801a76e:	f04f 30ff 	mov.w	r0, #4294967295
 801a772:	bd38      	pop	{r3, r4, r5, pc}
 801a774:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a776:	b112      	cbz	r2, 801a77e <_raise_r+0x1e>
 801a778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a77c:	b94b      	cbnz	r3, 801a792 <_raise_r+0x32>
 801a77e:	4620      	mov	r0, r4
 801a780:	f000 f830 	bl	801a7e4 <_getpid_r>
 801a784:	462a      	mov	r2, r5
 801a786:	4601      	mov	r1, r0
 801a788:	4620      	mov	r0, r4
 801a78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a78e:	f000 b817 	b.w	801a7c0 <_kill_r>
 801a792:	2b01      	cmp	r3, #1
 801a794:	d00a      	beq.n	801a7ac <_raise_r+0x4c>
 801a796:	1c59      	adds	r1, r3, #1
 801a798:	d103      	bne.n	801a7a2 <_raise_r+0x42>
 801a79a:	2316      	movs	r3, #22
 801a79c:	6003      	str	r3, [r0, #0]
 801a79e:	2001      	movs	r0, #1
 801a7a0:	e7e7      	b.n	801a772 <_raise_r+0x12>
 801a7a2:	2400      	movs	r4, #0
 801a7a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a7a8:	4628      	mov	r0, r5
 801a7aa:	4798      	blx	r3
 801a7ac:	2000      	movs	r0, #0
 801a7ae:	e7e0      	b.n	801a772 <_raise_r+0x12>

0801a7b0 <raise>:
 801a7b0:	4b02      	ldr	r3, [pc, #8]	; (801a7bc <raise+0xc>)
 801a7b2:	4601      	mov	r1, r0
 801a7b4:	6818      	ldr	r0, [r3, #0]
 801a7b6:	f7ff bfd3 	b.w	801a760 <_raise_r>
 801a7ba:	bf00      	nop
 801a7bc:	200003d0 	.word	0x200003d0

0801a7c0 <_kill_r>:
 801a7c0:	b538      	push	{r3, r4, r5, lr}
 801a7c2:	4d07      	ldr	r5, [pc, #28]	; (801a7e0 <_kill_r+0x20>)
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	4604      	mov	r4, r0
 801a7c8:	4608      	mov	r0, r1
 801a7ca:	4611      	mov	r1, r2
 801a7cc:	602b      	str	r3, [r5, #0]
 801a7ce:	f7ea fecb 	bl	8005568 <_kill>
 801a7d2:	1c43      	adds	r3, r0, #1
 801a7d4:	d102      	bne.n	801a7dc <_kill_r+0x1c>
 801a7d6:	682b      	ldr	r3, [r5, #0]
 801a7d8:	b103      	cbz	r3, 801a7dc <_kill_r+0x1c>
 801a7da:	6023      	str	r3, [r4, #0]
 801a7dc:	bd38      	pop	{r3, r4, r5, pc}
 801a7de:	bf00      	nop
 801a7e0:	200036e8 	.word	0x200036e8

0801a7e4 <_getpid_r>:
 801a7e4:	f7ea beb8 	b.w	8005558 <_getpid>

0801a7e8 <__swhatbuf_r>:
 801a7e8:	b570      	push	{r4, r5, r6, lr}
 801a7ea:	460c      	mov	r4, r1
 801a7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7f0:	2900      	cmp	r1, #0
 801a7f2:	b096      	sub	sp, #88	; 0x58
 801a7f4:	4615      	mov	r5, r2
 801a7f6:	461e      	mov	r6, r3
 801a7f8:	da0d      	bge.n	801a816 <__swhatbuf_r+0x2e>
 801a7fa:	89a3      	ldrh	r3, [r4, #12]
 801a7fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a800:	f04f 0100 	mov.w	r1, #0
 801a804:	bf0c      	ite	eq
 801a806:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a80a:	2340      	movne	r3, #64	; 0x40
 801a80c:	2000      	movs	r0, #0
 801a80e:	6031      	str	r1, [r6, #0]
 801a810:	602b      	str	r3, [r5, #0]
 801a812:	b016      	add	sp, #88	; 0x58
 801a814:	bd70      	pop	{r4, r5, r6, pc}
 801a816:	466a      	mov	r2, sp
 801a818:	f000 f848 	bl	801a8ac <_fstat_r>
 801a81c:	2800      	cmp	r0, #0
 801a81e:	dbec      	blt.n	801a7fa <__swhatbuf_r+0x12>
 801a820:	9901      	ldr	r1, [sp, #4]
 801a822:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a826:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a82a:	4259      	negs	r1, r3
 801a82c:	4159      	adcs	r1, r3
 801a82e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a832:	e7eb      	b.n	801a80c <__swhatbuf_r+0x24>

0801a834 <__smakebuf_r>:
 801a834:	898b      	ldrh	r3, [r1, #12]
 801a836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a838:	079d      	lsls	r5, r3, #30
 801a83a:	4606      	mov	r6, r0
 801a83c:	460c      	mov	r4, r1
 801a83e:	d507      	bpl.n	801a850 <__smakebuf_r+0x1c>
 801a840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a844:	6023      	str	r3, [r4, #0]
 801a846:	6123      	str	r3, [r4, #16]
 801a848:	2301      	movs	r3, #1
 801a84a:	6163      	str	r3, [r4, #20]
 801a84c:	b002      	add	sp, #8
 801a84e:	bd70      	pop	{r4, r5, r6, pc}
 801a850:	ab01      	add	r3, sp, #4
 801a852:	466a      	mov	r2, sp
 801a854:	f7ff ffc8 	bl	801a7e8 <__swhatbuf_r>
 801a858:	9900      	ldr	r1, [sp, #0]
 801a85a:	4605      	mov	r5, r0
 801a85c:	4630      	mov	r0, r6
 801a85e:	f7fd fb91 	bl	8017f84 <_malloc_r>
 801a862:	b948      	cbnz	r0, 801a878 <__smakebuf_r+0x44>
 801a864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a868:	059a      	lsls	r2, r3, #22
 801a86a:	d4ef      	bmi.n	801a84c <__smakebuf_r+0x18>
 801a86c:	f023 0303 	bic.w	r3, r3, #3
 801a870:	f043 0302 	orr.w	r3, r3, #2
 801a874:	81a3      	strh	r3, [r4, #12]
 801a876:	e7e3      	b.n	801a840 <__smakebuf_r+0xc>
 801a878:	89a3      	ldrh	r3, [r4, #12]
 801a87a:	6020      	str	r0, [r4, #0]
 801a87c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a880:	81a3      	strh	r3, [r4, #12]
 801a882:	9b00      	ldr	r3, [sp, #0]
 801a884:	6163      	str	r3, [r4, #20]
 801a886:	9b01      	ldr	r3, [sp, #4]
 801a888:	6120      	str	r0, [r4, #16]
 801a88a:	b15b      	cbz	r3, 801a8a4 <__smakebuf_r+0x70>
 801a88c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a890:	4630      	mov	r0, r6
 801a892:	f000 f81d 	bl	801a8d0 <_isatty_r>
 801a896:	b128      	cbz	r0, 801a8a4 <__smakebuf_r+0x70>
 801a898:	89a3      	ldrh	r3, [r4, #12]
 801a89a:	f023 0303 	bic.w	r3, r3, #3
 801a89e:	f043 0301 	orr.w	r3, r3, #1
 801a8a2:	81a3      	strh	r3, [r4, #12]
 801a8a4:	89a3      	ldrh	r3, [r4, #12]
 801a8a6:	431d      	orrs	r5, r3
 801a8a8:	81a5      	strh	r5, [r4, #12]
 801a8aa:	e7cf      	b.n	801a84c <__smakebuf_r+0x18>

0801a8ac <_fstat_r>:
 801a8ac:	b538      	push	{r3, r4, r5, lr}
 801a8ae:	4d07      	ldr	r5, [pc, #28]	; (801a8cc <_fstat_r+0x20>)
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	4604      	mov	r4, r0
 801a8b4:	4608      	mov	r0, r1
 801a8b6:	4611      	mov	r1, r2
 801a8b8:	602b      	str	r3, [r5, #0]
 801a8ba:	f7ea feb4 	bl	8005626 <_fstat>
 801a8be:	1c43      	adds	r3, r0, #1
 801a8c0:	d102      	bne.n	801a8c8 <_fstat_r+0x1c>
 801a8c2:	682b      	ldr	r3, [r5, #0]
 801a8c4:	b103      	cbz	r3, 801a8c8 <_fstat_r+0x1c>
 801a8c6:	6023      	str	r3, [r4, #0]
 801a8c8:	bd38      	pop	{r3, r4, r5, pc}
 801a8ca:	bf00      	nop
 801a8cc:	200036e8 	.word	0x200036e8

0801a8d0 <_isatty_r>:
 801a8d0:	b538      	push	{r3, r4, r5, lr}
 801a8d2:	4d06      	ldr	r5, [pc, #24]	; (801a8ec <_isatty_r+0x1c>)
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	4604      	mov	r4, r0
 801a8d8:	4608      	mov	r0, r1
 801a8da:	602b      	str	r3, [r5, #0]
 801a8dc:	f7ea feb3 	bl	8005646 <_isatty>
 801a8e0:	1c43      	adds	r3, r0, #1
 801a8e2:	d102      	bne.n	801a8ea <_isatty_r+0x1a>
 801a8e4:	682b      	ldr	r3, [r5, #0]
 801a8e6:	b103      	cbz	r3, 801a8ea <_isatty_r+0x1a>
 801a8e8:	6023      	str	r3, [r4, #0]
 801a8ea:	bd38      	pop	{r3, r4, r5, pc}
 801a8ec:	200036e8 	.word	0x200036e8

0801a8f0 <fmod>:
 801a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8f2:	ed2d 8b02 	vpush	{d8}
 801a8f6:	ec57 6b10 	vmov	r6, r7, d0
 801a8fa:	ec55 4b11 	vmov	r4, r5, d1
 801a8fe:	f000 f86d 	bl	801a9dc <__ieee754_fmod>
 801a902:	4622      	mov	r2, r4
 801a904:	462b      	mov	r3, r5
 801a906:	4630      	mov	r0, r6
 801a908:	4639      	mov	r1, r7
 801a90a:	eeb0 8a40 	vmov.f32	s16, s0
 801a90e:	eef0 8a60 	vmov.f32	s17, s1
 801a912:	f7e6 f933 	bl	8000b7c <__aeabi_dcmpun>
 801a916:	b990      	cbnz	r0, 801a93e <fmod+0x4e>
 801a918:	2200      	movs	r2, #0
 801a91a:	2300      	movs	r3, #0
 801a91c:	4620      	mov	r0, r4
 801a91e:	4629      	mov	r1, r5
 801a920:	f7e6 f8fa 	bl	8000b18 <__aeabi_dcmpeq>
 801a924:	b158      	cbz	r0, 801a93e <fmod+0x4e>
 801a926:	f7fc fbfb 	bl	8017120 <__errno>
 801a92a:	2321      	movs	r3, #33	; 0x21
 801a92c:	6003      	str	r3, [r0, #0]
 801a92e:	2200      	movs	r2, #0
 801a930:	2300      	movs	r3, #0
 801a932:	4610      	mov	r0, r2
 801a934:	4619      	mov	r1, r3
 801a936:	f7e5 ffb1 	bl	800089c <__aeabi_ddiv>
 801a93a:	ec41 0b18 	vmov	d8, r0, r1
 801a93e:	eeb0 0a48 	vmov.f32	s0, s16
 801a942:	eef0 0a68 	vmov.f32	s1, s17
 801a946:	ecbd 8b02 	vpop	{d8}
 801a94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a94c <round>:
 801a94c:	ec53 2b10 	vmov	r2, r3, d0
 801a950:	b570      	push	{r4, r5, r6, lr}
 801a952:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801a956:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801a95a:	2813      	cmp	r0, #19
 801a95c:	ee10 5a10 	vmov	r5, s0
 801a960:	4619      	mov	r1, r3
 801a962:	dc18      	bgt.n	801a996 <round+0x4a>
 801a964:	2800      	cmp	r0, #0
 801a966:	da09      	bge.n	801a97c <round+0x30>
 801a968:	3001      	adds	r0, #1
 801a96a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801a96e:	d103      	bne.n	801a978 <round+0x2c>
 801a970:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a974:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a978:	2300      	movs	r3, #0
 801a97a:	e02a      	b.n	801a9d2 <round+0x86>
 801a97c:	4c16      	ldr	r4, [pc, #88]	; (801a9d8 <round+0x8c>)
 801a97e:	4104      	asrs	r4, r0
 801a980:	ea03 0604 	and.w	r6, r3, r4
 801a984:	4316      	orrs	r6, r2
 801a986:	d011      	beq.n	801a9ac <round+0x60>
 801a988:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a98c:	4103      	asrs	r3, r0
 801a98e:	440b      	add	r3, r1
 801a990:	ea23 0104 	bic.w	r1, r3, r4
 801a994:	e7f0      	b.n	801a978 <round+0x2c>
 801a996:	2833      	cmp	r0, #51	; 0x33
 801a998:	dd0b      	ble.n	801a9b2 <round+0x66>
 801a99a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a99e:	d105      	bne.n	801a9ac <round+0x60>
 801a9a0:	ee10 0a10 	vmov	r0, s0
 801a9a4:	f7e5 fc9a 	bl	80002dc <__adddf3>
 801a9a8:	4602      	mov	r2, r0
 801a9aa:	460b      	mov	r3, r1
 801a9ac:	ec43 2b10 	vmov	d0, r2, r3
 801a9b0:	bd70      	pop	{r4, r5, r6, pc}
 801a9b2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801a9b6:	f04f 34ff 	mov.w	r4, #4294967295
 801a9ba:	40f4      	lsrs	r4, r6
 801a9bc:	4214      	tst	r4, r2
 801a9be:	d0f5      	beq.n	801a9ac <round+0x60>
 801a9c0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801a9c4:	2301      	movs	r3, #1
 801a9c6:	4083      	lsls	r3, r0
 801a9c8:	195b      	adds	r3, r3, r5
 801a9ca:	bf28      	it	cs
 801a9cc:	3101      	addcs	r1, #1
 801a9ce:	ea23 0304 	bic.w	r3, r3, r4
 801a9d2:	461a      	mov	r2, r3
 801a9d4:	460b      	mov	r3, r1
 801a9d6:	e7e9      	b.n	801a9ac <round+0x60>
 801a9d8:	000fffff 	.word	0x000fffff

0801a9dc <__ieee754_fmod>:
 801a9dc:	ec53 2b11 	vmov	r2, r3, d1
 801a9e0:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801a9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a9e8:	ea5c 0402 	orrs.w	r4, ip, r2
 801a9ec:	ec51 0b10 	vmov	r0, r1, d0
 801a9f0:	ee11 7a10 	vmov	r7, s2
 801a9f4:	ee11 ea10 	vmov	lr, s2
 801a9f8:	461e      	mov	r6, r3
 801a9fa:	d00c      	beq.n	801aa16 <__ieee754_fmod+0x3a>
 801a9fc:	4c78      	ldr	r4, [pc, #480]	; (801abe0 <__ieee754_fmod+0x204>)
 801a9fe:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801aa02:	45a0      	cmp	r8, r4
 801aa04:	4689      	mov	r9, r1
 801aa06:	dc06      	bgt.n	801aa16 <__ieee754_fmod+0x3a>
 801aa08:	4254      	negs	r4, r2
 801aa0a:	4d76      	ldr	r5, [pc, #472]	; (801abe4 <__ieee754_fmod+0x208>)
 801aa0c:	4314      	orrs	r4, r2
 801aa0e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801aa12:	42ac      	cmp	r4, r5
 801aa14:	d909      	bls.n	801aa2a <__ieee754_fmod+0x4e>
 801aa16:	f7e5 fe17 	bl	8000648 <__aeabi_dmul>
 801aa1a:	4602      	mov	r2, r0
 801aa1c:	460b      	mov	r3, r1
 801aa1e:	f7e5 ff3d 	bl	800089c <__aeabi_ddiv>
 801aa22:	ec41 0b10 	vmov	d0, r0, r1
 801aa26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa2a:	45e0      	cmp	r8, ip
 801aa2c:	ee10 aa10 	vmov	sl, s0
 801aa30:	ee10 4a10 	vmov	r4, s0
 801aa34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801aa38:	dc09      	bgt.n	801aa4e <__ieee754_fmod+0x72>
 801aa3a:	dbf2      	blt.n	801aa22 <__ieee754_fmod+0x46>
 801aa3c:	4290      	cmp	r0, r2
 801aa3e:	d3f0      	bcc.n	801aa22 <__ieee754_fmod+0x46>
 801aa40:	d105      	bne.n	801aa4e <__ieee754_fmod+0x72>
 801aa42:	4b69      	ldr	r3, [pc, #420]	; (801abe8 <__ieee754_fmod+0x20c>)
 801aa44:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801aa48:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aa4c:	e7e9      	b.n	801aa22 <__ieee754_fmod+0x46>
 801aa4e:	4a65      	ldr	r2, [pc, #404]	; (801abe4 <__ieee754_fmod+0x208>)
 801aa50:	ea19 0f02 	tst.w	r9, r2
 801aa54:	d148      	bne.n	801aae8 <__ieee754_fmod+0x10c>
 801aa56:	f1b8 0f00 	cmp.w	r8, #0
 801aa5a:	d13d      	bne.n	801aad8 <__ieee754_fmod+0xfc>
 801aa5c:	4963      	ldr	r1, [pc, #396]	; (801abec <__ieee754_fmod+0x210>)
 801aa5e:	4653      	mov	r3, sl
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	dc36      	bgt.n	801aad2 <__ieee754_fmod+0xf6>
 801aa64:	4216      	tst	r6, r2
 801aa66:	d14f      	bne.n	801ab08 <__ieee754_fmod+0x12c>
 801aa68:	f1bc 0f00 	cmp.w	ip, #0
 801aa6c:	d144      	bne.n	801aaf8 <__ieee754_fmod+0x11c>
 801aa6e:	4a5f      	ldr	r2, [pc, #380]	; (801abec <__ieee754_fmod+0x210>)
 801aa70:	463b      	mov	r3, r7
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	dc3d      	bgt.n	801aaf2 <__ieee754_fmod+0x116>
 801aa76:	485e      	ldr	r0, [pc, #376]	; (801abf0 <__ieee754_fmod+0x214>)
 801aa78:	4281      	cmp	r1, r0
 801aa7a:	db4a      	blt.n	801ab12 <__ieee754_fmod+0x136>
 801aa7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801aa80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801aa84:	485a      	ldr	r0, [pc, #360]	; (801abf0 <__ieee754_fmod+0x214>)
 801aa86:	4282      	cmp	r2, r0
 801aa88:	db57      	blt.n	801ab3a <__ieee754_fmod+0x15e>
 801aa8a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801aa8e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801aa92:	1a89      	subs	r1, r1, r2
 801aa94:	1b98      	subs	r0, r3, r6
 801aa96:	eba4 070e 	sub.w	r7, r4, lr
 801aa9a:	2900      	cmp	r1, #0
 801aa9c:	d162      	bne.n	801ab64 <__ieee754_fmod+0x188>
 801aa9e:	4574      	cmp	r4, lr
 801aaa0:	bf38      	it	cc
 801aaa2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801aaa6:	2800      	cmp	r0, #0
 801aaa8:	bfa4      	itt	ge
 801aaaa:	463c      	movge	r4, r7
 801aaac:	4603      	movge	r3, r0
 801aaae:	ea53 0104 	orrs.w	r1, r3, r4
 801aab2:	d0c6      	beq.n	801aa42 <__ieee754_fmod+0x66>
 801aab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801aab8:	db69      	blt.n	801ab8e <__ieee754_fmod+0x1b2>
 801aaba:	494d      	ldr	r1, [pc, #308]	; (801abf0 <__ieee754_fmod+0x214>)
 801aabc:	428a      	cmp	r2, r1
 801aabe:	db6c      	blt.n	801ab9a <__ieee754_fmod+0x1be>
 801aac0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801aac4:	432b      	orrs	r3, r5
 801aac6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801aaca:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801aace:	4620      	mov	r0, r4
 801aad0:	e7a7      	b.n	801aa22 <__ieee754_fmod+0x46>
 801aad2:	3901      	subs	r1, #1
 801aad4:	005b      	lsls	r3, r3, #1
 801aad6:	e7c3      	b.n	801aa60 <__ieee754_fmod+0x84>
 801aad8:	4945      	ldr	r1, [pc, #276]	; (801abf0 <__ieee754_fmod+0x214>)
 801aada:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801aade:	2b00      	cmp	r3, #0
 801aae0:	ddc0      	ble.n	801aa64 <__ieee754_fmod+0x88>
 801aae2:	3901      	subs	r1, #1
 801aae4:	005b      	lsls	r3, r3, #1
 801aae6:	e7fa      	b.n	801aade <__ieee754_fmod+0x102>
 801aae8:	ea4f 5128 	mov.w	r1, r8, asr #20
 801aaec:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801aaf0:	e7b8      	b.n	801aa64 <__ieee754_fmod+0x88>
 801aaf2:	3a01      	subs	r2, #1
 801aaf4:	005b      	lsls	r3, r3, #1
 801aaf6:	e7bc      	b.n	801aa72 <__ieee754_fmod+0x96>
 801aaf8:	4a3d      	ldr	r2, [pc, #244]	; (801abf0 <__ieee754_fmod+0x214>)
 801aafa:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	ddb9      	ble.n	801aa76 <__ieee754_fmod+0x9a>
 801ab02:	3a01      	subs	r2, #1
 801ab04:	005b      	lsls	r3, r3, #1
 801ab06:	e7fa      	b.n	801aafe <__ieee754_fmod+0x122>
 801ab08:	ea4f 522c 	mov.w	r2, ip, asr #20
 801ab0c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ab10:	e7b1      	b.n	801aa76 <__ieee754_fmod+0x9a>
 801ab12:	1a40      	subs	r0, r0, r1
 801ab14:	281f      	cmp	r0, #31
 801ab16:	dc0a      	bgt.n	801ab2e <__ieee754_fmod+0x152>
 801ab18:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801ab1c:	fa08 f800 	lsl.w	r8, r8, r0
 801ab20:	fa2a f303 	lsr.w	r3, sl, r3
 801ab24:	ea43 0308 	orr.w	r3, r3, r8
 801ab28:	fa0a f400 	lsl.w	r4, sl, r0
 801ab2c:	e7aa      	b.n	801aa84 <__ieee754_fmod+0xa8>
 801ab2e:	4b31      	ldr	r3, [pc, #196]	; (801abf4 <__ieee754_fmod+0x218>)
 801ab30:	1a5b      	subs	r3, r3, r1
 801ab32:	fa0a f303 	lsl.w	r3, sl, r3
 801ab36:	2400      	movs	r4, #0
 801ab38:	e7a4      	b.n	801aa84 <__ieee754_fmod+0xa8>
 801ab3a:	1a80      	subs	r0, r0, r2
 801ab3c:	281f      	cmp	r0, #31
 801ab3e:	dc0a      	bgt.n	801ab56 <__ieee754_fmod+0x17a>
 801ab40:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801ab44:	fa0c fc00 	lsl.w	ip, ip, r0
 801ab48:	fa27 f606 	lsr.w	r6, r7, r6
 801ab4c:	ea46 060c 	orr.w	r6, r6, ip
 801ab50:	fa07 fe00 	lsl.w	lr, r7, r0
 801ab54:	e79d      	b.n	801aa92 <__ieee754_fmod+0xb6>
 801ab56:	4e27      	ldr	r6, [pc, #156]	; (801abf4 <__ieee754_fmod+0x218>)
 801ab58:	1ab6      	subs	r6, r6, r2
 801ab5a:	fa07 f606 	lsl.w	r6, r7, r6
 801ab5e:	f04f 0e00 	mov.w	lr, #0
 801ab62:	e796      	b.n	801aa92 <__ieee754_fmod+0xb6>
 801ab64:	4574      	cmp	r4, lr
 801ab66:	bf38      	it	cc
 801ab68:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801ab6c:	2800      	cmp	r0, #0
 801ab6e:	da05      	bge.n	801ab7c <__ieee754_fmod+0x1a0>
 801ab70:	0fe0      	lsrs	r0, r4, #31
 801ab72:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ab76:	0064      	lsls	r4, r4, #1
 801ab78:	3901      	subs	r1, #1
 801ab7a:	e78b      	b.n	801aa94 <__ieee754_fmod+0xb8>
 801ab7c:	ea50 0307 	orrs.w	r3, r0, r7
 801ab80:	f43f af5f 	beq.w	801aa42 <__ieee754_fmod+0x66>
 801ab84:	0ffb      	lsrs	r3, r7, #31
 801ab86:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801ab8a:	007c      	lsls	r4, r7, #1
 801ab8c:	e7f4      	b.n	801ab78 <__ieee754_fmod+0x19c>
 801ab8e:	0fe1      	lsrs	r1, r4, #31
 801ab90:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801ab94:	0064      	lsls	r4, r4, #1
 801ab96:	3a01      	subs	r2, #1
 801ab98:	e78c      	b.n	801aab4 <__ieee754_fmod+0xd8>
 801ab9a:	1a89      	subs	r1, r1, r2
 801ab9c:	2914      	cmp	r1, #20
 801ab9e:	dc0a      	bgt.n	801abb6 <__ieee754_fmod+0x1da>
 801aba0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801aba4:	fa03 f202 	lsl.w	r2, r3, r2
 801aba8:	40cc      	lsrs	r4, r1
 801abaa:	4322      	orrs	r2, r4
 801abac:	410b      	asrs	r3, r1
 801abae:	ea43 0105 	orr.w	r1, r3, r5
 801abb2:	4610      	mov	r0, r2
 801abb4:	e735      	b.n	801aa22 <__ieee754_fmod+0x46>
 801abb6:	291f      	cmp	r1, #31
 801abb8:	dc07      	bgt.n	801abca <__ieee754_fmod+0x1ee>
 801abba:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801abbe:	40cc      	lsrs	r4, r1
 801abc0:	fa03 f202 	lsl.w	r2, r3, r2
 801abc4:	4322      	orrs	r2, r4
 801abc6:	462b      	mov	r3, r5
 801abc8:	e7f1      	b.n	801abae <__ieee754_fmod+0x1d2>
 801abca:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801abce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801abd2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801abd6:	32e2      	adds	r2, #226	; 0xe2
 801abd8:	fa43 f202 	asr.w	r2, r3, r2
 801abdc:	e7f3      	b.n	801abc6 <__ieee754_fmod+0x1ea>
 801abde:	bf00      	nop
 801abe0:	7fefffff 	.word	0x7fefffff
 801abe4:	7ff00000 	.word	0x7ff00000
 801abe8:	0801da38 	.word	0x0801da38
 801abec:	fffffbed 	.word	0xfffffbed
 801abf0:	fffffc02 	.word	0xfffffc02
 801abf4:	fffffbe2 	.word	0xfffffbe2

0801abf8 <_init>:
 801abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abfa:	bf00      	nop
 801abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801abfe:	bc08      	pop	{r3}
 801ac00:	469e      	mov	lr, r3
 801ac02:	4770      	bx	lr

0801ac04 <_fini>:
 801ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac06:	bf00      	nop
 801ac08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac0a:	bc08      	pop	{r3}
 801ac0c:	469e      	mov	lr, r3
 801ac0e:	4770      	bx	lr
